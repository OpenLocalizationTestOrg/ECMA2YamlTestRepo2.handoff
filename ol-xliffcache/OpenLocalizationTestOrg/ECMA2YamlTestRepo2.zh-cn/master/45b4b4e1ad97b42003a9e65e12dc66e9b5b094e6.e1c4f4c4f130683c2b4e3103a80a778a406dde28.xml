{"nodes":[{"pos":[770,799],"content":"Base class for security keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Base class for security keys.","pos":[0,29]}]},{"pos":[811,926],"content":"Security keys are used for cryptographic operations, such as generating digital signatures and encrypting XML data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Security keys are used for cryptographic operations, such as generating digital signatures and encrypting XML data.","pos":[0,115]}]},{"pos":[1458,1559],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref> class."},{"pos":[2202,2275],"content":"When overridden in a derived class, decrypts the specified encrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, decrypts the specified encrypted key.","pos":[0,73]}]},{"pos":[2287,2401],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the static fields of the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[2576,2637],"content":"The cryptographic algorithm that was used to encrypt the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm that was used to encrypt the key.","pos":[0,61]}]},{"pos":[2701,2764],"content":"An array of <xref:System.Byte> that contains the encrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the encrypted key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the encrypted key."}]},{"pos":[2822,2885],"content":"An array of <xref:System.Byte> that contains the decrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the decrypted key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the decrypted key."}]},{"pos":[3465,3528],"content":"When overridden in a derived class, encrypts the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, encrypts the specified key.","pos":[0,63]}]},{"pos":[3540,3654],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the static fields of the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[3829,3881],"content":"The cryptographic algorithm to encrypt the key with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm to encrypt the key with.","pos":[0,52]}]},{"pos":[3945,3998],"content":"An array of <xref:System.Byte> that contains the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the key.","pos":[0,53],"source":"An array of <xref:System.Byte> that contains the key."}]},{"pos":[4056,4119],"content":"An array of <xref:System.Byte> that contains the encrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the encrypted key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the encrypted key."}]},{"pos":[4705,4822],"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm uses asymmetric keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm uses asymmetric keys.","pos":[0,117]}]},{"pos":[4834,4948],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the static fields of the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[5116,5144],"content":"The cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]},{"pos":[5203,5389],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the specified algorithm uses asymmetric keys; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses asymmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5981,6104],"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm is supported by this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm is supported by this class.","pos":[0,123]}]},{"pos":[6271,6299],"content":"The cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]},{"pos":[6358,6550],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the specified algorithm is supported by this class; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm is supported by this class; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7141,7257],"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm uses symmetric keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm uses symmetric keys.","pos":[0,116]}]},{"pos":[7269,7383],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the static fields of the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[7550,7578],"content":"The cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]},{"pos":[7637,7822],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the specified algorithm uses symmetric keys; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses symmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8296,8367],"content":"When overridden in a derived class, gets the size, in bits, of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets the size, in bits, of the key.","pos":[0,71]}]},{"pos":[8484,8514],"content":"The size, in bits, of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bits, of the key.","pos":[0,30]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.SecurityKey\n  id: SecurityKey\n  children:\n  - System.IdentityModel.Tokens.SecurityKey.#ctor\n  - System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.KeySize\n  langs:\n  - csharp\n  name: SecurityKey\n  nameWithType: SecurityKey\n  fullName: System.IdentityModel.Tokens.SecurityKey\n  type: Class\n  summary: Base class for security keys.\n  remarks: Security keys are used for cryptographic operations, such as generating digital signatures and encrypting XML data.\n  syntax:\n    content: public abstract class SecurityKey\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKey.#ctor\n  id: '#ctor'\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: SecurityKey()\n  nameWithType: SecurityKey.SecurityKey()\n  fullName: System.IdentityModel.Tokens.SecurityKey.SecurityKey()\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref> class.\n  syntax:\n    content: protected SecurityKey ();\n    parameters: []\n  overload: System.IdentityModel.Tokens.SecurityKey.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  id: DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: DecryptKey(String,Byte[])\n  nameWithType: SecurityKey.DecryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SecurityKey.DecryptKey(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, decrypts the specified encrypted key.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract byte[] DecryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm that was used to encrypt the key.\n    - id: keyData\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the encrypted key.\n    return:\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the decrypted key.\n  overload: System.IdentityModel.Tokens.SecurityKey.DecryptKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  id: EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: EncryptKey(String,Byte[])\n  nameWithType: SecurityKey.EncryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SecurityKey.EncryptKey(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, encrypts the specified key.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract byte[] EncryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm to encrypt the key with.\n    - id: keyData\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the key.\n    return:\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the encrypted key.\n  overload: System.IdentityModel.Tokens.SecurityKey.EncryptKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  id: IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a value that indicates whether the specified algorithm uses asymmetric keys.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract bool IsAsymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses asymmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  id: IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: IsSupportedAlgorithm(String)\n  nameWithType: SecurityKey.IsSupportedAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a value that indicates whether the specified algorithm is supported by this class.\n  syntax:\n    content: public abstract bool IsSupportedAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm is supported by this class; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  id: IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a value that indicates whether the specified algorithm uses symmetric keys.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract bool IsSymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses symmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKey.KeySize\n  id: KeySize\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: SecurityKey.KeySize\n  fullName: System.IdentityModel.Tokens.SecurityKey.KeySize\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the size, in bits, of the key.\n  syntax:\n    content: public abstract int KeySize { get; }\n    return:\n      type: System.Int32\n      description: The size, in bits, of the key.\n  overload: System.IdentityModel.Tokens.SecurityKey.KeySize*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.IdentityModel.Tokens.SecurityKey.#ctor\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: SecurityKey()\n  nameWithType: SecurityKey.SecurityKey()\n  fullName: System.IdentityModel.Tokens.SecurityKey.SecurityKey()\n- uid: System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: DecryptKey(String,Byte[])\n  nameWithType: SecurityKey.DecryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SecurityKey.DecryptKey(String,Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: EncryptKey(String,Byte[])\n  nameWithType: SecurityKey.EncryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SecurityKey.EncryptKey(String,Byte[])\n- uid: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm(String)\n  nameWithType: SecurityKey.IsSupportedAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKey.KeySize\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: SecurityKey.KeySize\n  fullName: System.IdentityModel.Tokens.SecurityKey.KeySize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IdentityModel.Tokens.SecurityKey.#ctor*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: SecurityKey\n  nameWithType: SecurityKey.SecurityKey\n- uid: System.IdentityModel.Tokens.SecurityKey.DecryptKey*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: DecryptKey\n  nameWithType: SecurityKey.DecryptKey\n- uid: System.IdentityModel.Tokens.SecurityKey.EncryptKey*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: EncryptKey\n  nameWithType: SecurityKey.EncryptKey\n- uid: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm\n  nameWithType: SecurityKey.IsAsymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm\n  nameWithType: SecurityKey.IsSupportedAlgorithm\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm\n  nameWithType: SecurityKey.IsSymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.SecurityKey.KeySize*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: SecurityKey.KeySize\n"}