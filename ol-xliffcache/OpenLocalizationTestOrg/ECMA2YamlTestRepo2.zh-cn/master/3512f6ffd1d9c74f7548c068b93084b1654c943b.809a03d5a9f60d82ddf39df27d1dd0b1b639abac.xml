{"nodes":[{"pos":[909,1076],"content":"Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.","pos":[0,167],"nodes":[{"content":"Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP).","pos":[0,135]},{"content":"This class cannot be inherited.","pos":[136,167]}]}]},{"pos":[3109,3224],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class."},{"pos":[4349,4464],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class."},{"pos":[4476,4742],"content":"This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method does not directly initialize the &lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt; class.","pos":[0,112],"source":"This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class."},{"content":"Calling this method is equivalent to calling the &lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A&gt; constructor and passing <ph id=\"ph1\">`null`</ph>.","pos":[114,266],"source":"  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`."}]},{"pos":[4887,4923],"content":"A byte array. This value is ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte array. This value is ignored.","pos":[0,36],"nodes":[{"content":"A byte array.","pos":[0,13]},{"content":"This value is ignored.","pos":[14,36]}]}]},{"pos":[5625,5770],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified parameters.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class with the specified parameters."},{"pos":[5992,6059],"content":"The parameters to pass to the cryptographic service provider (CSP).","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameters to pass to the cryptographic service provider (CSP).","pos":[0,67]}]},{"pos":[6682,6797],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class."},{"pos":[6809,7075],"content":"This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method does not directly initialize the &lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt; class.","pos":[0,112],"source":"This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class."},{"content":"Calling this method is equivalent to calling the &lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A&gt; constructor and passing <ph id=\"ph1\">`null`</ph>.","pos":[114,266],"source":"  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`."}]},{"pos":[7220,7264],"content":"The string input. This parameter is ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string input. This parameter is ignored.","pos":[0,44],"nodes":[{"content":"The string input.","pos":[0,17]},{"content":"This parameter is ignored.","pos":[18,44]}]}]},{"pos":[7982,7994],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8570,8652],"content":"Fills an array of bytes with a cryptographically strong sequence of random values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fills an array of bytes with a cryptographically strong sequence of random values.","pos":[0,82]}]},{"pos":[8665,8801],"content":"The length of the byte array determines how many cryptographically strong random bytes are produced.       This method is thread safe.","needQuote":false,"needEscape":true,"nodes":[{"content":"The length of the byte array determines how many cryptographically strong random bytes are produced.       This method is thread safe.","pos":[0,134],"nodes":[{"content":"The length of the byte array determines how many cryptographically strong random bytes are produced.","pos":[0,100]},{"content":"This method is thread safe.","pos":[107,134]}]}]},{"pos":[9360,9436],"content":"The array to fill with a cryptographically strong sequence of random values.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array to fill with a cryptographically strong sequence of random values.","pos":[0,76]}]},{"pos":[9675,9735],"content":"The cryptographic service provider (CSP) cannot be acquired.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]},{"pos":[9838,9920],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[10439,10529],"content":"Fills an array of bytes with a cryptographically strong sequence of random nonzero values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fills an array of bytes with a cryptographically strong sequence of random nonzero values.","pos":[0,90]}]},{"pos":[10541,10649],"content":"The length of the byte array determines how many cryptographically strong random nonzero bytes are produced.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of the byte array determines how many cryptographically strong random nonzero bytes are produced.","pos":[0,108]}]},{"pos":[11307,11391],"content":"The array to fill with a cryptographically strong sequence of random nonzero values.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array to fill with a cryptographically strong sequence of random nonzero values.","pos":[0,84]}]},{"pos":[11637,11697],"content":"The cryptographic service provider (CSP) cannot be acquired.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]},{"pos":[11800,11882],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider\n  id: RNGCryptoServiceProvider\n  children:\n  - System.Security.Cryptography.RNGCryptoServiceProvider.#ctor\n  - System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Byte[])\n  - System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.String)\n  - System.Security.Cryptography.RNGCryptoServiceProvider.Dispose(System.Boolean)\n  - System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])\n  - System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[])\n  langs:\n  - csharp\n  name: RNGCryptoServiceProvider\n  nameWithType: RNGCryptoServiceProvider\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider\n  type: Class\n  summary: Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\n  example:\n  - \"The following code example shows how to create a random number with the RNGCryptoServiceProvider class.  \\n  \\n [!code-vb[RNGCSP#1](~/add/codesnippet/visualbasic/t-system.security.crypto_16_1.vb)]\\n [!code-cpp[RNGCSP#1](~/add/codesnippet/cpp/t-system.security.crypto_16_1.cpp)]\\n [!code-cs[RNGCSP#1](~/add/codesnippet/csharp/t-system.security.crypto_16_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class RNGCryptoServiceProvider : System.Security.Cryptography.RandomNumberGenerator\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.RandomNumberGenerator\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.RandomNumberGenerator.Create\n  - System.Security.Cryptography.RandomNumberGenerator.Create(System.String)\n  - System.Security.Cryptography.RandomNumberGenerator.Dispose\n  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: RNGCryptoServiceProvider()\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider()\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.RNGCryptoServiceProvider()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create a random number with the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  \\n  \\n [!code-vb[RNGCSP#1](~/add/codesnippet/visualbasic/m-system.security.crypto_1_1.vb)]\\n [!code-cpp[RNGCSP#1](~/add/codesnippet/cpp/m-system.security.crypto_1_1.cpp)]\\n [!code-cs[RNGCSP#1](~/add/codesnippet/csharp/m-system.security.crypto_1_1.cs)]\"\n  syntax:\n    content: public RNGCryptoServiceProvider ();\n    parameters: []\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: RNGCryptoServiceProvider(Byte[])\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(Byte[])\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.RNGCryptoServiceProvider(Byte[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class.\n  remarks: This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`.\n  syntax:\n    content: public RNGCryptoServiceProvider (byte[] rgb);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: A byte array. This value is ignored.\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: RNGCryptoServiceProvider(CspParameters)\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(CspParameters)\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.RNGCryptoServiceProvider(CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class with the specified parameters.\n  syntax:\n    content: public RNGCryptoServiceProvider (System.Security.Cryptography.CspParameters cspParams);\n    parameters:\n    - id: cspParams\n      type: System.Security.Cryptography.CspParameters\n      description: The parameters to pass to the cryptographic service provider (CSP).\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: RNGCryptoServiceProvider(String)\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(String)\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.RNGCryptoServiceProvider(String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class.\n  remarks: This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`.\n  syntax:\n    content: public RNGCryptoServiceProvider (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: The string input. This parameter is ignored.\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: RNGCryptoServiceProvider.Dispose(Boolean)\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])\n  id: GetBytes(System.Byte[])\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: GetBytes(Byte[])\n  nameWithType: RNGCryptoServiceProvider.GetBytes(Byte[])\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Fills an array of bytes with a cryptographically strong sequence of random values.\n  remarks: \"The length of the byte array determines how many cryptographically strong random bytes are produced.  \\n  \\n This method is thread safe.\"\n  example:\n  - \"The following code example shows how to create a random number with the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  \\n  \\n [!code-vb[RNGCSP#1](~/add/codesnippet/visualbasic/m-system.security.crypto_66_1.vb)]\\n [!code-cpp[RNGCSP#1](~/add/codesnippet/cpp/m-system.security.crypto_66_1.cpp)]\\n [!code-cs[RNGCSP#1](~/add/codesnippet/csharp/m-system.security.crypto_66_1.cs)]\"\n  syntax:\n    content: public override void GetBytes (byte[] data);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The array to fill with a cryptographically strong sequence of random values.\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The cryptographic service provider (CSP) cannot be acquired.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[])\n  id: GetNonZeroBytes(System.Byte[])\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: GetNonZeroBytes(Byte[])\n  nameWithType: RNGCryptoServiceProvider.GetNonZeroBytes(Byte[])\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Fills an array of bytes with a cryptographically strong sequence of random nonzero values.\n  remarks: The length of the byte array determines how many cryptographically strong random nonzero bytes are produced.\n  example:\n  - \"The following code example creates a random sequence of 100 nonzero bytes and stores it in `random`.  \\n  \\n [!code-cpp[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/cpp/8817a025-4b69-4ee1-98fd-_1.cpp)]\\n [!code-cs[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/csharp/8817a025-4b69-4ee1-98fd-_1.cs)]\\n [!code-vb[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/visualbasic/8817a025-4b69-4ee1-98fd-_1.vb)]\"\n  syntax:\n    content: public override void GetNonZeroBytes (byte[] data);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The array to fill with a cryptographically strong sequence of random nonzero values.\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The cryptographic service provider (CSP) cannot be acquired.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: System.Security.Cryptography.RandomNumberGenerator\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: RNGCryptoServiceProvider()\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider()\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.RNGCryptoServiceProvider()\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Byte[])\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: RNGCryptoServiceProvider(Byte[])\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(Byte[])\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.RNGCryptoServiceProvider(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: RNGCryptoServiceProvider(CspParameters)\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(CspParameters)\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.RNGCryptoServiceProvider(CspParameters)\n- uid: System.Security.Cryptography.CspParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspParameters\n  nameWithType: CspParameters\n  fullName: System.Security.Cryptography.CspParameters\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.String)\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: RNGCryptoServiceProvider(String)\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(String)\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.RNGCryptoServiceProvider(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: RNGCryptoServiceProvider.Dispose(Boolean)\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: GetBytes(Byte[])\n  nameWithType: RNGCryptoServiceProvider.GetBytes(Byte[])\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(Byte[])\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[])\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: GetNonZeroBytes(Byte[])\n  nameWithType: RNGCryptoServiceProvider.GetNonZeroBytes(Byte[])\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(Byte[])\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor*\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: RNGCryptoServiceProvider\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.Dispose*\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: Dispose\n  nameWithType: RNGCryptoServiceProvider.Dispose\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes*\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: GetBytes\n  nameWithType: RNGCryptoServiceProvider.GetBytes\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes*\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: GetNonZeroBytes\n  nameWithType: RNGCryptoServiceProvider.GetNonZeroBytes\n"}