{"nodes":[{"pos":[2140,2198],"content":"Provides the underlying stream of data for network access.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides the underlying stream of data for network access.","pos":[0,58]}]},{"pos":[2211,4619],"content":"The NetworkStream class provides methods for sending and receiving data over <xref:System.Net.Sockets.SocketType> sockets in blocking mode. For more information about blocking versus nonblocking <xref:System.Net.Sockets.Socket>s, see [Using an Asynchronous Client Socket](~/add/includes/ajax-current-ext-md.md). You can use the NetworkStream class for both synchronous and asynchronous data transfer. For more information about synchronous and asynchronous communication, see [Sockets](~/add/includes/ajax-current-ext-md.md).       To create a NetworkStream, you must provide a connected <xref:System.Net.Sockets.Socket>. You can also specify what <xref:System.IO.FileAccess> permission the NetworkStream has over the provided <xref:System.Net.Sockets.Socket>. By default, closing the NetworkStream does not close the provided <xref:System.Net.Sockets.Socket>. If you want the NetworkStream to have permission to close the provided <xref:System.Net.Sockets.Socket>, you must specify `true` for the value of the `ownsSocket` parameter.       Use the <xref:System.Net.Sockets.NetworkStream.Write%2A> and <xref:System.Net.Sockets.NetworkStream.Read%2A> methods for simple single thread synchronous blocking I/O. If you want to process your I/O using separate threads, consider using the <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> and <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> methods, or the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> and <xref:System.Net.Sockets.NetworkStream.EndRead%2A> methods for communication.       The NetworkStream does not support random access to the network data stream. The value of the <xref:System.Net.Sockets.NetworkStream.CanSeek%2A> property, which indicates whether the stream supports seeking, is always `false`; reading the <xref:System.Net.Sockets.NetworkStream.Position%2A> property, reading the <xref:System.Net.Sockets.NetworkStream.Length%2A> property, or calling the <xref:System.Net.Sockets.NetworkStream.Seek%2A> method will throw a <xref:System.NotSupportedException>.       Read and write operations can be performed simultaneously on an instance of the NetworkStream class without the need for synchronization. As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.","needQuote":false,"needEscape":true,"nodes":[{"content":"The NetworkStream class provides methods for sending and receiving data over &lt;xref:System.Net.Sockets.SocketType&gt; sockets in blocking mode.","pos":[0,139],"source":"The NetworkStream class provides methods for sending and receiving data over <xref:System.Net.Sockets.SocketType> sockets in blocking mode."},{"content":"For more information about blocking versus nonblocking &lt;xref:System.Net.Sockets.Socket&gt;s, see <bpt id=\"p1\">[</bpt>Using an Asynchronous Client Socket<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[140,311],"source":" For more information about blocking versus nonblocking <xref:System.Net.Sockets.Socket>s, see [Using an Asynchronous Client Socket](~/add/includes/ajax-current-ext-md.md)."},{"content":"You can use the NetworkStream class for both synchronous and asynchronous data transfer.","pos":[312,400]},{"content":"For more information about synchronous and asynchronous communication, see <bpt id=\"p1\">[</bpt>Sockets<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[401,525],"source":" For more information about synchronous and asynchronous communication, see [Sockets](~/add/includes/ajax-current-ext-md.md)."},{"content":"To create a NetworkStream, you must provide a connected &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[532,621],"source":"       To create a NetworkStream, you must provide a connected <xref:System.Net.Sockets.Socket>."},{"content":"You can also specify what &lt;xref:System.IO.FileAccess&gt; permission the NetworkStream has over the provided &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[622,760],"source":" You can also specify what <xref:System.IO.FileAccess> permission the NetworkStream has over the provided <xref:System.Net.Sockets.Socket>."},{"content":"By default, closing the NetworkStream does not close the provided &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[761,860],"source":" By default, closing the NetworkStream does not close the provided <xref:System.Net.Sockets.Socket>."},{"content":"If you want the NetworkStream to have permission to close the provided &lt;xref:System.Net.Sockets.Socket&gt;, you must specify <ph id=\"ph1\">`true`</ph> for the value of the <ph id=\"ph2\">`ownsSocket`</ph> parameter.","pos":[861,1034],"source":" If you want the NetworkStream to have permission to close the provided <xref:System.Net.Sockets.Socket>, you must specify `true` for the value of the `ownsSocket` parameter."},{"content":"Use the &lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt; and &lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt; methods for simple single thread synchronous blocking I/O.","pos":[1041,1208],"source":"       Use the <xref:System.Net.Sockets.NetworkStream.Write%2A> and <xref:System.Net.Sockets.NetworkStream.Read%2A> methods for simple single thread synchronous blocking I/O."},{"content":"If you want to process your I/O using separate threads, consider using the &lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt; and &lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt; methods, or the &lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt; and &lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt; methods for communication.","pos":[1209,1544],"source":" If you want to process your I/O using separate threads, consider using the <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> and <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> methods, or the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> and <xref:System.Net.Sockets.NetworkStream.EndRead%2A> methods for communication."},{"content":"The NetworkStream does not support random access to the network data stream.","pos":[1551,1627]},{"content":"The value of the &lt;xref:System.Net.Sockets.NetworkStream.CanSeek%2A&gt; property, which indicates whether the stream supports seeking, is always <ph id=\"ph1\">`false`</ph>; reading the &lt;xref:System.Net.Sockets.NetworkStream.Position%2A&gt; property, reading the &lt;xref:System.Net.Sockets.NetworkStream.Length%2A&gt; property, or calling the &lt;xref:System.Net.Sockets.NetworkStream.Seek%2A&gt; method will throw a &lt;xref:System.NotSupportedException&gt;.","pos":[1628,2043],"source":" The value of the <xref:System.Net.Sockets.NetworkStream.CanSeek%2A> property, which indicates whether the stream supports seeking, is always `false`; reading the <xref:System.Net.Sockets.NetworkStream.Position%2A> property, reading the <xref:System.Net.Sockets.NetworkStream.Length%2A> property, or calling the <xref:System.Net.Sockets.NetworkStream.Seek%2A> method will throw a <xref:System.NotSupportedException>."},{"content":"Read and write operations can be performed simultaneously on an instance of the NetworkStream class without the need for synchronization.","pos":[2050,2187]},{"content":"As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.","pos":[2188,2400]}]},{"pos":[5753,5894],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the specified &lt;xref:System.Net.Sockets.Socket&gt;.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> class for the specified <xref:System.Net.Sockets.Socket>."},{"pos":[5906,6264],"content":"The <xref:System.Net.Sockets.NetworkStream> is created with read/write access to the specified <xref:System.Net.Sockets.Socket>. The <xref:System.Net.Sockets.NetworkStream> does not own the underlying <xref:System.Net.Sockets.Socket>, so calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method does not close the <xref:System.Net.Sockets.Socket>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Net.Sockets.NetworkStream> is created with read/write access to the specified <xref:System.Net.Sockets.Socket>. The <xref:System.Net.Sockets.NetworkStream> does not own the underlying <xref:System.Net.Sockets.Socket>, so calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method does not close the <xref:System.Net.Sockets.Socket>.","pos":[0,358],"nodes":[{"content":"The &lt;xref:System.Net.Sockets.NetworkStream&gt; is created with read/write access to the specified &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,128],"source":"The <xref:System.Net.Sockets.NetworkStream> is created with read/write access to the specified <xref:System.Net.Sockets.Socket>."},{"content":"The &lt;xref:System.Net.Sockets.NetworkStream&gt; does not own the underlying &lt;xref:System.Net.Sockets.Socket&gt;, so calling the &lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt; method does not close the &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[129,358],"source":" The <xref:System.Net.Sockets.NetworkStream> does not own the underlying <xref:System.Net.Sockets.Socket>, so calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method does not close the <xref:System.Net.Sockets.Socket>."}]}]},{"pos":[6925,7059],"content":"The &lt;xref:System.Net.Sockets.Socket&gt; that the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> will use to send and receive data.","needQuote":true,"needEscape":true,"source":"The <xref:System.Net.Sockets.Socket> that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will use to send and receive data."},{"pos":[7228,7326],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>socket</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7416,7741],"content":"The <code>socket</code> parameter is not connected.       -or-       The <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;.       -or-       The <code>socket</code> parameter is in a nonblocking state.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not connected.","pos":[0,51],"source":"The <code>socket</code> parameter is not connected."},{"content":"-or-       The &lt;xref:System.Net.Sockets.Socket.SocketType*&gt; property of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">&amp;lt;</ph>xref:System.Net.Sockets.SocketType?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph>.","pos":[58,239],"source":"       -or-       The <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is in a nonblocking state.","pos":[246,317],"source":"       -or-       The <code>socket</code> parameter is in a nonblocking state."}]},{"pos":[8234,8441],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the specified &lt;xref:System.Net.Sockets.Socket&gt; with the specified &lt;xref:System.Net.Sockets.Socket&gt; ownership.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> class for the specified <xref:System.Net.Sockets.Socket> with the specified <xref:System.Net.Sockets.Socket> ownership."},{"pos":[8453,8876],"content":"The <xref:System.Net.Sockets.NetworkStream> is created with read/write access to the specified <xref:System.Net.Sockets.Socket>. If the value of `ownsSocket` parameter is `true`, the <xref:System.Net.Sockets.NetworkStream> takes ownership of the underlying <xref:System.Net.Sockets.Socket>, and calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method also closes the underlying <xref:System.Net.Sockets.Socket>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Sockets.NetworkStream&gt; is created with read/write access to the specified &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,128],"source":"The <xref:System.Net.Sockets.NetworkStream> is created with read/write access to the specified <xref:System.Net.Sockets.Socket>."},{"content":"If the value of <ph id=\"ph1\">`ownsSocket`</ph> parameter is <ph id=\"ph2\">`true`</ph>, the &lt;xref:System.Net.Sockets.NetworkStream&gt; takes ownership of the underlying &lt;xref:System.Net.Sockets.Socket&gt;, and calling the &lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt; method also closes the underlying &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[129,423],"source":" If the value of `ownsSocket` parameter is `true`, the <xref:System.Net.Sockets.NetworkStream> takes ownership of the underlying <xref:System.Net.Sockets.Socket>, and calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method also closes the underlying <xref:System.Net.Sockets.Socket>."}]},{"pos":[9545,9679],"content":"The &lt;xref:System.Net.Sockets.Socket&gt; that the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> will use to send and receive data.","needQuote":true,"needEscape":true,"source":"The <xref:System.Net.Sockets.Socket> that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will use to send and receive data."},{"pos":[9747,10025],"content":"Set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate that the <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> will take ownership of the &lt;xref:System.Net.Sockets.Socket&gt;; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will take ownership of the <xref:System.Net.Sockets.Socket>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10194,10292],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>socket</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[10382,10720],"content":"The <code>socket</code> parameter is not connected.       -or-       the value of the <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;.       -or-       the <code>socket</code> parameter is in a nonblocking state.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not connected.","pos":[0,51],"source":"The <code>socket</code> parameter is not connected."},{"content":"-or-       the value of the &lt;xref:System.Net.Sockets.Socket.SocketType*&gt; property of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">&amp;lt;</ph>xref:System.Net.Sockets.SocketType?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph>.","pos":[58,252],"source":"       -or-       the value of the <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;."},{"content":"-or-       the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is in a nonblocking state.","pos":[259,330],"source":"       -or-       the <code>socket</code> parameter is in a nonblocking state."}]},{"pos":[11234,11408],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the specified &lt;xref:System.Net.Sockets.Socket&gt; with the specified access rights.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> class for the specified <xref:System.Net.Sockets.Socket> with the specified access rights."},{"pos":[11421,12436],"content":"The <xref:System.Net.Sockets.NetworkStream> is created with the specified access to the specified <xref:System.Net.Sockets.Socket>. With this constructor, the <xref:System.Net.Sockets.NetworkStream> does not own the underlying <xref:System.Net.Sockets.Socket>, so calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method does not close the underlying <xref:System.Net.Sockets.Socket>.       The `access` parameter sets the <xref:System.Net.Sockets.NetworkStream.CanRead%2A> and <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> properties of the <xref:System.Net.Sockets.NetworkStream>. If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method. If you specify <xref:System.IO.FileAccess>, both method calls are allowed.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Sockets.NetworkStream&gt; is created with the specified access to the specified &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,131],"source":"The <xref:System.Net.Sockets.NetworkStream> is created with the specified access to the specified <xref:System.Net.Sockets.Socket>."},{"content":"With this constructor, the &lt;xref:System.Net.Sockets.NetworkStream&gt; does not own the underlying &lt;xref:System.Net.Sockets.Socket&gt;, so calling the &lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt; method does not close the underlying &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[132,395],"source":" With this constructor, the <xref:System.Net.Sockets.NetworkStream> does not own the underlying <xref:System.Net.Sockets.Socket>, so calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method does not close the underlying <xref:System.Net.Sockets.Socket>."},{"content":"The <ph id=\"ph1\">`access`</ph> parameter sets the &lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt; and &lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt; properties of the &lt;xref:System.Net.Sockets.NetworkStream&gt;.","pos":[402,599],"source":"       The `access` parameter sets the <xref:System.Net.Sockets.NetworkStream.CanRead%2A> and <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> properties of the <xref:System.Net.Sockets.NetworkStream>."},{"content":"If you specify &lt;xref:System.IO.FileAccess&gt;, then the &lt;xref:System.Net.Sockets.NetworkStream&gt; allows calls to the &lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt; method.","pos":[600,769],"source":" If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method."},{"content":"If you specify &lt;xref:System.IO.FileAccess&gt;, then the &lt;xref:System.Net.Sockets.NetworkStream&gt; allows calls to the &lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt; method.","pos":[770,938],"source":" If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method."},{"content":"If you specify &lt;xref:System.IO.FileAccess&gt;, both method calls are allowed.","pos":[939,1013],"source":" If you specify <xref:System.IO.FileAccess>, both method calls are allowed."}]},{"pos":[13138,13272],"content":"The &lt;xref:System.Net.Sockets.Socket&gt; that the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> will use to send and receive data.","needQuote":true,"needEscape":true,"source":"The <xref:System.Net.Sockets.Socket> that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will use to send and receive data."},{"pos":[13342,13570],"content":"A bitwise combination of the <bpt id=\"p1\">&lt;xref href=\"System.IO.FileAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that specify the type of access given to the <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> over the provided &lt;xref:System.Net.Sockets.Socket&gt;.","needQuote":true,"needEscape":true,"source":"A bitwise combination of the <xref href=\"System.IO.FileAccess\"></xref> values that specify the type of access given to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> over the provided <xref:System.Net.Sockets.Socket>."},{"pos":[13739,13837],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>socket</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13927,14252],"content":"The <code>socket</code> parameter is not connected.       -or-       the <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;.       -or-       the <code>socket</code> parameter is in a nonblocking state.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not connected.","pos":[0,51],"source":"The <code>socket</code> parameter is not connected."},{"content":"-or-       the &lt;xref:System.Net.Sockets.Socket.SocketType*&gt; property of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">&amp;lt;</ph>xref:System.Net.Sockets.SocketType?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph>.","pos":[58,239],"source":"       -or-       the <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;."},{"content":"-or-       the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is in a nonblocking state.","pos":[246,317],"source":"       -or-       the <code>socket</code> parameter is in a nonblocking state."}]},{"pos":[14820,15055],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the specified &lt;xref:System.Net.Sockets.Socket&gt; with the specified access rights and the specified &lt;xref:System.Net.Sockets.Socket&gt; ownership.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> class for the specified <xref:System.Net.Sockets.Socket> with the specified access rights and the specified <xref:System.Net.Sockets.Socket> ownership."},{"pos":[15068,16115],"content":"The <xref:System.Net.Sockets.NetworkStream> is created with read/write access to the specified <xref:System.Net.Sockets.Socket>. If the value of the `ownsSocket` parameter is `true`, the <xref:System.Net.Sockets.NetworkStream> takes ownership of the underlying <xref:System.Net.Sockets.Socket>, and calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method also closes the underlying <xref:System.Net.Sockets.Socket>.       The `access` parameter sets the <xref:System.Net.Sockets.NetworkStream.CanRead%2A> and <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> properties of the <xref:System.Net.Sockets.NetworkStream>. If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method. If you specify <xref:System.IO.FileAccess>, both method calls are allowed.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Sockets.NetworkStream&gt; is created with read/write access to the specified &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,128],"source":"The <xref:System.Net.Sockets.NetworkStream> is created with read/write access to the specified <xref:System.Net.Sockets.Socket>."},{"content":"If the value of the <ph id=\"ph1\">`ownsSocket`</ph> parameter is <ph id=\"ph2\">`true`</ph>, the &lt;xref:System.Net.Sockets.NetworkStream&gt; takes ownership of the underlying &lt;xref:System.Net.Sockets.Socket&gt;, and calling the &lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt; method also closes the underlying &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[129,427],"source":" If the value of the `ownsSocket` parameter is `true`, the <xref:System.Net.Sockets.NetworkStream> takes ownership of the underlying <xref:System.Net.Sockets.Socket>, and calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method also closes the underlying <xref:System.Net.Sockets.Socket>."},{"content":"The <ph id=\"ph1\">`access`</ph> parameter sets the &lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt; and &lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt; properties of the &lt;xref:System.Net.Sockets.NetworkStream&gt;.","pos":[434,631],"source":"       The `access` parameter sets the <xref:System.Net.Sockets.NetworkStream.CanRead%2A> and <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> properties of the <xref:System.Net.Sockets.NetworkStream>."},{"content":"If you specify &lt;xref:System.IO.FileAccess&gt;, then the &lt;xref:System.Net.Sockets.NetworkStream&gt; allows calls to the &lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt; method.","pos":[632,801],"source":" If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method."},{"content":"If you specify &lt;xref:System.IO.FileAccess&gt;, then the &lt;xref:System.Net.Sockets.NetworkStream&gt; allows calls to the &lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt; method.","pos":[802,970],"source":" If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method."},{"content":"If you specify &lt;xref:System.IO.FileAccess&gt;, both method calls are allowed.","pos":[971,1045],"source":" If you specify <xref:System.IO.FileAccess>, both method calls are allowed."}]},{"pos":[16994,17128],"content":"The &lt;xref:System.Net.Sockets.Socket&gt; that the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> will use to send and receive data.","needQuote":true,"needEscape":true,"source":"The <xref:System.Net.Sockets.Socket> that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will use to send and receive data."},{"pos":[17198,17428],"content":"A bitwise combination of the <bpt id=\"p1\">&lt;xref href=\"System.IO.FileAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that specifies the type of access given to the <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> over the provided &lt;xref:System.Net.Sockets.Socket&gt;.","needQuote":true,"needEscape":true,"source":"A bitwise combination of the <xref href=\"System.IO.FileAccess\"></xref> values that specifies the type of access given to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> over the provided <xref:System.Net.Sockets.Socket>."},{"pos":[17496,17774],"content":"Set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate that the <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> will take ownership of the &lt;xref:System.Net.Sockets.Socket&gt;; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will take ownership of the <xref:System.Net.Sockets.Socket>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17943,18041],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>socket</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18131,18456],"content":"The <code>socket</code> parameter is not connected.       -or-       The <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;.       -or-       The <code>socket</code> parameter is in a nonblocking state.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not connected.","pos":[0,51],"source":"The <code>socket</code> parameter is not connected."},{"content":"-or-       The &lt;xref:System.Net.Sockets.Socket.SocketType*&gt; property of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">&amp;lt;</ph>xref:System.Net.Sockets.SocketType?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph>.","pos":[58,239],"source":"       -or-       The <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">socket</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is in a nonblocking state.","pos":[246,317],"source":"       -or-       The <code>socket</code> parameter is in a nonblocking state."}]},{"pos":[19081,19172],"content":"Begins an asynchronous read from the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Begins an asynchronous read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[19185,21723],"content":"The BeginRead method starts asynchronously reading data from the incoming network buffers. Calling the BeginRead method gives you the ability to receive data within a separate execution thread.       You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginRead method. At the very minimum, your `state` parameter must contain the <xref:System.Net.Sockets.NetworkStream>. Because you will want to obtain the received data within your callback method, you should create a small class or structure to hold a read buffer and any other useful information. Pass the structure or class instance to the BeginRead method through the `state` parameter.       Your callback method should call the <xref:System.Net.Sockets.NetworkStream.EndRead%2A> method. When your application calls BeginRead, the system will wait until data is received or an error occurs, and then the system will use a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.NetworkStream.EndRead%2A> until the provided <xref:System.Net.Sockets.NetworkStream> reads data or throws an exception. If you want the original thread to block after you call the BeginRead method, use the <xref:System.Threading.WaitHandle.WaitOne%2A> method. Call <xref:System.Threading.EventWaitHandle.Set%2A> in the callback method when you want the original thread to continue executing. For additional information about writing callback methods, see [Marshaling a Delegate as a Callback Method](~/add/includes/ajax-current-ext-md.md).       The BeginRead method reads as much data as is available, up to the number of bytes specified by the `size` parameter.      > [!NOTE] >  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>. If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       Read and write operations can be performed simultaneously on an instance of the <xref:System.Net.Sockets.NetworkStream> class without the need for synchronization. As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.","needQuote":false,"needEscape":true,"nodes":[{"content":"The BeginRead method starts asynchronously reading data from the incoming network buffers.","pos":[0,90]},{"content":"Calling the BeginRead method gives you the ability to receive data within a separate execution thread.","pos":[91,193]},{"content":"You must create a callback method that implements the &lt;xref:System.AsyncCallback&gt; delegate and pass its name to the BeginRead method.","pos":[200,333],"source":"       You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginRead method."},{"content":"At the very minimum, your <ph id=\"ph1\">`state`</ph> parameter must contain the &lt;xref:System.Net.Sockets.NetworkStream&gt;.","pos":[334,435],"source":" At the very minimum, your `state` parameter must contain the <xref:System.Net.Sockets.NetworkStream>."},{"content":"Because you will want to obtain the received data within your callback method, you should create a small class or structure to hold a read buffer and any other useful information.","pos":[436,615]},{"content":"Pass the structure or class instance to the BeginRead method through the <ph id=\"ph1\">`state`</ph> parameter.","pos":[616,707],"source":" Pass the structure or class instance to the BeginRead method through the `state` parameter."},{"content":"Your callback method should call the &lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt; method.","pos":[714,809],"source":"       Your callback method should call the <xref:System.Net.Sockets.NetworkStream.EndRead%2A> method."},{"content":"When your application calls BeginRead, the system will wait until data is received or an error occurs, and then the system will use a separate thread to execute the specified callback method, and blocks on &lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt; until the provided &lt;xref:System.Net.Sockets.NetworkStream&gt; reads data or throws an exception.","pos":[810,1160],"source":" When your application calls BeginRead, the system will wait until data is received or an error occurs, and then the system will use a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.NetworkStream.EndRead%2A> until the provided <xref:System.Net.Sockets.NetworkStream> reads data or throws an exception."},{"content":"If you want the original thread to block after you call the BeginRead method, use the &lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt; method.","pos":[1161,1300],"source":" If you want the original thread to block after you call the BeginRead method, use the <xref:System.Threading.WaitHandle.WaitOne%2A> method."},{"content":"Call &lt;xref:System.Threading.EventWaitHandle.Set%2A&gt; in the callback method when you want the original thread to continue executing.","pos":[1301,1432],"source":" Call <xref:System.Threading.EventWaitHandle.Set%2A> in the callback method when you want the original thread to continue executing."},{"content":"For additional information about writing callback methods, see <bpt id=\"p1\">[</bpt>Marshaling a Delegate as a Callback Method<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1433,1580],"source":" For additional information about writing callback methods, see [Marshaling a Delegate as a Callback Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"The BeginRead method reads as much data as is available, up to the number of bytes specified by the <ph id=\"ph1\">`size`</ph> parameter.","pos":[1587,1704],"source":"       The BeginRead method reads as much data as is available, up to the number of bytes specified by the `size` parameter."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive an &lt;xref:System.IO.IOException&gt;, check the &lt;xref:System.Exception.InnerException%2A&gt; property to determine if it was caused by a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[1710,1909],"source":"      > [!NOTE] >  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>."},{"content":"If so, use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt; property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[1910,2144],"source":" If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."},{"content":"Read and write operations can be performed simultaneously on an instance of the &lt;xref:System.Net.Sockets.NetworkStream&gt; class without the need for synchronization.","pos":[2151,2314],"source":"       Read and write operations can be performed simultaneously on an instance of the <xref:System.Net.Sockets.NetworkStream> class without the need for synchronization."},{"content":"As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.","pos":[2315,2527]}]},{"pos":[22517,22666],"content":"An array of type &lt;xref:System.Byte&gt; that is the location in memory to store data read from the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of type <xref:System.Byte> that is the location in memory to store data read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[22728,22779],"content":"The location in <ph id=\"ph1\">`buffer`</ph> to begin storing the data.","needQuote":true,"needEscape":true,"source":"The location in `buffer` to begin storing the data."},{"pos":[22839,22930],"content":"The number of bytes to read from the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of bytes to read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[23002,23085],"content":"The <xref:System.AsyncCallback> delegate that is executed when BeginRead completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.AsyncCallback&gt; delegate that is executed when BeginRead completes.","pos":[0,83],"source":"The <xref:System.AsyncCallback> delegate that is executed when BeginRead completes."}]},{"pos":[23147,23204],"content":"An object that contains any additional user-defined data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains any additional user-defined data.","pos":[0,57]}]},{"pos":[23268,23336],"content":"An <xref:System.IAsyncResult> that represents the asynchronous call.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; that represents the asynchronous call.","pos":[0,68],"source":"An <xref:System.IAsyncResult> that represents the asynchronous call."}]},{"pos":[23509,23607],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>buffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[23723,24098],"content":"The <code>offset</code> parameter is less than 0.       -or-       The <code>offset</code> parameter is greater than the length of the <code>buffer</code> paramater.       -or-       The <code>size</code> is less than 0.       -or-       The <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[0,49],"source":"The <code>offset</code> parameter is less than 0."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than the length of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept> paramater.","pos":[56,165],"source":"       -or-       The <code>offset</code> parameter is greater than the length of the <code>buffer</code> paramater."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">size</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than 0.","pos":[172,220],"source":"       -or-       The <code>size</code> is less than 0."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">size</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept> minus the value of the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">offset</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter.","pos":[227,363],"source":"       -or-       The <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."}]},{"pos":[24189,24432],"content":"The underlying <xref:System.Net.Sockets.Socket> is closed.       -or-       There was a failure while reading from the network.       -or-       An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"The underlying <xref:System.Net.Sockets.Socket> is closed.       -or-       There was a failure while reading from the network.       -or-       An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,235],"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; is closed.","pos":[0,58],"source":"The underlying <xref:System.Net.Sockets.Socket> is closed."},{"content":"-or-       There was a failure while reading from the network.","pos":[65,127]},{"content":"-or-       An error occurred when accessing the socket.","pos":[134,189]},{"content":"See the Remarks section for more information.","pos":[190,235]}]}]},{"pos":[24540,24608],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed."},{"pos":[25237,25278],"content":"Begins an asynchronous write to a stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous write to a stream.","pos":[0,41]}]},{"pos":[25291,27631],"content":"The BeginWrite method starts an asynchronous send operation to the remote host. Calling the BeginWrite method gives you the ability to send data within a separate execution thread.       You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginWrite method. At the very minimum, your `state` parameter must contain the <xref:System.Net.Sockets.NetworkStream>. If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.NetworkStream> and the other required information. Pass the structure or class instance to the BeginWrite method through the `state` parameter.       Your callback method should implement the <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> method. When your application calls BeginWrite, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> until the <xref:System.Net.Sockets.NetworkStream> sends the number of bytes requested or throws an exception. If you want the original thread to block after you call the BeginWrite method, use the <xref:System.Threading.WaitHandle.WaitOne%2A> method. Call <xref:System.Threading.EventWaitHandle.Set%2A> in the callback method when you want the original thread to continue executing. For additional information about writing callback methods, see [Marshaling a Delegate as a Callback Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>. If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       Read and write operations can be performed simultaneously on an instance of the <xref:System.Net.Sockets.NetworkStream> class without the need for synchronization. As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.","needQuote":false,"needEscape":true,"nodes":[{"content":"The BeginWrite method starts an asynchronous send operation to the remote host.","pos":[0,79]},{"content":"Calling the BeginWrite method gives you the ability to send data within a separate execution thread.","pos":[80,180]},{"content":"You must create a callback method that implements the &lt;xref:System.AsyncCallback&gt; delegate and pass its name to the BeginWrite method.","pos":[187,321],"source":"       You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginWrite method."},{"content":"At the very minimum, your <ph id=\"ph1\">`state`</ph> parameter must contain the &lt;xref:System.Net.Sockets.NetworkStream&gt;.","pos":[322,423],"source":" At the very minimum, your `state` parameter must contain the <xref:System.Net.Sockets.NetworkStream>."},{"content":"If your callback needs more information, you can create a small class or structure to hold the &lt;xref:System.Net.Sockets.NetworkStream&gt; and the other required information.","pos":[424,594],"source":" If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.NetworkStream> and the other required information."},{"content":"Pass the structure or class instance to the BeginWrite method through the <ph id=\"ph1\">`state`</ph> parameter.","pos":[595,687],"source":" Pass the structure or class instance to the BeginWrite method through the `state` parameter."},{"content":"Your callback method should implement the &lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt; method.","pos":[694,795],"source":"       Your callback method should implement the <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> method."},{"content":"When your application calls BeginWrite, the system uses a separate thread to execute the specified callback method, and blocks on &lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt; until the &lt;xref:System.Net.Sockets.NetworkStream&gt; sends the number of bytes requested or throws an exception.","pos":[796,1087],"source":" When your application calls BeginWrite, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> until the <xref:System.Net.Sockets.NetworkStream> sends the number of bytes requested or throws an exception."},{"content":"If you want the original thread to block after you call the BeginWrite method, use the &lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt; method.","pos":[1088,1228],"source":" If you want the original thread to block after you call the BeginWrite method, use the <xref:System.Threading.WaitHandle.WaitOne%2A> method."},{"content":"Call &lt;xref:System.Threading.EventWaitHandle.Set%2A&gt; in the callback method when you want the original thread to continue executing.","pos":[1229,1360],"source":" Call <xref:System.Threading.EventWaitHandle.Set%2A> in the callback method when you want the original thread to continue executing."},{"content":"For additional information about writing callback methods, see <bpt id=\"p1\">[</bpt>Marshaling a Delegate as a Callback Method<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1361,1508],"source":" For additional information about writing callback methods, see [Marshaling a Delegate as a Callback Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive an &lt;xref:System.IO.IOException&gt;, check the &lt;xref:System.Exception.InnerException%2A&gt; property to determine if it was caused by a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[1514,1713],"source":"      > [!NOTE] >  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>."},{"content":"If so, use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt; property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[1714,1948],"source":" If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."},{"content":"Read and write operations can be performed simultaneously on an instance of the &lt;xref:System.Net.Sockets.NetworkStream&gt; class without the need for synchronization.","pos":[1955,2118],"source":"       Read and write operations can be performed simultaneously on an instance of the <xref:System.Net.Sockets.NetworkStream> class without the need for synchronization."},{"content":"As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.","pos":[2119,2331]}]},{"pos":[28426,28555],"content":"An array of type &lt;xref:System.Byte&gt; that contains the data to write to the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of type <xref:System.Byte> that contains the data to write to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[28617,28668],"content":"The location in <ph id=\"ph1\">`buffer`</ph> to begin sending the data.","needQuote":true,"needEscape":true,"source":"The location in `buffer` to begin sending the data."},{"pos":[28728,28818],"content":"The number of bytes to write to the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of bytes to write to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[28890,28974],"content":"The <xref:System.AsyncCallback> delegate that is executed when BeginWrite completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.AsyncCallback&gt; delegate that is executed when BeginWrite completes.","pos":[0,84],"source":"The <xref:System.AsyncCallback> delegate that is executed when BeginWrite completes."}]},{"pos":[29036,29093],"content":"An object that contains any additional user-defined data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains any additional user-defined data.","pos":[0,57]}]},{"pos":[29157,29225],"content":"An <xref:System.IAsyncResult> that represents the asynchronous call.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; that represents the asynchronous call.","pos":[0,68],"source":"An <xref:System.IAsyncResult> that represents the asynchronous call."}]},{"pos":[29399,29497],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>buffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[29613,29994],"content":"The <code>offset</code> parameter is less than 0.       -or-       The <code>offset</code> parameter is greater than the length of <code>buffer</code>.       -or-       The <code>size</code> parameter is less than 0.       -or-       The <code>size</code> parameter is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[0,49],"source":"The <code>offset</code> parameter is less than 0."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[56,151],"source":"       -or-       The <code>offset</code> parameter is greater than the length of <code>buffer</code>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">size</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[158,216],"source":"       -or-       The <code>size</code> parameter is less than 0."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">size</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept> minus the value of the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">offset</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter.","pos":[223,369],"source":"       -or-       The <code>size</code> parameter is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."}]},{"pos":[30085,30326],"content":"The underlying <xref:System.Net.Sockets.Socket> is closed.       -or-       There was a failure while writing to the network.       -or-       An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"The underlying <xref:System.Net.Sockets.Socket> is closed.       -or-       There was a failure while writing to the network.       -or-       An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,233],"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; is closed.","pos":[0,58],"source":"The underlying <xref:System.Net.Sockets.Socket> is closed."},{"content":"-or-       There was a failure while writing to the network.","pos":[65,125]},{"content":"-or-       An error occurred when accessing the socket.","pos":[132,187]},{"content":"See the Remarks section for more information.","pos":[188,233]}]}]},{"pos":[30434,30502],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed."},{"pos":[30843,30954],"content":"Gets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> supports reading.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> supports reading."},{"pos":[30966,31371],"content":"If CanRead is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method. Provide the appropriate <xref:System.IO.FileAccess> enumerated value in the constructor to set the readability and writability of the <xref:System.Net.Sockets.NetworkStream>. The CanRead property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"If CanRead is <ph id=\"ph1\">`true`</ph>, &lt;xref:System.Net.Sockets.NetworkStream&gt; allows calls to the &lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt; method.","pos":[0,137],"source":"If CanRead is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method."},{"content":"Provide the appropriate &lt;xref:System.IO.FileAccess&gt; enumerated value in the constructor to set the readability and writability of the &lt;xref:System.Net.Sockets.NetworkStream&gt;.","pos":[138,312],"source":" Provide the appropriate <xref:System.IO.FileAccess> enumerated value in the constructor to set the readability and writability of the <xref:System.Net.Sockets.NetworkStream>."},{"content":"The CanRead property is set when the &lt;xref:System.Net.Sockets.NetworkStream&gt; is initialized.","pos":[313,405],"source":" The CanRead property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized."}]},{"pos":[32041,32296],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data can be read from the stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if data can be read from the stream; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,172],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data can be read from the stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[173,255],"source":" The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[32708,32906],"content":"Gets a value that indicates whether the stream supports seeking. This property is not currently supported.This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the stream supports seeking.","pos":[0,64]},{"content":"This property is not currently supported.This property always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[65,198],"source":" This property is not currently supported.This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[33026,33219],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in all cases to indicate that <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> cannot seek a specific location in the stream.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> in all cases to indicate that <xref href=\"System.Net.Sockets.NetworkStream\"></xref> cannot seek a specific location in the stream."},{"pos":[33646,33752],"content":"Indicates whether timeout properties are usable for <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether timeout properties are usable for <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[33764,33842],"content":"This property is present because it is inherited from <xref:System.IO.Stream>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is present because it is inherited from &lt;xref:System.IO.Stream&gt;.","pos":[0,78],"source":"This property is present because it is inherited from <xref:System.IO.Stream>."}]},{"pos":[33965,34039],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in all cases.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> in all cases."},{"pos":[34459,34570],"content":"Gets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> supports writing.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> supports writing."},{"pos":[34582,34990],"content":"If CanWrite is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. Provide the appropriate <xref:System.IO.FileAccess> enumerated value in the constructor to set the readability and writability of the <xref:System.Net.Sockets.NetworkStream>. The CanWrite property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"If CanWrite is <ph id=\"ph1\">`true`</ph>, &lt;xref:System.Net.Sockets.NetworkStream&gt; allows calls to the &lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt; method.","pos":[0,139],"source":"If CanWrite is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method."},{"content":"Provide the appropriate &lt;xref:System.IO.FileAccess&gt; enumerated value in the constructor to set the readability and writability of the &lt;xref:System.Net.Sockets.NetworkStream&gt;.","pos":[140,314],"source":" Provide the appropriate <xref:System.IO.FileAccess> enumerated value in the constructor to set the readability and writability of the <xref:System.Net.Sockets.NetworkStream>."},{"content":"The CanWrite property is set when the &lt;xref:System.Net.Sockets.NetworkStream&gt; is initialized.","pos":[315,408],"source":" The CanWrite property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized."}]},{"pos":[35663,35966],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data can be written to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if data can be written to the <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,220],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data can be written to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[221,303],"source":" The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[36416,36539],"content":"Closes the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> after waiting the specified time to allow data to be sent.","needQuote":true,"needEscape":true,"source":"Closes the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> after waiting the specified time to allow data to be sent."},{"pos":[36552,37026],"content":"The Close method frees both unmanaged and managed resources associated with the <xref:System.Net.Sockets.NetworkStream>. If the <xref:System.Net.Sockets.NetworkStream> owns the underlying <xref:System.Net.Sockets.Socket>, it is closed as well.       If a <xref:System.Net.Sockets.NetworkStream> was associated with a <xref:System.Net.Sockets.TcpClient>, the Close method will close the TCP connection, but not dispose of the associated <xref:System.Net.Sockets.TcpClient>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Close method frees both unmanaged and managed resources associated with the <xref:System.Net.Sockets.NetworkStream>. If the <xref:System.Net.Sockets.NetworkStream> owns the underlying <xref:System.Net.Sockets.Socket>, it is closed as well.       If a <xref:System.Net.Sockets.NetworkStream> was associated with a <xref:System.Net.Sockets.TcpClient>, the Close method will close the TCP connection, but not dispose of the associated <xref:System.Net.Sockets.TcpClient>.","pos":[0,472],"nodes":[{"content":"The Close method frees both unmanaged and managed resources associated with the &lt;xref:System.Net.Sockets.NetworkStream&gt;.","pos":[0,120],"source":"The Close method frees both unmanaged and managed resources associated with the <xref:System.Net.Sockets.NetworkStream>."},{"content":"If the &lt;xref:System.Net.Sockets.NetworkStream&gt; owns the underlying &lt;xref:System.Net.Sockets.Socket&gt;, it is closed as well.","pos":[121,243],"source":" If the <xref:System.Net.Sockets.NetworkStream> owns the underlying <xref:System.Net.Sockets.Socket>, it is closed as well."},{"content":"If a &lt;xref:System.Net.Sockets.NetworkStream&gt; was associated with a &lt;xref:System.Net.Sockets.TcpClient&gt;, the Close method will close the TCP connection, but not dispose of the associated &lt;xref:System.Net.Sockets.TcpClient&gt;.","pos":[250,472],"source":"       If a <xref:System.Net.Sockets.NetworkStream> was associated with a <xref:System.Net.Sockets.TcpClient>, the Close method will close the TCP connection, but not dispose of the associated <xref:System.Net.Sockets.TcpClient>."}]}]},{"pos":[37162,37278],"content":"A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing.","pos":[0,116]}]},{"pos":[37459,37510],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than -1.","needQuote":true,"needEscape":true,"source":"The <code>timeout</code> parameter is less than -1."},{"pos":[37881,38007],"content":"Gets a value that indicates whether data is available on the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be read.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether data is available on the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> to be read."},{"pos":[38019,38323],"content":"Use the DataAvailable property to determine if data is ready to be read. If DataAvailable is `true`, a call to <xref:System.Net.Sockets.NetworkStream.Read%2A> returns immediately. If the remote host shuts down or closes the connection, DataAvailable may throw a <xref:System.Net.Sockets.SocketException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the DataAvailable property to determine if data is ready to be read.","pos":[0,72]},{"content":"If DataAvailable is <ph id=\"ph1\">`true`</ph>, a call to &lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt; returns immediately.","pos":[73,179],"source":" If DataAvailable is `true`, a call to <xref:System.Net.Sockets.NetworkStream.Read%2A> returns immediately."},{"content":"If the remote host shuts down or closes the connection, DataAvailable may throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[180,304],"source":" If the remote host shuts down or closes the connection, DataAvailable may throw a <xref:System.Net.Sockets.SocketException>."}]},{"pos":[38914,39096],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if data is available on the stream to be read; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data is available on the stream to be read; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[39277,39345],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed."},{"pos":[39434,39492],"content":"The underlying <xref:System.Net.Sockets.Socket> is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; is closed.","pos":[0,58],"source":"The underlying <xref:System.Net.Sockets.Socket> is closed."}]},{"pos":[39607,39865],"content":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,258],"source":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."}]},{"pos":[40263,40408],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> and optionally releases the managed resources."},{"pos":[40421,40953],"content":"This method is called by the public `Dispose` method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.NetworkStream> references. This method invokes the `Dispose` method of each referenced object.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose`</ph> method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,101],"source":"This method is called by the public `Dispose` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[102,205],"source":"`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[206,289],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Net.Sockets.NetworkStream&gt; references.","pos":[296,462],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.NetworkStream> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[463,530],"source":" This method invokes the `Dispose` method of each referenced object."}]},{"pos":[41110,41319],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[41813,41853],"content":"Handles the end of an asynchronous read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Handles the end of an asynchronous read.","pos":[0,40]}]},{"pos":[41866,44025],"content":"The EndRead method completes the asynchronous read operation started in the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method.       Before calling <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> returns. The callback method must accept the <xref:System.IAsyncResult> returned from the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method as a parameter.       Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method. Extract the receiving <xref:System.Net.Sockets.NetworkStream> from this state object. After obtaining the <xref:System.Net.Sockets.NetworkStream>, call the EndRead method to successfully complete the read operation and return the number of bytes read.       The EndRead method blocks until data is available. The EndRead method reads as much data as is available up to the number of bytes specified in the `size` parameter of the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection and all available data has been received, the EndRead method completes immediately and returns zero bytes.       To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.      > [!NOTE] >  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>. If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"nodes":[{"content":"The EndRead method completes the asynchronous read operation started in the &lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt; method.","pos":[0,136],"source":"The EndRead method completes the asynchronous read operation started in the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method."},{"content":"Before calling &lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;, you need to create a callback method that implements the &lt;xref:System.AsyncCallback&gt; delegate.","pos":[143,306],"source":"       Before calling <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate."},{"content":"This callback method executes in a separate thread and is called by the system after &lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt; returns.","pos":[307,453],"source":" This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> returns."},{"content":"The callback method must accept the &lt;xref:System.IAsyncResult&gt; returned from the &lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt; method as a parameter.","pos":[454,610],"source":" The callback method must accept the <xref:System.IAsyncResult> returned from the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method as a parameter."},{"content":"Within the callback method, call the &lt;xref:System.IAsyncResult.AsyncState%2A&gt; property of the &lt;xref:System.IAsyncResult&gt; to obtain the state object passed to the &lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt; method.","pos":[617,839],"source":"       Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method."},{"content":"Extract the receiving &lt;xref:System.Net.Sockets.NetworkStream&gt; from this state object.","pos":[840,925],"source":" Extract the receiving <xref:System.Net.Sockets.NetworkStream> from this state object."},{"content":"After obtaining the &lt;xref:System.Net.Sockets.NetworkStream&gt;, call the EndRead method to successfully complete the read operation and return the number of bytes read.","pos":[926,1091],"source":" After obtaining the <xref:System.Net.Sockets.NetworkStream>, call the EndRead method to successfully complete the read operation and return the number of bytes read."},{"content":"The EndRead method blocks until data is available.","pos":[1098,1148]},{"content":"The EndRead method reads as much data as is available up to the number of bytes specified in the <ph id=\"ph1\">`size`</ph> parameter of the &lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt; method.","pos":[1149,1330],"source":" The EndRead method reads as much data as is available up to the number of bytes specified in the `size` parameter of the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method."},{"content":"If the remote host shuts down the &lt;xref:System.Net.Sockets.Socket&gt; connection and all available data has been received, the EndRead method completes immediately and returns zero bytes.","pos":[1331,1515],"source":" If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection and all available data has been received, the EndRead method completes immediately and returns zero bytes."},{"content":"To obtain the received data, call the &lt;xref:System.IAsyncResult.AsyncState%2A&gt; property of the &lt;xref:System.IAsyncResult&gt;, and extract the buffer contained in the resulting state object.","pos":[1522,1708],"source":"       To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive an &lt;xref:System.IO.IOException&gt;, check the &lt;xref:System.Exception.InnerException%2A&gt; property to determine if it was caused by a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[1714,1913],"source":"      > [!NOTE] >  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>."},{"content":"If so, use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt; property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[1914,2148],"source":" If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."}]},{"pos":[44836,44903],"content":"An <xref:System.IAsyncResult> that represents an asynchronous call.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; that represents an asynchronous call.","pos":[0,67],"source":"An <xref:System.IAsyncResult> that represents an asynchronous call."}]},{"pos":[44960,45048],"content":"The number of bytes read from the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of bytes read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[45211,45314],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>asyncResult</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[45404,45574],"content":"The underlying <xref:System.Net.Sockets.Socket> is closed.       -or-       An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"The underlying <xref:System.Net.Sockets.Socket> is closed.       -or-       An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,166],"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; is closed.","pos":[0,58],"source":"The underlying <xref:System.Net.Sockets.Socket> is closed."},{"content":"-or-       An error occurred when accessing the socket.","pos":[65,120]},{"content":"See the Remarks section for more information.","pos":[121,166]}]}]},{"pos":[45682,45750],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed."},{"pos":[46178,46219],"content":"Handles the end of an asynchronous write.","needQuote":true,"needEscape":true,"nodes":[{"content":"Handles the end of an asynchronous write.","pos":[0,41]}]},{"pos":[46232,47708],"content":"EndWrite completes the asynchronous send operation started in <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>.       Before calling <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> returns. The callback method must accept the <xref:System.IAsyncResult> returned from the <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> method as a parameter.       Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> property of the `IAsyncResult` parameter to obtain the <xref:System.Net.Sockets.NetworkStream>. After obtaining the <xref:System.Net.Sockets.NetworkStream>, you can call the EndWrite method to successfully complete the send operation and return the number of bytes sent.       The EndWrite method blocks until the requested number of bytes are sent.      > [!NOTE] >  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>. If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"nodes":[{"content":"EndWrite completes the asynchronous send operation started in &lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;.","pos":[0,116],"source":"EndWrite completes the asynchronous send operation started in <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>."},{"content":"Before calling &lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;, you need to create a callback method that implements the &lt;xref:System.AsyncCallback&gt; delegate.","pos":[123,287],"source":"       Before calling <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate."},{"content":"This callback method executes in a separate thread and is called by the system after &lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt; returns.","pos":[288,435],"source":" This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> returns."},{"content":"The callback method must accept the &lt;xref:System.IAsyncResult&gt; returned from the &lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt; method as a parameter.","pos":[436,593],"source":" The callback method must accept the <xref:System.IAsyncResult> returned from the <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> method as a parameter."},{"content":"Within the callback method, call the &lt;xref:System.IAsyncResult.AsyncState%2A&gt; property of the <ph id=\"ph1\">`IAsyncResult`</ph> parameter to obtain the &lt;xref:System.Net.Sockets.NetworkStream&gt;.","pos":[600,773],"source":"       Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> property of the `IAsyncResult` parameter to obtain the <xref:System.Net.Sockets.NetworkStream>."},{"content":"After obtaining the &lt;xref:System.Net.Sockets.NetworkStream&gt;, you can call the EndWrite method to successfully complete the send operation and return the number of bytes sent.","pos":[774,948],"source":" After obtaining the <xref:System.Net.Sockets.NetworkStream>, you can call the EndWrite method to successfully complete the send operation and return the number of bytes sent."},{"content":"The EndWrite method blocks until the requested number of bytes are sent.","pos":[955,1027]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive an &lt;xref:System.IO.IOException&gt;, check the &lt;xref:System.Exception.InnerException%2A&gt; property to determine if it was caused by a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[1033,1232],"source":"      > [!NOTE] >  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>."},{"content":"If so, use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt; property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[1233,1467],"source":" If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."}]},{"pos":[48527,48596],"content":"The <xref:System.IAsyncResult> that represents the asynchronous call.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IAsyncResult&gt; that represents the asynchronous call.","pos":[0,69],"source":"The <xref:System.IAsyncResult> that represents the asynchronous call."}]},{"pos":[48768,48871],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>asyncResult</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[48961,49200],"content":"The underlying <xref:System.Net.Sockets.Socket> is closed.       -or-       An error occurred while writing to the network.       -or-       An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"The underlying <xref:System.Net.Sockets.Socket> is closed.       -or-       An error occurred while writing to the network.       -or-       An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,231],"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; is closed.","pos":[0,58],"source":"The underlying <xref:System.Net.Sockets.Socket> is closed."},{"content":"-or-       An error occurred while writing to the network.","pos":[65,123]},{"content":"-or-       An error occurred when accessing the socket.","pos":[130,185]},{"content":"See the Remarks section for more information.","pos":[186,231]}]}]},{"pos":[49308,49376],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed."},{"pos":[49726,49815],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[49828,50562],"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Object.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.       For more information about using the Finalize method, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method overrides &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt;.","pos":[0,80],"source":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>."},{"content":"Application code should not call this method; an object's &lt;xref:System.Object.Finalize%2A&gt; method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the &lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt; method.","pos":[81,380],"source":" Application code should not call this method; an object's <xref:System.Object.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method."},{"content":"For more information about using the Finalize method, see <bpt id=\"p1\">[</bpt>Finalize Methods and Destructors<ept id=\"p1\">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id=\"p2\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>, and <bpt id=\"p3\">[</bpt>Overriding the Finalize Method<ept id=\"p3\">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.","pos":[387,732],"source":"       For more information about using the Finalize method, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."}]},{"pos":[51031,51100],"content":"Flushes data from the stream. This method is reserved for future use.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flushes data from the stream. This method is reserved for future use.","pos":[0,69],"nodes":[{"content":"Flushes data from the stream.","pos":[0,29]},{"content":"This method is reserved for future use.","pos":[30,69]}]}]},{"pos":[51112,51374],"content":"The Flush method implements the <xref:System.IO.Stream.Flush%2A?displayProperty=fullName> method; however, because <xref:System.Net.Sockets.NetworkStream> is not buffered, it has no affect on network streams. Calling the Flush method does not throw an exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Flush method implements the <xref:System.IO.Stream.Flush%2A?displayProperty=fullName> method; however, because <xref:System.Net.Sockets.NetworkStream> is not buffered, it has no affect on network streams. Calling the Flush method does not throw an exception.","pos":[0,262],"nodes":[{"content":"The Flush method implements the &lt;xref:System.IO.Stream.Flush%2A?displayProperty=fullName&gt; method; however, because &lt;xref:System.Net.Sockets.NetworkStream&gt; is not buffered, it has no affect on network streams.","pos":[0,208],"source":"The Flush method implements the <xref:System.IO.Stream.Flush%2A?displayProperty=fullName> method; however, because <xref:System.Net.Sockets.NetworkStream> is not buffered, it has no affect on network streams."},{"content":"Calling the Flush method does not throw an exception.","pos":[209,262]}]}]},{"pos":[51999,52057],"content":"Flushes data from the stream as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flushes data from the stream as an asynchronous operation.","pos":[0,58]}]},{"pos":[52069,52270],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after data has been flushed from the stream for the <xref:System.Net.Sockets.NetworkStream> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after data has been flushed from the stream for the <xref:System.Net.Sockets.NetworkStream> instance.","pos":[0,201],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after data has been flushed from the stream for the &lt;xref:System.Net.Sockets.NetworkStream&gt; instance.","pos":[31,201],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after data has been flushed from the stream for the <xref:System.Net.Sockets.NetworkStream> instance."}]}]},{"pos":[52515,52607],"content":"A cancellation token used to propagate notification that this  operation should be canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cancellation token used to propagate notification that this  operation should be canceled.","pos":[0,92]}]},{"pos":[52680,52788],"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","pos":[0,106],"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;.","pos":[0,43],"source":"Returns <xref:System.Threading.Tasks.Task>."},{"content":"The task object representing the asynchronous operation.","pos":[50,106]}]}]},{"pos":[53199,53349],"content":"Gets the length of the data available on the stream. This property is not currently supported and always throws a <xref:System.NotSupportedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the length of the data available on the stream. This property is not currently supported and always throws a <xref:System.NotSupportedException>.","pos":[0,150],"nodes":[{"content":"Gets the length of the data available on the stream.","pos":[0,52]},{"content":"This property is not currently supported and always throws a &lt;xref:System.NotSupportedException&gt;.","pos":[53,150],"source":" This property is not currently supported and always throws a <xref:System.NotSupportedException>."}]}]},{"pos":[53466,53513],"content":"The length of the data available on the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of the data available on the stream.","pos":[0,47]}]},{"pos":[53683,53708],"content":"Any use of this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any use of this property.","pos":[0,25]}]},{"pos":[54054,54200],"content":"Gets or sets the current position in the stream. This property is not currently supported and always throws a <xref:System.NotSupportedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the current position in the stream. This property is not currently supported and always throws a <xref:System.NotSupportedException>.","pos":[0,146],"nodes":[{"content":"Gets or sets the current position in the stream.","pos":[0,48]},{"content":"This property is not currently supported and always throws a &lt;xref:System.NotSupportedException&gt;.","pos":[49,146],"source":" This property is not currently supported and always throws a <xref:System.NotSupportedException>."}]}]},{"pos":[54324,54359],"content":"The current position in the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current position in the stream.","pos":[0,35]}]},{"pos":[54531,54556],"content":"Any use of this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any use of this property.","pos":[0,25]}]},{"pos":[55022,55096],"content":"Reads data from the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Reads data from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[55109,56289],"content":"This method reads data into the `buffer` parameter and returns the number of bytes successfully read. If no data is available for reading, the Read method returns 0. The Read operation reads as much data as is available, up to the number of bytes specified by the `size` parameter. If the remote host shuts down the connection, and all available data has been received, the Read method completes immediately and return zero bytes.      > [!NOTE] >  Check to see if the <xref:System.Net.Sockets.NetworkStream> is readable by calling the <xref:System.Net.Sockets.NetworkStream.CanRead%2A> property. If you attempt to read from a <xref:System.Net.Sockets.NetworkStream> that is not readable, you will get an <xref:System.IO.IOException>.      > [!NOTE] >  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>. If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method reads data into the <ph id=\"ph1\">`buffer`</ph> parameter and returns the number of bytes successfully read.","pos":[0,101],"source":"This method reads data into the `buffer` parameter and returns the number of bytes successfully read."},{"content":"If no data is available for reading, the Read method returns 0.","pos":[102,165]},{"content":"The Read operation reads as much data as is available, up to the number of bytes specified by the <ph id=\"ph1\">`size`</ph> parameter.","pos":[166,281],"source":" The Read operation reads as much data as is available, up to the number of bytes specified by the `size` parameter."},{"content":"If the remote host shuts down the connection, and all available data has been received, the Read method completes immediately and return zero bytes.","pos":[282,430]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Check to see if the &lt;xref:System.Net.Sockets.NetworkStream&gt; is readable by calling the &lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt; property.","pos":[436,596],"source":"      > [!NOTE] >  Check to see if the <xref:System.Net.Sockets.NetworkStream> is readable by calling the <xref:System.Net.Sockets.NetworkStream.CanRead%2A> property."},{"content":"If you attempt to read from a &lt;xref:System.Net.Sockets.NetworkStream&gt; that is not readable, you will get an &lt;xref:System.IO.IOException&gt;.","pos":[597,734],"source":" If you attempt to read from a <xref:System.Net.Sockets.NetworkStream> that is not readable, you will get an <xref:System.IO.IOException>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive an &lt;xref:System.IO.IOException&gt;, check the &lt;xref:System.Exception.InnerException%2A&gt; property to determine if it was caused by a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[740,939],"source":"      > [!NOTE] >  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>."},{"content":"If so, use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt; property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[940,1174],"source":" If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."}]},{"pos":[57026,57175],"content":"An array of type &lt;xref:System.Byte&gt; that is the location in memory to store data read from the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of type <xref:System.Byte> that is the location in memory to store data read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[57237,57291],"content":"The location in <ph id=\"ph1\">`buffer`</ph> to begin storing the data to.","needQuote":true,"needEscape":true,"source":"The location in `buffer` to begin storing the data to."},{"pos":[57351,57442],"content":"The number of bytes to read from the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of bytes to read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[57499,57587],"content":"The number of bytes read from the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of bytes read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[57755,57853],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>buffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[57969,58462],"content":"The <code>offset</code> parameter is less than 0.       -or-       The <code>offset</code> parameter is greater than the length of <code>buffer</code>.       -or-       The <code>size</code> parameter is less than 0.       -or-       The <code>size</code> parameter is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter.       -or-       An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[0,49],"source":"The <code>offset</code> parameter is less than 0."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[56,151],"source":"       -or-       The <code>offset</code> parameter is greater than the length of <code>buffer</code>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">size</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[158,216],"source":"       -or-       The <code>size</code> parameter is less than 0."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">size</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept> minus the value of the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">offset</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter.","pos":[223,369],"source":"       -or-       The <code>size</code> parameter is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."},{"content":"-or-       An error occurred when accessing the socket.","pos":[376,431]},{"content":"See the Remarks section for more information.","pos":[432,477]}]},{"pos":[58552,58610],"content":"The underlying <xref:System.Net.Sockets.Socket> is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; is closed.","pos":[0,58],"source":"The underlying <xref:System.Net.Sockets.Socket> is closed."}]},{"pos":[58718,58854],"content":"The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed.       -or-       There is a failure reading from the network.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","pos":[0,68],"source":"The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed."},{"content":"-or-       There is a failure reading from the network.","pos":[75,130]}]},{"pos":[59201,59315],"content":"Gets or sets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can be read.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that indicates whether the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> can be read."},{"pos":[59328,59851],"content":"You must derive from the <xref:System.Net.Sockets.NetworkStream> class to use the Readable property. If Readable is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method. You can also determine whether a <xref:System.Net.Sockets.NetworkStream> is readable by checking the publicly accessible <xref:System.Net.Sockets.NetworkStream.CanRead%2A> property.       The Readable property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized.","needQuote":false,"needEscape":true,"nodes":[{"content":"You must derive from the &lt;xref:System.Net.Sockets.NetworkStream&gt; class to use the Readable property.","pos":[0,100],"source":"You must derive from the <xref:System.Net.Sockets.NetworkStream> class to use the Readable property."},{"content":"If Readable is <ph id=\"ph1\">`true`</ph>, &lt;xref:System.Net.Sockets.NetworkStream&gt; allows calls to the &lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt; method.","pos":[101,239],"source":" If Readable is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method."},{"content":"You can also determine whether a &lt;xref:System.Net.Sockets.NetworkStream&gt; is readable by checking the publicly accessible &lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt; property.","pos":[240,421],"source":" You can also determine whether a <xref:System.Net.Sockets.NetworkStream> is readable by checking the publicly accessible <xref:System.Net.Sockets.NetworkStream.CanRead%2A> property."},{"content":"The Readable property is set when the &lt;xref:System.Net.Sockets.NetworkStream&gt; is initialized.","pos":[428,521],"source":"       The Readable property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized."}]},{"pos":[60480,60786],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> can be read; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate that the <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> can be read; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,223],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> can be read; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[224,306],"source":" The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[61219,61297],"content":"Gets or sets the amount of time that a read operation blocks waiting for data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the amount of time that a read operation blocks waiting for data.","pos":[0,78]}]},{"pos":[61310,61734],"content":"If the read operation does not complete within the time specified by this property, the read operation throws an <xref:System.IO.IOException>.      > [!NOTE] >  This property affects only synchronous reads performed by calling the <xref:System.Net.Sockets.NetworkStream.Read%2A> method. This property does not affect asynchronous reads performed by calling the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the read operation does not complete within the time specified by this property, the read operation throws an &lt;xref:System.IO.IOException&gt;.","pos":[0,142],"source":"If the read operation does not complete within the time specified by this property, the read operation throws an <xref:System.IO.IOException>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This property affects only synchronous reads performed by calling the &lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt; method.","pos":[148,286],"source":"      > [!NOTE] >  This property affects only synchronous reads performed by calling the <xref:System.Net.Sockets.NetworkStream.Read%2A> method."},{"content":"This property does not affect asynchronous reads performed by calling the &lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt; method.","pos":[287,421],"source":" This property does not affect asynchronous reads performed by calling the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method."}]},{"pos":[62066,62301],"content":"A <xref:System.Int32> that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, <xref:System.Threading.Timeout.Infinite>, specifies that the read operation does not time out.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Int32> that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, <xref:System.Threading.Timeout.Infinite>, specifies that the read operation does not time out.","pos":[0,235],"nodes":[{"content":"A &lt;xref:System.Int32&gt; that specifies the amount of time, in milliseconds, that will elapse before a read operation fails.","pos":[0,121],"source":"A <xref:System.Int32> that specifies the amount of time, in milliseconds, that will elapse before a read operation fails."},{"content":"The default value, &lt;xref:System.Threading.Timeout.Infinite&gt;, specifies that the read operation does not time out.","pos":[122,235],"source":" The default value, <xref:System.Threading.Timeout.Infinite>, specifies that the read operation does not time out."}]}]},{"pos":[62488,62590],"content":"The value specified is less than or equal to zero and is not <xref:System.Threading.Timeout.Infinite>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value specified is less than or equal to zero and is not &lt;xref:System.Threading.Timeout.Infinite&gt;.","pos":[0,102],"source":"The value specified is less than or equal to zero and is not <xref:System.Threading.Timeout.Infinite>."}]},{"pos":[63038,63193],"content":"Sets the current position of the stream to the given value. This method is not currently supported and always throws a <xref:System.NotSupportedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the current position of the stream to the given value. This method is not currently supported and always throws a <xref:System.NotSupportedException>.","pos":[0,155],"nodes":[{"content":"Sets the current position of the stream to the given value.","pos":[0,59]},{"content":"This method is not currently supported and always throws a &lt;xref:System.NotSupportedException&gt;.","pos":[60,155],"source":" This method is not currently supported and always throws a <xref:System.NotSupportedException>."}]}]},{"pos":[63364,63391],"content":"This parameter is not used.","needQuote":true,"needEscape":true,"nodes":[{"content":"This parameter is not used.","pos":[0,27]}]},{"pos":[63461,63488],"content":"This parameter is not used.","needQuote":true,"needEscape":true,"nodes":[{"content":"This parameter is not used.","pos":[0,27]}]},{"pos":[63545,63572],"content":"The position in the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position in the stream.","pos":[0,27]}]},{"pos":[63740,63765],"content":"Any use of this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any use of this property.","pos":[0,25]}]},{"pos":[64163,64258],"content":"Sets the length of the stream. This method always throws a <xref:System.NotSupportedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the length of the stream. This method always throws a <xref:System.NotSupportedException>.","pos":[0,95],"nodes":[{"content":"Sets the length of the stream.","pos":[0,30]},{"content":"This method always throws a &lt;xref:System.NotSupportedException&gt;.","pos":[31,95],"source":" This method always throws a <xref:System.NotSupportedException>."}]}]},{"pos":[64403,64430],"content":"This parameter is not used.","needQuote":true,"needEscape":true,"nodes":[{"content":"This parameter is not used.","pos":[0,27]}]},{"pos":[64603,64628],"content":"Any use of this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any use of this property.","pos":[0,25]}]},{"pos":[64964,65017],"content":"Gets the underlying <xref:System.Net.Sockets.Socket>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the underlying &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,53],"source":"Gets the underlying <xref:System.Net.Sockets.Socket>."}]},{"pos":[65030,65438],"content":"Classes deriving from <xref:System.Net.Sockets.NetworkStream> can use this property to get the underlying <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from the Socket property if you require access beyond that which <xref:System.Net.Sockets.NetworkStream> provides.      > [!NOTE] >  This property is accessible only through this class or a derived class.","needQuote":false,"needEscape":true,"nodes":[{"content":"Classes deriving from &lt;xref:System.Net.Sockets.NetworkStream&gt; can use this property to get the underlying &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,139],"source":"Classes deriving from <xref:System.Net.Sockets.NetworkStream> can use this property to get the underlying <xref:System.Net.Sockets.Socket>."},{"content":"Use the underlying &lt;xref:System.Net.Sockets.Socket&gt; returned from the Socket property if you require access beyond that which &lt;xref:System.Net.Sockets.NetworkStream&gt; provides.","pos":[140,315],"source":" Use the underlying <xref:System.Net.Sockets.Socket> returned from the Socket property if you require access beyond that which <xref:System.Net.Sockets.NetworkStream> provides."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This property is accessible only through this class or a derived class.","pos":[321,405],"source":"      > [!NOTE] >  This property is accessible only through this class or a derived class."}]},{"pos":[66046,66131],"content":"A <xref:System.Net.Sockets.Socket> that represents the underlying network connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Net.Sockets.Socket&gt; that represents the underlying network connection.","pos":[0,85],"source":"A <xref:System.Net.Sockets.Socket> that represents the underlying network connection."}]},{"pos":[66672,66745],"content":"Writes data to the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Writes data to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[66758,67811],"content":"The Write method starts at the specified `offset` and sends `size` bytes from the contents of `buffer` to the network. The Write method blocks until the requested number of bytes is sent or a <xref:System.Net.Sockets.SocketException> is thrown. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.      > [!NOTE] >  Check to see if the <xref:System.Net.Sockets.NetworkStream> is writable by accessing the <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> property. If you attempt to write to a <xref:System.Net.Sockets.NetworkStream> that is not writable, you will get an <xref:System.IO.IOException>. If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Write method starts at the specified <ph id=\"ph1\">`offset`</ph> and sends <ph id=\"ph2\">`size`</ph> bytes from the contents of <ph id=\"ph3\">`buffer`</ph> to the network.","pos":[0,118],"source":"The Write method starts at the specified `offset` and sends `size` bytes from the contents of `buffer` to the network."},{"content":"The Write method blocks until the requested number of bytes is sent or a &lt;xref:System.Net.Sockets.SocketException&gt; is thrown.","pos":[119,244],"source":" The Write method blocks until the requested number of bytes is sent or a <xref:System.Net.Sockets.SocketException> is thrown."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[245,557],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Check to see if the &lt;xref:System.Net.Sockets.NetworkStream&gt; is writable by accessing the &lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt; property.","pos":[563,726],"source":"      > [!NOTE] >  Check to see if the <xref:System.Net.Sockets.NetworkStream> is writable by accessing the <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> property."},{"content":"If you attempt to write to a &lt;xref:System.Net.Sockets.NetworkStream&gt; that is not writable, you will get an &lt;xref:System.IO.IOException&gt;.","pos":[727,863],"source":" If you attempt to write to a <xref:System.Net.Sockets.NetworkStream> that is not writable, you will get an <xref:System.IO.IOException>."},{"content":"If you receive an &lt;xref:System.IO.IOException&gt;, check the &lt;xref:System.Exception.InnerException%2A&gt; property to determine if it was caused by a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[864,1050],"source":" If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>."}]},{"pos":[68489,68618],"content":"An array of type &lt;xref:System.Byte&gt; that contains the data to write to the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of type <xref:System.Byte> that contains the data to write to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[68680,68738],"content":"The location in <ph id=\"ph1\">`buffer`</ph> from which to start writing data.","needQuote":true,"needEscape":true,"source":"The location in `buffer` from which to start writing data."},{"pos":[68798,68888],"content":"The number of bytes to write to the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of bytes to write to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[69057,69155],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>buffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[69271,69652],"content":"The <code>offset</code> parameter is less than 0.       -or-       The <code>offset</code> parameter is greater than the length of <code>buffer</code>.       -or-       The <code>size</code> parameter is less than 0.       -or-       The <code>size</code> parameter is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[0,49],"source":"The <code>offset</code> parameter is less than 0."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[56,151],"source":"       -or-       The <code>offset</code> parameter is greater than the length of <code>buffer</code>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">size</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[158,216],"source":"       -or-       The <code>size</code> parameter is less than 0."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">size</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept> minus the value of the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">offset</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter.","pos":[223,369],"source":"       -or-       The <code>size</code> parameter is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."}]},{"pos":[69743,69904],"content":"There was a failure while writing to the network.       -or-       An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"There was a failure while writing to the network.       -or-       An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,157],"nodes":[{"content":"There was a failure while writing to the network.","pos":[0,49]},{"content":"-or-       An error occurred when accessing the socket.","pos":[56,111]},{"content":"See the Remarks section for more information.","pos":[112,157]}]}]},{"pos":[70013,70150],"content":"The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed.       -or-       There was a failure reading from the network.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","pos":[0,68],"source":"The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed."},{"content":"-or-       There was a failure reading from the network.","pos":[75,131]}]},{"pos":[70502,70608],"content":"Gets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is writable.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is writable."},{"pos":[70621,71149],"content":"You must derive from the <xref:System.Net.Sockets.NetworkStream> class to use the Writeable property. If Writeable is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. You can also determine whether a <xref:System.Net.Sockets.NetworkStream> is writable by checking the publicly accessible <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> property.       The Writeable property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized.","needQuote":false,"needEscape":true,"nodes":[{"content":"You must derive from the &lt;xref:System.Net.Sockets.NetworkStream&gt; class to use the Writeable property.","pos":[0,101],"source":"You must derive from the <xref:System.Net.Sockets.NetworkStream> class to use the Writeable property."},{"content":"If Writeable is <ph id=\"ph1\">`true`</ph>, &lt;xref:System.Net.Sockets.NetworkStream&gt; allows calls to the &lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt; method.","pos":[102,242],"source":" If Writeable is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method."},{"content":"You can also determine whether a &lt;xref:System.Net.Sockets.NetworkStream&gt; is writable by checking the publicly accessible &lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt; property.","pos":[243,425],"source":" You can also determine whether a <xref:System.Net.Sockets.NetworkStream> is writable by checking the publicly accessible <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> property."},{"content":"The Writeable property is set when the &lt;xref:System.Net.Sockets.NetworkStream&gt; is initialized.","pos":[432,526],"source":"       The Writeable property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized."}]},{"pos":[71780,72036],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data can be written to the stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if data can be written to the stream; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,173],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data can be written to the stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[174,256],"source":" The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[72475,72554],"content":"Gets or sets the amount of time that a write operation blocks waiting for data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the amount of time that a write operation blocks waiting for data.","pos":[0,79]}]},{"pos":[72567,73006],"content":"If the write operation does not complete within the time specified by this property, the write operation throws a <xref:System.IO.IOException>.      > [!NOTE] >  This property affects only synchronous write operations performed by calling the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. This property does not affect asynchronous writes performed by calling the <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the write operation does not complete within the time specified by this property, the write operation throws a &lt;xref:System.IO.IOException&gt;.","pos":[0,143],"source":"If the write operation does not complete within the time specified by this property, the write operation throws a <xref:System.IO.IOException>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This property affects only synchronous write operations performed by calling the &lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt; method.","pos":[149,299],"source":"      > [!NOTE] >  This property affects only synchronous write operations performed by calling the <xref:System.Net.Sockets.NetworkStream.Write%2A> method."},{"content":"This property does not affect asynchronous writes performed by calling the &lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt; method.","pos":[300,436],"source":" This property does not affect asynchronous writes performed by calling the <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> method."}]},{"pos":[73430,73667],"content":"A <xref:System.Int32> that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, <xref:System.Threading.Timeout.Infinite>, specifies that the write operation does not time out.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Int32> that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, <xref:System.Threading.Timeout.Infinite>, specifies that the write operation does not time out.","pos":[0,237],"nodes":[{"content":"A &lt;xref:System.Int32&gt; that specifies the amount of time, in milliseconds, that will elapse before a write operation fails.","pos":[0,122],"source":"A <xref:System.Int32> that specifies the amount of time, in milliseconds, that will elapse before a write operation fails."},{"content":"The default value, &lt;xref:System.Threading.Timeout.Infinite&gt;, specifies that the write operation does not time out.","pos":[123,237],"source":" The default value, <xref:System.Threading.Timeout.Infinite>, specifies that the write operation does not time out."}]}]},{"pos":[73855,73957],"content":"The value specified is less than or equal to zero and is not <xref:System.Threading.Timeout.Infinite>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value specified is less than or equal to zero and is not &lt;xref:System.Threading.Timeout.Infinite&gt;.","pos":[0,102],"source":"The value specified is less than or equal to zero and is not <xref:System.Threading.Timeout.Infinite>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Sockets.NetworkStream\n  id: NetworkStream\n  children:\n  - System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)\n  - System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)\n  - System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)\n  - System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)\n  - System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Sockets.NetworkStream.CanRead\n  - System.Net.Sockets.NetworkStream.CanSeek\n  - System.Net.Sockets.NetworkStream.CanTimeout\n  - System.Net.Sockets.NetworkStream.CanWrite\n  - System.Net.Sockets.NetworkStream.Close(System.Int32)\n  - System.Net.Sockets.NetworkStream.DataAvailable\n  - System.Net.Sockets.NetworkStream.Dispose(System.Boolean)\n  - System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)\n  - System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)\n  - System.Net.Sockets.NetworkStream.Finalize\n  - System.Net.Sockets.NetworkStream.Flush\n  - System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)\n  - System.Net.Sockets.NetworkStream.Length\n  - System.Net.Sockets.NetworkStream.Position\n  - System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Sockets.NetworkStream.Readable\n  - System.Net.Sockets.NetworkStream.ReadTimeout\n  - System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.Net.Sockets.NetworkStream.SetLength(System.Int64)\n  - System.Net.Sockets.NetworkStream.Socket\n  - System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Sockets.NetworkStream.Writeable\n  - System.Net.Sockets.NetworkStream.WriteTimeout\n  langs:\n  - csharp\n  name: NetworkStream\n  nameWithType: NetworkStream\n  fullName: System.Net.Sockets.NetworkStream\n  type: Class\n  summary: Provides the underlying stream of data for network access.\n  remarks: \"The NetworkStream class provides methods for sending and receiving data over <xref:System.Net.Sockets.SocketType> sockets in blocking mode. For more information about blocking versus nonblocking <xref:System.Net.Sockets.Socket>s, see [Using an Asynchronous Client Socket](~/add/includes/ajax-current-ext-md.md). You can use the NetworkStream class for both synchronous and asynchronous data transfer. For more information about synchronous and asynchronous communication, see [Sockets](~/add/includes/ajax-current-ext-md.md).  \\n  \\n To create a NetworkStream, you must provide a connected <xref:System.Net.Sockets.Socket>. You can also specify what <xref:System.IO.FileAccess> permission the NetworkStream has over the provided <xref:System.Net.Sockets.Socket>. By default, closing the NetworkStream does not close the provided <xref:System.Net.Sockets.Socket>. If you want the NetworkStream to have permission to close the provided <xref:System.Net.Sockets.Socket>, you must specify `true` for the value of the `ownsSocket` parameter.  \\n  \\n Use the <xref:System.Net.Sockets.NetworkStream.Write%2A> and <xref:System.Net.Sockets.NetworkStream.Read%2A> methods for simple single thread synchronous blocking I/O. If you want to process your I/O using separate threads, consider using the <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> and <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> methods, or the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> and <xref:System.Net.Sockets.NetworkStream.EndRead%2A> methods for communication.  \\n  \\n The NetworkStream does not support random access to the network data stream. The value of the <xref:System.Net.Sockets.NetworkStream.CanSeek%2A> property, which indicates whether the stream supports seeking, is always `false`; reading the <xref:System.Net.Sockets.NetworkStream.Position%2A> property, reading the <xref:System.Net.Sockets.NetworkStream.Length%2A> property, or calling the <xref:System.Net.Sockets.NetworkStream.Seek%2A> method will throw a <xref:System.NotSupportedException>.  \\n  \\n Read and write operations can be performed simultaneously on an instance of the NetworkStream class without the need for synchronization. As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.\"\n  example:\n  - \"The following code example demonstrates how to create a NetworkStream from a connected <xref:System.Net.Sockets.SocketType><xref:System.Net.Sockets.Socket> and perform basic synchronous blocking I/O.  \\n  \\n [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/add/codesnippet/visualbasic/t-system.net.sockets.net_1.vb)]\\n [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/add/codesnippet/cpp/t-system.net.sockets.net_1.cpp)]\\n [!code-cs[NetworkStream_Synch_SendAndReceive#2](~/add/codesnippet/csharp/t-system.net.sockets.net_1.cs)]\"\n  syntax:\n    content: 'public class NetworkStream : System.IO.Stream'\n  inheritance:\n  - System.IO.Stream\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)\n  id: '#ctor(System.Net.Sockets.Socket)'\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: NetworkStream(Socket)\n  nameWithType: NetworkStream.NetworkStream(Socket)\n  fullName: System.Net.Sockets.NetworkStream.NetworkStream(Socket)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Creates a new instance of the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> class for the specified <xref:System.Net.Sockets.Socket>.\n  remarks: The <xref:System.Net.Sockets.NetworkStream> is created with read/write access to the specified <xref:System.Net.Sockets.Socket>. The <xref:System.Net.Sockets.NetworkStream> does not own the underlying <xref:System.Net.Sockets.Socket>, so calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method does not close the <xref:System.Net.Sockets.Socket>.\n  example:\n  - \"The following code example illustrates how to create a <xref:System.Net.Sockets.NetworkStream> with a <xref:System.Net.Sockets.Socket>.  \\n  \\n [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/add/codesnippet/visualbasic/m-system.net.sockets.net_0_1.vb)]\\n [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/add/codesnippet/cpp/m-system.net.sockets.net_0_1.cpp)]\\n [!code-cs[NetworkStream_Synch_SendAndReceive#2](~/add/codesnippet/csharp/m-system.net.sockets.net_0_1.cs)]\"\n  syntax:\n    content: public NetworkStream (System.Net.Sockets.Socket socket);\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n      description: The <xref:System.Net.Sockets.Socket> that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will use to send and receive data.\n  overload: System.Net.Sockets.NetworkStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>socket</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The <code>socket</code> parameter is not connected.  \\n  \\n -or-  \\n  \\n The <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;.  \\n  \\n -or-  \\n  \\n The <code>socket</code> parameter is in a nonblocking state.\"\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)\n  id: '#ctor(System.Net.Sockets.Socket,System.Boolean)'\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: NetworkStream(Socket,Boolean)\n  nameWithType: NetworkStream.NetworkStream(Socket,Boolean)\n  fullName: System.Net.Sockets.NetworkStream.NetworkStream(Socket,Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> class for the specified <xref:System.Net.Sockets.Socket> with the specified <xref:System.Net.Sockets.Socket> ownership.\n  remarks: The <xref:System.Net.Sockets.NetworkStream> is created with read/write access to the specified <xref:System.Net.Sockets.Socket>. If the value of `ownsSocket` parameter is `true`, the <xref:System.Net.Sockets.NetworkStream> takes ownership of the underlying <xref:System.Net.Sockets.Socket>, and calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method also closes the underlying <xref:System.Net.Sockets.Socket>.\n  example:\n  - \"The following code example creates a <xref:System.Net.Sockets.NetworkStream> with ownership of the <xref:System.Net.Sockets.Socket>.  \\n  \\n [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/add/codesnippet/visualbasic/59c93a1c-9c9b-46b2-a872-_1.vb)]\\n [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/add/codesnippet/cpp/59c93a1c-9c9b-46b2-a872-_1.cpp)]\\n [!code-cs[NetworkStream_Synch_SendAndReceive#2](~/add/codesnippet/csharp/59c93a1c-9c9b-46b2-a872-_1.cs)]\"\n  syntax:\n    content: public NetworkStream (System.Net.Sockets.Socket socket, bool ownsSocket);\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n      description: The <xref:System.Net.Sockets.Socket> that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will use to send and receive data.\n    - id: ownsSocket\n      type: System.Boolean\n      description: Set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will take ownership of the <xref:System.Net.Sockets.Socket>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Sockets.NetworkStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>socket</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The <code>socket</code> parameter is not connected.  \\n  \\n -or-  \\n  \\n the value of the <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;.  \\n  \\n -or-  \\n  \\n the <code>socket</code> parameter is in a nonblocking state.\"\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)\n  id: '#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)'\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: NetworkStream(Socket,FileAccess)\n  nameWithType: NetworkStream.NetworkStream(Socket,FileAccess)\n  fullName: System.Net.Sockets.NetworkStream.NetworkStream(Socket,FileAccess)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Creates a new instance of the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> class for the specified <xref:System.Net.Sockets.Socket> with the specified access rights.\n  remarks: \"The <xref:System.Net.Sockets.NetworkStream> is created with the specified access to the specified <xref:System.Net.Sockets.Socket>. With this constructor, the <xref:System.Net.Sockets.NetworkStream> does not own the underlying <xref:System.Net.Sockets.Socket>, so calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method does not close the underlying <xref:System.Net.Sockets.Socket>.  \\n  \\n The `access` parameter sets the <xref:System.Net.Sockets.NetworkStream.CanRead%2A> and <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> properties of the <xref:System.Net.Sockets.NetworkStream>. If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method. If you specify <xref:System.IO.FileAccess>, both method calls are allowed.\"\n  example:\n  - \"The following code example creates a <xref:System.Net.Sockets.NetworkStream> with the ability to read and write to the <xref:System.Net.Sockets.Socket>.  \\n  \\n [!code-vb[NetworkStream_Async_SendAndReceive#1](~/add/codesnippet/visualbasic/586c6962-cd9c-4b70-aa3e-_1.vb)]\\n [!code-cs[NetworkStream_Async_SendAndReceive#1](~/add/codesnippet/csharp/586c6962-cd9c-4b70-aa3e-_1.cs)]\\n [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/add/codesnippet/cpp/586c6962-cd9c-4b70-aa3e-_1.cpp)]\"\n  syntax:\n    content: public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access);\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n      description: The <xref:System.Net.Sockets.Socket> that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will use to send and receive data.\n    - id: access\n      type: System.IO.FileAccess\n      description: A bitwise combination of the <xref href=\"System.IO.FileAccess\"></xref> values that specify the type of access given to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> over the provided <xref:System.Net.Sockets.Socket>.\n  overload: System.Net.Sockets.NetworkStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>socket</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The <code>socket</code> parameter is not connected.  \\n  \\n -or-  \\n  \\n the <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;.  \\n  \\n -or-  \\n  \\n the <code>socket</code> parameter is in a nonblocking state.\"\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)\n  id: '#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)'\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: NetworkStream(Socket,FileAccess,Boolean)\n  nameWithType: NetworkStream.NetworkStream(Socket,FileAccess,Boolean)\n  fullName: System.Net.Sockets.NetworkStream.NetworkStream(Socket,FileAccess,Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Creates a new instance of the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> class for the specified <xref:System.Net.Sockets.Socket> with the specified access rights and the specified <xref:System.Net.Sockets.Socket> ownership.\n  remarks: \"The <xref:System.Net.Sockets.NetworkStream> is created with read/write access to the specified <xref:System.Net.Sockets.Socket>. If the value of the `ownsSocket` parameter is `true`, the <xref:System.Net.Sockets.NetworkStream> takes ownership of the underlying <xref:System.Net.Sockets.Socket>, and calling the <xref:System.Net.Sockets.NetworkStream.Close%2A> method also closes the underlying <xref:System.Net.Sockets.Socket>.  \\n  \\n The `access` parameter sets the <xref:System.Net.Sockets.NetworkStream.CanRead%2A> and <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> properties of the <xref:System.Net.Sockets.NetworkStream>. If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. If you specify <xref:System.IO.FileAccess>, then the <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method. If you specify <xref:System.IO.FileAccess>, both method calls are allowed.\"\n  example:\n  - \"The following code example creates a <xref:System.Net.Sockets.NetworkStream> with the ability to read and write to the <xref:System.Net.Sockets.Socket>. Ownership of the <xref:System.Net.Sockets.Socket> is given to this <xref:System.Net.Sockets.NetworkStream> by specifying `true` for the `ownsSocket` parameter.  \\n  \\n [!code-vb[NetworkStream_Async_SendAndReceive#1](~/add/codesnippet/visualbasic/db34d484-28c0-47ef-b5ca-_1.vb)]\\n [!code-cs[NetworkStream_Async_SendAndReceive#1](~/add/codesnippet/csharp/db34d484-28c0-47ef-b5ca-_1.cs)]\\n [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/add/codesnippet/cpp/db34d484-28c0-47ef-b5ca-_1.cpp)]\"\n  syntax:\n    content: public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access, bool ownsSocket);\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n      description: The <xref:System.Net.Sockets.Socket> that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will use to send and receive data.\n    - id: access\n      type: System.IO.FileAccess\n      description: A bitwise combination of the <xref href=\"System.IO.FileAccess\"></xref> values that specifies the type of access given to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> over the provided <xref:System.Net.Sockets.Socket>.\n    - id: ownsSocket\n      type: System.Boolean\n      description: Set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> will take ownership of the <xref:System.Net.Sockets.Socket>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Sockets.NetworkStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>socket</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The <code>socket</code> parameter is not connected.  \\n  \\n -or-  \\n  \\n The <xref:System.Net.Sockets.Socket.SocketType*> property of the <code>socket</code> parameter is not &lt;xref:System.Net.Sockets.SocketType?displayProperty=fullName&gt;.  \\n  \\n -or-  \\n  \\n The <code>socket</code> parameter is in a nonblocking state.\"\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: NetworkStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Sockets.NetworkStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Begins an asynchronous read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  remarks: \"The BeginRead method starts asynchronously reading data from the incoming network buffers. Calling the BeginRead method gives you the ability to receive data within a separate execution thread.  \\n  \\n You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginRead method. At the very minimum, your `state` parameter must contain the <xref:System.Net.Sockets.NetworkStream>. Because you will want to obtain the received data within your callback method, you should create a small class or structure to hold a read buffer and any other useful information. Pass the structure or class instance to the BeginRead method through the `state` parameter.  \\n  \\n Your callback method should call the <xref:System.Net.Sockets.NetworkStream.EndRead%2A> method. When your application calls BeginRead, the system will wait until data is received or an error occurs, and then the system will use a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.NetworkStream.EndRead%2A> until the provided <xref:System.Net.Sockets.NetworkStream> reads data or throws an exception. If you want the original thread to block after you call the BeginRead method, use the <xref:System.Threading.WaitHandle.WaitOne%2A> method. Call <xref:System.Threading.EventWaitHandle.Set%2A> in the callback method when you want the original thread to continue executing. For additional information about writing callback methods, see [Marshaling a Delegate as a Callback Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The BeginRead method reads as much data as is available, up to the number of bytes specified by the `size` parameter.  \\n  \\n> [!NOTE]\\n>  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>. If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n Read and write operations can be performed simultaneously on an instance of the <xref:System.Net.Sockets.NetworkStream> class without the need for synchronization. As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.\"\n  example:\n  - \"The following code example uses BeginRead to read data asynchronously from the network stream. The `myReadCallBack` method implements the <xref:System.AsyncCallback> delegate and is called by the system when BeginRead returns.  \\n  \\n [!code-vb[NetworkStream_Async_SendAndReceive#3](~/add/codesnippet/visualbasic/b2716ae9-7520-4d87-8b97-_1.vb)]\\n [!code-cs[NetworkStream_Async_SendAndReceive#3](~/add/codesnippet/csharp/b2716ae9-7520-4d87-8b97-_1.cs)]\\n [!code-cpp[NetworkStream_Async_SendAndReceive#3](~/add/codesnippet/cpp/b2716ae9-7520-4d87-8b97-_1.cpp)]\"\n  syntax:\n    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int size, AsyncCallback callback, object state);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that is the location in memory to store data read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n    - id: offset\n      type: System.Int32\n      description: The location in `buffer` to begin storing the data.\n    - id: size\n      type: System.Int32\n      description: The number of bytes to read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n    - id: callback\n      type: System.AsyncCallback\n      description: The <xref:System.AsyncCallback> delegate that is executed when BeginRead completes.\n    - id: state\n      type: System.Object\n      description: An object that contains any additional user-defined data.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that represents the asynchronous call.\n  overload: System.Net.Sockets.NetworkStream.BeginRead*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>buffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>offset</code> parameter is less than 0.  \\n  \\n -or-  \\n  \\n The <code>offset</code> parameter is greater than the length of the <code>buffer</code> paramater.  \\n  \\n -or-  \\n  \\n The <code>size</code> is less than 0.  \\n  \\n -or-  \\n  \\n The <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The underlying <xref:System.Net.Sockets.Socket> is closed.  \\n  \\n -or-  \\n  \\n There was a failure while reading from the network.  \\n  \\n -or-  \\n  \\n An error occurred when accessing the socket. See the Remarks section for more information.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: NetworkStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Sockets.NetworkStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Begins an asynchronous write to a stream.\n  remarks: \"The BeginWrite method starts an asynchronous send operation to the remote host. Calling the BeginWrite method gives you the ability to send data within a separate execution thread.  \\n  \\n You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginWrite method. At the very minimum, your `state` parameter must contain the <xref:System.Net.Sockets.NetworkStream>. If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.NetworkStream> and the other required information. Pass the structure or class instance to the BeginWrite method through the `state` parameter.  \\n  \\n Your callback method should implement the <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> method. When your application calls BeginWrite, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> until the <xref:System.Net.Sockets.NetworkStream> sends the number of bytes requested or throws an exception. If you want the original thread to block after you call the BeginWrite method, use the <xref:System.Threading.WaitHandle.WaitOne%2A> method. Call <xref:System.Threading.EventWaitHandle.Set%2A> in the callback method when you want the original thread to continue executing. For additional information about writing callback methods, see [Marshaling a Delegate as a Callback Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>. If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n Read and write operations can be performed simultaneously on an instance of the <xref:System.Net.Sockets.NetworkStream> class without the need for synchronization. As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.\"\n  example:\n  - \"The following code example uses BeginWrite to write data asynchronously to a network stream. The `myWriteCallBack` method implements the <xref:System.AsyncCallback> delegate and is called by the system when BeginWrite returns.  \\n  \\n [!code-vb[NetworkStream_Async_SendAndReceive#2](~/add/codesnippet/visualbasic/d3b03755-0183-42fc-98c1-_1.vb)]\\n [!code-cs[NetworkStream_Async_SendAndReceive#2](~/add/codesnippet/csharp/d3b03755-0183-42fc-98c1-_1.cs)]\\n [!code-cpp[NetworkStream_Async_SendAndReceive#2](~/add/codesnippet/cpp/d3b03755-0183-42fc-98c1-_1.cpp)]\"\n  syntax:\n    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int size, AsyncCallback callback, object state);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that contains the data to write to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n    - id: offset\n      type: System.Int32\n      description: The location in `buffer` to begin sending the data.\n    - id: size\n      type: System.Int32\n      description: The number of bytes to write to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n    - id: callback\n      type: System.AsyncCallback\n      description: The <xref:System.AsyncCallback> delegate that is executed when BeginWrite completes.\n    - id: state\n      type: System.Object\n      description: An object that contains any additional user-defined data.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that represents the asynchronous call.\n  overload: System.Net.Sockets.NetworkStream.BeginWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>buffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>offset</code> parameter is less than 0.  \\n  \\n -or-  \\n  \\n The <code>offset</code> parameter is greater than the length of <code>buffer</code>.  \\n  \\n -or-  \\n  \\n The <code>size</code> parameter is less than 0.  \\n  \\n -or-  \\n  \\n The <code>size</code> parameter is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The underlying <xref:System.Net.Sockets.Socket> is closed.  \\n  \\n -or-  \\n  \\n There was a failure while writing to the network.  \\n  \\n -or-  \\n  \\n An error occurred when accessing the socket. See the Remarks section for more information.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.CanRead\n  id: CanRead\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: NetworkStream.CanRead\n  fullName: System.Net.Sockets.NetworkStream.CanRead\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets a value that indicates whether the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> supports reading.\n  remarks: If CanRead is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method. Provide the appropriate <xref:System.IO.FileAccess> enumerated value in the constructor to set the readability and writability of the <xref:System.Net.Sockets.NetworkStream>. The CanRead property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized.\n  example:\n  - \"The following code example checks CanRead to verify that the <xref:System.Net.Sockets.NetworkStream> is readable. It then performs a read operation on the <xref:System.Net.Sockets.NetworkStream>.  \\n  \\n [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/add/codesnippet/visualbasic/p-system.net.sockets.net_6_1.vb)]\\n [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/add/codesnippet/cpp/p-system.net.sockets.net_6_1.cpp)]\\n [!code-cs[NetworkStream_Synch_SendAndReceive#4](~/add/codesnippet/csharp/p-system.net.sockets.net_6_1.cs)]\"\n  syntax:\n    content: public override bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data can be read from the stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Net.Sockets.NetworkStream.CanRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.CanSeek\n  id: CanSeek\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: CanSeek\n  nameWithType: NetworkStream.CanSeek\n  fullName: System.Net.Sockets.NetworkStream.CanSeek\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets a value that indicates whether the stream supports seeking. This property is not currently supported.This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  syntax:\n    content: public override bool CanSeek { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> in all cases to indicate that <xref href=\"System.Net.Sockets.NetworkStream\"></xref> cannot seek a specific location in the stream.\n  overload: System.Net.Sockets.NetworkStream.CanSeek*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.CanTimeout\n  id: CanTimeout\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: CanTimeout\n  nameWithType: NetworkStream.CanTimeout\n  fullName: System.Net.Sockets.NetworkStream.CanTimeout\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Indicates whether timeout properties are usable for <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  remarks: This property is present because it is inherited from <xref:System.IO.Stream>.\n  syntax:\n    content: public override bool CanTimeout { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> in all cases.\n  overload: System.Net.Sockets.NetworkStream.CanTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.CanWrite\n  id: CanWrite\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: NetworkStream.CanWrite\n  fullName: System.Net.Sockets.NetworkStream.CanWrite\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets a value that indicates whether the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> supports writing.\n  remarks: If CanWrite is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. Provide the appropriate <xref:System.IO.FileAccess> enumerated value in the constructor to set the readability and writability of the <xref:System.Net.Sockets.NetworkStream>. The CanWrite property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized.\n  example:\n  - \"The following code example checks CanWrite to verify that the <xref:System.Net.Sockets.NetworkStream> is writable. It then performs a write operation on the <xref:System.Net.Sockets.NetworkStream>.  \\n  \\n [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/add/codesnippet/visualbasic/p-system.net.sockets.net_0_1.vb)]\\n [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/add/codesnippet/cpp/p-system.net.sockets.net_0_1.cpp)]\\n [!code-cs[NetworkStream_Synch_SendAndReceive#3](~/add/codesnippet/csharp/p-system.net.sockets.net_0_1.cs)]\"\n  syntax:\n    content: public override bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data can be written to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Net.Sockets.NetworkStream.CanWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Close(System.Int32)\n  id: Close(System.Int32)\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Close(Int32)\n  nameWithType: NetworkStream.Close(Int32)\n  fullName: System.Net.Sockets.NetworkStream.Close(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Closes the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> after waiting the specified time to allow data to be sent.\n  remarks: \"The Close method frees both unmanaged and managed resources associated with the <xref:System.Net.Sockets.NetworkStream>. If the <xref:System.Net.Sockets.NetworkStream> owns the underlying <xref:System.Net.Sockets.Socket>, it is closed as well.  \\n  \\n If a <xref:System.Net.Sockets.NetworkStream> was associated with a <xref:System.Net.Sockets.TcpClient>, the Close method will close the TCP connection, but not dispose of the associated <xref:System.Net.Sockets.TcpClient>.\"\n  syntax:\n    content: public void Close (int timeout);\n    parameters:\n    - id: timeout\n      type: System.Int32\n      description: A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing.\n  overload: System.Net.Sockets.NetworkStream.Close*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>timeout</code> parameter is less than -1.\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.DataAvailable\n  id: DataAvailable\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: DataAvailable\n  nameWithType: NetworkStream.DataAvailable\n  fullName: System.Net.Sockets.NetworkStream.DataAvailable\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets a value that indicates whether data is available on the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> to be read.\n  remarks: Use the DataAvailable property to determine if data is ready to be read. If DataAvailable is `true`, a call to <xref:System.Net.Sockets.NetworkStream.Read%2A> returns immediately. If the remote host shuts down or closes the connection, DataAvailable may throw a <xref:System.Net.Sockets.SocketException>.\n  example:\n  - \"The following code example reads from the <xref:System.Net.Sockets.NetworkStream> as long as data is available.  \\n  \\n [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/add/codesnippet/visualbasic/p-system.net.sockets.net_2_1.vb)]\\n [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/add/codesnippet/cpp/p-system.net.sockets.net_2_1.cpp)]\\n [!code-cs[NetworkStream_Synch_SendAndReceive#4](~/add/codesnippet/csharp/p-system.net.sockets.net_2_1.cs)]\"\n  syntax:\n    content: public virtual bool DataAvailable { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data is available on the stream to be read; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Sockets.NetworkStream.DataAvailable*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The underlying <xref:System.Net.Sockets.Socket> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: NetworkStream.Dispose(Boolean)\n  fullName: System.Net.Sockets.NetworkStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose` method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.NetworkStream> references. This method invokes the `Dispose` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Net.Sockets.NetworkStream.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)\n  id: EndRead(System.IAsyncResult)\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: EndRead(IAsyncResult)\n  nameWithType: NetworkStream.EndRead(IAsyncResult)\n  fullName: System.Net.Sockets.NetworkStream.EndRead(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Handles the end of an asynchronous read.\n  remarks: \"The EndRead method completes the asynchronous read operation started in the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method.  \\n  \\n Before calling <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> returns. The callback method must accept the <xref:System.IAsyncResult> returned from the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method as a parameter.  \\n  \\n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method. Extract the receiving <xref:System.Net.Sockets.NetworkStream> from this state object. After obtaining the <xref:System.Net.Sockets.NetworkStream>, call the EndRead method to successfully complete the read operation and return the number of bytes read.  \\n  \\n The EndRead method blocks until data is available. The EndRead method reads as much data as is available up to the number of bytes specified in the `size` parameter of the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection and all available data has been received, the EndRead method completes immediately and returns zero bytes.  \\n  \\n To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.  \\n  \\n> [!NOTE]\\n>  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>. If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"In the following code example, `myReadCallback` is provided to <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> as the callback method. EndRead is implemented in `myReadCallback` to complete the asynchronous read call started by <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>.  \\n  \\n [!code-vb[NetworkStream_Async_SendAndReceive#5](~/add/codesnippet/visualbasic/m-system.net.sockets.net_2_1.vb)]\\n [!code-cs[NetworkStream_Async_SendAndReceive#5](~/add/codesnippet/csharp/m-system.net.sockets.net_2_1.cs)]\\n [!code-cpp[NetworkStream_Async_SendAndReceive#5](~/add/codesnippet/cpp/m-system.net.sockets.net_2_1.cpp)]\"\n  syntax:\n    content: public override int EndRead (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that represents an asynchronous call.\n    return:\n      type: System.Int32\n      description: The number of bytes read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  overload: System.Net.Sockets.NetworkStream.EndRead*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>asyncResult</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The underlying <xref:System.Net.Sockets.Socket> is closed.  \\n  \\n -or-  \\n  \\n An error occurred when accessing the socket. See the Remarks section for more information.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)\n  id: EndWrite(System.IAsyncResult)\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: EndWrite(IAsyncResult)\n  nameWithType: NetworkStream.EndWrite(IAsyncResult)\n  fullName: System.Net.Sockets.NetworkStream.EndWrite(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Handles the end of an asynchronous write.\n  remarks: \"EndWrite completes the asynchronous send operation started in <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>.  \\n  \\n Before calling <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> returns. The callback method must accept the <xref:System.IAsyncResult> returned from the <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> method as a parameter.  \\n  \\n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> property of the `IAsyncResult` parameter to obtain the <xref:System.Net.Sockets.NetworkStream>. After obtaining the <xref:System.Net.Sockets.NetworkStream>, you can call the EndWrite method to successfully complete the send operation and return the number of bytes sent.  \\n  \\n The EndWrite method blocks until the requested number of bytes are sent.  \\n  \\n> [!NOTE]\\n>  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>. If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"In the following code example, `myWriteCallback` is provided to <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> as the callback method. EndWrite is implemented in `myWriteCallback` to complete the asynchronous write call started by <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>.  \\n  \\n [!code-vb[NetworkStream_Async_SendAndReceive#4](~/add/codesnippet/visualbasic/m-system.net.sockets.net_3_1.vb)]\\n [!code-cs[NetworkStream_Async_SendAndReceive#4](~/add/codesnippet/csharp/m-system.net.sockets.net_3_1.cs)]\\n [!code-cpp[NetworkStream_Async_SendAndReceive#4](~/add/codesnippet/cpp/m-system.net.sockets.net_3_1.cpp)]\"\n  syntax:\n    content: public override void EndWrite (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The <xref:System.IAsyncResult> that represents the asynchronous call.\n  overload: System.Net.Sockets.NetworkStream.EndWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>asyncResult</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The underlying <xref:System.Net.Sockets.Socket> is closed.  \\n  \\n -or-  \\n  \\n An error occurred while writing to the network.  \\n  \\n -or-  \\n  \\n An error occurred when accessing the socket. See the Remarks section for more information.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Finalize\n  id: Finalize\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: NetworkStream.Finalize()\n  fullName: System.Net.Sockets.NetworkStream.Finalize()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Releases all resources used by the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  remarks: \"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Object.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.  \\n  \\n For more information about using the Finalize method, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).\"\n  syntax:\n    content: ~NetworkStream ();\n    parameters: []\n  overload: System.Net.Sockets.NetworkStream.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Flush\n  id: Flush\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: NetworkStream.Flush()\n  fullName: System.Net.Sockets.NetworkStream.Flush()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Flushes data from the stream. This method is reserved for future use.\n  remarks: The Flush method implements the <xref:System.IO.Stream.Flush%2A?displayProperty=fullName> method; however, because <xref:System.Net.Sockets.NetworkStream> is not buffered, it has no affect on network streams. Calling the Flush method does not throw an exception.\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.Net.Sockets.NetworkStream.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)\n  id: FlushAsync(System.Threading.CancellationToken)\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: FlushAsync(CancellationToken)\n  nameWithType: NetworkStream.FlushAsync(CancellationToken)\n  fullName: System.Net.Sockets.NetworkStream.FlushAsync(CancellationToken)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Flushes data from the stream as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after data has been flushed from the stream for the <xref:System.Net.Sockets.NetworkStream> instance.\n  syntax:\n    content: public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token used to propagate notification that this  operation should be canceled.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Sockets.NetworkStream.FlushAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Length\n  id: Length\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Length\n  nameWithType: NetworkStream.Length\n  fullName: System.Net.Sockets.NetworkStream.Length\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets the length of the data available on the stream. This property is not currently supported and always throws a <xref:System.NotSupportedException>.\n  syntax:\n    content: public override long Length { get; }\n    return:\n      type: System.Int64\n      description: The length of the data available on the stream.\n  overload: System.Net.Sockets.NetworkStream.Length*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Any use of this property.\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Position\n  id: Position\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Position\n  nameWithType: NetworkStream.Position\n  fullName: System.Net.Sockets.NetworkStream.Position\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets the current position in the stream. This property is not currently supported and always throws a <xref:System.NotSupportedException>.\n  syntax:\n    content: public override long Position { get; set; }\n    return:\n      type: System.Int64\n      description: The current position in the stream.\n  overload: System.Net.Sockets.NetworkStream.Position*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Any use of this property.\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Read(Byte[],Int32,Int32)\n  nameWithType: NetworkStream.Read(Byte[],Int32,Int32)\n  fullName: System.Net.Sockets.NetworkStream.Read(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Reads data from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  remarks: \"This method reads data into the `buffer` parameter and returns the number of bytes successfully read. If no data is available for reading, the Read method returns 0. The Read operation reads as much data as is available, up to the number of bytes specified by the `size` parameter. If the remote host shuts down the connection, and all available data has been received, the Read method completes immediately and return zero bytes.  \\n  \\n> [!NOTE]\\n>  Check to see if the <xref:System.Net.Sockets.NetworkStream> is readable by calling the <xref:System.Net.Sockets.NetworkStream.CanRead%2A> property. If you attempt to read from a <xref:System.Net.Sockets.NetworkStream> that is not readable, you will get an <xref:System.IO.IOException>.  \\n  \\n> [!NOTE]\\n>  If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>. If so, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> to determine if data is available to be read. If data is available, it reads from the <xref:System.Net.Sockets.NetworkStream>.  \\n  \\n [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/add/codesnippet/visualbasic/m-system.net.sockets.net_1_1.vb)]\\n [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/add/codesnippet/cpp/m-system.net.sockets.net_1_1.cpp)]\\n [!code-cs[NetworkStream_Synch_SendAndReceive#4](~/add/codesnippet/csharp/m-system.net.sockets.net_1_1.cs)]\"\n  syntax:\n    content: public override int Read (byte[] buffer, int offset, int size);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that is the location in memory to store data read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n    - id: offset\n      type: System.Int32\n      description: The location in `buffer` to begin storing the data to.\n    - id: size\n      type: System.Int32\n      description: The number of bytes to read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n    return:\n      type: System.Int32\n      description: The number of bytes read from the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  overload: System.Net.Sockets.NetworkStream.Read*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>buffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>offset</code> parameter is less than 0.  \\n  \\n -or-  \\n  \\n The <code>offset</code> parameter is greater than the length of <code>buffer</code>.  \\n  \\n -or-  \\n  \\n The <code>size</code> parameter is less than 0.  \\n  \\n -or-  \\n  \\n The <code>size</code> parameter is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter.  \\n  \\n -or-  \\n  \\n An error occurred when accessing the socket. See the Remarks section for more information.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The underlying <xref:System.Net.Sockets.Socket> is closed.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"The <xref href=\\\"System.Net.Sockets.NetworkStream\\\"></xref> is closed.  \\n  \\n -or-  \\n  \\n There is a failure reading from the network.\"\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Readable\n  id: Readable\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Readable\n  nameWithType: NetworkStream.Readable\n  fullName: System.Net.Sockets.NetworkStream.Readable\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets a value that indicates whether the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> can be read.\n  remarks: \"You must derive from the <xref:System.Net.Sockets.NetworkStream> class to use the Readable property. If Readable is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method. You can also determine whether a <xref:System.Net.Sockets.NetworkStream> is readable by checking the publicly accessible <xref:System.Net.Sockets.NetworkStream.CanRead%2A> property.  \\n  \\n The Readable property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized.\"\n  example:\n  - \"In the following code example, the `CanCommunicate` property checks the Readable property to determine if the <xref:System.Net.Sockets.NetworkStream> is readable.  \\n  \\n [!code-cpp[NetworkStream_Protected_Members#1](~/add/codesnippet/cpp/p-system.net.sockets.net_7_1.cpp)]\\n [!code-cs[NetworkStream_Protected_Members#1](~/add/codesnippet/csharp/p-system.net.sockets.net_7_1.cs)]\\n [!code-vb[NetworkStream_Protected_Members#1](~/add/codesnippet/visualbasic/p-system.net.sockets.net_7_1.vb)]\"\n  syntax:\n    content: protected bool Readable { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> can be read; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Net.Sockets.NetworkStream.Readable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.ReadTimeout\n  id: ReadTimeout\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: ReadTimeout\n  nameWithType: NetworkStream.ReadTimeout\n  fullName: System.Net.Sockets.NetworkStream.ReadTimeout\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets the amount of time that a read operation blocks waiting for data.\n  remarks: \"If the read operation does not complete within the time specified by this property, the read operation throws an <xref:System.IO.IOException>.  \\n  \\n> [!NOTE]\\n>  This property affects only synchronous reads performed by calling the <xref:System.Net.Sockets.NetworkStream.Read%2A> method. This property does not affect asynchronous reads performed by calling the <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> method.\"\n  example:\n  - \"The following code example sets the read time-out for a network stream to 10 milliseconds.  \\n  \\n [!code-cs[NCLTcpClientSync#2](~/add/codesnippet/csharp/p-system.net.sockets.net_4_1.cs)]\"\n  syntax:\n    content: public override int ReadTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A <xref:System.Int32> that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, <xref:System.Threading.Timeout.Infinite>, specifies that the read operation does not time out.\n  overload: System.Net.Sockets.NetworkStream.ReadTimeout*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value specified is less than or equal to zero and is not <xref:System.Threading.Timeout.Infinite>.\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Seek(Int64,SeekOrigin)\n  nameWithType: NetworkStream.Seek(Int64,SeekOrigin)\n  fullName: System.Net.Sockets.NetworkStream.Seek(Int64,SeekOrigin)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Sets the current position of the stream to the given value. This method is not currently supported and always throws a <xref:System.NotSupportedException>.\n  syntax:\n    content: public override long Seek (long offset, System.IO.SeekOrigin origin);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: This parameter is not used.\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: This parameter is not used.\n    return:\n      type: System.Int64\n      description: The position in the stream.\n  overload: System.Net.Sockets.NetworkStream.Seek*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Any use of this property.\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: SetLength(Int64)\n  nameWithType: NetworkStream.SetLength(Int64)\n  fullName: System.Net.Sockets.NetworkStream.SetLength(Int64)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Sets the length of the stream. This method always throws a <xref:System.NotSupportedException>.\n  syntax:\n    content: public override void SetLength (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: This parameter is not used.\n  overload: System.Net.Sockets.NetworkStream.SetLength*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Any use of this property.\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Socket\n  id: Socket\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Socket\n  nameWithType: NetworkStream.Socket\n  fullName: System.Net.Sockets.NetworkStream.Socket\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets the underlying <xref:System.Net.Sockets.Socket>.\n  remarks: \"Classes deriving from <xref:System.Net.Sockets.NetworkStream> can use this property to get the underlying <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from the Socket property if you require access beyond that which <xref:System.Net.Sockets.NetworkStream> provides.  \\n  \\n> [!NOTE]\\n>  This property is accessible only through this class or a derived class.\"\n  example:\n  - \"The following code example retrieves the underlying <xref:System.Net.Sockets.Socket> to verify an active connection.  \\n  \\n [!code-cpp[NetworkStream_Protected_Members#1](~/add/codesnippet/cpp/p-system.net.sockets.net_3_1.cpp)]\\n [!code-cs[NetworkStream_Protected_Members#1](~/add/codesnippet/csharp/p-system.net.sockets.net_3_1.cs)]\\n [!code-vb[NetworkStream_Protected_Members#1](~/add/codesnippet/visualbasic/p-system.net.sockets.net_3_1.vb)]\"\n  syntax:\n    content: protected System.Net.Sockets.Socket Socket { get; }\n    return:\n      type: System.Net.Sockets.Socket\n      description: A <xref:System.Net.Sockets.Socket> that represents the underlying network connection.\n  overload: System.Net.Sockets.NetworkStream.Socket*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Write(Byte[],Int32,Int32)\n  nameWithType: NetworkStream.Write(Byte[],Int32,Int32)\n  fullName: System.Net.Sockets.NetworkStream.Write(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Writes data to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  remarks: \"The Write method starts at the specified `offset` and sends `size` bytes from the contents of `buffer` to the network. The Write method blocks until the requested number of bytes is sent or a <xref:System.Net.Sockets.SocketException> is thrown. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  Check to see if the <xref:System.Net.Sockets.NetworkStream> is writable by accessing the <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> property. If you attempt to write to a <xref:System.Net.Sockets.NetworkStream> that is not writable, you will get an <xref:System.IO.IOException>. If you receive an <xref:System.IO.IOException>, check the <xref:System.Exception.InnerException%2A> property to determine if it was caused by a <xref:System.Net.Sockets.SocketException>.\"\n  example:\n  - \"The following code example checks to see whether the <xref:System.Net.Sockets.NetworkStream> is writable. If it is, then Write is used to write a small message.  \\n  \\n [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/add/codesnippet/visualbasic/87c395a5-03ea-4324-8b05-_1.vb)]\\n [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/add/codesnippet/cpp/87c395a5-03ea-4324-8b05-_1.cpp)]\\n [!code-cs[NetworkStream_Synch_SendAndReceive#3](~/add/codesnippet/csharp/87c395a5-03ea-4324-8b05-_1.cs)]\"\n  syntax:\n    content: public override void Write (byte[] buffer, int offset, int size);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that contains the data to write to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n    - id: offset\n      type: System.Int32\n      description: The location in `buffer` from which to start writing data.\n    - id: size\n      type: System.Int32\n      description: The number of bytes to write to the <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  overload: System.Net.Sockets.NetworkStream.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>buffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>offset</code> parameter is less than 0.  \\n  \\n -or-  \\n  \\n The <code>offset</code> parameter is greater than the length of <code>buffer</code>.  \\n  \\n -or-  \\n  \\n The <code>size</code> parameter is less than 0.  \\n  \\n -or-  \\n  \\n The <code>size</code> parameter is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"There was a failure while writing to the network.  \\n  \\n -or-  \\n  \\n An error occurred when accessing the socket. See the Remarks section for more information.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"The <xref href=\\\"System.Net.Sockets.NetworkStream\\\"></xref> is closed.  \\n  \\n -or-  \\n  \\n There was a failure reading from the network.\"\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.Writeable\n  id: Writeable\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: Writeable\n  nameWithType: NetworkStream.Writeable\n  fullName: System.Net.Sockets.NetworkStream.Writeable\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets a value that indicates whether the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> is writable.\n  remarks: \"You must derive from the <xref:System.Net.Sockets.NetworkStream> class to use the Writeable property. If Writeable is `true`, <xref:System.Net.Sockets.NetworkStream> allows calls to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. You can also determine whether a <xref:System.Net.Sockets.NetworkStream> is writable by checking the publicly accessible <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> property.  \\n  \\n The Writeable property is set when the <xref:System.Net.Sockets.NetworkStream> is initialized.\"\n  example:\n  - \"In the following code example, the `CanCommunicate` property checks the Writeable property to determine if the <xref:System.Net.Sockets.NetworkStream> is writable.  \\n  \\n [!code-cpp[NetworkStream_Protected_Members#1](~/add/codesnippet/cpp/p-system.net.sockets.net_5_1.cpp)]\\n [!code-cs[NetworkStream_Protected_Members#1](~/add/codesnippet/csharp/p-system.net.sockets.net_5_1.cs)]\\n [!code-vb[NetworkStream_Protected_Members#1](~/add/codesnippet/visualbasic/p-system.net.sockets.net_5_1.vb)]\"\n  syntax:\n    content: protected bool Writeable { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data can be written to the stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Net.Sockets.NetworkStream.Writeable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.NetworkStream.WriteTimeout\n  id: WriteTimeout\n  parent: System.Net.Sockets.NetworkStream\n  langs:\n  - csharp\n  name: WriteTimeout\n  nameWithType: NetworkStream.WriteTimeout\n  fullName: System.Net.Sockets.NetworkStream.WriteTimeout\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets the amount of time that a write operation blocks waiting for data.\n  remarks: \"If the write operation does not complete within the time specified by this property, the write operation throws a <xref:System.IO.IOException>.  \\n  \\n> [!NOTE]\\n>  This property affects only synchronous write operations performed by calling the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. This property does not affect asynchronous writes performed by calling the <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> method.\"\n  example:\n  - \"The following code example sets the write time-out for a network stream to 10 milliseconds.  \\n  \\n [!code-cpp[NCLTcpServerSync#0](~/add/codesnippet/cpp/p-system.net.sockets.net_1_1.cpp)]\\n [!code-cs[NCLTcpServerSync#0](~/add/codesnippet/csharp/p-system.net.sockets.net_1_1.cs)]\"\n  syntax:\n    content: public override int WriteTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A <xref:System.Int32> that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, <xref:System.Threading.Timeout.Infinite>, specifies that the write operation does not time out.\n  overload: System.Net.Sockets.NetworkStream.WriteTimeout*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value specified is less than or equal to zero and is not <xref:System.Threading.Timeout.Infinite>.\n  platform:\n  - net462\nreferences:\n- uid: System.IO.Stream\n  isExternal: false\n  name: System.IO.Stream\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.Net.Sockets.SocketException\n  isExternal: true\n  name: System.Net.Sockets.SocketException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: NetworkStream(Socket)\n  nameWithType: NetworkStream.NetworkStream(Socket)\n  fullName: System.Net.Sockets.NetworkStream.NetworkStream(Socket)\n- uid: System.Net.Sockets.Socket\n  parent: System.Net.Sockets\n  isExternal: true\n  name: Socket\n  nameWithType: Socket\n  fullName: System.Net.Sockets.Socket\n- uid: System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: NetworkStream(Socket,Boolean)\n  nameWithType: NetworkStream.NetworkStream(Socket,Boolean)\n  fullName: System.Net.Sockets.NetworkStream.NetworkStream(Socket,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: NetworkStream(Socket,FileAccess)\n  nameWithType: NetworkStream.NetworkStream(Socket,FileAccess)\n  fullName: System.Net.Sockets.NetworkStream.NetworkStream(Socket,FileAccess)\n- uid: System.IO.FileAccess\n  parent: System.IO\n  isExternal: false\n  name: FileAccess\n  nameWithType: FileAccess\n  fullName: System.IO.FileAccess\n- uid: System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: NetworkStream(Socket,FileAccess,Boolean)\n  nameWithType: NetworkStream.NetworkStream(Socket,FileAccess,Boolean)\n  fullName: System.Net.Sockets.NetworkStream.NetworkStream(Socket,FileAccess,Boolean)\n- uid: System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: NetworkStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Sockets.NetworkStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: NetworkStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Sockets.NetworkStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n- uid: System.Net.Sockets.NetworkStream.CanRead\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: CanRead\n  nameWithType: NetworkStream.CanRead\n  fullName: System.Net.Sockets.NetworkStream.CanRead\n- uid: System.Net.Sockets.NetworkStream.CanSeek\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: NetworkStream.CanSeek\n  fullName: System.Net.Sockets.NetworkStream.CanSeek\n- uid: System.Net.Sockets.NetworkStream.CanTimeout\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: NetworkStream.CanTimeout\n  fullName: System.Net.Sockets.NetworkStream.CanTimeout\n- uid: System.Net.Sockets.NetworkStream.CanWrite\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: NetworkStream.CanWrite\n  fullName: System.Net.Sockets.NetworkStream.CanWrite\n- uid: System.Net.Sockets.NetworkStream.Close(System.Int32)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Close(Int32)\n  nameWithType: NetworkStream.Close(Int32)\n  fullName: System.Net.Sockets.NetworkStream.Close(Int32)\n- uid: System.Net.Sockets.NetworkStream.DataAvailable\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: DataAvailable\n  nameWithType: NetworkStream.DataAvailable\n  fullName: System.Net.Sockets.NetworkStream.DataAvailable\n- uid: System.Net.Sockets.NetworkStream.Dispose(System.Boolean)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: NetworkStream.Dispose(Boolean)\n  fullName: System.Net.Sockets.NetworkStream.Dispose(Boolean)\n- uid: System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: NetworkStream.EndRead(IAsyncResult)\n  fullName: System.Net.Sockets.NetworkStream.EndRead(IAsyncResult)\n- uid: System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: NetworkStream.EndWrite(IAsyncResult)\n  fullName: System.Net.Sockets.NetworkStream.EndWrite(IAsyncResult)\n- uid: System.Net.Sockets.NetworkStream.Finalize\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Finalize()\n  nameWithType: NetworkStream.Finalize()\n  fullName: System.Net.Sockets.NetworkStream.Finalize()\n- uid: System.Net.Sockets.NetworkStream.Flush\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Flush()\n  nameWithType: NetworkStream.Flush()\n  fullName: System.Net.Sockets.NetworkStream.Flush()\n- uid: System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: FlushAsync(CancellationToken)\n  nameWithType: NetworkStream.FlushAsync(CancellationToken)\n  fullName: System.Net.Sockets.NetworkStream.FlushAsync(CancellationToken)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: true\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Net.Sockets.NetworkStream.Length\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Length\n  nameWithType: NetworkStream.Length\n  fullName: System.Net.Sockets.NetworkStream.Length\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Net.Sockets.NetworkStream.Position\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Position\n  nameWithType: NetworkStream.Position\n  fullName: System.Net.Sockets.NetworkStream.Position\n- uid: System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Read(Byte[],Int32,Int32)\n  nameWithType: NetworkStream.Read(Byte[],Int32,Int32)\n  fullName: System.Net.Sockets.NetworkStream.Read(Byte[],Int32,Int32)\n- uid: System.Net.Sockets.NetworkStream.Readable\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Readable\n  nameWithType: NetworkStream.Readable\n  fullName: System.Net.Sockets.NetworkStream.Readable\n- uid: System.Net.Sockets.NetworkStream.ReadTimeout\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: NetworkStream.ReadTimeout\n  fullName: System.Net.Sockets.NetworkStream.ReadTimeout\n- uid: System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Seek(Int64,SeekOrigin)\n  nameWithType: NetworkStream.Seek(Int64,SeekOrigin)\n  fullName: System.Net.Sockets.NetworkStream.Seek(Int64,SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: true\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.Net.Sockets.NetworkStream.SetLength(System.Int64)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: NetworkStream.SetLength(Int64)\n  fullName: System.Net.Sockets.NetworkStream.SetLength(Int64)\n- uid: System.Net.Sockets.NetworkStream.Socket\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Socket\n  nameWithType: NetworkStream.Socket\n  fullName: System.Net.Sockets.NetworkStream.Socket\n- uid: System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Write(Byte[],Int32,Int32)\n  nameWithType: NetworkStream.Write(Byte[],Int32,Int32)\n  fullName: System.Net.Sockets.NetworkStream.Write(Byte[],Int32,Int32)\n- uid: System.Net.Sockets.NetworkStream.Writeable\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Writeable\n  nameWithType: NetworkStream.Writeable\n  fullName: System.Net.Sockets.NetworkStream.Writeable\n- uid: System.Net.Sockets.NetworkStream.WriteTimeout\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: NetworkStream.WriteTimeout\n  fullName: System.Net.Sockets.NetworkStream.WriteTimeout\n- uid: System.Net.Sockets.NetworkStream.#ctor*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: NetworkStream\n  nameWithType: NetworkStream.NetworkStream\n- uid: System.Net.Sockets.NetworkStream.BeginRead*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: BeginRead\n  nameWithType: NetworkStream.BeginRead\n- uid: System.Net.Sockets.NetworkStream.BeginWrite*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: BeginWrite\n  nameWithType: NetworkStream.BeginWrite\n- uid: System.Net.Sockets.NetworkStream.CanRead*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: CanRead\n  nameWithType: NetworkStream.CanRead\n- uid: System.Net.Sockets.NetworkStream.CanSeek*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: NetworkStream.CanSeek\n- uid: System.Net.Sockets.NetworkStream.CanTimeout*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: NetworkStream.CanTimeout\n- uid: System.Net.Sockets.NetworkStream.CanWrite*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: NetworkStream.CanWrite\n- uid: System.Net.Sockets.NetworkStream.Close*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Close\n  nameWithType: NetworkStream.Close\n- uid: System.Net.Sockets.NetworkStream.DataAvailable*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: DataAvailable\n  nameWithType: NetworkStream.DataAvailable\n- uid: System.Net.Sockets.NetworkStream.Dispose*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Dispose\n  nameWithType: NetworkStream.Dispose\n- uid: System.Net.Sockets.NetworkStream.EndRead*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: EndRead\n  nameWithType: NetworkStream.EndRead\n- uid: System.Net.Sockets.NetworkStream.EndWrite*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: EndWrite\n  nameWithType: NetworkStream.EndWrite\n- uid: System.Net.Sockets.NetworkStream.Finalize*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Finalize\n  nameWithType: NetworkStream.Finalize\n- uid: System.Net.Sockets.NetworkStream.Flush*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Flush\n  nameWithType: NetworkStream.Flush\n- uid: System.Net.Sockets.NetworkStream.FlushAsync*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: FlushAsync\n  nameWithType: NetworkStream.FlushAsync\n- uid: System.Net.Sockets.NetworkStream.Length*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Length\n  nameWithType: NetworkStream.Length\n- uid: System.Net.Sockets.NetworkStream.Position*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Position\n  nameWithType: NetworkStream.Position\n- uid: System.Net.Sockets.NetworkStream.Read*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Read\n  nameWithType: NetworkStream.Read\n- uid: System.Net.Sockets.NetworkStream.Readable*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Readable\n  nameWithType: NetworkStream.Readable\n- uid: System.Net.Sockets.NetworkStream.ReadTimeout*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: NetworkStream.ReadTimeout\n- uid: System.Net.Sockets.NetworkStream.Seek*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Seek\n  nameWithType: NetworkStream.Seek\n- uid: System.Net.Sockets.NetworkStream.SetLength*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: SetLength\n  nameWithType: NetworkStream.SetLength\n- uid: System.Net.Sockets.NetworkStream.Socket*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Socket\n  nameWithType: NetworkStream.Socket\n- uid: System.Net.Sockets.NetworkStream.Write*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Write\n  nameWithType: NetworkStream.Write\n- uid: System.Net.Sockets.NetworkStream.Writeable*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: Writeable\n  nameWithType: NetworkStream.Writeable\n- uid: System.Net.Sockets.NetworkStream.WriteTimeout*\n  parent: System.Net.Sockets.NetworkStream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: NetworkStream.WriteTimeout\n"}