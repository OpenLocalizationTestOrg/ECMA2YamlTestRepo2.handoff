{"nodes":[{"pos":[2463,2518],"content":"Represents the type that implements an in-memory cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the type that implements an in-memory cache.","pos":[0,55]}]},{"pos":[2531,4072],"content":"The MemoryCache class is a concrete implementation of the abstract <xref:System.Runtime.Caching.ObjectCache> class.      > [!NOTE] >  The MemoryCache class is similar to the ASP.NET <xref:System.Web.Caching.Cache> class. The MemoryCache class has many properties and methods for accessing the cache that will be familiar to you if you have used the ASP.NET <xref:System.Web.Caching.Cache> class. The main differences between the <xref:System.Web.Caching.Cache> and MemoryCache classes are that the MemoryCache class has been changed to make it usable by [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] applications that are not ASP.NET applications. For example, the MemoryCache class has no dependencies on the `System.Web` assembly. Another difference is that you can create multiple instances of the MemoryCache class for use in the same application and in the same <xref:System.AppDomain> instance.       The MemoryCache class does not allow `null` as a value in the cache. Any attempt to add or change a cache entry with a value of `null` will fail.       The MemoryCache type does not implement *cache regions*. Therefore, when you call MemoryCache methods that implement base methods that contain a parameter for regions, do not pass a value for the parameter. The methods that use the region parameter all supply a default `null` value. For example, the <xref:System.Runtime.Caching.MemoryCache.AddOrGetExisting%2A?displayProperty=fullName> method overload has a `regionName` parameter whose default value is `null`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The MemoryCache class is a concrete implementation of the abstract &lt;xref:System.Runtime.Caching.ObjectCache&gt; class.","pos":[0,115],"source":"The MemoryCache class is a concrete implementation of the abstract <xref:System.Runtime.Caching.ObjectCache> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The MemoryCache class is similar to the ASP.NET &lt;xref:System.Web.Caching.Cache&gt; class.","pos":[121,220],"source":"      > [!NOTE] >  The MemoryCache class is similar to the ASP.NET <xref:System.Web.Caching.Cache> class."},{"content":"The MemoryCache class has many properties and methods for accessing the cache that will be familiar to you if you have used the ASP.NET &lt;xref:System.Web.Caching.Cache&gt; class.","pos":[221,395],"source":" The MemoryCache class has many properties and methods for accessing the cache that will be familiar to you if you have used the ASP.NET <xref:System.Web.Caching.Cache> class."},{"content":"The main differences between the &lt;xref:System.Web.Caching.Cache&gt; and MemoryCache classes are that the MemoryCache class has been changed to make it usable by <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> applications that are not ASP.NET applications.","pos":[396,659],"source":" The main differences between the <xref:System.Web.Caching.Cache> and MemoryCache classes are that the MemoryCache class has been changed to make it usable by [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] applications that are not ASP.NET applications."},{"content":"For example, the MemoryCache class has no dependencies on the <ph id=\"ph1\">`System.Web`</ph> assembly.","pos":[660,744],"source":" For example, the MemoryCache class has no dependencies on the `System.Web` assembly."},{"content":"Another difference is that you can create multiple instances of the MemoryCache class for use in the same application and in the same &lt;xref:System.AppDomain&gt; instance.","pos":[745,912],"source":" Another difference is that you can create multiple instances of the MemoryCache class for use in the same application and in the same <xref:System.AppDomain> instance."},{"content":"The MemoryCache class does not allow <ph id=\"ph1\">`null`</ph> as a value in the cache.","pos":[919,987],"source":"       The MemoryCache class does not allow `null` as a value in the cache."},{"content":"Any attempt to add or change a cache entry with a value of <ph id=\"ph1\">`null`</ph> will fail.","pos":[988,1064],"source":" Any attempt to add or change a cache entry with a value of `null` will fail."},{"content":"The MemoryCache type does not implement <bpt id=\"p1\">*</bpt>cache regions<ept id=\"p1\">*</ept>.","pos":[1071,1127],"source":"       The MemoryCache type does not implement *cache regions*."},{"content":"Therefore, when you call MemoryCache methods that implement base methods that contain a parameter for regions, do not pass a value for the parameter.","pos":[1128,1277]},{"content":"The methods that use the region parameter all supply a default <ph id=\"ph1\">`null`</ph> value.","pos":[1278,1354],"source":" The methods that use the region parameter all supply a default `null` value."},{"content":"For example, the &lt;xref:System.Runtime.Caching.MemoryCache.AddOrGetExisting%2A?displayProperty=fullName&gt; method overload has a <ph id=\"ph1\">`regionName`</ph> parameter whose default value is <ph id=\"ph2\">`null`</ph>.","pos":[1355,1534],"source":" For example, the <xref:System.Runtime.Caching.MemoryCache.AddOrGetExisting%2A?displayProperty=fullName> method overload has a `regionName` parameter whose default value is `null`."}]},{"pos":[7439,7535],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.MemoryCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class."},{"pos":[7548,9887],"content":"When the <xref:System.Runtime.Caching.MemoryCache> class is initialized, it checks for configuration entries that might have been overridden by using the optional `config` parameter in the constructor. You can pass the following parameters in the `config` parameter. All values can be passed as integers.      -   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.CacheMemoryLimitMegabytes%2A>      -   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PhysicalMemoryLimitPercentage%2A>      -   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PollingInterval%2A>       When this constructor is invoked, configuration settings are first retrieved from application configuration files. If no configuration entries exist in the application configuration file, only the settings provided in `config` are applied. If the configuration entries in the application configuration exist, and if information is also passed in `config`, the information in the `config` overrides the information that is read from the configuration file.       The name value that is assigned to a cache instance is used in two ways:      -   To help you keep track of multiple cache instances when more than one instance exists.      -   To reference settings in the configuration file when the <xref:System.Runtime.Caching.MemoryCache> instance is initialized.          > [!NOTE]     >  There is no mechanism to enforce unique names for cache instances. Therefore, it is possible to have multiple cache instances with the same name.          > [!CAUTION]     >  Do not create <xref:System.Runtime.Caching.MemoryCache> instances unless it is required. If you create cache instances in client and Web applications, the <xref:System.Runtime.Caching.MemoryCache> instances should be created early in the application life cycle. You must create only the number of cache instances that will be used in your application, and store references to the cache instances in variables that can be accessed globally. For example, in ASP.NET applications, you can store the references in application state. If you create only a single cache instance in your application, use the default cache and get a reference to it from the <xref:System.Runtime.Caching.MemoryCache.Default%2A> property when you need to access the cache.","needQuote":false,"needEscape":true,"nodes":[{"content":"When the &lt;xref:System.Runtime.Caching.MemoryCache&gt; class is initialized, it checks for configuration entries that might have been overridden by using the optional <ph id=\"ph1\">`config`</ph> parameter in the constructor.","pos":[0,201],"source":"When the <xref:System.Runtime.Caching.MemoryCache> class is initialized, it checks for configuration entries that might have been overridden by using the optional `config` parameter in the constructor."},{"content":"You can pass the following parameters in the <ph id=\"ph1\">`config`</ph> parameter.","pos":[202,266],"source":" You can pass the following parameters in the `config` parameter."},{"content":"All values can be passed as integers.","pos":[267,304]},{"content":"-   &lt;xref:System.Runtime.Caching.Configuration.MemoryCacheElement.CacheMemoryLimitMegabytes%2A&gt;      -   &lt;xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PhysicalMemoryLimitPercentage%2A&gt;      -   &lt;xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PollingInterval%2A&gt;       When this constructor is invoked, configuration settings are first retrieved from application configuration files.","pos":[310,722],"source":"      -   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.CacheMemoryLimitMegabytes%2A>      -   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PhysicalMemoryLimitPercentage%2A>      -   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PollingInterval%2A>       When this constructor is invoked, configuration settings are first retrieved from application configuration files."},{"content":"If no configuration entries exist in the application configuration file, only the settings provided in <ph id=\"ph1\">`config`</ph> are applied.","pos":[723,847],"source":" If no configuration entries exist in the application configuration file, only the settings provided in `config` are applied."},{"content":"If the configuration entries in the application configuration exist, and if information is also passed in <ph id=\"ph1\">`config`</ph>, the information in the <ph id=\"ph2\">`config`</ph> overrides the information that is read from the configuration file.","pos":[848,1063],"source":" If the configuration entries in the application configuration exist, and if information is also passed in `config`, the information in the `config` overrides the information that is read from the configuration file."},{"content":"The name value that is assigned to a cache instance is used in two ways:      -   To help you keep track of multiple cache instances when more than one instance exists.","pos":[1070,1238]},{"content":"-   To reference settings in the configuration file when the &lt;xref:System.Runtime.Caching.MemoryCache&gt; instance is initialized.","pos":[1244,1371],"source":"      -   To reference settings in the configuration file when the <xref:System.Runtime.Caching.MemoryCache> instance is initialized."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  There is no mechanism to enforce unique names for cache instances.","pos":[1381,1464],"source":"          > [!NOTE]     >  There is no mechanism to enforce unique names for cache instances."},{"content":"Therefore, it is possible to have multiple cache instances with the same name.","pos":[1465,1543]},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph>     &gt;  Do not create &lt;xref:System.Runtime.Caching.MemoryCache&gt; instances unless it is required.","pos":[1553,1661],"source":"          > [!CAUTION]     >  Do not create <xref:System.Runtime.Caching.MemoryCache> instances unless it is required."},{"content":"If you create cache instances in client and Web applications, the &lt;xref:System.Runtime.Caching.MemoryCache&gt; instances should be created early in the application life cycle.","pos":[1662,1834],"source":" If you create cache instances in client and Web applications, the <xref:System.Runtime.Caching.MemoryCache> instances should be created early in the application life cycle."},{"content":"You must create only the number of cache instances that will be used in your application, and store references to the cache instances in variables that can be accessed globally.","pos":[1835,2012]},{"content":"For example, in ASP.NET applications, you can store the references in application state.","pos":[2013,2101]},{"content":"If you create only a single cache instance in your application, use the default cache and get a reference to it from the &lt;xref:System.Runtime.Caching.MemoryCache.Default%2A&gt; property when you need to access the cache.","pos":[2102,2319],"source":" If you create only a single cache instance in your application, use the default cache and get a reference to it from the <xref:System.Runtime.Caching.MemoryCache.Default%2A> property when you need to access the cache."}]},{"pos":[10089,10801],"content":"The name to use to look up configuration information.       `Note` It is not required for configuration information to exist for every name.       If a matching configuration entry exists, the configuration information is used to configure the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> instance. If a matching configuration entry does not exist, the name can be accessed through the <xref:System.Runtime.Caching.MemoryCache.Name*> property, because the specified name is associated with the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> instance. For information about memory cache configuration, see <xref href=\"System.Runtime.Caching.Configuration.MemoryCacheElement\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The name to use to look up configuration information.","pos":[0,53]},{"content":"<ph id=\"ph1\">`Note`</ph> It is not required for configuration information to exist for every name.","pos":[60,140],"source":"`Note` It is not required for configuration information to exist for every name."},{"content":"If a matching configuration entry exists, the configuration information is used to configure the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.MemoryCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","pos":[147,309],"source":"       If a matching configuration entry exists, the configuration information is used to configure the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> instance."},{"content":"If a matching configuration entry does not exist, the name can be accessed through the &lt;xref:System.Runtime.Caching.MemoryCache.Name*&gt; property, because the specified name is associated with the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.MemoryCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","pos":[310,570],"source":" If a matching configuration entry does not exist, the name can be accessed through the <xref:System.Runtime.Caching.MemoryCache.Name*> property, because the specified name is associated with the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> instance."},{"content":"For information about memory cache configuration, see <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.Configuration.MemoryCacheElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[571,702],"source":" For information about memory cache configuration, see <xref href=\"System.Runtime.Caching.Configuration.MemoryCacheElement\"></xref>."}]},{"pos":[10902,10997],"content":"A collection of name/value pairs of configuration information to use for configuring the cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of name/value pairs of configuration information to use for configuring the cache.","pos":[0,95]}]},{"pos":[11168,11250],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11345,11418],"content":"A name or value in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">config</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter could not be parsed.","needQuote":true,"needEscape":true,"source":"A name or value in the <code>config</code> parameter could not be parsed."},{"pos":[11551,11608],"content":"A value in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">config</ph><ept id=\"p1\">&lt;/code&gt;</ept> collection is invalid.","needQuote":true,"needEscape":true,"source":"A value in the <code>config</code> collection is invalid."},{"pos":[12178,12339],"content":"Inserts a cache entry into the cache as a <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.CacheItem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance, and adds details about how the entry should be evicted.","needQuote":true,"needEscape":true,"source":"Inserts a cache entry into the cache as a <xref href=\"System.Runtime.Caching.CacheItem\"></xref> instance, and adds details about how the entry should be evicted."},{"pos":[14777,15219],"content":"> [!WARNING] >  The <xref:System.Runtime.Caching.ObjectCache.Add%2A> and <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads do not support the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property. Therefore, to set the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property for a cache entry, use the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads instead.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!WARNING]</ph> &gt;  The &lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt; and &lt;xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A&gt; method overloads do not support the &lt;xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A&gt; property.","pos":[0,244],"source":"> [!WARNING] >  The <xref:System.Runtime.Caching.ObjectCache.Add%2A> and <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads do not support the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property."},{"content":"Therefore, to set the &lt;xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A&gt; property for a cache entry, use the &lt;xref:System.Runtime.Caching.MemoryCache.Set%2A&gt; method overloads instead.","pos":[245,441],"source":" Therefore, to set the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property for a cache entry, use the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads instead."}]},{"pos":[15493,15511],"content":"The object to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to add.","pos":[0,18]}]},{"pos":[15599,15742],"content":"An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.","pos":[0,143],"nodes":[{"content":"An object that contains eviction details for the cache entry.","pos":[0,61]},{"content":"This object provides more options for eviction than a simple absolute expiration.","pos":[62,143]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Caching.MemoryCache\n  id: MemoryCache\n  children:\n  - System.Runtime.Caching.MemoryCache.#ctor(System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Runtime.Caching.MemoryCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  - System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  - System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)\n  - System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)\n  - System.Runtime.Caching.MemoryCache.CacheMemoryLimit\n  - System.Runtime.Caching.MemoryCache.Contains(System.String,System.String)\n  - System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)\n  - System.Runtime.Caching.MemoryCache.Default\n  - System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities\n  - System.Runtime.Caching.MemoryCache.Dispose\n  - System.Runtime.Caching.MemoryCache.Get(System.String,System.String)\n  - System.Runtime.Caching.MemoryCache.GetCacheItem(System.String,System.String)\n  - System.Runtime.Caching.MemoryCache.GetCount(System.String)\n  - System.Runtime.Caching.MemoryCache.GetEnumerator\n  - System.Runtime.Caching.MemoryCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)\n  - System.Runtime.Caching.MemoryCache.Item(System.String)\n  - System.Runtime.Caching.MemoryCache.Name\n  - System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit\n  - System.Runtime.Caching.MemoryCache.PollingInterval\n  - System.Runtime.Caching.MemoryCache.Remove(System.String,System.String)\n  - System.Runtime.Caching.MemoryCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  - System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)\n  - System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)\n  - System.Runtime.Caching.MemoryCache.System#Collections#IEnumerable#GetEnumerator\n  - System.Runtime.Caching.MemoryCache.Trim(System.Int32)\n  langs:\n  - csharp\n  name: MemoryCache\n  nameWithType: MemoryCache\n  fullName: System.Runtime.Caching.MemoryCache\n  type: Class\n  summary: Represents the type that implements an in-memory cache.\n  remarks: \"The MemoryCache class is a concrete implementation of the abstract <xref:System.Runtime.Caching.ObjectCache> class.  \\n  \\n> [!NOTE]\\n>  The MemoryCache class is similar to the ASP.NET <xref:System.Web.Caching.Cache> class. The MemoryCache class has many properties and methods for accessing the cache that will be familiar to you if you have used the ASP.NET <xref:System.Web.Caching.Cache> class. The main differences between the <xref:System.Web.Caching.Cache> and MemoryCache classes are that the MemoryCache class has been changed to make it usable by [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] applications that are not ASP.NET applications. For example, the MemoryCache class has no dependencies on the `System.Web` assembly. Another difference is that you can create multiple instances of the MemoryCache class for use in the same application and in the same <xref:System.AppDomain> instance.  \\n  \\n The MemoryCache class does not allow `null` as a value in the cache. Any attempt to add or change a cache entry with a value of `null` will fail.  \\n  \\n The MemoryCache type does not implement *cache regions*. Therefore, when you call MemoryCache methods that implement base methods that contain a parameter for regions, do not pass a value for the parameter. The methods that use the region parameter all supply a default `null` value. For example, the <xref:System.Runtime.Caching.MemoryCache.AddOrGetExisting%2A?displayProperty=fullName> method overload has a `regionName` parameter whose default value is `null`.\"\n  example:\n  - \"The following example declares a reference to the default memory cache instance. The cache entry uses a <xref:System.Runtime.Caching.CacheItemPolicy> object to provide eviction and expiration details for the cache entry. It also uses a <xref:System.Runtime.Caching.ChangeMonitor> object to monitor the state of the source data (which is a file) on the file system.  \\n  \\n```vb#  \\nPrivate Sub btnGet_Click(ByVal sender As Object, ByVal e As EventArgs)   \\n    Dim cache As ObjectCache = MemoryCache.[Default]   \\n    Dim fileContents As String = TryCast(cache(\\\"filecontents\\\"), String)   \\n  \\n    If fileContents Is Nothing Then   \\n        Dim policy As New CacheItemPolicy()   \\n        Dim filePaths As New List(Of String)()   \\n        filePaths.Add(\\\"c:\\\\cache\\\\example.txt\\\")   \\n  \\n        policy.ChangeMonitors.Add(New HostFileChangeMonitor(filePaths))   \\n  \\n        ' Fetch the file contents.  \\n        fileContents = File.ReadAllText(\\\"c:\\\\cache\\\\example.txt\\\")   \\n  \\n        cache.[Set](\\\"filecontents\\\", fileContents, policy)   \\n    End If   \\n  \\n    Label1.Text = fileContents  \\nEnd Sub  \\n```  \\n  \\n```c#  \\nprivate void btnGet_Click(object sender, EventArgs e)  \\n{  \\n    ObjectCache cache = MemoryCache.Default;  \\n    string fileContents = cache[\\\"filecontents\\\"] as string;  \\n  \\n    if (fileContents == null)  \\n    {  \\n        CacheItemPolicy policy = new CacheItemPolicy();  \\n  \\n        List<string> filePaths = new List<string>();  \\n        filePaths.Add(\\\"c:\\\\\\\\cache\\\\\\\\example.txt\\\");  \\n  \\n        policy.ChangeMonitors.Add(new   \\n        HostFileChangeMonitor(filePaths));  \\n  \\n        // Fetch the file contents.  \\n        fileContents =   \\n            File.ReadAllText(\\\"c:\\\\\\\\cache\\\\\\\\example.txt\\\");  \\n  \\n        cache.Set(\\\"filecontents\\\", fileContents, policy);  \\n    }  \\n  \\n    Label1.Text = fileContents;  \\n}  \\n```\"\n  syntax:\n    content: 'public class MemoryCache : System.Runtime.Caching.ObjectCache, IDisposable'\n  inheritance:\n  - System.Object\n  - System.Runtime.Caching.ObjectCache\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.DateTimeOffset,System.String)\n  - System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)\n  - System.Runtime.Caching.ObjectCache.GetValues(System.String,System.String[])\n  - System.Runtime.Caching.ObjectCache.Host\n  - System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\n  - System.Runtime.Caching.ObjectCache.NoSlidingExpiration\n  - System.Runtime.Caching.ObjectCache.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.#ctor(System.String,System.Collections.Specialized.NameValueCollection)\n  id: '#ctor(System.String,System.Collections.Specialized.NameValueCollection)'\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: MemoryCache(String,NameValueCollection)\n  nameWithType: MemoryCache.MemoryCache(String,NameValueCollection)\n  fullName: System.Runtime.Caching.MemoryCache.MemoryCache(String,NameValueCollection)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class.\n  remarks: \"When the <xref:System.Runtime.Caching.MemoryCache> class is initialized, it checks for configuration entries that might have been overridden by using the optional `config` parameter in the constructor. You can pass the following parameters in the `config` parameter. All values can be passed as integers.  \\n  \\n-   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.CacheMemoryLimitMegabytes%2A>  \\n  \\n-   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PhysicalMemoryLimitPercentage%2A>  \\n  \\n-   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PollingInterval%2A>  \\n  \\n When this constructor is invoked, configuration settings are first retrieved from application configuration files. If no configuration entries exist in the application configuration file, only the settings provided in `config` are applied. If the configuration entries in the application configuration exist, and if information is also passed in `config`, the information in the `config` overrides the information that is read from the configuration file.  \\n  \\n The name value that is assigned to a cache instance is used in two ways:  \\n  \\n-   To help you keep track of multiple cache instances when more than one instance exists.  \\n  \\n-   To reference settings in the configuration file when the <xref:System.Runtime.Caching.MemoryCache> instance is initialized.  \\n  \\n    > [!NOTE]\\n    >  There is no mechanism to enforce unique names for cache instances. Therefore, it is possible to have multiple cache instances with the same name.  \\n  \\n    > [!CAUTION]\\n    >  Do not create <xref:System.Runtime.Caching.MemoryCache> instances unless it is required. If you create cache instances in client and Web applications, the <xref:System.Runtime.Caching.MemoryCache> instances should be created early in the application life cycle. You must create only the number of cache instances that will be used in your application, and store references to the cache instances in variables that can be accessed globally. For example, in ASP.NET applications, you can store the references in application state. If you create only a single cache instance in your application, use the default cache and get a reference to it from the <xref:System.Runtime.Caching.MemoryCache.Default%2A> property when you need to access the cache.\"\n  syntax:\n    content: public MemoryCache (string name, System.Collections.Specialized.NameValueCollection config = null);\n    parameters:\n    - id: name\n      type: System.String\n      description: \"The name to use to look up configuration information.  \\n  \\n `Note` It is not required for configuration information to exist for every name.  \\n  \\n If a matching configuration entry exists, the configuration information is used to configure the <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> instance. If a matching configuration entry does not exist, the name can be accessed through the <xref:System.Runtime.Caching.MemoryCache.Name*> property, because the specified name is associated with the <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> instance. For information about memory cache configuration, see <xref href=\\\"System.Runtime.Caching.Configuration.MemoryCacheElement\\\"></xref>.\"\n    - id: config\n      type: System.Collections.Specialized.NameValueCollection\n      description: A collection of name/value pairs of configuration information to use for configuring the cache.\n  overload: System.Runtime.Caching.MemoryCache.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A name or value in the <code>config</code> parameter could not be parsed.\n  - type: System.Configuration.ConfigurationException\n    commentId: T:System.Configuration.ConfigurationException\n    description: A value in the <code>config</code> collection is invalid.\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  id: Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Add(CacheItem,CacheItemPolicy)\n  nameWithType: MemoryCache.Add(CacheItem,CacheItemPolicy)\n  fullName: System.Runtime.Caching.MemoryCache.Add(CacheItem,CacheItemPolicy)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Inserts a cache entry into the cache as a <xref href=\"System.Runtime.Caching.CacheItem\"></xref> instance, and adds details about how the entry should be evicted.\n  remarks: >-\n    > [!WARNING]\n\n    >  The <xref:System.Runtime.Caching.ObjectCache.Add%2A> and <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads do not support the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property. Therefore, to set the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property for a cache entry, use the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads instead.\n  syntax:\n    content: public override bool Add (System.Runtime.Caching.CacheItem item, System.Runtime.Caching.CacheItemPolicy policy);\n    parameters:\n    - id: item\n      type: System.Runtime.Caching.CacheItem\n      description: The object to add.\n    - id: policy\n      type: System.Runtime.Caching.CacheItemPolicy\n      description: An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.\n    return:\n      type: System.Boolean\n      description: true if insertion succeeded, or false if there is an already an entry in the cache that has the same key as item.\n  overload: System.Runtime.Caching.MemoryCache.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  id: AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: AddOrGetExisting(CacheItem,CacheItemPolicy)\n  nameWithType: MemoryCache.AddOrGetExisting(CacheItem,CacheItemPolicy)\n  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(CacheItem,CacheItemPolicy)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Adds a cache entry into the cache using the specified <xref href=\"System.Runtime.Caching.CacheItem\"></xref> instance and details about how to evict the entry.\n  remarks: \"The `item` parameter supplies the key and the value that is used by the method. If the cache has a cache entry with the same key as the key of the `item` parameter, the method returns the existing entry as a <xref:System.Runtime.Caching.CacheItem> instance. If there is no existing cache entry, the method creates a new one by using the key and value supplied by the `item` parameter, and with the eviction details specified by `policy`.  \\n  \\n> [!WARNING]\\n>  The <xref:System.Runtime.Caching.ObjectCache.Add%2A> and <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads do not support the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property. Therefore, to set the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property for a cache entry, use the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads instead.\"\n  syntax:\n    content: public override System.Runtime.Caching.CacheItem AddOrGetExisting (System.Runtime.Caching.CacheItem item, System.Runtime.Caching.CacheItemPolicy policy);\n    parameters:\n    - id: item\n      type: System.Runtime.Caching.CacheItem\n      description: The object to add.\n    - id: policy\n      type: System.Runtime.Caching.CacheItemPolicy\n      description: An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.\n    return:\n      type: System.Runtime.Caching.CacheItem\n      description: If a cache entry with the same key exists, the existing cache entry; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Runtime.Caching.MemoryCache.AddOrGetExisting*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref:System.Runtime.Caching.CacheItem.Value*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Both the absolute and sliding expiration values for the <xref href=\"System.Runtime.Caching.CacheItemPolicy\"></xref> object are set to values other than the defaults of <xref href=\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\"></xref> and <xref href=\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\"></xref> fields. The <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class cannot set expiration policy based on a combination of an absolute expiration and a sliding expiration. Only one expiration setting can be explicitly set when you use the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> instance. The other expiration setting must be set to <xref href=\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\"></xref> field or <xref href=\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\"></xref> field.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> property is set to a value less than <xref:System.TimeSpan.Zero>.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> property is set to a value greater than one year.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItemPolicy.Priority*> property is not a value of the <xref href=\\\"System.Runtime.Caching.CacheItemPriority\\\"></xref> enumeration.\"\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)\n  id: AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: AddOrGetExisting(String,Object,DateTimeOffset,String)\n  nameWithType: MemoryCache.AddOrGetExisting(String,Object,DateTimeOffset,String)\n  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(String,Object,DateTimeOffset,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Adds a cache entry into the cache using the specified key and a value and an absolute expiration value.\n  remarks: \"If the cache does not have a cache entry whose key matches the `key` parameter, a new cache entry is created, and the AddOrGetExisting method overload returns `null`. If a matching cache entry exists, the existing entry is returned.  \\n  \\n> [!WARNING]\\n>  The <xref:System.Runtime.Caching.ObjectCache.Add%2A> and <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads do not support the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property. Therefore, to set the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property for a cache entry, use the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads instead.\"\n  syntax:\n    content: public override object AddOrGetExisting (string key, object value, DateTimeOffset absoluteExpiration, string regionName = null);\n    parameters:\n    - id: key\n      type: System.String\n      description: A unique identifier for the cache entry to add.\n    - id: value\n      type: System.Object\n      description: The data for the cache entry.\n    - id: absoluteExpiration\n      type: System.DateTimeOffset\n      description: The fixed date and time at which the cache entry will expire.\n    - id: regionName\n      type: System.String\n      description: A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default, because the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class does not implement regions.\n    return:\n      type: System.Object\n      description: If a cache entry with the same key exists, the existing cache entry; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Runtime.Caching.MemoryCache.AddOrGetExisting*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value </code>is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>regionName </code>is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Both the absolute and sliding expiration values for the <xref href=\"System.Runtime.Caching.CacheItemPolicy\"></xref> object are set to values other than the defaults of <xref href=\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\"></xref> and <xref href=\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\"></xref> fields. The <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class cannot set expiration policy based on a combination of an absolute expiration and a sliding expiration. Only one expiration setting can be explicitly set when you use the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> instance. The other expiration setting must be set to <xref href=\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\"></xref> or <xref href=\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\"></xref>\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> property is set to a value less than <xref:System.TimeSpan.Zero>.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> property is set to a value greater than one year.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItemPolicy.Priority*> property is not a value of the <xref href=\\\"System.Runtime.Caching.CacheItemPriority\\\"></xref> enumeration.\"\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)\n  id: AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: AddOrGetExisting(String,Object,CacheItemPolicy,String)\n  nameWithType: MemoryCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)\n  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Inserts a cache entry into the cache using the specified key and value and the specified details for how it is to be evicted.\n  remarks: >-\n    > [!WARNING]\n\n    >  The <xref:System.Runtime.Caching.ObjectCache.Add%2A> and <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads do not support the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property. Therefore, to set the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property for a cache entry, use the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads instead.\n  syntax:\n    content: public override object AddOrGetExisting (string key, object value, System.Runtime.Caching.CacheItemPolicy policy, string regionName = null);\n    parameters:\n    - id: key\n      type: System.String\n      description: A unique identifier for the cache entry to add or get.\n    - id: value\n      type: System.Object\n      description: The data for the cache entry.\n    - id: policy\n      type: System.Runtime.Caching.CacheItemPolicy\n      description: An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.\n    - id: regionName\n      type: System.String\n      description: A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. By default, this parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, because the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class does not implement regions.\n    return:\n      type: System.Object\n      description: If a matching cache entry already exists, a cache entry; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Runtime.Caching.MemoryCache.AddOrGetExisting*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"Both the absolute and sliding expiration values of <xref href=\\\"System.Runtime.Caching.CacheItemPolicy\\\"></xref> object are set to values other than the defaults of <xref href=\\\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\\\"></xref> and <xref href=\\\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\\\"></xref>. The <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> class cannot set expiration policy based on a combination of both an absolute and a sliding expiration. Only one expiration setting can be explicitly set when you use the <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> class. The other setting must be set to <xref href=\\\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\\\"></xref> or <xref href=\\\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\\\"></xref>.  \\n  \\n -or-  \\n  \\n Both the removal callback and the update callback have been specified for <xref href=\\\"System.Runtime.Caching.CacheItemPolicy\\\"></xref>. The <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> only supports using one type of callback per cache entry.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> property is set to a value less than <xref:System.TimeSpan.Zero>.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> has been set to a value greater than one year.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItemPolicy.Priority*> property is not a value of the <xref href=\\\"System.Runtime.Caching.CacheItemPriority\\\"></xref> enumeration.\"\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.CacheMemoryLimit\n  id: CacheMemoryLimit\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: CacheMemoryLimit\n  nameWithType: MemoryCache.CacheMemoryLimit\n  fullName: System.Runtime.Caching.MemoryCache.CacheMemoryLimit\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets the amount of memory on the computer, in bytes, that can be used by the cache.\n  remarks: \"If the current instance of the cache exceeds the limit on memory set by the CacheMemoryLimit property, the cache implementation removes cache entries. Each cache instance in the application can use the amount of memory that is specified by the CacheMemoryLimit property.  \\n  \\n The settings for the CacheMemoryLimit property can be specified in the application configuration file. Alternatively, they can be passed in the constructor when the <xref:System.Runtime.Caching.MemoryCache> class is initialized. For more information about how to configure this property, see [\\\\&lt;namedCaches\\\\&gt; Element (Cache Settings)](../Topic/%3CnamedCaches%3E%20Element%20\\\\(Cache%20Settings\\\\).md). For more information about how to set this value when the <xref:System.Runtime.Caching.MemoryCache> class is being initialized, see the <xref:System.Runtime.Caching.MemoryCache.%23ctor%2A> method.  \\n  \\n <xref:System.Runtime.Caching.MemoryCache> does not instantly enforce CacheMemoryLimit each time a new item is added to a <xref:System.Runtime.Caching.MemoryCache> instance. The internal heuristics which evicts extra items from the <xref:System.Runtime.Caching.MemoryCache> does it gradually and takes into account information from the garbage collector (see [Garbage Collection](~/add/includes/ajax-current-ext-md.md)) and other factors such as current cache size and overall system memory pressure. Therefore even though the <xref:System.Runtime.Caching.MemoryCache> tries to keep the cache size within the configured CacheMemoryLimit it is possible to temporarily exceed the limit by adding cache items at a very high rate.\"\n  syntax:\n    content: public long CacheMemoryLimit { get; }\n    return:\n      type: System.Int64\n      description: The amount of memory in bytes.\n  overload: System.Runtime.Caching.MemoryCache.CacheMemoryLimit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Contains(System.String,System.String)\n  id: Contains(System.String,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Contains(String,String)\n  nameWithType: MemoryCache.Contains(String,String)\n  fullName: System.Runtime.Caching.MemoryCache.Contains(String,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Determines whether a cache entry exists in the cache.\n  syntax:\n    content: public override bool Contains (string key, string regionName = null);\n    parameters:\n    - id: key\n      type: System.String\n      description: A unique identifier for the cache entry to search for.\n    - id: regionName\n      type: System.String\n      description: A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default, because the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class does not implement regions.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the cache contains a cache entry whose key matches <code>key</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Runtime.Caching.MemoryCache.Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>regionName </code>is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)\n  id: CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: CreateCacheEntryChangeMonitor(IEnumerable<String>,String)\n  nameWithType: MemoryCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)\n  fullName: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Creates a <xref href=\"System.Runtime.Caching.CacheEntryChangeMonitor\"></xref> object that can trigger events in response to changes to specified cache entries.\n  remarks: \"The CreateCacheEntryChangeMonitor method creates a <xref:System.Runtime.Caching.CacheEntryChangeMonitor> instance. This specialized change monitor is used to monitor the cache entries that are specified in the `keys` collection and to trigger events when the entries change.  \\n  \\n A monitored entry is considered to have changed for any of the following reasons:  \\n  \\n-   The key does not exist at the time of the call to the CreateCacheEntryChangeMonitor method. In that case, the resulting <xref:System.Runtime.Caching.CacheEntryChangeMonitor> instance is immediately set to a changed state. This means that when code subsequently binds a change-notification callback, the callback is triggered immediately.  \\n  \\n-   The associated cache entry was removed from the cache. This can occur if the entry is explicitly removed, if it expires, or if it is evicted to recover memory\"\n  syntax:\n    content: public override System.Runtime.Caching.CacheEntryChangeMonitor CreateCacheEntryChangeMonitor (System.Collections.Generic.IEnumerable<string> keys, string regionName = null);\n    parameters:\n    - id: keys\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: An enumeration of unique cache entry keys for the <xref href=\"System.Runtime.Caching.CacheEntryChangeMonitor\"></xref> object.\n    - id: regionName\n      type: System.String\n      description: A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default, because the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class does not implement regions.\n    return:\n      type: System.Runtime.Caching.CacheEntryChangeMonitor\n      description: A change monitor that monitors entries in the cache.\n  overload: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>regionName </code>is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keys</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An item in the <code>keys</code> collection is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Default\n  id: Default\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Default\n  nameWithType: MemoryCache.Default\n  fullName: System.Runtime.Caching.MemoryCache.Default\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets a reference to the default <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> instance.\n  remarks: \"This property always returns a reference to the default cache instance. For typical application scenarios, only one instance of <xref:System.Runtime.Caching.MemoryCache> is required.  \\n  \\n Because the default cache instance is not created by the constructor, you must use configuration to explicitly set the memory and polling values for the default cache instance. For more information, see [\\\\&lt;memoryCache\\\\&gt; Element (Cache Settings)](../Topic/%3CmemoryCache%3E%20Element%20\\\\(Cache%20Settings\\\\).md).\"\n  syntax:\n    content: public static System.Runtime.Caching.MemoryCache Default { get; }\n    return:\n      type: System.Runtime.Caching.MemoryCache\n      description: The default instance of the cache.\n  overload: System.Runtime.Caching.MemoryCache.Default*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities\n  id: DefaultCacheCapabilities\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: DefaultCacheCapabilities\n  nameWithType: MemoryCache.DefaultCacheCapabilities\n  fullName: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets a description of the features that the cache provides.\n  remarks: \"The capabilities of a cache implementation are a combination of the following values:  \\n  \\n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>  \\n  \\n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>  \\n  \\n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>  \\n  \\n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>  \\n  \\n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>  \\n  \\n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>\"\n  syntax:\n    content: public override System.Runtime.Caching.DefaultCacheCapabilities DefaultCacheCapabilities { get; }\n    return:\n      type: System.Runtime.Caching.DefaultCacheCapabilities\n      description: A bitwise combination of flags that indicate the default capabilities of the cache implementation.\n  overload: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Dispose\n  id: Dispose\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: MemoryCache.Dispose()\n  fullName: System.Runtime.Caching.MemoryCache.Dispose()\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Releases all resources that are used by the current instance of the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class.\n  remarks: \"Each <xref:System.Runtime.Caching.MemoryCache> instance is bound to the <xref:System.Web.Compilation.ClientBuildManager.AppDomainUnloaded> event. However, during application-domain shutdown, if a memory-based cache has not been explicitly disposed, the cache instance will automatically call the Dispose method.  \\n  \\n The disposed cache instance is shut down using the following steps:  \\n  \\n1.  The state of the cache is set to indicate that the cache is disposed. Any attempt to call public caching methods that change the state of the cache, such as methods that add, remove, or retrieve cache entries, might cause unexpected behavior. For example, if you call the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method after the cache is disposed, a no-op error occurs. If you attempt to retrieve items from the cache, the <xref:System.Runtime.Caching.MemoryCache.Get%2A> method will always return `null`.  \\n  \\n2.  Performance counter information is no longer raised from the current cache instance.  \\n  \\n3.  All references to cached objects held by the current cache instance are released.  \\n  \\n4.  Any <xref:System.Runtime.Caching.CacheEntryChangeMonitor> instances that are currently monitoring entries in the cache are notified.  \\n  \\n5.  Callback objects that provide notification of changes for those monitors are called.  \\n  \\n6.  Any <xref:System.Web.Caching.CacheItemRemovedCallback> instances that are registered with entries in the cache are called. The removal reason that is passed to the callbacks is <xref:System.Runtime.Caching.CacheEntryRemovedReason>.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Runtime.Caching.MemoryCache.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Get(System.String,System.String)\n  id: Get(System.String,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Get(String,String)\n  nameWithType: MemoryCache.Get(String,String)\n  fullName: System.Runtime.Caching.MemoryCache.Get(String,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Returns an entry from the cache.\n  syntax:\n    content: public override object Get (string key, string regionName = null);\n    parameters:\n    - id: key\n      type: System.String\n      description: A unique identifier for the cache entry to get.\n    - id: regionName\n      type: System.String\n      description: A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default, because the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class does not implement regions.\n    return:\n      type: System.Object\n      description: A reference to the cache entry that is identified by <code>key</code>, if the entry exists; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Runtime.Caching.MemoryCache.Get*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>regionName </code>is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.GetCacheItem(System.String,System.String)\n  id: GetCacheItem(System.String,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: GetCacheItem(String,String)\n  nameWithType: MemoryCache.GetCacheItem(String,String)\n  fullName: System.Runtime.Caching.MemoryCache.GetCacheItem(String,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Returns the specified entry from the cache as a <xref href=\"System.Runtime.Caching.CacheItem\"></xref> instance.\n  remarks: If the cache entry specified by `key` exists in the cache, the GetCacheItem method returns it as a <xref:System.Runtime.Caching.CacheItem> instance. The <xref:System.Runtime.Caching.CacheItem.Key%2A> and <xref:System.Runtime.Caching.CacheItem.Value%2A> properties of the <xref:System.Runtime.Caching.CacheItem> instance will be set. However, the <xref:System.Runtime.Caching.CacheItem.RegionName%2A> property will be `null`, because regions are not implemented in the <xref:System.Runtime.Caching.MemoryCache> class.\n  syntax:\n    content: public override System.Runtime.Caching.CacheItem GetCacheItem (string key, string regionName = null);\n    parameters:\n    - id: key\n      type: System.String\n      description: A unique identifier for the cache entry to get.\n    - id: regionName\n      type: System.String\n      description: A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default, because the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class does not implement regions.\n    return:\n      type: System.Runtime.Caching.CacheItem\n      description: A reference to the cache entry identified by <code>key</code> if the entry exists; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Runtime.Caching.MemoryCache.GetCacheItem*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>regionName </code>is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.GetCount(System.String)\n  id: GetCount(System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: GetCount(String)\n  nameWithType: MemoryCache.GetCount(String)\n  fullName: System.Runtime.Caching.MemoryCache.GetCount(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Returns the total number of cache entries in the cache.\n  syntax:\n    content: public override long GetCount (string regionName = null);\n    parameters:\n    - id: regionName\n      type: System.String\n      description: A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default, because the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class does not implement regions.\n    return:\n      type: System.Int64\n      description: The number of entries in the cache.\n  overload: System.Runtime.Caching.MemoryCache.GetCount*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>regionName </code>is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.GetEnumerator\n  id: GetEnumerator\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: MemoryCache.GetEnumerator()\n  fullName: System.Runtime.Caching.MemoryCache.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Creates an enumerator that can be used to iterate through a collection of cache entries.\n  remarks: \"The enumerator that is returned by the GetEnumerator method can be used to iterate over entries in the cache.  \\n  \\n> [!IMPORTANT]\\n>  Retrieving an enumerator for a <xref:System.Runtime.Caching.MemoryCache> instance is a resource-intensive and blocking operation. Therefore, the enumerator should not be used in production applications.\"\n  syntax:\n    content: protected override System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,object>> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n      description: The enumerator object that provides access to the items in the cache.\n  overload: System.Runtime.Caching.MemoryCache.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)\n  id: GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: GetValues(IEnumerable<String>,String)\n  nameWithType: MemoryCache.GetValues(IEnumerable<String>,String)\n  fullName: System.Runtime.Caching.MemoryCache.GetValues(IEnumerable<String>,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Returns a set of cache entries that correspond to the specified keys.\n  remarks: If a cache entry that is represented by the `keys` does not exist, the corresponding value for the returned object in the dictionary is set to `null`. Therefore, the returned dictionary always has the same number of items as the number of elements in `keys`.\n  syntax:\n    content: public override System.Collections.Generic.IDictionary<string,object> GetValues (System.Collections.Generic.IEnumerable<string> keys, string regionName = null);\n    parameters:\n    - id: keys\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: A set of unique identifiers for the cache entries to return.\n    - id: regionName\n      type: System.String\n      description: A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default, because the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class does not implement regions.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A set of cache entries that correspond to the specified keys.\n  overload: System.Runtime.Caching.MemoryCache.GetValues*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>regionName </code>is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>keys</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An individual key in the collection is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Item(System.String)\n  id: Item(System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: MemoryCache.Item(String)\n  fullName: System.Runtime.Caching.MemoryCache.Item(String)\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets or sets a value in the cache by using the default indexer property for an instance of the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class.\n  remarks: When you set this property, the value is inserted into the cache. The expiration policy for the cache entry is set to <xref:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration>. If a cache entry with a matching key already exists, its value is updated.\n  syntax:\n    content: public override object this[string key] { get; set; }\n    parameters:\n    - id: key\n      type: System.String\n      description: A unique identifier for the cache value to get or set.\n    return:\n      type: System.Object\n      description: The value in the cache instance for the specified key, if the entry exists; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Runtime.Caching.MemoryCache.Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>key</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n The inserted value is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Name\n  id: Name\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Name\n  nameWithType: MemoryCache.Name\n  fullName: System.Runtime.Caching.MemoryCache.Name\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets the name of the cache.\n  remarks: The Name property returns the name of the current instance of the <xref:System.Runtime.Caching.MemoryCache> class. In an application that uses multiple cache instances, you can use the Name property to help distinguish instances. For more information, see the <xref:System.Runtime.Caching.MemoryCache.%23ctor%28System.String%2CSystem.Collections.Specialized.NameValueCollection%29?displayProperty=fullName> method. The default memory-based cache returns the default name.\n  syntax:\n    content: public override string Name { get; }\n    return:\n      type: System.String\n      description: The name of the cache.\n  overload: System.Runtime.Caching.MemoryCache.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit\n  id: PhysicalMemoryLimit\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: PhysicalMemoryLimit\n  nameWithType: MemoryCache.PhysicalMemoryLimit\n  fullName: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets the percentage of physical memory that the cache can use.\n  remarks: \"The PhysicalMemoryLimit property returns the percentage of total physical computer memory that can be used by a single instance of the <xref:System.Runtime.Caching.MemoryCache> class. If the cache instance exceeds the specified limit, cache entries are removed.  \\n  \\n The settings for the PhysicalMemoryLimit property can be specified in the application configuration file. Alternatively, they can be passed by a caller when the <xref:System.Runtime.Caching.MemoryCache> class is initialized. For more information about how to configure this property, see [\\\\&lt;namedCaches\\\\&gt; Element (Cache Settings)](../Topic/%3CnamedCaches%3E%20Element%20\\\\(Cache%20Settings\\\\).md). For more information about how to configure the property when the <xref:System.Runtime.Caching.MemoryCache> class is being initialized, see the <xref:System.Runtime.Caching.MemoryCache.%23ctor%28System.String%2CSystem.Collections.Specialized.NameValueCollection%29?displayProperty=fullName> method.\"\n  syntax:\n    content: public long PhysicalMemoryLimit { get; }\n    return:\n      type: System.Int64\n      description: The percentage of physical memory that the cache can use.\n  overload: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.PollingInterval\n  id: PollingInterval\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: PollingInterval\n  nameWithType: MemoryCache.PollingInterval\n  fullName: System.Runtime.Caching.MemoryCache.PollingInterval\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets the maximum time after which the cache updates its memory statistics.\n  remarks: The settings for the PollingInterval property can be specified in the application configuration file. Alternatively they can be passed when the <xref:System.Runtime.Caching.MemoryCache> class is initialized. For more information about how to configure this property, see [\\&lt;namedCaches\\&gt; Element (Cache Settings)](../Topic/%3CnamedCaches%3E%20Element%20\\(Cache%20Settings\\).md). For more information about how to configure the property when the <xref:System.Runtime.Caching.MemoryCache> class is being initialized, see the <xref:System.Runtime.Caching.MemoryCache.%23ctor%28System.String%2CSystem.Collections.Specialized.NameValueCollection%29?displayProperty=fullName> method.\n  syntax:\n    content: public TimeSpan PollingInterval { get; }\n    return:\n      type: System.TimeSpan\n      description: The maximum time that can occur before memory statistics are updated.\n  overload: System.Runtime.Caching.MemoryCache.PollingInterval*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Remove(System.String,System.String)\n  id: Remove(System.String,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Remove(String,String)\n  nameWithType: MemoryCache.Remove(String,String)\n  fullName: System.Runtime.Caching.MemoryCache.Remove(String,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Removes a cache entry from the cache.\n  remarks: If the entry specified by `key` exists in the cache, removing the item triggers any associated change monitors. If the removed item was associated with a <xref:System.Web.Caching.CacheItemUpdateCallback> object or a <xref:System.Web.Caching.CacheItemRemovedCallback> object, the reason passed to the callback is <xref:System.Runtime.Caching.CacheEntryRemovedReason>.\n  syntax:\n    content: public override object Remove (string key, string regionName = null);\n    parameters:\n    - id: key\n      type: System.String\n      description: A unique identifier for the cache entry to remove.\n    - id: regionName\n      type: System.String\n      description: A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default, because the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class does not implement regions.\n    return:\n      type: System.Object\n      description: If the entry is found in the cache, the removed cache entry; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Runtime.Caching.MemoryCache.Remove*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>regionName </code>is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  id: Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Set(CacheItem,CacheItemPolicy)\n  nameWithType: MemoryCache.Set(CacheItem,CacheItemPolicy)\n  fullName: System.Runtime.Caching.MemoryCache.Set(CacheItem,CacheItemPolicy)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Inserts a cache entry into the cache by using a <xref href=\"System.Runtime.Caching.CacheItem\"></xref> instance to supply the key and value for the cache entry.\n  remarks: Like other <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads, the Set method always puts a cache value in the cache, regardless whether an entry already exists that has the same key. If the specified entry does not exist in the cache, a new cache entry is inserted. If the specified entry already exists, its value is updated.\n  syntax:\n    content: public override void Set (System.Runtime.Caching.CacheItem item, System.Runtime.Caching.CacheItemPolicy policy);\n    parameters:\n    - id: item\n      type: System.Runtime.Caching.CacheItem\n      description: An object that represents a cache entry to insert.\n    - id: policy\n      type: System.Runtime.Caching.CacheItemPolicy\n      description: An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.\n  overload: System.Runtime.Caching.MemoryCache.Set*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>item</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItem.Key*> property is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItem.Value*> property is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"An invalid combination of arguments for the cache entry was passed. This occurs if the following expiration details are set on the policy object for the cache entry:  \\n  \\n-   If both the absolute and sliding expiration values of the <xref href=\\\"System.Runtime.Caching.CacheItemPolicy\\\"></xref> object are set to values other than the defaults of <xref href=\\\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\\\"></xref> and <xref href=\\\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\\\"></xref> fields. The <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> class cannot set expiration policy based on both an absolute expiration and a sliding expiration. Only one expiration setting can be explicitly set when you use the <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> class. The other setting must be set to <xref href=\\\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\\\"></xref> or <xref href=\\\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\\\"></xref> property.  \\n  \\n-   If both the removal callback and the update callback are specified for <xref href=\\\"System.Runtime.Caching.CacheItemPolicy\\\"></xref> object. The <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> class only supports using one type of callback per cache entry.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> property is set to a value less than <xref:System.TimeSpan.Zero>.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> property is set to a value greater than one year.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItemPolicy.Priority*> is not a value of the <xref href=\\\"System.Runtime.Caching.CacheItemPriority\\\"></xref> enumeration.\"\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)\n  id: Set(System.String,System.Object,System.DateTimeOffset,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Set(String,Object,DateTimeOffset,String)\n  nameWithType: MemoryCache.Set(String,Object,DateTimeOffset,String)\n  fullName: System.Runtime.Caching.MemoryCache.Set(String,Object,DateTimeOffset,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Inserts a cache entry into the cache by using a key and a value and specifies time-based expiration details.\n  remarks: \"Like other <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads, the Set method always puts a cache value in the cache, regardless whether an entry already exists with the same key. If the specified entry does not exist, a new cache entry is inserted. If the specified entry exists, it is updated.  \\n  \\n The `absoluteExpiration` parameter indicates when the entry should be removed from the cache.  \\n  \\n Removing an entry triggers any associated change monitors. If the removed item was associated with a <xref:System.Web.Caching.CacheItemUpdateCallback> object or <xref:System.Web.Caching.CacheItemRemovedCallback> object, the reason for removal that is passed to the callbacks is contained in the <xref:System.Runtime.Caching.CacheEntryRemovedReason> property.\"\n  syntax:\n    content: public override void Set (string key, object value, DateTimeOffset absoluteExpiration, string regionName = null);\n    parameters:\n    - id: key\n      type: System.String\n      description: A unique identifier for the cache entry to insert.\n    - id: value\n      type: System.Object\n      description: The data for the cache entry.\n    - id: absoluteExpiration\n      type: System.DateTimeOffset\n      description: The fixed date and time at which the cache entry will expire.\n    - id: regionName\n      type: System.String\n      description: A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default, because the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class does not implement regions.\n  overload: System.Runtime.Caching.MemoryCache.Set*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>regionName </code>is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>key</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>Value</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"-   An invalid combination of arguments for the cache entry was passed. This occurs if the following expiration details are set on the policy object for the cache entry:  \\n  \\n-   If both the absolute and sliding expiration values on <xref href=\\\"System.Runtime.Caching.CacheItemPolicy\\\"></xref> object are set to values other than the defaults of <xref href=\\\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\\\"></xref> and <xref href=\\\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\\\"></xref>. This occurs because the <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> class does not support expiring entries based on both an absolute and a sliding expiration. Only one expiration setting can be explicitly set when you use the <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> class. The other setting must be set to <xref href=\\\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\\\"></xref> or <xref href=\\\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\\\"></xref>.  \\n  \\n-   If both the removal callback and the update callback are specified on <xref href=\\\"System.Runtime.Caching.CacheItemPolicy\\\"></xref> object. The <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> class only supports using one type of callback per cache entry.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> property is set to a value less than <xref:System.TimeSpan.Zero>.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> property is set to a value greater than one year.  \\n  \\n -or-  \\n  \\n-   The <xref:System.Runtime.Caching.CacheItemPolicy.Priority*> property is not a value of the <xref href=\\\"System.Runtime.Caching.CacheItemPriority\\\"></xref> enumeration.\"\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)\n  id: Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Set(String,Object,CacheItemPolicy,String)\n  nameWithType: MemoryCache.Set(String,Object,CacheItemPolicy,String)\n  fullName: System.Runtime.Caching.MemoryCache.Set(String,Object,CacheItemPolicy,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Inserts a cache entry into the cache by using a key and a value and eviction.\n  remarks: \"Like other <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads, the Set method always puts a cache value in the cache, regardless whether a matching entry already exists. If the specified entry does not exist in the cache, a new cache entry is inserted. If the specified entry exists, it is updated.  \\n  \\n Removing an entry triggers any associated change monitors. If the removed item was associated with a <xref:System.Web.Caching.CacheItemUpdateCallback> object or <xref:System.Web.Caching.CacheItemRemovedCallback> object, the reason for removal that is passed to the callbacks is contained in the <xref:System.Runtime.Caching.CacheEntryRemovedReason> property.\"\n  syntax:\n    content: public override void Set (string key, object value, System.Runtime.Caching.CacheItemPolicy policy, string regionName = null);\n    parameters:\n    - id: key\n      type: System.String\n      description: A unique identifier for the cache entry to insert.\n    - id: value\n      type: System.Object\n      description: The data for the cache entry.\n    - id: policy\n      type: System.Runtime.Caching.CacheItemPolicy\n      description: An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.\n    - id: regionName\n      type: System.String\n      description: A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default, because the <xref href=\"System.Runtime.Caching.MemoryCache\"></xref> class does not implement regions.\n  overload: System.Runtime.Caching.MemoryCache.Set*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>key</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>value</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>  \\n  \\n -or-  \\n  \\n The callback reference that was passed to the helper method in the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback*> property is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"-   An invalid combination of arguments for the cache entry exists. This occurs if the following expiration details are set on the policy object for the cache entry:  \\n  \\n-   If both the absolute and sliding expiration values on <xref href=\\\"System.Runtime.Caching.CacheItemPolicy\\\"></xref> object are set to values other than the defaults of <xref href=\\\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\\\"></xref> and <xref href=\\\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\\\"></xref>. This is because the <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> class does not support expiring entries based on both an absolute and a sliding expiration. Only one expiration setting can be explicitly set when you use the <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> class. The other setting must be set to <xref href=\\\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\\\"></xref> or <xref href=\\\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\\\"></xref>.  \\n  \\n-   If both the removal callback and the update callback are specified on <xref href=\\\"System.Runtime.Caching.CacheItemPolicy\\\"></xref> class. The <xref href=\\\"System.Runtime.Caching.MemoryCache\\\"></xref> class only supports using one type of callback per cache entry.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> property is set to a value less than <xref:System.TimeSpan.Zero>.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*> property is set to a value greater than one year.  \\n  \\n -or-  \\n  \\n The <xref:System.Runtime.Caching.CacheItemPolicy.Priority*> property is not a value of the <xref href=\\\"System.Runtime.Caching.CacheItemPriority\\\"></xref> enumeration.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>regionName </code>is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: MemoryCache.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Runtime.Caching.MemoryCache.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Provides support for iteration over a generic collection.\n  remarks: \"This member is an explicit interface member implementation. It can be used only when a <xref:System.Runtime.Caching.MemoryCache> instance is cast to an <xref:System.Collections.IEnumerable> interface.  \\n  \\n You can use this method to iterate through a generic collection of cache entries.\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: The enumerator object that provides access to the entries in the cache.\n  overload: System.Runtime.Caching.MemoryCache.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.MemoryCache.Trim(System.Int32)\n  id: Trim(System.Int32)\n  parent: System.Runtime.Caching.MemoryCache\n  langs:\n  - csharp\n  name: Trim(Int32)\n  nameWithType: MemoryCache.Trim(Int32)\n  fullName: System.Runtime.Caching.MemoryCache.Trim(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Removes a specified percentage of cache entries from the cache object.\n  remarks: \"The Trim property first removes entries that have exceeded either an absolute or sliding expiration. Any callbacks that are registered for items that are removed will be passed a removed reason of <xref:System.Web.Caching.CacheItemRemovedReason>.  \\n  \\n If removing expired entries is insufficient to reach the specified trim percentage, additional entries will be removed from the cache based on a least-recently used (LRU) algorithm until the requested trim percentage is reached. Any callbacks that are registered for items that are removed this way will be passed a remove reason of <xref:System.Runtime.Caching.CacheEntryRemovedReason>.\"\n  syntax:\n    content: public long Trim (int percent);\n    parameters:\n    - id: percent\n      type: System.Int32\n      description: The percentage of total cache entries to remove.\n    return:\n      type: System.Int64\n      description: The number of entries removed from the cache.\n  overload: System.Runtime.Caching.MemoryCache.Trim*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Runtime.Caching.ObjectCache\n  isExternal: false\n  name: System.Runtime.Caching.ObjectCache\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Configuration.ConfigurationException\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationException\n  nameWithType: ConfigurationException\n  fullName: System.Configuration.ConfigurationException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Runtime.Caching.MemoryCache.#ctor(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: MemoryCache(String,NameValueCollection)\n  nameWithType: MemoryCache.MemoryCache(String,NameValueCollection)\n  fullName: System.Runtime.Caching.MemoryCache.MemoryCache(String,NameValueCollection)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Runtime.Caching.MemoryCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Add(CacheItem,CacheItemPolicy)\n  nameWithType: MemoryCache.Add(CacheItem,CacheItemPolicy)\n  fullName: System.Runtime.Caching.MemoryCache.Add(CacheItem,CacheItemPolicy)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.Caching.CacheItem\n  parent: System.Runtime.Caching\n  isExternal: false\n  name: CacheItem\n  nameWithType: CacheItem\n  fullName: System.Runtime.Caching.CacheItem\n- uid: System.Runtime.Caching.CacheItemPolicy\n  parent: System.Runtime.Caching\n  isExternal: false\n  name: CacheItemPolicy\n  nameWithType: CacheItemPolicy\n  fullName: System.Runtime.Caching.CacheItemPolicy\n- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: AddOrGetExisting(CacheItem,CacheItemPolicy)\n  nameWithType: MemoryCache.AddOrGetExisting(CacheItem,CacheItemPolicy)\n  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(CacheItem,CacheItemPolicy)\n- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: AddOrGetExisting(String,Object,DateTimeOffset,String)\n  nameWithType: MemoryCache.AddOrGetExisting(String,Object,DateTimeOffset,String)\n  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(String,Object,DateTimeOffset,String)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.DateTimeOffset\n  parent: System\n  isExternal: true\n  name: DateTimeOffset\n  nameWithType: DateTimeOffset\n  fullName: System.DateTimeOffset\n- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: AddOrGetExisting(String,Object,CacheItemPolicy,String)\n  nameWithType: MemoryCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)\n  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)\n- uid: System.Runtime.Caching.MemoryCache.CacheMemoryLimit\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: CacheMemoryLimit\n  nameWithType: MemoryCache.CacheMemoryLimit\n  fullName: System.Runtime.Caching.MemoryCache.CacheMemoryLimit\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Runtime.Caching.MemoryCache.Contains(System.String,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Contains(String,String)\n  nameWithType: MemoryCache.Contains(String,String)\n  fullName: System.Runtime.Caching.MemoryCache.Contains(String,String)\n- uid: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: CreateCacheEntryChangeMonitor(IEnumerable<String>,String)\n  nameWithType: MemoryCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)\n  fullName: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)\n- uid: System.Runtime.Caching.CacheEntryChangeMonitor\n  parent: System.Runtime.Caching\n  isExternal: false\n  name: CacheEntryChangeMonitor\n  nameWithType: CacheEntryChangeMonitor\n  fullName: System.Runtime.Caching.CacheEntryChangeMonitor\n- uid: System.Collections.Generic.IEnumerable{System.String}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<String>\n  nameWithType: IEnumerable<String>\n  fullName: System.Collections.Generic.IEnumerable<System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.Caching.MemoryCache.Default\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Default\n  nameWithType: MemoryCache.Default\n  fullName: System.Runtime.Caching.MemoryCache.Default\n- uid: System.Runtime.Caching.MemoryCache\n  parent: System.Runtime.Caching\n  isExternal: false\n  name: MemoryCache\n  nameWithType: MemoryCache\n  fullName: System.Runtime.Caching.MemoryCache\n- uid: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: DefaultCacheCapabilities\n  nameWithType: MemoryCache.DefaultCacheCapabilities\n  fullName: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities\n- uid: System.Runtime.Caching.DefaultCacheCapabilities\n  parent: System.Runtime.Caching\n  isExternal: false\n  name: DefaultCacheCapabilities\n  nameWithType: DefaultCacheCapabilities\n  fullName: System.Runtime.Caching.DefaultCacheCapabilities\n- uid: System.Runtime.Caching.MemoryCache.Dispose\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Dispose()\n  nameWithType: MemoryCache.Dispose()\n  fullName: System.Runtime.Caching.MemoryCache.Dispose()\n- uid: System.Runtime.Caching.MemoryCache.Get(System.String,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Get(String,String)\n  nameWithType: MemoryCache.Get(String,String)\n  fullName: System.Runtime.Caching.MemoryCache.Get(String,String)\n- uid: System.Runtime.Caching.MemoryCache.GetCacheItem(System.String,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: GetCacheItem(String,String)\n  nameWithType: MemoryCache.GetCacheItem(String,String)\n  fullName: System.Runtime.Caching.MemoryCache.GetCacheItem(String,String)\n- uid: System.Runtime.Caching.MemoryCache.GetCount(System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: GetCount(String)\n  nameWithType: MemoryCache.GetCount(String)\n  fullName: System.Runtime.Caching.MemoryCache.GetCount(String)\n- uid: System.Runtime.Caching.MemoryCache.GetEnumerator\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: MemoryCache.GetEnumerator()\n  fullName: System.Runtime.Caching.MemoryCache.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<KeyValuePair<String,Object>>\n  nameWithType: IEnumerator<KeyValuePair<String,Object>>\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.String,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.Caching.MemoryCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: GetValues(IEnumerable<String>,String)\n  nameWithType: MemoryCache.GetValues(IEnumerable<String>,String)\n  fullName: System.Runtime.Caching.MemoryCache.GetValues(IEnumerable<String>,String)\n- uid: System.Collections.Generic.IDictionary{System.String,System.Object}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,Object>\n  nameWithType: IDictionary<String,Object>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.Caching.MemoryCache.Item(System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Item(String)\n  nameWithType: MemoryCache.Item(String)\n  fullName: System.Runtime.Caching.MemoryCache.Item(String)\n- uid: System.Runtime.Caching.MemoryCache.Name\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Name\n  nameWithType: MemoryCache.Name\n  fullName: System.Runtime.Caching.MemoryCache.Name\n- uid: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: PhysicalMemoryLimit\n  nameWithType: MemoryCache.PhysicalMemoryLimit\n  fullName: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit\n- uid: System.Runtime.Caching.MemoryCache.PollingInterval\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: PollingInterval\n  nameWithType: MemoryCache.PollingInterval\n  fullName: System.Runtime.Caching.MemoryCache.PollingInterval\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Runtime.Caching.MemoryCache.Remove(System.String,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Remove(String,String)\n  nameWithType: MemoryCache.Remove(String,String)\n  fullName: System.Runtime.Caching.MemoryCache.Remove(String,String)\n- uid: System.Runtime.Caching.MemoryCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Set(CacheItem,CacheItemPolicy)\n  nameWithType: MemoryCache.Set(CacheItem,CacheItemPolicy)\n  fullName: System.Runtime.Caching.MemoryCache.Set(CacheItem,CacheItemPolicy)\n- uid: System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Set(String,Object,DateTimeOffset,String)\n  nameWithType: MemoryCache.Set(String,Object,DateTimeOffset,String)\n  fullName: System.Runtime.Caching.MemoryCache.Set(String,Object,DateTimeOffset,String)\n- uid: System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Set(String,Object,CacheItemPolicy,String)\n  nameWithType: MemoryCache.Set(String,Object,CacheItemPolicy,String)\n  fullName: System.Runtime.Caching.MemoryCache.Set(String,Object,CacheItemPolicy,String)\n- uid: System.Runtime.Caching.MemoryCache.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: MemoryCache.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Runtime.Caching.MemoryCache.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Runtime.Caching.MemoryCache.Trim(System.Int32)\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Trim(Int32)\n  nameWithType: MemoryCache.Trim(Int32)\n  fullName: System.Runtime.Caching.MemoryCache.Trim(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Runtime.Caching.MemoryCache.#ctor*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: MemoryCache\n  nameWithType: MemoryCache.MemoryCache\n- uid: System.Runtime.Caching.MemoryCache.Add*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Add\n  nameWithType: MemoryCache.Add\n- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: AddOrGetExisting\n  nameWithType: MemoryCache.AddOrGetExisting\n- uid: System.Runtime.Caching.MemoryCache.CacheMemoryLimit*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: CacheMemoryLimit\n  nameWithType: MemoryCache.CacheMemoryLimit\n- uid: System.Runtime.Caching.MemoryCache.Contains*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Contains\n  nameWithType: MemoryCache.Contains\n- uid: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: CreateCacheEntryChangeMonitor\n  nameWithType: MemoryCache.CreateCacheEntryChangeMonitor\n- uid: System.Runtime.Caching.MemoryCache.Default*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Default\n  nameWithType: MemoryCache.Default\n- uid: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: DefaultCacheCapabilities\n  nameWithType: MemoryCache.DefaultCacheCapabilities\n- uid: System.Runtime.Caching.MemoryCache.Dispose*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Dispose\n  nameWithType: MemoryCache.Dispose\n- uid: System.Runtime.Caching.MemoryCache.Get*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Get\n  nameWithType: MemoryCache.Get\n- uid: System.Runtime.Caching.MemoryCache.GetCacheItem*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: GetCacheItem\n  nameWithType: MemoryCache.GetCacheItem\n- uid: System.Runtime.Caching.MemoryCache.GetCount*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: GetCount\n  nameWithType: MemoryCache.GetCount\n- uid: System.Runtime.Caching.MemoryCache.GetEnumerator*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: MemoryCache.GetEnumerator\n- uid: System.Runtime.Caching.MemoryCache.GetValues*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: GetValues\n  nameWithType: MemoryCache.GetValues\n- uid: System.Runtime.Caching.MemoryCache.Item*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Item\n  nameWithType: MemoryCache.Item\n- uid: System.Runtime.Caching.MemoryCache.Name*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Name\n  nameWithType: MemoryCache.Name\n- uid: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: PhysicalMemoryLimit\n  nameWithType: MemoryCache.PhysicalMemoryLimit\n- uid: System.Runtime.Caching.MemoryCache.PollingInterval*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: PollingInterval\n  nameWithType: MemoryCache.PollingInterval\n- uid: System.Runtime.Caching.MemoryCache.Remove*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Remove\n  nameWithType: MemoryCache.Remove\n- uid: System.Runtime.Caching.MemoryCache.Set*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Set\n  nameWithType: MemoryCache.Set\n- uid: System.Runtime.Caching.MemoryCache.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: MemoryCache.System.Collections.IEnumerable.GetEnumerator\n- uid: System.Runtime.Caching.MemoryCache.Trim*\n  parent: System.Runtime.Caching.MemoryCache\n  isExternal: false\n  name: Trim\n  nameWithType: MemoryCache.Trim\n"}