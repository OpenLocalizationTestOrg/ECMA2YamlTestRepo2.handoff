{"nodes":[{"pos":[735,794],"content":"Holds the strong name signature information for a manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"Holds the strong name signature information for a manifest.","pos":[0,59]}]},{"pos":[1425,1501],"content":"Gets the hash algorithm that is used to calculate the strong name signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the hash algorithm that is used to calculate the strong name signature.","pos":[0,76]}]},{"pos":[1619,1702],"content":"The name of the hash algorithm that is used to calculate the strong name signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the hash algorithm that is used to calculate the strong name signature.","pos":[0,83]}]},{"pos":[2260,2302],"content":"Gets the HRESULT value of the result code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the HRESULT value of the result code.","pos":[0,42]}]},{"pos":[2410,2447],"content":"The HRESULT value of the result code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HRESULT value of the result code.","pos":[0,37]}]},{"pos":[2999,3066],"content":"Gets a value indicating whether the strong name signature is valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the strong name signature is valid.","pos":[0,67]}]},{"pos":[3177,3351],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the strong name signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the strong name signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3913,3970],"content":"Gets the public key that is used to verify the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the public key that is used to verify the signature.","pos":[0,57]}]},{"pos":[3982,4169],"content":"The only case that returns `null` is when <xref:System.Security.Cryptography.StrongNameSignatureInformation.IsValid%2A> is `false`.  If the signature is valid, there will always be a key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The only case that returns <ph id=\"ph1\">`null`</ph> is when &lt;xref:System.Security.Cryptography.StrongNameSignatureInformation.IsValid%2A&gt; is <ph id=\"ph2\">`false`</ph>.","pos":[0,131],"source":"The only case that returns `null` is when <xref:System.Security.Cryptography.StrongNameSignatureInformation.IsValid%2A> is `false`."},{"content":"If the signature is valid, there will always be a key.","pos":[133,187]}]},{"pos":[4360,4412],"content":"The public key that is used to verify the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"The public key that is used to verify the signature.","pos":[0,52]}]},{"pos":[5021,5077],"content":"Gets the results of verifying the strong name signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the results of verifying the strong name signature.","pos":[0,56]}]},{"pos":[5089,5544],"content":"This property and the <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property are two ways to determine whether an error occurred during verification. This property lists well-known errors that might occur. The <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property can be checked if the error is not covered by the <xref:System.Security.Cryptography.SignatureVerificationResult> enumeration.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property and the <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property are two ways to determine whether an error occurred during verification. This property lists well-known errors that might occur. The <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property can be checked if the error is not covered by the <xref:System.Security.Cryptography.SignatureVerificationResult> enumeration.","pos":[0,455],"nodes":[{"content":"This property and the &lt;xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A&gt; property are two ways to determine whether an error occurred during verification.","pos":[0,181],"source":"This property and the <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property are two ways to determine whether an error occurred during verification."},{"content":"This property lists well-known errors that might occur.","pos":[182,237]},{"content":"The &lt;xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A&gt; property can be checked if the error is not covered by the &lt;xref:System.Security.Cryptography.SignatureVerificationResult&gt; enumeration.","pos":[238,455],"source":" The <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property can be checked if the error is not covered by the <xref:System.Security.Cryptography.SignatureVerificationResult> enumeration."}]}]},{"pos":[5760,5804],"content":"The result codes for signature verification.","needQuote":true,"needEscape":true,"nodes":[{"content":"The result codes for signature verification.","pos":[0,44]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.StrongNameSignatureInformation\n  id: StrongNameSignatureInformation\n  children:\n  - System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm\n  - System.Security.Cryptography.StrongNameSignatureInformation.HResult\n  - System.Security.Cryptography.StrongNameSignatureInformation.IsValid\n  - System.Security.Cryptography.StrongNameSignatureInformation.PublicKey\n  - System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult\n  langs:\n  - csharp\n  name: StrongNameSignatureInformation\n  nameWithType: StrongNameSignatureInformation\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation\n  type: Class\n  summary: Holds the strong name signature information for a manifest.\n  syntax:\n    content: public sealed class StrongNameSignatureInformation\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm\n  id: HashAlgorithm\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  langs:\n  - csharp\n  name: HashAlgorithm\n  nameWithType: StrongNameSignatureInformation.HashAlgorithm\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the hash algorithm that is used to calculate the strong name signature.\n  syntax:\n    content: public string HashAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the hash algorithm that is used to calculate the strong name signature.\n  overload: System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HResult\n  id: HResult\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  langs:\n  - csharp\n  name: HResult\n  nameWithType: StrongNameSignatureInformation.HResult\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation.HResult\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the HRESULT value of the result code.\n  syntax:\n    content: public int HResult { get; }\n    return:\n      type: System.Int32\n      description: The HRESULT value of the result code.\n  overload: System.Security.Cryptography.StrongNameSignatureInformation.HResult*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.IsValid\n  id: IsValid\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  langs:\n  - csharp\n  name: IsValid\n  nameWithType: StrongNameSignatureInformation.IsValid\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation.IsValid\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the strong name signature is valid.\n  syntax:\n    content: public bool IsValid { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the strong name signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.StrongNameSignatureInformation.IsValid*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.PublicKey\n  id: PublicKey\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  langs:\n  - csharp\n  name: PublicKey\n  nameWithType: StrongNameSignatureInformation.PublicKey\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation.PublicKey\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the public key that is used to verify the signature.\n  remarks: The only case that returns `null` is when <xref:System.Security.Cryptography.StrongNameSignatureInformation.IsValid%2A> is `false`.  If the signature is valid, there will always be a key.\n  syntax:\n    content: public System.Security.Cryptography.AsymmetricAlgorithm PublicKey { get; }\n    return:\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: The public key that is used to verify the signature.\n  overload: System.Security.Cryptography.StrongNameSignatureInformation.PublicKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult\n  id: VerificationResult\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  langs:\n  - csharp\n  name: VerificationResult\n  nameWithType: StrongNameSignatureInformation.VerificationResult\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the results of verifying the strong name signature.\n  remarks: This property and the <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property are two ways to determine whether an error occurred during verification. This property lists well-known errors that might occur. The <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property can be checked if the error is not covered by the <xref:System.Security.Cryptography.SignatureVerificationResult> enumeration.\n  syntax:\n    content: public System.Security.Cryptography.SignatureVerificationResult VerificationResult { get; }\n    return:\n      type: System.Security.Cryptography.SignatureVerificationResult\n      description: The result codes for signature verification.\n  overload: System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: StrongNameSignatureInformation.HashAlgorithm\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HResult\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: HResult\n  nameWithType: StrongNameSignatureInformation.HResult\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation.HResult\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.IsValid\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: IsValid\n  nameWithType: StrongNameSignatureInformation.IsValid\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation.IsValid\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.PublicKey\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: PublicKey\n  nameWithType: StrongNameSignatureInformation.PublicKey\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation.PublicKey\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: VerificationResult\n  nameWithType: StrongNameSignatureInformation.VerificationResult\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult\n- uid: System.Security.Cryptography.SignatureVerificationResult\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SignatureVerificationResult\n  nameWithType: SignatureVerificationResult\n  fullName: System.Security.Cryptography.SignatureVerificationResult\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm*\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: StrongNameSignatureInformation.HashAlgorithm\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HResult*\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: HResult\n  nameWithType: StrongNameSignatureInformation.HResult\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.IsValid*\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: IsValid\n  nameWithType: StrongNameSignatureInformation.IsValid\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.PublicKey*\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: PublicKey\n  nameWithType: StrongNameSignatureInformation.PublicKey\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult*\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: VerificationResult\n  nameWithType: StrongNameSignatureInformation.VerificationResult\n"}