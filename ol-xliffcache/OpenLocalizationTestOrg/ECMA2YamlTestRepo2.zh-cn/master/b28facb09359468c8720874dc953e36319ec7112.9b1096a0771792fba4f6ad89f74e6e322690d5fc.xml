{"nodes":[{"pos":[3463,3597],"content":"Represents an open connection to a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an open connection to a <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> database.","pos":[0,102],"source":"Represents an open connection to a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database."},{"content":"This class cannot be inherited.","pos":[103,134]}]},{"pos":[10936,11033],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> class."},{"pos":[11046,12028],"content":"When a new instance of <xref:System.Data.SqlClient.SqlConnection> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|empty string (\"\")|   |<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|   |<xref:System.Data.SqlClient.SqlConnection.Database%2A>|empty string (\"\")|   |<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|empty string (\"\")|       You can change the value for these properties only by using the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property. The <xref:System.Data.SqlClient.SqlConnectionStringBuilder> class provides functionality for creating and managing the contents of connection strings.","needQuote":false,"needEscape":true,"nodes":[{"content":"When a new instance of <xref:System.Data.SqlClient.SqlConnection> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|empty string (\"\")|   |<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|   |<xref:System.Data.SqlClient.SqlConnection.Database%2A>|empty string (\"\")|   |<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|empty string (\"\")|       You can change the value for these properties only by using the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property. The <xref:System.Data.SqlClient.SqlConnectionStringBuilder> class provides functionality for creating and managing the contents of connection strings.","pos":[0,967],"nodes":[{"content":"When a new instance of &lt;xref:System.Data.SqlClient.SqlConnection&gt; is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the &lt;xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A&gt; property.","pos":[0,288],"source":"When a new instance of <xref:System.Data.SqlClient.SqlConnection> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A&gt;|empty string (\"\")|   |&lt;xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A&gt;|15|   |&lt;xref:System.Data.SqlClient.SqlConnection.Database%2A&gt;|empty string (\"\")|   |&lt;xref:System.Data.SqlClient.SqlConnection.DataSource%2A&gt;|empty string (\"\")|       You can change the value for these properties only by using the &lt;xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A&gt; property.","pos":[294,816],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|empty string (\"\")|   |<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|   |<xref:System.Data.SqlClient.SqlConnection.Database%2A>|empty string (\"\")|   |<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|empty string (\"\")|       You can change the value for these properties only by using the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property."},{"content":"The &lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder&gt; class provides functionality for creating and managing the contents of connection strings.","pos":[817,967],"source":" The <xref:System.Data.SqlClient.SqlConnectionStringBuilder> class provides functionality for creating and managing the contents of connection strings."}]}]},{"pos":[12967,13120],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class when given a string that contains the connection string.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> class when given a string that contains the connection string."},{"pos":[13133,14101],"content":"When a new instance of <xref:System.Data.SqlClient.SqlConnection> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|`connectionString`|   |<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|   |<xref:System.Data.SqlClient.SqlConnection.Database%2A>|empty string (\"\")|   |<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|empty string (\"\")|       You can change the value for these properties only by using the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property. The <xref:System.Data.SqlClient.SqlConnection> class provides functionality for creating and managing the contents of connection strings.","needQuote":false,"needEscape":true,"nodes":[{"content":"When a new instance of &lt;xref:System.Data.SqlClient.SqlConnection&gt; is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the &lt;xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A&gt; property.","pos":[0,288],"source":"When a new instance of <xref:System.Data.SqlClient.SqlConnection> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A&gt;|<ph id=\"ph1\">`connectionString`</ph>|   |&lt;xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A&gt;|15|   |&lt;xref:System.Data.SqlClient.SqlConnection.Database%2A&gt;|empty string (\"\")|   |&lt;xref:System.Data.SqlClient.SqlConnection.DataSource%2A&gt;|empty string (\"\")|       You can change the value for these properties only by using the &lt;xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A&gt; property.","pos":[294,817],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|`connectionString`|   |<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|   |<xref:System.Data.SqlClient.SqlConnection.Database%2A>|empty string (\"\")|   |<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|empty string (\"\")|       You can change the value for these properties only by using the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property."},{"content":"The &lt;xref:System.Data.SqlClient.SqlConnection&gt; class provides functionality for creating and managing the contents of connection strings.","pos":[818,955],"source":" The <xref:System.Data.SqlClient.SqlConnection> class provides functionality for creating and managing the contents of connection strings."}]},{"pos":[14632,14731],"content":"The connection used to open the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> database.","needQuote":true,"needEscape":true,"source":"The connection used to open the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database."},{"pos":[15348,15704],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class given a connection string, that does not use <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and a <bpt id=\"p3\">&lt;xref href=\"System.Data.SqlClient.SqlCredential\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object that contains the user ID and password.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> class given a connection string, that does not use <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref> and a <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object that contains the user ID and password."},{"pos":[15913,16367],"content":"A connection string that does not use any of the following connection string keywords: <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_UserId\" name=\"UserId\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Password\" name=\"Password\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; or that does not use <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_ContextConnection = true\" name=\"ContextConnection = true\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":false,"needEscape":true,"source":"A connection string that does not use any of the following connection string keywords: <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref>, <xref uid=\"langword_csharp_UserId\" name=\"UserId\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Password\" name=\"Password\" href=\"\"></xref>; or that does not use <xref uid=\"langword_csharp_ContextConnection = true\" name=\"ContextConnection = true\" href=\"\"></xref>."},{"pos":[16457,16653],"content":"A <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object. If `credential` is null, SqlConnection is functionally equivalent to &lt;xref:System.Data.SqlClient.SqlConnection.%23ctor%2A&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCredential\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,66],"source":"A <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object."},{"content":"If <ph id=\"ph1\">`credential`</ph> is null, SqlConnection is functionally equivalent to <ph id=\"ph2\">&amp;lt;</ph>xref:System.Data.SqlClient.SqlConnection.%23ctor%2A<ph id=\"ph3\">&amp;gt;</ph>.","pos":[67,196],"source":" If `credential` is null, SqlConnection is functionally equivalent to &lt;xref:System.Data.SqlClient.SqlConnection.%23ctor%2A&gt;."}]},{"pos":[17103,17152],"content":"Gets or sets the access token for the connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the access token for the connection.","pos":[0,49]}]},{"pos":[17273,17309],"content":"The access token for the connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The access token for the connection.","pos":[0,36]}]},{"pos":[18129,18141],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18218,18230],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18722,18752],"content":"Starts a database transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a database transaction.","pos":[0,30]}]},{"pos":[18765,20997],"content":"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION.       You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method. To make sure that the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].      > [!NOTE] >  If you do not specify an isolation level, the default isolation level is used. To specify an isolation level with the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method, use the overload that takes the `iso` parameter (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>). The isolation level set for a transaction persists after the transaction is completed and until the connection is closed or disposed. Setting the isolation level to **Snapshot** in a database where the snapshot isolation level is not enabled does not throw an exception. The transaction will complete using the default isolation level.      > [!CAUTION] >  If a transaction is started and a level 16 or higher error occurs on the server, the transaction will not be rolled back until the <xref:System.Data.SqlClient.SqlDataReader.Read%2A> method is invoked. No exception is thrown on **ExecuteReader**.      > [!CAUTION] >  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.       For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.","needQuote":false,"needEscape":true,"nodes":[{"content":"This command maps to the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> implementation of BEGIN TRANSACTION.","pos":[0,119],"source":"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION."},{"content":"You must explicitly commit or roll back the transaction using the &lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt; or &lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt; method.","pos":[126,312],"source":"       You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method."},{"content":"To make sure that the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> transaction management model performs correctly, avoid using other transaction management models, such as the one provided by <ph id=\"ph3\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>.","pos":[313,653],"source":" To make sure that the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you do not specify an isolation level, the default isolation level is used.","pos":[659,750],"source":"      > [!NOTE] >  If you do not specify an isolation level, the default isolation level is used."},{"content":"To specify an isolation level with the &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt; method, use the overload that takes the <ph id=\"ph1\">`iso`</ph> parameter (&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;).","pos":[751,974],"source":" To specify an isolation level with the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method, use the overload that takes the `iso` parameter (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>)."},{"content":"The isolation level set for a transaction persists after the transaction is completed and until the connection is closed or disposed.","pos":[975,1108]},{"content":"Setting the isolation level to <bpt id=\"p1\">**</bpt>Snapshot<ept id=\"p1\">**</ept> in a database where the snapshot isolation level is not enabled does not throw an exception.","pos":[1109,1245],"source":" Setting the isolation level to **Snapshot** in a database where the snapshot isolation level is not enabled does not throw an exception."},{"content":"The transaction will complete using the default isolation level.","pos":[1246,1310]},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  If a transaction is started and a level 16 or higher error occurs on the server, the transaction will not be rolled back until the &lt;xref:System.Data.SqlClient.SqlDataReader.Read%2A&gt; method is invoked.","pos":[1316,1532],"source":"      > [!CAUTION] >  If a transaction is started and a level 16 or higher error occurs on the server, the transaction will not be rolled back until the <xref:System.Data.SqlClient.SqlDataReader.Read%2A> method is invoked."},{"content":"No exception is thrown on <bpt id=\"p1\">**</bpt>ExecuteReader<ept id=\"p1\">**</ept>.","pos":[1533,1577],"source":" No exception is thrown on **ExecuteReader**."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  When your query returns a large amount of data and calls <ph id=\"ph2\">`BeginTransaction`</ph>, a &lt;xref:System.Data.SqlClient.SqlException&gt; is thrown because <ph id=\"ph3\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> does not allow parallel transactions when using MARS.","pos":[1583,1849],"source":"      > [!CAUTION] >  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS."},{"content":"To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.","pos":[1850,1974]},{"content":"For more information on <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> Books Online.","pos":[1981,2215],"source":"       For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online."}]},{"pos":[21778,21821],"content":"An object representing the new transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object representing the new transaction.","pos":[0,43]}]},{"pos":[22016,22100],"content":"Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).","needQuote":true,"needEscape":true,"nodes":[{"content":"Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).","pos":[0,84]}]},{"pos":[22211,22251],"content":"Parallel transactions are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Parallel transactions are not supported.","pos":[0,40]}]},{"pos":[22756,22821],"content":"Starts a database transaction with the specified isolation level.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a database transaction with the specified isolation level.","pos":[0,65]}]},{"pos":[22834,25114],"content":"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION.       You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method. To make sure that the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].      > [!NOTE] >  After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] default). This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row. To reset the isolation level to the default (READ COMMITTED), execute the [!INCLUDE[tsql](~/add/includes/tsql-md.md)] SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> followed immediately by <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>. For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] isolation levels, see \"Isolation Levels in the Database Engine\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.       For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.      > [!CAUTION] >  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.","needQuote":false,"needEscape":true,"nodes":[{"content":"This command maps to the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> implementation of BEGIN TRANSACTION.","pos":[0,119],"source":"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION."},{"content":"You must explicitly commit or roll back the transaction using the &lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt; or &lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt; method.","pos":[126,312],"source":"       You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method."},{"content":"To make sure that the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> transaction management model performs correctly, avoid using other transaction management models, such as the one provided by <ph id=\"ph3\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>.","pos":[313,653],"source":" To make sure that the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> default).","pos":[659,897],"source":"      > [!NOTE] >  After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] default)."},{"content":"This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row.","pos":[898,1029]},{"content":"To reset the isolation level to the default (READ COMMITTED), execute the <ph id=\"ph1\">[!INCLUDE[tsql](~/add/includes/tsql-md.md)]</ph> SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName&gt; followed immediately by &lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName&gt;.","pos":[1030,1405],"source":" To reset the isolation level to the default (READ COMMITTED), execute the [!INCLUDE[tsql](~/add/includes/tsql-md.md)] SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> followed immediately by <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>."},{"content":"For more information on <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> isolation levels, see \"Isolation Levels in the Database Engine\" in <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> Books Online.","pos":[1406,1626],"source":" For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] isolation levels, see \"Isolation Levels in the Database Engine\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online."},{"content":"For more information on <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> Books Online.","pos":[1633,1867],"source":"       For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  When your query returns a large amount of data and calls <ph id=\"ph2\">`BeginTransaction`</ph>, a &lt;xref:System.Data.SqlClient.SqlException&gt; is thrown because <ph id=\"ph3\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> does not allow parallel transactions when using MARS.","pos":[1873,2139],"source":"      > [!CAUTION] >  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS."},{"content":"To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.","pos":[2140,2264]}]},{"pos":[25958,26017],"content":"The isolation level under which the transaction should run.","needQuote":true,"needEscape":true,"nodes":[{"content":"The isolation level under which the transaction should run.","pos":[0,59]}]},{"pos":[26098,26141],"content":"An object representing the new transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object representing the new transaction.","pos":[0,43]}]},{"pos":[26336,26420],"content":"Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).","needQuote":true,"needEscape":true,"nodes":[{"content":"Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).","pos":[0,84]}]},{"pos":[26531,26571],"content":"Parallel transactions are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Parallel transactions are not supported.","pos":[0,40]}]},{"pos":[27026,27092],"content":"Starts a database transaction with the specified transaction name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a database transaction with the specified transaction name.","pos":[0,66]}]},{"pos":[27105,28770],"content":"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION.       The length of the `transactionName` parameter must not exceed 32 characters; otherwise an exception will be thrown.       The value in the `transactionName` parameter can be used in later calls to <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> and in the `savePoint` parameter of the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method.       You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method. To make sure that the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].       For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.      > [!CAUTION] >  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.","needQuote":false,"needEscape":true,"nodes":[{"content":"This command maps to the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> implementation of BEGIN TRANSACTION.","pos":[0,119],"source":"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION."},{"content":"The length of the <ph id=\"ph1\">`transactionName`</ph> parameter must not exceed 32 characters; otherwise an exception will be thrown.","pos":[126,241],"source":"       The length of the `transactionName` parameter must not exceed 32 characters; otherwise an exception will be thrown."},{"content":"The value in the <ph id=\"ph1\">`transactionName`</ph> parameter can be used in later calls to &lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt; and in the <ph id=\"ph2\">`savePoint`</ph> parameter of the &lt;xref:System.Data.SqlClient.SqlTransaction.Save%2A&gt; method.","pos":[248,478],"source":"       The value in the `transactionName` parameter can be used in later calls to <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> and in the `savePoint` parameter of the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method."},{"content":"You must explicitly commit or roll back the transaction using the &lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt; or &lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt; method.","pos":[485,671],"source":"       You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method."},{"content":"To make sure that the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> transaction management model performs correctly, avoid using other transaction management models, such as the one provided by <ph id=\"ph3\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>.","pos":[672,1012],"source":" To make sure that the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."},{"content":"For more information on <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> Books Online.","pos":[1019,1253],"source":"       For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  When your query returns a large amount of data and calls <ph id=\"ph2\">`BeginTransaction`</ph>, a &lt;xref:System.Data.SqlClient.SqlException&gt; is thrown because <ph id=\"ph3\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> does not allow parallel transactions when using MARS.","pos":[1259,1525],"source":"      > [!CAUTION] >  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS."},{"content":"To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.","pos":[1526,1650]}]},{"pos":[29611,29639],"content":"The name of the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the transaction.","pos":[0,28]}]},{"pos":[29720,29763],"content":"An object representing the new transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object representing the new transaction.","pos":[0,43]}]},{"pos":[29958,30042],"content":"Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).","needQuote":true,"needEscape":true,"nodes":[{"content":"Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).","pos":[0,84]}]},{"pos":[30153,30193],"content":"Parallel transactions are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Parallel transactions are not supported.","pos":[0,40]}]},{"pos":[30747,30833],"content":"Starts a database transaction with the specified isolation level and transaction name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a database transaction with the specified isolation level and transaction name.","pos":[0,86]}]},{"pos":[30846,33289],"content":"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION.       The value in the `transactionName` parameter can be used in later calls to <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> and in the `savePoint` parameter of the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method.       You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method. To make sure that the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].      > [!NOTE] >  After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] default). This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row. To reset the isolation level to the default (READ COMMITTED), execute the [!INCLUDE[tsql](~/add/includes/tsql-md.md)] SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> followed immediately by <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>. For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] isolation levels, see \"Isolation Levels in the Database Engine\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.       For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.      > [!CAUTION] >  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.","needQuote":false,"needEscape":true,"nodes":[{"content":"This command maps to the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> implementation of BEGIN TRANSACTION.","pos":[0,119],"source":"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION."},{"content":"The value in the <ph id=\"ph1\">`transactionName`</ph> parameter can be used in later calls to &lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt; and in the <ph id=\"ph2\">`savePoint`</ph> parameter of the &lt;xref:System.Data.SqlClient.SqlTransaction.Save%2A&gt; method.","pos":[126,356],"source":"       The value in the `transactionName` parameter can be used in later calls to <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> and in the `savePoint` parameter of the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method."},{"content":"You must explicitly commit or roll back the transaction using the &lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt; or &lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt; method.","pos":[363,549],"source":"       You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method."},{"content":"To make sure that the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> transaction management model performs correctly, avoid using other transaction management models, such as the one provided by <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>.","pos":[550,814],"source":" To make sure that the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> default).","pos":[820,1058],"source":"      > [!NOTE] >  After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] default)."},{"content":"This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row.","pos":[1059,1190]},{"content":"To reset the isolation level to the default (READ COMMITTED), execute the <ph id=\"ph1\">[!INCLUDE[tsql](~/add/includes/tsql-md.md)]</ph> SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName&gt; followed immediately by &lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName&gt;.","pos":[1191,1566],"source":" To reset the isolation level to the default (READ COMMITTED), execute the [!INCLUDE[tsql](~/add/includes/tsql-md.md)] SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> followed immediately by <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>."},{"content":"For more information on <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> isolation levels, see \"Isolation Levels in the Database Engine\" in <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> Books Online.","pos":[1567,1787],"source":" For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] isolation levels, see \"Isolation Levels in the Database Engine\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online."},{"content":"For more information on <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> Books Online.","pos":[1794,2028],"source":"       For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  When your query returns a large amount of data and calls <ph id=\"ph2\">`BeginTransaction`</ph>, a &lt;xref:System.Data.SqlClient.SqlException&gt; is thrown because <ph id=\"ph3\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> does not allow parallel transactions when using MARS.","pos":[2034,2300],"source":"      > [!CAUTION] >  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS."},{"content":"To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.","pos":[2301,2425]}]},{"pos":[34157,34216],"content":"The isolation level under which the transaction should run.","needQuote":true,"needEscape":true,"nodes":[{"content":"The isolation level under which the transaction should run.","pos":[0,59]}]},{"pos":[34288,34316],"content":"The name of the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the transaction.","pos":[0,28]}]},{"pos":[34397,34440],"content":"An object representing the new transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object representing the new transaction.","pos":[0,43]}]},{"pos":[34635,34719],"content":"Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).","needQuote":true,"needEscape":true,"nodes":[{"content":"Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).","pos":[0,84]}]},{"pos":[34830,34870],"content":"Parallel transactions are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Parallel transactions are not supported.","pos":[0,40]}]},{"pos":[35315,35413],"content":"Changes the current database for an open <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Changes the current database for an open <xref href=\"System.Data.SqlClient.SqlConnection\"></xref>."},{"pos":[35425,35613],"content":"The value supplied in the `database` parameter must be a valid database name. The `database` parameter cannot contain a null value, an empty string, or a string with only blank characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value supplied in the <ph id=\"ph1\">`database`</ph> parameter must be a valid database name.","pos":[0,77],"source":"The value supplied in the `database` parameter must be a valid database name."},{"content":"The <ph id=\"ph1\">`database`</ph> parameter cannot contain a null value, an empty string, or a string with only blank characters.","pos":[78,188],"source":" The `database` parameter cannot contain a null value, an empty string, or a string with only blank characters."}]},{"pos":[36166,36230],"content":"The name of the database to use instead of the current database.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the database to use instead of the current database.","pos":[0,64]}]},{"pos":[36403,36434],"content":"The database name is not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The database name is not valid.","pos":[0,31]}]},{"pos":[36545,36572],"content":"The connection is not open.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is not open.","pos":[0,27]}]},{"pos":[36687,36714],"content":"Cannot change the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cannot change the database.","pos":[0,27]}]},{"pos":[37208,37364],"content":"Changes the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> password for the user indicated in the connection string to the supplied new password.","needQuote":true,"needEscape":true,"source":"Changes the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] password for the user indicated in the connection string to the supplied new password."},{"pos":[37377,39060],"content":"When you are using [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] on Windows Server, developers can take advantage of functionality that lets the client application supply both the current and a new password in order to change the existing password. Applications can implement functionality such as prompting the user for a new password during initial login if the old one has expired, and this operation can be completed without administrator intervention.       The ChangePassword method changes the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] password for the user indicated in the supplied `connectionString` parameter to the value supplied in the `newPassword` parameter. If the connection string includes the option for integrated security (that is, \"Integrated Security=True\" or the equivalent), an exception is thrown.       To determine that the password has expired, calling the <xref:System.Data.SqlClient.SqlConnection.Open%2A> method raises a <xref:System.Data.SqlClient.SqlException>. In order to indicate that the password that is contained within the connection string must be reset, the <xref:System.Data.SqlClient.SqlException.Number%2A> property for the exception contains the status value 18487 or 18488. The first value (18487) indicates that the password has expired and the second (18488) indicates that the password must be reset before logging in.       This method opens its own connection to the server, requests the password change, and closes the connection as soon as it has completed. This connection is not retrieved from, nor returned to, the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] connection pool.","needQuote":false,"needEscape":true,"nodes":[{"content":"When you are using <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> on Windows Server, developers can take advantage of functionality that lets the client application supply both the current and a new password in order to change the existing password.","pos":[0,260],"source":"When you are using [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] on Windows Server, developers can take advantage of functionality that lets the client application supply both the current and a new password in order to change the existing password."},{"content":"Applications can implement functionality such as prompting the user for a new password during initial login if the old one has expired, and this operation can be completed without administrator intervention.","pos":[261,468]},{"content":"The ChangePassword method changes the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> password for the user indicated in the supplied <ph id=\"ph2\">`connectionString`</ph> parameter to the value supplied in the <ph id=\"ph3\">`newPassword`</ph> parameter.","pos":[475,701],"source":"       The ChangePassword method changes the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] password for the user indicated in the supplied `connectionString` parameter to the value supplied in the `newPassword` parameter."},{"content":"If the connection string includes the option for integrated security (that is, \"Integrated Security=True\" or the equivalent), an exception is thrown.","pos":[702,851]},{"content":"To determine that the password has expired, calling the &lt;xref:System.Data.SqlClient.SqlConnection.Open%2A&gt; method raises a &lt;xref:System.Data.SqlClient.SqlException&gt;.","pos":[858,1023],"source":"       To determine that the password has expired, calling the <xref:System.Data.SqlClient.SqlConnection.Open%2A> method raises a <xref:System.Data.SqlClient.SqlException>."},{"content":"In order to indicate that the password that is contained within the connection string must be reset, the &lt;xref:System.Data.SqlClient.SqlException.Number%2A&gt; property for the exception contains the status value 18487 or 18488.","pos":[1024,1249],"source":" In order to indicate that the password that is contained within the connection string must be reset, the <xref:System.Data.SqlClient.SqlException.Number%2A> property for the exception contains the status value 18487 or 18488."},{"content":"The first value (18487) indicates that the password has expired and the second (18488) indicates that the password must be reset before logging in.","pos":[1250,1397]},{"content":"This method opens its own connection to the server, requests the password change, and closes the connection as soon as it has completed.","pos":[1404,1540]},{"content":"This connection is not retrieved from, nor returned to, the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> connection pool.","pos":[1541,1675],"source":" This connection is not retrieved from, nor returned to, the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] connection pool."}]},{"pos":[40245,40412],"content":"The connection string that contains enough information to connect to the server that you want. The connection string must contain the user ID and the current password.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection string that contains enough information to connect to the server that you want. The connection string must contain the user ID and the current password.","pos":[0,167],"nodes":[{"content":"The connection string that contains enough information to connect to the server that you want.","pos":[0,94]},{"content":"The connection string must contain the user ID and the current password.","pos":[95,167]}]}]},{"pos":[40480,40658],"content":"The new password to set. This password must comply with any password security policy set on the server, including minimum length, requirements for specific characters, and so on.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new password to set. This password must comply with any password security policy set on the server, including minimum length, requirements for specific characters, and so on.","pos":[0,178],"nodes":[{"content":"The new password to set.","pos":[0,24]},{"content":"This password must comply with any password security policy set on the server, including minimum length, requirements for specific characters, and so on.","pos":[25,178]}]}]},{"pos":[40832,40973],"content":"The connection string includes the option to use integrated security.       Or       The <code>newPassword</code> exceeds 128 characters.","needQuote":false,"needEscape":true,"nodes":[{"content":"The connection string includes the option to use integrated security.","pos":[0,69]},{"content":"Or       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">newPassword</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 128 characters.","pos":[76,137],"source":"       Or       The <code>newPassword</code> exceeds 128 characters."}]},{"pos":[41077,41168],"content":"Either the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">connectionString</ph><ept id=\"p1\">&lt;/code&gt;</ept> or the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">newPassword</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is null.","needQuote":true,"needEscape":true,"source":"Either the <code>connectionString</code> or the <code>newPassword</code> parameter is null."},{"pos":[41824,41997],"content":"Changes the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> password for the user indicated in the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCredential\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Changes the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] password for the user indicated in the <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object."},{"pos":[42267,42781],"content":"The connection string that contains enough information to connect to a server. The connection string should not use any of the following connection string keywords: <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref>, <xref uid=\"langword_csharp_UserId\" name=\"UserId\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Password\" name=\"Password\" href=\"\"></xref>; or <xref uid=\"langword_csharp_ContextConnection = true\" name=\"ContextConnection = true\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The connection string that contains enough information to connect to a server.","pos":[0,78]},{"content":"The connection string should not use any of the following connection string keywords: <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_UserId\" name=\"UserId\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Password\" name=\"Password\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; or <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_ContextConnection = true\" name=\"ContextConnection = true\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[79,514],"source":" The connection string should not use any of the following connection string keywords: <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref>, <xref uid=\"langword_csharp_UserId\" name=\"UserId\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Password\" name=\"Password\" href=\"\"></xref>; or <xref uid=\"langword_csharp_ContextConnection = true\" name=\"ContextConnection = true\" href=\"\"></xref>."}]},{"pos":[42871,42937],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCredential\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object."},{"pos":[43026,43236],"content":"The new password. `newSecurePassword` must be read only. The password must also comply with any password security policy set on the server (for example, minimum length and requirements for specific characters).","needQuote":true,"needEscape":true,"nodes":[{"content":"The new password.","pos":[0,17]},{"content":"<ph id=\"ph1\">`newSecurePassword`</ph> must be read only.","pos":[18,56],"source":"`newSecurePassword` must be read only."},{"content":"The password must also comply with any password security policy set on the server (for example, minimum length and requirements for specific characters).","pos":[57,210]}]},{"pos":[43410,44066],"content":"1.  The connection string contains any combination of <xref uid=\"langword_csharp_UserId\" name=\"UserId\" href=\"\"></xref>, <xref uid=\"langword_csharp_Password\" name=\"Password\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Integrated Security=true\" name=\"Integrated Security=true\" href=\"\"></xref>.      2.  The connection string contains <xref uid=\"langword_csharp_Context Connection=true\" name=\"Context Connection=true\" href=\"\"></xref>.      3.  <code>newSecurePassword</code> is greater than 128 characters.      4.  <code>newSecurePassword</code> is not read only.      5.  <code>newSecurePassword</code> is an empty string.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">1.</ph>  The connection string contains any combination of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_UserId\" name=\"UserId\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Password\" name=\"Password\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Integrated Security=true\" name=\"Integrated Security=true\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,294],"source":"1.  The connection string contains any combination of <xref uid=\"langword_csharp_UserId\" name=\"UserId\" href=\"\"></xref>, <xref uid=\"langword_csharp_Password\" name=\"Password\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Integrated Security=true\" name=\"Integrated Security=true\" href=\"\"></xref>."},{"content":"2.","pos":[300,302]},{"content":"The connection string contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Context Connection=true\" name=\"Context Connection=true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[304,434],"source":"  The connection string contains <xref uid=\"langword_csharp_Context Connection=true\" name=\"Context Connection=true\" href=\"\"></xref>."},{"content":"3.","pos":[440,442]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">newSecurePassword</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 128 characters.","pos":[444,506],"source":"<code>newSecurePassword</code> is greater than 128 characters."},{"content":"4.","pos":[512,514]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">newSecurePassword</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not read only.","pos":[516,564],"source":"<code>newSecurePassword</code> is not read only."},{"content":"5.","pos":[570,572]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">newSecurePassword</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an empty string.","pos":[574,624],"source":"<code>newSecurePassword</code> is an empty string."}]},{"pos":[44170,44292],"content":"One of the parameters (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">connectionString</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">credential</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">newSecurePassword</ph><ept id=\"p3\">&lt;/code&gt;</ept>) is null.","needQuote":true,"needEscape":true,"source":"One of the parameters (<code>connectionString</code>, <code>credential</code>, or <code>newSecurePassword</code>) is null."},{"pos":[44684,44712],"content":"Empties the connection pool.","needQuote":true,"needEscape":true,"nodes":[{"content":"Empties the connection pool.","pos":[0,28]}]},{"pos":[44724,45003],"content":"ClearAllPools resets (or empties) the connection pool. If there are connections in use at the time of the call, they are marked appropriately and will be discarded (instead of being returned to the pool) when <xref:System.Data.SqlClient.SqlConnection.Close%2A> is called on them.","needQuote":true,"needEscape":true,"nodes":[{"content":"ClearAllPools resets (or empties) the connection pool. If there are connections in use at the time of the call, they are marked appropriately and will be discarded (instead of being returned to the pool) when <xref:System.Data.SqlClient.SqlConnection.Close%2A> is called on them.","pos":[0,279],"nodes":[{"content":"ClearAllPools resets (or empties) the connection pool.","pos":[0,54]},{"content":"If there are connections in use at the time of the call, they are marked appropriately and will be discarded (instead of being returned to the pool) when &lt;xref:System.Data.SqlClient.SqlConnection.Close%2A&gt; is called on them.","pos":[55,279],"source":" If there are connections in use at the time of the call, they are marked appropriately and will be discarded (instead of being returned to the pool) when <xref:System.Data.SqlClient.SqlConnection.Close%2A> is called on them."}]}]},{"pos":[45647,45716],"content":"Empties the connection pool associated with the specified connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Empties the connection pool associated with the specified connection.","pos":[0,69]}]},{"pos":[45728,46061],"content":"ClearPool clears the connection pool that is associated with the `connection`. If additional connections associated with `connection` are in use at the time of the call, they are marked appropriately and are discarded (instead of being returned to the pool) when <xref:System.Data.SqlClient.SqlConnection.Close%2A> is called on them.","needQuote":true,"needEscape":true,"nodes":[{"content":"ClearPool clears the connection pool that is associated with the <ph id=\"ph1\">`connection`</ph>.","pos":[0,78],"source":"ClearPool clears the connection pool that is associated with the `connection`."},{"content":"If additional connections associated with <ph id=\"ph1\">`connection`</ph> are in use at the time of the call, they are marked appropriately and are discarded (instead of being returned to the pool) when &lt;xref:System.Data.SqlClient.SqlConnection.Close%2A&gt; is called on them.","pos":[79,333],"source":" If additional connections associated with `connection` are in use at the time of the call, they are marked appropriately and are discarded (instead of being returned to the pool) when <xref:System.Data.SqlClient.SqlConnection.Close%2A> is called on them."}]},{"pos":[46268,46357],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be cleared from the pool.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> to be cleared from the pool."},{"pos":[46846,46957],"content":"The connection ID of the most recent connection attempt, regardless of whether the attempt succeeded or failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection ID of the most recent connection attempt, regardless of whether the attempt succeeded or failed.","pos":[0,111]}]},{"pos":[46970,47712],"content":"ClientConnectionId works regardless of which version of the server you connect to, but extended events logs and entry on connectivity ring buffer errors will not be present in [!INCLUDE[sskatmai_r2](~/add/includes/ajax-current-ext-md.md)] and earlier.       You can locate the connection ID in the extended events log to see if the failure was on the server if the extended event for logging connection ID is enabled. You can also locate the connection ID in the connection ring buffer ([Connectivity troubleshooting in SQL Server 2008 with the Connectivity Ring Buffer](http://go.microsoft.com/fwlink/?LinkId=207752)) for certain connection errors. If the connection ID is not in the connection ring buffer, you can assume a network error.","needQuote":false,"needEscape":true,"nodes":[{"content":"ClientConnectionId works regardless of which version of the server you connect to, but extended events logs and entry on connectivity ring buffer errors will not be present in <ph id=\"ph1\">[!INCLUDE[sskatmai_r2](~/add/includes/ajax-current-ext-md.md)]</ph> and earlier.","pos":[0,251],"source":"ClientConnectionId works regardless of which version of the server you connect to, but extended events logs and entry on connectivity ring buffer errors will not be present in [!INCLUDE[sskatmai_r2](~/add/includes/ajax-current-ext-md.md)] and earlier."},{"content":"You can locate the connection ID in the extended events log to see if the failure was on the server if the extended event for logging connection ID is enabled.","pos":[258,417]},{"content":"You can also locate the connection ID in the connection ring buffer (<bpt id=\"p1\">[</bpt>Connectivity troubleshooting in SQL Server 2008 with the Connectivity Ring Buffer<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=207752)</ept>) for certain connection errors.","pos":[418,649],"source":" You can also locate the connection ID in the connection ring buffer ([Connectivity troubleshooting in SQL Server 2008 with the Connectivity Ring Buffer](http://go.microsoft.com/fwlink/?LinkId=207752)) for certain connection errors."},{"content":"If the connection ID is not in the connection ring buffer, you can assume a network error.","pos":[650,740]}]},{"pos":[47832,47888],"content":"The connection ID of the most recent connection attempt.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection ID of the most recent connection attempt.","pos":[0,56]}]},{"pos":[48325,48424],"content":"Closes the connection to the database. This is the preferred method of closing any open connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the connection to the database. This is the preferred method of closing any open connection.","pos":[0,99],"nodes":[{"content":"Closes the connection to the database.","pos":[0,38]},{"content":"This is the preferred method of closing any open connection.","pos":[39,99]}]}]},{"pos":[48437,50490],"content":"The Close method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.      > [!NOTE] >  Pending transactions started using [!INCLUDE[tsql](~/add/includes/tsql-md.md)] or <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> are automatically rolled back when the connection is reset if connection pooling is enabled. If connection pooling is off, the transaction is rolled back after `SqlConnection.Close` is called. Transactions started through <xref:System.Transactions> are controlled through the `System.Transactions` infrastructure, and are not affected by `SqlConnection.Close`.       An application can call Close more than one time. No exception is generated.       If the <xref:System.Data.SqlClient.SqlConnection> goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling `Close` or `Dispose`. `Close` and `Dispose` are functionally equivalent. If the connection pooling value `Pooling` is set to `true` or `yes`, the underlying connection is returned back to the connection pool. On the other hand, if `Pooling` is set to `false` or `no`, the underlying connection to the server is closed.      > [!NOTE] >  Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see [SQL Server Connection Pooling (ADO.NET)](~/add/includes/ajax-current-ext-md.md).      > [!CAUTION] >  Do not call `Close` or `Dispose` on a Connection, a DataReader, or any other managed object in the `Finalize` method of your class. In a finalizer, you should only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a `Finalize` method in your class definition. For more information, see [Garbage Collection](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The Close method rolls back any pending transactions.","pos":[0,53]},{"content":"It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.","pos":[54,169]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Pending transactions started using <ph id=\"ph2\">[!INCLUDE[tsql](~/add/includes/tsql-md.md)]</ph> or &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt; are automatically rolled back when the connection is reset if connection pooling is enabled.","pos":[175,425],"source":"      > [!NOTE] >  Pending transactions started using [!INCLUDE[tsql](~/add/includes/tsql-md.md)] or <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> are automatically rolled back when the connection is reset if connection pooling is enabled."},{"content":"If connection pooling is off, the transaction is rolled back after <ph id=\"ph1\">`SqlConnection.Close`</ph> is called.","pos":[426,525],"source":" If connection pooling is off, the transaction is rolled back after `SqlConnection.Close` is called."},{"content":"Transactions started through &lt;xref:System.Transactions&gt; are controlled through the <ph id=\"ph1\">`System.Transactions`</ph> infrastructure, and are not affected by <ph id=\"ph2\">`SqlConnection.Close`</ph>.","pos":[526,693],"source":" Transactions started through <xref:System.Transactions> are controlled through the `System.Transactions` infrastructure, and are not affected by `SqlConnection.Close`."},{"content":"An application can call Close more than one time.","pos":[700,749]},{"content":"No exception is generated.","pos":[750,776]},{"content":"If the &lt;xref:System.Data.SqlClient.SqlConnection&gt; goes out of scope, it won't be closed.","pos":[783,871],"source":"       If the <xref:System.Data.SqlClient.SqlConnection> goes out of scope, it won't be closed."},{"content":"Therefore, you must explicitly close the connection by calling <ph id=\"ph1\">`Close`</ph> or <ph id=\"ph2\">`Dispose`</ph>.","pos":[872,956],"source":" Therefore, you must explicitly close the connection by calling `Close` or `Dispose`."},{"content":"<ph id=\"ph1\">`Close`</ph> and <ph id=\"ph2\">`Dispose`</ph> are functionally equivalent.","pos":[957,1007],"source":"`Close` and `Dispose` are functionally equivalent."},{"content":"If the connection pooling value <ph id=\"ph1\">`Pooling`</ph> is set to <ph id=\"ph2\">`true`</ph> or <ph id=\"ph3\">`yes`</ph>, the underlying connection is returned back to the connection pool.","pos":[1008,1143],"source":" If the connection pooling value `Pooling` is set to `true` or `yes`, the underlying connection is returned back to the connection pool."},{"content":"On the other hand, if <ph id=\"ph1\">`Pooling`</ph> is set to <ph id=\"ph2\">`false`</ph> or <ph id=\"ph3\">`no`</ph>, the underlying connection to the server is closed.","pos":[1144,1253],"source":" On the other hand, if `Pooling` is set to `false` or `no`, the underlying connection to the server is closed."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool.","pos":[1259,1488],"source":"      > [!NOTE] >  Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>SQL Server Connection Pooling (ADO.NET)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1489,1596],"source":" For more information, see [SQL Server Connection Pooling (ADO.NET)](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  Do not call <ph id=\"ph2\">`Close`</ph> or <ph id=\"ph3\">`Dispose`</ph> on a Connection, a DataReader, or any other managed object in the <ph id=\"ph4\">`Finalize`</ph> method of your class.","pos":[1602,1749],"source":"      > [!CAUTION] >  Do not call `Close` or `Dispose` on a Connection, a DataReader, or any other managed object in the `Finalize` method of your class."},{"content":"In a finalizer, you should only release unmanaged resources that your class owns directly.","pos":[1750,1840]},{"content":"If your class does not own any unmanaged resources, do not include a <ph id=\"ph1\">`Finalize`</ph> method in your class definition.","pos":[1841,1953],"source":" If your class does not own any unmanaged resources, do not include a `Finalize` method in your class definition."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Garbage Collection<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1954,2040],"source":" For more information, see [Garbage Collection](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[51203,51273],"content":"The connection-level error that occurred while opening the connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection-level error that occurred while opening the connection.","pos":[0,70]}]},{"pos":[51731,51972],"content":"Gets or sets the time-to-live for column encryption key entries in the column encryption key cache for the [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx) feature. The default value is 2 hours. 0 means no caching at all.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the time-to-live for column encryption key entries in the column encryption key cache for the <bpt id=\"p1\">[</bpt>Always Encrypted<ept id=\"p1\">](https://msdn.microsoft.com/library/mt163865.aspx)</ept> feature.","pos":[0,184],"source":"Gets or sets the time-to-live for column encryption key entries in the column encryption key cache for the [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx) feature."},{"content":"The default value is 2 hours.","pos":[185,214]},{"content":"0 means no caching at all.","pos":[215,241]}]},{"pos":[52120,52138],"content":"The time interval.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time interval.","pos":[0,18]}]},{"pos":[52760,53016],"content":"Gets or sets a value that indicates whether query metadata caching is enabled (true) or not (false) for parameterized queries running against [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx) enabled databases. The default value is true.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether query metadata caching is enabled (true) or not (false) for parameterized queries running against <bpt id=\"p1\">[</bpt>Always Encrypted<ept id=\"p1\">](https://msdn.microsoft.com/library/mt163865.aspx)</ept> enabled databases.","pos":[0,229],"source":"Gets or sets a value that indicates whether query metadata caching is enabled (true) or not (false) for parameterized queries running against [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx) enabled databases."},{"content":"The default value is true.","pos":[230,256]}]},{"pos":[53029,53613],"content":"For parameterized queries, SqlClient makes a roundtrip to SQL Server for parameter metadata, to see which parameter it needs to encrypt and how (which keys and algorithms should be used). If the application calls the same query multiple times, an extra roundtrip is made to the server each time, which degrades application performance.       With **ColumnEncryptionQueryMetadataCacheEnabled** set to true, if the same query is called multiple times, the roundtrip to the server will be made only once. The cache has a non-configurable Max size parameter that is set to 2000 queries.","needQuote":false,"needEscape":true,"nodes":[{"content":"For parameterized queries, SqlClient makes a roundtrip to SQL Server for parameter metadata, to see which parameter it needs to encrypt and how (which keys and algorithms should be used).","pos":[0,187]},{"content":"If the application calls the same query multiple times, an extra roundtrip is made to the server each time, which degrades application performance.","pos":[188,335]},{"content":"With <bpt id=\"p1\">**</bpt>ColumnEncryptionQueryMetadataCacheEnabled<ept id=\"p1\">**</ept> set to true, if the same query is called multiple times, the roundtrip to the server will be made only once.","pos":[342,501],"source":"       With **ColumnEncryptionQueryMetadataCacheEnabled** set to true, if the same query is called multiple times, the roundtrip to the server will be made only once."},{"content":"The cache has a non-configurable Max size parameter that is set to 2000 queries.","pos":[502,582]}]},{"pos":[53771,53859],"content":"Returns true if query metadata caching is enabled; otherwise false. true is the default.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns true if query metadata caching is enabled; otherwise false. true is the default.","pos":[0,88],"nodes":[{"content":"Returns true if query metadata caching is enabled; otherwise false.","pos":[0,67]},{"content":"true is the default.","pos":[68,88]}]}]},{"pos":[54475,54844],"content":"Allows you to set a list of trusted key paths for a database server. If while processing an application query the driver receives a key path that is not on the list, the query will fail. This property provides additional protection against security attacks that involve a compromised SQL Server providing fake key paths, which may lead to leaking key store credentials.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows you to set a list of trusted key paths for a database server. If while processing an application query the driver receives a key path that is not on the list, the query will fail. This property provides additional protection against security attacks that involve a compromised SQL Server providing fake key paths, which may lead to leaking key store credentials.","pos":[0,369],"nodes":[{"content":"Allows you to set a list of trusted key paths for a database server.","pos":[0,68]},{"content":"If while processing an application query the driver receives a key path that is not on the list, the query will fail.","pos":[69,186]},{"content":"This property provides additional protection against security attacks that involve a compromised SQL Server providing fake key paths, which may lead to leaking key store credentials.","pos":[187,369]}]}]},{"pos":[55162,55225],"content":"The list of trusted master key paths for the column encryption.","needQuote":true,"needEscape":true,"nodes":[{"content":"The list of trusted master key paths for the column encryption.","pos":[0,63]}]},{"pos":[55732,55838],"content":"Gets or sets the string used to open a <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> database.","needQuote":true,"needEscape":true,"source":"Gets or sets the string used to open a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database."},{"pos":[55851,61773],"content":"The ConnectionString is similar to an OLE DB connection string, but is not identical. Unlike OLE DB or ADO, the connection string that is returned is the same as the user-set ConnectionString, minus security information if the Persist Security Info value is set to `false` (default). The [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not persist or return the password in a connection string unless you set Persist Security Info to `true`.       You can use the ConnectionString property to connect to a database. The following example illustrates a typical connection string.      ```   \"Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)\"   ```       Use the new <xref:System.Data.SqlClient.SqlConnectionStringBuilder> to construct valid connection strings at run time. For more information, see [Connection String Builders](~/add/includes/ajax-current-ext-md.md).       The ConnectionString property can be set only when the connection is closed. Many of the connection string values have corresponding read-only properties. When the connection string is set, these properties are updated, except when an error is detected. In this case, none of the properties are updated. <xref:System.Data.SqlClient.SqlConnection> properties return only those settings that are contained in the ConnectionString.       To connect to a local computer, specify \"(local)\" for the server. If a server name is not specified, a connection will be attempted to the default instance on the local computer.       Resetting the ConnectionString on a closed connection resets all connection string values (and related properties) including the password. For example, if you set a connection string that includes \"Database= AdventureWorks\", and then reset the connection string to \"Data Source=myserver;Integrated Security=true\", the <xref:System.Data.SqlClient.SqlConnection.Database%2A> property is no longer set to \"AdventureWorks\".       The connection string is parsed immediately after being set. If errors in syntax are found when parsing, a runtime exception, such as <xref:System.ArgumentException>, is generated. Other errors can be found only when an attempt is made to open the connection.       The basic format of a connection string includes a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotation marks. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotation marks. The single quotation mark is also useful if the value starts with a double-quote character. Conversely, the double quotation mark can be used if the value starts with a single quotation mark. If the value contains both single-quote and double-quote characters, the quotation mark character used to enclose the value must be doubled every time it occurs within the value.       To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotation marks or double quotation marks. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotation marks. However, spaces within a string literal keyword or value are preserved. Single or double quotation marks may be used within a connection string without using delimiters (for example, Data Source= my'Server or Data Source= my\"Server), unless a quotation mark character is the first or last character in the value.       Keywords are not case sensitive.       The following table lists the valid names for keyword values within the ConnectionString.        The following list contains the valid names for connection pooling values within the ConnectionString. For more information, see [SQL Server Connection Pooling (ADO.NET)](~/add/includes/ajax-current-ext-md.md).      -   Connection Lifetime (or Load Balance Timeout)      -   Enlist      -   Max Pool Size      -   Min Pool Size      -   Pooling       When you are setting keyword or connection pooling values that require a Boolean value, you can use 'yes' instead of 'true', and 'no' instead of 'false'. Integer values are represented as strings.      > [!NOTE] >  The [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] uses its own protocol to communicate with [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]. Therefore, it does not support the use of an ODBC data source name (DSN) when connecting to [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] because it does not add an ODBC layer.      > [!NOTE] >  Universal data link (UDL) files are not supported for the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].      > [!CAUTION] >  In this release, the application should use caution when constructing a connection string based on user input (for example when retrieving user ID and password information from a dialog box, and appending it to the connection string). The application should make sure that a user cannot embed additional connection string parameters in these values (for example, entering a password as \"validpassword;database=somedb\" in an attempt to attach to a different database). If you need to construct connection strings based on user input, use the new <xref:System.Data.SqlClient.SqlConnectionStringBuilder>, which validates the connection string and helps to eliminate this problem. See [Connection String Builders](../Topic/Connection%20String%20Builders.md) for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ConnectionString is similar to an OLE DB connection string, but is not identical.","pos":[0,85]},{"content":"Unlike OLE DB or ADO, the connection string that is returned is the same as the user-set ConnectionString, minus security information if the Persist Security Info value is set to <ph id=\"ph1\">`false`</ph> (default).","pos":[86,283],"source":" Unlike OLE DB or ADO, the connection string that is returned is the same as the user-set ConnectionString, minus security information if the Persist Security Info value is set to `false` (default)."},{"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> does not persist or return the password in a connection string unless you set Persist Security Info to <ph id=\"ph3\">`true`</ph>.","pos":[284,532],"source":" The [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not persist or return the password in a connection string unless you set Persist Security Info to `true`."},{"content":"You can use the ConnectionString property to connect to a database.","pos":[539,606]},{"content":"The following example illustrates a typical connection string.","pos":[607,669]},{"content":"<ph id=\"ph1\">```   \"Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)\"   ```</ph>       Use the new &lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder&gt; to construct valid connection strings at run time.","pos":[675,907],"source":"```   \"Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)\"   ```       Use the new <xref:System.Data.SqlClient.SqlConnectionStringBuilder> to construct valid connection strings at run time."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Connection String Builders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[908,1002],"source":" For more information, see [Connection String Builders](~/add/includes/ajax-current-ext-md.md)."},{"content":"The ConnectionString property can be set only when the connection is closed.","pos":[1009,1085]},{"content":"Many of the connection string values have corresponding read-only properties.","pos":[1086,1163]},{"content":"When the connection string is set, these properties are updated, except when an error is detected.","pos":[1164,1262]},{"content":"In this case, none of the properties are updated.","pos":[1263,1312]},{"content":"&lt;xref:System.Data.SqlClient.SqlConnection&gt; properties return only those settings that are contained in the ConnectionString.","pos":[1313,1437],"source":" <xref:System.Data.SqlClient.SqlConnection> properties return only those settings that are contained in the ConnectionString."},{"content":"To connect to a local computer, specify \"(local)\" for the server.","pos":[1444,1509]},{"content":"If a server name is not specified, a connection will be attempted to the default instance on the local computer.","pos":[1510,1622]},{"content":"Resetting the ConnectionString on a closed connection resets all connection string values (and related properties) including the password.","pos":[1629,1767]},{"content":"For example, if you set a connection string that includes \"Database= AdventureWorks\", and then reset the connection string to \"Data Source=myserver;Integrated Security=true\", the &lt;xref:System.Data.SqlClient.SqlConnection.Database%2A&gt; property is no longer set to \"AdventureWorks\".","pos":[1768,2048],"source":" For example, if you set a connection string that includes \"Database= AdventureWorks\", and then reset the connection string to \"Data Source=myserver;Integrated Security=true\", the <xref:System.Data.SqlClient.SqlConnection.Database%2A> property is no longer set to \"AdventureWorks\"."},{"content":"The connection string is parsed immediately after being set.","pos":[2055,2115]},{"content":"If errors in syntax are found when parsing, a runtime exception, such as &lt;xref:System.ArgumentException&gt;, is generated.","pos":[2116,2235],"source":" If errors in syntax are found when parsing, a runtime exception, such as <xref:System.ArgumentException>, is generated."},{"content":"Other errors can be found only when an attempt is made to open the connection.","pos":[2236,2314]},{"content":"The basic format of a connection string includes a series of keyword/value pairs separated by semicolons.","pos":[2321,2426]},{"content":"The equal sign (=) connects each keyword and its value.","pos":[2427,2482]},{"content":"To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotation marks.","pos":[2483,2631]},{"content":"If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotation marks.","pos":[2632,2753]},{"content":"The single quotation mark is also useful if the value starts with a double-quote character.","pos":[2754,2845]},{"content":"Conversely, the double quotation mark can be used if the value starts with a single quotation mark.","pos":[2846,2945]},{"content":"If the value contains both single-quote and double-quote characters, the quotation mark character used to enclose the value must be doubled every time it occurs within the value.","pos":[2946,3124]},{"content":"To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotation marks or double quotation marks.","pos":[3131,3278]},{"content":"Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotation marks.","pos":[3279,3405]},{"content":"However, spaces within a string literal keyword or value are preserved.","pos":[3406,3477]},{"content":"Single or double quotation marks may be used within a connection string without using delimiters (for example, Data Source= my'Server or Data Source= my\"Server), unless a quotation mark character is the first or last character in the value.","pos":[3478,3718]},{"content":"Keywords are not case sensitive.","pos":[3725,3757]},{"content":"The following table lists the valid names for keyword values within the ConnectionString.","pos":[3764,3853]},{"content":"The following list contains the valid names for connection pooling values within the ConnectionString.","pos":[3861,3963]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>SQL Server Connection Pooling (ADO.NET)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3964,4071],"source":" For more information, see [SQL Server Connection Pooling (ADO.NET)](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   Connection Lifetime (or Load Balance Timeout)      -   Enlist      -   Max Pool Size      -   Min Pool Size      -   Pooling       When you are setting keyword or connection pooling values that require a Boolean value, you can use 'yes' instead of 'true', and 'no' instead of 'false'.","pos":[4077,4365]},{"content":"Integer values are represented as strings.","pos":[4366,4408]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id=\"ph3\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> uses its own protocol to communicate with <ph id=\"ph4\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>.","pos":[4414,4665],"source":"      > [!NOTE] >  The [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] uses its own protocol to communicate with [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."},{"content":"Therefore, it does not support the use of an ODBC data source name (DSN) when connecting to <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> because it does not add an ODBC layer.","pos":[4666,4854],"source":" Therefore, it does not support the use of an ODBC data source name (DSN) when connecting to [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] because it does not add an ODBC layer."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Universal data link (UDL) files are not supported for the <ph id=\"ph2\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id=\"ph3\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>.","pos":[4860,5065],"source":"      > [!NOTE] >  Universal data link (UDL) files are not supported for the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  In this release, the application should use caution when constructing a connection string based on user input (for example when retrieving user ID and password information from a dialog box, and appending it to the connection string).","pos":[5071,5321],"source":"      > [!CAUTION] >  In this release, the application should use caution when constructing a connection string based on user input (for example when retrieving user ID and password information from a dialog box, and appending it to the connection string)."},{"content":"The application should make sure that a user cannot embed additional connection string parameters in these values (for example, entering a password as \"validpassword;database=somedb\" in an attempt to attach to a different database).","pos":[5322,5554]},{"content":"If you need to construct connection strings based on user input, use the new &lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder&gt;, which validates the connection string and helps to eliminate this problem.","pos":[5555,5763],"source":" If you need to construct connection strings based on user input, use the new <xref:System.Data.SqlClient.SqlConnectionStringBuilder>, which validates the connection string and helps to eliminate this problem."},{"content":"See <bpt id=\"p1\">[</bpt>Connection String Builders<ept id=\"p1\">](../Topic/Connection%20String%20Builders.md)</ept> for more information.","pos":[5764,5862],"source":" See [Connection String Builders](../Topic/Connection%20String%20Builders.md) for more information."}]},{"pos":[62342,62506],"content":"The connection string that includes the source database name, and other parameters needed to establish the initial connection. The default value is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection string that includes the source database name, and other parameters needed to establish the initial connection. The default value is an empty string.","pos":[0,164],"nodes":[{"content":"The connection string that includes the source database name, and other parameters needed to establish the initial connection.","pos":[0,126]},{"content":"The default value is an empty string.","pos":[127,164]}]}]},{"pos":[62681,62801],"content":"An invalid connection string argument has been supplied, or a required connection string argument has not been supplied.","needQuote":true,"needEscape":true,"nodes":[{"content":"An invalid connection string argument has been supplied, or a required connection string argument has not been supplied.","pos":[0,120]}]},{"pos":[63209,63325],"content":"Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.","pos":[0,116]}]},{"pos":[63337,63662],"content":"You can set the amount of time a connection waits to time out by using the `Connect``Timeout` or `Connection Timeout` keywords in the connection string. A value of 0 indicates no limit, and should be avoided in a <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> because an attempt to connect waits indefinitely.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can set the amount of time a connection waits to time out by using the <ph id=\"ph1\">`Connect``Timeout`</ph> or <ph id=\"ph2\">`Connection Timeout`</ph> keywords in the connection string.","pos":[0,152],"source":"You can set the amount of time a connection waits to time out by using the `Connect``Timeout` or `Connection Timeout` keywords in the connection string."},{"content":"A value of 0 indicates no limit, and should be avoided in a &lt;xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A&gt; because an attempt to connect waits indefinitely.","pos":[153,325],"source":" A value of 0 indicates no limit, and should be avoided in a <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> because an attempt to connect waits indefinitely."}]},{"pos":[64325,64413],"content":"The time (in seconds) to wait for a connection to open. The default value is 15 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time (in seconds) to wait for a connection to open. The default value is 15 seconds.","pos":[0,88],"nodes":[{"content":"The time (in seconds) to wait for a connection to open.","pos":[0,55]},{"content":"The default value is 15 seconds.","pos":[56,88]}]}]},{"pos":[64589,64618],"content":"The value set is less than 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value set is less than 0.","pos":[0,29]}]},{"pos":[65010,65170],"content":"Creates and returns a <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object associated with the <bpt id=\"p2\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates and returns a <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> object associated with the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref>."},{"pos":[65595,65658],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> object."},{"pos":[66311,66323],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[66778,66879],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCredential\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for this connection.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object for this connection."},{"pos":[66892,67487],"content":"`Persist Security Info = true` is required to get the value of the <xref:System.Data.SqlClient.SqlCredential> object with Credential.       The default value of Credential is null.       An <xref:System.InvalidOperationException> exception will be raised:      -   If Credential is set on an open connection.      -   If Credential is set when `Context Connection=true`.      -   If Credential is set when `Integrated Security = true`.      -   If Credential is set when the connection string uses `Password`.      -   If Credential is set when the connection string uses `UserID`.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`Persist Security Info = true`</ph> is required to get the value of the &lt;xref:System.Data.SqlClient.SqlCredential&gt; object with Credential.","pos":[0,133],"source":"`Persist Security Info = true` is required to get the value of the <xref:System.Data.SqlClient.SqlCredential> object with Credential."},{"content":"The default value of Credential is null.","pos":[140,180]},{"content":"An &lt;xref:System.InvalidOperationException&gt; exception will be raised:      -   If Credential is set on an open connection.","pos":[187,308],"source":"       An <xref:System.InvalidOperationException> exception will be raised:      -   If Credential is set on an open connection."},{"content":"-   If Credential is set when <ph id=\"ph1\">`Context Connection=true`</ph>.","pos":[314,370],"source":"      -   If Credential is set when `Context Connection=true`."},{"content":"-   If Credential is set when <ph id=\"ph1\">`Integrated Security = true`</ph>.","pos":[376,435],"source":"      -   If Credential is set when `Integrated Security = true`."},{"content":"-   If Credential is set when the connection string uses <ph id=\"ph1\">`Password`</ph>.","pos":[441,509],"source":"      -   If Credential is set when the connection string uses `Password`."},{"content":"-   If Credential is set when the connection string uses <ph id=\"ph1\">`UserID`</ph>.","pos":[515,581],"source":"      -   If Credential is set when the connection string uses `UserID`."}]},{"pos":[67659,67747],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlCredential\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for this connection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object for this connection."},{"pos":[68187,68281],"content":"Gets the name of the current database or the database to be used after a connection is opened.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the current database or the database to be used after a connection is opened.","pos":[0,94]}]},{"pos":[68293,68584],"content":"The Database property updates dynamically. If you change the current database using a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] statement or the <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A> method, an informational message is sent and the property is updated automatically.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Database property updates dynamically.","pos":[0,42]},{"content":"If you change the current database using a <ph id=\"ph1\">[!INCLUDE[tsql](~/add/includes/tsql-md.md)]</ph> statement or the &lt;xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A&gt; method, an informational message is sent and the property is updated automatically.","pos":[43,291],"source":" If you change the current database using a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] statement or the <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A> method, an informational message is sent and the property is updated automatically."}]},{"pos":[69100,69239],"content":"The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.","pos":[0,139],"nodes":[{"content":"The name of the current database or the name of the database to be used after a connection is opened.","pos":[0,101]},{"content":"The default value is an empty string.","pos":[102,139]}]}]},{"pos":[69687,69798],"content":"Gets the name of the instance of <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> to which to connect.","needQuote":true,"needEscape":true,"source":"Gets the name of the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] to which to connect."},{"pos":[70501,70645],"content":"The name of the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] to which to connect. The default value is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the instance of <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> to which to connect.","pos":[0,106],"source":"The name of the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] to which to connect."},{"content":"The default value is an empty string.","pos":[107,144]}]},{"pos":[71305,71317],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[71960,71972],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[72629,72695],"content":"Enlists in the specified transaction as a distributed transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enlists in the specified transaction as a distributed transaction.","pos":[0,66]}]},{"pos":[72708,74351],"content":"You can use the <xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction** for this purpose. For more information, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md).       You can continue to enlist in an existing distributed transaction using the **EnlistDistributedTransaction** method if auto-enlistment is disabled. Enlisting in an existing distributed transaction makes sure that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back.       `EnlistDistributedTransaction` returns an exception if the <xref:System.Data.SqlClient.SqlConnection> has already started a transaction using <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>. However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an <xref:System.Data.SqlClient.SqlCommand> object), **EnlistDistributedTransaction** rolls back the local transaction and enlists in the existing distributed transaction as requested. You do not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can use the &lt;xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A&gt; method to enlist in a distributed transaction.","pos":[0,126],"source":"You can use the <xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> method to enlist in a distributed transaction."},{"content":"Because it enlists a connection in a &lt;xref:System.Transactions.Transaction&gt; instance, <bpt id=\"p1\">**</bpt>EnlistTransaction<ept id=\"p1\">**</ept> takes advantage of functionality available in the &lt;xref:System.Transactions&gt; namespace for managing distributed transactions, making it preferable to <bpt id=\"p2\">**</bpt>EnlistDistributedTransaction<ept id=\"p2\">**</ept> for this purpose.","pos":[127,435],"source":" Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction** for this purpose."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Distributed Transactions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[436,528],"source":" For more information, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md)."},{"content":"You can continue to enlist in an existing distributed transaction using the <bpt id=\"p1\">**</bpt>EnlistDistributedTransaction<ept id=\"p1\">**</ept> method if auto-enlistment is disabled.","pos":[535,682],"source":"       You can continue to enlist in an existing distributed transaction using the **EnlistDistributedTransaction** method if auto-enlistment is disabled."},{"content":"Enlisting in an existing distributed transaction makes sure that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back.","pos":[683,881]},{"content":"<ph id=\"ph1\">`EnlistDistributedTransaction`</ph> returns an exception if the &lt;xref:System.Data.SqlClient.SqlConnection&gt; has already started a transaction using &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;.","pos":[888,1093],"source":"`EnlistDistributedTransaction` returns an exception if the <xref:System.Data.SqlClient.SqlConnection> has already started a transaction using <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>."},{"content":"However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an &lt;xref:System.Data.SqlClient.SqlCommand&gt; object), <bpt id=\"p1\">**</bpt>EnlistDistributedTransaction<ept id=\"p1\">**</ept> rolls back the local transaction and enlists in the existing distributed transaction as requested.","pos":[1094,1431],"source":" However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an <xref:System.Data.SqlClient.SqlCommand> object), **EnlistDistributedTransaction** rolls back the local transaction and enlists in the existing distributed transaction as requested."},{"content":"You do not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;.","pos":[1432,1639],"source":" You do not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>."}]},{"pos":[74579,74685],"content":"A reference to an existing <bpt id=\"p1\">&lt;xref href=\"System.EnterpriseServices.ITransaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which to enlist.","needQuote":true,"needEscape":true,"source":"A reference to an existing <xref href=\"System.EnterpriseServices.ITransaction\"></xref> in which to enlist."},{"pos":[75291,75357],"content":"Enlists in the specified transaction as a distributed transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enlists in the specified transaction as a distributed transaction.","pos":[0,66]}]},{"pos":[75370,76128],"content":"You can use the EnlistTransaction method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction**, which uses a **System.EnterpriseServices.ITransaction** object. It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes. For more information about distributed transactions, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"You can use the EnlistTransaction method to enlist in a distributed transaction.","pos":[0,80]},{"content":"Because it enlists a connection in a &lt;xref:System.Transactions.Transaction&gt; instance, <bpt id=\"p1\">**</bpt>EnlistTransaction<ept id=\"p1\">**</ept> takes advantage of functionality available in the &lt;xref:System.Transactions&gt; namespace for managing distributed transactions, making it preferable to <bpt id=\"p2\">**</bpt>EnlistDistributedTransaction<ept id=\"p2\">**</ept>, which uses a <bpt id=\"p3\">**</bpt>System.EnterpriseServices.ITransaction<ept id=\"p3\">**</ept> object.","pos":[81,436],"source":" Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction**, which uses a **System.EnterpriseServices.ITransaction** object."},{"content":"It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes.","pos":[437,634]},{"content":"For more information about distributed transactions, see <bpt id=\"p1\">[</bpt>Distributed Transactions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[635,758],"source":" For more information about distributed transactions, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[76340,76439],"content":"A reference to an existing <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which to enlist.","needQuote":true,"needEscape":true,"source":"A reference to an existing <xref href=\"System.Transactions.Transaction\"></xref> in which to enlist."},{"pos":[77006,77065],"content":"Gets or sets the FireInfoMessageEventOnUserErrors property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the FireInfoMessageEventOnUserErrors property.","pos":[0,59]}]},{"pos":[77078,78108],"content":"When you set FireInfoMessageEventOnUserErrors to `true`, errors that were previously treated as exceptions are now handled as <xref:System.Data.SqlClient.SqlConnection.InfoMessage> events. All events fire immediately and are handled by the event handler. If is FireInfoMessageEventOnUserErrors is set to `false`, then <xref:System.Data.SqlClient.SqlConnection.InfoMessage> events are handled at the end of the procedure.      > [!NOTE] >  An error with a severity level of 17 or above that causes the server to stop processing the command needs to be handled as an exception. In this case, an exception is thrown regardless of how the error is handled in the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event.       For more information on working with events, see [Connection Events](~/add/includes/ajax-current-ext-md.md). For more information on errors generated by the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] engine, see [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.","needQuote":false,"needEscape":true,"nodes":[{"content":"When you set FireInfoMessageEventOnUserErrors to <ph id=\"ph1\">`true`</ph>, errors that were previously treated as exceptions are now handled as &lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt; events.","pos":[0,188],"source":"When you set FireInfoMessageEventOnUserErrors to `true`, errors that were previously treated as exceptions are now handled as <xref:System.Data.SqlClient.SqlConnection.InfoMessage> events."},{"content":"All events fire immediately and are handled by the event handler.","pos":[189,254]},{"content":"If is FireInfoMessageEventOnUserErrors is set to <ph id=\"ph1\">`false`</ph>, then &lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt; events are handled at the end of the procedure.","pos":[255,420],"source":" If is FireInfoMessageEventOnUserErrors is set to `false`, then <xref:System.Data.SqlClient.SqlConnection.InfoMessage> events are handled at the end of the procedure."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An error with a severity level of 17 or above that causes the server to stop processing the command needs to be handled as an exception.","pos":[426,575],"source":"      > [!NOTE] >  An error with a severity level of 17 or above that causes the server to stop processing the command needs to be handled as an exception."},{"content":"In this case, an exception is thrown regardless of how the error is handled in the &lt;xref:System.Data.SqlClient.SqlConnection.InfoMessage&gt; event.","pos":[576,720],"source":" In this case, an exception is thrown regardless of how the error is handled in the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event."},{"content":"For more information on working with events, see <bpt id=\"p1\">[</bpt>Connection Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[727,835],"source":"       For more information on working with events, see [Connection Events](~/add/includes/ajax-current-ext-md.md)."},{"content":"For more information on errors generated by the <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> engine, see <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> Books Online.","pos":[836,1025],"source":" For more information on errors generated by the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] engine, see [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online."}]},{"pos":[78250,78447],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the FireInfoMessageEventOnUserErrors property has been set; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the FireInfoMessageEventOnUserErrors property has been set; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[78918,79151],"content":"Returns schema information for the data source of this <xref href=\"System.Data.SqlClient.SqlConnection\"></xref>. For more information about scheme, see [SQL Server Schema Collections](http://msdn.microsoft.com/library/ms254969.aspx).","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns schema information for the data source of this <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,112],"source":"Returns schema information for the data source of this <xref href=\"System.Data.SqlClient.SqlConnection\"></xref>."},{"content":"For more information about scheme, see <bpt id=\"p1\">[</bpt>SQL Server Schema Collections<ept id=\"p1\">](http://msdn.microsoft.com/library/ms254969.aspx)</ept>.","pos":[113,233],"source":" For more information about scheme, see [SQL Server Schema Collections](http://msdn.microsoft.com/library/ms254969.aspx)."}]},{"pos":[79311,79389],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains schema information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> that contains schema information."},{"pos":[79885,80044],"content":"Returns schema information for the data source of this <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified string for the schema name.","needQuote":true,"needEscape":true,"source":"Returns schema information for the data source of this <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> using the specified string for the schema name."},{"pos":[80057,91240],"content":"You may need the schema information of the database, tables or columns. This sample:      -   Uses GetSchema to get schema information.      -   Use schema restrictions to get the specified information.      -   Gets schema information of the database, tables, and some columns.       Before you run the sample, you need to create the sample database, using the following [!INCLUDE[tsql](~/add/includes/tsql-md.md)]:      ```   USE [master]   GO      CREATE DATABASE [MySchool]       GO      USE [MySchool]   GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,   [Year] [smallint] NOT NULL,   [Title] [nvarchar](100) NOT NULL,   [Credits] [int] NOT NULL,   [DepartmentID] [int] NOT NULL,    CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED    (   [CourseID] ASC,   [Year] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,   [Name] [nvarchar](50) NOT NULL,   [Budget] [money] NOT NULL,   [StartDate] [datetime] NOT NULL,   [Administrator] [int] NULL,    CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED    (   [DepartmentID] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)      SET IDENTITY_INSERT [dbo].[Department] ON       INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)   SET IDENTITY_INSERT [dbo].[Department] OFF      ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])   REFERENCES [dbo].[Department] ([DepartmentID])   GO   ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]   GO   ```       [How to Get Schema Information from Database](http://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2) has C# and Visual Basic versions of this code sample in a Visual Studio project.      ```   using System;   using System.Data;   using System.Data.SqlClient;      class Program {      static void Main(string[] args) {            using (SqlConnection conn = new SqlConnection(\"Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;\")) {            conn.Open();               // Get the Meta Data for Supported Schema Collections            DataTable metaDataTable = conn.GetSchema(\"MetaDataCollections\");               Console.WriteLine(\"Meta Data for Supported Schema Collections:\");            ShowDataTable(metaDataTable, 25);            Console.WriteLine();               // Get the schema information of Databases in your instance            DataTable databasesSchemaTable = conn.GetSchema(\"Databases\");               Console.WriteLine(\"Schema Information of Databases:\");            ShowDataTable(databasesSchemaTable, 25);            Console.WriteLine();               // First, get schema information of all the tables in current database;            DataTable allTablesSchemaTable = conn.GetSchema(\"Tables\");               Console.WriteLine(\"Schema Information of All Tables:\");            ShowDataTable(allTablesSchemaTable, 20);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Table Type to get             // the specified table(s).            // You can use four restrictions for Table, so you should create a 4 members array.            String[] tableRestrictions = new String[4];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Table Type.             // Now we specify the Table Name of the table what we want to get schema information.            tableRestrictions[2] = \"Course\";               DataTable courseTableSchemaTable = conn.GetSchema(\"Tables\", tableRestrictions);               Console.WriteLine(\"Schema Information of Course Tables:\");            ShowDataTable(courseTableSchemaTable, 20);            Console.WriteLine();               // First, get schema information of all the columns in current database.            DataTable allColumnsSchemaTable = conn.GetSchema(\"Columns\");               Console.WriteLine(\"Schema Information of All Columns:\");            ShowColumns(allColumnsSchemaTable);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).            // You can use four restrictions for Column, so you should create a 4 members array.            String[] columnRestrictions = new String[4];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Column Name.             // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.            columnRestrictions[2] = \"Course\";            columnRestrictions[3] = \"DepartmentID\";               DataTable departmentIDSchemaTable = conn.GetSchema(\"Columns\", columnRestrictions);               Console.WriteLine(\"Schema Information of DepartmentID Column in Course Table:\");            ShowColumns(departmentIDSchemaTable);            Console.WriteLine();               // First, get schema information of all the IndexColumns in current database            DataTable allIndexColumnsSchemaTable = conn.GetSchema(\"IndexColumns\");               Console.WriteLine(\"Schema Information of All IndexColumns:\");            ShowIndexColumns(allIndexColumnsSchemaTable);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to             // get the specified column(s).            // You can use five restrictions for Column, so you should create a 5 members array.            String[] indexColumnsRestrictions = new String[5];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.             // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.            indexColumnsRestrictions[2] = \"Course\";            indexColumnsRestrictions[4] = \"CourseID\";               DataTable courseIdIndexSchemaTable = conn.GetSchema(\"IndexColumns\", indexColumnsRestrictions);               Console.WriteLine(\"Index Schema Information of CourseID Column in Course Table:\");            ShowIndexColumns(courseIdIndexSchemaTable);            Console.WriteLine();         }            Console.WriteLine(\"Please press any key to exit...\");         Console.ReadKey();      }         private static void ShowDataTable(DataTable table, Int32 length) {         foreach (DataColumn col in table.Columns) {            Console.Write(\"{0,-\" + length + \"}\", col.ColumnName);         }         Console.WriteLine();            foreach (DataRow row in table.Rows) {            foreach (DataColumn col in table.Columns) {               if (col.DataType.Equals(typeof(DateTime)))                  Console.Write(\"{0,-\" + length + \":d}\", row[col]);               else if (col.DataType.Equals(typeof(Decimal)))                  Console.Write(\"{0,-\" + length + \":C}\", row[col]);               else                  Console.Write(\"{0,-\" + length + \"}\", row[col]);            }            Console.WriteLine();         }      }         private static void ShowDataTable(DataTable table) {         ShowDataTable(table, 14);      }         private static void ShowColumns(DataTable columnsTable) {         var selectedRows = from info in columnsTable.AsEnumerable()                            select new {                               TableCatalog = info[\"TABLE_CATALOG\"],                               TableSchema = info[\"TABLE_SCHEMA\"],                               TableName = info[\"TABLE_NAME\"],                               ColumnName = info[\"COLUMN_NAME\"],                               DataType = info[\"DATA_TYPE\"]                            };            Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", \"TableCatalog\", \"TABLE_SCHEMA\",             \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\");         foreach (var row in selectedRows) {            Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", row.TableCatalog,                row.TableSchema, row.TableName, row.ColumnName, row.DataType);         }      }         private static void ShowIndexColumns(DataTable indexColumnsTable) {         var selectedRows = from info in indexColumnsTable.AsEnumerable()                            select new {                               TableSchema = info[\"table_schema\"],                               TableName = info[\"table_name\"],                               ColumnName = info[\"column_name\"],                               ConstraintSchema = info[\"constraint_schema\"],                               ConstraintName = info[\"constraint_name\"],                               KeyType = info[\"KeyType\"]                            };            Console.WriteLine(\"{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}\", \"table_schema\", \"table_name\", \"column_name\", \"constraint_schema\", \"constraint_name\", \"KeyType\");         foreach (var row in selectedRows) {            Console.WriteLine(\"{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}\", row.TableSchema,                row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);         }      }   }   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"You may need the schema information of the database, tables or columns.","pos":[0,71]},{"content":"This sample:      -   Uses GetSchema to get schema information.","pos":[72,135]},{"content":"-   Use schema restrictions to get the specified information.","pos":[141,202]},{"content":"-   Gets schema information of the database, tables, and some columns.","pos":[208,278]},{"content":"Before you run the sample, you need to create the sample database, using the following <ph id=\"ph1\">[!INCLUDE[tsql](~/add/includes/tsql-md.md)]</ph>:      <ph id=\"ph2\">```   USE [master]   GO      CREATE DATABASE [MySchool]       GO      USE [MySchool]   GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,   [Year] [smallint] NOT NULL,   [Title] [nvarchar](100) NOT NULL,   [Credits] [int] NOT NULL,   [DepartmentID] [int] NOT NULL,    CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED    (   [CourseID] ASC,   [Year] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,   [Name] [nvarchar](50) NOT NULL,   [Budget] [money] NOT NULL,   [StartDate] [datetime] NOT NULL,   [Administrator] [int] NULL,    CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED    (   [DepartmentID] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)      SET IDENTITY_INSERT [dbo].[Department] ON       INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)   SET IDENTITY_INSERT [dbo].[Department] OFF      ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])   REFERENCES [dbo].[Department] ([DepartmentID])   GO   ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]   GO   ```</ph>       <bpt id=\"p1\">[</bpt>How to Get Schema Information from Database<ept id=\"p1\">](http://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2)</ept> has C# and Visual Basic versions of this code sample in a Visual Studio project.","pos":[285,3285],"source":"       Before you run the sample, you need to create the sample database, using the following [!INCLUDE[tsql](~/add/includes/tsql-md.md)]:      ```   USE [master]   GO      CREATE DATABASE [MySchool]       GO      USE [MySchool]   GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,   [Year] [smallint] NOT NULL,   [Title] [nvarchar](100) NOT NULL,   [Credits] [int] NOT NULL,   [DepartmentID] [int] NOT NULL,    CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED    (   [CourseID] ASC,   [Year] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,   [Name] [nvarchar](50) NOT NULL,   [Budget] [money] NOT NULL,   [StartDate] [datetime] NOT NULL,   [Administrator] [int] NULL,    CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED    (   [DepartmentID] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)      SET IDENTITY_INSERT [dbo].[Department] ON       INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)   SET IDENTITY_INSERT [dbo].[Department] OFF      ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])   REFERENCES [dbo].[Department] ([DepartmentID])   GO   ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]   GO   ```       [How to Get Schema Information from Database](http://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2) has C# and Visual Basic versions of this code sample in a Visual Studio project."}]},{"pos":[91424,91467],"content":"Specifies the name of the schema to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the name of the schema to return.","pos":[0,43]}]},{"pos":[91533,91611],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains schema information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> that contains schema information."},{"pos":[91779,91828],"content":"<ph id=\"ph1\">&lt;code&gt;collectionName&lt;/code&gt;</ph> is specified as null.","needQuote":true,"needEscape":true,"source":"<code>collectionName</code> is specified as null."},{"pos":[92307,92524],"content":"Returns schema information for the data source of this <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified string for the schema name and the specified string array for the restriction values.","needQuote":true,"needEscape":true,"source":"Returns schema information for the data source of this <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> using the specified string for the schema name and the specified string array for the restriction values."},{"pos":[92537,93629],"content":"The `restrictionValues` parameter can supply *n* depth of values, which are specified by the restrictions collection for a specific collection. In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to `null` and then put the appropriate value in for the restriction that you would like to specify a value for.       An example of this is the \"Tables\" collection. If the \"Tables\" collection has three restrictions--database, owner, and table name--and you want to get back only the tables associated with the owner \"Carl\", you need to pass in the following values: null, \"Carl\". If a restriction value is not passed in, the default values are used for that restriction. This is the same mapping as passing in `null`, which is different from passing in an empty string for the parameter value. In that case, the empty string (\"\") is considered to be the value for the specified parameter.       For a code sample demonstrating GetSchema, see <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`restrictionValues`</ph> parameter can supply <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> depth of values, which are specified by the restrictions collection for a specific collection.","pos":[0,143],"source":"The `restrictionValues` parameter can supply *n* depth of values, which are specified by the restrictions collection for a specific collection."},{"content":"In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to <ph id=\"ph1\">`null`</ph> and then put the appropriate value in for the restriction that you would like to specify a value for.","pos":[144,391],"source":" In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to `null` and then put the appropriate value in for the restriction that you would like to specify a value for."},{"content":"An example of this is the \"Tables\" collection.","pos":[398,444]},{"content":"If the \"Tables\" collection has three restrictions--database, owner, and table name--and you want to get back only the tables associated with the owner \"Carl\", you need to pass in the following values: null, \"Carl\".","pos":[445,659]},{"content":"If a restriction value is not passed in, the default values are used for that restriction.","pos":[660,750]},{"content":"This is the same mapping as passing in <ph id=\"ph1\">`null`</ph>, which is different from passing in an empty string for the parameter value.","pos":[751,873],"source":" This is the same mapping as passing in `null`, which is different from passing in an empty string for the parameter value."},{"content":"In that case, the empty string (\"\") is considered to be the value for the specified parameter.","pos":[874,968]},{"content":"For a code sample demonstrating GetSchema, see &lt;xref:System.Data.SqlClient.SqlConnection.GetSchema%2A&gt;.","pos":[975,1078],"source":"       For a code sample demonstrating GetSchema, see <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>."}]},{"pos":[93841,93884],"content":"Specifies the name of the schema to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the name of the schema to return.","pos":[0,43]}]},{"pos":[93960,94013],"content":"A set of restriction values for the requested schema.","needQuote":true,"needEscape":true,"nodes":[{"content":"A set of restriction values for the requested schema.","pos":[0,53]}]},{"pos":[94079,94157],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains schema information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> that contains schema information."},{"pos":[94325,94374],"content":"<ph id=\"ph1\">&lt;code&gt;collectionName&lt;/code&gt;</ph> is specified as null.","needQuote":true,"needEscape":true,"source":"<code>collectionName</code> is specified as null."},{"pos":[94749,94862],"content":"Occurs when <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> returns a warning or informational message.","needQuote":true,"needEscape":true,"source":"Occurs when [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] returns a warning or informational message."},{"pos":[94875,95678],"content":"Clients that want to process warnings or informational messages sent by the server should create an <xref:System.Data.SqlClient.SqlInfoMessageEventHandler> delegate to listen to this event.       The InfoMessage event occurs when a message with a severity of 10 or less is returned by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]. Messages that have a severity between 11 and 20 raise an error and messages that have a severity over 20 causes the connection to close. For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] error levels, see \"Database Engine Error Severities\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.       For more information and an example, see [Connection Events](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Clients that want to process warnings or informational messages sent by the server should create an &lt;xref:System.Data.SqlClient.SqlInfoMessageEventHandler&gt; delegate to listen to this event.","pos":[0,189],"source":"Clients that want to process warnings or informational messages sent by the server should create an <xref:System.Data.SqlClient.SqlInfoMessageEventHandler> delegate to listen to this event."},{"content":"The InfoMessage event occurs when a message with a severity of 10 or less is returned by <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>.","pos":[196,343],"source":"       The InfoMessage event occurs when a message with a severity of 10 or less is returned by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."},{"content":"Messages that have a severity between 11 and 20 raise an error and messages that have a severity over 20 causes the connection to close.","pos":[344,480]},{"content":"For more information on <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> error levels, see \"Database Engine Error Severities\" in <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> Books Online.","pos":[481,690],"source":" For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] error levels, see \"Database Engine Error Severities\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online."},{"content":"For more information and an example, see <bpt id=\"p1\">[</bpt>Connection Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[697,797],"source":"       For more information and an example, see [Connection Events](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[95870,95882],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[96246,96379],"content":"Opens a database connection with the property settings specified by the <xref:System.Data.SqlClient.SqlConnection.ConnectionString*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Opens a database connection with the property settings specified by the &lt;xref:System.Data.SqlClient.SqlConnection.ConnectionString*&gt;.","pos":[0,133],"source":"Opens a database connection with the property settings specified by the <xref:System.Data.SqlClient.SqlConnection.ConnectionString*>."}]},{"pos":[96392,97698],"content":"The <xref:System.Data.SqlClient.SqlConnection> draws an open connection from the connection pool if one is available. Otherwise, it establishes a new connection to an instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].      > [!NOTE] >  If the <xref:System.Data.SqlClient.SqlConnection> goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling <xref:System.Data.SqlClient.SqlConnection.Close%2A>.      > [!NOTE] >  If you specify a port number other than 1433 when you are trying to connect to an instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] and using a protocol other than TCP/IP, the Open method fails. To specify a port number other than 1433, include \"server=machinename,port number\" in the connection string, and use the TCP/IP protocol.      > [!NOTE] >  The [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] requires the Security permission with \"Allows calls to unmanaged assemblies\" enabled (<xref:System.Security.Permissions.SecurityPermission> with <xref:System.Security.Permissions.SecurityPermissionFlag> set to `UnmanagedCode`) to open a <xref:System.Data.SqlClient.SqlConnection> with SQL Debugging enabled.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.SqlClient.SqlConnection&gt; draws an open connection from the connection pool if one is available.","pos":[0,117],"source":"The <xref:System.Data.SqlClient.SqlConnection> draws an open connection from the connection pool if one is available."},{"content":"Otherwise, it establishes a new connection to an instance of <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>.","pos":[118,237],"source":" Otherwise, it establishes a new connection to an instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the &lt;xref:System.Data.SqlClient.SqlConnection&gt; goes out of scope, it is not closed.","pos":[243,342],"source":"      > [!NOTE] >  If the <xref:System.Data.SqlClient.SqlConnection> goes out of scope, it is not closed."},{"content":"Therefore, you must explicitly close the connection by calling &lt;xref:System.Data.SqlClient.SqlConnection.Close%2A&gt;.","pos":[343,458],"source":" Therefore, you must explicitly close the connection by calling <xref:System.Data.SqlClient.SqlConnection.Close%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you specify a port number other than 1433 when you are trying to connect to an instance of <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> and using a protocol other than TCP/IP, the Open method fails.","pos":[464,691],"source":"      > [!NOTE] >  If you specify a port number other than 1433 when you are trying to connect to an instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] and using a protocol other than TCP/IP, the Open method fails."},{"content":"To specify a port number other than 1433, include \"server=machinename,port number\" in the connection string, and use the TCP/IP protocol.","pos":[692,829]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id=\"ph3\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> requires the Security permission with \"Allows calls to unmanaged assemblies\" enabled (&lt;xref:System.Security.Permissions.SecurityPermission&gt; with &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; set to <ph id=\"ph4\">`UnmanagedCode`</ph>) to open a &lt;xref:System.Data.SqlClient.SqlConnection&gt; with SQL Debugging enabled.","pos":[835,1293],"source":"      > [!NOTE] >  The [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] requires the Security permission with \"Allows calls to unmanaged assemblies\" enabled (<xref:System.Security.Permissions.SecurityPermission> with <xref:System.Security.Permissions.SecurityPermissionFlag> set to `UnmanagedCode`) to open a <xref:System.Data.SqlClient.SqlConnection> with SQL Debugging enabled."}]},{"pos":[98410,98529],"content":"Cannot open a connection without specifying a data source or server.       or       The connection is already open.","needQuote":false,"needEscape":true,"nodes":[{"content":"Cannot open a connection without specifying a data source or server.       or       The connection is already open.","pos":[0,115],"nodes":[{"content":"Cannot open a connection without specifying a data source or server.","pos":[0,68]},{"content":"or       The connection is already open.","pos":[75,115]}]}]},{"pos":[98646,99164],"content":"A connection-level error occurred while opening the connection. If the <xref:System.Data.SqlClient.SqlException.Number*> property contains the value 18487 or 18488, this indicates that the specified password has expired or must be reset. See the <xref:System.Data.SqlClient.SqlConnection.ChangePassword*> method for more information.       The <xref uid=\"langword_csharp_&lt;system.data.localdb&gt;\" name=\"&lt;system.data.localdb&gt;\" href=\"\"></xref> tag in the app.config file has invalid or unknown elements.","needQuote":false,"needEscape":true,"nodes":[{"content":"A connection-level error occurred while opening the connection.","pos":[0,63]},{"content":"If the &lt;xref:System.Data.SqlClient.SqlException.Number<bpt id=\"p1\">*</bpt>&gt; property contains the value 18487 or 18488, this indicates that the specified password has expired or must be reset. See the &lt;xref:System.Data.SqlClient.SqlConnection.ChangePassword<ept id=\"p1\">*</ept>&gt; method for more information.","pos":[64,333],"source":" If the <xref:System.Data.SqlClient.SqlException.Number*> property contains the value 18487 or 18488, this indicates that the specified password has expired or must be reset. See the <xref:System.Data.SqlClient.SqlConnection.ChangePassword*> method for more information."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_&amp;lt;system.data.localdb&amp;gt;\" name=\"&amp;lt;system.data.localdb&amp;gt;\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> tag in the app.config file has invalid or unknown elements.","pos":[340,510],"source":"       The <xref uid=\"langword_csharp_&lt;system.data.localdb&gt;\" name=\"&lt;system.data.localdb&gt;\" href=\"\"></xref> tag in the app.config file has invalid or unknown elements."}]},{"pos":[99310,99467],"content":"There are two entries with the same name in the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_&amp;lt;localdbinstances&amp;gt;\" name=\"&amp;lt;localdbinstances&amp;gt;\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> section.","needQuote":true,"needEscape":true,"source":"There are two entries with the same name in the <xref uid=\"langword_csharp_&lt;localdbinstances&gt;\" name=\"&lt;localdbinstances&gt;\" href=\"\"></xref> section."},{"pos":[99962,100598],"content":"An asynchronous version of <xref:System.Data.SqlClient.SqlConnection.Open*>, which opens a database connection with the property settings specified by the <xref:System.Data.SqlClient.SqlConnection.ConnectionString*>. The cancellation token can be used to request that the operation be abandoned before the connection timeout elapses.  Exceptions will be propagated via the returned Task. If the connection timeout time elapses without successfully connecting, the returned Task will be marked as faulted with an Exception. The implementation returns a Task without blocking the calling thread for both pooled and non-pooled connections.","needQuote":true,"needEscape":true,"nodes":[{"content":"An asynchronous version of &lt;xref:System.Data.SqlClient.SqlConnection.Open<bpt id=\"p1\">*</bpt>&gt;, which opens a database connection with the property settings specified by the &lt;xref:System.Data.SqlClient.SqlConnection.ConnectionString<ept id=\"p1\">*</ept>&gt;.","pos":[0,216],"source":"An asynchronous version of <xref:System.Data.SqlClient.SqlConnection.Open*>, which opens a database connection with the property settings specified by the <xref:System.Data.SqlClient.SqlConnection.ConnectionString*>."},{"content":"The cancellation token can be used to request that the operation be abandoned before the connection timeout elapses.","pos":[217,333]},{"content":"Exceptions will be propagated via the returned Task.","pos":[335,387]},{"content":"If the connection timeout time elapses without successfully connecting, the returned Task will be marked as faulted with an Exception.","pos":[388,522]},{"content":"The implementation returns a Task without blocking the calling thread for both pooled and non-pooled connections.","pos":[523,636]}]},{"pos":[100611,101476],"content":"After calling OpenAsync, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState> until the returned <xref:System.Threading.Tasks.Task> is completed. Then, if the connection was successful, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState>. If the connection fails, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState>.       A call to <xref:System.Data.SqlClient.SqlConnection.Close%2A> will attempt to cancel or close the corresponding OpenAsync call.       For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"After calling OpenAsync, &lt;xref:System.Data.SqlClient.SqlConnection.State%2A&gt; must return &lt;xref:System.Data.ConnectionState&gt; until the returned &lt;xref:System.Threading.Tasks.Task&gt; is completed.","pos":[0,191],"source":"After calling OpenAsync, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState> until the returned <xref:System.Threading.Tasks.Task> is completed."},{"content":"Then, if the connection was successful, &lt;xref:System.Data.SqlClient.SqlConnection.State%2A&gt; must return &lt;xref:System.Data.ConnectionState&gt;.","pos":[192,331],"source":" Then, if the connection was successful, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState>."},{"content":"If the connection fails, &lt;xref:System.Data.SqlClient.SqlConnection.State%2A&gt; must return &lt;xref:System.Data.ConnectionState&gt;.","pos":[332,456],"source":" If the connection fails, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState>."},{"content":"A call to &lt;xref:System.Data.SqlClient.SqlConnection.Close%2A&gt; will attempt to cancel or close the corresponding OpenAsync call.","pos":[463,590],"source":"       A call to <xref:System.Data.SqlClient.SqlConnection.Close%2A> will attempt to cancel or close the corresponding OpenAsync call."},{"content":"For more information about asynchronous programming in the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>, see <bpt id=\"p1\">[</bpt>Asynchronous Programming<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[597,861],"source":"       For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[101721,101750],"content":"The cancellation instruction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cancellation instruction.","pos":[0,29]}]},{"pos":[101822,101869],"content":"A task representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A task representing the asynchronous operation.","pos":[0,47]}]},{"pos":[102054,102388],"content":"Calling OpenAsync more than once for the same instance before task completion.       <xref uid=\"langword_csharp_Context Connection=true\" name=\"Context Connection=true\" href=\"\"></xref> is specified in the connection string.       A connection was not available from the connection pool before the connection time out elapsed.","needQuote":false,"needEscape":true,"nodes":[{"content":"Calling OpenAsync more than once for the same instance before task completion.","pos":[0,78]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Context Connection=true\" name=\"Context Connection=true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is specified in the connection string.","pos":[85,222],"source":"<xref uid=\"langword_csharp_Context Connection=true\" name=\"Context Connection=true\" href=\"\"></xref> is specified in the connection string."},{"content":"A connection was not available from the connection pool before the connection time out elapsed.","pos":[229,324]}]},{"pos":[102504,102627],"content":"Any error returned by <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> that occurred while opening the connection.","needQuote":true,"needEscape":true,"source":"Any error returned by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] that occurred while opening the connection."},{"pos":[103000,103142],"content":"Gets the size (in bytes) of network packets used to communicate with an instance of <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>.","needQuote":true,"needEscape":true,"source":"Gets the size (in bytes) of network packets used to communicate with an instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."},{"pos":[103155,104423],"content":"If an application performs bulk copy operations, or sends or receives lots of text or image data, a packet size larger than the default may improve efficiency because it causes fewer network read and write operations. If an application sends and receives small amounts of information, you can set the packet size to 512 bytes (using the Packet Size value in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>), which is sufficient for most data transfer operations. For most applications, the default packet size is best.       PacketSize may be a value in the range of 512 and 32767 bytes. An exception is generated if the value is outside this range.       Setting the default value to a number greater than 8000 will cause the packets to use the MultiPage allocator on the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] instead of the much more efficient SinglePage allocator, reducing the overall scalability of the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]. For more information on how [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] uses memory, see [Memory Architecture](http://go.microsoft.com/fwlink/?LinkId=143705) in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.","needQuote":false,"needEscape":true,"nodes":[{"content":"If an application performs bulk copy operations, or sends or receives lots of text or image data, a packet size larger than the default may improve efficiency because it causes fewer network read and write operations.","pos":[0,217]},{"content":"If an application sends and receives small amounts of information, you can set the packet size to 512 bytes (using the Packet Size value in the &lt;xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A&gt;), which is sufficient for most data transfer operations.","pos":[218,481],"source":" If an application sends and receives small amounts of information, you can set the packet size to 512 bytes (using the Packet Size value in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>), which is sufficient for most data transfer operations."},{"content":"For most applications, the default packet size is best.","pos":[482,537]},{"content":"PacketSize may be a value in the range of 512 and 32767 bytes.","pos":[544,606]},{"content":"An exception is generated if the value is outside this range.","pos":[607,668]},{"content":"Setting the default value to a number greater than 8000 will cause the packets to use the MultiPage allocator on the instance of <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> instead of the much more efficient SinglePage allocator, reducing the overall scalability of the <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>.","pos":[675,1017],"source":"       Setting the default value to a number greater than 8000 will cause the packets to use the MultiPage allocator on the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] instead of the much more efficient SinglePage allocator, reducing the overall scalability of the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."},{"content":"For more information on how <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> uses memory, see <bpt id=\"p1\">[</bpt>Memory Architecture<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=143705)</ept> in <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> Books Online.","pos":[1018,1264],"source":" For more information on how [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] uses memory, see [Memory Architecture](http://go.microsoft.com/fwlink/?LinkId=143705) in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online."}]},{"pos":[105081,105147],"content":"The size (in bytes) of network packets. The default value is 8000.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size (in bytes) of network packets. The default value is 8000.","pos":[0,66],"nodes":[{"content":"The size (in bytes) of network packets.","pos":[0,39]},{"content":"The default value is 8000.","pos":[40,66]}]}]},{"pos":[106147,106199],"content":"Registers the column encryption key store providers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers the column encryption key store providers.","pos":[0,52]}]},{"pos":[106593,106613],"content":"The custom providers","needQuote":true,"needEscape":true,"nodes":[{"content":"The custom providers","pos":[0,20]}]},{"pos":[107123,107188],"content":"If statistics gathering is enabled, all values are reset to zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"If statistics gathering is enabled, all values are reset to zero.","pos":[0,65]}]},{"pos":[107200,107285],"content":"If statistics gathering is not enabled and this method is called, no error is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"If statistics gathering is not enabled and this method is called, no error is thrown.","pos":[0,85]}]},{"pos":[107858,107951],"content":"Returns a name value pair collection of statistics at the point in time the method is called.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a name value pair collection of statistics at the point in time the method is called.","pos":[0,93]}]},{"pos":[107963,108184],"content":"When this method is called, the values retrieved are those at the current point in time. If you continue using the connection, the values are incorrect. You need to re-execute the method to obtain the most current values.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method is called, the values retrieved are those at the current point in time. If you continue using the connection, the values are incorrect. You need to re-execute the method to obtain the most current values.","pos":[0,221],"nodes":[{"content":"When this method is called, the values retrieved are those at the current point in time.","pos":[0,88]},{"content":"If you continue using the connection, the values are incorrect.","pos":[89,152]},{"content":"You need to re-execute the method to obtain the most current values.","pos":[153,221]}]}]},{"pos":[108362,108479],"content":"Returns a reference of type <xref:System.Collections.IDictionary> of <xref:System.Collections.DictionaryEntry> items.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a reference of type &lt;xref:System.Collections.IDictionary&gt; of &lt;xref:System.Collections.DictionaryEntry&gt; items.","pos":[0,117],"source":"Returns a reference of type <xref:System.Collections.IDictionary> of <xref:System.Collections.DictionaryEntry> items."}]},{"pos":[108952,109102],"content":"Gets a string that contains the version of the instance of <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> to which the client is connected.","needQuote":true,"needEscape":true,"source":"Gets a string that contains the version of the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] to which the client is connected."},{"pos":[109115,109606],"content":"The version is of the form *##.##.####*, where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version. The string is of the form *major.minor.build*, where major and minor are exactly two digits and build is exactly four digits.       ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The version is of the form <bpt id=\"p1\">*</bpt>##.##.####<ept id=\"p1\">*</ept>, where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version.","pos":[0,183],"source":"The version is of the form *##.##.####*, where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version."},{"content":"The string is of the form <bpt id=\"p1\">*</bpt>major.minor.build<ept id=\"p1\">*</ept>, where major and minor are exactly two digits and build is exactly four digits.","pos":[184,309],"source":" The string is of the form *major.minor.build*, where major and minor are exactly two digits and build is exactly four digits."},{"content":"ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to &lt;xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A&gt;.","pos":[316,489],"source":"       ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>."}]},{"pos":[110134,110223],"content":"The version of the instance of <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>.","needQuote":true,"needEscape":true,"source":"The version of the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."},{"pos":[110412,110617],"content":"The connection is closed.       ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <xref:System.Data.SqlClient.SqlConnection.OpenAsync*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The connection is closed.       ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <xref:System.Data.SqlClient.SqlConnection.OpenAsync*>.","pos":[0,203],"nodes":[{"content":"The connection is closed.","pos":[0,25]},{"content":"ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to &lt;xref:System.Data.SqlClient.SqlConnection.OpenAsync*&gt;.","pos":[32,203],"source":"       ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <xref:System.Data.SqlClient.SqlConnection.OpenAsync*>."}]}]},{"pos":[110966,111119],"content":"Indicates the state of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> during the most recent network operation performed on the connection.","needQuote":true,"needEscape":true,"source":"Indicates the state of the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> during the most recent network operation performed on the connection."},{"pos":[111131,111330],"content":"Returns an <xref:System.Data.ConnectionState> enumeration indicating the state of the <xref:System.Data.SqlClient.SqlConnection>. Closing and reopening the connection will refresh the value of State.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an <xref:System.Data.ConnectionState> enumeration indicating the state of the <xref:System.Data.SqlClient.SqlConnection>. Closing and reopening the connection will refresh the value of State.","pos":[0,199],"nodes":[{"content":"Returns an &lt;xref:System.Data.ConnectionState&gt; enumeration indicating the state of the &lt;xref:System.Data.SqlClient.SqlConnection&gt;.","pos":[0,129],"source":"Returns an <xref:System.Data.ConnectionState> enumeration indicating the state of the <xref:System.Data.SqlClient.SqlConnection>."},{"content":"Closing and reopening the connection will refresh the value of State.","pos":[130,199]}]}]},{"pos":[111484,111548],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.ConnectionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.ConnectionState\"></xref> enumeration."},{"pos":[112028,112158],"content":"When set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, enables statistics gathering for the current connection.","needQuote":true,"needEscape":true,"source":"When set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, enables statistics gathering for the current connection."},{"pos":[112170,112307],"content":"Enabling statistics gathering has a minor, but measurable effect on performance and therefore should be enabled only when it is required.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enabling statistics gathering has a minor, but measurable effect on performance and therefore should be enabled only when it is required.","pos":[0,137]}]},{"pos":[112433,112690],"content":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if statistics gathering is enabled; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> is the default.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if statistics gathering is enabled; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,178],"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if statistics gathering is enabled; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is the default.","pos":[179,257],"source":"<xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> is the default."}]},{"pos":[113230,113290],"content":"Creates a new object that is a copy of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new object that is a copy of the current instance.","pos":[0,60]}]},{"pos":[113303,113562],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlConnection> instance is cast to an <xref:System.ICloneable> interface.       This member is only supported by the .NET Compact Framework.","needQuote":false,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlConnection> instance is cast to an <xref:System.ICloneable> interface.       This member is only supported by the .NET Compact Framework.","pos":[0,257],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.SqlClient.SqlConnection&gt; instance is cast to an &lt;xref:System.ICloneable&gt; interface.","pos":[60,190],"source":" It can be used only when the <xref:System.Data.SqlClient.SqlConnection> instance is cast to an <xref:System.ICloneable> interface."},{"content":"This member is only supported by the .NET Compact Framework.","pos":[197,257]}]}]},{"pos":[113691,113736],"content":"A new object that is a copy of this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new object that is a copy of this instance.","pos":[0,45]}]},{"pos":[114214,114264],"content":"Gets a string that identifies the database client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a string that identifies the database client.","pos":[0,50]}]},{"pos":[114276,114428],"content":"The string typically contains the network name of the client. The WorkstationId property corresponds to the `Workstation ID` connection string property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string typically contains the network name of the client.","pos":[0,61]},{"content":"The WorkstationId property corresponds to the <ph id=\"ph1\">`Workstation ID`</ph> connection string property.","pos":[62,152],"source":" The WorkstationId property corresponds to the `Workstation ID` connection string property."}]},{"pos":[114942,115093],"content":"A string that identifies the database client. If not specified, the name of the client computer. If neither is specified, the value is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that identifies the database client. If not specified, the name of the client computer. If neither is specified, the value is an empty string.","pos":[0,151],"nodes":[{"content":"A string that identifies the database client.","pos":[0,45]},{"content":"If not specified, the name of the client computer.","pos":[46,96]},{"content":"If neither is specified, the value is an empty string.","pos":[97,151]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.SqlClient.SqlConnection\n  id: SqlConnection\n  children:\n  - System.Data.SqlClient.SqlConnection.#ctor\n  - System.Data.SqlClient.SqlConnection.#ctor(System.String)\n  - System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)\n  - System.Data.SqlClient.SqlConnection.AccessToken\n  - System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  - System.Data.SqlClient.SqlConnection.BeginTransaction\n  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)\n  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)\n  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)\n  - System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)\n  - System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)\n  - System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)\n  - System.Data.SqlClient.SqlConnection.ClearAllPools\n  - System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)\n  - System.Data.SqlClient.SqlConnection.ClientConnectionId\n  - System.Data.SqlClient.SqlConnection.Close\n  - System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl\n  - System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled\n  - System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths\n  - System.Data.SqlClient.SqlConnection.ConnectionString\n  - System.Data.SqlClient.SqlConnection.ConnectionTimeout\n  - System.Data.SqlClient.SqlConnection.CreateCommand\n  - System.Data.SqlClient.SqlConnection.CreateDbCommand\n  - System.Data.SqlClient.SqlConnection.Credential\n  - System.Data.SqlClient.SqlConnection.Database\n  - System.Data.SqlClient.SqlConnection.DataSource\n  - System.Data.SqlClient.SqlConnection.DbProviderFactory\n  - System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)\n  - System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)\n  - System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)\n  - System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\n  - System.Data.SqlClient.SqlConnection.GetSchema\n  - System.Data.SqlClient.SqlConnection.GetSchema(System.String)\n  - System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])\n  - System.Data.SqlClient.SqlConnection.InfoMessage\n  - System.Data.SqlClient.SqlConnection.Open\n  - System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\n  - System.Data.SqlClient.SqlConnection.PacketSize\n  - System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})\n  - System.Data.SqlClient.SqlConnection.ResetStatistics\n  - System.Data.SqlClient.SqlConnection.RetrieveStatistics\n  - System.Data.SqlClient.SqlConnection.ServerVersion\n  - System.Data.SqlClient.SqlConnection.State\n  - System.Data.SqlClient.SqlConnection.StatisticsEnabled\n  - System.Data.SqlClient.SqlConnection.System#ICloneable#Clone\n  - System.Data.SqlClient.SqlConnection.WorkstationId\n  langs:\n  - csharp\n  name: SqlConnection\n  nameWithType: SqlConnection\n  fullName: System.Data.SqlClient.SqlConnection\n  type: Class\n  summary: Represents an open connection to a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database. This class cannot be inherited.\n  remarks: \"A SqlConnection object represents a unique session to a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] data source. With a client/server database system, it is equivalent to a network connection to the server. SqlConnection is used together with <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlCommand> to increase performance when connecting to a Microsoft [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database. For all third-party [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] products, and other OLE DB-supported data sources, use <xref:System.Data.OleDb.OleDbConnection>.  \\n  \\n When you create an instance of SqlConnection, all properties are set to their initial values. For a list of these values, see the SqlConnection constructor.  \\n  \\n See <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> for a list of the keywords in a connection string.  \\n  \\n If the SqlConnection goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling `Close` or `Dispose`. `Close` and `Dispose` are functionally equivalent. If the connection pooling value `Pooling` is set to `true` or `yes`, the underlying connection is returned back to the connection pool. On the other hand, if `Pooling` is set to `false` or `no`, the underlying connection to the server is actually closed.  \\n  \\n> [!NOTE]\\n>  Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see [SQL Server Connection Pooling (ADO.NET)](~/add/includes/ajax-current-ext-md.md).  \\n  \\n To ensure that connections are always closed, open the connection inside of a `using` block, as shown in the following code fragment. Doing so ensures that the connection is automatically closed when the code exits the block.  \\n  \\n```vb#  \\nUsing connection As New SqlConnection(connectionString)  \\n    connection.Open()  \\n    ' Do work here; connection closed on following line.  \\nEnd Using  \\n  \\n```  \\n  \\n```c#  \\nusing (SqlConnection connection = new SqlConnection(connectionString))  \\n    {  \\n        connection.Open();  \\n        // Do work here; connection closed on following line.  \\n    }  \\n```  \\n  \\n> [!NOTE]\\n>  To deploy high-performance applications, you must use connection pooling. When you use the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], you do not have to enable connection pooling because the provider manages this automatically, although you can modify some settings. For more information, see [SQL Server Connection Pooling (ADO.NET)](../Topic/SQL%20Server%20Connection%20Pooling%20\\\\(ADO.NET\\\\).md).  \\n  \\n If a <xref:System.Data.SqlClient.SqlException> is generated by the method executing a <xref:System.Data.SqlClient.SqlCommand>, the SqlConnection remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the SqlConnection. However, the user can reopen the connection and continue.  \\n  \\n An application that creates an instance of the SqlConnection object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. SqlConnection makes security demands using the <xref:System.Data.SqlClient.SqlClientPermission> object. Users can verify that their code has sufficient permissions by using the <xref:System.Data.SqlClient.SqlClientPermissionAttribute> object. Users and administrators can also use the [Caspol.exe (Code Access Security Policy Tool)](~/add/includes/ajax-current-ext-md.md) to modify security policy at the machine, user, and enterprise levels. For more information, see [Security](~/add/includes/ajax-current-ext-md.md). For an example demonstrating how to use security demands, see [Code Access Security and ADO.NET](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For more information about handling warning and informational messages from the server, see [Connection Events](~/add/includes/ajax-current-ext-md.md). [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] engine errors and error messages are documented in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.  \\n  \\n> [!CAUTION]\\n>  You can force TCP instead of shared memory. You can do that by prefixing tcp: to the server name in the connection string or you can use localhost.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlCommand> and a SqlConnection. The SqlConnection is opened and set as the <xref:System.Data.SqlClient.SqlCommand.Connection%2A> for the <xref:System.Data.SqlClient.SqlCommand>. The example then calls <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>. To accomplish this, the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] INSERT statement. The connection is closed automatically when the code exits the using block.  \\n  \\n [!code-cs[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._4_1.cs)]\\n [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._4_1.vb)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultEvent(\"InfoMessage\")]\n\n      public sealed class SqlConnection : System.Data.Common.DbConnection, ICloneable\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Data.Common.DbConnection\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)\n  - System.Data.Common.DbConnection.OpenAsync\n  - System.Data.Common.DbConnection.StateChange\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.#ctor\n  id: '#ctor'\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: SqlConnection()\n  nameWithType: SqlConnection.SqlConnection()\n  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> class.\n  remarks: \"When a new instance of <xref:System.Data.SqlClient.SqlConnection> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|empty string (\\\"\\\")|  \\n|<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|  \\n|<xref:System.Data.SqlClient.SqlConnection.Database%2A>|empty string (\\\"\\\")|  \\n|<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|empty string (\\\"\\\")|  \\n  \\n You can change the value for these properties only by using the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property. The <xref:System.Data.SqlClient.SqlConnectionStringBuilder> class provides functionality for creating and managing the contents of connection strings.\"\n  example:\n  - \"The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.  \\n  \\n [!code-vb[Classic WebData SqlConnection.SqlConnection Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._17_1.vb)]\\n [!code-cs[Classic WebData SqlConnection.SqlConnection Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._17_1.cs)]\"\n  syntax:\n    content: public SqlConnection ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlConnection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: SqlConnection(String)\n  nameWithType: SqlConnection.SqlConnection(String)\n  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> class when given a string that contains the connection string.\n  remarks: \"When a new instance of <xref:System.Data.SqlClient.SqlConnection> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|`connectionString`|  \\n|<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|  \\n|<xref:System.Data.SqlClient.SqlConnection.Database%2A>|empty string (\\\"\\\")|  \\n|<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|empty string (\\\"\\\")|  \\n  \\n You can change the value for these properties only by using the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property. The <xref:System.Data.SqlClient.SqlConnection> class provides functionality for creating and managing the contents of connection strings.\"\n  example:\n  - \"The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.  \\n  \\n [!code-vb[Classic WebData SqlConnection.SqlConnection1 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._38_1.vb)]\\n [!code-cs[Classic WebData SqlConnection.SqlConnection1 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._38_1.cs)]\"\n  syntax:\n    content: public SqlConnection (string connectionString);\n    parameters:\n    - id: connectionString\n      type: System.String\n      description: The connection used to open the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database.\n  overload: System.Data.SqlClient.SqlConnection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)\n  id: '#ctor(System.String,System.Data.SqlClient.SqlCredential)'\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: SqlConnection(String,SqlCredential)\n  nameWithType: SqlConnection.SqlConnection(String,SqlCredential)\n  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String,SqlCredential)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> class given a connection string, that does not use <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref> and a <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object that contains the user ID and password.\n  syntax:\n    content: public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential credential);\n    parameters:\n    - id: connectionString\n      type: System.String\n      description: 'A connection string that does not use any of the following connection string keywords: <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref>, <xref uid=\"langword_csharp_UserId\" name=\"UserId\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Password\" name=\"Password\" href=\"\"></xref>; or that does not use <xref uid=\"langword_csharp_ContextConnection = true\" name=\"ContextConnection = true\" href=\"\"></xref>.'\n    - id: credential\n      type: System.Data.SqlClient.SqlCredential\n      description: A <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object. If `credential` is null, SqlConnection is functionally equivalent to &lt;xref:System.Data.SqlClient.SqlConnection.%23ctor%2A&gt;.\n  overload: System.Data.SqlClient.SqlConnection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.AccessToken\n  id: AccessToken\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: AccessToken\n  nameWithType: SqlConnection.AccessToken\n  fullName: System.Data.SqlClient.SqlConnection.AccessToken\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets or sets the access token for the connection.\n  syntax:\n    content: public string AccessToken { get; set; }\n    return:\n      type: System.String\n      description: The access token for the connection.\n  overload: System.Data.SqlClient.SqlConnection.AccessToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  id: BeginDbTransaction(System.Data.IsolationLevel)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: BeginDbTransaction(IsolationLevel)\n  nameWithType: SqlConnection.BeginDbTransaction(IsolationLevel)\n  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(IsolationLevel)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);\n    parameters:\n    - id: isolationLevel\n      type: System.Data.IsolationLevel\n      description: To be added.\n    return:\n      type: System.Data.Common.DbTransaction\n      description: To be added.\n  overload: System.Data.SqlClient.SqlConnection.BeginDbTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction\n  id: BeginTransaction\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: BeginTransaction()\n  nameWithType: SqlConnection.BeginTransaction()\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Starts a database transaction.\n  remarks: \"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION.  \\n  \\n You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method. To make sure that the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].  \\n  \\n> [!NOTE]\\n>  If you do not specify an isolation level, the default isolation level is used. To specify an isolation level with the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method, use the overload that takes the `iso` parameter (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>). The isolation level set for a transaction persists after the transaction is completed and until the connection is closed or disposed. Setting the isolation level to **Snapshot** in a database where the snapshot isolation level is not enabled does not throw an exception. The transaction will complete using the default isolation level.  \\n  \\n> [!CAUTION]\\n>  If a transaction is started and a level 16 or higher error occurs on the server, the transaction will not be rolled back until the <xref:System.Data.SqlClient.SqlDataReader.Read%2A> method is invoked. No exception is thrown on **ExecuteReader**.  \\n  \\n> [!CAUTION]\\n>  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.  \\n  \\n For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \\\"Explicit Transactions\\\" and \\\"Coding Efficient Transactions\\\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the BeginTransaction, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \\n  \\n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._1_1.cs)]\\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._1_1.vb)]\"\n  syntax:\n    content: public System.Data.SqlClient.SqlTransaction BeginTransaction ();\n    parameters: []\n    return:\n      type: System.Data.SqlClient.SqlTransaction\n      description: An object representing the new transaction.\n  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*\n  exceptions:\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Parallel transactions are not supported.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)\n  id: BeginTransaction(System.Data.IsolationLevel)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: BeginTransaction(IsolationLevel)\n  nameWithType: SqlConnection.BeginTransaction(IsolationLevel)\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Starts a database transaction with the specified isolation level.\n  remarks: \"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION.  \\n  \\n You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method. To make sure that the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].  \\n  \\n> [!NOTE]\\n>  After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] default). This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row. To reset the isolation level to the default (READ COMMITTED), execute the [!INCLUDE[tsql](~/add/includes/tsql-md.md)] SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> followed immediately by <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>. For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] isolation levels, see \\\"Isolation Levels in the Database Engine\\\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.  \\n  \\n For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \\\"Explicit Transactions\\\" and \\\"Coding Efficient Transactions\\\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.  \\n  \\n> [!CAUTION]\\n>  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \\n  \\n [!code-vb[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/add/codesnippet/visualbasic/b09ea924-5f89-4203-b010-_1.vb)]\\n [!code-cs[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/add/codesnippet/csharp/b09ea924-5f89-4203-b010-_1.cs)]\"\n  syntax:\n    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso);\n    parameters:\n    - id: iso\n      type: System.Data.IsolationLevel\n      description: The isolation level under which the transaction should run.\n    return:\n      type: System.Data.SqlClient.SqlTransaction\n      description: An object representing the new transaction.\n  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*\n  exceptions:\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Parallel transactions are not supported.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)\n  id: BeginTransaction(System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: BeginTransaction(String)\n  nameWithType: SqlConnection.BeginTransaction(String)\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Starts a database transaction with the specified transaction name.\n  remarks: \"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION.  \\n  \\n The length of the `transactionName` parameter must not exceed 32 characters; otherwise an exception will be thrown.  \\n  \\n The value in the `transactionName` parameter can be used in later calls to <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> and in the `savePoint` parameter of the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method.  \\n  \\n You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method. To make sure that the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].  \\n  \\n For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \\\"Explicit Transactions\\\" and \\\"Coding Efficient Transactions\\\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.  \\n  \\n> [!CAUTION]\\n>  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \\n  \\n [!code-cs[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._36_1.cs)]\\n [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._36_1.vb)]\"\n  syntax:\n    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (string transactionName);\n    parameters:\n    - id: transactionName\n      type: System.String\n      description: The name of the transaction.\n    return:\n      type: System.Data.SqlClient.SqlTransaction\n      description: An object representing the new transaction.\n  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*\n  exceptions:\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Parallel transactions are not supported.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)\n  id: BeginTransaction(System.Data.IsolationLevel,System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: BeginTransaction(IsolationLevel,String)\n  nameWithType: SqlConnection.BeginTransaction(IsolationLevel,String)\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel,String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Starts a database transaction with the specified isolation level and transaction name.\n  remarks: \"This command maps to the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] implementation of BEGIN TRANSACTION.  \\n  \\n The value in the `transactionName` parameter can be used in later calls to <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> and in the `savePoint` parameter of the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method.  \\n  \\n You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method. To make sure that the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transaction management model performs correctly, avoid using other transaction management models, such as the one provided by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].  \\n  \\n> [!NOTE]\\n>  After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] default). This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row. To reset the isolation level to the default (READ COMMITTED), execute the [!INCLUDE[tsql](~/add/includes/tsql-md.md)] SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> followed immediately by <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>. For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] isolation levels, see \\\"Isolation Levels in the Database Engine\\\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.  \\n  \\n For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see \\\"Explicit Transactions\\\" and \\\"Coding Efficient Transactions\\\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.  \\n  \\n> [!CAUTION]\\n>  When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \\n  \\n [!code-cs[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/add/codesnippet/csharp/1f00ab5d-aff7-46ea-8f1d-_1.cs)]\\n [!code-vb[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/add/codesnippet/visualbasic/1f00ab5d-aff7-46ea-8f1d-_1.vb)]\"\n  syntax:\n    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso, string transactionName);\n    parameters:\n    - id: iso\n      type: System.Data.IsolationLevel\n      description: The isolation level under which the transaction should run.\n    - id: transactionName\n      type: System.String\n      description: The name of the transaction.\n    return:\n      type: System.Data.SqlClient.SqlTransaction\n      description: An object representing the new transaction.\n  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*\n  exceptions:\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Parallel transactions are not supported.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)\n  id: ChangeDatabase(System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ChangeDatabase(String)\n  nameWithType: SqlConnection.ChangeDatabase(String)\n  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Changes the current database for an open <xref href=\"System.Data.SqlClient.SqlConnection\"></xref>.\n  remarks: The value supplied in the `database` parameter must be a valid database name. The `database` parameter cannot contain a null value, an empty string, or a string with only blank characters.\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \\n  \\n [!code-cs[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._10_1.cs)]\\n [!code-vb[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._10_1.vb)]\"\n  syntax:\n    content: public override void ChangeDatabase (string database);\n    parameters:\n    - id: database\n      type: System.String\n      description: The name of the database to use instead of the current database.\n  overload: System.Data.SqlClient.SqlConnection.ChangeDatabase*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The database name is not valid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is not open.\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: Cannot change the database.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)\n  id: ChangePassword(System.String,System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ChangePassword(String,String)\n  nameWithType: SqlConnection.ChangePassword(String,String)\n  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Changes the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] password for the user indicated in the connection string to the supplied new password.\n  remarks: \"When you are using [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] on Windows Server, developers can take advantage of functionality that lets the client application supply both the current and a new password in order to change the existing password. Applications can implement functionality such as prompting the user for a new password during initial login if the old one has expired, and this operation can be completed without administrator intervention.  \\n  \\n The ChangePassword method changes the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] password for the user indicated in the supplied `connectionString` parameter to the value supplied in the `newPassword` parameter. If the connection string includes the option for integrated security (that is, \\\"Integrated Security=True\\\" or the equivalent), an exception is thrown.  \\n  \\n To determine that the password has expired, calling the <xref:System.Data.SqlClient.SqlConnection.Open%2A> method raises a <xref:System.Data.SqlClient.SqlException>. In order to indicate that the password that is contained within the connection string must be reset, the <xref:System.Data.SqlClient.SqlException.Number%2A> property for the exception contains the status value 18487 or 18488. The first value (18487) indicates that the password has expired and the second (18488) indicates that the password must be reset before logging in.  \\n  \\n This method opens its own connection to the server, requests the password change, and closes the connection as soon as it has completed. This connection is not retrieved from, nor returned to, the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] connection pool.\"\n  example:\n  - \"The following is a simple example of changing a password:  \\n  \\n```  \\nclass Program {  \\n   static void Main(string[] args) {  \\n      System.Data.SqlClient.SqlConnection.ChangePassword(  \\n        \\\"Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password\\\",   \\n       \\\"new_password\\\");  \\n   }  \\n}  \\n  \\n```  \\n  \\n```  \\nModule Module1  \\n    Sub Main()  \\nSystem.Data.SqlClient.SqlConnection.ChangePassword(  \\n        \\\"Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password\\\",   \\n       \\\"new_password\\\")  \\n    End Sub  \\nEnd Module  \\n  \\n```  \\n  \\n The following console application demonstrates the issues involved in changing a user's password because the current password has expired.  \\n  \\n [!code-cs[DataWorks SqlConnection.ChangePassword#1](~/add/codesnippet/csharp/7b66f468-c7fc-4a76-bd4e-_1.cs)]\\n [!code-vb[DataWorks SqlConnection.ChangePassword#1](~/add/codesnippet/visualbasic/7b66f468-c7fc-4a76-bd4e-_1.vb)]\"\n  syntax:\n    content: public static void ChangePassword (string connectionString, string newPassword);\n    parameters:\n    - id: connectionString\n      type: System.String\n      description: The connection string that contains enough information to connect to the server that you want. The connection string must contain the user ID and the current password.\n    - id: newPassword\n      type: System.String\n      description: The new password to set. This password must comply with any password security policy set on the server, including minimum length, requirements for specific characters, and so on.\n  overload: System.Data.SqlClient.SqlConnection.ChangePassword*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The connection string includes the option to use integrated security.  \\n  \\n Or  \\n  \\n The <code>newPassword</code> exceeds 128 characters.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Either the <code>connectionString</code> or the <code>newPassword</code> parameter is null.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)\n  id: ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ChangePassword(String,SqlCredential,SecureString)\n  nameWithType: SqlConnection.ChangePassword(String,SqlCredential,SecureString)\n  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,SqlCredential,SecureString)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Changes the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] password for the user indicated in the <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object.\n  syntax:\n    content: public static void ChangePassword (string connectionString, System.Data.SqlClient.SqlCredential credential, System.Security.SecureString newSecurePassword);\n    parameters:\n    - id: connectionString\n      type: System.String\n      description: 'The connection string that contains enough information to connect to a server. The connection string should not use any of the following connection string keywords: <xref uid=\"langword_csharp_Integrated Security = true\" name=\"Integrated Security = true\" href=\"\"></xref>, <xref uid=\"langword_csharp_UserId\" name=\"UserId\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Password\" name=\"Password\" href=\"\"></xref>; or <xref uid=\"langword_csharp_ContextConnection = true\" name=\"ContextConnection = true\" href=\"\"></xref>.'\n    - id: credential\n      type: System.Data.SqlClient.SqlCredential\n      description: A <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object.\n    - id: newSecurePassword\n      type: System.Security.SecureString\n      description: The new password. `newSecurePassword` must be read only. The password must also comply with any password security policy set on the server (for example, minimum length and requirements for specific characters).\n  overload: System.Data.SqlClient.SqlConnection.ChangePassword*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"1.  The connection string contains any combination of <xref uid=\\\"langword_csharp_UserId\\\" name=\\\"UserId\\\" href=\\\"\\\"></xref>, <xref uid=\\\"langword_csharp_Password\\\" name=\\\"Password\\\" href=\\\"\\\"></xref>, or <xref uid=\\\"langword_csharp_Integrated Security=true\\\" name=\\\"Integrated Security=true\\\" href=\\\"\\\"></xref>.  \\n  \\n2.  The connection string contains <xref uid=\\\"langword_csharp_Context Connection=true\\\" name=\\\"Context Connection=true\\\" href=\\\"\\\"></xref>.  \\n  \\n3.  <code>newSecurePassword</code> is greater than 128 characters.  \\n  \\n4.  <code>newSecurePassword</code> is not read only.  \\n  \\n5.  <code>newSecurePassword</code> is an empty string.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One of the parameters (<code>connectionString</code>, <code>credential</code>, or <code>newSecurePassword</code>) is null.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ClearAllPools\n  id: ClearAllPools\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ClearAllPools()\n  nameWithType: SqlConnection.ClearAllPools()\n  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Empties the connection pool.\n  remarks: ClearAllPools resets (or empties) the connection pool. If there are connections in use at the time of the call, they are marked appropriately and will be discarded (instead of being returned to the pool) when <xref:System.Data.SqlClient.SqlConnection.Close%2A> is called on them.\n  syntax:\n    content: public static void ClearAllPools ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlConnection.ClearAllPools*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)\n  id: ClearPool(System.Data.SqlClient.SqlConnection)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ClearPool(SqlConnection)\n  nameWithType: SqlConnection.ClearPool(SqlConnection)\n  fullName: System.Data.SqlClient.SqlConnection.ClearPool(SqlConnection)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Empties the connection pool associated with the specified connection.\n  remarks: ClearPool clears the connection pool that is associated with the `connection`. If additional connections associated with `connection` are in use at the time of the call, they are marked appropriately and are discarded (instead of being returned to the pool) when <xref:System.Data.SqlClient.SqlConnection.Close%2A> is called on them.\n  syntax:\n    content: public static void ClearPool (System.Data.SqlClient.SqlConnection connection);\n    parameters:\n    - id: connection\n      type: System.Data.SqlClient.SqlConnection\n      description: The <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> to be cleared from the pool.\n  overload: System.Data.SqlClient.SqlConnection.ClearPool*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId\n  id: ClientConnectionId\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ClientConnectionId\n  nameWithType: SqlConnection.ClientConnectionId\n  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: The connection ID of the most recent connection attempt, regardless of whether the attempt succeeded or failed.\n  remarks: \"ClientConnectionId works regardless of which version of the server you connect to, but extended events logs and entry on connectivity ring buffer errors will not be present in [!INCLUDE[sskatmai_r2](~/add/includes/ajax-current-ext-md.md)] and earlier.  \\n  \\n You can locate the connection ID in the extended events log to see if the failure was on the server if the extended event for logging connection ID is enabled. You can also locate the connection ID in the connection ring buffer ([Connectivity troubleshooting in SQL Server 2008 with the Connectivity Ring Buffer](http://go.microsoft.com/fwlink/?LinkId=207752)) for certain connection errors. If the connection ID is not in the connection ring buffer, you can assume a network error.\"\n  syntax:\n    content: public Guid ClientConnectionId { get; }\n    return:\n      type: System.Guid\n      description: The connection ID of the most recent connection attempt.\n  overload: System.Data.SqlClient.SqlConnection.ClientConnectionId*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.Close\n  id: Close\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: SqlConnection.Close()\n  fullName: System.Data.SqlClient.SqlConnection.Close()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Closes the connection to the database. This is the preferred method of closing any open connection.\n  remarks: \"The Close method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.  \\n  \\n> [!NOTE]\\n>  Pending transactions started using [!INCLUDE[tsql](~/add/includes/tsql-md.md)] or <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> are automatically rolled back when the connection is reset if connection pooling is enabled. If connection pooling is off, the transaction is rolled back after `SqlConnection.Close` is called. Transactions started through <xref:System.Transactions> are controlled through the `System.Transactions` infrastructure, and are not affected by `SqlConnection.Close`.  \\n  \\n An application can call Close more than one time. No exception is generated.  \\n  \\n If the <xref:System.Data.SqlClient.SqlConnection> goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling `Close` or `Dispose`. `Close` and `Dispose` are functionally equivalent. If the connection pooling value `Pooling` is set to `true` or `yes`, the underlying connection is returned back to the connection pool. On the other hand, if `Pooling` is set to `false` or `no`, the underlying connection to the server is closed.  \\n  \\n> [!NOTE]\\n>  Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see [SQL Server Connection Pooling (ADO.NET)](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!CAUTION]\\n>  Do not call `Close` or `Dispose` on a Connection, a DataReader, or any other managed object in the `Finalize` method of your class. In a finalizer, you should only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a `Finalize` method in your class definition. For more information, see [Garbage Collection](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, displays some of its properties. The connection is automatically closed at the end of the `using` block.  \\n  \\n [!code-vb[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._20_1.vb)]\\n [!code-cs[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._20_1.cs)]\"\n  syntax:\n    content: public override void Close ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlConnection.Close*\n  exceptions:\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: The connection-level error that occurred while opening the connection.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl\n  id: ColumnEncryptionKeyCacheTtl\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ColumnEncryptionKeyCacheTtl\n  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl\n  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets or sets the time-to-live for column encryption key entries in the column encryption key cache for the [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx) feature. The default value is 2 hours. 0 means no caching at all.\n  syntax:\n    content: public static TimeSpan ColumnEncryptionKeyCacheTtl { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The time interval.\n  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled\n  id: ColumnEncryptionQueryMetadataCacheEnabled\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ColumnEncryptionQueryMetadataCacheEnabled\n  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled\n  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets or sets a value that indicates whether query metadata caching is enabled (true) or not (false) for parameterized queries running against [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx) enabled databases. The default value is true.\n  remarks: \"For parameterized queries, SqlClient makes a roundtrip to SQL Server for parameter metadata, to see which parameter it needs to encrypt and how (which keys and algorithms should be used). If the application calls the same query multiple times, an extra roundtrip is made to the server each time, which degrades application performance.  \\n  \\n With **ColumnEncryptionQueryMetadataCacheEnabled** set to true, if the same query is called multiple times, the roundtrip to the server will be made only once. The cache has a non-configurable Max size parameter that is set to 2000 queries.\"\n  syntax:\n    content: public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns true if query metadata caching is enabled; otherwise false. true is the default.\n  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths\n  id: ColumnEncryptionTrustedMasterKeyPaths\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ColumnEncryptionTrustedMasterKeyPaths\n  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths\n  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Allows you to set a list of trusted key paths for a database server. If while processing an application query the driver receives a key path that is not on the list, the query will fail. This property provides additional protection against security attacks that involve a compromised SQL Server providing fake key paths, which may lead to leaking key store credentials.\n  syntax:\n    content: public static System.Collections.Generic.IDictionary<string,System.Collections.Generic.IList<string>> ColumnEncryptionTrustedMasterKeyPaths { get; }\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}\n      description: The list of trusted master key paths for the column encryption.\n  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ConnectionString\n  id: ConnectionString\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ConnectionString\n  nameWithType: SqlConnection.ConnectionString\n  fullName: System.Data.SqlClient.SqlConnection.ConnectionString\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets or sets the string used to open a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database.\n  remarks: \"The ConnectionString is similar to an OLE DB connection string, but is not identical. Unlike OLE DB or ADO, the connection string that is returned is the same as the user-set ConnectionString, minus security information if the Persist Security Info value is set to `false` (default). The [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] does not persist or return the password in a connection string unless you set Persist Security Info to `true`.  \\n  \\n You can use the ConnectionString property to connect to a database. The following example illustrates a typical connection string.  \\n  \\n```  \\n\\\"Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)\\\"  \\n```  \\n  \\n Use the new <xref:System.Data.SqlClient.SqlConnectionStringBuilder> to construct valid connection strings at run time. For more information, see [Connection String Builders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The ConnectionString property can be set only when the connection is closed. Many of the connection string values have corresponding read-only properties. When the connection string is set, these properties are updated, except when an error is detected. In this case, none of the properties are updated. <xref:System.Data.SqlClient.SqlConnection> properties return only those settings that are contained in the ConnectionString.  \\n  \\n To connect to a local computer, specify \\\"(local)\\\" for the server. If a server name is not specified, a connection will be attempted to the default instance on the local computer.  \\n  \\n Resetting the ConnectionString on a closed connection resets all connection string values (and related properties) including the password. For example, if you set a connection string that includes \\\"Database= AdventureWorks\\\", and then reset the connection string to \\\"Data Source=myserver;Integrated Security=true\\\", the <xref:System.Data.SqlClient.SqlConnection.Database%2A> property is no longer set to \\\"AdventureWorks\\\".  \\n  \\n The connection string is parsed immediately after being set. If errors in syntax are found when parsing, a runtime exception, such as <xref:System.ArgumentException>, is generated. Other errors can be found only when an attempt is made to open the connection.  \\n  \\n The basic format of a connection string includes a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotation marks. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotation marks. The single quotation mark is also useful if the value starts with a double-quote character. Conversely, the double quotation mark can be used if the value starts with a single quotation mark. If the value contains both single-quote and double-quote characters, the quotation mark character used to enclose the value must be doubled every time it occurs within the value.  \\n  \\n To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotation marks or double quotation marks. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotation marks. However, spaces within a string literal keyword or value are preserved. Single or double quotation marks may be used within a connection string without using delimiters (for example, Data Source= my'Server or Data Source= my\\\"Server), unless a quotation mark character is the first or last character in the value.  \\n  \\n Keywords are not case sensitive.  \\n  \\n The following table lists the valid names for keyword values within the ConnectionString.  \\n  \\n  The following list contains the valid names for connection pooling values within the ConnectionString. For more information, see [SQL Server Connection Pooling (ADO.NET)](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   Connection Lifetime (or Load Balance Timeout)  \\n  \\n-   Enlist  \\n  \\n-   Max Pool Size  \\n  \\n-   Min Pool Size  \\n  \\n-   Pooling  \\n  \\n When you are setting keyword or connection pooling values that require a Boolean value, you can use 'yes' instead of 'true', and 'no' instead of 'false'. Integer values are represented as strings.  \\n  \\n> [!NOTE]\\n>  The [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] uses its own protocol to communicate with [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]. Therefore, it does not support the use of an ODBC data source name (DSN) when connecting to [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] because it does not add an ODBC layer.  \\n  \\n> [!NOTE]\\n>  Universal data link (UDL) files are not supported for the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].  \\n  \\n> [!CAUTION]\\n>  In this release, the application should use caution when constructing a connection string based on user input (for example when retrieving user ID and password information from a dialog box, and appending it to the connection string). The application should make sure that a user cannot embed additional connection string parameters in these values (for example, entering a password as \\\"validpassword;database=somedb\\\" in an attempt to attach to a different database). If you need to construct connection strings based on user input, use the new <xref:System.Data.SqlClient.SqlConnectionStringBuilder>, which validates the connection string and helps to eliminate this problem. See [Connection String Builders](../Topic/Connection%20String%20Builders.md) for more information.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the ConnectionString property before opening the connection.  \\n  \\n [!code-vb[Classic WebData SqlConnection.ConnectionString Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._24_1.vb)]\\n [!code-cs[Classic WebData SqlConnection.ConnectionString Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._24_1.cs)]\"\n  syntax:\n    content: public override string ConnectionString { get; set; }\n    return:\n      type: System.String\n      description: The connection string that includes the source database name, and other parameters needed to establish the initial connection. The default value is an empty string.\n  overload: System.Data.SqlClient.SqlConnection.ConnectionString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An invalid connection string argument has been supplied, or a required connection string argument has not been supplied.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout\n  id: ConnectionTimeout\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ConnectionTimeout\n  nameWithType: SqlConnection.ConnectionTimeout\n  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.\n  remarks: You can set the amount of time a connection waits to time out by using the `Connect``Timeout` or `Connection Timeout` keywords in the connection string. A value of 0 indicates no limit, and should be avoided in a <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> because an attempt to connect waits indefinitely.\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the `Connection Timeout` to 30 seconds in the connection string. The code opens the connection and displays the ConnectionTimeout property in the console window.  \\n  \\n [!code-vb[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._28_1.vb)]\\n [!code-cs[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._28_1.cs)]\"\n  syntax:\n    content: public override int ConnectionTimeout { get; }\n    return:\n      type: System.Int32\n      description: The time (in seconds) to wait for a connection to open. The default value is 15 seconds.\n  overload: System.Data.SqlClient.SqlConnection.ConnectionTimeout*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value set is less than 0.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.CreateCommand\n  id: CreateCommand\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: CreateCommand()\n  nameWithType: SqlConnection.CreateCommand()\n  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Creates and returns a <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> object associated with the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref>.\n  remarks: ''\n  example:\n  - >-\n    [!code-vb[SqlConnection_CreateCommand#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._32_1.vb)]\n     [!code-cs[SqlConnection_CreateCommand#1](~/add/codesnippet/csharp/m-system.data.sqlclient._32_1.cs)]\n  syntax:\n    content: public System.Data.SqlClient.SqlCommand CreateCommand ();\n    parameters: []\n    return:\n      type: System.Data.SqlClient.SqlCommand\n      description: A <xref href=\"System.Data.SqlClient.SqlCommand\"></xref> object.\n  overload: System.Data.SqlClient.SqlConnection.CreateCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand\n  id: CreateDbCommand\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: CreateDbCommand()\n  nameWithType: SqlConnection.CreateDbCommand()\n  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override System.Data.Common.DbCommand CreateDbCommand ();\n    parameters: []\n    return:\n      type: System.Data.Common.DbCommand\n      description: To be added.\n  overload: System.Data.SqlClient.SqlConnection.CreateDbCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.Credential\n  id: Credential\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: Credential\n  nameWithType: SqlConnection.Credential\n  fullName: System.Data.SqlClient.SqlConnection.Credential\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets or sets the <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object for this connection.\n  remarks: \"`Persist Security Info = true` is required to get the value of the <xref:System.Data.SqlClient.SqlCredential> object with Credential.  \\n  \\n The default value of Credential is null.  \\n  \\n An <xref:System.InvalidOperationException> exception will be raised:  \\n  \\n-   If Credential is set on an open connection.  \\n  \\n-   If Credential is set when `Context Connection=true`.  \\n  \\n-   If Credential is set when `Integrated Security = true`.  \\n  \\n-   If Credential is set when the connection string uses `Password`.  \\n  \\n-   If Credential is set when the connection string uses `UserID`.\"\n  syntax:\n    content: public System.Data.SqlClient.SqlCredential Credential { get; set; }\n    return:\n      type: System.Data.SqlClient.SqlCredential\n      description: The <xref href=\"System.Data.SqlClient.SqlCredential\"></xref> object for this connection.\n  overload: System.Data.SqlClient.SqlConnection.Credential*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.Database\n  id: Database\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: Database\n  nameWithType: SqlConnection.Database\n  fullName: System.Data.SqlClient.SqlConnection.Database\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets the name of the current database or the database to be used after a connection is opened.\n  remarks: The Database property updates dynamically. If you change the current database using a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] statement or the <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A> method, an informational message is sent and the property is updated automatically.\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \\n  \\n [!code-cs[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._26_1.cs)]\\n [!code-vb[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._26_1.vb)]\"\n  syntax:\n    content: public override string Database { get; }\n    return:\n      type: System.String\n      description: The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.\n  overload: System.Data.SqlClient.SqlConnection.Database*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.DataSource\n  id: DataSource\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: DataSource\n  nameWithType: SqlConnection.DataSource\n  fullName: System.Data.SqlClient.SqlConnection.DataSource\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets the name of the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] to which to connect.\n  remarks: >-\n    > [!NOTE]\n\n    >  The DataSource property returns `null` if the connection string for the <xref:System.Data.SqlClient.SqlConnection> is \"context connection=true\".\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \\n  \\n [!code-vb[Classic WebData SqlConnection.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._62_1.vb)]\\n [!code-cs[Classic WebData SqlConnection.DataSource Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._62_1.cs)]\"\n  syntax:\n    content: public override string DataSource { get; }\n    return:\n      type: System.String\n      description: The name of the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] to which to connect. The default value is an empty string.\n  overload: System.Data.SqlClient.SqlConnection.DataSource*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory\n  id: DbProviderFactory\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: DbProviderFactory\n  nameWithType: SqlConnection.DbProviderFactory\n  fullName: System.Data.SqlClient.SqlConnection.DbProviderFactory\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }\n    return:\n      type: System.Data.Common.DbProviderFactory\n      description: To be added.\n  overload: System.Data.SqlClient.SqlConnection.DbProviderFactory*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SqlConnection.Dispose(Boolean)\n  fullName: System.Data.SqlClient.SqlConnection.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.SqlClient.SqlConnection.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)\n  id: EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: EnlistDistributedTransaction(ITransaction)\n  nameWithType: SqlConnection.EnlistDistributedTransaction(ITransaction)\n  fullName: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(ITransaction)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Enlists in the specified transaction as a distributed transaction.\n  remarks: \"You can use the <xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction** for this purpose. For more information, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md).  \\n  \\n You can continue to enlist in an existing distributed transaction using the **EnlistDistributedTransaction** method if auto-enlistment is disabled. Enlisting in an existing distributed transaction makes sure that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back.  \\n  \\n `EnlistDistributedTransaction` returns an exception if the <xref:System.Data.SqlClient.SqlConnection> has already started a transaction using <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>. However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an <xref:System.Data.SqlClient.SqlCommand> object), **EnlistDistributedTransaction** rolls back the local transaction and enlists in the existing distributed transaction as requested. You do not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.\"\n  syntax:\n    content: public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);\n    parameters:\n    - id: transaction\n      type: System.EnterpriseServices.ITransaction\n      description: A reference to an existing <xref href=\"System.EnterpriseServices.ITransaction\"></xref> in which to enlist.\n  overload: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)\n  id: EnlistTransaction(System.Transactions.Transaction)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: EnlistTransaction(Transaction)\n  nameWithType: SqlConnection.EnlistTransaction(Transaction)\n  fullName: System.Data.SqlClient.SqlConnection.EnlistTransaction(Transaction)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Enlists in the specified transaction as a distributed transaction.\n  remarks: 'You can use the EnlistTransaction method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction**, which uses a **System.EnterpriseServices.ITransaction** object. It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes. For more information about distributed transactions, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md).'\n  syntax:\n    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);\n    parameters:\n    - id: transaction\n      type: System.Transactions.Transaction\n      description: A reference to an existing <xref href=\"System.Transactions.Transaction\"></xref> in which to enlist.\n  overload: System.Data.SqlClient.SqlConnection.EnlistTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\n  id: FireInfoMessageEventOnUserErrors\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: FireInfoMessageEventOnUserErrors\n  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors\n  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets or sets the FireInfoMessageEventOnUserErrors property.\n  remarks: \"When you set FireInfoMessageEventOnUserErrors to `true`, errors that were previously treated as exceptions are now handled as <xref:System.Data.SqlClient.SqlConnection.InfoMessage> events. All events fire immediately and are handled by the event handler. If is FireInfoMessageEventOnUserErrors is set to `false`, then <xref:System.Data.SqlClient.SqlConnection.InfoMessage> events are handled at the end of the procedure.  \\n  \\n> [!NOTE]\\n>  An error with a severity level of 17 or above that causes the server to stop processing the command needs to be handled as an exception. In this case, an exception is thrown regardless of how the error is handled in the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event.  \\n  \\n For more information on working with events, see [Connection Events](~/add/includes/ajax-current-ext-md.md). For more information on errors generated by the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] engine, see [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.\"\n  syntax:\n    content: public bool FireInfoMessageEventOnUserErrors { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the FireInfoMessageEventOnUserErrors property has been set; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.GetSchema\n  id: GetSchema\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: GetSchema()\n  nameWithType: SqlConnection.GetSchema()\n  fullName: System.Data.SqlClient.SqlConnection.GetSchema()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Returns schema information for the data source of this <xref href=\"System.Data.SqlClient.SqlConnection\"></xref>. For more information about scheme, see [SQL Server Schema Collections](http://msdn.microsoft.com/library/ms254969.aspx).\n  syntax:\n    content: public override System.Data.DataTable GetSchema ();\n    parameters: []\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> that contains schema information.\n  overload: System.Data.SqlClient.SqlConnection.GetSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String)\n  id: GetSchema(System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: GetSchema(String)\n  nameWithType: SqlConnection.GetSchema(String)\n  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Returns schema information for the data source of this <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> using the specified string for the schema name.\n  remarks: \"You may need the schema information of the database, tables or columns. This sample:  \\n  \\n-   Uses GetSchema to get schema information.  \\n  \\n-   Use schema restrictions to get the specified information.  \\n  \\n-   Gets schema information of the database, tables, and some columns.  \\n  \\n Before you run the sample, you need to create the sample database, using the following [!INCLUDE[tsql](~/add/includes/tsql-md.md)]:  \\n  \\n```  \\nUSE [master]  \\nGO  \\n  \\nCREATE DATABASE [MySchool]   \\n  \\nGO  \\n  \\nUSE [MySchool]  \\nGO  \\n  \\nSET ANSI_NULLS ON  \\nGO  \\nSET QUOTED_IDENTIFIER ON  \\nGO  \\nCREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,  \\n[Year] [smallint] NOT NULL,  \\n[Title] [nvarchar](100) NOT NULL,  \\n[Credits] [int] NOT NULL,  \\n[DepartmentID] [int] NOT NULL,  \\n CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   \\n(  \\n[CourseID] ASC,  \\n[Year] ASC  \\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \\n  \\nGO  \\n  \\nSET ANSI_NULLS ON  \\nGO  \\nSET QUOTED_IDENTIFIER ON  \\nGO  \\nCREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \\n[Name] [nvarchar](50) NOT NULL,  \\n[Budget] [money] NOT NULL,  \\n[StartDate] [datetime] NOT NULL,  \\n[Administrator] [int] NULL,  \\n CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   \\n(  \\n[DepartmentID] ASC  \\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \\n  \\nGO  \\n  \\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  \\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  \\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  \\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  \\n  \\nSET IDENTITY_INSERT [dbo].[Department] ON   \\n  \\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  \\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  \\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  \\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  \\nSET IDENTITY_INSERT [dbo].[Department] OFF  \\n  \\nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  \\nREFERENCES [dbo].[Department] ([DepartmentID])  \\nGO  \\nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  \\nGO  \\n```  \\n  \\n [How to Get Schema Information from Database](http://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2) has C# and Visual Basic versions of this code sample in a Visual Studio project.  \\n  \\n```  \\nusing System;  \\nusing System.Data;  \\nusing System.Data.SqlClient;  \\n  \\nclass Program {  \\n   static void Main(string[] args) {  \\n  \\n      using (SqlConnection conn = new SqlConnection(\\\"Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;\\\")) {  \\n         conn.Open();  \\n  \\n         // Get the Meta Data for Supported Schema Collections  \\n         DataTable metaDataTable = conn.GetSchema(\\\"MetaDataCollections\\\");  \\n  \\n         Console.WriteLine(\\\"Meta Data for Supported Schema Collections:\\\");  \\n         ShowDataTable(metaDataTable, 25);  \\n         Console.WriteLine();  \\n  \\n         // Get the schema information of Databases in your instance  \\n         DataTable databasesSchemaTable = conn.GetSchema(\\\"Databases\\\");  \\n  \\n         Console.WriteLine(\\\"Schema Information of Databases:\\\");  \\n         ShowDataTable(databasesSchemaTable, 25);  \\n         Console.WriteLine();  \\n  \\n         // First, get schema information of all the tables in current database;  \\n         DataTable allTablesSchemaTable = conn.GetSchema(\\\"Tables\\\");  \\n  \\n         Console.WriteLine(\\\"Schema Information of All Tables:\\\");  \\n         ShowDataTable(allTablesSchemaTable, 20);  \\n         Console.WriteLine();  \\n  \\n         // You can specify the Catalog, Schema, Table Name, Table Type to get   \\n         // the specified table(s).  \\n         // You can use four restrictions for Table, so you should create a 4 members array.  \\n         String[] tableRestrictions = new String[4];  \\n  \\n         // For the array, 0-member represents Catalog; 1-member represents Schema;   \\n         // 2-member represents Table Name; 3-member represents Table Type.   \\n         // Now we specify the Table Name of the table what we want to get schema information.  \\n         tableRestrictions[2] = \\\"Course\\\";  \\n  \\n         DataTable courseTableSchemaTable = conn.GetSchema(\\\"Tables\\\", tableRestrictions);  \\n  \\n         Console.WriteLine(\\\"Schema Information of Course Tables:\\\");  \\n         ShowDataTable(courseTableSchemaTable, 20);  \\n         Console.WriteLine();  \\n  \\n         // First, get schema information of all the columns in current database.  \\n         DataTable allColumnsSchemaTable = conn.GetSchema(\\\"Columns\\\");  \\n  \\n         Console.WriteLine(\\\"Schema Information of All Columns:\\\");  \\n         ShowColumns(allColumnsSchemaTable);  \\n         Console.WriteLine();  \\n  \\n         // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).  \\n         // You can use four restrictions for Column, so you should create a 4 members array.  \\n         String[] columnRestrictions = new String[4];  \\n  \\n         // For the array, 0-member represents Catalog; 1-member represents Schema;   \\n         // 2-member represents Table Name; 3-member represents Column Name.   \\n         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  \\n         columnRestrictions[2] = \\\"Course\\\";  \\n         columnRestrictions[3] = \\\"DepartmentID\\\";  \\n  \\n         DataTable departmentIDSchemaTable = conn.GetSchema(\\\"Columns\\\", columnRestrictions);  \\n  \\n         Console.WriteLine(\\\"Schema Information of DepartmentID Column in Course Table:\\\");  \\n         ShowColumns(departmentIDSchemaTable);  \\n         Console.WriteLine();  \\n  \\n         // First, get schema information of all the IndexColumns in current database  \\n         DataTable allIndexColumnsSchemaTable = conn.GetSchema(\\\"IndexColumns\\\");  \\n  \\n         Console.WriteLine(\\\"Schema Information of All IndexColumns:\\\");  \\n         ShowIndexColumns(allIndexColumnsSchemaTable);  \\n         Console.WriteLine();  \\n  \\n         // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to   \\n         // get the specified column(s).  \\n         // You can use five restrictions for Column, so you should create a 5 members array.  \\n         String[] indexColumnsRestrictions = new String[5];  \\n  \\n         // For the array, 0-member represents Catalog; 1-member represents Schema;   \\n         // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.   \\n         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  \\n         indexColumnsRestrictions[2] = \\\"Course\\\";  \\n         indexColumnsRestrictions[4] = \\\"CourseID\\\";  \\n  \\n         DataTable courseIdIndexSchemaTable = conn.GetSchema(\\\"IndexColumns\\\", indexColumnsRestrictions);  \\n  \\n         Console.WriteLine(\\\"Index Schema Information of CourseID Column in Course Table:\\\");  \\n         ShowIndexColumns(courseIdIndexSchemaTable);  \\n         Console.WriteLine();  \\n      }  \\n  \\n      Console.WriteLine(\\\"Please press any key to exit...\\\");  \\n      Console.ReadKey();  \\n   }  \\n  \\n   private static void ShowDataTable(DataTable table, Int32 length) {  \\n      foreach (DataColumn col in table.Columns) {  \\n         Console.Write(\\\"{0,-\\\" + length + \\\"}\\\", col.ColumnName);  \\n      }  \\n      Console.WriteLine();  \\n  \\n      foreach (DataRow row in table.Rows) {  \\n         foreach (DataColumn col in table.Columns) {  \\n            if (col.DataType.Equals(typeof(DateTime)))  \\n               Console.Write(\\\"{0,-\\\" + length + \\\":d}\\\", row[col]);  \\n            else if (col.DataType.Equals(typeof(Decimal)))  \\n               Console.Write(\\\"{0,-\\\" + length + \\\":C}\\\", row[col]);  \\n            else  \\n               Console.Write(\\\"{0,-\\\" + length + \\\"}\\\", row[col]);  \\n         }  \\n         Console.WriteLine();  \\n      }  \\n   }  \\n  \\n   private static void ShowDataTable(DataTable table) {  \\n      ShowDataTable(table, 14);  \\n   }  \\n  \\n   private static void ShowColumns(DataTable columnsTable) {  \\n      var selectedRows = from info in columnsTable.AsEnumerable()  \\n                         select new {  \\n                            TableCatalog = info[\\\"TABLE_CATALOG\\\"],  \\n                            TableSchema = info[\\\"TABLE_SCHEMA\\\"],  \\n                            TableName = info[\\\"TABLE_NAME\\\"],  \\n                            ColumnName = info[\\\"COLUMN_NAME\\\"],  \\n                            DataType = info[\\\"DATA_TYPE\\\"]  \\n                         };  \\n  \\n      Console.WriteLine(\\\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\\\", \\\"TableCatalog\\\", \\\"TABLE_SCHEMA\\\",  \\n          \\\"TABLE_NAME\\\", \\\"COLUMN_NAME\\\", \\\"DATA_TYPE\\\");  \\n      foreach (var row in selectedRows) {  \\n         Console.WriteLine(\\\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\\\", row.TableCatalog,  \\n             row.TableSchema, row.TableName, row.ColumnName, row.DataType);  \\n      }  \\n   }  \\n  \\n   private static void ShowIndexColumns(DataTable indexColumnsTable) {  \\n      var selectedRows = from info in indexColumnsTable.AsEnumerable()  \\n                         select new {  \\n                            TableSchema = info[\\\"table_schema\\\"],  \\n                            TableName = info[\\\"table_name\\\"],  \\n                            ColumnName = info[\\\"column_name\\\"],  \\n                            ConstraintSchema = info[\\\"constraint_schema\\\"],  \\n                            ConstraintName = info[\\\"constraint_name\\\"],  \\n                            KeyType = info[\\\"KeyType\\\"]  \\n                         };  \\n  \\n      Console.WriteLine(\\\"{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}\\\", \\\"table_schema\\\", \\\"table_name\\\", \\\"column_name\\\", \\\"constraint_schema\\\", \\\"constraint_name\\\", \\\"KeyType\\\");  \\n      foreach (var row in selectedRows) {  \\n         Console.WriteLine(\\\"{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}\\\", row.TableSchema,  \\n             row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);  \\n      }  \\n   }  \\n}  \\n```\"\n  syntax:\n    content: public override System.Data.DataTable GetSchema (string collectionName);\n    parameters:\n    - id: collectionName\n      type: System.String\n      description: Specifies the name of the schema to return.\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> that contains schema information.\n  overload: System.Data.SqlClient.SqlConnection.GetSchema*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>collectionName</code> is specified as null.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])\n  id: GetSchema(System.String,System.String[])\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: GetSchema(String,String[])\n  nameWithType: SqlConnection.GetSchema(String,String[])\n  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String,String[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Returns schema information for the data source of this <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> using the specified string for the schema name and the specified string array for the restriction values.\n  remarks: \"The `restrictionValues` parameter can supply *n* depth of values, which are specified by the restrictions collection for a specific collection. In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to `null` and then put the appropriate value in for the restriction that you would like to specify a value for.  \\n  \\n An example of this is the \\\"Tables\\\" collection. If the \\\"Tables\\\" collection has three restrictions--database, owner, and table name--and you want to get back only the tables associated with the owner \\\"Carl\\\", you need to pass in the following values: null, \\\"Carl\\\". If a restriction value is not passed in, the default values are used for that restriction. This is the same mapping as passing in `null`, which is different from passing in an empty string for the parameter value. In that case, the empty string (\\\"\\\") is considered to be the value for the specified parameter.  \\n  \\n For a code sample demonstrating GetSchema, see <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>.\"\n  syntax:\n    content: public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);\n    parameters:\n    - id: collectionName\n      type: System.String\n      description: Specifies the name of the schema to return.\n    - id: restrictionValues\n      type: System.String[]\n      description: A set of restriction values for the requested schema.\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> that contains schema information.\n  overload: System.Data.SqlClient.SqlConnection.GetSchema*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>collectionName</code> is specified as null.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.InfoMessage\n  id: InfoMessage\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: InfoMessage\n  nameWithType: SqlConnection.InfoMessage\n  fullName: System.Data.SqlClient.SqlConnection.InfoMessage\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Occurs when [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] returns a warning or informational message.\n  remarks: \"Clients that want to process warnings or informational messages sent by the server should create an <xref:System.Data.SqlClient.SqlInfoMessageEventHandler> delegate to listen to this event.  \\n  \\n The InfoMessage event occurs when a message with a severity of 10 or less is returned by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]. Messages that have a severity between 11 and 20 raise an error and messages that have a severity over 20 causes the connection to close. For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] error levels, see \\\"Database Engine Error Severities\\\" in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.  \\n  \\n For more information and an example, see [Connection Events](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage;\n    return:\n      type: System.Data.SqlClient.SqlInfoMessageEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.Open\n  id: Open\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: Open()\n  nameWithType: SqlConnection.Open()\n  fullName: System.Data.SqlClient.SqlConnection.Open()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Opens a database connection with the property settings specified by the <xref:System.Data.SqlClient.SqlConnection.ConnectionString*>.\n  remarks: \"The <xref:System.Data.SqlClient.SqlConnection> draws an open connection from the connection pool if one is available. Otherwise, it establishes a new connection to an instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].  \\n  \\n> [!NOTE]\\n>  If the <xref:System.Data.SqlClient.SqlConnection> goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling <xref:System.Data.SqlClient.SqlConnection.Close%2A>.  \\n  \\n> [!NOTE]\\n>  If you specify a port number other than 1433 when you are trying to connect to an instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] and using a protocol other than TCP/IP, the Open method fails. To specify a port number other than 1433, include \\\"server=machinename,port number\\\" in the connection string, and use the TCP/IP protocol.  \\n  \\n> [!NOTE]\\n>  The [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] requires the Security permission with \\\"Allows calls to unmanaged assemblies\\\" enabled (<xref:System.Security.Permissions.SecurityPermission> with <xref:System.Security.Permissions.SecurityPermissionFlag> set to `UnmanagedCode`) to open a <xref:System.Data.SqlClient.SqlConnection> with SQL Debugging enabled.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, and displays some of its properties. The connection is automatically closed at the end of the `using` block.  \\n  \\n [!code-vb[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._18_1.vb)]\\n [!code-cs[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._18_1.cs)]\"\n  syntax:\n    content: public override void Open ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlConnection.Open*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Cannot open a connection without specifying a data source or server.  \\n  \\n or  \\n  \\n The connection is already open.\"\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"A connection-level error occurred while opening the connection. If the <xref:System.Data.SqlClient.SqlException.Number*> property contains the value 18487 or 18488, this indicates that the specified password has expired or must be reset. See the <xref:System.Data.SqlClient.SqlConnection.ChangePassword*> method for more information.  \\n  \\n The <xref uid=\\\"langword_csharp_&lt;system.data.localdb&gt;\\\" name=\\\"&lt;system.data.localdb&gt;\\\" href=\\\"\\\"></xref> tag in the app.config file has invalid or unknown elements.\"\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: There are two entries with the same name in the <xref uid=\"langword_csharp_&lt;localdbinstances&gt;\" name=\"&lt;localdbinstances&gt;\" href=\"\"></xref> section.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\n  id: OpenAsync(System.Threading.CancellationToken)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: OpenAsync(CancellationToken)\n  nameWithType: SqlConnection.OpenAsync(CancellationToken)\n  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: An asynchronous version of <xref:System.Data.SqlClient.SqlConnection.Open*>, which opens a database connection with the property settings specified by the <xref:System.Data.SqlClient.SqlConnection.ConnectionString*>. The cancellation token can be used to request that the operation be abandoned before the connection timeout elapses.  Exceptions will be propagated via the returned Task. If the connection timeout time elapses without successfully connecting, the returned Task will be marked as faulted with an Exception. The implementation returns a Task without blocking the calling thread for both pooled and non-pooled connections.\n  remarks: \"After calling OpenAsync, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState> until the returned <xref:System.Threading.Tasks.Task> is completed. Then, if the connection was successful, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState>. If the connection fails, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState>.  \\n  \\n A call to <xref:System.Data.SqlClient.SqlConnection.Close%2A> will attempt to cancel or close the corresponding OpenAsync call.  \\n  \\n For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public override System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation instruction.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task representing the asynchronous operation.\n  overload: System.Data.SqlClient.SqlConnection.OpenAsync*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Calling OpenAsync more than once for the same instance before task completion.  \\n  \\n <xref uid=\\\"langword_csharp_Context Connection=true\\\" name=\\\"Context Connection=true\\\" href=\\\"\\\"></xref> is specified in the connection string.  \\n  \\n A connection was not available from the connection pool before the connection time out elapsed.\"\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: Any error returned by [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] that occurred while opening the connection.\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.PacketSize\n  id: PacketSize\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: PacketSize\n  nameWithType: SqlConnection.PacketSize\n  fullName: System.Data.SqlClient.SqlConnection.PacketSize\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets the size (in bytes) of network packets used to communicate with an instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].\n  remarks: \"If an application performs bulk copy operations, or sends or receives lots of text or image data, a packet size larger than the default may improve efficiency because it causes fewer network read and write operations. If an application sends and receives small amounts of information, you can set the packet size to 512 bytes (using the Packet Size value in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>), which is sufficient for most data transfer operations. For most applications, the default packet size is best.  \\n  \\n PacketSize may be a value in the range of 512 and 32767 bytes. An exception is generated if the value is outside this range.  \\n  \\n Setting the default value to a number greater than 8000 will cause the packets to use the MultiPage allocator on the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] instead of the much more efficient SinglePage allocator, reducing the overall scalability of the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]. For more information on how [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] uses memory, see [Memory Architecture](http://go.microsoft.com/fwlink/?LinkId=143705) in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection>, including setting the `Packet Size` to 512 in the connection string. It displays the PacketSize and <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> properties in the console window.  \\n  \\n [!code-vb[Classic WebData SqlConnection.PacketSize Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._63_1.vb)]\\n [!code-cs[Classic WebData SqlConnection.PacketSize Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._63_1.cs)]\"\n  syntax:\n    content: public int PacketSize { get; }\n    return:\n      type: System.Int32\n      description: The size (in bytes) of network packets. The default value is 8000.\n  overload: System.Data.SqlClient.SqlConnection.PacketSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})\n  id: RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)\n  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)\n  fullName: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Registers the column encryption key store providers.\n  syntax:\n    content: public static void RegisterColumnEncryptionKeyStoreProviders (System.Collections.Generic.IDictionary<string,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider> customProviders);\n    parameters:\n    - id: customProviders\n      type: System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider}\n      description: The custom providers\n  overload: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ResetStatistics\n  id: ResetStatistics\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ResetStatistics()\n  nameWithType: SqlConnection.ResetStatistics()\n  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: If statistics gathering is enabled, all values are reset to zero.\n  remarks: If statistics gathering is not enabled and this method is called, no error is thrown.\n  syntax:\n    content: public void ResetStatistics ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlConnection.ResetStatistics*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics\n  id: RetrieveStatistics\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: RetrieveStatistics()\n  nameWithType: SqlConnection.RetrieveStatistics()\n  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Returns a name value pair collection of statistics at the point in time the method is called.\n  remarks: When this method is called, the values retrieved are those at the current point in time. If you continue using the connection, the values are incorrect. You need to re-execute the method to obtain the most current values.\n  syntax:\n    content: public System.Collections.IDictionary RetrieveStatistics ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionary\n      description: Returns a reference of type <xref:System.Collections.IDictionary> of <xref:System.Collections.DictionaryEntry> items.\n  overload: System.Data.SqlClient.SqlConnection.RetrieveStatistics*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.ServerVersion\n  id: ServerVersion\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: ServerVersion\n  nameWithType: SqlConnection.ServerVersion\n  fullName: System.Data.SqlClient.SqlConnection.ServerVersion\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets a string that contains the version of the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] to which the client is connected.\n  remarks: \"The version is of the form *##.##.####*, where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version. The string is of the form *major.minor.build*, where major and minor are exactly two digits and build is exactly four digits.  \\n  \\n ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the ServerVersion property.  \\n  \\n [!code-vb[Classic WebData ISqlConnection.ServerVersion Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._30_1.vb)]\\n [!code-cs[Classic WebData ISqlConnection.ServerVersion Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._30_1.cs)]\"\n  syntax:\n    content: public override string ServerVersion { get; }\n    return:\n      type: System.String\n      description: The version of the instance of [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].\n  overload: System.Data.SqlClient.SqlConnection.ServerVersion*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The connection is closed.  \\n  \\n ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <xref:System.Data.SqlClient.SqlConnection.OpenAsync*>.\"\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.State\n  id: State\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: State\n  nameWithType: SqlConnection.State\n  fullName: System.Data.SqlClient.SqlConnection.State\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Indicates the state of the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> during the most recent network operation performed on the connection.\n  remarks: Returns an <xref:System.Data.ConnectionState> enumeration indicating the state of the <xref:System.Data.SqlClient.SqlConnection>. Closing and reopening the connection will refresh the value of State.\n  syntax:\n    content: public override System.Data.ConnectionState State { get; }\n    return:\n      type: System.Data.ConnectionState\n      description: An <xref href=\"System.Data.ConnectionState\"></xref> enumeration.\n  overload: System.Data.SqlClient.SqlConnection.State*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled\n  id: StatisticsEnabled\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: StatisticsEnabled\n  nameWithType: SqlConnection.StatisticsEnabled\n  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: When set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, enables statistics gathering for the current connection.\n  remarks: Enabling statistics gathering has a minor, but measurable effect on performance and therefore should be enabled only when it is required.\n  syntax:\n    content: public bool StatisticsEnabled { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if statistics gathering is enabled; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> is the default.\n  overload: System.Data.SqlClient.SqlConnection.StatisticsEnabled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone\n  id: System#ICloneable#Clone\n  isEii: true\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: System.ICloneable.Clone()\n  nameWithType: SqlConnection.System.ICloneable.Clone()\n  fullName: System.Data.SqlClient.SqlConnection.System.ICloneable.Clone()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Creates a new object that is a copy of the current instance.\n  remarks: \"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.SqlClient.SqlConnection> instance is cast to an <xref:System.ICloneable> interface.  \\n  \\n This member is only supported by the .NET Compact Framework.\"\n  syntax:\n    content: object ICloneable.Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A new object that is a copy of this instance.\n  overload: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlClient.SqlConnection.WorkstationId\n  id: WorkstationId\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  name: WorkstationId\n  nameWithType: SqlConnection.WorkstationId\n  fullName: System.Data.SqlClient.SqlConnection.WorkstationId\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Gets a string that identifies the database client.\n  remarks: The string typically contains the network name of the client. The WorkstationId property corresponds to the `Workstation ID` connection string property.\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the WorkstationId property.  \\n  \\n [!code-vb[Classic WebData SqlConnection.WorkstationId Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._7_1.vb)]\\n [!code-cs[Classic WebData SqlConnection.WorkstationId Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._7_1.cs)]\"\n  syntax:\n    content: public string WorkstationId { get; }\n    return:\n      type: System.String\n      description: A string that identifies the database client. If not specified, the name of the client computer. If neither is specified, the value is an empty string.\n  overload: System.Data.SqlClient.SqlConnection.WorkstationId*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Data.Common.DbConnection\n  isExternal: false\n  name: System.Data.Common.DbConnection\n- uid: System.Data.SqlClient.SqlException\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlException\n  nameWithType: SqlException\n  fullName: System.Data.SqlClient.SqlException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Configuration.ConfigurationErrorsException\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationErrorsException\n  nameWithType: ConfigurationErrorsException\n  fullName: System.Configuration.ConfigurationErrorsException\n- uid: System.Data.SqlClient.SqlConnection.#ctor\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: SqlConnection()\n  nameWithType: SqlConnection.SqlConnection()\n  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()\n- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: SqlConnection(String)\n  nameWithType: SqlConnection.SqlConnection(String)\n  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: SqlConnection(String,SqlCredential)\n  nameWithType: SqlConnection.SqlConnection(String,SqlCredential)\n  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String,SqlCredential)\n- uid: System.Data.SqlClient.SqlCredential\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlCredential\n  nameWithType: SqlCredential\n  fullName: System.Data.SqlClient.SqlCredential\n- uid: System.Data.SqlClient.SqlConnection.AccessToken\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: AccessToken\n  nameWithType: SqlConnection.AccessToken\n  fullName: System.Data.SqlClient.SqlConnection.AccessToken\n- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: BeginDbTransaction(IsolationLevel)\n  nameWithType: SqlConnection.BeginDbTransaction(IsolationLevel)\n  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(IsolationLevel)\n- uid: System.Data.Common.DbTransaction\n  parent: System.Data.Common\n  isExternal: false\n  name: DbTransaction\n  nameWithType: DbTransaction\n  fullName: System.Data.Common.DbTransaction\n- uid: System.Data.IsolationLevel\n  parent: System.Data\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: IsolationLevel\n  fullName: System.Data.IsolationLevel\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: BeginTransaction()\n  nameWithType: SqlConnection.BeginTransaction()\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()\n- uid: System.Data.SqlClient.SqlTransaction\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlTransaction\n  nameWithType: SqlTransaction\n  fullName: System.Data.SqlClient.SqlTransaction\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: BeginTransaction(IsolationLevel)\n  nameWithType: SqlConnection.BeginTransaction(IsolationLevel)\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel)\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: BeginTransaction(String)\n  nameWithType: SqlConnection.BeginTransaction(String)\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(String)\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: BeginTransaction(IsolationLevel,String)\n  nameWithType: SqlConnection.BeginTransaction(IsolationLevel,String)\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel,String)\n- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ChangeDatabase(String)\n  nameWithType: SqlConnection.ChangeDatabase(String)\n  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(String)\n- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ChangePassword(String,String)\n  nameWithType: SqlConnection.ChangePassword(String,String)\n  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,String)\n- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ChangePassword(String,SqlCredential,SecureString)\n  nameWithType: SqlConnection.ChangePassword(String,SqlCredential,SecureString)\n  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,SqlCredential,SecureString)\n- uid: System.Security.SecureString\n  parent: System.Security\n  isExternal: false\n  name: SecureString\n  nameWithType: SecureString\n  fullName: System.Security.SecureString\n- uid: System.Data.SqlClient.SqlConnection.ClearAllPools\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ClearAllPools()\n  nameWithType: SqlConnection.ClearAllPools()\n  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()\n- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ClearPool(SqlConnection)\n  nameWithType: SqlConnection.ClearPool(SqlConnection)\n  fullName: System.Data.SqlClient.SqlConnection.ClearPool(SqlConnection)\n- uid: System.Data.SqlClient.SqlConnection\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlConnection\n  nameWithType: SqlConnection\n  fullName: System.Data.SqlClient.SqlConnection\n- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ClientConnectionId\n  nameWithType: SqlConnection.ClientConnectionId\n  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Data.SqlClient.SqlConnection.Close\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: Close()\n  nameWithType: SqlConnection.Close()\n  fullName: System.Data.SqlClient.SqlConnection.Close()\n- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ColumnEncryptionKeyCacheTtl\n  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl\n  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ColumnEncryptionQueryMetadataCacheEnabled\n  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled\n  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ColumnEncryptionTrustedMasterKeyPaths\n  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths\n  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths\n- uid: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,IList<String>>\n  nameWithType: IDictionary<String,IList<String>>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.Collections.Generic.IList<System.String>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.Collections.Generic.IList<System.String>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.SqlClient.SqlConnection.ConnectionString\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ConnectionString\n  nameWithType: SqlConnection.ConnectionString\n  fullName: System.Data.SqlClient.SqlConnection.ConnectionString\n- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ConnectionTimeout\n  nameWithType: SqlConnection.ConnectionTimeout\n  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.SqlClient.SqlConnection.CreateCommand\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: CreateCommand()\n  nameWithType: SqlConnection.CreateCommand()\n  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()\n- uid: System.Data.SqlClient.SqlCommand\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlCommand\n  nameWithType: SqlCommand\n  fullName: System.Data.SqlClient.SqlCommand\n- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: CreateDbCommand()\n  nameWithType: SqlConnection.CreateDbCommand()\n  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()\n- uid: System.Data.Common.DbCommand\n  parent: System.Data.Common\n  isExternal: false\n  name: DbCommand\n  nameWithType: DbCommand\n  fullName: System.Data.Common.DbCommand\n- uid: System.Data.SqlClient.SqlConnection.Credential\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: Credential\n  nameWithType: SqlConnection.Credential\n  fullName: System.Data.SqlClient.SqlConnection.Credential\n- uid: System.Data.SqlClient.SqlConnection.Database\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: Database\n  nameWithType: SqlConnection.Database\n  fullName: System.Data.SqlClient.SqlConnection.Database\n- uid: System.Data.SqlClient.SqlConnection.DataSource\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: DataSource\n  nameWithType: SqlConnection.DataSource\n  fullName: System.Data.SqlClient.SqlConnection.DataSource\n- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: DbProviderFactory\n  nameWithType: SqlConnection.DbProviderFactory\n  fullName: System.Data.SqlClient.SqlConnection.DbProviderFactory\n- uid: System.Data.Common.DbProviderFactory\n  parent: System.Data.Common\n  isExternal: false\n  name: DbProviderFactory\n  nameWithType: DbProviderFactory\n  fullName: System.Data.Common.DbProviderFactory\n- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SqlConnection.Dispose(Boolean)\n  fullName: System.Data.SqlClient.SqlConnection.Dispose(Boolean)\n- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: EnlistDistributedTransaction(ITransaction)\n  nameWithType: SqlConnection.EnlistDistributedTransaction(ITransaction)\n  fullName: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(ITransaction)\n- uid: System.EnterpriseServices.ITransaction\n  parent: System.EnterpriseServices\n  isExternal: false\n  name: ITransaction\n  nameWithType: ITransaction\n  fullName: System.EnterpriseServices.ITransaction\n- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: EnlistTransaction(Transaction)\n  nameWithType: SqlConnection.EnlistTransaction(Transaction)\n  fullName: System.Data.SqlClient.SqlConnection.EnlistTransaction(Transaction)\n- uid: System.Transactions.Transaction\n  parent: System.Transactions\n  isExternal: false\n  name: Transaction\n  nameWithType: Transaction\n  fullName: System.Transactions.Transaction\n- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: FireInfoMessageEventOnUserErrors\n  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors\n  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\n- uid: System.Data.SqlClient.SqlConnection.GetSchema\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: GetSchema()\n  nameWithType: SqlConnection.GetSchema()\n  fullName: System.Data.SqlClient.SqlConnection.GetSchema()\n- uid: System.Data.DataTable\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: GetSchema(String)\n  nameWithType: SqlConnection.GetSchema(String)\n  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String)\n- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: GetSchema(String,String[])\n  nameWithType: SqlConnection.GetSchema(String,String[])\n  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String,String[])\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.SqlClient.SqlConnection.InfoMessage\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: InfoMessage\n  nameWithType: SqlConnection.InfoMessage\n  fullName: System.Data.SqlClient.SqlConnection.InfoMessage\n- uid: System.Data.SqlClient.SqlInfoMessageEventHandler\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlInfoMessageEventHandler\n  nameWithType: SqlInfoMessageEventHandler\n  fullName: System.Data.SqlClient.SqlInfoMessageEventHandler\n- uid: System.Data.SqlClient.SqlConnection.Open\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: Open()\n  nameWithType: SqlConnection.Open()\n  fullName: System.Data.SqlClient.SqlConnection.Open()\n- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: OpenAsync(CancellationToken)\n  nameWithType: SqlConnection.OpenAsync(CancellationToken)\n  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(CancellationToken)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: true\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Data.SqlClient.SqlConnection.PacketSize\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: PacketSize\n  nameWithType: SqlConnection.PacketSize\n  fullName: System.Data.SqlClient.SqlConnection.PacketSize\n- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)\n  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)\n  fullName: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)\n- uid: System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,SqlColumnEncryptionKeyStoreProvider>\n  nameWithType: IDictionary<String,SqlColumnEncryptionKeyStoreProvider>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider\n    name: SqlColumnEncryptionKeyStoreProvider\n    nameWithType: SqlColumnEncryptionKeyStoreProvider\n    fullName: SqlColumnEncryptionKeyStoreProvider\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.SqlClient.SqlConnection.ResetStatistics\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ResetStatistics()\n  nameWithType: SqlConnection.ResetStatistics()\n  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()\n- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: RetrieveStatistics()\n  nameWithType: SqlConnection.RetrieveStatistics()\n  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: true\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.Data.SqlClient.SqlConnection.ServerVersion\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ServerVersion\n  nameWithType: SqlConnection.ServerVersion\n  fullName: System.Data.SqlClient.SqlConnection.ServerVersion\n- uid: System.Data.SqlClient.SqlConnection.State\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: State\n  nameWithType: SqlConnection.State\n  fullName: System.Data.SqlClient.SqlConnection.State\n- uid: System.Data.ConnectionState\n  parent: System.Data\n  isExternal: false\n  name: ConnectionState\n  nameWithType: ConnectionState\n  fullName: System.Data.ConnectionState\n- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: StatisticsEnabled\n  nameWithType: SqlConnection.StatisticsEnabled\n  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled\n- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: System.ICloneable.Clone()\n  nameWithType: SqlConnection.System.ICloneable.Clone()\n  fullName: System.Data.SqlClient.SqlConnection.System.ICloneable.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.SqlClient.SqlConnection.WorkstationId\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: WorkstationId\n  nameWithType: SqlConnection.WorkstationId\n  fullName: System.Data.SqlClient.SqlConnection.WorkstationId\n- uid: System.Data.SqlClient.SqlConnection.#ctor*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: SqlConnection\n  nameWithType: SqlConnection.SqlConnection\n- uid: System.Data.SqlClient.SqlConnection.AccessToken*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: AccessToken\n  nameWithType: SqlConnection.AccessToken\n- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: BeginDbTransaction\n  nameWithType: SqlConnection.BeginDbTransaction\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: BeginTransaction\n  nameWithType: SqlConnection.BeginTransaction\n- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ChangeDatabase\n  nameWithType: SqlConnection.ChangeDatabase\n- uid: System.Data.SqlClient.SqlConnection.ChangePassword*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ChangePassword\n  nameWithType: SqlConnection.ChangePassword\n- uid: System.Data.SqlClient.SqlConnection.ClearAllPools*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ClearAllPools\n  nameWithType: SqlConnection.ClearAllPools\n- uid: System.Data.SqlClient.SqlConnection.ClearPool*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ClearPool\n  nameWithType: SqlConnection.ClearPool\n- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ClientConnectionId\n  nameWithType: SqlConnection.ClientConnectionId\n- uid: System.Data.SqlClient.SqlConnection.Close*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: Close\n  nameWithType: SqlConnection.Close\n- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ColumnEncryptionKeyCacheTtl\n  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl\n- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ColumnEncryptionQueryMetadataCacheEnabled\n  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled\n- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ColumnEncryptionTrustedMasterKeyPaths\n  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths\n- uid: System.Data.SqlClient.SqlConnection.ConnectionString*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ConnectionString\n  nameWithType: SqlConnection.ConnectionString\n- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ConnectionTimeout\n  nameWithType: SqlConnection.ConnectionTimeout\n- uid: System.Data.SqlClient.SqlConnection.CreateCommand*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: CreateCommand\n  nameWithType: SqlConnection.CreateCommand\n- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: CreateDbCommand\n  nameWithType: SqlConnection.CreateDbCommand\n- uid: System.Data.SqlClient.SqlConnection.Credential*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: Credential\n  nameWithType: SqlConnection.Credential\n- uid: System.Data.SqlClient.SqlConnection.Database*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: Database\n  nameWithType: SqlConnection.Database\n- uid: System.Data.SqlClient.SqlConnection.DataSource*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: DataSource\n  nameWithType: SqlConnection.DataSource\n- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: DbProviderFactory\n  nameWithType: SqlConnection.DbProviderFactory\n- uid: System.Data.SqlClient.SqlConnection.Dispose*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: Dispose\n  nameWithType: SqlConnection.Dispose\n- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: EnlistDistributedTransaction\n  nameWithType: SqlConnection.EnlistDistributedTransaction\n- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: EnlistTransaction\n  nameWithType: SqlConnection.EnlistTransaction\n- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: FireInfoMessageEventOnUserErrors\n  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors\n- uid: System.Data.SqlClient.SqlConnection.GetSchema*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: GetSchema\n  nameWithType: SqlConnection.GetSchema\n- uid: System.Data.SqlClient.SqlConnection.Open*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: Open\n  nameWithType: SqlConnection.Open\n- uid: System.Data.SqlClient.SqlConnection.OpenAsync*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: OpenAsync\n  nameWithType: SqlConnection.OpenAsync\n- uid: System.Data.SqlClient.SqlConnection.PacketSize*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: PacketSize\n  nameWithType: SqlConnection.PacketSize\n- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: RegisterColumnEncryptionKeyStoreProviders\n  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders\n- uid: System.Data.SqlClient.SqlConnection.ResetStatistics*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ResetStatistics\n  nameWithType: SqlConnection.ResetStatistics\n- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: RetrieveStatistics\n  nameWithType: SqlConnection.RetrieveStatistics\n- uid: System.Data.SqlClient.SqlConnection.ServerVersion*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: ServerVersion\n  nameWithType: SqlConnection.ServerVersion\n- uid: System.Data.SqlClient.SqlConnection.State*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: State\n  nameWithType: SqlConnection.State\n- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: StatisticsEnabled\n  nameWithType: SqlConnection.StatisticsEnabled\n- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: System.ICloneable.Clone\n  nameWithType: SqlConnection.System.ICloneable.Clone\n- uid: System.Data.SqlClient.SqlConnection.WorkstationId*\n  parent: System.Data.SqlClient.SqlConnection\n  isExternal: false\n  name: WorkstationId\n  nameWithType: SqlConnection.WorkstationId\n"}