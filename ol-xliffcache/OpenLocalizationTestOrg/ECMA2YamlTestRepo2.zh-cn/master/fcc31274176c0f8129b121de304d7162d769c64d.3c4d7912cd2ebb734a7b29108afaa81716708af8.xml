{"nodes":[{"pos":[1945,2099],"content":"Represents a set of data commands and a database connection that are used to fill the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and update the data source.","needQuote":true,"needEscape":true,"source":"Represents a set of data commands and a database connection that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update the data source."},{"pos":[2112,4216],"content":"The OleDbDataAdapter serves as a bridge between a <xref:System.Data.DataSet> and data source for retrieving and saving data. The OleDbDataAdapter provides this bridge by using <xref:System.Data.Common.DbDataAdapter.Fill%2A> to load data from the data source into the <xref:System.Data.DataSet>, and using <xref:System.Data.Common.DbDataAdapter.Update%2A> to send changes made in the <xref:System.Data.DataSet> back to the data source.       When the OleDbDataAdapter fills a <xref:System.Data.DataSet>, it will create the appropriate tables and columns for the returned data if they do not already exist. However, primary key information is not included in the implicitly created schema unless the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to <xref:System.Data.MissingSchemaAction>. You may also have the OleDbDataAdapter create the schema of the <xref:System.Data.DataSet>, including primary key information, before filling it with data using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>. For more information, see [Adding Existing Constraints to a DataSet](~/add/includes/ajax-current-ext-md.md).       Note that some OLE DB providers, including the MSDataShape provider, do not return base table or primary key information. Therefore, the OleDbDataAdapter cannot correctly set the <xref:System.Data.DataTable.PrimaryKey%2A> property on any created <xref:System.Data.DataTable>. In these cases you should explicitly specify primary keys for tables in the <xref:System.Data.DataSet>.       The OleDbDataAdapter also includes the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DataAdapter.TableMappings%2A> properties to facilitate the loading and updating of data.       When you create an instance of OleDbDataAdapter, properties are set to their initial values. For a list of these values, see the OleDbDataAdapter constructor.","needQuote":false,"needEscape":true,"nodes":[{"content":"The OleDbDataAdapter serves as a bridge between a &lt;xref:System.Data.DataSet&gt; and data source for retrieving and saving data.","pos":[0,124],"source":"The OleDbDataAdapter serves as a bridge between a <xref:System.Data.DataSet> and data source for retrieving and saving data."},{"content":"The OleDbDataAdapter provides this bridge by using &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; to load data from the data source into the &lt;xref:System.Data.DataSet&gt;, and using &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; to send changes made in the &lt;xref:System.Data.DataSet&gt; back to the data source.","pos":[125,434],"source":" The OleDbDataAdapter provides this bridge by using <xref:System.Data.Common.DbDataAdapter.Fill%2A> to load data from the data source into the <xref:System.Data.DataSet>, and using <xref:System.Data.Common.DbDataAdapter.Update%2A> to send changes made in the <xref:System.Data.DataSet> back to the data source."},{"content":"When the OleDbDataAdapter fills a &lt;xref:System.Data.DataSet&gt;, it will create the appropriate tables and columns for the returned data if they do not already exist.","pos":[441,604],"source":"       When the OleDbDataAdapter fills a <xref:System.Data.DataSet>, it will create the appropriate tables and columns for the returned data if they do not already exist."},{"content":"However, primary key information is not included in the implicitly created schema unless the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt; property is set to &lt;xref:System.Data.MissingSchemaAction&gt;.","pos":[605,817],"source":" However, primary key information is not included in the implicitly created schema unless the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to <xref:System.Data.MissingSchemaAction>."},{"content":"You may also have the OleDbDataAdapter create the schema of the &lt;xref:System.Data.DataSet&gt;, including primary key information, before filling it with data using &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;.","pos":[818,1033],"source":" You may also have the OleDbDataAdapter create the schema of the <xref:System.Data.DataSet>, including primary key information, before filling it with data using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Adding Existing Constraints to a DataSet<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1034,1142],"source":" For more information, see [Adding Existing Constraints to a DataSet](~/add/includes/ajax-current-ext-md.md)."},{"content":"Note that some OLE DB providers, including the MSDataShape provider, do not return base table or primary key information.","pos":[1149,1270]},{"content":"Therefore, the OleDbDataAdapter cannot correctly set the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; property on any created &lt;xref:System.Data.DataTable&gt;.","pos":[1271,1424],"source":" Therefore, the OleDbDataAdapter cannot correctly set the <xref:System.Data.DataTable.PrimaryKey%2A> property on any created <xref:System.Data.DataTable>."},{"content":"In these cases you should explicitly specify primary keys for tables in the &lt;xref:System.Data.DataSet&gt;.","pos":[1425,1528],"source":" In these cases you should explicitly specify primary keys for tables in the <xref:System.Data.DataSet>."},{"content":"The OleDbDataAdapter also includes the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A&gt;, &lt;xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A&gt;, &lt;xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A&gt;, &lt;xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A&gt;, and &lt;xref:System.Data.Common.DataAdapter.TableMappings%2A&gt; properties to facilitate the loading and updating of data.","pos":[1535,1931],"source":"       The OleDbDataAdapter also includes the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DataAdapter.TableMappings%2A> properties to facilitate the loading and updating of data."},{"content":"When you create an instance of OleDbDataAdapter, properties are set to their initial values.","pos":[1938,2030]},{"content":"For a list of these values, see the OleDbDataAdapter constructor.","pos":[2031,2096]}]},{"pos":[10931,11027],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref> class."},{"pos":[11040,11561],"content":"When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"nodes":[{"content":"When you create an instance of &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt;, the following read/write properties are set to the following initial values.","pos":[0,150],"source":"When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|       You can change the value of any of these properties through a separate call to the property.","pos":[156,514],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property."}]},{"pos":[12593,12833],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.OleDb.OleDbCommand\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> as the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*&gt; property.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref> class with the specified <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> as the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> property."},{"pos":[12846,13590],"content":"This implementation of the <xref:System.Data.OleDb.OleDbDataAdapter> constructor sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property to the value specified in the `selectCommand` parameter.       When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This implementation of the &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; constructor sets the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A&gt; property to the value specified in the <ph id=\"ph1\">`selectCommand`</ph> parameter.","pos":[0,214],"source":"This implementation of the <xref:System.Data.OleDb.OleDbDataAdapter> constructor sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property to the value specified in the `selectCommand` parameter."},{"content":"When you create an instance of &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt;, the following read/write properties are set to the following initial values.","pos":[221,371],"source":"       When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|       You can change the value of any of these properties through a separate call to the property.","pos":[377,735],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property."}]},{"pos":[14193,14443],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is a SELECT statement or stored procedure, and is set as the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*&gt; property of the <bpt id=\"p2\">&lt;xref href=\"System.Data.OleDb.OleDbDataAdapter\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> that is a SELECT statement or stored procedure, and is set as the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref>."},{"pos":[15066,15226],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*&gt;.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref> class with a <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>."},{"pos":[15239,16274],"content":"This implementation of the <xref:System.Data.OleDb.OleDbDataAdapter> opens and closes an <xref:System.Data.OleDb.OleDbConnection> if it is not already open. This can be useful in an application that must call the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method for two or more <xref:System.Data.OleDb.OleDbDataAdapter> objects. If the <xref:System.Data.OleDb.OleDbConnection> is already open, you must explicitly call <xref:System.Data.OleDb.OleDbConnection.Close%2A> or **Dispose** to close it.       When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of either of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This implementation of the &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; opens and closes an &lt;xref:System.Data.OleDb.OleDbConnection&gt; if it is not already open.","pos":[0,156],"source":"This implementation of the <xref:System.Data.OleDb.OleDbDataAdapter> opens and closes an <xref:System.Data.OleDb.OleDbConnection> if it is not already open."},{"content":"This can be useful in an application that must call the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method for two or more &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; objects.","pos":[157,334],"source":" This can be useful in an application that must call the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method for two or more <xref:System.Data.OleDb.OleDbDataAdapter> objects."},{"content":"If the &lt;xref:System.Data.OleDb.OleDbConnection&gt; is already open, you must explicitly call &lt;xref:System.Data.OleDb.OleDbConnection.Close%2A&gt; or <bpt id=\"p1\">**</bpt>Dispose<ept id=\"p1\">**</ept> to close it.","pos":[335,502],"source":" If the <xref:System.Data.OleDb.OleDbConnection> is already open, you must explicitly call <xref:System.Data.OleDb.OleDbConnection.Close%2A> or **Dispose** to close it."},{"content":"When you create an instance of &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt;, the following read/write properties are set to the following initial values.","pos":[509,659],"source":"       When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|       You can change the value of either of these properties through a separate call to the property.","pos":[665,1026],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of either of these properties through a separate call to the property."}]},{"pos":[16890,17098],"content":"A string that is an SQL SELECT statement or stored procedure to be used by the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that is an SQL SELECT statement or stored procedure to be used by the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref>."},{"pos":[17191,17280],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the connection.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OleDb.OleDbConnection\"></xref> that represents the connection."},{"pos":[17836,17996],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*&gt;.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref> class with a <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>."},{"pos":[18009,18826],"content":"This overload of the <xref:System.Data.OleDb.OleDbDataAdapter> constructor uses the `selectConnectionString` parameter to set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property. However, it does not open the connection. You still must explicitly open the connection.       When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This overload of the &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; constructor uses the <ph id=\"ph1\">`selectConnectionString`</ph> parameter to set the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A&gt; property.","pos":[0,198],"source":"This overload of the <xref:System.Data.OleDb.OleDbDataAdapter> constructor uses the `selectConnectionString` parameter to set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property."},{"content":"However, it does not open the connection.","pos":[199,240]},{"content":"You still must explicitly open the connection.","pos":[241,287]},{"content":"When you create an instance of &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt;, the following read/write properties are set to the following initial values.","pos":[294,444],"source":"       When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|       You can change the value of any of these properties through a separate call to the property.","pos":[450,808],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property."}]},{"pos":[19425,19633],"content":"A string that is an SQL SELECT statement or stored procedure to be used by the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that is an SQL SELECT statement or stored procedure to be used by the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref>."},{"pos":[19712,19734],"content":"The connection string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection string.","pos":[0,22]}]},{"pos":[20923,20935],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21008,21020],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21102,21114],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21205,21217],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21300,21312],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22524,22536],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22609,22621],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22703,22715],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22806,22818],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22902,22914],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23386,23475],"content":"Gets or sets an SQL statement or stored procedure for deleting records from the data set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement or stored procedure for deleting records from the data set.","pos":[0,89]}]},{"pos":[23488,24437],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the DeleteCommand can be generated automatically if you set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.OleDb.OleDbCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.OleDb.OleDbCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       When DeleteCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned. The DeleteCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the DeleteCommand can be generated automatically if you set the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A&gt; property and use the &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt;.","pos":[0,349],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the DeleteCommand can be generated automatically if you set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.OleDb.OleDbCommandBuilder>."},{"content":"Then, any additional commands that you do not set are generated by the &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt;.","pos":[350,466],"source":" Then, any additional commands that you do not set are generated by the <xref:System.Data.OleDb.OleDbCommandBuilder>."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[467,569],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[570,678],"source":" For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"When DeleteCommand is assigned to a previously created &lt;xref:System.Data.OleDb.OleDbCommand&gt;, the &lt;xref:System.Data.OleDb.OleDbCommand&gt; is not cloned.","pos":[685,835],"source":"       When DeleteCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned."},{"content":"The DeleteCommand maintains a reference to the previously created &lt;xref:System.Data.OleDb.OleDbCommand&gt; object.","pos":[836,947],"source":" The DeleteCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object."}]},{"pos":[25154,25386],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to delete records in the data source that correspond to deleted rows in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to delete records in the data source that correspond to deleted rows in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[25930,26251],"content":"Adds or refreshes rows in a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in an ADO <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object using the specified <bpt id=\"p4\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> and ADO objects.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in a <xref href=\"System.Data.DataTable\"></xref> to match those in an ADO <xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"></xref> or <xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"></xref> object using the specified <xref href=\"System.Data.DataTable\"></xref> and ADO objects."},{"pos":[26264,32897],"content":"The link between ActiveX Data Objects (ADO) and ADO.NET is a one-way operation in that you can copy data from ADO to the <xref:System.Data.DataSet>, but any updates to the data must be handled by ADO.NET.       This overload of the Fill method does not close the input `Recordset` on completion of the Fill operation.       When handling batch SQL statements that return multiple results, this implementation of Fill and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the OLE DB.NET Framework Data Provider retrieves schema information for only the first result.       The Fill operation adds the rows to the specified destination <xref:System.Data.DataTable> object in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> object if it does not already exist. When you create a <xref:System.Data.DataTable> object, the Fill operation ordinarily creates only column name metadata. However, if the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       You can use the Fill method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>. If primary key information is present, any duplicate rows are reconciled and only appear one time in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.       If the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to make sure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).       To function correctly with the .NET Framework Data Provider for OLE DB, `AddWithKey` requires that the native OLE DB provider obtains required primary key information by setting the DBPROP_UNIQUEROWS property, and then determines which columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the `IColumnsRowset`. Alternatively the user may explicitly set the primary key constraints on each <xref:System.Data.DataTable>. This makes sure that incoming records that match existing records are updated instead of appended.       If the <xref:System.Data.OleDb.OleDbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. Empty column names are added to the <xref:System.Data.DataTable>, using an empty string for the first column, followed by \"1\", \"2\", \"3\", and so on for the subsequent empty columns.       Values in ADO `Recordset` or `Record` objects are converted to common language runtime types for storage in the <xref:System.Data.DataSet>.      > [!CAUTION] >  This overload of the Fill method does not implicitly call `Close` on the ADO object when the fill operation is complete. Therefore, always call `Close` when you are finished using ADO `Recordset` or `Record` objects. This makes sure that the underlying connection to a data source is released in a timely manner, and also prevents possible access violations because of unmanaged ADO objects being reclaimed by garbage collection when existing references still exist.       When you call the `TableMappings.Add` method on a `DataAdapter` and you explicitly map the source table parameter to an empty string, the dataset is successfully filled using the source table, but the dataset will be populated with nothing. For example, in the following example, `rDataSet` will be populated with nothing.      ```   rAdapter.TableMappings.Add(\"source table\", \"\");   rAdapter.Fill(rDataSet, \"source table\");      ```       This example shows how you can skip a result when dealing with multiple results.       The following example uses an <xref:System.Data.OleDb.OleDbDataAdapter> to fill a <xref:System.Data.DataTable> using an ADO `Recordset`. This example assumes that you have created an ADO `Recordset`.      ```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        Dim custTable As DataTable = New DataTable(\"Customers\")        custTable.Columns.Add(\"CustomerID\", Type.GetType(\"System.String\"))        custTable.Columns.Add(\"CompanyName\", Type.GetType(\"System.String\"))        custDS.Tables.Add(custTable)        'Use ADO objects from ADO library (msado15.dll) imported        ' as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1)        adoRS.Open(\"SELECT CustomerID, CompanyName FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custTable, adoRS)        adoRS.Close()        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        DataTable custTable = new DataTable(\"Customers\");        custTable.Columns.Add(\"CustomerID\", typeof(String));        custTable.Columns.Add(\"CompanyName\", typeof(String));        custDS.Tables.Add(custTable);        //Use ADO objects from ADO library (msado15.dll) imported        //  as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1);        adoRS.Open(\"SELECT CustomerID, CompanyName FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custTable, adoRS);        adoRS.Close();        adoConn.Close();   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"The link between ActiveX Data Objects (ADO) and ADO.NET is a one-way operation in that you can copy data from ADO to the &lt;xref:System.Data.DataSet&gt;, but any updates to the data must be handled by ADO.NET.","pos":[0,204],"source":"The link between ActiveX Data Objects (ADO) and ADO.NET is a one-way operation in that you can copy data from ADO to the <xref:System.Data.DataSet>, but any updates to the data must be handled by ADO.NET."},{"content":"This overload of the Fill method does not close the input <ph id=\"ph1\">`Recordset`</ph> on completion of the Fill operation.","pos":[211,317],"source":"       This overload of the Fill method does not close the input `Recordset` on completion of the Fill operation."},{"content":"When handling batch SQL statements that return multiple results, this implementation of Fill and &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the OLE DB.NET Framework Data Provider retrieves schema information for only the first result.","pos":[324,573],"source":"       When handling batch SQL statements that return multiple results, this implementation of Fill and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the OLE DB.NET Framework Data Provider retrieves schema information for only the first result."},{"content":"The Fill operation adds the rows to the specified destination &lt;xref:System.Data.DataTable&gt; object in the &lt;xref:System.Data.DataSet&gt;, creating the &lt;xref:System.Data.DataTable&gt; object if it does not already exist.","pos":[580,791],"source":"       The Fill operation adds the rows to the specified destination <xref:System.Data.DataTable> object in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> object if it does not already exist."},{"content":"When you create a &lt;xref:System.Data.DataTable&gt; object, the Fill operation ordinarily creates only column name metadata.","pos":[792,911],"source":" When you create a <xref:System.Data.DataTable> object, the Fill operation ordinarily creates only column name metadata."},{"content":"However, if the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt; property is set to <ph id=\"ph1\">`AddWithKey`</ph>, appropriate primary keys and constraints are also created.","pos":[912,1080],"source":" However, if the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created."},{"content":"You can use the Fill method multiple times on the same &lt;xref:System.Data.DataTable&gt;.","pos":[1087,1171],"source":"       You can use the Fill method multiple times on the same <xref:System.Data.DataTable>."},{"content":"If a primary key exists, incoming rows are merged with matching rows that already exist.","pos":[1172,1260]},{"content":"If no primary key exists, incoming rows are appended to the &lt;xref:System.Data.DataTable&gt;.","pos":[1261,1350],"source":" If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>."},{"content":"If primary key information is present, any duplicate rows are reconciled and only appear one time in the &lt;xref:System.Data.DataTable&gt; that corresponds to the &lt;xref:System.Data.DataSet&gt;.","pos":[1351,1536],"source":" If primary key information is present, any duplicate rows are reconciled and only appear one time in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>."},{"content":"Primary key information may be set either through &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;, by specifying the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; property of the &lt;xref:System.Data.DataTable&gt;, or by setting the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt; property to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[1537,1853],"source":" Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`."},{"content":"If the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A&gt; returns the results of an OUTER JOIN, the <ph id=\"ph1\">`DataAdapter`</ph> does not set a &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; value for the resulting &lt;xref:System.Data.DataTable&gt;.","pos":[1860,2093],"source":"       If the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>."},{"content":"You must explicitly define the primary key to make sure that duplicate rows are resolved correctly.","pos":[2094,2193]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Primary Keys<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2194,2283],"source":" For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md)."},{"content":"To function correctly with the .NET Framework Data Provider for OLE DB, <ph id=\"ph1\">`AddWithKey`</ph> requires that the native OLE DB provider obtains required primary key information by setting the DBPROP_UNIQUEROWS property, and then determines which columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the <ph id=\"ph2\">`IColumnsRowset`</ph>.","pos":[2290,2614],"source":"       To function correctly with the .NET Framework Data Provider for OLE DB, `AddWithKey` requires that the native OLE DB provider obtains required primary key information by setting the DBPROP_UNIQUEROWS property, and then determines which columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the `IColumnsRowset`."},{"content":"Alternatively the user may explicitly set the primary key constraints on each &lt;xref:System.Data.DataTable&gt;.","pos":[2615,2722],"source":" Alternatively the user may explicitly set the primary key constraints on each <xref:System.Data.DataTable>."},{"content":"This makes sure that incoming records that match existing records are updated instead of appended.","pos":[2723,2821]},{"content":"If the &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[2828,3081],"source":"       If the <xref:System.Data.OleDb.OleDbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"Empty column names are added to the &lt;xref:System.Data.DataTable&gt;, using an empty string for the first column, followed by \"1\", \"2\", \"3\", and so on for the subsequent empty columns.","pos":[3082,3262],"source":" Empty column names are added to the <xref:System.Data.DataTable>, using an empty string for the first column, followed by \"1\", \"2\", \"3\", and so on for the subsequent empty columns."},{"content":"Values in ADO <ph id=\"ph1\">`Recordset`</ph> or <ph id=\"ph2\">`Record`</ph> objects are converted to common language runtime types for storage in the &lt;xref:System.Data.DataSet&gt;.","pos":[3269,3408],"source":"       Values in ADO `Recordset` or `Record` objects are converted to common language runtime types for storage in the <xref:System.Data.DataSet>."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  This overload of the Fill method does not implicitly call <ph id=\"ph2\">`Close`</ph> on the ADO object when the fill operation is complete.","pos":[3414,3550],"source":"      > [!CAUTION] >  This overload of the Fill method does not implicitly call `Close` on the ADO object when the fill operation is complete."},{"content":"Therefore, always call <ph id=\"ph1\">`Close`</ph> when you are finished using ADO <ph id=\"ph2\">`Recordset`</ph> or <ph id=\"ph3\">`Record`</ph> objects.","pos":[3551,3646],"source":" Therefore, always call `Close` when you are finished using ADO `Recordset` or `Record` objects."},{"content":"This makes sure that the underlying connection to a data source is released in a timely manner, and also prevents possible access violations because of unmanaged ADO objects being reclaimed by garbage collection when existing references still exist.","pos":[3647,3896]},{"content":"When you call the <ph id=\"ph1\">`TableMappings.Add`</ph> method on a <ph id=\"ph2\">`DataAdapter`</ph> and you explicitly map the source table parameter to an empty string, the dataset is successfully filled using the source table, but the dataset will be populated with nothing.","pos":[3903,4143],"source":"       When you call the `TableMappings.Add` method on a `DataAdapter` and you explicitly map the source table parameter to an empty string, the dataset is successfully filled using the source table, but the dataset will be populated with nothing."},{"content":"For example, in the following example, <ph id=\"ph1\">`rDataSet`</ph> will be populated with nothing.","pos":[4144,4225],"source":" For example, in the following example, `rDataSet` will be populated with nothing."},{"content":"<ph id=\"ph1\">```   rAdapter.TableMappings.Add(\"source table\", \"\");   rAdapter.Fill(rDataSet, \"source table\");      ```</ph>       This example shows how you can skip a result when dealing with multiple results.","pos":[4231,4423],"source":"```   rAdapter.TableMappings.Add(\"source table\", \"\");   rAdapter.Fill(rDataSet, \"source table\");      ```       This example shows how you can skip a result when dealing with multiple results."},{"content":"The following example uses an &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; to fill a &lt;xref:System.Data.DataTable&gt; using an ADO <ph id=\"ph1\">`Recordset`</ph>.","pos":[4430,4566],"source":"       The following example uses an <xref:System.Data.OleDb.OleDbDataAdapter> to fill a <xref:System.Data.DataTable> using an ADO `Recordset`."},{"content":"This example assumes that you have created an ADO <ph id=\"ph1\">`Recordset`</ph>.","pos":[4567,4629],"source":" This example assumes that you have created an ADO `Recordset`."},{"content":"<ph id=\"ph1\">```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        Dim custTable As DataTable = New DataTable(\"Customers\")        custTable.Columns.Add(\"CustomerID\", Type.GetType(\"System.String\"))        custTable.Columns.Add(\"CompanyName\", Type.GetType(\"System.String\"))        custDS.Tables.Add(custTable)        'Use ADO objects from ADO library (msado15.dll) imported        ' as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1)        adoRS.Open(\"SELECT CustomerID, CompanyName FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custTable, adoRS)        adoRS.Close()        adoConn.Close()   ```</ph>      <ph id=\"ph2\">```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        DataTable custTable = new DataTable(\"Customers\");        custTable.Columns.Add(\"CustomerID\", typeof(String));        custTable.Columns.Add(\"CompanyName\", typeof(String));        custDS.Tables.Add(custTable);        //Use ADO objects from ADO library (msado15.dll) imported        //  as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1);        adoRS.Open(\"SELECT CustomerID, CompanyName FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custTable, adoRS);        adoRS.Close();        adoConn.Close();   ```</ph>","pos":[4635,6517],"source":"```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        Dim custTable As DataTable = New DataTable(\"Customers\")        custTable.Columns.Add(\"CustomerID\", Type.GetType(\"System.String\"))        custTable.Columns.Add(\"CompanyName\", Type.GetType(\"System.String\"))        custDS.Tables.Add(custTable)        'Use ADO objects from ADO library (msado15.dll) imported        ' as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1)        adoRS.Open(\"SELECT CustomerID, CompanyName FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custTable, adoRS)        adoRS.Close()        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        DataTable custTable = new DataTable(\"Customers\");        custTable.Columns.Add(\"CustomerID\", typeof(String));        custTable.Columns.Add(\"CompanyName\", typeof(String));        custDS.Tables.Add(custTable);        //Use ADO objects from ADO library (msado15.dll) imported        //  as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1);        adoRS.Open(\"SELECT CustomerID, CompanyName FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custTable, adoRS);        adoRS.Close();        adoConn.Close();   ```"}]},{"pos":[33085,33182],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to fill with records and, if it is required, schema.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> to fill with records and, if it is required, schema."},{"pos":[33253,33406],"content":"An ADO <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An ADO <xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"></xref> or <xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"></xref> object."},{"pos":[33463,33630],"content":"The number of rows successfully refreshed to the <xref href=\"System.Data.DataTable\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully refreshed to the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,92],"source":"The number of rows successfully refreshed to the <xref href=\"System.Data.DataTable\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[93,167]}]},{"pos":[34204,34542],"content":"Adds or refreshes rows in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in an ADO <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object using the specified <bpt id=\"p4\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>, ADO object, and source table name.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in the <xref href=\"System.Data.DataSet\"></xref> to match those in an ADO <xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"></xref> or <xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"></xref> object using the specified <xref href=\"System.Data.DataSet\"></xref>, ADO object, and source table name."},{"pos":[34555,40507],"content":"The link between ActiveX Data Objects (ADO) and ADO.NET is a one-way operation in that you can copy data from ADO to the <xref:System.Data.DataSet>, but any updates to the data must be handled by ADO.NET.       The <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method iterates through multiple results by calling the `NextRecordset` method on the `Recordset`, closing the input `Recordset` on completion of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation.       The <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation adds the rows to the specified destination <xref:System.Data.DataTable> object in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> object if it does not already exist. When you create a <xref:System.Data.DataTable> object, the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation ordinarily creates only column name metadata. However, if the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       If primary key information is present, any duplicate rows are reconciled and only appear one time in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.       To function correctly with the .NET Framework Data Provider for OLE DB, `AddWithKey` requires the native OLE DB provider to obtain required primary key information by setting the DBPROP_UNIQUEROWS property, and then determine which columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the **IColumnsRowset**. Alternatively the user may explicitly set the primary key constraints on each <xref:System.Data.DataTable>. This ensures that incoming records that match existing records are updated instead of appended.       If the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to make sure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).       If the `Recordset` is closed before the starting of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation, no error results. This is required for handling of multiple results, because queries that do not return rows are indicated by a closed `Recordset`. The <xref:System.Data.OleDb.OleDbDataAdapter> just calls `NextRecordset` on the closed `Recordset` and continues processing.       If an error is encountered while populating the data set, rows added before the occurrence of the error remain in the <xref:System.Data.DataSet>. The rest of the operation is aborted.       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.). Applications that use column and table names should make sure that conflicts with these naming patterns does not occur.       Values in ADO `Recordset` or `Record` objects are converted to common language runtime types for storage in the <xref:System.Data.DataSet>.      > [!NOTE] >  This overload of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method implicitly calls `Close` on the ADO object when the fill operation is complete.       The following example uses an <xref:System.Data.OleDb.OleDbDataAdapter> to fill a <xref:System.Data.DataSet> using an ADO `Recordset` that is an ADO `Record` object. This example assumes that you have created an ADO `RecordSet` and `Record` object.      ```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        'Use ADO objects from ADO library (msado15.dll) imported        ' as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1)        adoRS.Open(\"SELECT * FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custDS, adoRS, \"Customers\")        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        //Use ADO objects from ADO library (msado15.dll) imported        // as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1);        adoRS.Open(\"SELECT * FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custDS, adoRS, \"Customers\");        adoConn.Close();   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"The link between ActiveX Data Objects (ADO) and ADO.NET is a one-way operation in that you can copy data from ADO to the &lt;xref:System.Data.DataSet&gt;, but any updates to the data must be handled by ADO.NET.","pos":[0,204],"source":"The link between ActiveX Data Objects (ADO) and ADO.NET is a one-way operation in that you can copy data from ADO to the <xref:System.Data.DataSet>, but any updates to the data must be handled by ADO.NET."},{"content":"The &lt;xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A&gt; method iterates through multiple results by calling the <ph id=\"ph1\">`NextRecordset`</ph> method on the <ph id=\"ph2\">`Recordset`</ph>, closing the input <ph id=\"ph3\">`Recordset`</ph> on completion of the &lt;xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A&gt; operation.","pos":[211,475],"source":"       The <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method iterates through multiple results by calling the `NextRecordset` method on the `Recordset`, closing the input `Recordset` on completion of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation."},{"content":"The &lt;xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A&gt; operation adds the rows to the specified destination &lt;xref:System.Data.DataTable&gt; object in the &lt;xref:System.Data.DataSet&gt;, creating the &lt;xref:System.Data.DataTable&gt; object if it does not already exist.","pos":[482,738],"source":"       The <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation adds the rows to the specified destination <xref:System.Data.DataTable> object in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> object if it does not already exist."},{"content":"When you create a &lt;xref:System.Data.DataTable&gt; object, the &lt;xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A&gt; operation ordinarily creates only column name metadata.","pos":[739,903],"source":" When you create a <xref:System.Data.DataTable> object, the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation ordinarily creates only column name metadata."},{"content":"However, if the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt; property is set to <ph id=\"ph1\">`AddWithKey`</ph>, appropriate primary keys and constraints are also created.","pos":[904,1072],"source":" However, if the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created."},{"content":"If primary key information is present, any duplicate rows are reconciled and only appear one time in the &lt;xref:System.Data.DataTable&gt; that corresponds to the &lt;xref:System.Data.DataSet&gt;.","pos":[1079,1264],"source":"       If primary key information is present, any duplicate rows are reconciled and only appear one time in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>."},{"content":"Primary key information may be set either through &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;, by specifying the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; property of the &lt;xref:System.Data.DataTable&gt;, or by setting the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt; property to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[1265,1581],"source":" Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`."},{"content":"To function correctly with the .NET Framework Data Provider for OLE DB, <ph id=\"ph1\">`AddWithKey`</ph> requires the native OLE DB provider to obtain required primary key information by setting the DBPROP_UNIQUEROWS property, and then determine which columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the <bpt id=\"p1\">**</bpt>IColumnsRowset<ept id=\"p1\">**</ept>.","pos":[1588,1910],"source":"       To function correctly with the .NET Framework Data Provider for OLE DB, `AddWithKey` requires the native OLE DB provider to obtain required primary key information by setting the DBPROP_UNIQUEROWS property, and then determine which columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the **IColumnsRowset**."},{"content":"Alternatively the user may explicitly set the primary key constraints on each &lt;xref:System.Data.DataTable&gt;.","pos":[1911,2018],"source":" Alternatively the user may explicitly set the primary key constraints on each <xref:System.Data.DataTable>."},{"content":"This ensures that incoming records that match existing records are updated instead of appended.","pos":[2019,2114]},{"content":"If the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A&gt; returns the results of an OUTER JOIN, the <ph id=\"ph1\">`DataAdapter`</ph> does not set a &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; value for the resulting &lt;xref:System.Data.DataTable&gt;.","pos":[2121,2354],"source":"       If the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>."},{"content":"You must explicitly define the primary key to make sure that duplicate rows are resolved correctly.","pos":[2355,2454]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Primary Keys<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2455,2544],"source":" For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md)."},{"content":"If the <ph id=\"ph1\">`Recordset`</ph> is closed before the starting of the &lt;xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A&gt; operation, no error results.","pos":[2551,2685],"source":"       If the `Recordset` is closed before the starting of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation, no error results."},{"content":"This is required for handling of multiple results, because queries that do not return rows are indicated by a closed <ph id=\"ph1\">`Recordset`</ph>.","pos":[2686,2815],"source":" This is required for handling of multiple results, because queries that do not return rows are indicated by a closed `Recordset`."},{"content":"The &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; just calls <ph id=\"ph1\">`NextRecordset`</ph> on the closed <ph id=\"ph2\">`Recordset`</ph> and continues processing.","pos":[2816,2940],"source":" The <xref:System.Data.OleDb.OleDbDataAdapter> just calls `NextRecordset` on the closed `Recordset` and continues processing."},{"content":"If an error is encountered while populating the data set, rows added before the occurrence of the error remain in the &lt;xref:System.Data.DataSet&gt;.","pos":[2947,3092],"source":"       If an error is encountered while populating the data set, rows added before the occurrence of the error remain in the <xref:System.Data.DataSet>."},{"content":"The rest of the operation is aborted.","pos":[3093,3130]},{"content":"If the &lt;xref:System.Data.Common.DbDataAdapter&gt; object encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[3137,3395],"source":"       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[3396,3550],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When multiple result sets are added to the &lt;xref:System.Data.DataSet&gt; each result set is placed in a separate table.","pos":[3551,3667],"source":" When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table."},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.).","pos":[3668,3813]},{"content":"Applications that use column and table names should make sure that conflicts with these naming patterns does not occur.","pos":[3814,3933]},{"content":"Values in ADO <ph id=\"ph1\">`Recordset`</ph> or <ph id=\"ph2\">`Record`</ph> objects are converted to common language runtime types for storage in the &lt;xref:System.Data.DataSet&gt;.","pos":[3940,4079],"source":"       Values in ADO `Recordset` or `Record` objects are converted to common language runtime types for storage in the <xref:System.Data.DataSet>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This overload of the &lt;xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A&gt; method implicitly calls <ph id=\"ph2\">`Close`</ph> on the ADO object when the fill operation is complete.","pos":[4085,4255],"source":"      > [!NOTE] >  This overload of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method implicitly calls `Close` on the ADO object when the fill operation is complete."},{"content":"The following example uses an &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; to fill a &lt;xref:System.Data.DataSet&gt; using an ADO <ph id=\"ph1\">`Recordset`</ph> that is an ADO <ph id=\"ph2\">`Record`</ph> object.","pos":[4262,4427],"source":"       The following example uses an <xref:System.Data.OleDb.OleDbDataAdapter> to fill a <xref:System.Data.DataSet> using an ADO `Recordset` that is an ADO `Record` object."},{"content":"This example assumes that you have created an ADO <ph id=\"ph1\">`RecordSet`</ph> and <ph id=\"ph2\">`Record`</ph> object.","pos":[4428,4510],"source":" This example assumes that you have created an ADO `RecordSet` and `Record` object."},{"content":"<ph id=\"ph1\">```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        'Use ADO objects from ADO library (msado15.dll) imported        ' as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1)        adoRS.Open(\"SELECT * FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custDS, adoRS, \"Customers\")        adoConn.Close()   ```</ph>      <ph id=\"ph2\">```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        //Use ADO objects from ADO library (msado15.dll) imported        // as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1);        adoRS.Open(\"SELECT * FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custDS, adoRS, \"Customers\");        adoConn.Close();   ```</ph>","pos":[4516,5867],"source":"```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        'Use ADO objects from ADO library (msado15.dll) imported        ' as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1)        adoRS.Open(\"SELECT * FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custDS, adoRS, \"Customers\")        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        //Use ADO objects from ADO library (msado15.dll) imported        // as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\", \"\", \"\", -1);        adoRS.Open(\"SELECT * FROM Customers\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custDS, adoRS, \"Customers\");        adoConn.Close();   ```"}]},{"pos":[40704,40799],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to fill with records and, if it is required, schema.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if it is required, schema."},{"pos":[40870,41023],"content":"An ADO <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An ADO <xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"></xref> or <xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"></xref> object."},{"pos":[41088,41133],"content":"The source table used for the table mappings.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source table used for the table mappings.","pos":[0,45]}]},{"pos":[41190,41367],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,102],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[103,177]}]},{"pos":[41525,41553],"content":"The source table is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source table is invalid.","pos":[0,28]}]},{"pos":[41937,42035],"content":"Gets or sets an SQL statement or stored procedure used to insert new records into the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement or stored procedure used to insert new records into the data source.","pos":[0,98]}]},{"pos":[42048,43268],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the InsertCommand can be generated automatically if you set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.OleDb.OleDbCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.OleDb.OleDbCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       When InsertCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned. The InsertCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object.      > [!NOTE] >  If execution of this command returns rows, these rows may be added to the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OleDb.OleDbCommand> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the InsertCommand can be generated automatically if you set the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A&gt; property and use the &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt;.","pos":[0,349],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the InsertCommand can be generated automatically if you set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.OleDb.OleDbCommandBuilder>."},{"content":"Then, any additional commands that you do not set are generated by the &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt;.","pos":[350,466],"source":" Then, any additional commands that you do not set are generated by the <xref:System.Data.OleDb.OleDbCommandBuilder>."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[467,569],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[570,678],"source":" For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"When InsertCommand is assigned to a previously created &lt;xref:System.Data.OleDb.OleDbCommand&gt;, the &lt;xref:System.Data.OleDb.OleDbCommand&gt; is not cloned.","pos":[685,835],"source":"       When InsertCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned."},{"content":"The InsertCommand maintains a reference to the previously created &lt;xref:System.Data.OleDb.OleDbCommand&gt; object.","pos":[836,947],"source":" The InsertCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If execution of this command returns rows, these rows may be added to the &lt;xref:System.Data.DataSet&gt; depending on how you set the &lt;xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A&gt; property of the &lt;xref:System.Data.OleDb.OleDbCommand&gt; object.","pos":[953,1215],"source":"      > [!NOTE] >  If execution of this command returns rows, these rows may be added to the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OleDb.OleDbCommand> object."}]},{"pos":[43983,44211],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to insert records in the data source that correspond to new rows in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to insert records in the data source that correspond to new rows in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[45009,45021],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[45831,45843],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[46288,46462],"content":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> after a command is executed against the data source. The attempt to update is made. Therefore, the event occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> after a command is executed against the data source. The attempt to update is made. Therefore, the event occurs.","pos":[0,174],"nodes":[{"content":"Occurs during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; after a command is executed against the data source.","pos":[0,114],"source":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> after a command is executed against the data source."},{"content":"The attempt to update is made.","pos":[115,145]},{"content":"Therefore, the event occurs.","pos":[146,174]}]}]},{"pos":[46475,47221],"content":"When you use <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated. The order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.","needQuote":false,"needEscape":true,"nodes":[{"content":"When you use &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, there are two events that occur per data row updated.","pos":[0,117],"source":"When you use <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated."},{"content":"The order of execution is as follows:      1.","pos":[118,163]},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[165,244],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[250,252]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A&gt; event is raised.","pos":[254,331],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised."},{"content":"3.","pos":[337,339]},{"content":"The command executes.","pos":[341,362]},{"content":"4.","pos":[368,370]},{"content":"If the command is set to <ph id=\"ph1\">`FirstReturnedRecord`</ph>, the first returned result is placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[372,490],"source":"  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>."},{"content":"5.","pos":[496,498]},{"content":"If there are output parameters, they are placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[500,582],"source":"  If there are output parameters, they are placed in the <xref:System.Data.DataRow>."},{"content":"6.","pos":[588,590]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised.","pos":[592,668],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised."},{"content":"7.","pos":[674,676]},{"content":"&lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; is called.","pos":[678,732],"source":"  <xref:System.Data.DataRow.AcceptChanges%2A> is called."}]},{"pos":[47806,47818],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[48206,48381],"content":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> before a command is executed against the data source. The attempt to update is made. Therefore, the event occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> before a command is executed against the data source. The attempt to update is made. Therefore, the event occurs.","pos":[0,175],"nodes":[{"content":"Occurs during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; before a command is executed against the data source.","pos":[0,115],"source":"Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> before a command is executed against the data source."},{"content":"The attempt to update is made.","pos":[116,146]},{"content":"Therefore, the event occurs.","pos":[147,175]}]}]},{"pos":[48394,49140],"content":"When you use <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated. The order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.","needQuote":false,"needEscape":true,"nodes":[{"content":"When you use &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, there are two events that occur per data row updated.","pos":[0,117],"source":"When you use <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated."},{"content":"The order of execution is as follows:      1.","pos":[118,163]},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[165,244],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[250,252]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A&gt; event is raised.","pos":[254,331],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised."},{"content":"3.","pos":[337,339]},{"content":"The command executes.","pos":[341,362]},{"content":"4.","pos":[368,370]},{"content":"If the command is set to <ph id=\"ph1\">`FirstReturnedRecord`</ph>, the first returned result is placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[372,490],"source":"  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>."},{"content":"5.","pos":[496,498]},{"content":"If there are output parameters, they are placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[500,582],"source":"  If there are output parameters, they are placed in the <xref:System.Data.DataRow>."},{"content":"6.","pos":[588,590]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised.","pos":[592,668],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised."},{"content":"7.","pos":[674,676]},{"content":"&lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; is called.","pos":[678,732],"source":"  <xref:System.Data.DataRow.AcceptChanges%2A> is called."}]},{"pos":[49728,49740],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[50141,50233],"content":"Gets or sets an SQL statement or stored procedure used to select records in the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement or stored procedure used to select records in the data source.","pos":[0,92]}]},{"pos":[50246,50637],"content":"When SelectCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned. The SelectCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object.       If the SelectCommand returns no rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.","needQuote":false,"needEscape":true,"nodes":[{"content":"When SelectCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned. The SelectCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object.       If the SelectCommand returns no rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.","pos":[0,389],"nodes":[{"content":"When SelectCommand is assigned to a previously created &lt;xref:System.Data.OleDb.OleDbCommand&gt;, the &lt;xref:System.Data.OleDb.OleDbCommand&gt; is not cloned.","pos":[0,150],"source":"When SelectCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned."},{"content":"The SelectCommand maintains a reference to the previously created &lt;xref:System.Data.OleDb.OleDbCommand&gt; object.","pos":[151,262],"source":" The SelectCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object."},{"content":"If the SelectCommand returns no rows, no tables are added to the &lt;xref:System.Data.DataSet&gt;, and no exception is raised.","pos":[269,389],"source":"       If the SelectCommand returns no rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised."}]}]},{"pos":[51352,51570],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used during &lt;xref:System.Data.Common.DbDataAdapter.Fill*&gt; to select records from data source for placement in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Fill*> to select records from data source for placement in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[52182,52269],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.DeleteCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.DeleteCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.DeleteCommand*>."}]},{"pos":[52281,52479],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[52647,52786],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during an update to delete records in the data source for deleted rows in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> used during an update to delete records in the data source for deleted rows in the data set."},{"pos":[53425,53512],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.InsertCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.InsertCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.InsertCommand*>."}]},{"pos":[53524,53722],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[53890,54034],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used during an update to insert records from a data source for placement in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> that is used during an update to insert records from a data source for placement in the data set."},{"pos":[54673,54760],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.SelectCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.SelectCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.SelectCommand*>."}]},{"pos":[54772,54970],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[55138,55282],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used during an update to select records from a data source for placement in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> that is used during an update to select records from a data source for placement in the data set."},{"pos":[55921,56008],"content":"For a description of this member, see <xref:System.Data.IDbDataAdapter.UpdateCommand*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.UpdateCommand*&gt;.","pos":[0,87],"source":"For a description of this member, see <xref:System.Data.IDbDataAdapter.UpdateCommand*>."}]},{"pos":[56020,56218],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."}]}]},{"pos":[56386,56526],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during an update to update records in the data source for modified rows in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> used during an update to update records in the data source for modified rows in the data set."},{"pos":[57084,57187],"content":"For a description of this member, see &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.ICloneable.Clone%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,103],"source":"For a description of this member, see &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;."}]},{"pos":[57199,57388],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.ICloneable> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.ICloneable> interface.","pos":[0,189],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; instance is cast to an &lt;xref:System.ICloneable&gt; interface.","pos":[60,189],"source":" It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.ICloneable> interface."}]}]},{"pos":[57516,57575],"content":"A new <xref:System.Object> that is a copy of this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new &lt;xref:System.Object&gt; that is a copy of this instance.","pos":[0,59],"source":"A new <xref:System.Object> that is a copy of this instance."}]},{"pos":[58048,58140],"content":"Gets or sets an SQL statement or stored procedure used to update records in the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement or stored procedure used to update records in the data source.","pos":[0,92]}]},{"pos":[58153,59376],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the UpdateCommand can be generated automatically if you set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.OleDb.OleDbCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.OleDb.OleDbCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       When UpdateCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned. The UpdateCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object.      > [!NOTE] >  If execution of this command returns rows, these rows may be merged with the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OleDb.OleDbCommand> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the UpdateCommand can be generated automatically if you set the &lt;xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A&gt; property and use the &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt;.","pos":[0,349],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the UpdateCommand can be generated automatically if you set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.OleDb.OleDbCommandBuilder>."},{"content":"Then, any additional commands that you do not set are generated by the &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt;.","pos":[350,466],"source":" Then, any additional commands that you do not set are generated by the <xref:System.Data.OleDb.OleDbCommandBuilder>."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[467,569],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[570,678],"source":" For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"When UpdateCommand is assigned to a previously created &lt;xref:System.Data.OleDb.OleDbCommand&gt;, the &lt;xref:System.Data.OleDb.OleDbCommand&gt; is not cloned.","pos":[685,835],"source":"       When UpdateCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned."},{"content":"The UpdateCommand maintains a reference to the previously created &lt;xref:System.Data.OleDb.OleDbCommand&gt; object.","pos":[836,947],"source":" The UpdateCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If execution of this command returns rows, these rows may be merged with the &lt;xref:System.Data.DataSet&gt; depending on how you set the &lt;xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A&gt; property of the &lt;xref:System.Data.OleDb.OleDbCommand&gt; object.","pos":[953,1218],"source":"      > [!NOTE] >  If execution of this command returns rows, these rows may be merged with the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OleDb.OleDbCommand> object."}]},{"pos":[60097,60330],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OleDb.OleDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to update records in the data source that correspond to modified rows in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the data source that correspond to modified rows in the <xref href=\"System.Data.DataSet\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.OleDb.OleDbDataAdapter\n  id: OleDbDataAdapter\n  children:\n  - System.Data.OleDb.OleDbDataAdapter.#ctor\n  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)\n  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)\n  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)\n  - System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  - System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  - System.Data.OleDb.OleDbDataAdapter.DeleteCommand\n  - System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)\n  - System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)\n  - System.Data.OleDb.OleDbDataAdapter.InsertCommand\n  - System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  - System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  - System.Data.OleDb.OleDbDataAdapter.RowUpdated\n  - System.Data.OleDb.OleDbDataAdapter.RowUpdating\n  - System.Data.OleDb.OleDbDataAdapter.SelectCommand\n  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  - System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone\n  - System.Data.OleDb.OleDbDataAdapter.UpdateCommand\n  langs:\n  - csharp\n  name: OleDbDataAdapter\n  nameWithType: OleDbDataAdapter\n  fullName: System.Data.OleDb.OleDbDataAdapter\n  type: Class\n  summary: Represents a set of data commands and a database connection that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update the data source.\n  remarks: \"The OleDbDataAdapter serves as a bridge between a <xref:System.Data.DataSet> and data source for retrieving and saving data. The OleDbDataAdapter provides this bridge by using <xref:System.Data.Common.DbDataAdapter.Fill%2A> to load data from the data source into the <xref:System.Data.DataSet>, and using <xref:System.Data.Common.DbDataAdapter.Update%2A> to send changes made in the <xref:System.Data.DataSet> back to the data source.  \\n  \\n When the OleDbDataAdapter fills a <xref:System.Data.DataSet>, it will create the appropriate tables and columns for the returned data if they do not already exist. However, primary key information is not included in the implicitly created schema unless the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to <xref:System.Data.MissingSchemaAction>. You may also have the OleDbDataAdapter create the schema of the <xref:System.Data.DataSet>, including primary key information, before filling it with data using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>. For more information, see [Adding Existing Constraints to a DataSet](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Note that some OLE DB providers, including the MSDataShape provider, do not return base table or primary key information. Therefore, the OleDbDataAdapter cannot correctly set the <xref:System.Data.DataTable.PrimaryKey%2A> property on any created <xref:System.Data.DataTable>. In these cases you should explicitly specify primary keys for tables in the <xref:System.Data.DataSet>.  \\n  \\n The OleDbDataAdapter also includes the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DataAdapter.TableMappings%2A> properties to facilitate the loading and updating of data.  \\n  \\n When you create an instance of OleDbDataAdapter, properties are set to their initial values. For a list of these values, see the OleDbDataAdapter constructor.\"\n  example:\n  - \"The following example uses the <xref:System.Data.OleDb.OleDbCommand>, OleDbDataAdapter and <xref:System.Data.OleDb.OleDbConnection>, to select records from an Access data source, and populate a <xref:System.Data.DataSet> with the selected rows. The filled <xref:System.Data.DataSet> is then returned. To accomplish this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is an SQL SELECT statement.  \\n  \\n [!code-vb[Classic WebData OleDbDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.oledb.oled_7_1.vb)]\\n [!code-cs[Classic WebData OleDbDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.oledb.oled_7_1.cs)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultEvent(\"RowUpdated\")]\n\n      [System.ComponentModel.Designer(\"Microsoft.VSDesigner.Data.VS.OleDbDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.ComponentModel.ToolboxItem(\"Microsoft.VSDesigner.Data.VS.OleDbDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      public sealed class OleDbDataAdapter : System.Data.Common.DbDataAdapter, ICloneable\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Data.Common.DataAdapter\n  - System.Data.Common.DbDataAdapter\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Data.Common.DataAdapter.AcceptChangesDuringFill\n  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate\n  - System.Data.Common.DataAdapter.CloneInternals\n  - System.Data.Common.DataAdapter.ContinueUpdateOnError\n  - System.Data.Common.DataAdapter.CreateTableMappings\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)\n  - System.Data.Common.DataAdapter.FillError\n  - System.Data.Common.DataAdapter.FillLoadOption\n  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.HasTableMappings\n  - System.Data.Common.DataAdapter.MissingMappingAction\n  - System.Data.Common.DataAdapter.MissingSchemaAction\n  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)\n  - System.Data.Common.DataAdapter.ResetFillLoadOption\n  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes\n  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill\n  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption\n  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings\n  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings\n  - System.Data.Common.DataAdapter.TableMappings\n  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)\n  - System.Data.Common.DbDataAdapter.ClearBatch\n  - System.Data.Common.DbDataAdapter.DefaultSourceTableName\n  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)\n  - System.Data.Common.DbDataAdapter.ExecuteBatch\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])\n  - System.Data.Common.DbDataAdapter.FillCommandBehavior\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)\n  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  - System.Data.Common.DbDataAdapter.GetFillParameters\n  - System.Data.Common.DbDataAdapter.InitializeBatching\n  - System.Data.Common.DbDataAdapter.TerminateBatching\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)\n  - System.Data.Common.DbDataAdapter.UpdateBatchSize\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.#ctor\n  id: '#ctor'\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: OleDbDataAdapter()\n  nameWithType: OleDbDataAdapter.OleDbDataAdapter()\n  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Initializes a new instance of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref> class.\n  remarks: \"When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n  \\n You can change the value of any of these properties through a separate call to the property.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_28_1.vb)]\\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_28_1.cs)]\"\n  syntax:\n    content: public OleDbDataAdapter ();\n    parameters: []\n  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)\n  id: '#ctor(System.Data.OleDb.OleDbCommand)'\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: OleDbDataAdapter(OleDbCommand)\n  nameWithType: OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)\n  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Initializes a new instance of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref> class with the specified <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> as the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> property.\n  remarks: \"This implementation of the <xref:System.Data.OleDb.OleDbDataAdapter> constructor sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property to the value specified in the `selectCommand` parameter.  \\n  \\n When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n  \\n You can change the value of any of these properties through a separate call to the property.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_17_1.vb)]\\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_17_1.cs)]\"\n  syntax:\n    content: public OleDbDataAdapter (System.Data.OleDb.OleDbCommand selectCommand);\n    parameters:\n    - id: selectCommand\n      type: System.Data.OleDb.OleDbCommand\n      description: An <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> that is a SELECT statement or stored procedure, and is set as the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref>.\n  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)\n  id: '#ctor(System.String,System.Data.OleDb.OleDbConnection)'\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: OleDbDataAdapter(String,OleDbConnection)\n  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)\n  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Initializes a new instance of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref> class with a <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>.\n  remarks: \"This implementation of the <xref:System.Data.OleDb.OleDbDataAdapter> opens and closes an <xref:System.Data.OleDb.OleDbConnection> if it is not already open. This can be useful in an application that must call the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method for two or more <xref:System.Data.OleDb.OleDbDataAdapter> objects. If the <xref:System.Data.OleDb.OleDbConnection> is already open, you must explicitly call <xref:System.Data.OleDb.OleDbConnection.Close%2A> or **Dispose** to close it.  \\n  \\n When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n  \\n You can change the value of either of these properties through a separate call to the property.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/add/codesnippet/visualbasic/f3cd089b-2d52-49c5-b101-_1.vb)]\\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/add/codesnippet/csharp/f3cd089b-2d52-49c5-b101-_1.cs)]\"\n  syntax:\n    content: public OleDbDataAdapter (string selectCommandText, System.Data.OleDb.OleDbConnection selectConnection);\n    parameters:\n    - id: selectCommandText\n      type: System.String\n      description: A string that is an SQL SELECT statement or stored procedure to be used by the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref>.\n    - id: selectConnection\n      type: System.Data.OleDb.OleDbConnection\n      description: An <xref href=\"System.Data.OleDb.OleDbConnection\"></xref> that represents the connection.\n  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: OleDbDataAdapter(String,String)\n  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,String)\n  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,String)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Initializes a new instance of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref> class with a <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>.\n  remarks: \"This overload of the <xref:System.Data.OleDb.OleDbDataAdapter> constructor uses the `selectConnectionString` parameter to set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property. However, it does not open the connection. You still must explicitly open the connection.  \\n  \\n When you create an instance of <xref:System.Data.OleDb.OleDbDataAdapter>, the following read/write properties are set to the following initial values.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n  \\n You can change the value of any of these properties through a separate call to the property.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_4_1.vb)]\\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_4_1.cs)]\"\n  syntax:\n    content: public OleDbDataAdapter (string selectCommandText, string selectConnectionString);\n    parameters:\n    - id: selectCommandText\n      type: System.String\n      description: A string that is an SQL SELECT statement or stored procedure to be used by the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> property of the <xref href=\"System.Data.OleDb.OleDbDataAdapter\"></xref>.\n    - id: selectConnectionString\n      type: System.String\n      description: The connection string.\n  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  syntax:\n    content: protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);\n    parameters:\n    - id: dataRow\n      type: System.Data.DataRow\n      description: To be added.\n    - id: command\n      type: System.Data.IDbCommand\n      description: To be added.\n    - id: statementType\n      type: System.Data.StatementType\n      description: To be added.\n    - id: tableMapping\n      type: System.Data.Common.DataTableMapping\n      description: To be added.\n    return:\n      type: System.Data.Common.RowUpdatedEventArgs\n      description: To be added.\n  overload: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  syntax:\n    content: protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);\n    parameters:\n    - id: dataRow\n      type: System.Data.DataRow\n      description: To be added.\n    - id: command\n      type: System.Data.IDbCommand\n      description: To be added.\n    - id: statementType\n      type: System.Data.StatementType\n      description: To be added.\n    - id: tableMapping\n      type: System.Data.Common.DataTableMapping\n      description: To be added.\n    return:\n      type: System.Data.Common.RowUpdatingEventArgs\n      description: To be added.\n  overload: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand\n  id: DeleteCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: DeleteCommand\n  nameWithType: OleDbDataAdapter.DeleteCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.DeleteCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Gets or sets an SQL statement or stored procedure for deleting records from the data set.\n  remarks: \"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the DeleteCommand can be generated automatically if you set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.OleDb.OleDbCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.OleDb.OleDbCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When DeleteCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned. The DeleteCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and DeleteCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_21_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_21_1.vb)]\"\n  syntax:\n    content: public System.Data.OleDb.OleDbCommand DeleteCommand { get; set; }\n    return:\n      type: System.Data.OleDb.OleDbCommand\n      description: An <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to delete records in the data source that correspond to deleted rows in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.OleDb.OleDbDataAdapter.DeleteCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)\n  id: Fill(System.Data.DataTable,System.Object)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: Fill(DataTable,Object)\n  nameWithType: OleDbDataAdapter.Fill(DataTable,Object)\n  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataTable,Object)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Adds or refreshes rows in a <xref href=\"System.Data.DataTable\"></xref> to match those in an ADO <xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"></xref> or <xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"></xref> object using the specified <xref href=\"System.Data.DataTable\"></xref> and ADO objects.\n  remarks: \"The link between ActiveX Data Objects (ADO) and ADO.NET is a one-way operation in that you can copy data from ADO to the <xref:System.Data.DataSet>, but any updates to the data must be handled by ADO.NET.  \\n  \\n This overload of the Fill method does not close the input `Recordset` on completion of the Fill operation.  \\n  \\n When handling batch SQL statements that return multiple results, this implementation of Fill and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the OLE DB.NET Framework Data Provider retrieves schema information for only the first result.  \\n  \\n The Fill operation adds the rows to the specified destination <xref:System.Data.DataTable> object in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> object if it does not already exist. When you create a <xref:System.Data.DataTable> object, the Fill operation ordinarily creates only column name metadata. However, if the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.  \\n  \\n You can use the Fill method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>. If primary key information is present, any duplicate rows are reconciled and only appear one time in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.  \\n  \\n If the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to make sure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).  \\n  \\n To function correctly with the .NET Framework Data Provider for OLE DB, `AddWithKey` requires that the native OLE DB provider obtains required primary key information by setting the DBPROP_UNIQUEROWS property, and then determines which columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the `IColumnsRowset`. Alternatively the user may explicitly set the primary key constraints on each <xref:System.Data.DataTable>. This makes sure that incoming records that match existing records are updated instead of appended.  \\n  \\n If the <xref:System.Data.OleDb.OleDbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. Empty column names are added to the <xref:System.Data.DataTable>, using an empty string for the first column, followed by \\\"1\\\", \\\"2\\\", \\\"3\\\", and so on for the subsequent empty columns.  \\n  \\n Values in ADO `Recordset` or `Record` objects are converted to common language runtime types for storage in the <xref:System.Data.DataSet>.  \\n  \\n> [!CAUTION]\\n>  This overload of the Fill method does not implicitly call `Close` on the ADO object when the fill operation is complete. Therefore, always call `Close` when you are finished using ADO `Recordset` or `Record` objects. This makes sure that the underlying connection to a data source is released in a timely manner, and also prevents possible access violations because of unmanaged ADO objects being reclaimed by garbage collection when existing references still exist.  \\n  \\n When you call the `TableMappings.Add` method on a `DataAdapter` and you explicitly map the source table parameter to an empty string, the dataset is successfully filled using the source table, but the dataset will be populated with nothing. For example, in the following example, `rDataSet` will be populated with nothing.  \\n  \\n```  \\nrAdapter.TableMappings.Add(\\\"source table\\\", \\\"\\\");  \\nrAdapter.Fill(rDataSet, \\\"source table\\\");     \\n```  \\n  \\n This example shows how you can skip a result when dealing with multiple results.  \\n  \\n The following example uses an <xref:System.Data.OleDb.OleDbDataAdapter> to fill a <xref:System.Data.DataTable> using an ADO `Recordset`. This example assumes that you have created an ADO `Recordset`.  \\n  \\n```vb#  \\nDim custDA As OleDbDataAdapter = New OleDbDataAdapter()  \\n     Dim custDS As DataSet = New DataSet  \\n     Dim custTable As DataTable = New DataTable(\\\"Customers\\\")  \\n     custTable.Columns.Add(\\\"CustomerID\\\", Type.GetType(\\\"System.String\\\"))  \\n     custTable.Columns.Add(\\\"CompanyName\\\", Type.GetType(\\\"System.String\\\"))  \\n     custDS.Tables.Add(custTable)  \\n     'Use ADO objects from ADO library (msado15.dll) imported  \\n     ' as.NET library ADODB.dll using TlbImp.exe  \\n     Dim adoConn As ADODB.Connection = New ADODB.Connection()  \\n     Dim adoRS As ADODB.Recordset = New ADODB.Recordset()  \\n     adoConn.Open(\\\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\\\", \\\"\\\", \\\"\\\", -1)  \\n     adoRS.Open(\\\"SELECT CustomerID, CompanyName FROM Customers\\\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)  \\n     custDA.Fill(custTable, adoRS)  \\n     adoRS.Close()  \\n     adoConn.Close()  \\n```  \\n  \\n```c#  \\nOleDbDataAdapter custDA = new OleDbDataAdapter();  \\n     DataSet custDS = new DataSet();  \\n     DataTable custTable = new DataTable(\\\"Customers\\\");  \\n     custTable.Columns.Add(\\\"CustomerID\\\", typeof(String));  \\n     custTable.Columns.Add(\\\"CompanyName\\\", typeof(String));  \\n     custDS.Tables.Add(custTable);  \\n     //Use ADO objects from ADO library (msado15.dll) imported  \\n     //  as.NET library ADODB.dll using TlbImp.exe  \\n     ADODB.Connection adoConn = new ADODB.Connection();  \\n     ADODB.Recordset adoRS = new ADODB.Recordset();  \\n     adoConn.Open(\\\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\\\", \\\"\\\", \\\"\\\", -1);  \\n     adoRS.Open(\\\"SELECT CustomerID, CompanyName FROM Customers\\\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);  \\n     custDA.Fill(custTable, adoRS);  \\n     adoRS.Close();  \\n     adoConn.Close();  \\n```\"\n  syntax:\n    content: public int Fill (System.Data.DataTable dataTable, object ADODBRecordSet);\n    parameters:\n    - id: dataTable\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> to fill with records and, if it is required, schema.\n    - id: ADODBRecordSet\n      type: System.Object\n      description: An ADO <xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"></xref> or <xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"></xref> object.\n    return:\n      type: System.Int32\n      description: The number of rows successfully refreshed to the <xref href=\"System.Data.DataTable\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.OleDb.OleDbDataAdapter.Fill*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)\n  id: Fill(System.Data.DataSet,System.Object,System.String)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: Fill(DataSet,Object,String)\n  nameWithType: OleDbDataAdapter.Fill(DataSet,Object,String)\n  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataSet,Object,String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Adds or refreshes rows in the <xref href=\"System.Data.DataSet\"></xref> to match those in an ADO <xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"></xref> or <xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"></xref> object using the specified <xref href=\"System.Data.DataSet\"></xref>, ADO object, and source table name.\n  remarks: \"The link between ActiveX Data Objects (ADO) and ADO.NET is a one-way operation in that you can copy data from ADO to the <xref:System.Data.DataSet>, but any updates to the data must be handled by ADO.NET.  \\n  \\n The <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method iterates through multiple results by calling the `NextRecordset` method on the `Recordset`, closing the input `Recordset` on completion of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation.  \\n  \\n The <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation adds the rows to the specified destination <xref:System.Data.DataTable> object in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> object if it does not already exist. When you create a <xref:System.Data.DataTable> object, the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation ordinarily creates only column name metadata. However, if the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.  \\n  \\n If primary key information is present, any duplicate rows are reconciled and only appear one time in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.  \\n  \\n To function correctly with the .NET Framework Data Provider for OLE DB, `AddWithKey` requires the native OLE DB provider to obtain required primary key information by setting the DBPROP_UNIQUEROWS property, and then determine which columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the **IColumnsRowset**. Alternatively the user may explicitly set the primary key constraints on each <xref:System.Data.DataTable>. This ensures that incoming records that match existing records are updated instead of appended.  \\n  \\n If the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to make sure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If the `Recordset` is closed before the starting of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operation, no error results. This is required for handling of multiple results, because queries that do not return rows are indicated by a closed `Recordset`. The <xref:System.Data.OleDb.OleDbDataAdapter> just calls `NextRecordset` on the closed `Recordset` and continues processing.  \\n  \\n If an error is encountered while populating the data set, rows added before the occurrence of the error remain in the <xref:System.Data.DataSet>. The rest of the operation is aborted.  \\n  \\n If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on.). Applications that use column and table names should make sure that conflicts with these naming patterns does not occur.  \\n  \\n Values in ADO `Recordset` or `Record` objects are converted to common language runtime types for storage in the <xref:System.Data.DataSet>.  \\n  \\n> [!NOTE]\\n>  This overload of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method implicitly calls `Close` on the ADO object when the fill operation is complete.  \\n  \\n The following example uses an <xref:System.Data.OleDb.OleDbDataAdapter> to fill a <xref:System.Data.DataSet> using an ADO `Recordset` that is an ADO `Record` object. This example assumes that you have created an ADO `RecordSet` and `Record` object.  \\n  \\n```vb#  \\nDim custDA As OleDbDataAdapter = New OleDbDataAdapter()  \\n     Dim custDS As DataSet = New DataSet  \\n     'Use ADO objects from ADO library (msado15.dll) imported  \\n     ' as.NET library ADODB.dll using TlbImp.exe  \\n     Dim adoConn As ADODB.Connection = New ADODB.Connection()  \\n     Dim adoRS As ADODB.Recordset = New ADODB.Recordset()  \\n     adoConn.Open(\\\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\\\", \\\"\\\", \\\"\\\", -1)  \\n     adoRS.Open(\\\"SELECT * FROM Customers\\\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)  \\n     custDA.Fill(custDS, adoRS, \\\"Customers\\\")  \\n     adoConn.Close()  \\n```  \\n  \\n```c#  \\nOleDbDataAdapter custDA = new OleDbDataAdapter();  \\n     DataSet custDS = new DataSet();  \\n     //Use ADO objects from ADO library (msado15.dll) imported  \\n     // as.NET library ADODB.dll using TlbImp.exe  \\n     ADODB.Connection adoConn = new ADODB.Connection();  \\n     ADODB.Recordset adoRS = new ADODB.Recordset();  \\n     adoConn.Open(\\\"Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;\\\", \\\"\\\", \\\"\\\", -1);  \\n     adoRS.Open(\\\"SELECT * FROM Customers\\\", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);  \\n     custDA.Fill(custDS, adoRS, \\\"Customers\\\");  \\n     adoConn.Close();  \\n```\"\n  syntax:\n    content: public int Fill (System.Data.DataSet dataSet, object ADODBRecordSet, string srcTable);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if it is required, schema.\n    - id: ADODBRecordSet\n      type: System.Object\n      description: An ADO <xref uid=\"langword_csharp_Recordset\" name=\"Recordset\" href=\"\"></xref> or <xref uid=\"langword_csharp_Record\" name=\"Record\" href=\"\"></xref> object.\n    - id: srcTable\n      type: System.String\n      description: The source table used for the table mappings.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.OleDb.OleDbDataAdapter.Fill*\n  exceptions:\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The source table is invalid.\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand\n  id: InsertCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: InsertCommand\n  nameWithType: OleDbDataAdapter.InsertCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.InsertCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Gets or sets an SQL statement or stored procedure used to insert new records into the data source.\n  remarks: \"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the InsertCommand can be generated automatically if you set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.OleDb.OleDbCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.OleDb.OleDbCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When InsertCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned. The InsertCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object.  \\n  \\n> [!NOTE]\\n>  If execution of this command returns rows, these rows may be added to the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OleDb.OleDbCommand> object.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and InsertCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_9_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_9_1.vb)]\"\n  syntax:\n    content: public System.Data.OleDb.OleDbCommand InsertCommand { get; set; }\n    return:\n      type: System.Data.OleDb.OleDbCommand\n      description: An <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to insert records in the data source that correspond to new rows in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.OleDb.OleDbDataAdapter.InsertCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: OnRowUpdated(RowUpdatedEventArgs)\n  nameWithType: OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  syntax:\n    content: protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);\n    parameters:\n    - id: value\n      type: System.Data.Common.RowUpdatedEventArgs\n      description: To be added.\n  overload: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: OnRowUpdating(RowUpdatingEventArgs)\n  nameWithType: OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  syntax:\n    content: protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);\n    parameters:\n    - id: value\n      type: System.Data.Common.RowUpdatingEventArgs\n      description: To be added.\n  overload: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdated\n  id: RowUpdated\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: RowUpdated\n  nameWithType: OleDbDataAdapter.RowUpdated\n  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdated\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> after a command is executed against the data source. The attempt to update is made. Therefore, the event occurs.\n  remarks: \"When you use <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated. The order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.  \\n  \\n5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.  \\n  \\n6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.  \\n  \\n7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.\"\n  example:\n  - \"The following example shows the <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> and RowUpdated events being used.  \\n  \\n [!code-cs[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.oledb.oled_1_1.cs)]\\n [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.oledb.oled_1_1.vb)]\"\n  syntax:\n    content: public event System.Data.OleDb.OleDbRowUpdatedEventHandler RowUpdated;\n    return:\n      type: System.Data.OleDb.OleDbRowUpdatedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdating\n  id: RowUpdating\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: RowUpdating\n  nameWithType: OleDbDataAdapter.RowUpdating\n  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdating\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Occurs during <xref:System.Data.Common.DbDataAdapter.Update*> before a command is executed against the data source. The attempt to update is made. Therefore, the event occurs.\n  remarks: \"When you use <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated. The order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.  \\n  \\n5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.  \\n  \\n6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.  \\n  \\n7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.\"\n  example:\n  - \"The following example shows the RowUpdating and <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdated> events being used.  \\n  \\n [!code-cs[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.oledb.oled_0_1.cs)]\\n [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.oledb.oled_0_1.vb)]\"\n  syntax:\n    content: public event System.Data.OleDb.OleDbRowUpdatingEventHandler RowUpdating;\n    return:\n      type: System.Data.OleDb.OleDbRowUpdatingEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand\n  id: SelectCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: SelectCommand\n  nameWithType: OleDbDataAdapter.SelectCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.SelectCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Gets or sets an SQL statement or stored procedure used to select records in the data source.\n  remarks: \"When SelectCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned. The SelectCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object.  \\n  \\n If the SelectCommand returns no rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the SelectCommand and <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_3_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_3_1.vb)]\"\n  syntax:\n    content: public System.Data.OleDb.OleDbCommand SelectCommand { get; set; }\n    return:\n      type: System.Data.OleDb.OleDbCommand\n      description: An <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Fill*> to select records from data source for placement in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.OleDb.OleDbDataAdapter.SelectCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  id: System#Data#IDbDataAdapter#DeleteCommand\n  isEii: true\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.DeleteCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> used during an update to delete records in the data source for deleted rows in the data set.\n  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  id: System#Data#IDbDataAdapter#InsertCommand\n  isEii: true\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.InsertCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> that is used during an update to insert records from a data source for placement in the data set.\n  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  id: System#Data#IDbDataAdapter#SelectCommand\n  isEii: true\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.SelectCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> that is used during an update to select records from a data source for placement in the data set.\n  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  id: System#Data#IDbDataAdapter#UpdateCommand\n  isEii: true\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: For a description of this member, see <xref:System.Data.IDbDataAdapter.UpdateCommand*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> used during an update to update records in the data source for modified rows in the data set.\n  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone\n  id: System#ICloneable#Clone\n  isEii: true\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: System.ICloneable.Clone()\n  nameWithType: OleDbDataAdapter.System.ICloneable.Clone()\n  fullName: System.Data.OleDb.OleDbDataAdapter.System.ICloneable.Clone()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: For a description of this member, see &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbDataAdapter> instance is cast to an <xref:System.ICloneable> interface.\n  syntax:\n    content: object ICloneable.Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A new <xref:System.Object> that is a copy of this instance.\n  overload: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand\n  id: UpdateCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  langs:\n  - csharp\n  name: UpdateCommand\n  nameWithType: OleDbDataAdapter.UpdateCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.UpdateCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.OleDb\n  summary: Gets or sets an SQL statement or stored procedure used to update records in the data source.\n  remarks: \"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the UpdateCommand can be generated automatically if you set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.OleDb.OleDbCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.OleDb.OleDbCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When UpdateCommand is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned. The UpdateCommand maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object.  \\n  \\n> [!NOTE]\\n>  If execution of this command returns rows, these rows may be merged with the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OleDb.OleDbCommand> object.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and UpdateCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \\n  \\n [!code-cs[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_7_1.cs)]\\n [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_7_1.vb)]\"\n  syntax:\n    content: public System.Data.OleDb.OleDbCommand UpdateCommand { get; set; }\n    return:\n      type: System.Data.OleDb.OleDbCommand\n      description: An <xref href=\"System.Data.OleDb.OleDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the data source that correspond to modified rows in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.OleDb.OleDbDataAdapter.UpdateCommand*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.Data.Common.DbDataAdapter\n- uid: System.SystemException\n  parent: System\n  isExternal: false\n  name: SystemException\n  nameWithType: SystemException\n  fullName: System.SystemException\n- uid: System.Data.OleDb.OleDbDataAdapter.#ctor\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: OleDbDataAdapter()\n  nameWithType: OleDbDataAdapter.OleDbDataAdapter()\n  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter()\n- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: OleDbDataAdapter(OleDbCommand)\n  nameWithType: OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)\n  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)\n- uid: System.Data.OleDb.OleDbCommand\n  parent: System.Data.OleDb\n  isExternal: false\n  name: OleDbCommand\n  nameWithType: OleDbCommand\n  fullName: System.Data.OleDb.OleDbCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: OleDbDataAdapter(String,OleDbConnection)\n  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)\n  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.OleDb.OleDbConnection\n  parent: System.Data.OleDb\n  isExternal: false\n  name: OleDbConnection\n  nameWithType: OleDbConnection\n  fullName: System.Data.OleDb.OleDbConnection\n- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: OleDbDataAdapter(String,String)\n  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,String)\n  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,String)\n- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n- uid: System.Data.Common.RowUpdatedEventArgs\n  parent: System.Data.Common\n  isExternal: false\n  name: RowUpdatedEventArgs\n  nameWithType: RowUpdatedEventArgs\n  fullName: System.Data.Common.RowUpdatedEventArgs\n- uid: System.Data.DataRow\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow\n- uid: System.Data.IDbCommand\n  parent: System.Data\n  isExternal: false\n  name: IDbCommand\n  nameWithType: IDbCommand\n  fullName: System.Data.IDbCommand\n- uid: System.Data.StatementType\n  parent: System.Data\n  isExternal: false\n  name: StatementType\n  nameWithType: StatementType\n  fullName: System.Data.StatementType\n- uid: System.Data.Common.DataTableMapping\n  parent: System.Data.Common\n  isExternal: false\n  name: DataTableMapping\n  nameWithType: DataTableMapping\n  fullName: System.Data.Common.DataTableMapping\n- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n- uid: System.Data.Common.RowUpdatingEventArgs\n  parent: System.Data.Common\n  isExternal: false\n  name: RowUpdatingEventArgs\n  nameWithType: RowUpdatingEventArgs\n  fullName: System.Data.Common.RowUpdatingEventArgs\n- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: DeleteCommand\n  nameWithType: OleDbDataAdapter.DeleteCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.DeleteCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: Fill(DataTable,Object)\n  nameWithType: OleDbDataAdapter.Fill(DataTable,Object)\n  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataTable,Object)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.DataTable\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: Fill(DataSet,Object,String)\n  nameWithType: OleDbDataAdapter.Fill(DataSet,Object,String)\n  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataSet,Object,String)\n- uid: System.Data.DataSet\n  parent: System.Data\n  isExternal: false\n  name: DataSet\n  nameWithType: DataSet\n  fullName: System.Data.DataSet\n- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: InsertCommand\n  nameWithType: OleDbDataAdapter.InsertCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.InsertCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: OnRowUpdated(RowUpdatedEventArgs)\n  nameWithType: OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: OnRowUpdating(RowUpdatingEventArgs)\n  nameWithType: OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdated\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: RowUpdated\n  nameWithType: OleDbDataAdapter.RowUpdated\n  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdated\n- uid: System.Data.OleDb.OleDbRowUpdatedEventHandler\n  parent: System.Data.OleDb\n  isExternal: false\n  name: OleDbRowUpdatedEventHandler\n  nameWithType: OleDbRowUpdatedEventHandler\n  fullName: System.Data.OleDb.OleDbRowUpdatedEventHandler\n- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdating\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: RowUpdating\n  nameWithType: OleDbDataAdapter.RowUpdating\n  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdating\n- uid: System.Data.OleDb.OleDbRowUpdatingEventHandler\n  parent: System.Data.OleDb\n  isExternal: false\n  name: OleDbRowUpdatingEventHandler\n  nameWithType: OleDbRowUpdatingEventHandler\n  fullName: System.Data.OleDb.OleDbRowUpdatingEventHandler\n- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: SelectCommand\n  nameWithType: OleDbDataAdapter.SelectCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.SelectCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: System.ICloneable.Clone()\n  nameWithType: OleDbDataAdapter.System.ICloneable.Clone()\n  fullName: System.Data.OleDb.OleDbDataAdapter.System.ICloneable.Clone()\n- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: UpdateCommand\n  nameWithType: OleDbDataAdapter.UpdateCommand\n  fullName: System.Data.OleDb.OleDbDataAdapter.UpdateCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.#ctor*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: OleDbDataAdapter\n  nameWithType: OleDbDataAdapter.OleDbDataAdapter\n- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: CreateRowUpdatedEvent\n  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent\n- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: CreateRowUpdatingEvent\n  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent\n- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: DeleteCommand\n  nameWithType: OleDbDataAdapter.DeleteCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.Fill*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: Fill\n  nameWithType: OleDbDataAdapter.Fill\n- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: InsertCommand\n  nameWithType: OleDbDataAdapter.InsertCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: OnRowUpdated\n  nameWithType: OleDbDataAdapter.OnRowUpdated\n- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: OnRowUpdating\n  nameWithType: OleDbDataAdapter.OnRowUpdating\n- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: SelectCommand\n  nameWithType: OleDbDataAdapter.SelectCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: System.ICloneable.Clone\n  nameWithType: OleDbDataAdapter.System.ICloneable.Clone\n- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand*\n  parent: System.Data.OleDb.OleDbDataAdapter\n  isExternal: false\n  name: UpdateCommand\n  nameWithType: OleDbDataAdapter.UpdateCommand\n"}