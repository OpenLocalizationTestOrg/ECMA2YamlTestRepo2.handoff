{"nodes":[{"pos":[1039,1094],"content":"Represents a first-in, first-out collection of objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a first-in, first-out collection of objects.","pos":[0,55]}]},{"pos":[1107,3155],"content":"This class implements a queue as a circular array. Objects stored in a Queue are inserted at one end and removed from the other.       Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value. Use Queue if you need to access the information in the same order that it is stored in the collection. Use <xref:System.Collections.Stack> if you need to access the information in reverse order. Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.       Three main operations can be performed on a Queue and its elements:      -   <xref:System.Collections.Queue.Enqueue%2A> adds an element to the end of the Queue.      -   <xref:System.Collections.Queue.Dequeue%2A> removes the oldest element from the start of the Queue.      -   <xref:System.Collections.Queue.Peek%2A> returns the oldest element that is at the start of the Queue but does not remove it from the Queue.       The capacity of a Queue is the number of elements the Queue can hold. As elements are added to a Queue, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.       The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the Queue is constructed. The default growth factor is 2.0. The capacity of the Queue will always increase by at least a minimum of four, regardless of the growth factor. For example, a Queue with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.       Queue accepts `null` as a valid value and allows duplicate elements.       For the generic version of this collection, see <xref:System.Collections.Generic.Queue%601?displayProperty=fullName>","needQuote":false,"needEscape":true,"nodes":[{"content":"This class implements a queue as a circular array.","pos":[0,50]},{"content":"Objects stored in a Queue are inserted at one end and removed from the other.","pos":[51,128]},{"content":"Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.","pos":[135,291]},{"content":"Use Queue if you need to access the information in the same order that it is stored in the collection.","pos":[292,394]},{"content":"Use &lt;xref:System.Collections.Stack&gt; if you need to access the information in reverse order.","pos":[395,486],"source":" Use <xref:System.Collections.Stack> if you need to access the information in reverse order."},{"content":"Use &lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt; or &lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt; if you need to access the collection from multiple threads concurrently.","pos":[487,680],"source":" Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently."},{"content":"Three main operations can be performed on a Queue and its elements:      -   &lt;xref:System.Collections.Queue.Enqueue%2A&gt; adds an element to the end of the Queue.","pos":[687,847],"source":"       Three main operations can be performed on a Queue and its elements:      -   <xref:System.Collections.Queue.Enqueue%2A> adds an element to the end of the Queue."},{"content":"-   &lt;xref:System.Collections.Queue.Dequeue%2A&gt; removes the oldest element from the start of the Queue.","pos":[853,955],"source":"      -   <xref:System.Collections.Queue.Dequeue%2A> removes the oldest element from the start of the Queue."},{"content":"-   &lt;xref:System.Collections.Queue.Peek%2A&gt; returns the oldest element that is at the start of the Queue but does not remove it from the Queue.","pos":[961,1104],"source":"      -   <xref:System.Collections.Queue.Peek%2A> returns the oldest element that is at the start of the Queue but does not remove it from the Queue."},{"content":"The capacity of a Queue is the number of elements the Queue can hold.","pos":[1111,1180]},{"content":"As elements are added to a Queue, the capacity is automatically increased as required through reallocation.","pos":[1181,1288]},{"content":"The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.","pos":[1290,1377],"source":"  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>."},{"content":"The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.","pos":[1384,1496]},{"content":"The growth factor is determined when the Queue is constructed.","pos":[1498,1560]},{"content":"The default growth factor is 2.0.","pos":[1561,1594]},{"content":"The capacity of the Queue will always increase by at least a minimum of four, regardless of the growth factor.","pos":[1595,1705]},{"content":"For example, a Queue with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.","pos":[1706,1832]},{"content":"Queue accepts <ph id=\"ph1\">`null`</ph> as a valid value and allows duplicate elements.","pos":[1839,1907],"source":"       Queue accepts `null` as a valid value and allows duplicate elements."},{"content":"For the generic version of this collection, see &lt;xref:System.Collections.Generic.Queue%601?displayProperty=fullName&gt;","pos":[1914,2030],"source":"       For the generic version of this collection, see <xref:System.Collections.Generic.Queue%601?displayProperty=fullName>"}]},{"pos":[4322,4492],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that is empty, has the default initial capacity, and uses the default growth factor.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.Queue\"></xref> class that is empty, has the default initial capacity, and uses the default growth factor."},{"pos":[4505,5108],"content":"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.       The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref:System.Collections.Queue> is constructed.       This constructor is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.       The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref:System.Collections.Queue> is constructed.       This constructor is an O(1) operation.","pos":[0,599],"nodes":[{"content":"The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.","pos":[0,121],"source":"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold."},{"content":"As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.","pos":[123,256],"source":"  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation."},{"content":"The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.","pos":[258,345],"source":"  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>."},{"content":"The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.","pos":[352,464]},{"content":"The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.","pos":[466,554],"source":"  The growth factor is determined when the <xref:System.Collections.Queue> is constructed."},{"content":"This constructor is an O(1) operation.","pos":[561,599]}]}]},{"pos":[5638,5884],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.Queue\"></xref> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor."},{"pos":[5897,6744],"content":"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.       The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref:System.Collections.Queue> is constructed.       The elements are copied onto the <xref:System.Collections.Queue> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.       This constructor is an O(`n`) operation, where `n` is the number of elements in `col`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.","pos":[0,121],"source":"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold."},{"content":"As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.","pos":[123,256],"source":"  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation."},{"content":"The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.","pos":[258,345],"source":"  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>."},{"content":"The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.","pos":[352,464]},{"content":"The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.","pos":[466,554],"source":"  The growth factor is determined when the <xref:System.Collections.Queue> is constructed."},{"content":"The elements are copied onto the &lt;xref:System.Collections.Queue&gt; in the same order they are read by the &lt;xref:System.Collections.IEnumerator&gt; of the &lt;xref:System.Collections.ICollection&gt;.","pos":[561,748],"source":"       The elements are copied onto the <xref:System.Collections.Queue> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in <ph id=\"ph3\">`col`</ph>.","pos":[755,841],"source":"       This constructor is an O(`n`) operation, where `n` is the number of elements in `col`."}]},{"pos":[6912,6976],"content":"The <xref:System.Collections.ICollection> to copy elements from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.ICollection&gt; to copy elements from.","pos":[0,64],"source":"The <xref:System.Collections.ICollection> to copy elements from."}]},{"pos":[7137,7218],"content":"<ph id=\"ph1\">&lt;code&gt;col&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>col</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7573,7745],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that is empty, has the specified initial capacity, and uses the default growth factor.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.Queue\"></xref> class that is empty, has the specified initial capacity, and uses the default growth factor."},{"pos":[7758,8601],"content":"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.       The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref:System.Collections.Queue> is constructed.       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.       This constructor is an O(`n`) operation, where `n` is `capacity`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.","pos":[0,121],"source":"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold."},{"content":"As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.","pos":[123,256],"source":"  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation."},{"content":"The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.","pos":[258,345],"source":"  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>."},{"content":"The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.","pos":[352,464]},{"content":"The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.","pos":[466,554],"source":"  The growth factor is determined when the <xref:System.Collections.Queue> is constructed."},{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Queue&gt;.","pos":[561,765],"source":"       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`capacity`</ph>.","pos":[772,837],"source":"       This constructor is an O(`n`) operation, where `n` is `capacity`."}]},{"pos":[8734,8832],"content":"The initial number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can contain.","needQuote":true,"needEscape":true,"source":"The initial number of elements that the <xref href=\"System.Collections.Queue\"></xref> can contain."},{"pos":[9005,9045],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>capacity</code> is less than zero."},{"pos":[9449,9623],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that is empty, has the specified initial capacity, and uses the specified growth factor.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.Queue\"></xref> class that is empty, has the specified initial capacity, and uses the specified growth factor."},{"pos":[9636,10706],"content":"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.       The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref:System.Collections.Queue> is constructed. The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.       This constructor is an O(`n`) operation, where `n` is `capacity`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.","pos":[0,121],"source":"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold."},{"content":"As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.","pos":[123,256],"source":"  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation."},{"content":"The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.","pos":[258,345],"source":"  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>."},{"content":"The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.","pos":[352,464]},{"content":"The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.","pos":[466,554],"source":"  The growth factor is determined when the <xref:System.Collections.Queue> is constructed."},{"content":"The capacity of the &lt;xref:System.Collections.Queue&gt; will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the &lt;xref:System.Collections.Queue&gt; from increasing in size.","pos":[555,781],"source":" The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size."},{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Queue&gt;.","pos":[788,992],"source":"       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`capacity`</ph>.","pos":[999,1064],"source":"       This constructor is an O(`n`) operation, where `n` is `capacity`."}]},{"pos":[10857,10955],"content":"The initial number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can contain.","needQuote":true,"needEscape":true,"source":"The initial number of elements that the <xref href=\"System.Collections.Queue\"></xref> can contain."},{"pos":[11022,11120],"content":"The factor by which the capacity of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is expanded.","needQuote":true,"needEscape":true,"source":"The factor by which the capacity of the <xref href=\"System.Collections.Queue\"></xref> is expanded."},{"pos":[11294,11418],"content":"<code>capacity</code> is less than zero.       -or-       <code>growFactor</code> is less than 1.0 or greater than 10.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","pos":[0,40],"source":"<code>capacity</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;growFactor&lt;/code&gt;</ph> is less than 1.0 or greater than 10.0.","pos":[47,120],"source":"       -or-       <code>growFactor</code> is less than 1.0 or greater than 10.0."}]},{"pos":[11724,11799],"content":"Removes all objects from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes all objects from the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[11812,12336],"content":"<xref:System.Collections.Queue.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.       The capacity remains unchanged. To reset the capacity of the <xref:System.Collections.Queue>, call <xref:System.Collections.Queue.TrimToSize%2A>. Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Collections.Queue.Count%2A&gt; is set to zero, and references to other objects from elements of the collection are also released.","pos":[0,139],"source":"<xref:System.Collections.Queue.Count%2A> is set to zero, and references to other objects from elements of the collection are also released."},{"content":"The capacity remains unchanged.","pos":[146,177]},{"content":"To reset the capacity of the &lt;xref:System.Collections.Queue&gt;, call &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.","pos":[178,291],"source":" To reset the capacity of the <xref:System.Collections.Queue>, call <xref:System.Collections.Queue.TrimToSize%2A>."},{"content":"Trimming an empty &lt;xref:System.Collections.Queue&gt; sets the capacity of the &lt;xref:System.Collections.Queue&gt; to the default capacity.","pos":[292,423],"source":" Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.","pos":[430,520],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>."}]},{"pos":[13200,13276],"content":"Creates a shallow copy of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a shallow copy of the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[13289,13829],"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.       In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.","pos":[0,186]},{"content":"The references in the new collection point to the same objects that the references in the original collection point to.","pos":[187,306]},{"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","pos":[313,439]},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.","pos":[446,536],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>."}]},{"pos":[13962,14030],"content":"A shallow copy of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A shallow copy of the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[14459,14545],"content":"Determines whether an element is in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines whether an element is in the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[14558,15248],"content":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `obj` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `obj` parameter on the objects in the collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[0,99],"source":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.","pos":[106,245],"source":"       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>."},{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id=\"ph1\">`obj`</ph> to determine whether <ph id=\"ph2\">`item`</ph> exists.","pos":[252,459],"source":"       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `obj` to determine whether `item` exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id=\"ph1\">`obj`</ph> parameter on the objects in the collection.","pos":[460,686],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `obj` parameter on the objects in the collection."}]},{"pos":[15391,15558],"content":"The <xref:System.Object> to locate in the <xref href=\"System.Collections.Queue\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,88],"source":"The <xref:System.Object> to locate in the <xref href=\"System.Collections.Queue\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,167],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[15617,15835],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found in the <bpt id=\"p3\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is found in the <xref href=\"System.Collections.Queue\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16296,16452],"content":"Copies the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> elements to an existing one-dimensional &lt;xref:System.Array&gt;, starting at the specified array index.","needQuote":true,"needEscape":true,"source":"Copies the <xref href=\"System.Collections.Queue\"></xref> elements to an existing one-dimensional <xref:System.Array>, starting at the specified array index."},{"pos":[16465,16710],"content":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Queue>.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The elements are copied to the &lt;xref:System.Array&gt; in the same order in which the enumerator iterates through the &lt;xref:System.Collections.Queue&gt;.","pos":[0,146],"source":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Queue>."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.","pos":[153,243],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>."}]},{"pos":[17304,17497],"content":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.Queue\"></xref>. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,138],"source":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.Queue\"></xref>."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[139,193],"source":" The <xref:System.Array> must have zero-based indexing."}]},{"pos":[17558,17614],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[17776,17859],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[17974,18011],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero."},{"pos":[18107,18362],"content":"<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref href=\"System.Collections.Queue\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","pos":[0,39],"source":"<code>array</code> is multidimensional."},{"content":"-or-       The number of elements in the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is greater than the available space from <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","pos":[46,249],"source":"       -or-       The number of elements in the source <xref href=\"System.Collections.Queue\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}]},{"pos":[18476,18624],"content":"The type of the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of the source <xref href=\"System.Collections.Queue\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."},{"pos":[18925,19016],"content":"Gets the number of elements contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the number of elements contained in the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[19029,20092],"content":"The capacity of a <xref:System.Collections.Queue> is the number of elements that the <xref:System.Collections.Queue> can store. Count is the number of elements that are actually in the <xref:System.Collections.Queue>.       The capacity of a <xref:System.Collections.Queue> is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements. The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the <xref:System.Collections.Queue> is constructed. The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.       The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity of a <xref:System.Collections.Queue> is the number of elements that the <xref:System.Collections.Queue> can store. Count is the number of elements that are actually in the <xref:System.Collections.Queue>.       The capacity of a <xref:System.Collections.Queue> is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements. The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the <xref:System.Collections.Queue> is constructed. The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.       The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.       Retrieving the value of this property is an O(1) operation.","pos":[0,1057],"nodes":[{"content":"The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements that the &lt;xref:System.Collections.Queue&gt; can store.","pos":[0,127],"source":"The capacity of a <xref:System.Collections.Queue> is the number of elements that the <xref:System.Collections.Queue> can store."},{"content":"Count is the number of elements that are actually in the &lt;xref:System.Collections.Queue&gt;.","pos":[128,217],"source":" Count is the number of elements that are actually in the <xref:System.Collections.Queue>."},{"content":"The capacity of a &lt;xref:System.Collections.Queue&gt; is always greater than or equal to Count.","pos":[224,315],"source":"       The capacity of a <xref:System.Collections.Queue> is always greater than or equal to Count."},{"content":"If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[316,504]},{"content":"The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.","pos":[505,670],"source":" The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the <xref:System.Collections.Queue> is constructed."},{"content":"The capacity of the &lt;xref:System.Collections.Queue&gt; will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the &lt;xref:System.Collections.Queue&gt; from increasing in size.","pos":[671,897],"source":" The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size."},{"content":"The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.","pos":[904,991],"source":"       The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[998,1057]}]}]},{"pos":[20207,20293],"content":"The number of elements contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of elements contained in the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[20669,20770],"content":"Removes and returns the object at the beginning of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes and returns the object at the beginning of the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[20783,21347],"content":"This method is similar to the <xref:System.Collections.Queue.Peek%2A> method, but <xref:System.Collections.Queue.Peek%2A> does not modify the <xref:System.Collections.Queue>.       `null` can be added to the <xref:System.Collections.Queue> as a value. To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is similar to the &lt;xref:System.Collections.Queue.Peek%2A&gt; method, but &lt;xref:System.Collections.Queue.Peek%2A&gt; does not modify the &lt;xref:System.Collections.Queue&gt;.","pos":[0,174],"source":"This method is similar to the <xref:System.Collections.Queue.Peek%2A> method, but <xref:System.Collections.Queue.Peek%2A> does not modify the <xref:System.Collections.Queue>."},{"content":"<ph id=\"ph1\">`null`</ph> can be added to the &lt;xref:System.Collections.Queue&gt; as a value.","pos":[181,251],"source":"`null` can be added to the <xref:System.Collections.Queue> as a value."},{"content":"To distinguish between a null value and the end of the &lt;xref:System.Collections.Queue&gt;, check the &lt;xref:System.Collections.Queue.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Queue&gt; is empty.","pos":[252,520],"source":" To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty."},{"content":"This method is an O(1) operation.","pos":[527,560]}]},{"pos":[22044,22143],"content":"The object that is removed from the beginning of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object that is removed from the beginning of the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[22314,22373],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is empty.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Queue\"></xref> is empty."},{"pos":[22736,22815],"content":"Adds an object to the end of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds an object to the end of the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[22828,23920],"content":"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.       The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref:System.Collections.Queue> is constructed. The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.       If <xref:System.Collections.Queue.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation. If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.","pos":[0,121],"source":"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold."},{"content":"As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.","pos":[123,256],"source":"  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation."},{"content":"The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.","pos":[258,345],"source":"  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>."},{"content":"The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.","pos":[352,464]},{"content":"The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.","pos":[466,554],"source":"  The growth factor is determined when the <xref:System.Collections.Queue> is constructed."},{"content":"The capacity of the &lt;xref:System.Collections.Queue&gt; will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the &lt;xref:System.Collections.Queue&gt; from increasing in size.","pos":[555,781],"source":" The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size."},{"content":"If &lt;xref:System.Collections.Queue.Count%2A&gt; is less than the capacity of the internal array, this method is an O(1) operation.","pos":[788,914],"source":"       If <xref:System.Collections.Queue.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation."},{"content":"If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.","pos":[915,1088],"source":" If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>."}]},{"pos":[24624,24774],"content":"The object to add to the <xref href=\"System.Collections.Queue\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to add to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,71],"source":"The object to add to the <xref href=\"System.Collections.Queue\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[72,150],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[25182,25276],"content":"Returns an enumerator that iterates through the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns an enumerator that iterates through the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[25289,27872],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[212,332]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[339,422]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[423,519],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[521,601],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[602,819],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[826,1022],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1023,1147],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1154,1381],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1382,1513],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[1514,1664],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1665,1889],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1896,1968]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[1969,2131]},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[2138,2292]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[2294,2399]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[2401,2529]},{"content":"This method is an O(1) operation.","pos":[2536,2569]}]},{"pos":[28054,28149],"content":"An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[28564,28686],"content":"Gets a value indicating whether access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is synchronized (thread safe).","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether access to the <xref href=\"System.Collections.Queue\"></xref> is synchronized (thread safe)."},{"pos":[28699,29296],"content":"To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through the wrapper returned by the <xref:System.Collections.Queue.Synchronized%2A> method.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","needQuote":false,"needEscape":true,"nodes":[{"content":"To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through the wrapper returned by the <xref:System.Collections.Queue.Synchronized%2A> method.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,595],"nodes":[{"content":"To guarantee the thread safety of the &lt;xref:System.Collections.Queue&gt;, all operations must be done through the wrapper returned by the &lt;xref:System.Collections.Queue.Synchronized%2A&gt; method.","pos":[0,190],"source":"To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through the wrapper returned by the <xref:System.Collections.Queue.Synchronized%2A> method."},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[197,275]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[276,413]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[414,595]}]}]},{"pos":[30541,30849],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.Queue\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access to the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is synchronized (thread safe); otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,229],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.Queue\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[230,308],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[31219,31328],"content":"Returns the object at the beginning of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> without removing it.","needQuote":true,"needEscape":true,"source":"Returns the object at the beginning of the <xref href=\"System.Collections.Queue\"></xref> without removing it."},{"pos":[31341,31873],"content":"This method is similar to the <xref:System.Collections.Queue.Dequeue%2A> method, but Peek does not modify the <xref:System.Collections.Queue>.       `null` can be added to the <xref:System.Collections.Queue> as a value. To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is similar to the &lt;xref:System.Collections.Queue.Dequeue%2A&gt; method, but Peek does not modify the &lt;xref:System.Collections.Queue&gt;.","pos":[0,142],"source":"This method is similar to the <xref:System.Collections.Queue.Dequeue%2A> method, but Peek does not modify the <xref:System.Collections.Queue>."},{"content":"<ph id=\"ph1\">`null`</ph> can be added to the &lt;xref:System.Collections.Queue&gt; as a value.","pos":[149,219],"source":"`null` can be added to the <xref:System.Collections.Queue> as a value."},{"content":"To distinguish between a null value and the end of the &lt;xref:System.Collections.Queue&gt;, check the &lt;xref:System.Collections.Queue.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Queue&gt; is empty.","pos":[220,488],"source":" To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty."},{"content":"This method is an O(1) operation.","pos":[495,528]}]},{"pos":[32567,32648],"content":"The object at the beginning of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object at the beginning of the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[32816,32875],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is empty.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Queue\"></xref> is empty."},{"pos":[33282,33392],"content":"Returns a new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that wraps the original queue, and is thread safe.","needQuote":true,"needEscape":true,"source":"Returns a new <xref href=\"System.Collections.Queue\"></xref> that wraps the original queue, and is thread safe."},{"pos":[33405,34079],"content":"The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.       To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through this wrapper only.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","needQuote":false,"needEscape":true,"nodes":[{"content":"The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.       To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through this wrapper only.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,670],"nodes":[{"content":"The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.","pos":[0,133]},{"content":"To guarantee the thread safety of the &lt;xref:System.Collections.Queue&gt;, all operations must be done through this wrapper only.","pos":[140,265],"source":"       To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through this wrapper only."},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[272,350]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[351,488]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[489,670]}]}]},{"pos":[35369,35434],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to synchronize.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Queue\"></xref> to synchronize."},{"pos":[35503,35594],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> wrapper that is synchronized (thread safe).","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Queue\"></xref> wrapper that is synchronized (thread safe)."},{"pos":[35762,35845],"content":"<ph id=\"ph1\">&lt;code&gt;queue&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>queue</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[36161,36268],"content":"Gets an object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[36281,37350],"content":"To create a synchronized version of the <xref:System.Collections.Queue>, use the <xref:System.Collections.Queue.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.Queue> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Queue>, not directly on the <xref:System.Collections.Queue>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Queue> object.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","needQuote":false,"needEscape":true,"nodes":[{"content":"To create a synchronized version of the <xref:System.Collections.Queue>, use the <xref:System.Collections.Queue.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.Queue> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Queue>, not directly on the <xref:System.Collections.Queue>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Queue> object.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,1067],"nodes":[{"content":"To create a synchronized version of the &lt;xref:System.Collections.Queue&gt;, use the &lt;xref:System.Collections.Queue.Synchronized%2A&gt; method.","pos":[0,136],"source":"To create a synchronized version of the <xref:System.Collections.Queue>, use the <xref:System.Collections.Queue.Synchronized%2A> method."},{"content":"However, derived classes can provide their own synchronized version of the &lt;xref:System.Collections.Queue&gt; using the SyncRoot property.","pos":[137,272],"source":" However, derived classes can provide their own synchronized version of the <xref:System.Collections.Queue> using the SyncRoot property."},{"content":"The synchronizing code must perform operations on the SyncRoot of the &lt;xref:System.Collections.Queue&gt;, not directly on the &lt;xref:System.Collections.Queue&gt;.","pos":[273,428],"source":" The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Queue>, not directly on the <xref:System.Collections.Queue>."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[429,510]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.Queue&gt; object.","pos":[511,662],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Queue> object."},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[669,747]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[748,885]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[886,1067]}]}]},{"pos":[38002,38104],"content":"An object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[38483,38564],"content":"Copies the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> elements to a new array.","needQuote":true,"needEscape":true,"source":"Copies the <xref href=\"System.Collections.Queue\"></xref> elements to a new array."},{"pos":[38577,38882],"content":"The <xref:System.Collections.Queue> is not modified. The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Queue> to its end.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.Queue&gt; is not modified.","pos":[0,52],"source":"The <xref:System.Collections.Queue> is not modified."},{"content":"The order of the elements in the new array is the same as the order of the elements from the beginning of the &lt;xref:System.Collections.Queue&gt; to its end.","pos":[53,206],"source":" The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Queue> to its end."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.","pos":[213,303],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>."}]},{"pos":[39461,39555],"content":"A new array containing elements copied from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new array containing elements copied from the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[39948,40052],"content":"Sets the capacity to the actual number of elements in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Queue\"></xref>."},{"pos":[40065,40561],"content":"This method can be used to minimize a queue's memory overhead if no new elements will be added to the queue.       To reset a <xref:System.Collections.Queue> to its initial state, call the <xref:System.Collections.Queue.Clear%2A> method before calling TrimToSize. Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method can be used to minimize a queue's memory overhead if no new elements will be added to the queue.","pos":[0,108]},{"content":"To reset a &lt;xref:System.Collections.Queue&gt; to its initial state, call the &lt;xref:System.Collections.Queue.Clear%2A&gt; method before calling TrimToSize.","pos":[115,263],"source":"       To reset a <xref:System.Collections.Queue> to its initial state, call the <xref:System.Collections.Queue.Clear%2A> method before calling TrimToSize."},{"content":"Trimming an empty &lt;xref:System.Collections.Queue&gt; sets the capacity of the &lt;xref:System.Collections.Queue&gt; to the default capacity.","pos":[264,395],"source":" Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.","pos":[402,492],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>."}]},{"pos":[40805,40868],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Queue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Queue\"></xref> is read-only."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Queue\n  id: Queue\n  children:\n  - System.Collections.Queue.#ctor\n  - System.Collections.Queue.#ctor(System.Collections.ICollection)\n  - System.Collections.Queue.#ctor(System.Int32)\n  - System.Collections.Queue.#ctor(System.Int32,System.Single)\n  - System.Collections.Queue.Clear\n  - System.Collections.Queue.Clone\n  - System.Collections.Queue.Contains(System.Object)\n  - System.Collections.Queue.CopyTo(System.Array,System.Int32)\n  - System.Collections.Queue.Count\n  - System.Collections.Queue.Dequeue\n  - System.Collections.Queue.Enqueue(System.Object)\n  - System.Collections.Queue.GetEnumerator\n  - System.Collections.Queue.IsSynchronized\n  - System.Collections.Queue.Peek\n  - System.Collections.Queue.Synchronized(System.Collections.Queue)\n  - System.Collections.Queue.SyncRoot\n  - System.Collections.Queue.ToArray\n  - System.Collections.Queue.TrimToSize\n  langs:\n  - csharp\n  name: Queue\n  nameWithType: Queue\n  fullName: System.Collections.Queue\n  type: Class\n  summary: Represents a first-in, first-out collection of objects.\n  remarks: \"This class implements a queue as a circular array. Objects stored in a Queue are inserted at one end and removed from the other.  \\n  \\n Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value. Use Queue if you need to access the information in the same order that it is stored in the collection. Use <xref:System.Collections.Stack> if you need to access the information in reverse order. Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.  \\n  \\n Three main operations can be performed on a Queue and its elements:  \\n  \\n-   <xref:System.Collections.Queue.Enqueue%2A> adds an element to the end of the Queue.  \\n  \\n-   <xref:System.Collections.Queue.Dequeue%2A> removes the oldest element from the start of the Queue.  \\n  \\n-   <xref:System.Collections.Queue.Peek%2A> returns the oldest element that is at the start of the Queue but does not remove it from the Queue.  \\n  \\n The capacity of a Queue is the number of elements the Queue can hold. As elements are added to a Queue, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.  \\n  \\n The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the Queue is constructed. The default growth factor is 2.0. The capacity of the Queue will always increase by at least a minimum of four, regardless of the growth factor. For example, a Queue with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.  \\n  \\n Queue accepts `null` as a valid value and allows duplicate elements.  \\n  \\n For the generic version of this collection, see <xref:System.Collections.Generic.Queue%601?displayProperty=fullName>\"\n  example:\n  - \"The following example shows how to create and add values to a Queue and how to print out its values.  \\n  \\n [!code-cs[Classic Queue Example#1](~/add/codesnippet/csharp/t-system.collections.queue_1.cs)]\\n [!code-cpp[Classic Queue Example#1](~/add/codesnippet/cpp/t-system.collections.queue_1.cpp)]\\n [!code-vb[Classic Queue Example#1](~/add/codesnippet/visualbasic/t-system.collections.queue_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Queue/QueueDebugView))]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class Queue : ICloneable, System.Collections.ICollection\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.ICloneable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Collections.Queue.#ctor\n  id: '#ctor'\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Queue()\n  nameWithType: Queue.Queue()\n  fullName: System.Collections.Queue.Queue()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Queue\"></xref> class that is empty, has the default initial capacity, and uses the default growth factor.\n  remarks: \"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.  \\n  \\n The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref:System.Collections.Queue> is constructed.  \\n  \\n This constructor is an O(1) operation.\"\n  syntax:\n    content: public Queue ();\n    parameters: []\n  overload: System.Collections.Queue.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Queue.#ctor(System.Collections.ICollection)\n  id: '#ctor(System.Collections.ICollection)'\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Queue(ICollection)\n  nameWithType: Queue.Queue(ICollection)\n  fullName: System.Collections.Queue.Queue(ICollection)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Queue\"></xref> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.\n  remarks: \"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.  \\n  \\n The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref:System.Collections.Queue> is constructed.  \\n  \\n The elements are copied onto the <xref:System.Collections.Queue> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in `col`.\"\n  syntax:\n    content: public Queue (System.Collections.ICollection col);\n    parameters:\n    - id: col\n      type: System.Collections.ICollection\n      description: The <xref:System.Collections.ICollection> to copy elements from.\n  overload: System.Collections.Queue.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>col</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Queue.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Queue(Int32)\n  nameWithType: Queue.Queue(Int32)\n  fullName: System.Collections.Queue.Queue(Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Queue\"></xref> class that is empty, has the specified initial capacity, and uses the default growth factor.\n  remarks: \"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.  \\n  \\n The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref:System.Collections.Queue> is constructed.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `capacity`.\"\n  syntax:\n    content: public Queue (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The initial number of elements that the <xref href=\"System.Collections.Queue\"></xref> can contain.\n  overload: System.Collections.Queue.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is less than zero.\n  platform:\n  - net462\n- uid: System.Collections.Queue.#ctor(System.Int32,System.Single)\n  id: '#ctor(System.Int32,System.Single)'\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Queue(Int32,Single)\n  nameWithType: Queue.Queue(Int32,Single)\n  fullName: System.Collections.Queue.Queue(Int32,Single)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Queue\"></xref> class that is empty, has the specified initial capacity, and uses the specified growth factor.\n  remarks: \"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.  \\n  \\n The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref:System.Collections.Queue> is constructed. The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `capacity`.\"\n  syntax:\n    content: public Queue (int capacity, float growFactor);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The initial number of elements that the <xref href=\"System.Collections.Queue\"></xref> can contain.\n    - id: growFactor\n      type: System.Single\n      description: The factor by which the capacity of the <xref href=\"System.Collections.Queue\"></xref> is expanded.\n  overload: System.Collections.Queue.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>capacity</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>growFactor</code> is less than 1.0 or greater than 10.0.\"\n  platform:\n  - net462\n- uid: System.Collections.Queue.Clear\n  id: Clear\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: Queue.Clear()\n  fullName: System.Collections.Queue.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Removes all objects from the <xref href=\"System.Collections.Queue\"></xref>.\n  remarks: \"<xref:System.Collections.Queue.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \\n  \\n The capacity remains unchanged. To reset the capacity of the <xref:System.Collections.Queue>, call <xref:System.Collections.Queue.TrimToSize%2A>. Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.\"\n  example:\n  - \"The following example shows how to clear the values of the <xref:System.Collections.Queue>.  \\n  \\n [!code-cpp[Classic Queue.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.que_6_1.cpp)]\\n [!code-cs[Classic Queue.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.que_6_1.cs)]\\n [!code-vb[Classic Queue.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_6_1.vb)]\"\n  syntax:\n    content: public virtual void Clear ();\n    parameters: []\n  overload: System.Collections.Queue.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Queue.Clone\n  id: Clone\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: Queue.Clone()\n  fullName: System.Collections.Queue.Clone()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Creates a shallow copy of the <xref href=\"System.Collections.Queue\"></xref>.\n  remarks: \"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \\n  \\n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.\"\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A shallow copy of the <xref href=\"System.Collections.Queue\"></xref>.\n  overload: System.Collections.Queue.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Queue.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Contains(Object)\n  nameWithType: Queue.Contains(Object)\n  fullName: System.Collections.Queue.Contains(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Determines whether an element is in the <xref href=\"System.Collections.Queue\"></xref>.\n  remarks: \"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `obj` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `obj` parameter on the objects in the collection.\"\n  syntax:\n    content: public virtual bool Contains (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The <xref:System.Object> to locate in the <xref href=\"System.Collections.Queue\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is found in the <xref href=\"System.Collections.Queue\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Queue.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Queue.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: Queue.CopyTo(Array,Int32)\n  fullName: System.Collections.Queue.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Copies the <xref href=\"System.Collections.Queue\"></xref> elements to an existing one-dimensional <xref:System.Array>, starting at the specified array index.\n  remarks: \"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Queue>.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.\"\n  example:\n  - \"The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.  \\n  \\n [!code-cpp[Classic Queue.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.que_4_1.cpp)]\\n [!code-cs[Classic Queue.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.que_4_1.cs)]\\n [!code-vb[Classic Queue.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_4_1.vb)]\"\n  syntax:\n    content: public virtual void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.Queue\"></xref>. The <xref:System.Array> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Collections.Queue.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.Queue\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.ArrayTypeMismatchException\n    commentId: T:System.ArrayTypeMismatchException\n    description: The type of the source <xref href=\"System.Collections.Queue\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  platform:\n  - net462\n- uid: System.Collections.Queue.Count\n  id: Count\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Count\n  nameWithType: Queue.Count\n  fullName: System.Collections.Queue.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets the number of elements contained in the <xref href=\"System.Collections.Queue\"></xref>.\n  remarks: \"The capacity of a <xref:System.Collections.Queue> is the number of elements that the <xref:System.Collections.Queue> can store. Count is the number of elements that are actually in the <xref:System.Collections.Queue>.  \\n  \\n The capacity of a <xref:System.Collections.Queue> is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements. The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the <xref:System.Collections.Queue> is constructed. The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.  \\n  \\n The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of elements contained in the <xref href=\"System.Collections.Queue\"></xref>.\n  overload: System.Collections.Queue.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Queue.Dequeue\n  id: Dequeue\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Dequeue()\n  nameWithType: Queue.Dequeue()\n  fullName: System.Collections.Queue.Dequeue()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Removes and returns the object at the beginning of the <xref href=\"System.Collections.Queue\"></xref>.\n  remarks: \"This method is similar to the <xref:System.Collections.Queue.Peek%2A> method, but <xref:System.Collections.Queue.Peek%2A> does not modify the <xref:System.Collections.Queue>.  \\n  \\n `null` can be added to the <xref:System.Collections.Queue> as a value. To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.  \\n  \\n [!code-vb[Classic Queue.Enqueue Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_0_1.vb)]\\n [!code-cs[Classic Queue.Enqueue Example#1](~/add/codesnippet/csharp/m-system.collections.que_0_1.cs)]\\n [!code-cpp[Classic Queue.Enqueue Example#1](~/add/codesnippet/cpp/m-system.collections.que_0_1.cpp)]\"\n  syntax:\n    content: public virtual object Dequeue ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The object that is removed from the beginning of the <xref href=\"System.Collections.Queue\"></xref>.\n  overload: System.Collections.Queue.Dequeue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Collections.Queue\"></xref> is empty.\n  platform:\n  - net462\n- uid: System.Collections.Queue.Enqueue(System.Object)\n  id: Enqueue(System.Object)\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Enqueue(Object)\n  nameWithType: Queue.Enqueue(Object)\n  fullName: System.Collections.Queue.Enqueue(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Adds an object to the end of the <xref href=\"System.Collections.Queue\"></xref>.\n  remarks: \"The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.  As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.  \\n  \\n The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref:System.Collections.Queue> is constructed. The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.  \\n  \\n If <xref:System.Collections.Queue.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation. If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.\"\n  example:\n  - \"The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.  \\n  \\n [!code-vb[Classic Queue.Enqueue Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_5_1.vb)]\\n [!code-cs[Classic Queue.Enqueue Example#1](~/add/codesnippet/csharp/m-system.collections.que_5_1.cs)]\\n [!code-cpp[Classic Queue.Enqueue Example#1](~/add/codesnippet/cpp/m-system.collections.que_5_1.cpp)]\"\n  syntax:\n    content: public virtual void Enqueue (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to add to the <xref href=\"System.Collections.Queue\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Collections.Queue.Enqueue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Queue.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: Queue.GetEnumerator()\n  fullName: System.Collections.Queue.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns an enumerator that iterates through the <xref href=\"System.Collections.Queue\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public virtual System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.Queue\"></xref>.\n  overload: System.Collections.Queue.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Queue.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: Queue.IsSynchronized\n  fullName: System.Collections.Queue.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.Queue\"></xref> is synchronized (thread safe).\n  remarks: \"To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through the wrapper returned by the <xref:System.Collections.Queue.Synchronized%2A> method.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration. Retrieving the value of this property is an O(1) operation.  \\n  \\n [!code-cpp[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.que_0_1.cpp)]\\n [!code-cs[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.que_0_1.cs)]\\n [!code-vb[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.que_0_1.vb)]  \\n  \\n The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized, and use a synchronized <xref:System.Collections.Queue>.  \\n  \\n [!code-cpp[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.que_0_2.cpp)]\\n [!code-cs[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.que_0_2.cs)]\\n [!code-vb[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.que_0_2.vb)]\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.Queue\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Queue.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Queue.Peek\n  id: Peek\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Peek()\n  nameWithType: Queue.Peek()\n  fullName: System.Collections.Queue.Peek()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns the object at the beginning of the <xref href=\"System.Collections.Queue\"></xref> without removing it.\n  remarks: \"This method is similar to the <xref:System.Collections.Queue.Dequeue%2A> method, but Peek does not modify the <xref:System.Collections.Queue>.  \\n  \\n `null` can be added to the <xref:System.Collections.Queue> as a value. To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.  \\n  \\n [!code-vb[Classic Queue.Enqueue Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_1_1.vb)]\\n [!code-cs[Classic Queue.Enqueue Example#1](~/add/codesnippet/csharp/m-system.collections.que_1_1.cs)]\\n [!code-cpp[Classic Queue.Enqueue Example#1](~/add/codesnippet/cpp/m-system.collections.que_1_1.cpp)]\"\n  syntax:\n    content: public virtual object Peek ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The object at the beginning of the <xref href=\"System.Collections.Queue\"></xref>.\n  overload: System.Collections.Queue.Peek*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Collections.Queue\"></xref> is empty.\n  platform:\n  - net462\n- uid: System.Collections.Queue.Synchronized(System.Collections.Queue)\n  id: Synchronized(System.Collections.Queue)\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: Synchronized(Queue)\n  nameWithType: Queue.Synchronized(Queue)\n  fullName: System.Collections.Queue.Synchronized(Queue)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns a new <xref href=\"System.Collections.Queue\"></xref> that wraps the original queue, and is thread safe.\n  remarks: \"The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.  \\n  \\n To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through this wrapper only.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration. This method is an O(1) operation.  \\n  \\n [!code-cpp[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.que_3_1.cpp)]\\n [!code-cs[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.que_3_1.cs)]\\n [!code-vb[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.que_3_1.vb)]  \\n  \\n The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized and use a synchronized <xref:System.Collections.Queue>.  \\n  \\n [!code-cpp[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.que_3_2.cpp)]\\n [!code-cs[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.que_3_2.cs)]\\n [!code-vb[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_3_2.vb)]\"\n  syntax:\n    content: public static System.Collections.Queue Synchronized (System.Collections.Queue queue);\n    parameters:\n    - id: queue\n      type: System.Collections.Queue\n      description: The <xref href=\"System.Collections.Queue\"></xref> to synchronize.\n    return:\n      type: System.Collections.Queue\n      description: A <xref href=\"System.Collections.Queue\"></xref> wrapper that is synchronized (thread safe).\n  overload: System.Collections.Queue.Synchronized*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>queue</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Queue.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: Queue.SyncRoot\n  fullName: System.Collections.Queue.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Queue\"></xref>.\n  remarks: \"To create a synchronized version of the <xref:System.Collections.Queue>, use the <xref:System.Collections.Queue.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.Queue> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Queue>, not directly on the <xref:System.Collections.Queue>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Queue> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the SyncRoot during the entire enumeration. Retrieving the value of this property is an O(1) operation.  \\n  \\n [!code-cpp[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.que_1_1.cpp)]\\n [!code-cs[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.que_1_1.cs)]\\n [!code-vb[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.que_1_1.vb)]\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.Queue\"></xref>.\n  overload: System.Collections.Queue.SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Queue.ToArray\n  id: ToArray\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: Queue.ToArray()\n  fullName: System.Collections.Queue.ToArray()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Copies the <xref href=\"System.Collections.Queue\"></xref> elements to a new array.\n  remarks: \"The <xref:System.Collections.Queue> is not modified. The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Queue> to its end.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.\"\n  example:\n  - \"The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.  \\n  \\n [!code-cpp[Classic Queue.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.que_2_1.cpp)]\\n [!code-cs[Classic Queue.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.que_2_1.cs)]\\n [!code-vb[Classic Queue.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_2_1.vb)]\"\n  syntax:\n    content: public virtual object[] ToArray ();\n    parameters: []\n    return:\n      type: System.Object[]\n      description: A new array containing elements copied from the <xref href=\"System.Collections.Queue\"></xref>.\n  overload: System.Collections.Queue.ToArray*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Queue.TrimToSize\n  id: TrimToSize\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  name: TrimToSize()\n  nameWithType: Queue.TrimToSize()\n  fullName: System.Collections.Queue.TrimToSize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Queue\"></xref>.\n  remarks: \"This method can be used to minimize a queue's memory overhead if no new elements will be added to the queue.  \\n  \\n To reset a <xref:System.Collections.Queue> to its initial state, call the <xref:System.Collections.Queue.Clear%2A> method before calling TrimToSize. Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.\"\n  syntax:\n    content: public virtual void TrimToSize ();\n    parameters: []\n  overload: System.Collections.Queue.TrimToSize*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Collections.Queue\"></xref> is read-only.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArrayTypeMismatchException\n  isExternal: true\n  name: System.ArrayTypeMismatchException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Collections.Queue.#ctor\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Queue()\n  nameWithType: Queue.Queue()\n  fullName: System.Collections.Queue.Queue()\n- uid: System.Collections.Queue.#ctor(System.Collections.ICollection)\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Queue(ICollection)\n  nameWithType: Queue.Queue(ICollection)\n  fullName: System.Collections.Queue.Queue(ICollection)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: true\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.Queue.#ctor(System.Int32)\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Queue(Int32)\n  nameWithType: Queue.Queue(Int32)\n  fullName: System.Collections.Queue.Queue(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Queue.#ctor(System.Int32,System.Single)\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Queue(Int32,Single)\n  nameWithType: Queue.Queue(Int32,Single)\n  fullName: System.Collections.Queue.Queue(Int32,Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Collections.Queue.Clear\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Clear()\n  nameWithType: Queue.Clear()\n  fullName: System.Collections.Queue.Clear()\n- uid: System.Collections.Queue.Clone\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Clone()\n  nameWithType: Queue.Clone()\n  fullName: System.Collections.Queue.Clone()\n- uid: System.Collections.Queue.Contains(System.Object)\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Contains(Object)\n  nameWithType: Queue.Contains(Object)\n  fullName: System.Collections.Queue.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Queue.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Queue\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: Queue.CopyTo(Array,Int32)\n  fullName: System.Collections.Queue.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Queue.Count\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Count\n  nameWithType: Queue.Count\n  fullName: System.Collections.Queue.Count\n- uid: System.Collections.Queue.Dequeue\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Dequeue()\n  nameWithType: Queue.Dequeue()\n  fullName: System.Collections.Queue.Dequeue()\n- uid: System.Collections.Queue.Enqueue(System.Object)\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Enqueue(Object)\n  nameWithType: Queue.Enqueue(Object)\n  fullName: System.Collections.Queue.Enqueue(Object)\n- uid: System.Collections.Queue.GetEnumerator\n  parent: System.Collections.Queue\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Queue.GetEnumerator()\n  fullName: System.Collections.Queue.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Queue.IsSynchronized\n  parent: System.Collections.Queue\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: Queue.IsSynchronized\n  fullName: System.Collections.Queue.IsSynchronized\n- uid: System.Collections.Queue.Peek\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Peek()\n  nameWithType: Queue.Peek()\n  fullName: System.Collections.Queue.Peek()\n- uid: System.Collections.Queue.Synchronized(System.Collections.Queue)\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Synchronized(Queue)\n  nameWithType: Queue.Synchronized(Queue)\n  fullName: System.Collections.Queue.Synchronized(Queue)\n- uid: System.Collections.Queue\n  parent: System.Collections\n  isExternal: false\n  name: Queue\n  nameWithType: Queue\n  fullName: System.Collections.Queue\n- uid: System.Collections.Queue.SyncRoot\n  parent: System.Collections.Queue\n  isExternal: false\n  name: SyncRoot\n  nameWithType: Queue.SyncRoot\n  fullName: System.Collections.Queue.SyncRoot\n- uid: System.Collections.Queue.ToArray\n  parent: System.Collections.Queue\n  isExternal: false\n  name: ToArray()\n  nameWithType: Queue.ToArray()\n  fullName: System.Collections.Queue.ToArray()\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Queue.TrimToSize\n  parent: System.Collections.Queue\n  isExternal: false\n  name: TrimToSize()\n  nameWithType: Queue.TrimToSize()\n  fullName: System.Collections.Queue.TrimToSize()\n- uid: System.Collections.Queue.#ctor*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Queue\n  nameWithType: Queue.Queue\n- uid: System.Collections.Queue.Clear*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Clear\n  nameWithType: Queue.Clear\n- uid: System.Collections.Queue.Clone*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Clone\n  nameWithType: Queue.Clone\n- uid: System.Collections.Queue.Contains*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Contains\n  nameWithType: Queue.Contains\n- uid: System.Collections.Queue.CopyTo*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: CopyTo\n  nameWithType: Queue.CopyTo\n- uid: System.Collections.Queue.Count*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Count\n  nameWithType: Queue.Count\n- uid: System.Collections.Queue.Dequeue*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Dequeue\n  nameWithType: Queue.Dequeue\n- uid: System.Collections.Queue.Enqueue*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Enqueue\n  nameWithType: Queue.Enqueue\n- uid: System.Collections.Queue.GetEnumerator*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: Queue.GetEnumerator\n- uid: System.Collections.Queue.IsSynchronized*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: Queue.IsSynchronized\n- uid: System.Collections.Queue.Peek*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Peek\n  nameWithType: Queue.Peek\n- uid: System.Collections.Queue.Synchronized*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: Synchronized\n  nameWithType: Queue.Synchronized\n- uid: System.Collections.Queue.SyncRoot*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: SyncRoot\n  nameWithType: Queue.SyncRoot\n- uid: System.Collections.Queue.ToArray*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: ToArray\n  nameWithType: Queue.ToArray\n- uid: System.Collections.Queue.TrimToSize*\n  parent: System.Collections.Queue\n  isExternal: false\n  name: TrimToSize\n  nameWithType: Queue.TrimToSize\n"}