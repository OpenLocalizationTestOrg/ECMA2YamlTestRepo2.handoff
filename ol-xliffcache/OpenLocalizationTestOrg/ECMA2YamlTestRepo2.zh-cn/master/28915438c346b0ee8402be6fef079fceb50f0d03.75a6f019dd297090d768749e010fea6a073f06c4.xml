{"nodes":[{"pos":[2154,2319],"content":"Contains static information and configuration settings for an event log. Many of the configurations settings were defined by the event provider that created the log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains static information and configuration settings for an event log. Many of the configurations settings were defined by the event provider that created the log.","pos":[0,165],"nodes":[{"content":"Contains static information and configuration settings for an event log.","pos":[0,72]},{"content":"Many of the configurations settings were defined by the event provider that created the log.","pos":[73,165]}]}]},{"pos":[2331,2488],"content":"If a property is changed for this object, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"If a property is changed for this object, call the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A&gt; method to save the changes.","pos":[0,157],"source":"If a property is changed for this object, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes."}]},{"pos":[3371,3564],"content":"Initializes a new <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogConfiguration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object by specifying the local event log for which to get information and configuration settings.","needQuote":true,"needEscape":true,"source":"Initializes a new <xref href=\"System.Diagnostics.Eventing.Reader.EventLogConfiguration\"></xref> object by specifying the local event log for which to get information and configuration settings."},{"pos":[3714,3802],"content":"The name of the local event log for which to get information and configuration settings.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the local event log for which to get information and configuration settings.","pos":[0,88]}]},{"pos":[4584,4878],"content":"Initializes a new <xref href=\"System.Diagnostics.Eventing.Reader.EventLogConfiguration\"></xref> object by specifying the name of the log for which to get information and configuration settings. The log can be on the local computer or a remote computer, based on the event log session specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes a new <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogConfiguration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object by specifying the name of the log for which to get information and configuration settings.","pos":[0,193],"source":"Initializes a new <xref href=\"System.Diagnostics.Eventing.Reader.EventLogConfiguration\"></xref> object by specifying the name of the log for which to get information and configuration settings."},{"content":"The log can be on the local computer or a remote computer, based on the event log session specified.","pos":[194,294]}]},{"pos":[5088,5170],"content":"The name of the event log for which to get information and configuration settings.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the event log for which to get information and configuration settings.","pos":[0,82]}]},{"pos":[5271,5468],"content":"The event log session used to determine the event log service that the specified log belongs to. The session is either connected to the event log service on the local computer or a remote computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event log session used to determine the event log service that the specified log belongs to. The session is either connected to the event log service on the local computer or a remote computer.","pos":[0,197],"nodes":[{"content":"The event log session used to determine the event log service that the specified log belongs to.","pos":[0,96]},{"content":"The session is either connected to the event log service on the local computer or a remote computer.","pos":[97,197]}]}]},{"pos":[6007,6054],"content":"Releases all the resources used by this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases all the resources used by this object.","pos":[0,47]}]},{"pos":[6714,6814],"content":"Releases the unmanaged resources used by this object, and optionally releases the managed resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases the unmanaged resources used by this object, and optionally releases the managed resources.","pos":[0,100]}]},{"pos":[6969,7178],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[7740,7940],"content":"Gets the flag that indicates if the event log is a classic event log. A classic event log is one that has its events defined in a .mc file instead of a manifest (.xml file) used by the event provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the flag that indicates if the event log is a classic event log. A classic event log is one that has its events defined in a .mc file instead of a manifest (.xml file) used by the event provider.","pos":[0,200],"nodes":[{"content":"Gets the flag that indicates if the event log is a classic event log.","pos":[0,69]},{"content":"A classic event log is one that has its events defined in a .mc file instead of a manifest (.xml file) used by the event provider.","pos":[70,200]}]}]},{"pos":[8056,8273],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the event log is a classic log, and returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the event log is not a classic log.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event log is a classic log, and returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the event log is not a classic log."},{"pos":[8825,9028],"content":"Gets or sets a Boolean value that determines whether the event log is enabled or disabled. An enabled log is one in which events can be logged, and a disabled log is one in which events cannot be logged.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Boolean value that determines whether the event log is enabled or disabled. An enabled log is one in which events can be logged, and a disabled log is one in which events cannot be logged.","pos":[0,203],"nodes":[{"content":"Gets or sets a Boolean value that determines whether the event log is enabled or disabled.","pos":[0,90]},{"content":"An enabled log is one in which events can be logged, and a disabled log is one in which events cannot be logged.","pos":[91,203]}]}]},{"pos":[9040,9197],"content":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the value of this property is changed, call the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A&gt; method to save the changes.","pos":[0,157],"source":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes."}]},{"pos":[9315,9505],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the log is enabled, and returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the log is disabled.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the log is enabled, and returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the log is disabled."},{"pos":[10064,10169],"content":"Gets or sets the file directory path to the location of the file where the events are stored for the log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the file directory path to the location of the file where the events are stored for the log.","pos":[0,105]}]},{"pos":[10181,10338],"content":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the value of this property is changed, call the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A&gt; method to save the changes.","pos":[0,157],"source":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes."}]},{"pos":[10459,10521],"content":"Returns a string that contains the path to the event log file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string that contains the path to the event log file.","pos":[0,62]}]},{"pos":[11087,11259],"content":"Gets an <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogIsolation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that specifies whether the event log is an application, system, or custom event log.","needQuote":true,"needEscape":true,"source":"Gets an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogIsolation\"></xref> value that specifies whether the event log is an application, system, or custom event log."},{"pos":[11461,11552],"content":"Returns an <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogIsolation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"Returns an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogIsolation\"></xref> value."},{"pos":[12094,12256],"content":"Gets or sets an <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that determines how events are handled when the event log becomes full.","needQuote":true,"needEscape":true,"source":"Gets or sets an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogMode\"></xref> value that determines how events are handled when the event log becomes full."},{"pos":[12268,12425],"content":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the value of this property is changed, call the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A&gt; method to save the changes.","pos":[0,157],"source":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes."}]},{"pos":[12617,12703],"content":"Returns an <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"Returns an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogMode\"></xref> value."},{"pos":[13240,13271],"content":"Gets the name of the event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the event log.","pos":[0,31]}]},{"pos":[13383,13440],"content":"Returns a string that contains the name of the event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string that contains the name of the event log.","pos":[0,57]}]},{"pos":[13977,14102],"content":"Gets an <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that determines the type of the event log.","needQuote":true,"needEscape":true,"source":"Gets an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogType\"></xref> value that determines the type of the event log."},{"pos":[14289,14375],"content":"Returns an <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"Returns an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogType\"></xref> value."},{"pos":[14967,15113],"content":"Gets or sets the maximum size, in bytes, that the event log file is allowed to be. When the file reaches this maximum size, it is considered full.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum size, in bytes, that the event log file is allowed to be. When the file reaches this maximum size, it is considered full.","pos":[0,146],"nodes":[{"content":"Gets or sets the maximum size, in bytes, that the event log file is allowed to be.","pos":[0,82]},{"content":"When the file reaches this maximum size, it is considered full.","pos":[83,146]}]}]},{"pos":[15125,15282],"content":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the value of this property is changed, call the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A&gt; method to save the changes.","pos":[0,157],"source":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes."}]},{"pos":[15407,15513],"content":"Returns a long value that represents the maximum size, in bytes, that the event log file is allowed to be.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a long value that represents the maximum size, in bytes, that the event log file is allowed to be.","pos":[0,106]}]},{"pos":[16116,16180],"content":"Gets the name of the event provider that created this event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the event provider that created this event log.","pos":[0,64]}]},{"pos":[16303,16393],"content":"Returns a string that contains the name of the event provider that created this event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string that contains the name of the event provider that created this event log.","pos":[0,90]}]},{"pos":[16996,17086],"content":"Gets the size of the buffer that the event provider uses for publishing events to the log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the size of the buffer that the event provider uses for publishing events to the log.","pos":[0,90]}]},{"pos":[17232,17274],"content":"Returns an integer value that can be null.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer value that can be null.","pos":[0,42]}]},{"pos":[17882,18034],"content":"Gets the control globally unique identifier (GUID) for the event log if the log is a debug log. If this log is not a debug log, this value will be null.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the control globally unique identifier (GUID) for the event log if the log is a debug log. If this log is not a debug log, this value will be null.","pos":[0,152],"nodes":[{"content":"Gets the control globally unique identifier (GUID) for the event log if the log is a debug log.","pos":[0,95]},{"content":"If this log is not a debug log, this value will be null.","pos":[96,152]}]}]},{"pos":[18181,18210],"content":"Returns a GUID value or null.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a GUID value or null.","pos":[0,29]}]},{"pos":[18804,18857],"content":"Gets or sets keyword mask used by the event provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets keyword mask used by the event provider.","pos":[0,53]}]},{"pos":[18869,19026],"content":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the value of this property is changed, call the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A&gt; method to save the changes.","pos":[0,157],"source":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes."}]},{"pos":[19176,19264],"content":"Returns a long value that can be null if the event provider did not define any keywords.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a long value that can be null if the event provider did not define any keywords.","pos":[0,88]}]},{"pos":[19850,19941],"content":"Gets the maximum latency time used by the event provider when publishing events to the log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the maximum latency time used by the event provider when publishing events to the log.","pos":[0,91]}]},{"pos":[20084,20181],"content":"Returns an integer value that can be null if no latency time was specified by the event provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer value that can be null if no latency time was specified by the event provider.","pos":[0,97]}]},{"pos":[20756,20926],"content":"Gets or sets the maximum event level (which defines the severity of the event) that is allowed to be logged in the event log. This value is defined by the event provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum event level (which defines the severity of the event) that is allowed to be logged in the event log. This value is defined by the event provider.","pos":[0,170],"nodes":[{"content":"Gets or sets the maximum event level (which defines the severity of the event) that is allowed to be logged in the event log.","pos":[0,125]},{"content":"This value is defined by the event provider.","pos":[126,170]}]}]},{"pos":[20938,21095],"content":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the value of this property is changed, call the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A&gt; method to save the changes.","pos":[0,157],"source":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes."}]},{"pos":[21241,21348],"content":"Returns an integer value that can be null if the maximum event level was not defined in the event provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer value that can be null if the maximum event level was not defined in the event provider.","pos":[0,107]}]},{"pos":[22006,22103],"content":"Gets the maximum number of buffers used by the event provider to publish events to the event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the maximum number of buffers used by the event provider to publish events to the event log.","pos":[0,97]}]},{"pos":[22261,22410],"content":"Returns an integer value that is the maximum number of buffers used by the event provider to publish events to the event log. This value can be null.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer value that is the maximum number of buffers used by the event provider to publish events to the event log. This value can be null.","pos":[0,149],"nodes":[{"content":"Returns an integer value that is the maximum number of buffers used by the event provider to publish events to the event log.","pos":[0,125]},{"content":"This value can be null.","pos":[126,149]}]}]},{"pos":[23085,23182],"content":"Gets the minimum number of buffers used by the event provider to publish events to the event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the minimum number of buffers used by the event provider to publish events to the event log.","pos":[0,97]}]},{"pos":[23340,23489],"content":"Returns an integer value that is the minimum number of buffers used by the event provider to publish events to the event log. This value can be null.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer value that is the minimum number of buffers used by the event provider to publish events to the event log. This value can be null.","pos":[0,149],"nodes":[{"content":"Returns an integer value that is the minimum number of buffers used by the event provider to publish events to the event log.","pos":[0,125]},{"content":"This value can be null.","pos":[126,149]}]}]},{"pos":[24079,24191],"content":"Gets an enumerable collection of the names of all the event providers that can publish events to this event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an enumerable collection of the names of all the event providers that can publish events to this event log.","pos":[0,112]}]},{"pos":[24389,24471],"content":"Returns an enumerable collection of strings that contain the event provider names.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerable collection of strings that contain the event provider names.","pos":[0,82]}]},{"pos":[25038,25075],"content":"Saves the configuration settings that","needQuote":true,"needEscape":true,"nodes":[{"content":"Saves the configuration settings that","pos":[0,37]}]},{"pos":[25741,25899],"content":"Gets or sets the security descriptor of the event log. The security descriptor defines the users and groups of users that can read and write to the event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the security descriptor of the event log. The security descriptor defines the users and groups of users that can read and write to the event log.","pos":[0,158],"nodes":[{"content":"Gets or sets the security descriptor of the event log.","pos":[0,54]},{"content":"The security descriptor defines the users and groups of users that can read and write to the event log.","pos":[55,158]}]}]},{"pos":[25911,26068],"content":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the value of this property is changed, call the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A&gt; method to save the changes.","pos":[0,157],"source":"If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes."}]},{"pos":[26196,26269],"content":"Returns a string that contains the security descriptor for the event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string that contains the security descriptor for the event log.","pos":[0,73]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  id: EventLogConfiguration\n  children:\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String)\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession)\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose(System.Boolean)\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges\n  - System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor\n  langs:\n  - csharp\n  name: EventLogConfiguration\n  nameWithType: EventLogConfiguration\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  type: Class\n  summary: Contains static information and configuration settings for an event log. Many of the configurations settings were defined by the event provider that created the log.\n  remarks: If a property is changed for this object, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.\n  example:\n  - 'For example code using this class, see [How to: Configure and Read Event Log Properties](http://msdn.microsoft.com/en-us/2d2b00b3-2d1d-4567-a47e-3f5a7c1955ac).'\n  syntax:\n    content: 'public class EventLogConfiguration : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: EventLogConfiguration(String)\n  nameWithType: EventLogConfiguration.EventLogConfiguration(String)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.EventLogConfiguration(String)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new <xref href=\"System.Diagnostics.Eventing.Reader.EventLogConfiguration\"></xref> object by specifying the local event log for which to get information and configuration settings.\n  syntax:\n    content: public EventLogConfiguration (string logName);\n    parameters:\n    - id: logName\n      type: System.String\n      description: The name of the local event log for which to get information and configuration settings.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession)\n  id: '#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: EventLogConfiguration(String,EventLogSession)\n  nameWithType: EventLogConfiguration.EventLogConfiguration(String,EventLogSession)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.EventLogConfiguration(String,EventLogSession)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new <xref href=\"System.Diagnostics.Eventing.Reader.EventLogConfiguration\"></xref> object by specifying the name of the log for which to get information and configuration settings. The log can be on the local computer or a remote computer, based on the event log session specified.\n  syntax:\n    content: public EventLogConfiguration (string logName, System.Diagnostics.Eventing.Reader.EventLogSession session);\n    parameters:\n    - id: logName\n      type: System.String\n      description: The name of the event log for which to get information and configuration settings.\n    - id: session\n      type: System.Diagnostics.Eventing.Reader.EventLogSession\n      description: The event log session used to determine the event log service that the specified log belongs to. The session is either connected to the event log service on the local computer or a remote computer.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose\n  id: Dispose\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: EventLogConfiguration.Dispose()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Releases all the resources used by this object.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: EventLogConfiguration.Dispose(Boolean)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Releases the unmanaged resources used by this object, and optionally releases the managed resources.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog\n  id: IsClassicLog\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: IsClassicLog\n  nameWithType: EventLogConfiguration.IsClassicLog\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets the flag that indicates if the event log is a classic event log. A classic event log is one that has its events defined in a .mc file instead of a manifest (.xml file) used by the event provider.\n  syntax:\n    content: public bool IsClassicLog { get; }\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event log is a classic log, and returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the event log is not a classic log.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled\n  id: IsEnabled\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: IsEnabled\n  nameWithType: EventLogConfiguration.IsEnabled\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets or sets a Boolean value that determines whether the event log is enabled or disabled. An enabled log is one in which events can be logged, and a disabled log is one in which events cannot be logged.\n  remarks: If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.\n  syntax:\n    content: public bool IsEnabled { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the log is enabled, and returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the log is disabled.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath\n  id: LogFilePath\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: LogFilePath\n  nameWithType: EventLogConfiguration.LogFilePath\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets or sets the file directory path to the location of the file where the events are stored for the log.\n  remarks: If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.\n  syntax:\n    content: public string LogFilePath { get; set; }\n    return:\n      type: System.String\n      description: Returns a string that contains the path to the event log file.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation\n  id: LogIsolation\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: LogIsolation\n  nameWithType: EventLogConfiguration.LogIsolation\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogIsolation\"></xref> value that specifies whether the event log is an application, system, or custom event log.\n  syntax:\n    content: public System.Diagnostics.Eventing.Reader.EventLogIsolation LogIsolation { get; }\n    return:\n      type: System.Diagnostics.Eventing.Reader.EventLogIsolation\n      description: Returns an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogIsolation\"></xref> value.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode\n  id: LogMode\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: LogMode\n  nameWithType: EventLogConfiguration.LogMode\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets or sets an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogMode\"></xref> value that determines how events are handled when the event log becomes full.\n  remarks: If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.\n  syntax:\n    content: public System.Diagnostics.Eventing.Reader.EventLogMode LogMode { get; set; }\n    return:\n      type: System.Diagnostics.Eventing.Reader.EventLogMode\n      description: Returns an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogMode\"></xref> value.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName\n  id: LogName\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: LogName\n  nameWithType: EventLogConfiguration.LogName\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets the name of the event log.\n  syntax:\n    content: public string LogName { get; }\n    return:\n      type: System.String\n      description: Returns a string that contains the name of the event log.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType\n  id: LogType\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: LogType\n  nameWithType: EventLogConfiguration.LogType\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogType\"></xref> value that determines the type of the event log.\n  syntax:\n    content: public System.Diagnostics.Eventing.Reader.EventLogType LogType { get; }\n    return:\n      type: System.Diagnostics.Eventing.Reader.EventLogType\n      description: Returns an <xref href=\"System.Diagnostics.Eventing.Reader.EventLogType\"></xref> value.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes\n  id: MaximumSizeInBytes\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: MaximumSizeInBytes\n  nameWithType: EventLogConfiguration.MaximumSizeInBytes\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets or sets the maximum size, in bytes, that the event log file is allowed to be. When the file reaches this maximum size, it is considered full.\n  remarks: If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.\n  syntax:\n    content: public long MaximumSizeInBytes { get; set; }\n    return:\n      type: System.Int64\n      description: Returns a long value that represents the maximum size, in bytes, that the event log file is allowed to be.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName\n  id: OwningProviderName\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: OwningProviderName\n  nameWithType: EventLogConfiguration.OwningProviderName\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets the name of the event provider that created this event log.\n  syntax:\n    content: public string OwningProviderName { get; }\n    return:\n      type: System.String\n      description: Returns a string that contains the name of the event provider that created this event log.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize\n  id: ProviderBufferSize\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: ProviderBufferSize\n  nameWithType: EventLogConfiguration.ProviderBufferSize\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets the size of the buffer that the event provider uses for publishing events to the log.\n  syntax:\n    content: public Nullable<int> ProviderBufferSize { get; }\n    return:\n      type: System.Nullable{System.Int32}\n      description: Returns an integer value that can be null.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid\n  id: ProviderControlGuid\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: ProviderControlGuid\n  nameWithType: EventLogConfiguration.ProviderControlGuid\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets the control globally unique identifier (GUID) for the event log if the log is a debug log. If this log is not a debug log, this value will be null.\n  syntax:\n    content: public Nullable<Guid> ProviderControlGuid { get; }\n    return:\n      type: System.Nullable{System.Guid}\n      description: Returns a GUID value or null.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords\n  id: ProviderKeywords\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: ProviderKeywords\n  nameWithType: EventLogConfiguration.ProviderKeywords\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets or sets keyword mask used by the event provider.\n  remarks: If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.\n  syntax:\n    content: public Nullable<long> ProviderKeywords { get; set; }\n    return:\n      type: System.Nullable{System.Int64}\n      description: Returns a long value that can be null if the event provider did not define any keywords.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency\n  id: ProviderLatency\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: ProviderLatency\n  nameWithType: EventLogConfiguration.ProviderLatency\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets the maximum latency time used by the event provider when publishing events to the log.\n  syntax:\n    content: public Nullable<int> ProviderLatency { get; }\n    return:\n      type: System.Nullable{System.Int32}\n      description: Returns an integer value that can be null if no latency time was specified by the event provider.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel\n  id: ProviderLevel\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: ProviderLevel\n  nameWithType: EventLogConfiguration.ProviderLevel\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets or sets the maximum event level (which defines the severity of the event) that is allowed to be logged in the event log. This value is defined by the event provider.\n  remarks: If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.\n  syntax:\n    content: public Nullable<int> ProviderLevel { get; set; }\n    return:\n      type: System.Nullable{System.Int32}\n      description: Returns an integer value that can be null if the maximum event level was not defined in the event provider.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers\n  id: ProviderMaximumNumberOfBuffers\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: ProviderMaximumNumberOfBuffers\n  nameWithType: EventLogConfiguration.ProviderMaximumNumberOfBuffers\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets the maximum number of buffers used by the event provider to publish events to the event log.\n  syntax:\n    content: public Nullable<int> ProviderMaximumNumberOfBuffers { get; }\n    return:\n      type: System.Nullable{System.Int32}\n      description: Returns an integer value that is the maximum number of buffers used by the event provider to publish events to the event log. This value can be null.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers\n  id: ProviderMinimumNumberOfBuffers\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: ProviderMinimumNumberOfBuffers\n  nameWithType: EventLogConfiguration.ProviderMinimumNumberOfBuffers\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets the minimum number of buffers used by the event provider to publish events to the event log.\n  syntax:\n    content: public Nullable<int> ProviderMinimumNumberOfBuffers { get; }\n    return:\n      type: System.Nullable{System.Int32}\n      description: Returns an integer value that is the minimum number of buffers used by the event provider to publish events to the event log. This value can be null.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames\n  id: ProviderNames\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: ProviderNames\n  nameWithType: EventLogConfiguration.ProviderNames\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets an enumerable collection of the names of all the event providers that can publish events to this event log.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<string> ProviderNames { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: Returns an enumerable collection of strings that contain the event provider names.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges\n  id: SaveChanges\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: SaveChanges()\n  nameWithType: EventLogConfiguration.SaveChanges()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Saves the configuration settings that\n  syntax:\n    content: public void SaveChanges ();\n    parameters: []\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor\n  id: SecurityDescriptor\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  langs:\n  - csharp\n  name: SecurityDescriptor\n  nameWithType: EventLogConfiguration.SecurityDescriptor\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets or sets the security descriptor of the event log. The security descriptor defines the users and groups of users that can read and write to the event log.\n  remarks: If the value of this property is changed, call the <xref:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges%2A> method to save the changes.\n  syntax:\n    content: public string SecurityDescriptor { get; set; }\n    return:\n      type: System.String\n      description: Returns a string that contains the security descriptor for the event log.\n  overload: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String)\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: EventLogConfiguration(String)\n  nameWithType: EventLogConfiguration.EventLogConfiguration(String)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.EventLogConfiguration(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession)\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: EventLogConfiguration(String,EventLogSession)\n  nameWithType: EventLogConfiguration.EventLogConfiguration(String,EventLogSession)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.EventLogConfiguration(String,EventLogSession)\n- uid: System.Diagnostics.Eventing.Reader.EventLogSession\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: EventLogSession\n  nameWithType: EventLogSession\n  fullName: System.Diagnostics.Eventing.Reader.EventLogSession\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: Dispose()\n  nameWithType: EventLogConfiguration.Dispose()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose()\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose(System.Boolean)\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: EventLogConfiguration.Dispose(Boolean)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: IsClassicLog\n  nameWithType: EventLogConfiguration.IsClassicLog\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: IsEnabled\n  nameWithType: EventLogConfiguration.IsEnabled\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: LogFilePath\n  nameWithType: EventLogConfiguration.LogFilePath\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: LogIsolation\n  nameWithType: EventLogConfiguration.LogIsolation\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation\n- uid: System.Diagnostics.Eventing.Reader.EventLogIsolation\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: EventLogIsolation\n  nameWithType: EventLogIsolation\n  fullName: System.Diagnostics.Eventing.Reader.EventLogIsolation\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: LogMode\n  nameWithType: EventLogConfiguration.LogMode\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode\n- uid: System.Diagnostics.Eventing.Reader.EventLogMode\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: EventLogMode\n  nameWithType: EventLogMode\n  fullName: System.Diagnostics.Eventing.Reader.EventLogMode\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: LogName\n  nameWithType: EventLogConfiguration.LogName\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: LogType\n  nameWithType: EventLogConfiguration.LogType\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType\n- uid: System.Diagnostics.Eventing.Reader.EventLogType\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: EventLogType\n  nameWithType: EventLogType\n  fullName: System.Diagnostics.Eventing.Reader.EventLogType\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: MaximumSizeInBytes\n  nameWithType: EventLogConfiguration.MaximumSizeInBytes\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: OwningProviderName\n  nameWithType: EventLogConfiguration.OwningProviderName\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderBufferSize\n  nameWithType: EventLogConfiguration.ProviderBufferSize\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize\n- uid: System.Nullable{System.Int32}\n  parent: System\n  isExternal: true\n  name: Nullable<Int32>\n  nameWithType: Nullable<Int32>\n  fullName: System.Nullable<System.Int32>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: Nullable<System.Int32>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderControlGuid\n  nameWithType: EventLogConfiguration.ProviderControlGuid\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid\n- uid: System.Nullable{System.Guid}\n  parent: System\n  isExternal: true\n  name: Nullable<Guid>\n  nameWithType: Nullable<Guid>\n  fullName: System.Nullable<System.Guid>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: Nullable<System.Guid>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Guid\n    name: Guid\n    nameWithType: Guid\n    fullName: Guid\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderKeywords\n  nameWithType: EventLogConfiguration.ProviderKeywords\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords\n- uid: System.Nullable{System.Int64}\n  parent: System\n  isExternal: true\n  name: Nullable<Int64>\n  nameWithType: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: Nullable<System.Int64>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderLatency\n  nameWithType: EventLogConfiguration.ProviderLatency\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderLevel\n  nameWithType: EventLogConfiguration.ProviderLevel\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderMaximumNumberOfBuffers\n  nameWithType: EventLogConfiguration.ProviderMaximumNumberOfBuffers\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderMinimumNumberOfBuffers\n  nameWithType: EventLogConfiguration.ProviderMinimumNumberOfBuffers\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderNames\n  nameWithType: EventLogConfiguration.ProviderNames\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames\n- uid: System.Collections.Generic.IEnumerable{System.String}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<String>\n  nameWithType: IEnumerable<String>\n  fullName: System.Collections.Generic.IEnumerable<System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: SaveChanges()\n  nameWithType: EventLogConfiguration.SaveChanges()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges()\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: SecurityDescriptor\n  nameWithType: EventLogConfiguration.SecurityDescriptor\n  fullName: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: EventLogConfiguration\n  nameWithType: EventLogConfiguration.EventLogConfiguration\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: Dispose\n  nameWithType: EventLogConfiguration.Dispose\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: IsClassicLog\n  nameWithType: EventLogConfiguration.IsClassicLog\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: IsEnabled\n  nameWithType: EventLogConfiguration.IsEnabled\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: LogFilePath\n  nameWithType: EventLogConfiguration.LogFilePath\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: LogIsolation\n  nameWithType: EventLogConfiguration.LogIsolation\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: LogMode\n  nameWithType: EventLogConfiguration.LogMode\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: LogName\n  nameWithType: EventLogConfiguration.LogName\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: LogType\n  nameWithType: EventLogConfiguration.LogType\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: MaximumSizeInBytes\n  nameWithType: EventLogConfiguration.MaximumSizeInBytes\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: OwningProviderName\n  nameWithType: EventLogConfiguration.OwningProviderName\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderBufferSize\n  nameWithType: EventLogConfiguration.ProviderBufferSize\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderControlGuid\n  nameWithType: EventLogConfiguration.ProviderControlGuid\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderKeywords\n  nameWithType: EventLogConfiguration.ProviderKeywords\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderLatency\n  nameWithType: EventLogConfiguration.ProviderLatency\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderLevel\n  nameWithType: EventLogConfiguration.ProviderLevel\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderMaximumNumberOfBuffers\n  nameWithType: EventLogConfiguration.ProviderMaximumNumberOfBuffers\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderMinimumNumberOfBuffers\n  nameWithType: EventLogConfiguration.ProviderMinimumNumberOfBuffers\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: ProviderNames\n  nameWithType: EventLogConfiguration.ProviderNames\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: SaveChanges\n  nameWithType: EventLogConfiguration.SaveChanges\n- uid: System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor*\n  parent: System.Diagnostics.Eventing.Reader.EventLogConfiguration\n  isExternal: false\n  name: SecurityDescriptor\n  nameWithType: EventLogConfiguration.SecurityDescriptor\n"}