{"nodes":[{"pos":[3091,3162],"content":"Provides a text writer that can indent new lines by a tab string token.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a text writer that can indent new lines by a tab string token.","pos":[0,71]}]},{"pos":[3175,4044],"content":"IndentedTextWriter extends a <xref:System.IO.TextWriter> by providing methods that insert a tab string and track the current indentation level. Text formatted with multiple indentation levels is useful for generated code, so this class is used by CodeDOM code generator implementations.       The tab string is the string that each indentation consists of. Typically the tab string contains white space.      > [!NOTE] >  This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).","needQuote":false,"needEscape":true,"nodes":[{"content":"IndentedTextWriter extends a &lt;xref:System.IO.TextWriter&gt; by providing methods that insert a tab string and track the current indentation level.","pos":[0,143],"source":"IndentedTextWriter extends a <xref:System.IO.TextWriter> by providing methods that insert a tab string and track the current indentation level."},{"content":"Text formatted with multiple indentation levels is useful for generated code, so this class is used by CodeDOM code generator implementations.","pos":[144,286]},{"content":"The tab string is the string that each indentation consists of.","pos":[293,356]},{"content":"Typically the tab string contains white space.","pos":[357,403]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This class contains a link demand and an inheritance demand at the class level that applies to all members.","pos":[409,529],"source":"      > [!NOTE] >  This class contains a link demand and an inheritance demand at the class level that applies to all members."},{"content":"A &lt;xref:System.Security.SecurityException&gt; is thrown when either the immediate caller or the derived class does not have full-trust permission.","pos":[530,673],"source":" A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission."},{"content":"For details about security demands, see <bpt id=\"p1\">[</bpt>Link Demands<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Inheritance Demands<ept id=\"p2\">](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>.","pos":[674,864],"source":" For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)."}]},{"pos":[5145,5304],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.IndentedTextWriter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified text writer and default tab string.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.IndentedTextWriter\"></xref> class using the specified text writer and default tab string."},{"pos":[5470,5520],"content":"The <xref:System.IO.TextWriter> to use for output.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; to use for output.","pos":[0,50],"source":"The <xref:System.IO.TextWriter> to use for output."}]},{"pos":[6143,6294],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.IndentedTextWriter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified text writer and tab string.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.IndentedTextWriter\"></xref> class using the specified text writer and tab string."},{"pos":[6945,6995],"content":"The <xref:System.IO.TextWriter> to use for output.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; to use for output.","pos":[0,50],"source":"The <xref:System.IO.TextWriter> to use for output."}]},{"pos":[7061,7099],"content":"The tab string to use for indentation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The tab string to use for indentation.","pos":[0,38]}]},{"pos":[7553,7590],"content":"Closes the document being written to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the document being written to.","pos":[0,37]}]},{"pos":[8165,8222],"content":"Specifies the default tab string. This field is constant.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the default tab string. This field is constant.","pos":[0,57],"nodes":[{"content":"Specifies the default tab string.","pos":[0,33]},{"content":"This field is constant.","pos":[34,57]}]}]},{"pos":[8234,8296],"content":"The default tab string consists of a single white space. (\" \")","needQuote":true,"needEscape":true,"nodes":[{"content":"The default tab string consists of a single white space. (\" \")","pos":[0,62],"nodes":[{"content":"The default tab string consists of a single white space.","pos":[0,56]},{"content":"(\" \")","pos":[57,62]}]}]},{"pos":[8415,8427],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8830,8875],"content":"Gets the encoding for the text writer to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the encoding for the text writer to use.","pos":[0,45]}]},{"pos":[9018,9104],"content":"An <xref:System.Text.Encoding> that indicates the encoding for the text writer to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Text.Encoding&gt; that indicates the encoding for the text writer to use.","pos":[0,86],"source":"An <xref:System.Text.Encoding> that indicates the encoding for the text writer to use."}]},{"pos":[9561,9580],"content":"Flushes the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flushes the stream.","pos":[0,19]}]},{"pos":[9592,9627],"content":"This clears the stream of any data.","needQuote":true,"needEscape":true,"nodes":[{"content":"This clears the stream of any data.","pos":[0,35]}]},{"pos":[10155,10199],"content":"Gets or sets the number of spaces to indent.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the number of spaces to indent.","pos":[0,44]}]},{"pos":[10856,10887],"content":"The number of spaces to indent.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of spaces to indent.","pos":[0,31]}]},{"pos":[11368,11412],"content":"Gets the <xref:System.IO.TextWriter> to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the &lt;xref:System.IO.TextWriter&gt; to use.","pos":[0,44],"source":"Gets the <xref:System.IO.TextWriter> to use."}]},{"pos":[11549,11588],"content":"The <xref:System.IO.TextWriter> to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; to use.","pos":[0,39],"source":"The <xref:System.IO.TextWriter> to use."}]},{"pos":[12054,12097],"content":"Gets or sets the new line character to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the new line character to use.","pos":[0,43]}]},{"pos":[12223,12253],"content":"The new line character to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new line character to use.","pos":[0,30]}]},{"pos":[12734,12876],"content":"Outputs the tab string once for each level of indentation according to the <xref:System.CodeDom.Compiler.IndentedTextWriter.Indent*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Outputs the tab string once for each level of indentation according to the &lt;xref:System.CodeDom.Compiler.IndentedTextWriter.Indent*&gt; property.","pos":[0,142],"source":"Outputs the tab string once for each level of indentation according to the <xref:System.CodeDom.Compiler.IndentedTextWriter.Indent*> property."}]},{"pos":[13468,13537],"content":"Writes the text representation of a Boolean value to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of a Boolean value to the text stream.","pos":[0,69]}]},{"pos":[13680,13707],"content":"The Boolean value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Boolean value to write.","pos":[0,27]}]},{"pos":[14199,14237],"content":"Writes a character to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a character to the text stream.","pos":[0,38]}]},{"pos":[14377,14400],"content":"The character to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The character to write.","pos":[0,23]}]},{"pos":[14902,14946],"content":"Writes a character array to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a character array to the text stream.","pos":[0,44]}]},{"pos":[15092,15121],"content":"The character array to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The character array to write.","pos":[0,29]}]},{"pos":[15623,15685],"content":"Writes the text representation of a Double to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of a Double to the text stream.","pos":[0,62]}]},{"pos":[15829,15907],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to write.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> to write."},{"pos":[16404,16468],"content":"Writes the text representation of an integer to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of an integer to the text stream.","pos":[0,64]}]},{"pos":[16608,16629],"content":"The integer to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The integer to write.","pos":[0,21]}]},{"pos":[17126,17197],"content":"Writes the text representation of an 8-byte integer to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of an 8-byte integer to the text stream.","pos":[0,71]}]},{"pos":[17338,17366],"content":"The 8-byte integer to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The 8-byte integer to write.","pos":[0,28]}]},{"pos":[17868,17931],"content":"Writes the text representation of an object to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of an object to the text stream.","pos":[0,63]}]},{"pos":[18075,18095],"content":"The object to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to write.","pos":[0,20]}]},{"pos":[18597,18659],"content":"Writes the text representation of a Single to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of a Single to the text stream.","pos":[0,62]}]},{"pos":[18802,18880],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_single\" name=\"single\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to write.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_single\" name=\"single\" href=\"\"></xref> to write."},{"pos":[19382,19429],"content":"Writes the specified string to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified string to the text stream.","pos":[0,47]}]},{"pos":[19565,19585],"content":"The string to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to write.","pos":[0,20]}]},{"pos":[20136,20205],"content":"Writes out a formatted string, using the same semantics as specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes out a formatted string, using the same semantics as specified.","pos":[0,69]}]},{"pos":[20364,20386],"content":"The formatting string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The formatting string.","pos":[0,22]}]},{"pos":[20447,20493],"content":"The object to write into the formatted string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to write into the formatted string.","pos":[0,46]}]},{"pos":[21054,21123],"content":"Writes out a formatted string, using the same semantics as specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes out a formatted string, using the same semantics as specified.","pos":[0,69]}]},{"pos":[21283,21312],"content":"The formatting string to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The formatting string to use.","pos":[0,29]}]},{"pos":[21374,21403],"content":"The argument array to output.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument array to output.","pos":[0,29]}]},{"pos":[21993,22044],"content":"Writes a subarray of characters to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a subarray of characters to the text stream.","pos":[0,51]}]},{"pos":[22212,22251],"content":"The character array to write data from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The character array to write data from.","pos":[0,39]}]},{"pos":[22312,22341],"content":"Starting index in the buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starting index in the buffer.","pos":[0,29]}]},{"pos":[22402,22436],"content":"The number of characters to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of characters to write.","pos":[0,34]}]},{"pos":[23036,23105],"content":"Writes out a formatted string, using the same semantics as specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes out a formatted string, using the same semantics as specified.","pos":[0,69]}]},{"pos":[23277,23306],"content":"The formatting string to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The formatting string to use.","pos":[0,29]}]},{"pos":[23367,23419],"content":"The first object to write into the formatted string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first object to write into the formatted string.","pos":[0,52]}]},{"pos":[23480,23533],"content":"The second object to write into the formatted string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second object to write into the formatted string.","pos":[0,53]}]},{"pos":[24007,24032],"content":"Writes a line terminator.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a line terminator.","pos":[0,25]}]},{"pos":[24640,24735],"content":"Writes the text representation of a Boolean, followed by a line terminator, to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of a Boolean, followed by a line terminator, to the text stream.","pos":[0,95]}]},{"pos":[24882,24903],"content":"The Boolean to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Boolean to write.","pos":[0,21]}]},{"pos":[25419,25489],"content":"Writes a character, followed by a line terminator, to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a character, followed by a line terminator, to the text stream.","pos":[0,70]}]},{"pos":[25633,25656],"content":"The character to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The character to write.","pos":[0,23]}]},{"pos":[26182,26258],"content":"Writes a character array, followed by a line terminator, to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a character array, followed by a line terminator, to the text stream.","pos":[0,76]}]},{"pos":[26408,26437],"content":"The character array to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The character array to write.","pos":[0,29]}]},{"pos":[26963,27057],"content":"Writes the text representation of a Double, followed by a line terminator, to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of a Double, followed by a line terminator, to the text stream.","pos":[0,94]}]},{"pos":[27205,27283],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to write.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> to write."},{"pos":[27804,27900],"content":"Writes the text representation of an integer, followed by a line terminator, to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of an integer, followed by a line terminator, to the text stream.","pos":[0,96]}]},{"pos":[28044,28065],"content":"The integer to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The integer to write.","pos":[0,21]}]},{"pos":[28586,28689],"content":"Writes the text representation of an 8-byte integer, followed by a line terminator, to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of an 8-byte integer, followed by a line terminator, to the text stream.","pos":[0,103]}]},{"pos":[28834,28862],"content":"The 8-byte integer to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The 8-byte integer to write.","pos":[0,28]}]},{"pos":[29388,29483],"content":"Writes the text representation of an object, followed by a line terminator, to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of an object, followed by a line terminator, to the text stream.","pos":[0,95]}]},{"pos":[29631,29651],"content":"The object to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to write.","pos":[0,20]}]},{"pos":[30177,30271],"content":"Writes the text representation of a Single, followed by a line terminator, to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of a Single, followed by a line terminator, to the text stream.","pos":[0,94]}]},{"pos":[30418,30496],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_single\" name=\"single\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to write.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_single\" name=\"single\" href=\"\"></xref> to write."},{"pos":[31022,31101],"content":"Writes the specified string, followed by a line terminator, to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified string, followed by a line terminator, to the text stream.","pos":[0,79]}]},{"pos":[31241,31261],"content":"The string to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to write.","pos":[0,20]}]},{"pos":[31787,31881],"content":"Writes the text representation of a UInt32, followed by a line terminator, to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of a UInt32, followed by a line terminator, to the text stream.","pos":[0,94]}]},{"pos":[32027,32046],"content":"A UInt32 to output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A UInt32 to output.","pos":[0,19]}]},{"pos":[32621,32721],"content":"Writes out a formatted string, followed by a line terminator, using the same semantics as specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes out a formatted string, followed by a line terminator, using the same semantics as specified.","pos":[0,100]}]},{"pos":[32884,32906],"content":"The formatting string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The formatting string.","pos":[0,22]}]},{"pos":[32967,33013],"content":"The object to write into the formatted string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to write into the formatted string.","pos":[0,46]}]},{"pos":[33598,33698],"content":"Writes out a formatted string, followed by a line terminator, using the same semantics as specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes out a formatted string, followed by a line terminator, using the same semantics as specified.","pos":[0,100]}]},{"pos":[33862,33891],"content":"The formatting string to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The formatting string to use.","pos":[0,29]}]},{"pos":[33953,33982],"content":"The argument array to output.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument array to output.","pos":[0,29]}]},{"pos":[34596,34679],"content":"Writes a subarray of characters, followed by a line terminator, to the text stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a subarray of characters, followed by a line terminator, to the text stream.","pos":[0,83]}]},{"pos":[34851,34890],"content":"The character array to write data from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The character array to write data from.","pos":[0,39]}]},{"pos":[34951,34980],"content":"Starting index in the buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starting index in the buffer.","pos":[0,29]}]},{"pos":[35041,35075],"content":"The number of characters to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of characters to write.","pos":[0,34]}]},{"pos":[35699,35799],"content":"Writes out a formatted string, followed by a line terminator, using the same semantics as specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes out a formatted string, followed by a line terminator, using the same semantics as specified.","pos":[0,100]}]},{"pos":[35975,36004],"content":"The formatting string to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The formatting string to use.","pos":[0,29]}]},{"pos":[36065,36117],"content":"The first object to write into the formatted string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first object to write into the formatted string.","pos":[0,52]}]},{"pos":[36178,36231],"content":"The second object to write into the formatted string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second object to write into the formatted string.","pos":[0,53]}]},{"pos":[36787,36838],"content":"Writes the specified string to a line without tabs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified string to a line without tabs.","pos":[0,51]}]},{"pos":[37404,37424],"content":"The string to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to write.","pos":[0,20]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.CodeDom.Compiler.IndentedTextWriter\n  id: IndentedTextWriter\n  children:\n  - System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)\n  - System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)\n  - System.CodeDom.Compiler.IndentedTextWriter.Close\n  - System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString\n  - System.CodeDom.Compiler.IndentedTextWriter.Encoding\n  - System.CodeDom.Compiler.IndentedTextWriter.Flush\n  - System.CodeDom.Compiler.IndentedTextWriter.Indent\n  - System.CodeDom.Compiler.IndentedTextWriter.InnerWriter\n  - System.CodeDom.Compiler.IndentedTextWriter.NewLine\n  - System.CodeDom.Compiler.IndentedTextWriter.OutputTabs\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)\n  - System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)\n  - System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)\n  langs:\n  - csharp\n  name: IndentedTextWriter\n  nameWithType: IndentedTextWriter\n  fullName: System.CodeDom.Compiler.IndentedTextWriter\n  type: Class\n  summary: Provides a text writer that can indent new lines by a tab string token.\n  remarks: \"IndentedTextWriter extends a <xref:System.IO.TextWriter> by providing methods that insert a tab string and track the current indentation level. Text formatted with multiple indentation levels is useful for generated code, so this class is used by CodeDOM code generator implementations.  \\n  \\n The tab string is the string that each indentation consists of. Typically the tab string contains white space.  \\n  \\n> [!NOTE]\\n>  This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).\"\n  example:\n  - \"The following code example demonstrates using an IndentedTextWriter to write text at different levels of indentation.  \\n  \\n [!code-cs[IndentedTextWriterExample#1](~/add/codesnippet/csharp/t-system.codedom.compile_0_1.cs)]\\n [!code-cpp[IndentedTextWriterExample#1](~/add/codesnippet/cpp/t-system.codedom.compile_0_1.cpp)]\\n [!code-vb[IndentedTextWriterExample#1](~/add/codesnippet/visualbasic/t-system.codedom.compile_0_1.vb)]\"\n  syntax:\n    content: 'public class IndentedTextWriter : System.IO.TextWriter'\n  inheritance:\n  - System.IO.TextWriter\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)\n  id: '#ctor(System.IO.TextWriter)'\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: IndentedTextWriter(TextWriter)\n  nameWithType: IndentedTextWriter.IndentedTextWriter(TextWriter)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.IndentedTextWriter(TextWriter)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.IndentedTextWriter\"></xref> class using the specified text writer and default tab string.\n  syntax:\n    content: public IndentedTextWriter (System.IO.TextWriter writer);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> to use for output.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)\n  id: '#ctor(System.IO.TextWriter,System.String)'\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: IndentedTextWriter(TextWriter,String)\n  nameWithType: IndentedTextWriter.IndentedTextWriter(TextWriter,String)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.IndentedTextWriter(TextWriter,String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.IndentedTextWriter\"></xref> class using the specified text writer and tab string.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates creating an <xref:System.CodeDom.Compiler.IndentedTextWriter> using a specified tab string.  \\n  \\n [!code-cs[IndentedTextWriterExample#3](~/add/codesnippet/csharp/ae96d2ff-c764-46ba-a5ec-_1.cs)]\\n [!code-cpp[IndentedTextWriterExample#3](~/add/codesnippet/cpp/ae96d2ff-c764-46ba-a5ec-_1.cpp)]\\n [!code-vb[IndentedTextWriterExample#3](~/add/codesnippet/visualbasic/ae96d2ff-c764-46ba-a5ec-_1.vb)]\"\n  syntax:\n    content: public IndentedTextWriter (System.IO.TextWriter writer, string tabString);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> to use for output.\n    - id: tabString\n      type: System.String\n      description: The tab string to use for indentation.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Close\n  id: Close\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: IndentedTextWriter.Close()\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Close()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Closes the document being written to.\n  syntax:\n    content: public override void Close ();\n    parameters: []\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString\n  id: DefaultTabString\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: DefaultTabString\n  nameWithType: IndentedTextWriter.DefaultTabString\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Specifies the default tab string. This field is constant.\n  remarks: The default tab string consists of a single white space. (\" \")\n  syntax:\n    content: public const string DefaultTabString;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Encoding\n  id: Encoding\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Encoding\n  nameWithType: IndentedTextWriter.Encoding\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Encoding\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets the encoding for the text writer to use.\n  syntax:\n    content: public override System.Text.Encoding Encoding { get; }\n    return:\n      type: System.Text.Encoding\n      description: An <xref:System.Text.Encoding> that indicates the encoding for the text writer to use.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Encoding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Flush\n  id: Flush\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: IndentedTextWriter.Flush()\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Flush()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Flushes the stream.\n  remarks: This clears the stream of any data.\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Indent\n  id: Indent\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Indent\n  nameWithType: IndentedTextWriter.Indent\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Indent\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets the number of spaces to indent.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates setting the indentation level of an <xref:System.CodeDom.Compiler.IndentedTextWriter>. The indentation level is the number of tab strings to prefix each line with.  \\n  \\n [!code-cs[IndentedTextWriterExample#3](~/add/codesnippet/csharp/p-system.codedom.compile_3_1.cs)]\\n [!code-cpp[IndentedTextWriterExample#3](~/add/codesnippet/cpp/p-system.codedom.compile_3_1.cpp)]\\n [!code-vb[IndentedTextWriterExample#3](~/add/codesnippet/visualbasic/p-system.codedom.compile_3_1.vb)]\"\n  syntax:\n    content: public int Indent { get; set; }\n    return:\n      type: System.Int32\n      description: The number of spaces to indent.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Indent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.InnerWriter\n  id: InnerWriter\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: InnerWriter\n  nameWithType: IndentedTextWriter.InnerWriter\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.InnerWriter\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets the <xref:System.IO.TextWriter> to use.\n  syntax:\n    content: public System.IO.TextWriter InnerWriter { get; }\n    return:\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> to use.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.InnerWriter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.NewLine\n  id: NewLine\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: NewLine\n  nameWithType: IndentedTextWriter.NewLine\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.NewLine\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets the new line character to use.\n  syntax:\n    content: public override string NewLine { get; set; }\n    return:\n      type: System.String\n      description: The new line character to use.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.NewLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.OutputTabs\n  id: OutputTabs\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: OutputTabs()\n  nameWithType: IndentedTextWriter.OutputTabs()\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.OutputTabs()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Outputs the tab string once for each level of indentation according to the <xref:System.CodeDom.Compiler.IndentedTextWriter.Indent*> property.\n  syntax:\n    content: protected virtual void OutputTabs ();\n    parameters: []\n  overload: System.CodeDom.Compiler.IndentedTextWriter.OutputTabs*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)\n  id: Write(System.Boolean)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(Boolean)\n  nameWithType: IndentedTextWriter.Write(Boolean)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of a Boolean value to the text stream.\n  syntax:\n    content: public override void Write (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)\n  id: Write(System.Char)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(Char)\n  nameWithType: IndentedTextWriter.Write(Char)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Char)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes a character to the text stream.\n  syntax:\n    content: public override void Write (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The character to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])\n  id: Write(System.Char[])\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(Char[])\n  nameWithType: IndentedTextWriter.Write(Char[])\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Char[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes a character array to the text stream.\n  syntax:\n    content: public override void Write (char[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)\n  id: Write(System.Double)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(Double)\n  nameWithType: IndentedTextWriter.Write(Double)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Double)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of a Double to the text stream.\n  syntax:\n    content: public override void Write (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)\n  id: Write(System.Int32)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(Int32)\n  nameWithType: IndentedTextWriter.Write(Int32)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of an integer to the text stream.\n  syntax:\n    content: public override void Write (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The integer to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)\n  id: Write(System.Int64)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(Int64)\n  nameWithType: IndentedTextWriter.Write(Int64)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Int64)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of an 8-byte integer to the text stream.\n  syntax:\n    content: public override void Write (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 8-byte integer to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)\n  id: Write(System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(Object)\n  nameWithType: IndentedTextWriter.Write(Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of an object to the text stream.\n  syntax:\n    content: public override void Write (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)\n  id: Write(System.Single)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(Single)\n  nameWithType: IndentedTextWriter.Write(Single)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Single)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of a Single to the text stream.\n  syntax:\n    content: public override void Write (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The <xref uid=\"langword_csharp_single\" name=\"single\" href=\"\"></xref> to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)\n  id: Write(System.String)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: IndentedTextWriter.Write(String)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the specified string to the text stream.\n  syntax:\n    content: public override void Write (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The string to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)\n  id: Write(System.String,System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(String,Object)\n  nameWithType: IndentedTextWriter.Write(String,Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(String,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes out a formatted string, using the same semantics as specified.\n  syntax:\n    content: public override void Write (string format, object arg0);\n    parameters:\n    - id: format\n      type: System.String\n      description: The formatting string.\n    - id: arg0\n      type: System.Object\n      description: The object to write into the formatted string.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])\n  id: Write(System.String,System.Object[])\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(String,Object[])\n  nameWithType: IndentedTextWriter.Write(String,Object[])\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(String,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes out a formatted string, using the same semantics as specified.\n  syntax:\n    content: public override void Write (string format, object[] arg);\n    parameters:\n    - id: format\n      type: System.String\n      description: The formatting string to use.\n    - id: arg\n      type: System.Object[]\n      description: The argument array to output.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)\n  id: Write(System.Char[],System.Int32,System.Int32)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(Char[],Int32,Int32)\n  nameWithType: IndentedTextWriter.Write(Char[],Int32,Int32)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Char[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes a subarray of characters to the text stream.\n  syntax:\n    content: public override void Write (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write data from.\n    - id: index\n      type: System.Int32\n      description: Starting index in the buffer.\n    - id: count\n      type: System.Int32\n      description: The number of characters to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)\n  id: Write(System.String,System.Object,System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: Write(String,Object,Object)\n  nameWithType: IndentedTextWriter.Write(String,Object,Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(String,Object,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes out a formatted string, using the same semantics as specified.\n  syntax:\n    content: public override void Write (string format, object arg0, object arg1);\n    parameters:\n    - id: format\n      type: System.String\n      description: The formatting string to use.\n    - id: arg0\n      type: System.Object\n      description: The first object to write into the formatted string.\n    - id: arg1\n      type: System.Object\n      description: The second object to write into the formatted string.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine\n  id: WriteLine\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine()\n  nameWithType: IndentedTextWriter.WriteLine()\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes a line terminator.\n  syntax:\n    content: public override void WriteLine ();\n    parameters: []\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)\n  id: WriteLine(System.Boolean)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(Boolean)\n  nameWithType: IndentedTextWriter.WriteLine(Boolean)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of a Boolean, followed by a line terminator, to the text stream.\n  syntax:\n    content: public override void WriteLine (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)\n  id: WriteLine(System.Char)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(Char)\n  nameWithType: IndentedTextWriter.WriteLine(Char)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Char)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes a character, followed by a line terminator, to the text stream.\n  syntax:\n    content: public override void WriteLine (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The character to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])\n  id: WriteLine(System.Char[])\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(Char[])\n  nameWithType: IndentedTextWriter.WriteLine(Char[])\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Char[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes a character array, followed by a line terminator, to the text stream.\n  syntax:\n    content: public override void WriteLine (char[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)\n  id: WriteLine(System.Double)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(Double)\n  nameWithType: IndentedTextWriter.WriteLine(Double)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Double)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of a Double, followed by a line terminator, to the text stream.\n  syntax:\n    content: public override void WriteLine (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)\n  id: WriteLine(System.Int32)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(Int32)\n  nameWithType: IndentedTextWriter.WriteLine(Int32)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of an integer, followed by a line terminator, to the text stream.\n  syntax:\n    content: public override void WriteLine (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The integer to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)\n  id: WriteLine(System.Int64)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(Int64)\n  nameWithType: IndentedTextWriter.WriteLine(Int64)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Int64)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of an 8-byte integer, followed by a line terminator, to the text stream.\n  syntax:\n    content: public override void WriteLine (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 8-byte integer to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)\n  id: WriteLine(System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(Object)\n  nameWithType: IndentedTextWriter.WriteLine(Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of an object, followed by a line terminator, to the text stream.\n  syntax:\n    content: public override void WriteLine (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)\n  id: WriteLine(System.Single)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(Single)\n  nameWithType: IndentedTextWriter.WriteLine(Single)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Single)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of a Single, followed by a line terminator, to the text stream.\n  syntax:\n    content: public override void WriteLine (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The <xref uid=\"langword_csharp_single\" name=\"single\" href=\"\"></xref> to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(String)\n  nameWithType: IndentedTextWriter.WriteLine(String)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the specified string, followed by a line terminator, to the text stream.\n  syntax:\n    content: public override void WriteLine (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The string to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)\n  id: WriteLine(System.UInt32)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(UInt32)\n  nameWithType: IndentedTextWriter.WriteLine(UInt32)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(UInt32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the text representation of a UInt32, followed by a line terminator, to the text stream.\n  syntax:\n    content: public override void WriteLine (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: A UInt32 to output.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)\n  id: WriteLine(System.String,System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(String,Object)\n  nameWithType: IndentedTextWriter.WriteLine(String,Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(String,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes out a formatted string, followed by a line terminator, using the same semantics as specified.\n  syntax:\n    content: public override void WriteLine (string format, object arg0);\n    parameters:\n    - id: format\n      type: System.String\n      description: The formatting string.\n    - id: arg0\n      type: System.Object\n      description: The object to write into the formatted string.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])\n  id: WriteLine(System.String,System.Object[])\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(String,Object[])\n  nameWithType: IndentedTextWriter.WriteLine(String,Object[])\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(String,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes out a formatted string, followed by a line terminator, using the same semantics as specified.\n  syntax:\n    content: public override void WriteLine (string format, object[] arg);\n    parameters:\n    - id: format\n      type: System.String\n      description: The formatting string to use.\n    - id: arg\n      type: System.Object[]\n      description: The argument array to output.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  id: WriteLine(System.Char[],System.Int32,System.Int32)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(Char[],Int32,Int32)\n  nameWithType: IndentedTextWriter.WriteLine(Char[],Int32,Int32)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Char[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes a subarray of characters, followed by a line terminator, to the text stream.\n  syntax:\n    content: public override void WriteLine (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write data from.\n    - id: index\n      type: System.Int32\n      description: Starting index in the buffer.\n    - id: count\n      type: System.Int32\n      description: The number of characters to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)\n  id: WriteLine(System.String,System.Object,System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLine(String,Object,Object)\n  nameWithType: IndentedTextWriter.WriteLine(String,Object,Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(String,Object,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes out a formatted string, followed by a line terminator, using the same semantics as specified.\n  syntax:\n    content: public override void WriteLine (string format, object arg0, object arg1);\n    parameters:\n    - id: format\n      type: System.String\n      description: The formatting string to use.\n    - id: arg0\n      type: System.Object\n      description: The first object to write into the formatted string.\n    - id: arg1\n      type: System.Object\n      description: The second object to write into the formatted string.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)\n  id: WriteLineNoTabs(System.String)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  langs:\n  - csharp\n  name: WriteLineNoTabs(String)\n  nameWithType: IndentedTextWriter.WriteLineNoTabs(String)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Writes the specified string to a line without tabs.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates writing a line without tab string indentations.  \\n  \\n [!code-cs[IndentedTextWriterExample#6](~/add/codesnippet/csharp/m-system.codedom.compile_4_1.cs)]\\n [!code-cpp[IndentedTextWriterExample#6](~/add/codesnippet/cpp/m-system.codedom.compile_4_1.cpp)]\\n [!code-vb[IndentedTextWriterExample#6](~/add/codesnippet/visualbasic/m-system.codedom.compile_4_1.vb)]\"\n  syntax:\n    content: public void WriteLineNoTabs (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The string to write.\n  overload: System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IO.TextWriter\n  isExternal: false\n  name: System.IO.TextWriter\n- uid: System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: IndentedTextWriter(TextWriter)\n  nameWithType: IndentedTextWriter.IndentedTextWriter(TextWriter)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.IndentedTextWriter(TextWriter)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: IndentedTextWriter(TextWriter,String)\n  nameWithType: IndentedTextWriter.IndentedTextWriter(TextWriter,String)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.IndentedTextWriter(TextWriter,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Close\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Close()\n  nameWithType: IndentedTextWriter.Close()\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Close()\n- uid: System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: DefaultTabString\n  nameWithType: IndentedTextWriter.DefaultTabString\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Encoding\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Encoding\n  nameWithType: IndentedTextWriter.Encoding\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Encoding\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: true\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Flush\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Flush()\n  nameWithType: IndentedTextWriter.Flush()\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Flush()\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Indent\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Indent\n  nameWithType: IndentedTextWriter.Indent\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Indent\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.CodeDom.Compiler.IndentedTextWriter.InnerWriter\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: InnerWriter\n  nameWithType: IndentedTextWriter.InnerWriter\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.InnerWriter\n- uid: System.CodeDom.Compiler.IndentedTextWriter.NewLine\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: NewLine\n  nameWithType: IndentedTextWriter.NewLine\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.NewLine\n- uid: System.CodeDom.Compiler.IndentedTextWriter.OutputTabs\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: OutputTabs()\n  nameWithType: IndentedTextWriter.OutputTabs()\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.OutputTabs()\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(Boolean)\n  nameWithType: IndentedTextWriter.Write(Boolean)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(Char)\n  nameWithType: IndentedTextWriter.Write(Char)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Char)\n- uid: System.Char\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(Char[])\n  nameWithType: IndentedTextWriter.Write(Char[])\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Char[])\n- uid: System.Char[]\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: Char[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(Double)\n  nameWithType: IndentedTextWriter.Write(Double)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(Int32)\n  nameWithType: IndentedTextWriter.Write(Int32)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Int32)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(Int64)\n  nameWithType: IndentedTextWriter.Write(Int64)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(Object)\n  nameWithType: IndentedTextWriter.Write(Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(Single)\n  nameWithType: IndentedTextWriter.Write(Single)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(String)\n  nameWithType: IndentedTextWriter.Write(String)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(String)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(String,Object)\n  nameWithType: IndentedTextWriter.Write(String,Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(String,Object)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(String,Object[])\n  nameWithType: IndentedTextWriter.Write(String,Object[])\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(String,Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(Char[],Int32,Int32)\n  nameWithType: IndentedTextWriter.Write(Char[],Int32,Int32)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(Char[],Int32,Int32)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write(String,Object,Object)\n  nameWithType: IndentedTextWriter.Write(String,Object,Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.Write(String,Object,Object)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine()\n  nameWithType: IndentedTextWriter.WriteLine()\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine()\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(Boolean)\n  nameWithType: IndentedTextWriter.WriteLine(Boolean)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Boolean)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(Char)\n  nameWithType: IndentedTextWriter.WriteLine(Char)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Char)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(Char[])\n  nameWithType: IndentedTextWriter.WriteLine(Char[])\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Char[])\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(Double)\n  nameWithType: IndentedTextWriter.WriteLine(Double)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Double)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(Int32)\n  nameWithType: IndentedTextWriter.WriteLine(Int32)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Int32)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(Int64)\n  nameWithType: IndentedTextWriter.WriteLine(Int64)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Int64)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(Object)\n  nameWithType: IndentedTextWriter.WriteLine(Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Object)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(Single)\n  nameWithType: IndentedTextWriter.WriteLine(Single)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Single)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: IndentedTextWriter.WriteLine(String)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(String)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(UInt32)\n  nameWithType: IndentedTextWriter.WriteLine(UInt32)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: true\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(String,Object)\n  nameWithType: IndentedTextWriter.WriteLine(String,Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(String,Object)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(String,Object[])\n  nameWithType: IndentedTextWriter.WriteLine(String,Object[])\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(String,Object[])\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(Char[],Int32,Int32)\n  nameWithType: IndentedTextWriter.WriteLine(Char[],Int32,Int32)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(Char[],Int32,Int32)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine(String,Object,Object)\n  nameWithType: IndentedTextWriter.WriteLine(String,Object,Object)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLine(String,Object,Object)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLineNoTabs(String)\n  nameWithType: IndentedTextWriter.WriteLineNoTabs(String)\n  fullName: System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(String)\n- uid: System.CodeDom.Compiler.IndentedTextWriter.#ctor*\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: IndentedTextWriter\n  nameWithType: IndentedTextWriter.IndentedTextWriter\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Close*\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Close\n  nameWithType: IndentedTextWriter.Close\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Encoding*\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Encoding\n  nameWithType: IndentedTextWriter.Encoding\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Flush*\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Flush\n  nameWithType: IndentedTextWriter.Flush\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Indent*\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Indent\n  nameWithType: IndentedTextWriter.Indent\n- uid: System.CodeDom.Compiler.IndentedTextWriter.InnerWriter*\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: InnerWriter\n  nameWithType: IndentedTextWriter.InnerWriter\n- uid: System.CodeDom.Compiler.IndentedTextWriter.NewLine*\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: NewLine\n  nameWithType: IndentedTextWriter.NewLine\n- uid: System.CodeDom.Compiler.IndentedTextWriter.OutputTabs*\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: OutputTabs\n  nameWithType: IndentedTextWriter.OutputTabs\n- uid: System.CodeDom.Compiler.IndentedTextWriter.Write*\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: Write\n  nameWithType: IndentedTextWriter.Write\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLine*\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLine\n  nameWithType: IndentedTextWriter.WriteLine\n- uid: System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs*\n  parent: System.CodeDom.Compiler.IndentedTextWriter\n  isExternal: false\n  name: WriteLineNoTabs\n  nameWithType: IndentedTextWriter.WriteLineNoTabs\n"}