{"nodes":[{"pos":[1455,1501],"content":"Controls playback of a sound from a .wav file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls playback of a sound from a .wav file.","pos":[0,46]}]},{"pos":[1514,4163],"content":"The SoundPlayer class provides a simple interface for loading and playing a .wav file. The SoundPlayer class supports loading a .wav file from a file path, a URL, a <xref:System.IO.Stream> that contains a .wav file, or an embedded resource that contains a .wav file.       To play a sound using the SoundPlayer class, configure a SoundPlayer with a path to the .wav file and call one of the play methods. You can identify the .wav file to play by using one of the constructors or by setting either the <xref:System.Media.SoundPlayer.SoundLocation%2A> or <xref:System.Media.SoundPlayer.Stream%2A> property. The file can be loaded prior to playing by using one of the load methods, or loading can be deferred until one of the play methods is called. A SoundPlayer configured to load a .wav file from a <xref:System.IO.Stream> or URL must load the .wav file into memory before playback begins.       You can load or play a .wav file synchronously or asynchronously. If you call a synchronous load or play method, the calling thread will wait until the method returns, which may cause painting and other events to be interrupted. Calling an asynchronous load or play method will allow the calling thread to continue without interruption. For more information on asynchronous method calls, see [How to: Run an Operation in the Background](~/add/includes/ajax-current-ext-md.md).       When a SoundPlayer has finished loading a .wav file, it raises the <xref:System.Media.SoundPlayer.LoadCompleted> event. You can examine the <xref:System.ComponentModel.AsyncCompletedEventArgs> in your event handler to determine if the load succeeded or failed. The <xref:System.Media.SoundPlayer.SoundLocationChanged> event is raised when the audio source is set to a new file path or URL. The <xref:System.Media.SoundPlayer.StreamChanged> event is raised when the audio source is set to a new <xref:System.IO.Stream>. For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).       For more information about SoundPlayer, see [SoundPlayer Class Overview](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  The SoundPlayer class cannot play other file types, such as .wma or .mp3. If you want to play other file types, you can use the Windows Media Player control. For more information, see [Using the Windows Media Player Control in a .NET Framework Solution](http://go.microsoft.com/fwlink/?LinkId=131267) and [Windows Media Player Object Model Reference for Visual Basic .NET and C#](http://go.microsoft.com/fwlink/?LinkId=131269) in the Windows Media Player SDK.","needQuote":false,"needEscape":true,"nodes":[{"content":"The SoundPlayer class provides a simple interface for loading and playing a .wav file.","pos":[0,86]},{"content":"The SoundPlayer class supports loading a .wav file from a file path, a URL, a &lt;xref:System.IO.Stream&gt; that contains a .wav file, or an embedded resource that contains a .wav file.","pos":[87,266],"source":" The SoundPlayer class supports loading a .wav file from a file path, a URL, a <xref:System.IO.Stream> that contains a .wav file, or an embedded resource that contains a .wav file."},{"content":"To play a sound using the SoundPlayer class, configure a SoundPlayer with a path to the .wav file and call one of the play methods.","pos":[273,404]},{"content":"You can identify the .wav file to play by using one of the constructors or by setting either the &lt;xref:System.Media.SoundPlayer.SoundLocation%2A&gt; or &lt;xref:System.Media.SoundPlayer.Stream%2A&gt; property.","pos":[405,605],"source":" You can identify the .wav file to play by using one of the constructors or by setting either the <xref:System.Media.SoundPlayer.SoundLocation%2A> or <xref:System.Media.SoundPlayer.Stream%2A> property."},{"content":"The file can be loaded prior to playing by using one of the load methods, or loading can be deferred until one of the play methods is called.","pos":[606,747]},{"content":"A SoundPlayer configured to load a .wav file from a &lt;xref:System.IO.Stream&gt; or URL must load the .wav file into memory before playback begins.","pos":[748,890],"source":" A SoundPlayer configured to load a .wav file from a <xref:System.IO.Stream> or URL must load the .wav file into memory before playback begins."},{"content":"You can load or play a .wav file synchronously or asynchronously.","pos":[897,962]},{"content":"If you call a synchronous load or play method, the calling thread will wait until the method returns, which may cause painting and other events to be interrupted.","pos":[963,1125]},{"content":"Calling an asynchronous load or play method will allow the calling thread to continue without interruption.","pos":[1126,1233]},{"content":"For more information on asynchronous method calls, see <bpt id=\"p1\">[</bpt>How to: Run an Operation in the Background<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1234,1373],"source":" For more information on asynchronous method calls, see [How to: Run an Operation in the Background](~/add/includes/ajax-current-ext-md.md)."},{"content":"When a SoundPlayer has finished loading a .wav file, it raises the &lt;xref:System.Media.SoundPlayer.LoadCompleted&gt; event.","pos":[1380,1499],"source":"       When a SoundPlayer has finished loading a .wav file, it raises the <xref:System.Media.SoundPlayer.LoadCompleted> event."},{"content":"You can examine the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt; in your event handler to determine if the load succeeded or failed.","pos":[1500,1640],"source":" You can examine the <xref:System.ComponentModel.AsyncCompletedEventArgs> in your event handler to determine if the load succeeded or failed."},{"content":"The &lt;xref:System.Media.SoundPlayer.SoundLocationChanged&gt; event is raised when the audio source is set to a new file path or URL.","pos":[1641,1769],"source":" The <xref:System.Media.SoundPlayer.SoundLocationChanged> event is raised when the audio source is set to a new file path or URL."},{"content":"The &lt;xref:System.Media.SoundPlayer.StreamChanged&gt; event is raised when the audio source is set to a new &lt;xref:System.IO.Stream&gt;.","pos":[1770,1898],"source":" The <xref:System.Media.SoundPlayer.StreamChanged> event is raised when the audio source is set to a new <xref:System.IO.Stream>."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[1899,2041],"source":" For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."},{"content":"For more information about SoundPlayer, see <bpt id=\"p1\">[</bpt>SoundPlayer Class Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2048,2160],"source":"       For more information about SoundPlayer, see [SoundPlayer Class Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The SoundPlayer class cannot play other file types, such as .wma or .mp3.","pos":[2166,2252],"source":"      > [!NOTE] >  The SoundPlayer class cannot play other file types, such as .wma or .mp3."},{"content":"If you want to play other file types, you can use the Windows Media Player control.","pos":[2253,2336]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using the Windows Media Player Control in a .NET Framework Solution<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=131267)</ept> and <bpt id=\"p2\">[</bpt>Windows Media Player Object Model Reference for Visual Basic .NET and C#<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=131269)</ept> in the Windows Media Player SDK.","pos":[2337,2638],"source":" For more information, see [Using the Windows Media Player Control in a .NET Framework Solution](http://go.microsoft.com/fwlink/?LinkId=131267) and [Windows Media Player Object Model Reference for Visual Basic .NET and C#](http://go.microsoft.com/fwlink/?LinkId=131269) in the Windows Media Player SDK."}]},{"pos":[6046,6132],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Media.SoundPlayer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Media.SoundPlayer\"></xref> class."},{"pos":[6144,6381],"content":"This constructor initializes a <xref:System.Media.SoundPlayer> with no audio source. Until it is configured with an audio source path, the <xref:System.Media.SoundPlayer> will play a beep sound when one of its playback methods is called.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor initializes a <xref:System.Media.SoundPlayer> with no audio source. Until it is configured with an audio source path, the <xref:System.Media.SoundPlayer> will play a beep sound when one of its playback methods is called.","pos":[0,237],"nodes":[{"content":"This constructor initializes a &lt;xref:System.Media.SoundPlayer&gt; with no audio source.","pos":[0,84],"source":"This constructor initializes a <xref:System.Media.SoundPlayer> with no audio source."},{"content":"Until it is configured with an audio source path, the &lt;xref:System.Media.SoundPlayer&gt; will play a beep sound when one of its playback methods is called.","pos":[85,237],"source":" Until it is configured with an audio source path, the <xref:System.Media.SoundPlayer> will play a beep sound when one of its playback methods is called."}]}]},{"pos":[6889,7048],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Media.SoundPlayer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, and attaches the .wav file within the specified &lt;xref:System.IO.Stream&gt;.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Media.SoundPlayer\"></xref> class, and attaches the .wav file within the specified <xref:System.IO.Stream>."},{"pos":[7060,7314],"content":"The <xref:System.IO.Stream> passed to the `stream` parameter should be a <xref:System.IO.Stream> containing a .wav file. The data returned by the <xref:System.IO.Stream.Read%2A> method of the <xref:System.IO.Stream> should be the data within a .wav file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.Stream&gt; passed to the <ph id=\"ph1\">`stream`</ph> parameter should be a &lt;xref:System.IO.Stream&gt; containing a .wav file.","pos":[0,120],"source":"The <xref:System.IO.Stream> passed to the `stream` parameter should be a <xref:System.IO.Stream> containing a .wav file."},{"content":"The data returned by the &lt;xref:System.IO.Stream.Read%2A&gt; method of the &lt;xref:System.IO.Stream&gt; should be the data within a .wav file.","pos":[121,254],"source":" The data returned by the <xref:System.IO.Stream.Read%2A> method of the <xref:System.IO.Stream> should be the data within a .wav file."}]},{"pos":[7465,7506],"content":"A <xref:System.IO.Stream> to a .wav file.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; to a .wav file.","pos":[0,41],"source":"A <xref:System.IO.Stream> to a .wav file."}]},{"pos":[7943,8067],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Media.SoundPlayer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, and attaches the specified .wav file.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Media.SoundPlayer\"></xref> class, and attaches the specified .wav file."},{"pos":[8079,8333],"content":"The string passed to the `soundLocation` parameter can be either a file path or a URL to a .wav file. If the path or URL is not valid, the <xref:System.Media.SoundPlayer> will still be constructed, but subsequent calls to a load or play method will fail.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string passed to the <ph id=\"ph1\">`soundLocation`</ph> parameter can be either a file path or a URL to a .wav file.","pos":[0,101],"source":"The string passed to the `soundLocation` parameter can be either a file path or a URL to a .wav file."},{"content":"If the path or URL is not valid, the &lt;xref:System.Media.SoundPlayer&gt; will still be constructed, but subsequent calls to a load or play method will fail.","pos":[102,254],"source":" If the path or URL is not valid, the <xref:System.Media.SoundPlayer> will still be constructed, but subsequent calls to a load or play method will fail."}]},{"pos":[8485,8521],"content":"The location of a .wav file to load.","needQuote":true,"needEscape":true,"nodes":[{"content":"The location of a .wav file to load.","pos":[0,36]}]},{"pos":[8676,8749],"content":"The URL value specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">soundLocation</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be resolved.","needQuote":true,"needEscape":true,"source":"The URL value specified by <code>soundLocation</code> cannot be resolved."},{"pos":[9367,9453],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Media.SoundPlayer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Media.SoundPlayer\"></xref> class."},{"pos":[9744,9847],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be used for deserialization.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to be used for deserialization."},{"pos":[9943,9990],"content":"The destination to be used for deserialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination to be used for deserialization.","pos":[0,47]}]},{"pos":[10145,10259],"content":"The &lt;xref:System.Media.SoundPlayer.SoundLocation*&gt; specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">serializationInfo</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be resolved.","needQuote":true,"needEscape":true,"source":"The <xref:System.Media.SoundPlayer.SoundLocation*> specified in <code>serializationInfo</code> cannot be resolved."},{"pos":[10608,10690],"content":"Gets a value indicating whether loading of a .wav file has successfully completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether loading of a .wav file has successfully completed.","pos":[0,82]}]},{"pos":[10809,10998],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a .wav file is loaded; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if a .wav file has not yet been loaded.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a .wav file is loaded; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if a .wav file has not yet been loaded."},{"pos":[11367,11395],"content":"Loads a sound synchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"Loads a sound synchronously.","pos":[0,28]}]},{"pos":[11408,12026],"content":"The Load method uses the current thread to load a .wav file, preventing the thread from handling other messages until the load is complete.      > [!CAUTION] >  The Load method may produce a delay while loading a large .wav file. In addition, painting and other events will be blocked until the load is completed. Use the <xref:System.Media.SoundPlayer.LoadAsync%2A> method to load a sound asynchronously, which allows the calling thread to continue without interruption.       This method raises the <xref:System.Media.SoundPlayer.LoadCompleted> event when loading completes, even if the load was not successful.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Load method uses the current thread to load a .wav file, preventing the thread from handling other messages until the load is complete.","pos":[0,139]},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  The Load method may produce a delay while loading a large .wav file.","pos":[145,229],"source":"      > [!CAUTION] >  The Load method may produce a delay while loading a large .wav file."},{"content":"In addition, painting and other events will be blocked until the load is completed.","pos":[230,313]},{"content":"Use the &lt;xref:System.Media.SoundPlayer.LoadAsync%2A&gt; method to load a sound asynchronously, which allows the calling thread to continue without interruption.","pos":[314,471],"source":" Use the <xref:System.Media.SoundPlayer.LoadAsync%2A> method to load a sound asynchronously, which allows the calling thread to continue without interruption."},{"content":"This method raises the &lt;xref:System.Media.SoundPlayer.LoadCompleted&gt; event when loading completes, even if the load was not successful.","pos":[478,613],"source":"       This method raises the <xref:System.Media.SoundPlayer.LoadCompleted> event when loading completes, even if the load was not successful."}]},{"pos":[12892,13017],"content":"The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The elapsed time during loading exceeds the time, in milliseconds, specified by &lt;xref:System.Media.SoundPlayer.LoadTimeout*&gt;.","pos":[0,125],"source":"The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>."}]},{"pos":[13126,13211],"content":"The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file specified by &lt;xref:System.Media.SoundPlayer.SoundLocation*&gt; cannot be found.","pos":[0,85],"source":"The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found."}]},{"pos":[13534,13603],"content":"Loads a .wav file from a stream or a Web resource using a new thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Loads a .wav file from a stream or a Web resource using a new thread.","pos":[0,69]}]},{"pos":[13616,14295],"content":"If a <xref:System.Media.SoundPlayer> is configured to load a .wav file from a <xref:System.IO.Stream> or Web resource, this method begins loading a .wav file from the location using a new thread.       This method raises the <xref:System.Media.SoundPlayer.LoadCompleted> event when loading completes, even if the load was not successful.       If a <xref:System.Media.SoundPlayer> is configured to load a .wav file from a local file path, this method does nothing, because loading is deferred until playing begins.       For more information about asynchronous loading, see [How to: Load a Sound Asynchronously within a Windows Form](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"If a &lt;xref:System.Media.SoundPlayer&gt; is configured to load a .wav file from a &lt;xref:System.IO.Stream&gt; or Web resource, this method begins loading a .wav file from the location using a new thread.","pos":[0,195],"source":"If a <xref:System.Media.SoundPlayer> is configured to load a .wav file from a <xref:System.IO.Stream> or Web resource, this method begins loading a .wav file from the location using a new thread."},{"content":"This method raises the &lt;xref:System.Media.SoundPlayer.LoadCompleted&gt; event when loading completes, even if the load was not successful.","pos":[202,337],"source":"       This method raises the <xref:System.Media.SoundPlayer.LoadCompleted> event when loading completes, even if the load was not successful."},{"content":"If a &lt;xref:System.Media.SoundPlayer&gt; is configured to load a .wav file from a local file path, this method does nothing, because loading is deferred until playing begins.","pos":[344,514],"source":"       If a <xref:System.Media.SoundPlayer> is configured to load a .wav file from a local file path, this method does nothing, because loading is deferred until playing begins."},{"content":"For more information about asynchronous loading, see <bpt id=\"p1\">[</bpt>How to: Load a Sound Asynchronously within a Windows Form<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[521,673],"source":"       For more information about asynchronous loading, see [How to: Load a Sound Asynchronously within a Windows Form](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[15157,15282],"content":"The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The elapsed time during loading exceeds the time, in milliseconds, specified by &lt;xref:System.Media.SoundPlayer.LoadTimeout*&gt;.","pos":[0,125],"source":"The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>."}]},{"pos":[15391,15476],"content":"The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file specified by &lt;xref:System.Media.SoundPlayer.SoundLocation*&gt; cannot be found.","pos":[0,85],"source":"The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found."}]},{"pos":[15812,15883],"content":"Occurs when a .wav file has been successfully or unsuccessfully loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a .wav file has been successfully or unsuccessfully loaded.","pos":[0,71]}]},{"pos":[15896,16205],"content":"This event is raised when loading of a .wav file is complete. The event arguments indicate whether the load of the sound was completed successfully or failed.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"nodes":[{"content":"This event is raised when loading of a .wav file is complete.","pos":[0,61]},{"content":"The event arguments indicate whether the load of the sound was completed successfully or failed.","pos":[62,158]},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[165,307],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[17039,17051],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17397,17470],"content":"Gets or sets the time, in milliseconds, in which the .wav file must load.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the time, in milliseconds, in which the .wav file must load.","pos":[0,73]}]},{"pos":[17482,17607],"content":"After this time has expired, the loading is canceled and a <xref:System.ServiceProcess.TimeoutException> exception is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"After this time has expired, the loading is canceled and a &lt;xref:System.ServiceProcess.TimeoutException&gt; exception is thrown.","pos":[0,125],"source":"After this time has expired, the loading is canceled and a <xref:System.ServiceProcess.TimeoutException> exception is thrown."}]},{"pos":[17724,17794],"content":"The number of milliseconds to wait. The default is 10000 (10 seconds).","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of milliseconds to wait. The default is 10000 (10 seconds).","pos":[0,70],"nodes":[{"content":"The number of milliseconds to wait.","pos":[0,35]},{"content":"The default is 10000 (10 seconds).","pos":[36,70]}]}]},{"pos":[18377,18454],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Media.SoundPlayer.LoadCompleted\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Media.SoundPlayer.LoadCompleted\"></xref> event."},{"pos":[18467,18909],"content":"This method is called when loading of a .wav file is complete.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnLoadCompleted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called when loading of a .wav file is complete.","pos":[0,62]},{"content":"Raising an event invokes the event handler through a delegate.","pos":[69,131]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[132,252],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."},{"content":"The OnLoadCompleted method also allows derived classes to handle the event without attaching a delegate.","pos":[259,363]},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[364,438]}]},{"pos":[19129,19214],"content":"An <xref:System.ComponentModel.AsyncCompletedEventArgs> that contains the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt; that contains the event data.","pos":[0,85],"source":"An <xref:System.ComponentModel.AsyncCompletedEventArgs> that contains the event data."}]},{"pos":[19736,19820],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Media.SoundPlayer.SoundLocationChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Media.SoundPlayer.SoundLocationChanged\"></xref> event."},{"pos":[19833,20365],"content":"This method is called when a new audio source path for this <xref:System.Media.SoundPlayer> has been set.       Raising an event invokes the event handler through a delegate. For more information, see How to: Provide Event functionality and [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnSoundLocationChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called when a new audio source path for this &lt;xref:System.Media.SoundPlayer&gt; has been set.","pos":[0,105],"source":"This method is called when a new audio source path for this <xref:System.Media.SoundPlayer> has been set."},{"content":"Raising an event invokes the event handler through a delegate.","pos":[112,174]},{"content":"For more information, see How to: Provide Event functionality and <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[175,335],"source":" For more information, see How to: Provide Event functionality and [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."},{"content":"The OnSoundLocationChanged method also allows derived classes to handle the event without attaching a delegate.","pos":[342,453]},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[454,528]}]},{"pos":[20527,20583],"content":"An <xref:System.EventArgs> that contains the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.EventArgs&gt; that contains the event data.","pos":[0,56],"source":"An <xref:System.EventArgs> that contains the event data."}]},{"pos":[21077,21154],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Media.SoundPlayer.StreamChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Media.SoundPlayer.StreamChanged\"></xref> event."},{"pos":[21167,21671],"content":"This method is called when a new <xref:System.IO.Stream> audio source for this <xref:System.Media.SoundPlayer> has been set.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnStreamChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called when a new &lt;xref:System.IO.Stream&gt; audio source for this &lt;xref:System.Media.SoundPlayer&gt; has been set.","pos":[0,124],"source":"This method is called when a new <xref:System.IO.Stream> audio source for this <xref:System.Media.SoundPlayer> has been set."},{"content":"Raising an event invokes the event handler through a delegate.","pos":[131,193]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[194,314],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."},{"content":"The OnStreamChanged method also allows derived classes to handle the event without attaching a delegate.","pos":[321,425]},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[426,500]}]},{"pos":[21826,21882],"content":"An <xref:System.EventArgs> that contains the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.EventArgs&gt; that contains the event data.","pos":[0,56],"source":"An <xref:System.EventArgs> that contains the event data."}]},{"pos":[22251,22347],"content":"Plays the .wav file using a new thread, and loads the .wav file first if it has not been loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"Plays the .wav file using a new thread, and loads the .wav file first if it has not been loaded.","pos":[0,96]}]},{"pos":[22360,23034],"content":"The Play method plays the sound using a new thread. If you call Play before the .wav file has been loaded into memory, the .wav file will be loaded before playback starts. You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance. After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes.       If the .wav file has not been specified or it fails to load, the Play method will play the default beep sound.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Play method plays the sound using a new thread. If you call Play before the .wav file has been loaded into memory, the .wav file will be loaded before playback starts. You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance. After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes.       If the .wav file has not been specified or it fails to load, the Play method will play the default beep sound.","pos":[0,672],"nodes":[{"content":"The Play method plays the sound using a new thread.","pos":[0,51]},{"content":"If you call Play before the .wav file has been loaded into memory, the .wav file will be loaded before playback starts.","pos":[52,171]},{"content":"You can use the &lt;xref:System.Media.SoundPlayer.LoadAsync%2A&gt; or &lt;xref:System.Media.SoundPlayer.Load%2A&gt; method to load the .wav file to memory in advance.","pos":[172,326],"source":" You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance."},{"content":"After a .wav file is successfully loaded from a &lt;xref:System.IO.Stream&gt; or URL, future calls to playback methods for the &lt;xref:System.Media.SoundPlayer&gt; will not need to reload the .wav file until the path for the sound changes.","pos":[327,555],"source":" After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes."},{"content":"If the .wav file has not been specified or it fails to load, the Play method will play the default beep sound.","pos":[562,672]}]}]},{"pos":[23813,23938],"content":"The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The elapsed time during loading exceeds the time, in milliseconds, specified by &lt;xref:System.Media.SoundPlayer.LoadTimeout*&gt;.","pos":[0,125],"source":"The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>."}]},{"pos":[24047,24132],"content":"The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file specified by &lt;xref:System.Media.SoundPlayer.SoundLocation*&gt; cannot be found.","pos":[0,85],"source":"The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found."}]},{"pos":[24243,24365],"content":"The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The .wav header is corrupted; the file specified by &lt;xref:System.Media.SoundPlayer.SoundLocation*&gt; is not a PCM .wav file.","pos":[0,122],"source":"The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file."}]},{"pos":[24698,24804],"content":"Plays and loops the .wav file using a new thread, and loads the .wav file first if it has not been loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"Plays and loops the .wav file using a new thread, and loads the .wav file first if it has not been loaded.","pos":[0,106]}]},{"pos":[24817,25663],"content":"The PlayLooping method plays and loops the sound using a new thread. If you call PlayLooping before the .wav file has been loaded into memory, the .wav file will be loaded before playback starts. You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance. After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes.       If the .wav file has not been specified or it fails to load, the PlayLooping method will play the default beep sound.       For more information about PlayLooping, see [How to: Loop a Sound Playing on a Windows Form](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The PlayLooping method plays and loops the sound using a new thread.","pos":[0,68]},{"content":"If you call PlayLooping before the .wav file has been loaded into memory, the .wav file will be loaded before playback starts.","pos":[69,195]},{"content":"You can use the &lt;xref:System.Media.SoundPlayer.LoadAsync%2A&gt; or &lt;xref:System.Media.SoundPlayer.Load%2A&gt; method to load the .wav file to memory in advance.","pos":[196,350],"source":" You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance."},{"content":"After a .wav file is successfully loaded from a &lt;xref:System.IO.Stream&gt; or URL, future calls to playback methods for the &lt;xref:System.Media.SoundPlayer&gt; will not need to reload the .wav file until the path for the sound changes.","pos":[351,579],"source":" After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes."},{"content":"If the .wav file has not been specified or it fails to load, the PlayLooping method will play the default beep sound.","pos":[586,703]},{"content":"For more information about PlayLooping, see <bpt id=\"p1\">[</bpt>How to: Loop a Sound Playing on a Windows Form<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[710,842],"source":"       For more information about PlayLooping, see [How to: Loop a Sound Playing on a Windows Form](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[26551,26676],"content":"The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The elapsed time during loading exceeds the time, in milliseconds, specified by &lt;xref:System.Media.SoundPlayer.LoadTimeout*&gt;.","pos":[0,125],"source":"The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>."}]},{"pos":[26785,26870],"content":"The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file specified by &lt;xref:System.Media.SoundPlayer.SoundLocation*&gt; cannot be found.","pos":[0,85],"source":"The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found."}]},{"pos":[26981,27103],"content":"The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The .wav header is corrupted; the file specified by &lt;xref:System.Media.SoundPlayer.SoundLocation*&gt; is not a PCM .wav file.","pos":[0,122],"source":"The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file."}]},{"pos":[27421,27497],"content":"Plays the .wav file and loads the .wav file first if it has not been loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"Plays the .wav file and loads the .wav file first if it has not been loaded.","pos":[0,76]}]},{"pos":[27510,28160],"content":"The PlaySync method uses the current thread to play a .wav file, preventing the thread from handling other messages until the load is complete. You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance. After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes.       If the .wav file has not been specified or it fails to load, the PlaySync method will play the default beep sound.","needQuote":false,"needEscape":true,"nodes":[{"content":"The PlaySync method uses the current thread to play a .wav file, preventing the thread from handling other messages until the load is complete. You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance. After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes.       If the .wav file has not been specified or it fails to load, the PlaySync method will play the default beep sound.","pos":[0,648],"nodes":[{"content":"The PlaySync method uses the current thread to play a .wav file, preventing the thread from handling other messages until the load is complete.","pos":[0,143]},{"content":"You can use the &lt;xref:System.Media.SoundPlayer.LoadAsync%2A&gt; or &lt;xref:System.Media.SoundPlayer.Load%2A&gt; method to load the .wav file to memory in advance.","pos":[144,298],"source":" You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance."},{"content":"After a .wav file is successfully loaded from a &lt;xref:System.IO.Stream&gt; or URL, future calls to playback methods for the &lt;xref:System.Media.SoundPlayer&gt; will not need to reload the .wav file until the path for the sound changes.","pos":[299,527],"source":" After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes."},{"content":"If the .wav file has not been specified or it fails to load, the PlaySync method will play the default beep sound.","pos":[534,648]}]}]},{"pos":[28857,28982],"content":"The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The elapsed time during loading exceeds the time, in milliseconds, specified by &lt;xref:System.Media.SoundPlayer.LoadTimeout*&gt;.","pos":[0,125],"source":"The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>."}]},{"pos":[29091,29176],"content":"The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file specified by &lt;xref:System.Media.SoundPlayer.SoundLocation*&gt; cannot be found.","pos":[0,85],"source":"The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found."}]},{"pos":[29287,29409],"content":"The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The .wav header is corrupted; the file specified by &lt;xref:System.Media.SoundPlayer.SoundLocation*&gt; is not a PCM .wav file.","pos":[0,122],"source":"The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file."}]},{"pos":[29748,29807],"content":"Gets or sets the file path or URL of the .wav file to load.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the file path or URL of the .wav file to load.","pos":[0,59]}]},{"pos":[29819,29985],"content":"This property is set to <xref:System.String?displayProperty=fullName> when the <xref:System.Media.SoundPlayer.Stream%2A> property is set to a <xref:System.IO.Stream>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is set to &lt;xref:System.String?displayProperty=fullName&gt; when the &lt;xref:System.Media.SoundPlayer.Stream%2A&gt; property is set to a &lt;xref:System.IO.Stream&gt;.","pos":[0,166],"source":"This property is set to <xref:System.String?displayProperty=fullName> when the <xref:System.Media.SoundPlayer.Stream%2A> property is set to a <xref:System.IO.Stream>."}]},{"pos":[30704,30907],"content":"The file path or URL from which to load a .wav file, or &lt;xref:System.String?displayProperty=fullName&gt; if no file path is present. The default is &lt;xref:System.String?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file path or URL from which to load a .wav file, or &lt;xref:System.String?displayProperty=fullName&gt; if no file path is present. The default is &lt;xref:System.String?displayProperty=fullName&gt;.","pos":[0,203],"nodes":[{"content":"The file path or URL from which to load a .wav file, or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> if no file path is present.","pos":[0,135],"source":"The file path or URL from which to load a .wav file, or &lt;xref:System.String?displayProperty=fullName&gt; if no file path is present."},{"content":"The default is <ph id=\"ph1\">&amp;lt;</ph>xref:System.String?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[136,203],"source":" The default is &lt;xref:System.String?displayProperty=fullName&gt;."}]}]},{"pos":[31347,31451],"content":"Occurs when a new audio source path for this <bpt id=\"p1\">&lt;xref href=\"System.Media.SoundPlayer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has been set.","needQuote":true,"needEscape":true,"source":"Occurs when a new audio source path for this <xref href=\"System.Media.SoundPlayer\"></xref> has been set."},{"pos":[31464,31719],"content":"This event is raised when a new audio source path for this <xref:System.Media.SoundPlayer> has been set.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"nodes":[{"content":"This event is raised when a new audio source path for this &lt;xref:System.Media.SoundPlayer&gt; has been set.","pos":[0,104],"source":"This event is raised when a new audio source path for this <xref:System.Media.SoundPlayer> has been set."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[111,253],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[32525,32537],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[32852,32905],"content":"Stops playback of the sound if playback is occurring.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stops playback of the sound if playback is occurring.","pos":[0,53]}]},{"pos":[33892,33966],"content":"Gets or sets the <xref:System.IO.Stream> from which to load the .wav file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the &lt;xref:System.IO.Stream&gt; from which to load the .wav file.","pos":[0,74],"source":"Gets or sets the <xref:System.IO.Stream> from which to load the .wav file."}]},{"pos":[33978,34117],"content":"This property is set to <ph id=\"ph1\">`null`</ph> when the &lt;xref:System.Media.SoundPlayer.SoundLocation%2A&gt; property is set to a new and valid sound location.","needQuote":true,"needEscape":true,"source":"This property is set to `null` when the <xref:System.Media.SoundPlayer.SoundLocation%2A> property is set to a new and valid sound location."},{"pos":[34246,34473],"content":"A <xref:System.IO.Stream> from which to load the .wav file, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no stream is available. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; from which to load the .wav file, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no stream is available.","pos":[0,150],"source":"A <xref:System.IO.Stream> from which to load the .wav file, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no stream is available."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[151,227],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[34871,34994],"content":"Occurs when a new &lt;xref:System.IO.Stream&gt; audio source for this <bpt id=\"p1\">&lt;xref href=\"System.Media.SoundPlayer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has been set.","needQuote":true,"needEscape":true,"source":"Occurs when a new <xref:System.IO.Stream> audio source for this <xref href=\"System.Media.SoundPlayer\"></xref> has been set."},{"pos":[35007,35281],"content":"This event is raised when a new <xref:System.IO.Stream> audio source for this <xref:System.Media.SoundPlayer> has been set.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"nodes":[{"content":"This event is raised when a new &lt;xref:System.IO.Stream&gt; audio source for this &lt;xref:System.Media.SoundPlayer&gt; has been set.","pos":[0,123],"source":"This event is raised when a new <xref:System.IO.Stream> audio source for this <xref:System.Media.SoundPlayer> has been set."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[130,272],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[35410,35422],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[36301,36448],"content":"For a description of this member, see the &lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A?displayProperty=fullName&gt; method.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method.","pos":[0,147],"source":"For a description of this member, see the &lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A?displayProperty=fullName&gt; method."}]},{"pos":[36460,36664],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Media.SoundPlayer> instance is cast to an <xref:System.Runtime.Serialization.ISerializable> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Media.SoundPlayer> instance is cast to an <xref:System.Runtime.Serialization.ISerializable> interface.","pos":[0,204],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Media.SoundPlayer&gt; instance is cast to an &lt;xref:System.Runtime.Serialization.ISerializable&gt; interface.","pos":[60,204],"source":" It can be used only when the <xref:System.Media.SoundPlayer> instance is cast to an <xref:System.Runtime.Serialization.ISerializable> interface."}]}]},{"pos":[36940,37034],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to populate with data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to populate with data."},{"pos":[37130,37228],"content":"The destination (see <xref:System.Runtime.Serialization.StreamingContext>) for this serialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination (see &lt;xref:System.Runtime.Serialization.StreamingContext&gt;) for this serialization.","pos":[0,98],"source":"The destination (see <xref:System.Runtime.Serialization.StreamingContext>) for this serialization."}]},{"pos":[37629,37742],"content":"Gets or sets the &lt;xref:System.Object&gt; that contains data about the <bpt id=\"p1\">&lt;xref href=\"System.Media.SoundPlayer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref:System.Object> that contains data about the <xref href=\"System.Media.SoundPlayer\"></xref>."},{"pos":[37855,37954],"content":"An &lt;xref:System.Object&gt; that contains data about the <bpt id=\"p1\">&lt;xref href=\"System.Media.SoundPlayer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Object> that contains data about the <xref href=\"System.Media.SoundPlayer\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Media.SoundPlayer\n  id: SoundPlayer\n  children:\n  - System.Media.SoundPlayer.#ctor\n  - System.Media.SoundPlayer.#ctor(System.IO.Stream)\n  - System.Media.SoundPlayer.#ctor(System.String)\n  - System.Media.SoundPlayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Media.SoundPlayer.IsLoadCompleted\n  - System.Media.SoundPlayer.Load\n  - System.Media.SoundPlayer.LoadAsync\n  - System.Media.SoundPlayer.LoadCompleted\n  - System.Media.SoundPlayer.LoadTimeout\n  - System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)\n  - System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)\n  - System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)\n  - System.Media.SoundPlayer.Play\n  - System.Media.SoundPlayer.PlayLooping\n  - System.Media.SoundPlayer.PlaySync\n  - System.Media.SoundPlayer.SoundLocation\n  - System.Media.SoundPlayer.SoundLocationChanged\n  - System.Media.SoundPlayer.Stop\n  - System.Media.SoundPlayer.Stream\n  - System.Media.SoundPlayer.StreamChanged\n  - System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Media.SoundPlayer.Tag\n  langs:\n  - csharp\n  name: SoundPlayer\n  nameWithType: SoundPlayer\n  fullName: System.Media.SoundPlayer\n  type: Class\n  summary: Controls playback of a sound from a .wav file.\n  remarks: \"The SoundPlayer class provides a simple interface for loading and playing a .wav file. The SoundPlayer class supports loading a .wav file from a file path, a URL, a <xref:System.IO.Stream> that contains a .wav file, or an embedded resource that contains a .wav file.  \\n  \\n To play a sound using the SoundPlayer class, configure a SoundPlayer with a path to the .wav file and call one of the play methods. You can identify the .wav file to play by using one of the constructors or by setting either the <xref:System.Media.SoundPlayer.SoundLocation%2A> or <xref:System.Media.SoundPlayer.Stream%2A> property. The file can be loaded prior to playing by using one of the load methods, or loading can be deferred until one of the play methods is called. A SoundPlayer configured to load a .wav file from a <xref:System.IO.Stream> or URL must load the .wav file into memory before playback begins.  \\n  \\n You can load or play a .wav file synchronously or asynchronously. If you call a synchronous load or play method, the calling thread will wait until the method returns, which may cause painting and other events to be interrupted. Calling an asynchronous load or play method will allow the calling thread to continue without interruption. For more information on asynchronous method calls, see [How to: Run an Operation in the Background](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When a SoundPlayer has finished loading a .wav file, it raises the <xref:System.Media.SoundPlayer.LoadCompleted> event. You can examine the <xref:System.ComponentModel.AsyncCompletedEventArgs> in your event handler to determine if the load succeeded or failed. The <xref:System.Media.SoundPlayer.SoundLocationChanged> event is raised when the audio source is set to a new file path or URL. The <xref:System.Media.SoundPlayer.StreamChanged> event is raised when the audio source is set to a new <xref:System.IO.Stream>. For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  \\n  \\n For more information about SoundPlayer, see [SoundPlayer Class Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  The SoundPlayer class cannot play other file types, such as .wma or .mp3. If you want to play other file types, you can use the Windows Media Player control. For more information, see [Using the Windows Media Player Control in a .NET Framework Solution](http://go.microsoft.com/fwlink/?LinkId=131267) and [Windows Media Player Object Model Reference for Visual Basic .NET and C#](http://go.microsoft.com/fwlink/?LinkId=131269) in the Windows Media Player SDK.\"\n  example:\n  - \"The following code example demonstrates the use of the SoundPlayer class for playing .wav files from a local path or a Uniform Resource Identifier (URI).  \\n  \\n [!code-vb[System.Windows.Forms.Sound#1](~/add/codesnippet/visualbasic/t-system.media.soundplayer_1.vb)]\\n [!code-cpp[System.Windows.Forms.Sound#1](~/add/codesnippet/cpp/t-system.media.soundplayer_1.cpp)]\\n [!code-cs[System.Windows.Forms.Sound#1](~/add/codesnippet/csharp/t-system.media.soundplayer_1.cs)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.ToolboxItem(false)]\n\n      public class SoundPlayer : System.ComponentModel.Component, System.Runtime.Serialization.ISerializable\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  implements:\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Dispose(System.Boolean)\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.#ctor\n  id: '#ctor'\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: SoundPlayer()\n  nameWithType: SoundPlayer.SoundPlayer()\n  fullName: System.Media.SoundPlayer.SoundPlayer()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Initializes a new instance of the <xref href=\"System.Media.SoundPlayer\"></xref> class.\n  remarks: This constructor initializes a <xref:System.Media.SoundPlayer> with no audio source. Until it is configured with an audio source path, the <xref:System.Media.SoundPlayer> will play a beep sound when one of its playback methods is called.\n  syntax:\n    content: public SoundPlayer ();\n    parameters: []\n  overload: System.Media.SoundPlayer.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: SoundPlayer(Stream)\n  nameWithType: SoundPlayer.SoundPlayer(Stream)\n  fullName: System.Media.SoundPlayer.SoundPlayer(Stream)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Initializes a new instance of the <xref href=\"System.Media.SoundPlayer\"></xref> class, and attaches the .wav file within the specified <xref:System.IO.Stream>.\n  remarks: The <xref:System.IO.Stream> passed to the `stream` parameter should be a <xref:System.IO.Stream> containing a .wav file. The data returned by the <xref:System.IO.Stream.Read%2A> method of the <xref:System.IO.Stream> should be the data within a .wav file.\n  syntax:\n    content: public SoundPlayer (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> to a .wav file.\n  overload: System.Media.SoundPlayer.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: SoundPlayer(String)\n  nameWithType: SoundPlayer.SoundPlayer(String)\n  fullName: System.Media.SoundPlayer.SoundPlayer(String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Initializes a new instance of the <xref href=\"System.Media.SoundPlayer\"></xref> class, and attaches the specified .wav file.\n  remarks: The string passed to the `soundLocation` parameter can be either a file path or a URL to a .wav file. If the path or URL is not valid, the <xref:System.Media.SoundPlayer> will still be constructed, but subsequent calls to a load or play method will fail.\n  syntax:\n    content: public SoundPlayer (string soundLocation);\n    parameters:\n    - id: soundLocation\n      type: System.String\n      description: The location of a .wav file to load.\n  overload: System.Media.SoundPlayer.#ctor*\n  exceptions:\n  - type: System.UriFormatException\n    commentId: T:System.UriFormatException\n    description: The URL value specified by <code>soundLocation</code> cannot be resolved.\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: SoundPlayer(SerializationInfo,StreamingContext)\n  nameWithType: SoundPlayer.SoundPlayer(SerializationInfo,StreamingContext)\n  fullName: System.Media.SoundPlayer.SoundPlayer(SerializationInfo,StreamingContext)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Initializes a new instance of the <xref href=\"System.Media.SoundPlayer\"></xref> class.\n  syntax:\n    content: protected SoundPlayer (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: serializationInfo\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to be used for deserialization.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The destination to be used for deserialization.\n  overload: System.Media.SoundPlayer.#ctor*\n  exceptions:\n  - type: System.UriFormatException\n    commentId: T:System.UriFormatException\n    description: The <xref:System.Media.SoundPlayer.SoundLocation*> specified in <code>serializationInfo</code> cannot be resolved.\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.IsLoadCompleted\n  id: IsLoadCompleted\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: IsLoadCompleted\n  nameWithType: SoundPlayer.IsLoadCompleted\n  fullName: System.Media.SoundPlayer.IsLoadCompleted\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Gets a value indicating whether loading of a .wav file has successfully completed.\n  syntax:\n    content: public bool IsLoadCompleted { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a .wav file is loaded; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if a .wav file has not yet been loaded.\n  overload: System.Media.SoundPlayer.IsLoadCompleted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.Load\n  id: Load\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: Load()\n  nameWithType: SoundPlayer.Load()\n  fullName: System.Media.SoundPlayer.Load()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Loads a sound synchronously.\n  remarks: \"The Load method uses the current thread to load a .wav file, preventing the thread from handling other messages until the load is complete.  \\n  \\n> [!CAUTION]\\n>  The Load method may produce a delay while loading a large .wav file. In addition, painting and other events will be blocked until the load is completed. Use the <xref:System.Media.SoundPlayer.LoadAsync%2A> method to load a sound asynchronously, which allows the calling thread to continue without interruption.  \\n  \\n This method raises the <xref:System.Media.SoundPlayer.LoadCompleted> event when loading completes, even if the load was not successful.\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Media.SoundPlayer.LoadAsync%2A> method to attach a .wav file to an instance of the <xref:System.Media.SoundPlayer> class. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \\n  \\n [!code-vb[System.Windows.Forms.Sound#2](~/add/codesnippet/visualbasic/m-system.media.soundplay_2_1.vb)]\\n [!code-cpp[System.Windows.Forms.Sound#2](~/add/codesnippet/cpp/m-system.media.soundplay_2_1.cpp)]\\n [!code-cs[System.Windows.Forms.Sound#2](~/add/codesnippet/csharp/m-system.media.soundplay_2_1.cs)]\"\n  syntax:\n    content: public void Load ();\n    parameters: []\n  overload: System.Media.SoundPlayer.Load*\n  exceptions:\n  - type: System.ServiceProcess.TimeoutException\n    commentId: T:System.ServiceProcess.TimeoutException\n    description: The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found.\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.LoadAsync\n  id: LoadAsync\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: LoadAsync()\n  nameWithType: SoundPlayer.LoadAsync()\n  fullName: System.Media.SoundPlayer.LoadAsync()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Loads a .wav file from a stream or a Web resource using a new thread.\n  remarks: \"If a <xref:System.Media.SoundPlayer> is configured to load a .wav file from a <xref:System.IO.Stream> or Web resource, this method begins loading a .wav file from the location using a new thread.  \\n  \\n This method raises the <xref:System.Media.SoundPlayer.LoadCompleted> event when loading completes, even if the load was not successful.  \\n  \\n If a <xref:System.Media.SoundPlayer> is configured to load a .wav file from a local file path, this method does nothing, because loading is deferred until playing begins.  \\n  \\n For more information about asynchronous loading, see [How to: Load a Sound Asynchronously within a Windows Form](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates the use of the LoadAsync method to asynchronously load a .wav file for use by an instance of the <xref:System.Media.SoundPlayer> class. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \\n  \\n [!code-vb[System.Windows.Forms.Sound#3](~/add/codesnippet/visualbasic/m-system.media.soundplay_3_1.vb)]\\n [!code-cpp[System.Windows.Forms.Sound#3](~/add/codesnippet/cpp/m-system.media.soundplay_3_1.cpp)]\\n [!code-cs[System.Windows.Forms.Sound#3](~/add/codesnippet/csharp/m-system.media.soundplay_3_1.cs)]\"\n  syntax:\n    content: public void LoadAsync ();\n    parameters: []\n  overload: System.Media.SoundPlayer.LoadAsync*\n  exceptions:\n  - type: System.ServiceProcess.TimeoutException\n    commentId: T:System.ServiceProcess.TimeoutException\n    description: The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found.\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.LoadCompleted\n  id: LoadCompleted\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: LoadCompleted\n  nameWithType: SoundPlayer.LoadCompleted\n  fullName: System.Media.SoundPlayer.LoadCompleted\n  type: Event\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Occurs when a .wav file has been successfully or unsuccessfully loaded.\n  remarks: \"This event is raised when loading of a .wav file is complete. The event arguments indicate whether the load of the sound was completed successfully or failed.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Media.SoundPlayer.OnLoadCompleted%2A> event handler to receive a notification indicating that the contents of a .wav file have been loaded. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \\n  \\n [!code-vb[System.Windows.Forms.Sound#8](~/add/codesnippet/visualbasic/e-system.media.soundplay_1_1.vb)]\\n [!code-cpp[System.Windows.Forms.Sound#8](~/add/codesnippet/cpp/e-system.media.soundplay_1_1.cpp)]\\n [!code-cs[System.Windows.Forms.Sound#8](~/add/codesnippet/csharp/e-system.media.soundplay_1_1.cs)]\"\n  syntax:\n    content: public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;\n    return:\n      type: System.ComponentModel.AsyncCompletedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.LoadTimeout\n  id: LoadTimeout\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: LoadTimeout\n  nameWithType: SoundPlayer.LoadTimeout\n  fullName: System.Media.SoundPlayer.LoadTimeout\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Gets or sets the time, in milliseconds, in which the .wav file must load.\n  remarks: After this time has expired, the loading is canceled and a <xref:System.ServiceProcess.TimeoutException> exception is thrown.\n  syntax:\n    content: public int LoadTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: The number of milliseconds to wait. The default is 10000 (10 seconds).\n  overload: System.Media.SoundPlayer.LoadTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)\n  id: OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: OnLoadCompleted(AsyncCompletedEventArgs)\n  nameWithType: SoundPlayer.OnLoadCompleted(AsyncCompletedEventArgs)\n  fullName: System.Media.SoundPlayer.OnLoadCompleted(AsyncCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Raises the <xref href=\"System.Media.SoundPlayer.LoadCompleted\"></xref> event.\n  remarks: \"This method is called when loading of a .wav file is complete.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The OnLoadCompleted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected virtual void OnLoadCompleted (System.ComponentModel.AsyncCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.ComponentModel.AsyncCompletedEventArgs\n      description: An <xref:System.ComponentModel.AsyncCompletedEventArgs> that contains the event data.\n  overload: System.Media.SoundPlayer.OnLoadCompleted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)\n  id: OnSoundLocationChanged(System.EventArgs)\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: OnSoundLocationChanged(EventArgs)\n  nameWithType: SoundPlayer.OnSoundLocationChanged(EventArgs)\n  fullName: System.Media.SoundPlayer.OnSoundLocationChanged(EventArgs)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Raises the <xref href=\"System.Media.SoundPlayer.SoundLocationChanged\"></xref> event.\n  remarks: \"This method is called when a new audio source path for this <xref:System.Media.SoundPlayer> has been set.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see How to: Provide Event functionality and [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The OnSoundLocationChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected virtual void OnSoundLocationChanged (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref:System.EventArgs> that contains the event data.\n  overload: System.Media.SoundPlayer.OnSoundLocationChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)\n  id: OnStreamChanged(System.EventArgs)\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: OnStreamChanged(EventArgs)\n  nameWithType: SoundPlayer.OnStreamChanged(EventArgs)\n  fullName: System.Media.SoundPlayer.OnStreamChanged(EventArgs)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Raises the <xref href=\"System.Media.SoundPlayer.StreamChanged\"></xref> event.\n  remarks: \"This method is called when a new <xref:System.IO.Stream> audio source for this <xref:System.Media.SoundPlayer> has been set.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The OnStreamChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected virtual void OnStreamChanged (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref:System.EventArgs> that contains the event data.\n  overload: System.Media.SoundPlayer.OnStreamChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.Play\n  id: Play\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: Play()\n  nameWithType: SoundPlayer.Play()\n  fullName: System.Media.SoundPlayer.Play()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Plays the .wav file using a new thread, and loads the .wav file first if it has not been loaded.\n  remarks: \"The Play method plays the sound using a new thread. If you call Play before the .wav file has been loaded into memory, the .wav file will be loaded before playback starts. You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance. After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes.  \\n  \\n If the .wav file has not been specified or it fails to load, the Play method will play the default beep sound.\"\n  example:\n  - \"The following code example demonstrates the use of the Play method to asynchronously play a .wav file. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \\n  \\n [!code-vb[System.Windows.Forms.Sound#5](~/add/codesnippet/visualbasic/m-system.media.soundplay_0_1.vb)]\\n [!code-cpp[System.Windows.Forms.Sound#5](~/add/codesnippet/cpp/m-system.media.soundplay_0_1.cpp)]\\n [!code-cs[System.Windows.Forms.Sound#5](~/add/codesnippet/csharp/m-system.media.soundplay_0_1.cs)]\"\n  syntax:\n    content: public void Play ();\n    parameters: []\n  overload: System.Media.SoundPlayer.Play*\n  exceptions:\n  - type: System.ServiceProcess.TimeoutException\n    commentId: T:System.ServiceProcess.TimeoutException\n    description: The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file.\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.PlayLooping\n  id: PlayLooping\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: PlayLooping()\n  nameWithType: SoundPlayer.PlayLooping()\n  fullName: System.Media.SoundPlayer.PlayLooping()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Plays and loops the .wav file using a new thread, and loads the .wav file first if it has not been loaded.\n  remarks: \"The PlayLooping method plays and loops the sound using a new thread. If you call PlayLooping before the .wav file has been loaded into memory, the .wav file will be loaded before playback starts. You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance. After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes.  \\n  \\n If the .wav file has not been specified or it fails to load, the PlayLooping method will play the default beep sound.  \\n  \\n For more information about PlayLooping, see [How to: Loop a Sound Playing on a Windows Form](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates the use of the PlayLooping method to repeatedly play a .wav file. The .wav will be played until the <xref:System.Media.SoundPlayer.Stop%2A> method is called. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \\n  \\n [!code-vb[System.Windows.Forms.Sound#6](~/add/codesnippet/visualbasic/m-system.media.soundplay_1_1.vb)]\\n [!code-cpp[System.Windows.Forms.Sound#6](~/add/codesnippet/cpp/m-system.media.soundplay_1_1.cpp)]\\n [!code-cs[System.Windows.Forms.Sound#6](~/add/codesnippet/csharp/m-system.media.soundplay_1_1.cs)]\"\n  syntax:\n    content: public void PlayLooping ();\n    parameters: []\n  overload: System.Media.SoundPlayer.PlayLooping*\n  exceptions:\n  - type: System.ServiceProcess.TimeoutException\n    commentId: T:System.ServiceProcess.TimeoutException\n    description: The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file.\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.PlaySync\n  id: PlaySync\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: PlaySync()\n  nameWithType: SoundPlayer.PlaySync()\n  fullName: System.Media.SoundPlayer.PlaySync()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Plays the .wav file and loads the .wav file first if it has not been loaded.\n  remarks: \"The PlaySync method uses the current thread to play a .wav file, preventing the thread from handling other messages until the load is complete. You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance. After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes.  \\n  \\n If the .wav file has not been specified or it fails to load, the PlaySync method will play the default beep sound.\"\n  example:\n  - \"The following code example demonstrates the use of the PlaySync method to synchronously play a .wav file.  \\n  \\n [!code-cs[System.Windows.Forms.PlaySync#1](~/add/codesnippet/csharp/m-system.media.soundplay_4_1.cs)]\\n [!code-cpp[System.Windows.Forms.PlaySync#1](~/add/codesnippet/cpp/m-system.media.soundplay_4_1.cpp)]\\n [!code-vb[System.Windows.Forms.PlaySync#1](~/add/codesnippet/visualbasic/m-system.media.soundplay_4_1.vb)]\"\n  syntax:\n    content: public void PlaySync ();\n    parameters: []\n  overload: System.Media.SoundPlayer.PlaySync*\n  exceptions:\n  - type: System.ServiceProcess.TimeoutException\n    commentId: T:System.ServiceProcess.TimeoutException\n    description: The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file.\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.SoundLocation\n  id: SoundLocation\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: SoundLocation\n  nameWithType: SoundPlayer.SoundLocation\n  fullName: System.Media.SoundPlayer.SoundLocation\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Gets or sets the file path or URL of the .wav file to load.\n  remarks: This property is set to <xref:System.String?displayProperty=fullName> when the <xref:System.Media.SoundPlayer.Stream%2A> property is set to a <xref:System.IO.Stream>.\n  example:\n  - \"The following code example demonstrates the use of the SoundLocation property to assign the .wav file source to an instance of the <xref:System.Media.SoundPlayer> class. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \\n  \\n [!code-vb[System.Windows.Forms.Sound#2](~/add/codesnippet/visualbasic/p-system.media.soundplay_1.vb)]\\n [!code-cpp[System.Windows.Forms.Sound#2](~/add/codesnippet/cpp/p-system.media.soundplay_1.cpp)]\\n [!code-cs[System.Windows.Forms.Sound#2](~/add/codesnippet/csharp/p-system.media.soundplay_1.cs)]\"\n  syntax:\n    content: public string SoundLocation { get; set; }\n    return:\n      type: System.String\n      description: The file path or URL from which to load a .wav file, or &lt;xref:System.String?displayProperty=fullName&gt; if no file path is present. The default is &lt;xref:System.String?displayProperty=fullName&gt;.\n  overload: System.Media.SoundPlayer.SoundLocation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.SoundLocationChanged\n  id: SoundLocationChanged\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: SoundLocationChanged\n  nameWithType: SoundPlayer.SoundLocationChanged\n  fullName: System.Media.SoundPlayer.SoundLocationChanged\n  type: Event\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Occurs when a new audio source path for this <xref href=\"System.Media.SoundPlayer\"></xref> has been set.\n  remarks: \"This event is raised when a new audio source path for this <xref:System.Media.SoundPlayer> has been set.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Media.SoundPlayer.OnSoundLocationChanged%2A> event handler to receive a notification when the <xref:System.Media.SoundPlayer> has been attached to a different .wav file. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \\n  \\n [!code-vb[System.Windows.Forms.Sound#9](~/add/codesnippet/visualbasic/e-system.media.soundplay_0_1.vb)]\\n [!code-cpp[System.Windows.Forms.Sound#9](~/add/codesnippet/cpp/e-system.media.soundplay_0_1.cpp)]\\n [!code-cs[System.Windows.Forms.Sound#9](~/add/codesnippet/csharp/e-system.media.soundplay_0_1.cs)]\"\n  syntax:\n    content: public event EventHandler SoundLocationChanged;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.Stop\n  id: Stop\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: SoundPlayer.Stop()\n  fullName: System.Media.SoundPlayer.Stop()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Stops playback of the sound if playback is occurring.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates the use of the Stop method to halt a .wav file that is currently playing. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \\n  \\n [!code-vb[System.Windows.Forms.Sound#7](~/add/codesnippet/visualbasic/m-system.media.soundplay_5_1.vb)]\\n [!code-cpp[System.Windows.Forms.Sound#7](~/add/codesnippet/cpp/m-system.media.soundplay_5_1.cpp)]\\n [!code-cs[System.Windows.Forms.Sound#7](~/add/codesnippet/csharp/m-system.media.soundplay_5_1.cs)]\"\n  syntax:\n    content: public void Stop ();\n    parameters: []\n  overload: System.Media.SoundPlayer.Stop*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.Stream\n  id: Stream\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: Stream\n  nameWithType: SoundPlayer.Stream\n  fullName: System.Media.SoundPlayer.Stream\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Gets or sets the <xref:System.IO.Stream> from which to load the .wav file.\n  remarks: This property is set to `null` when the <xref:System.Media.SoundPlayer.SoundLocation%2A> property is set to a new and valid sound location.\n  syntax:\n    content: public System.IO.Stream Stream { get; set; }\n    return:\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> from which to load the .wav file, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no stream is available. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Media.SoundPlayer.Stream*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.StreamChanged\n  id: StreamChanged\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: StreamChanged\n  nameWithType: SoundPlayer.StreamChanged\n  fullName: System.Media.SoundPlayer.StreamChanged\n  type: Event\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Occurs when a new <xref:System.IO.Stream> audio source for this <xref href=\"System.Media.SoundPlayer\"></xref> has been set.\n  remarks: \"This event is raised when a new <xref:System.IO.Stream> audio source for this <xref:System.Media.SoundPlayer> has been set.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  syntax:\n    content: public event EventHandler StreamChanged;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: SoundPlayer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Media.SoundPlayer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: For a description of this member, see the &lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A?displayProperty=fullName&gt; method.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Media.SoundPlayer> instance is cast to an <xref:System.Runtime.Serialization.ISerializable> interface.\n  syntax:\n    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to populate with data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The destination (see <xref:System.Runtime.Serialization.StreamingContext>) for this serialization.\n  overload: System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Media.SoundPlayer.Tag\n  id: Tag\n  parent: System.Media.SoundPlayer\n  langs:\n  - csharp\n  name: Tag\n  nameWithType: SoundPlayer.Tag\n  fullName: System.Media.SoundPlayer.Tag\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Media\n  summary: Gets or sets the <xref:System.Object> that contains data about the <xref href=\"System.Media.SoundPlayer\"></xref>.\n  syntax:\n    content: public object Tag { get; set; }\n    return:\n      type: System.Object\n      description: An <xref:System.Object> that contains data about the <xref href=\"System.Media.SoundPlayer\"></xref>.\n  overload: System.Media.SoundPlayer.Tag*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Component\n  isExternal: false\n  name: System.ComponentModel.Component\n- uid: System.UriFormatException\n  isExternal: true\n  name: System.UriFormatException\n- uid: System.ServiceProcess.TimeoutException\n  parent: System.ServiceProcess\n  isExternal: false\n  name: TimeoutException\n  nameWithType: TimeoutException\n  fullName: System.ServiceProcess.TimeoutException\n- uid: System.IO.FileNotFoundException\n  isExternal: true\n  name: System.IO.FileNotFoundException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Media.SoundPlayer.#ctor\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: SoundPlayer()\n  nameWithType: SoundPlayer.SoundPlayer()\n  fullName: System.Media.SoundPlayer.SoundPlayer()\n- uid: System.Media.SoundPlayer.#ctor(System.IO.Stream)\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: SoundPlayer(Stream)\n  nameWithType: SoundPlayer.SoundPlayer(Stream)\n  fullName: System.Media.SoundPlayer.SoundPlayer(Stream)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Media.SoundPlayer.#ctor(System.String)\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: SoundPlayer(String)\n  nameWithType: SoundPlayer.SoundPlayer(String)\n  fullName: System.Media.SoundPlayer.SoundPlayer(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Media.SoundPlayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: SoundPlayer(SerializationInfo,StreamingContext)\n  nameWithType: SoundPlayer.SoundPlayer(SerializationInfo,StreamingContext)\n  fullName: System.Media.SoundPlayer.SoundPlayer(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Media.SoundPlayer.IsLoadCompleted\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: IsLoadCompleted\n  nameWithType: SoundPlayer.IsLoadCompleted\n  fullName: System.Media.SoundPlayer.IsLoadCompleted\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Media.SoundPlayer.Load\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: Load()\n  nameWithType: SoundPlayer.Load()\n  fullName: System.Media.SoundPlayer.Load()\n- uid: System.Media.SoundPlayer.LoadAsync\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: LoadAsync()\n  nameWithType: SoundPlayer.LoadAsync()\n  fullName: System.Media.SoundPlayer.LoadAsync()\n- uid: System.Media.SoundPlayer.LoadCompleted\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: LoadCompleted\n  nameWithType: SoundPlayer.LoadCompleted\n  fullName: System.Media.SoundPlayer.LoadCompleted\n- uid: System.ComponentModel.AsyncCompletedEventHandler\n  parent: System.ComponentModel\n  isExternal: true\n  name: AsyncCompletedEventHandler\n  nameWithType: AsyncCompletedEventHandler\n  fullName: System.ComponentModel.AsyncCompletedEventHandler\n- uid: System.Media.SoundPlayer.LoadTimeout\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: LoadTimeout\n  nameWithType: SoundPlayer.LoadTimeout\n  fullName: System.Media.SoundPlayer.LoadTimeout\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: OnLoadCompleted(AsyncCompletedEventArgs)\n  nameWithType: SoundPlayer.OnLoadCompleted(AsyncCompletedEventArgs)\n  fullName: System.Media.SoundPlayer.OnLoadCompleted(AsyncCompletedEventArgs)\n- uid: System.ComponentModel.AsyncCompletedEventArgs\n  parent: System.ComponentModel\n  isExternal: true\n  name: AsyncCompletedEventArgs\n  nameWithType: AsyncCompletedEventArgs\n  fullName: System.ComponentModel.AsyncCompletedEventArgs\n- uid: System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: OnSoundLocationChanged(EventArgs)\n  nameWithType: SoundPlayer.OnSoundLocationChanged(EventArgs)\n  fullName: System.Media.SoundPlayer.OnSoundLocationChanged(EventArgs)\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: OnStreamChanged(EventArgs)\n  nameWithType: SoundPlayer.OnStreamChanged(EventArgs)\n  fullName: System.Media.SoundPlayer.OnStreamChanged(EventArgs)\n- uid: System.Media.SoundPlayer.Play\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: Play()\n  nameWithType: SoundPlayer.Play()\n  fullName: System.Media.SoundPlayer.Play()\n- uid: System.Media.SoundPlayer.PlayLooping\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: PlayLooping()\n  nameWithType: SoundPlayer.PlayLooping()\n  fullName: System.Media.SoundPlayer.PlayLooping()\n- uid: System.Media.SoundPlayer.PlaySync\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: PlaySync()\n  nameWithType: SoundPlayer.PlaySync()\n  fullName: System.Media.SoundPlayer.PlaySync()\n- uid: System.Media.SoundPlayer.SoundLocation\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: SoundLocation\n  nameWithType: SoundPlayer.SoundLocation\n  fullName: System.Media.SoundPlayer.SoundLocation\n- uid: System.Media.SoundPlayer.SoundLocationChanged\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: SoundLocationChanged\n  nameWithType: SoundPlayer.SoundLocationChanged\n  fullName: System.Media.SoundPlayer.SoundLocationChanged\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Media.SoundPlayer.Stop\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: Stop()\n  nameWithType: SoundPlayer.Stop()\n  fullName: System.Media.SoundPlayer.Stop()\n- uid: System.Media.SoundPlayer.Stream\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: Stream\n  nameWithType: SoundPlayer.Stream\n  fullName: System.Media.SoundPlayer.Stream\n- uid: System.Media.SoundPlayer.StreamChanged\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: StreamChanged\n  nameWithType: SoundPlayer.StreamChanged\n  fullName: System.Media.SoundPlayer.StreamChanged\n- uid: System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: SoundPlayer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Media.SoundPlayer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Media.SoundPlayer.Tag\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: Tag\n  nameWithType: SoundPlayer.Tag\n  fullName: System.Media.SoundPlayer.Tag\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Media.SoundPlayer.#ctor*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: SoundPlayer\n  nameWithType: SoundPlayer.SoundPlayer\n- uid: System.Media.SoundPlayer.IsLoadCompleted*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: IsLoadCompleted\n  nameWithType: SoundPlayer.IsLoadCompleted\n- uid: System.Media.SoundPlayer.Load*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: Load\n  nameWithType: SoundPlayer.Load\n- uid: System.Media.SoundPlayer.LoadAsync*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: LoadAsync\n  nameWithType: SoundPlayer.LoadAsync\n- uid: System.Media.SoundPlayer.LoadTimeout*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: LoadTimeout\n  nameWithType: SoundPlayer.LoadTimeout\n- uid: System.Media.SoundPlayer.OnLoadCompleted*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: OnLoadCompleted\n  nameWithType: SoundPlayer.OnLoadCompleted\n- uid: System.Media.SoundPlayer.OnSoundLocationChanged*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: OnSoundLocationChanged\n  nameWithType: SoundPlayer.OnSoundLocationChanged\n- uid: System.Media.SoundPlayer.OnStreamChanged*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: OnStreamChanged\n  nameWithType: SoundPlayer.OnStreamChanged\n- uid: System.Media.SoundPlayer.Play*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: Play\n  nameWithType: SoundPlayer.Play\n- uid: System.Media.SoundPlayer.PlayLooping*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: PlayLooping\n  nameWithType: SoundPlayer.PlayLooping\n- uid: System.Media.SoundPlayer.PlaySync*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: PlaySync\n  nameWithType: SoundPlayer.PlaySync\n- uid: System.Media.SoundPlayer.SoundLocation*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: SoundLocation\n  nameWithType: SoundPlayer.SoundLocation\n- uid: System.Media.SoundPlayer.Stop*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: Stop\n  nameWithType: SoundPlayer.Stop\n- uid: System.Media.SoundPlayer.Stream*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: Stream\n  nameWithType: SoundPlayer.Stream\n- uid: System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: SoundPlayer.System.Runtime.Serialization.ISerializable.GetObjectData\n- uid: System.Media.SoundPlayer.Tag*\n  parent: System.Media.SoundPlayer\n  isExternal: false\n  name: Tag\n  nameWithType: SoundPlayer.Tag\n"}