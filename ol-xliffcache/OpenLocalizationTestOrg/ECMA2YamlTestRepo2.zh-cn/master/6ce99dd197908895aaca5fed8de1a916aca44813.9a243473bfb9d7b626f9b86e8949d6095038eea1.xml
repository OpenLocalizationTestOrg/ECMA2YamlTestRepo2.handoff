{"nodes":[{"pos":[1549,1790],"content":"Creates and populates an <bpt id=\"p1\">&lt;xref href=\"System.Activities.Presentation.Metadata.AttributeTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used by the <bpt id=\"p2\">&lt;xref href=\"System.Activities.Presentation.Metadata.MetadataStore\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to provide attribute lookup and registration.","needQuote":true,"needEscape":true,"source":"Creates and populates an <xref href=\"System.Activities.Presentation.Metadata.AttributeTable\"></xref> that is used by the <xref href=\"System.Activities.Presentation.Metadata.MetadataStore\"></xref> to provide attribute lookup and registration."},{"pos":[1802,2312],"content":"Use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>, <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A>, and <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable%2A> to populate the builder, then call <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A> to acquire an <xref:System.Activities.Presentation.Metadata.AttributeTable> containing the desired collection of attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A&gt;, &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A&gt;, and &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable%2A&gt; to populate the builder, then call &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A&gt; to acquire an &lt;xref:System.Activities.Presentation.Metadata.AttributeTable&gt; containing the desired collection of attributes.","pos":[0,510],"source":"Use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>, <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A>, and <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable%2A> to populate the builder, then call <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A> to acquire an <xref:System.Activities.Presentation.Metadata.AttributeTable> containing the desired collection of attributes."}]},{"pos":[3107,3226],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Presentation.Metadata.AttributeTableBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Activities.Presentation.Metadata.AttributeTableBuilder\"></xref> class."},{"pos":[4112,4197],"content":"Specifies a callback that will be invoked when metadata for the given type is needed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a callback that will be invoked when metadata for the given type is needed.","pos":[0,85]}]},{"pos":[4209,4480],"content":"The first time an &lt;xref:System.Activities.Presentation.Metadata.AttributeTable&gt; returned by &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A&gt; is queried for attributes for <ph id=\"ph1\">`type`</ph>, <ph id=\"ph2\">`callback`</ph> is called to provide the metadata information.","needQuote":true,"needEscape":true,"source":"The first time an <xref:System.Activities.Presentation.Metadata.AttributeTable> returned by <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A> is queried for attributes for `type`, `callback` is called to provide the metadata information."},{"pos":[4683,4737],"content":"The type for which the callback will provide metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type for which the callback will provide metadata.","pos":[0,54]}]},{"pos":[4846,4866],"content":"The callback method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The callback method.","pos":[0,20]}]},{"pos":[5627,5688],"content":"Adds the contents of the provided attributes to this builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the contents of the provided attributes to this builder.","pos":[0,61]}]},{"pos":[5701,6036],"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.","needQuote":false,"needEscape":true,"nodes":[{"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.","pos":[0,333],"nodes":[{"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.","pos":[0,136]},{"content":"When building a large attribute table, use &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A&gt; to defer the work of creating attributes until they are needed.","pos":[143,333],"source":"       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed."}]}]},{"pos":[6204,6246],"content":"The type to add class-level attributes to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type to add class-level attributes to.","pos":[0,42]}]},{"pos":[6318,6363],"content":"The attributes that are added to the builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attributes that are added to the builder.","pos":[0,45]}]},{"pos":[6575,6684],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;attributes&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>type</code> or <code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7470,7531],"content":"Adds the contents of the provided attributes to this builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the contents of the provided attributes to this builder.","pos":[0,61]}]},{"pos":[7544,7879],"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.","needQuote":false,"needEscape":true,"nodes":[{"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.","pos":[0,333],"nodes":[{"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.","pos":[0,136]},{"content":"When building a large attribute table, use &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A&gt; to defer the work of creating attributes until they are needed.","pos":[143,333],"source":"       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed."}]}]},{"pos":[8108,8169],"content":"The type that contains the member identified by <ph id=\"ph1\">`descriptor`</ph>.","needQuote":true,"needEscape":true,"source":"The type that contains the member identified by `descriptor`."},{"pos":[8261,8321],"content":"The event or property info that the attributes are added to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event or property info that the attributes are added to.","pos":[0,60]}]},{"pos":[8393,8438],"content":"The attributes that are added to the builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attributes that are added to the builder.","pos":[0,45]}]},{"pos":[8650,8789],"content":"<ph id=\"ph1\">&lt;code&gt;ownerType&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;descriptor&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;attributes&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ownerType</code>, <code>descriptor</code> or <code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9537,9598],"content":"Adds the contents of the provided attributes to this builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the contents of the provided attributes to this builder.","pos":[0,61]}]},{"pos":[9611,9946],"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.","needQuote":false,"needEscape":true,"nodes":[{"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.","pos":[0,333],"nodes":[{"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.","pos":[0,136]},{"content":"When building a large attribute table, use &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A&gt; to defer the work of creating attributes until they are needed.","pos":[143,333],"source":"       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed."}]}]},{"pos":[10161,10218],"content":"The type that contains the member identified by <ph id=\"ph1\">`member`</ph>.","needQuote":true,"needEscape":true,"source":"The type that contains the member identified by `member`."},{"pos":[10296,10356],"content":"The event or property info that the attributes are added to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event or property info that the attributes are added to.","pos":[0,60]}]},{"pos":[10428,10473],"content":"The attributes that are added to the builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attributes that are added to the builder.","pos":[0,45]}]},{"pos":[10685,10820],"content":"<ph id=\"ph1\">&lt;code&gt;ownerType&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;member&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;attributes&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ownerType</code>, <code>member</code> or <code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11526,11587],"content":"Adds the contents of the provided attributes to this builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the contents of the provided attributes to this builder.","pos":[0,61]}]},{"pos":[11600,11935],"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.","needQuote":false,"needEscape":true,"nodes":[{"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.","pos":[0,333],"nodes":[{"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.","pos":[0,136]},{"content":"When building a large attribute table, use &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A&gt; to defer the work of creating attributes until they are needed.","pos":[143,333],"source":"       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed."}]}]},{"pos":[12132,12193],"content":"The type that contains the member identified by <ph id=\"ph1\">`memberName`</ph>.","needQuote":true,"needEscape":true,"source":"The type that contains the member identified by `memberName`."},{"pos":[12260,12332],"content":"The name of the event or property info that the attributes are added to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the event or property info that the attributes are added to.","pos":[0,72]}]},{"pos":[12404,12449],"content":"The attributes that are added to the builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attributes that are added to the builder.","pos":[0,45]}]},{"pos":[12661,12801],"content":"<ph id=\"ph1\">&lt;code&gt;ownerType&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;memberName&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;attributes&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ownerType</code>, <code>memberName</code>, or <code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13583,13644],"content":"Adds the contents of the provided attributes to this builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the contents of the provided attributes to this builder.","pos":[0,61]}]},{"pos":[13657,13992],"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.","needQuote":false,"needEscape":true,"nodes":[{"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.","pos":[0,333],"nodes":[{"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.","pos":[0,136]},{"content":"When building a large attribute table, use &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A&gt; to defer the work of creating attributes until they are needed.","pos":[143,333],"source":"       When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed."}]}]},{"pos":[14208,14265],"content":"The type that contains the dependency identified by <ph id=\"ph1\">`dp`</ph>.","needQuote":true,"needEscape":true,"source":"The type that contains the dependency identified by `dp`."},{"pos":[14344,14387],"content":"A dependency property to add attributes to.","needQuote":true,"needEscape":true,"nodes":[{"content":"A dependency property to add attributes to.","pos":[0,43]}]},{"pos":[14459,14504],"content":"The attributes that are added to the builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attributes that are added to the builder.","pos":[0,45]}]},{"pos":[14716,14847],"content":"<ph id=\"ph1\">&lt;code&gt;ownerType&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;dp&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;attributes&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ownerType</code>, <code>dp</code> or <code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15491,15557],"content":"Adds the contents of the provided attribute table to this builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the contents of the provided attribute table to this builder.","pos":[0,66]}]},{"pos":[15569,15705],"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.","pos":[0,136]}]},{"pos":[15932,15959],"content":"The source attribute table.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source attribute table.","pos":[0,27]}]},{"pos":[16160,16243],"content":"<code>table</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[19,83],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[16748,16935],"content":"Creates an attribute table that contains all of the attribute definitions provided through <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes*> calls.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an attribute table that contains all of the attribute definitions provided through &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes*&gt; calls.","pos":[0,187],"source":"Creates an attribute table that contains all of the attribute definitions provided through <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes*> calls."}]},{"pos":[16948,17381],"content":"The table is a snapshot of the current state of the attribute builder; any attributes added by subsequent <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> calls are not included in the table.       If callback methods were used to declare attributes, those methods will not be evaluated during CreateTable. Instead, the table will contain those callbacks and will evaluate them as needed.","needQuote":false,"needEscape":true,"nodes":[{"content":"The table is a snapshot of the current state of the attribute builder; any attributes added by subsequent <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> calls are not included in the table.       If callback methods were used to declare attributes, those methods will not be evaluated during CreateTable. Instead, the table will contain those callbacks and will evaluate them as needed.","pos":[0,431],"nodes":[{"content":"The table is a snapshot of the current state of the attribute builder; any attributes added by subsequent &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A&gt; calls are not included in the table.","pos":[0,234],"source":"The table is a snapshot of the current state of the attribute builder; any attributes added by subsequent <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> calls are not included in the table."},{"content":"If callback methods were used to declare attributes, those methods will not be evaluated during CreateTable.","pos":[241,349]},{"content":"Instead, the table will contain those callbacks and will evaluate them as needed.","pos":[350,431]}]}]},{"pos":[17601,17721],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Activities.Presentation.Metadata.AttributeTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that can be passed to the metadata store.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Activities.Presentation.Metadata.AttributeTable\"></xref> that can be passed to the metadata store."},{"pos":[18340,18431],"content":"Verifies that the attribute table that is being built contains valid attribute information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies that the attribute table that is being built contains valid attribute information.","pos":[0,91]}]},{"pos":[18443,18842],"content":"Some overrides of <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A>cannot validate that values passed to their parameters represent valid members on classes. ValidateTable verifies that all custom attribute information corresponds to actual members. This method can take a long time to complete and is not recommended unless validation is explicitly needed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Some overrides of <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A>cannot validate that values passed to their parameters represent valid members on classes. ValidateTable verifies that all custom attribute information corresponds to actual members. This method can take a long time to complete and is not recommended unless validation is explicitly needed.","pos":[0,399],"nodes":[{"content":"Some overrides of &lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A&gt;cannot validate that values passed to their parameters represent valid members on classes.","pos":[0,199],"source":"Some overrides of <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A>cannot validate that values passed to their parameters represent valid members on classes."},{"content":"ValidateTable verifies that all custom attribute information corresponds to actual members.","pos":[200,291]},{"content":"This method can take a long time to complete and is not recommended unless validation is explicitly needed.","pos":[292,399]}]}]},{"pos":[19210,19244],"content":"the state of the table is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"the state of the table is invalid.","pos":[0,34]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  id: AttributeTableBuilder\n  children:\n  - System.Activities.Presentation.Metadata.AttributeTableBuilder.#ctor\n  - System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback(System.Type,System.Activities.Presentation.Metadata.AttributeCallback)\n  - System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])\n  - System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.ComponentModel.MemberDescriptor,System.Attribute[])\n  - System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Reflection.MemberInfo,System.Attribute[])\n  - System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.String,System.Attribute[])\n  - System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Windows.DependencyProperty,System.Attribute[])\n  - System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable(System.Activities.Presentation.Metadata.AttributeTable)\n  - System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable\n  - System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable\n  langs:\n  - csharp\n  name: AttributeTableBuilder\n  nameWithType: AttributeTableBuilder\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  type: Class\n  summary: Creates and populates an <xref href=\"System.Activities.Presentation.Metadata.AttributeTable\"></xref> that is used by the <xref href=\"System.Activities.Presentation.Metadata.MetadataStore\"></xref> to provide attribute lookup and registration.\n  remarks: Use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>, <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A>, and <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable%2A> to populate the builder, then call <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A> to acquire an <xref:System.Activities.Presentation.Metadata.AttributeTable> containing the desired collection of attributes.\n  example:\n  - '[!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]'\n  syntax:\n    content: public class AttributeTableBuilder\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.#ctor\n  id: '#ctor'\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  langs:\n  - csharp\n  name: AttributeTableBuilder()\n  nameWithType: AttributeTableBuilder.AttributeTableBuilder()\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AttributeTableBuilder()\n  type: Constructor\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Metadata\n  summary: Creates a new instance of the <xref href=\"System.Activities.Presentation.Metadata.AttributeTableBuilder\"></xref> class.\n  syntax:\n    content: public AttributeTableBuilder ();\n    parameters: []\n  overload: System.Activities.Presentation.Metadata.AttributeTableBuilder.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback(System.Type,System.Activities.Presentation.Metadata.AttributeCallback)\n  id: AddCallback(System.Type,System.Activities.Presentation.Metadata.AttributeCallback)\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  langs:\n  - csharp\n  name: AddCallback(Type,AttributeCallback)\n  nameWithType: AttributeTableBuilder.AddCallback(Type,AttributeCallback)\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback(Type,AttributeCallback)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Metadata\n  summary: Specifies a callback that will be invoked when metadata for the given type is needed.\n  remarks: The first time an <xref:System.Activities.Presentation.Metadata.AttributeTable> returned by <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A> is queried for attributes for `type`, `callback` is called to provide the metadata information.\n  syntax:\n    content: public void AddCallback (Type type, System.Activities.Presentation.Metadata.AttributeCallback callback);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type for which the callback will provide metadata.\n    - id: callback\n      type: System.Activities.Presentation.Metadata.AttributeCallback\n      description: The callback method.\n  overload: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])\n  id: AddCustomAttributes(System.Type,System.Attribute[])\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  langs:\n  - csharp\n  name: AddCustomAttributes(Type,Attribute[])\n  nameWithType: AttributeTableBuilder.AddCustomAttributes(Type,Attribute[])\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(Type,Attribute[])\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Metadata\n  summary: Adds the contents of the provided attributes to this builder.\n  remarks: \"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.  \\n  \\n When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.\"\n  syntax:\n    content: public void AddCustomAttributes (Type type, Attribute[] attributes);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type to add class-level attributes to.\n    - id: attributes\n      type: System.Attribute[]\n      description: The attributes that are added to the builder.\n  overload: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> or <code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.ComponentModel.MemberDescriptor,System.Attribute[])\n  id: AddCustomAttributes(System.Type,System.ComponentModel.MemberDescriptor,System.Attribute[])\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  langs:\n  - csharp\n  name: AddCustomAttributes(Type,MemberDescriptor,Attribute[])\n  nameWithType: AttributeTableBuilder.AddCustomAttributes(Type,MemberDescriptor,Attribute[])\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(Type,MemberDescriptor,Attribute[])\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Metadata\n  summary: Adds the contents of the provided attributes to this builder.\n  remarks: \"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.  \\n  \\n When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.\"\n  syntax:\n    content: public void AddCustomAttributes (Type ownerType, System.ComponentModel.MemberDescriptor descriptor, Attribute[] attributes);\n    parameters:\n    - id: ownerType\n      type: System.Type\n      description: The type that contains the member identified by `descriptor`.\n    - id: descriptor\n      type: System.ComponentModel.MemberDescriptor\n      description: The event or property info that the attributes are added to.\n    - id: attributes\n      type: System.Attribute[]\n      description: The attributes that are added to the builder.\n  overload: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ownerType</code>, <code>descriptor</code> or <code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Reflection.MemberInfo,System.Attribute[])\n  id: AddCustomAttributes(System.Type,System.Reflection.MemberInfo,System.Attribute[])\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  langs:\n  - csharp\n  name: AddCustomAttributes(Type,MemberInfo,Attribute[])\n  nameWithType: AttributeTableBuilder.AddCustomAttributes(Type,MemberInfo,Attribute[])\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(Type,MemberInfo,Attribute[])\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Metadata\n  summary: Adds the contents of the provided attributes to this builder.\n  remarks: \"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.  \\n  \\n When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.\"\n  syntax:\n    content: public void AddCustomAttributes (Type ownerType, System.Reflection.MemberInfo member, Attribute[] attributes);\n    parameters:\n    - id: ownerType\n      type: System.Type\n      description: The type that contains the member identified by `member`.\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: The event or property info that the attributes are added to.\n    - id: attributes\n      type: System.Attribute[]\n      description: The attributes that are added to the builder.\n  overload: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ownerType</code>, <code>member</code> or <code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.String,System.Attribute[])\n  id: AddCustomAttributes(System.Type,System.String,System.Attribute[])\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  langs:\n  - csharp\n  name: AddCustomAttributes(Type,String,Attribute[])\n  nameWithType: AttributeTableBuilder.AddCustomAttributes(Type,String,Attribute[])\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(Type,String,Attribute[])\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Metadata\n  summary: Adds the contents of the provided attributes to this builder.\n  remarks: \"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.  \\n  \\n When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.\"\n  syntax:\n    content: public void AddCustomAttributes (Type ownerType, string memberName, Attribute[] attributes);\n    parameters:\n    - id: ownerType\n      type: System.Type\n      description: The type that contains the member identified by `memberName`.\n    - id: memberName\n      type: System.String\n      description: The name of the event or property info that the attributes are added to.\n    - id: attributes\n      type: System.Attribute[]\n      description: The attributes that are added to the builder.\n  overload: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ownerType</code>, <code>memberName</code>, or <code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Windows.DependencyProperty,System.Attribute[])\n  id: AddCustomAttributes(System.Type,System.Windows.DependencyProperty,System.Attribute[])\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  langs:\n  - csharp\n  name: AddCustomAttributes(Type,DependencyProperty,Attribute[])\n  nameWithType: AttributeTableBuilder.AddCustomAttributes(Type,DependencyProperty,Attribute[])\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(Type,DependencyProperty,Attribute[])\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Metadata\n  summary: Adds the contents of the provided attributes to this builder.\n  remarks: \"If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.  \\n  \\n When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.\"\n  syntax:\n    content: public void AddCustomAttributes (Type ownerType, System.Windows.DependencyProperty dp, Attribute[] attributes);\n    parameters:\n    - id: ownerType\n      type: System.Type\n      description: The type that contains the dependency identified by `dp`.\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: A dependency property to add attributes to.\n    - id: attributes\n      type: System.Attribute[]\n      description: The attributes that are added to the builder.\n  overload: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ownerType</code>, <code>dp</code> or <code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable(System.Activities.Presentation.Metadata.AttributeTable)\n  id: AddTable(System.Activities.Presentation.Metadata.AttributeTable)\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  langs:\n  - csharp\n  name: AddTable(AttributeTable)\n  nameWithType: AttributeTableBuilder.AddTable(AttributeTable)\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable(AttributeTable)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Metadata\n  summary: Adds the contents of the provided attribute table to this builder.\n  remarks: If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.\n  syntax:\n    content: public void AddTable (System.Activities.Presentation.Metadata.AttributeTable table);\n    parameters:\n    - id: table\n      type: System.Activities.Presentation.Metadata.AttributeTable\n      description: The source attribute table.\n  overload: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>table</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable\n  id: CreateTable\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  langs:\n  - csharp\n  name: CreateTable()\n  nameWithType: AttributeTableBuilder.CreateTable()\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable()\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Metadata\n  summary: Creates an attribute table that contains all of the attribute definitions provided through <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes*> calls.\n  remarks: \"The table is a snapshot of the current state of the attribute builder; any attributes added by subsequent <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> calls are not included in the table.  \\n  \\n If callback methods were used to declare attributes, those methods will not be evaluated during CreateTable. Instead, the table will contain those callbacks and will evaluate them as needed.\"\n  syntax:\n    content: public System.Activities.Presentation.Metadata.AttributeTable CreateTable ();\n    parameters: []\n    return:\n      type: System.Activities.Presentation.Metadata.AttributeTable\n      description: An <xref href=\"System.Activities.Presentation.Metadata.AttributeTable\"></xref> that can be passed to the metadata store.\n  overload: System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable\n  id: ValidateTable\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  langs:\n  - csharp\n  name: ValidateTable()\n  nameWithType: AttributeTableBuilder.ValidateTable()\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable()\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Metadata\n  summary: Verifies that the attribute table that is being built contains valid attribute information.\n  remarks: Some overrides of <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A>cannot validate that values passed to their parameters represent valid members on classes. ValidateTable verifies that all custom attribute information corresponds to actual members. This method can take a long time to complete and is not recommended unless validation is explicitly needed.\n  syntax:\n    content: public void ValidateTable ();\n    parameters: []\n  overload: System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable*\n  exceptions:\n  - type: System.Activities.Presentation.Metadata.AttributeTableValidationException\n    commentId: T:System.Activities.Presentation.Metadata.AttributeTableValidationException\n    description: the state of the table is invalid.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Activities.Presentation.Metadata.AttributeTableValidationException\n  parent: System.Activities.Presentation.Metadata\n  isExternal: false\n  name: AttributeTableValidationException\n  nameWithType: AttributeTableValidationException\n  fullName: System.Activities.Presentation.Metadata.AttributeTableValidationException\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.#ctor\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AttributeTableBuilder()\n  nameWithType: AttributeTableBuilder.AttributeTableBuilder()\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AttributeTableBuilder()\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback(System.Type,System.Activities.Presentation.Metadata.AttributeCallback)\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AddCallback(Type,AttributeCallback)\n  nameWithType: AttributeTableBuilder.AddCallback(Type,AttributeCallback)\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback(Type,AttributeCallback)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Activities.Presentation.Metadata.AttributeCallback\n  parent: System.Activities.Presentation.Metadata\n  isExternal: false\n  name: AttributeCallback\n  nameWithType: AttributeCallback\n  fullName: System.Activities.Presentation.Metadata.AttributeCallback\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AddCustomAttributes(Type,Attribute[])\n  nameWithType: AttributeTableBuilder.AddCustomAttributes(Type,Attribute[])\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(Type,Attribute[])\n- uid: System.Attribute[]\n  parent: System\n  isExternal: true\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute[]\n  spec.csharp:\n  - uid: System.Attribute\n    name: Attribute\n    nameWithType: Attribute\n    fullName: Attribute[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.ComponentModel.MemberDescriptor,System.Attribute[])\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AddCustomAttributes(Type,MemberDescriptor,Attribute[])\n  nameWithType: AttributeTableBuilder.AddCustomAttributes(Type,MemberDescriptor,Attribute[])\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(Type,MemberDescriptor,Attribute[])\n- uid: System.ComponentModel.MemberDescriptor\n  parent: System.ComponentModel\n  isExternal: false\n  name: MemberDescriptor\n  nameWithType: MemberDescriptor\n  fullName: System.ComponentModel.MemberDescriptor\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Reflection.MemberInfo,System.Attribute[])\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AddCustomAttributes(Type,MemberInfo,Attribute[])\n  nameWithType: AttributeTableBuilder.AddCustomAttributes(Type,MemberInfo,Attribute[])\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(Type,MemberInfo,Attribute[])\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: true\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.String,System.Attribute[])\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AddCustomAttributes(Type,String,Attribute[])\n  nameWithType: AttributeTableBuilder.AddCustomAttributes(Type,String,Attribute[])\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(Type,String,Attribute[])\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Windows.DependencyProperty,System.Attribute[])\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AddCustomAttributes(Type,DependencyProperty,Attribute[])\n  nameWithType: AttributeTableBuilder.AddCustomAttributes(Type,DependencyProperty,Attribute[])\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(Type,DependencyProperty,Attribute[])\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable(System.Activities.Presentation.Metadata.AttributeTable)\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AddTable(AttributeTable)\n  nameWithType: AttributeTableBuilder.AddTable(AttributeTable)\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable(AttributeTable)\n- uid: System.Activities.Presentation.Metadata.AttributeTable\n  parent: System.Activities.Presentation.Metadata\n  isExternal: false\n  name: AttributeTable\n  nameWithType: AttributeTable\n  fullName: System.Activities.Presentation.Metadata.AttributeTable\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: CreateTable()\n  nameWithType: AttributeTableBuilder.CreateTable()\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable()\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: ValidateTable()\n  nameWithType: AttributeTableBuilder.ValidateTable()\n  fullName: System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable()\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.#ctor*\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AttributeTableBuilder\n  nameWithType: AttributeTableBuilder.AttributeTableBuilder\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback*\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AddCallback\n  nameWithType: AttributeTableBuilder.AddCallback\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes*\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AddCustomAttributes\n  nameWithType: AttributeTableBuilder.AddCustomAttributes\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable*\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: AddTable\n  nameWithType: AttributeTableBuilder.AddTable\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable*\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: CreateTable\n  nameWithType: AttributeTableBuilder.CreateTable\n- uid: System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable*\n  parent: System.Activities.Presentation.Metadata.AttributeTableBuilder\n  isExternal: false\n  name: ValidateTable\n  nameWithType: AttributeTableBuilder.ValidateTable\n"}