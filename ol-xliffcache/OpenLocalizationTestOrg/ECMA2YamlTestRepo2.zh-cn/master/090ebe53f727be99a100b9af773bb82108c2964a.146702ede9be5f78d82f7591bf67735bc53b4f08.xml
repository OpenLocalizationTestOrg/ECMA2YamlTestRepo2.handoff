{"nodes":[{"pos":[329,459],"content":"Represents the method that will handle the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkElement.RequestBringIntoView\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> routed event.","needQuote":true,"needEscape":true,"source":"Represents the method that will handle the <xref href=\"System.Windows.FrameworkElement.RequestBringIntoView\"></xref> routed event."},{"pos":[472,2510],"content":"Handling this event is typically only done within elements that support a scrollable region, or otherwise deliberately set their rendering size smaller than the combined desired size of their child element content, and is only done by deliberately handling the event once it has routed upwards in the element tree and has reached the first parent that offers scrolling region support. An existing implementation that handles scrolling regions in a manner that is typically desirable for user controls is <xref:System.Windows.Controls.ScrollViewer>. If you derive from <xref:System.Windows.Controls.ScrollViewer>, you can register a class handler for <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> and supplement the base class handling of the event. You should also consider using or class-handling the class-defined <xref:System.Windows.Controls.ScrollViewer.ScrollChanged> event instead of <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName>. Alternatively, if you create an entirely custom class that does not derive from <xref:System.Windows.Controls.ScrollViewer>, you can still add class handling by calling <xref:System.Windows.EventManager.RegisterClassHandler%2A?displayProperty=fullName> in your class instantiation.  For details on class handling, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md).       Content elements can cause the event to be raised by their content hosts (through calling <xref:System.Windows.FrameworkContentElement.BringIntoView%2A> and raising <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> from the content host). Similarly, you can request logical tree elements to be brought into view with the helper method <xref:System.Windows.LogicalTreeHelper.BringIntoView%2A?displayProperty=fullName>.       A <xref:System.Windows.Controls.ListBox> implements a related but different method <xref:System.Windows.Controls.ListBox.ScrollIntoView%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Handling this event is typically only done within elements that support a scrollable region, or otherwise deliberately set their rendering size smaller than the combined desired size of their child element content, and is only done by deliberately handling the event once it has routed upwards in the element tree and has reached the first parent that offers scrolling region support.","pos":[0,384]},{"content":"An existing implementation that handles scrolling regions in a manner that is typically desirable for user controls is &lt;xref:System.Windows.Controls.ScrollViewer&gt;.","pos":[385,548],"source":" An existing implementation that handles scrolling regions in a manner that is typically desirable for user controls is <xref:System.Windows.Controls.ScrollViewer>."},{"content":"If you derive from &lt;xref:System.Windows.Controls.ScrollViewer&gt;, you can register a class handler for &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName&gt; and supplement the base class handling of the event.","pos":[549,787],"source":" If you derive from <xref:System.Windows.Controls.ScrollViewer>, you can register a class handler for <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> and supplement the base class handling of the event."},{"content":"You should also consider using or class-handling the class-defined &lt;xref:System.Windows.Controls.ScrollViewer.ScrollChanged&gt; event instead of &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName&gt;.","pos":[788,1015],"source":" You should also consider using or class-handling the class-defined <xref:System.Windows.Controls.ScrollViewer.ScrollChanged> event instead of <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName>."},{"content":"Alternatively, if you create an entirely custom class that does not derive from &lt;xref:System.Windows.Controls.ScrollViewer&gt;, you can still add class handling by calling &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A?displayProperty=fullName&gt; in your class instantiation.","pos":[1016,1297],"source":" Alternatively, if you create an entirely custom class that does not derive from <xref:System.Windows.Controls.ScrollViewer>, you can still add class handling by calling <xref:System.Windows.EventManager.RegisterClassHandler%2A?displayProperty=fullName> in your class instantiation."},{"content":"For details on class handling, see <bpt id=\"p1\">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1299,1428],"source":"  For details on class handling, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md)."},{"content":"Content elements can cause the event to be raised by their content hosts (through calling &lt;xref:System.Windows.FrameworkContentElement.BringIntoView%2A&gt; and raising &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName&gt; from the content host).","pos":[1435,1708],"source":"       Content elements can cause the event to be raised by their content hosts (through calling <xref:System.Windows.FrameworkContentElement.BringIntoView%2A> and raising <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> from the content host)."},{"content":"Similarly, you can request logical tree elements to be brought into view with the helper method &lt;xref:System.Windows.LogicalTreeHelper.BringIntoView%2A?displayProperty=fullName&gt;.","pos":[1709,1887],"source":" Similarly, you can request logical tree elements to be brought into view with the helper method <xref:System.Windows.LogicalTreeHelper.BringIntoView%2A?displayProperty=fullName>."},{"content":"A &lt;xref:System.Windows.Controls.ListBox&gt; implements a related but different method &lt;xref:System.Windows.Controls.ListBox.ScrollIntoView%2A&gt;.","pos":[1894,2034],"source":"       A <xref:System.Windows.Controls.ListBox> implements a related but different method <xref:System.Windows.Controls.ListBox.ScrollIntoView%2A>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.RequestBringIntoViewEventHandler\n  id: RequestBringIntoViewEventHandler\n  langs:\n  - csharp\n  name: RequestBringIntoViewEventHandler\n  nameWithType: RequestBringIntoViewEventHandler\n  fullName: System.Windows.RequestBringIntoViewEventHandler\n  type: Delegate\n  summary: Represents the method that will handle the <xref href=\"System.Windows.FrameworkElement.RequestBringIntoView\"></xref> routed event.\n  remarks: \"Handling this event is typically only done within elements that support a scrollable region, or otherwise deliberately set their rendering size smaller than the combined desired size of their child element content, and is only done by deliberately handling the event once it has routed upwards in the element tree and has reached the first parent that offers scrolling region support. An existing implementation that handles scrolling regions in a manner that is typically desirable for user controls is <xref:System.Windows.Controls.ScrollViewer>. If you derive from <xref:System.Windows.Controls.ScrollViewer>, you can register a class handler for <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> and supplement the base class handling of the event. You should also consider using or class-handling the class-defined <xref:System.Windows.Controls.ScrollViewer.ScrollChanged> event instead of <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName>. Alternatively, if you create an entirely custom class that does not derive from <xref:System.Windows.Controls.ScrollViewer>, you can still add class handling by calling <xref:System.Windows.EventManager.RegisterClassHandler%2A?displayProperty=fullName> in your class instantiation.  For details on class handling, see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Content elements can cause the event to be raised by their content hosts (through calling <xref:System.Windows.FrameworkContentElement.BringIntoView%2A> and raising <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> from the content host). Similarly, you can request logical tree elements to be brought into view with the helper method <xref:System.Windows.LogicalTreeHelper.BringIntoView%2A?displayProperty=fullName>.  \\n  \\n A <xref:System.Windows.Controls.ListBox> implements a related but different method <xref:System.Windows.Controls.ListBox.ScrollIntoView%2A>.\"\n  syntax:\n    content: public delegate void RequestBringIntoViewEventHandler(object sender, RequestBringIntoViewEventArgs e);\n  inheritance:\n  - System.Delegate\n  platform:\n  - net462\nreferences:\n- uid: System.Delegate\n  isExternal: false\n  name: System.Delegate\n"}