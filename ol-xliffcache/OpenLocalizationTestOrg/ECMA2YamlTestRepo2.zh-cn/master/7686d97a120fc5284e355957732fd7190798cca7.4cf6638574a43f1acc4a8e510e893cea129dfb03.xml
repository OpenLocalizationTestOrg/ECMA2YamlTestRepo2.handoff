{"nodes":[{"pos":[408,504],"content":"Specifies whether a service class supports single-threaded or multi-threaded modes of operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies whether a service class supports single-threaded or multi-threaded modes of operation.","pos":[0,96]}]},{"pos":[517,1256],"content":"ConcurrencyMode is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation. A single-threaded operation can be either reentrant or non-reentrant.       The following table shows when [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] permits an operation to be invoked while another one is in progress, depending upon the ConcurrencyMode.      |ConcurrencyMode Value|Can a new operation be invoked?|   |---------------------------|-------------------------------------|   |Single|Never.|   |Reentrant|Only while invoking another service or a callback.|   |Multiple|Always.|","needQuote":false,"needEscape":true,"nodes":[{"content":"ConcurrencyMode is used in conjunction with the &lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A&gt; property to specify whether a service class supports single-threaded or multi-threaded modes of operation.","pos":[0,225],"source":"ConcurrencyMode is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation."},{"content":"A single-threaded operation can be either reentrant or non-reentrant.","pos":[226,295]},{"content":"The following table shows when <ph id=\"ph1\">[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]</ph> permits an operation to be invoked while another one is in progress, depending upon the ConcurrencyMode.","pos":[302,496],"source":"       The following table shows when [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] permits an operation to be invoked while another one is in progress, depending upon the ConcurrencyMode."},{"content":"|ConcurrencyMode Value|Can a new operation be invoked?|   |---------------------------|-------------------------------------|   |Single|Never.|   |Reentrant|Only while invoking another service or a callback.|   |Multiple|Always.|","pos":[502,731]}]},{"pos":[2187,2400],"content":"The service instance is multi-threaded. No synchronization guarantees are made. Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.","needQuote":true,"needEscape":true,"nodes":[{"content":"The service instance is multi-threaded. No synchronization guarantees are made. Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.","pos":[0,213],"nodes":[{"content":"The service instance is multi-threaded.","pos":[0,39]},{"content":"No synchronization guarantees are made.","pos":[40,79]},{"content":"Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.","pos":[80,213]}]}]},{"pos":[2512,2524],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2914,3611],"content":"The service instance is single-threaded and accepts reentrant calls. The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts. Note that the service instance is unlocked only by calling another service over a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] channel. In this case, the called service can reenter the first service via a callback. If the first service is not reentrant, the sequence of calls results in a deadlock. For details, see <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The service instance is single-threaded and accepts reentrant calls.","pos":[0,68]},{"content":"The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts.","pos":[69,297]},{"content":"Note that the service instance is unlocked only by calling another service over a <ph id=\"ph1\">[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]</ph> channel.","pos":[298,447],"source":" Note that the service instance is unlocked only by calling another service over a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] channel."},{"content":"In this case, the called service can reenter the first service via a callback.","pos":[448,526]},{"content":"If the first service is not reentrant, the sequence of calls results in a deadlock.","pos":[527,610]},{"content":"For details, see &lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode*&gt;.","pos":[611,697],"source":" For details, see <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode*>."}]},{"pos":[3724,3736],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4111,4496],"content":"The service instance is single-threaded and does not accept reentrant calls. If the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode*> property is <xref href=\"System.ServiceModel.InstanceContextMode\"></xref>, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.","needQuote":true,"needEscape":true,"nodes":[{"content":"The service instance is single-threaded and does not accept reentrant calls.","pos":[0,76]},{"content":"If the &lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode*&gt; property is <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.InstanceContextMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.","pos":[77,385],"source":" If the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode*> property is <xref href=\"System.ServiceModel.InstanceContextMode\"></xref>, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out."}]},{"pos":[4606,4618],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.ConcurrencyMode\n  id: ConcurrencyMode\n  children:\n  - System.ServiceModel.ConcurrencyMode.Multiple\n  - System.ServiceModel.ConcurrencyMode.Reentrant\n  - System.ServiceModel.ConcurrencyMode.Single\n  langs:\n  - csharp\n  name: ConcurrencyMode\n  nameWithType: ConcurrencyMode\n  fullName: System.ServiceModel.ConcurrencyMode\n  type: Enum\n  summary: Specifies whether a service class supports single-threaded or multi-threaded modes of operation.\n  remarks: \"ConcurrencyMode is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation. A single-threaded operation can be either reentrant or non-reentrant.  \\n  \\n The following table shows when [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] permits an operation to be invoked while another one is in progress, depending upon the ConcurrencyMode.  \\n  \\n|ConcurrencyMode Value|Can a new operation be invoked?|  \\n|---------------------------|-------------------------------------|  \\n|Single|Never.|  \\n|Reentrant|Only while invoking another service or a callback.|  \\n|Multiple|Always.|\"\n  example:\n  - \"The following code example demonstrates the different between using Single, Reentrant, and Multiple. This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] makes and what that means for your operation code.  \\n  \\n [!code-cs[C_BestPractices-Concurrency#1](~/add/codesnippet/csharp/reentrantandmultiple/reentrantandmultiple.cs#1)]\"\n  syntax:\n    content: public enum ConcurrencyMode\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.ServiceModel.ConcurrencyMode.Multiple\n  id: Multiple\n  parent: System.ServiceModel.ConcurrencyMode\n  langs:\n  - csharp\n  name: Multiple\n  nameWithType: ConcurrencyMode.Multiple\n  fullName: System.ServiceModel.ConcurrencyMode.Multiple\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: The service instance is multi-threaded. No synchronization guarantees are made. Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.\n  syntax:\n    content: Multiple\n    return:\n      type: System.ServiceModel.ConcurrencyMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.ConcurrencyMode.Reentrant\n  id: Reentrant\n  parent: System.ServiceModel.ConcurrencyMode\n  langs:\n  - csharp\n  name: Reentrant\n  nameWithType: ConcurrencyMode.Reentrant\n  fullName: System.ServiceModel.ConcurrencyMode.Reentrant\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: The service instance is single-threaded and accepts reentrant calls. The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts. Note that the service instance is unlocked only by calling another service over a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] channel. In this case, the called service can reenter the first service via a callback. If the first service is not reentrant, the sequence of calls results in a deadlock. For details, see <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode*>.\n  syntax:\n    content: Reentrant\n    return:\n      type: System.ServiceModel.ConcurrencyMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.ConcurrencyMode.Single\n  id: Single\n  parent: System.ServiceModel.ConcurrencyMode\n  langs:\n  - csharp\n  name: Single\n  nameWithType: ConcurrencyMode.Single\n  fullName: System.ServiceModel.ConcurrencyMode.Single\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: The service instance is single-threaded and does not accept reentrant calls. If the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode*> property is <xref href=\"System.ServiceModel.InstanceContextMode\"></xref>, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.\n  syntax:\n    content: Single\n    return:\n      type: System.ServiceModel.ConcurrencyMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.ServiceModel.ConcurrencyMode.Multiple\n  parent: System.ServiceModel.ConcurrencyMode\n  isExternal: false\n  name: Multiple\n  nameWithType: ConcurrencyMode.Multiple\n  fullName: System.ServiceModel.ConcurrencyMode.Multiple\n- uid: System.ServiceModel.ConcurrencyMode\n  parent: System.ServiceModel\n  isExternal: false\n  name: ConcurrencyMode\n  nameWithType: ConcurrencyMode\n  fullName: System.ServiceModel.ConcurrencyMode\n- uid: System.ServiceModel.ConcurrencyMode.Reentrant\n  parent: System.ServiceModel.ConcurrencyMode\n  isExternal: false\n  name: Reentrant\n  nameWithType: ConcurrencyMode.Reentrant\n  fullName: System.ServiceModel.ConcurrencyMode.Reentrant\n- uid: System.ServiceModel.ConcurrencyMode.Single\n  parent: System.ServiceModel.ConcurrencyMode\n  isExternal: false\n  name: Single\n  nameWithType: ConcurrencyMode.Single\n  fullName: System.ServiceModel.ConcurrencyMode.Single\n"}