{"nodes":[{"pos":[2202,2333],"content":"Configures the ASP.NET process model settings on an Internet Information Services (IIS) Web server. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Configures the ASP.NET process model settings on an Internet Information Services (IIS) Web server. This class cannot be inherited.","pos":[0,131],"nodes":[{"content":"Configures the ASP.NET process model settings on an Internet Information Services (IIS) Web server.","pos":[0,99]},{"content":"This class cannot be inherited.","pos":[100,131]}]}]},{"pos":[2346,3663],"content":"The ProcessModelSection class provides a way to programmatically access and modify the `processModel` section of a configuration file.       The ProcessModelSection class controls various aspects of the ASP.NET worker process, including its lifetime, the number of instances created at a time, what security identity it runs under, and the size of the CLR thread pool to service requests.       When ASP.NET is running under IIS 6 in native mode, ASP.NET uses the IIS 6 process model and ignores most settings in this section. Use the IIS administration user interface (UI) to configure those properties. ASP.NET still uses the following properties, which can be configured through the configuration file: <xref:System.Web.Configuration.ProcessModelSection.RequestQueueLimit%2A>, <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A>, <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A>, <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A>, <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A>, and <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A>.       The `processModel` section cannot be encrypted using the protected-configuration feature or tools because it is consumed by the ASP.NET ISAPI extension.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ProcessModelSection class provides a way to programmatically access and modify the <ph id=\"ph1\">`processModel`</ph> section of a configuration file.","pos":[0,134],"source":"The ProcessModelSection class provides a way to programmatically access and modify the `processModel` section of a configuration file."},{"content":"The ProcessModelSection class controls various aspects of the ASP.NET worker process, including its lifetime, the number of instances created at a time, what security identity it runs under, and the size of the CLR thread pool to service requests.","pos":[141,388]},{"content":"When ASP.NET is running under IIS 6 in native mode, ASP.NET uses the IIS 6 process model and ignores most settings in this section.","pos":[395,526]},{"content":"Use the IIS administration user interface (UI) to configure those properties.","pos":[527,604]},{"content":"ASP.NET still uses the following properties, which can be configured through the configuration file: &lt;xref:System.Web.Configuration.ProcessModelSection.RequestQueueLimit%2A&gt;, &lt;xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A&gt;, &lt;xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A&gt;, &lt;xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A&gt;, &lt;xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A&gt;, and &lt;xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A&gt;.","pos":[605,1152],"source":" ASP.NET still uses the following properties, which can be configured through the configuration file: <xref:System.Web.Configuration.ProcessModelSection.RequestQueueLimit%2A>, <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A>, <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A>, <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A>, <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A>, and <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A>."},{"content":"The <ph id=\"ph1\">`processModel`</ph> section cannot be encrypted using the protected-configuration feature or tools because it is consumed by the ASP.NET ISAPI extension.","pos":[1159,1311],"source":"       The `processModel` section cannot be encrypted using the protected-configuration feature or tools because it is consumed by the ASP.NET ISAPI extension."}]},{"pos":[9413,9542],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Configuration.ProcessModelSection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using default settings.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Configuration.ProcessModelSection\"></xref> class using default settings."},{"pos":[9554,9856],"content":"The ProcessModelSection constructor is not intended to be used directly from your code. It is called by the ASP.NET configuration system. You obtain an instance of the <xref:System.Web.Configuration.ProcessModelSection> class by using the <xref:System.Configuration.Configuration.GetSection%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ProcessModelSection constructor is not intended to be used directly from your code. It is called by the ASP.NET configuration system. You obtain an instance of the <xref:System.Web.Configuration.ProcessModelSection> class by using the <xref:System.Configuration.Configuration.GetSection%2A> method.","pos":[0,302],"nodes":[{"content":"The ProcessModelSection constructor is not intended to be used directly from your code.","pos":[0,87]},{"content":"It is called by the ASP.NET configuration system.","pos":[88,137]},{"content":"You obtain an instance of the &lt;xref:System.Web.Configuration.ProcessModelSection&gt; class by using the &lt;xref:System.Configuration.Configuration.GetSection%2A&gt; method.","pos":[138,302],"source":" You obtain an instance of the <xref:System.Web.Configuration.ProcessModelSection> class by using the <xref:System.Configuration.Configuration.GetSection%2A> method."}]}]},{"pos":[10418,10541],"content":"Gets or sets a value indicating whether ASP.NET performance settings are automatically configured for ASP.NET applications.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether ASP.NET performance settings are automatically configured for ASP.NET applications.","pos":[0,123]}]},{"pos":[10554,11081],"content":"If the AutoConfig value is set to `false`, explicit Web.config values are used to determine performance configuration for the ASP.NET application. If the AutoConfig value is set to `true`, the performance settings are automatically configured for the ASP.NET application.       The AutoConfig value is explicitly set to `true` in the Machine.config file. The default code value is set to `false`.  If the AutoConfig value is removed from Machine.config, the explicit settings are used instead of the auto-configured settings.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the AutoConfig value is set to <ph id=\"ph1\">`false`</ph>, explicit Web.config values are used to determine performance configuration for the ASP.NET application.","pos":[0,146],"source":"If the AutoConfig value is set to `false`, explicit Web.config values are used to determine performance configuration for the ASP.NET application."},{"content":"If the AutoConfig value is set to <ph id=\"ph1\">`true`</ph>, the performance settings are automatically configured for the ASP.NET application.","pos":[147,271],"source":" If the AutoConfig value is set to `true`, the performance settings are automatically configured for the ASP.NET application."},{"content":"The AutoConfig value is explicitly set to <ph id=\"ph1\">`true`</ph> in the Machine.config file.","pos":[278,354],"source":"       The AutoConfig value is explicitly set to `true` in the Machine.config file."},{"content":"The default code value is set to <ph id=\"ph1\">`false`</ph>.","pos":[355,396],"source":" The default code value is set to `false`."},{"content":"If the AutoConfig value is removed from Machine.config, the explicit settings are used instead of the auto-configured settings.","pos":[398,525]}]},{"pos":[11201,11500],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if performance settings are automatically configured for ASP.NET applications; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if performance settings are automatically configured for ASP.NET applications; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,214],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if performance settings are automatically configured for ASP.NET applications; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[215,299],"source":" The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[12044,12116],"content":"Gets or sets a value indicating how long a request is left in the queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating how long a request is left in the queue.","pos":[0,72]}]},{"pos":[12129,12420],"content":"This property specifies how long a request is queued before ASP.NET performs a client connected check.      > [!NOTE] >  If the interval expires while the request is still queued, a client connected check is done before passing the request over to the ASP.NET worker process for handling.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property specifies how long a request is queued before ASP.NET performs a client connected check.","pos":[0,102]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the interval expires while the request is still queued, a client connected check is done before passing the request over to the ASP.NET worker process for handling.","pos":[108,288],"source":"      > [!NOTE] >  If the interval expires while the request is still queued, a client connected check is done before passing the request over to the ASP.NET worker process for handling."}]},{"pos":[12920,13011],"content":"A <xref:System.TimeSpan> value indicating the queuing time. The default value is 5 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.TimeSpan> value indicating the queuing time. The default value is 5 seconds.","pos":[0,91],"nodes":[{"content":"A &lt;xref:System.TimeSpan&gt; value indicating the queuing time.","pos":[0,59],"source":"A <xref:System.TimeSpan> value indicating the queuing time."},{"content":"The default value is 5 seconds.","pos":[60,91]}]}]},{"pos":[13575,13653],"content":"Gets or sets a value indicating the level of authentication for DCOM security.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the level of authentication for DCOM security.","pos":[0,78]}]},{"pos":[13665,14142],"content":"When this property value is set to <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel>, DCOM determines the authentication level using its normal security-negotiation algorithm. The default value assigned to this property, as specified in the Machine.config file, is <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel>. In this case, DCOM authenticates the credentials of the client only when the client establishes a relationship with the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this property value is set to <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel>, DCOM determines the authentication level using its normal security-negotiation algorithm. The default value assigned to this property, as specified in the Machine.config file, is <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel>. In this case, DCOM authenticates the credentials of the client only when the client establishes a relationship with the server.","pos":[0,477],"nodes":[{"content":"When this property value is set to &lt;xref:System.Web.Configuration.ProcessModelComAuthenticationLevel&gt;, DCOM determines the authentication level using its normal security-negotiation algorithm.","pos":[0,192],"source":"When this property value is set to <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel>, DCOM determines the authentication level using its normal security-negotiation algorithm."},{"content":"The default value assigned to this property, as specified in the Machine.config file, is &lt;xref:System.Web.Configuration.ProcessModelComAuthenticationLevel&gt;.","pos":[193,349],"source":" The default value assigned to this property, as specified in the Machine.config file, is <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel>."},{"content":"In this case, DCOM authenticates the credentials of the client only when the client establishes a relationship with the server.","pos":[350,477]}]}]},{"pos":[14729,14931],"content":"One of the <xref href=\"System.Web.Configuration.ProcessModelComAuthenticationLevel\"></xref> values. The default value is <xref href=\"System.Web.Configuration.ProcessModelComAuthenticationLevel\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Configuration.ProcessModelComAuthenticationLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,99],"source":"One of the <xref href=\"System.Web.Configuration.ProcessModelComAuthenticationLevel\"></xref> values."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Web.Configuration.ProcessModelComAuthenticationLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[100,202],"source":" The default value is <xref href=\"System.Web.Configuration.ProcessModelComAuthenticationLevel\"></xref>."}]},{"pos":[15492,15569],"content":"Gets or sets a value indicating the level of authentication for COM security.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the level of authentication for COM security.","pos":[0,77]}]},{"pos":[15581,16044],"content":"When this property value is set to <xref:System.Web.Configuration.ProcessModelComImpersonationLevel>, DCOM determines the impersonation level using its normal security-negotiation algorithm. The default value assigned to this property, as specified in the Machine.config file, is <xref:System.Web.Configuration.ProcessModelComImpersonationLevel>. In this case, the server process can impersonate the client's security context while acting on behalf of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this property value is set to <xref:System.Web.Configuration.ProcessModelComImpersonationLevel>, DCOM determines the impersonation level using its normal security-negotiation algorithm. The default value assigned to this property, as specified in the Machine.config file, is <xref:System.Web.Configuration.ProcessModelComImpersonationLevel>. In this case, the server process can impersonate the client's security context while acting on behalf of the client.","pos":[0,463],"nodes":[{"content":"When this property value is set to &lt;xref:System.Web.Configuration.ProcessModelComImpersonationLevel&gt;, DCOM determines the impersonation level using its normal security-negotiation algorithm.","pos":[0,190],"source":"When this property value is set to <xref:System.Web.Configuration.ProcessModelComImpersonationLevel>, DCOM determines the impersonation level using its normal security-negotiation algorithm."},{"content":"The default value assigned to this property, as specified in the Machine.config file, is &lt;xref:System.Web.Configuration.ProcessModelComImpersonationLevel&gt;.","pos":[191,346],"source":" The default value assigned to this property, as specified in the Machine.config file, is <xref:System.Web.Configuration.ProcessModelComImpersonationLevel>."},{"content":"In this case, the server process can impersonate the client's security context while acting on behalf of the client.","pos":[347,463]}]}]},{"pos":[16627,16827],"content":"One of the <xref href=\"System.Web.Configuration.ProcessModelComImpersonationLevel\"></xref> values. The default value is <xref href=\"System.Web.Configuration.ProcessModelComImpersonationLevel\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Configuration.ProcessModelComImpersonationLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,98],"source":"One of the <xref href=\"System.Web.Configuration.ProcessModelComImpersonationLevel\"></xref> values."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Web.Configuration.ProcessModelComImpersonationLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[99,200],"source":" The default value is <xref href=\"System.Web.Configuration.ProcessModelComImpersonationLevel\"></xref>."}]},{"pos":[17317,17431],"content":"Gets or sets a value indicating which processors on a multiprocessor server are eligible to run ASP.NET processes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating which processors on a multiprocessor server are eligible to run ASP.NET processes.","pos":[0,114]}]},{"pos":[17443,18038],"content":"The CpuMask value specifies a bit pattern that indicates the CPUs eligible to run ASP.NET threads. If the <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> property is set to `true`, the CpuMask limits worker processes to the number of eligible CPUs. The maximum allowed number of worker processes is equal to the number of CPUs. By default, all CPUs are enabled and ASP.NET launches one process for each CPU. If the <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> property is set to `false`, the CpuMask attribute is ignored and only one worker process will run.","needQuote":true,"needEscape":true,"nodes":[{"content":"The CpuMask value specifies a bit pattern that indicates the CPUs eligible to run ASP.NET threads.","pos":[0,98]},{"content":"If the &lt;xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A&gt; property is set to <ph id=\"ph1\">`true`</ph>, the CpuMask limits worker processes to the number of eligible CPUs.","pos":[99,265],"source":" If the <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> property is set to `true`, the CpuMask limits worker processes to the number of eligible CPUs."},{"content":"The maximum allowed number of worker processes is equal to the number of CPUs.","pos":[266,344]},{"content":"By default, all CPUs are enabled and ASP.NET launches one process for each CPU.","pos":[345,424]},{"content":"If the &lt;xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A&gt; property is set to <ph id=\"ph1\">`false`</ph>, the CpuMask attribute is ignored and only one worker process will run.","pos":[425,595],"source":" If the <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> property is set to `false`, the CpuMask attribute is ignored and only one worker process will run."}]},{"pos":[18492,18574],"content":"The number representing the bit pattern to apply. The default value is 0xFFFFFFFF.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number representing the bit pattern to apply. The default value is 0xFFFFFFFF.","pos":[0,82],"nodes":[{"content":"The number representing the bit pattern to apply.","pos":[0,49]},{"content":"The default value is 0xFFFFFFFF.","pos":[50,82]}]}]},{"pos":[19289,19301],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19780,19849],"content":"Gets or sets a value indicating whether the process model is enabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the process model is enabled.","pos":[0,69]}]},{"pos":[19862,20369],"content":"The Enable property specifies whether ASP.NET is hosted in an external worker process. If Enable is `true`, ASP.NET is hosted in an external worker process; otherwise, it runs directly in Inetinfo.exe.      > [!NOTE] >  Running ASP.NET in Inetinfo.exe is not recommended, because this involves running the application in the Local System security context. When ASP.NET runs in Internet Information Services (IIS) 6 native mode, this setting is ignored, so there is usually no reason to set it to `false`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Enable property specifies whether ASP.NET is hosted in an external worker process.","pos":[0,86]},{"content":"If Enable is <ph id=\"ph1\">`true`</ph>, ASP.NET is hosted in an external worker process; otherwise, it runs directly in Inetinfo.exe.","pos":[87,201],"source":" If Enable is `true`, ASP.NET is hosted in an external worker process; otherwise, it runs directly in Inetinfo.exe."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Running ASP.NET in Inetinfo.exe is not recommended, because this involves running the application in the Local System security context.","pos":[207,355],"source":"      > [!NOTE] >  Running ASP.NET in Inetinfo.exe is not recommended, because this involves running the application in the Local System security context."},{"content":"When ASP.NET runs in Internet Information Services (IIS) 6 native mode, this setting is ignored, so there is usually no reason to set it to <ph id=\"ph1\">`false`</ph>.","pos":[356,504],"source":" When ASP.NET runs in Internet Information Services (IIS) 6 native mode, this setting is ignored, so there is usually no reason to set it to `false`."}]},{"pos":[20821,21072],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the process model is enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the process model is enabled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,168],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the process model is enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[169,251],"source":" The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[21567,21682],"content":"Gets or sets a value indicating the period of inactivity after which ASP.NET automatically ends the worker process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the period of inactivity after which ASP.NET automatically ends the worker process.","pos":[0,115]}]},{"pos":[21695,22111],"content":"The worker process is restarted (bounced) when the IdleTimeout property value is reached. By default, only two conditions cause the process to bounce: the process exceeds the allowed memory limit, or the process exceeds the allowed number of requests that can be queued. You can add other conditions to the default ones. For example, you can use the IdleTimeout property to limit the time the worker process is idle.","needQuote":false,"needEscape":true,"nodes":[{"content":"The worker process is restarted (bounced) when the IdleTimeout property value is reached. By default, only two conditions cause the process to bounce: the process exceeds the allowed memory limit, or the process exceeds the allowed number of requests that can be queued. You can add other conditions to the default ones. For example, you can use the IdleTimeout property to limit the time the worker process is idle.","pos":[0,416],"nodes":[{"content":"The worker process is restarted (bounced) when the IdleTimeout property value is reached.","pos":[0,89]},{"content":"By default, only two conditions cause the process to bounce: the process exceeds the allowed memory limit, or the process exceeds the allowed number of requests that can be queued.","pos":[90,270]},{"content":"You can add other conditions to the default ones.","pos":[271,320]},{"content":"For example, you can use the IdleTimeout property to limit the time the worker process is idle.","pos":[321,416]}]}]},{"pos":[22580,22712],"content":"A <xref:System.TimeSpan> value indicating the idle time. The default value is Infinite, which corresponds to <xref:System.TimeSpan>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.TimeSpan> value indicating the idle time. The default value is Infinite, which corresponds to <xref:System.TimeSpan>.","pos":[0,132],"nodes":[{"content":"A &lt;xref:System.TimeSpan&gt; value indicating the idle time.","pos":[0,56],"source":"A <xref:System.TimeSpan> value indicating the idle time."},{"content":"The default value is Infinite, which corresponds to &lt;xref:System.TimeSpan&gt;.","pos":[57,132],"source":" The default value is Infinite, which corresponds to <xref:System.TimeSpan>."}]}]},{"pos":[23197,23275],"content":"Gets or sets a value indicating the event types to be logged to the event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the event types to be logged to the event log.","pos":[0,78]}]},{"pos":[23287,23531],"content":"By using this property correctly, you can filter the errors the system can log. After you have an idea of the application's malfunctions or bottlenecks, you might want to devise a strategy that narrows the range of errors you are interested in.","needQuote":true,"needEscape":true,"nodes":[{"content":"By using this property correctly, you can filter the errors the system can log. After you have an idea of the application's malfunctions or bottlenecks, you might want to devise a strategy that narrows the range of errors you are interested in.","pos":[0,244],"nodes":[{"content":"By using this property correctly, you can filter the errors the system can log.","pos":[0,79]},{"content":"After you have an idea of the application's malfunctions or bottlenecks, you might want to devise a strategy that narrows the range of errors you are interested in.","pos":[80,244]}]}]},{"pos":[24062,24236],"content":"One of the <xref href=\"System.Web.Configuration.ProcessModelLogLevel\"></xref> values. The default value is <xref href=\"System.Web.Configuration.ProcessModelLogLevel\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Configuration.ProcessModelLogLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,85],"source":"One of the <xref href=\"System.Web.Configuration.ProcessModelLogLevel\"></xref> values."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Web.Configuration.ProcessModelLogLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[86,174],"source":" The default value is <xref href=\"System.Web.Configuration.ProcessModelLogLevel\"></xref>."}]},{"pos":[24743,24821],"content":"Gets or sets the maximum allowed number of application domains in one process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum allowed number of application domains in one process.","pos":[0,78]}]},{"pos":[24833,24963],"content":"If the MaxAppDomains threshold is exceeded, the least-used application domain is shut down if a new application domain must start.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the MaxAppDomains threshold is exceeded, the least-used application domain is shut down if a new application domain must start.","pos":[0,130]}]},{"pos":[25429,25494],"content":"The maximum allowed number of application domains in one process.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum allowed number of application domains in one process.","pos":[0,65]}]},{"pos":[26001,26098],"content":"Gets or sets a value indicating the maximum number of I/O threads per CPU in the CLR thread pool.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the maximum number of I/O threads per CPU in the CLR thread pool.","pos":[0,97]}]},{"pos":[26111,27268],"content":"The value of MaxIOThreads must be equal to or greater than the <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> setting in the `httpRuntime` configuration section.       You can have some control over the CPU utilization by setting the number of worker threads and I/O threads, using the <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A> property and the MaxIOThreads property respectively.       The difference between the two types of threads is that the latter are bound to I/O objects, such as a stream or a pipe, and the former are traditional unrestricted threads. For Internet Information Services (IIS) version 6.0 and later, ASP.NET processes requests on worker threads. This is because ASP.NET is integrated within IIS.       These threads are obtained from the process-wide CLR thread pool belonging to an application.      > [!NOTE] >  Usually the default values for the allowed threads are sufficient to keep the CPU utilization high. If for some reason your application is slow, perhaps waiting for external resources, you could try to increase the number of threads to a value less than 100.","needQuote":false,"needEscape":true,"nodes":[{"content":"The value of MaxIOThreads must be equal to or greater than the &lt;xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A&gt; setting in the <ph id=\"ph1\">`httpRuntime`</ph> configuration section.","pos":[0,183],"source":"The value of MaxIOThreads must be equal to or greater than the <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> setting in the `httpRuntime` configuration section."},{"content":"You can have some control over the CPU utilization by setting the number of worker threads and I/O threads, using the &lt;xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A&gt; property and the MaxIOThreads property respectively.","pos":[190,432],"source":"       You can have some control over the CPU utilization by setting the number of worker threads and I/O threads, using the <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A> property and the MaxIOThreads property respectively."},{"content":"The difference between the two types of threads is that the latter are bound to I/O objects, such as a stream or a pipe, and the former are traditional unrestricted threads.","pos":[439,612]},{"content":"For Internet Information Services (IIS) version 6.0 and later, ASP.NET processes requests on worker threads.","pos":[613,721]},{"content":"This is because ASP.NET is integrated within IIS.","pos":[722,771]},{"content":"These threads are obtained from the process-wide CLR thread pool belonging to an application.","pos":[778,871]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Usually the default values for the allowed threads are sufficient to keep the CPU utilization high.","pos":[877,989],"source":"      > [!NOTE] >  Usually the default values for the allowed threads are sufficient to keep the CPU utilization high."},{"content":"If for some reason your application is slow, perhaps waiting for external resources, you could try to increase the number of threads to a value less than 100.","pos":[990,1148]}]},{"pos":[27731,27780],"content":"The maximum number of threads. The default is 20.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of threads. The default is 20.","pos":[0,49],"nodes":[{"content":"The maximum number of threads.","pos":[0,30]},{"content":"The default is 20.","pos":[31,49]}]}]},{"pos":[28306,28406],"content":"Gets or sets a value indicating the maximum amount of worker threads per CPU in the CLR thread pool.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the maximum amount of worker threads per CPU in the CLR thread pool.","pos":[0,100]}]},{"pos":[28419,29583],"content":"The value of MaxWorkerThreads must be equal to or greater than the <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> setting in the `httpRuntime` configuration section.       You can have some control over the CPU utilization by setting the number of worker threads and I/O threads, using the MaxWorkerThreads property and, the <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A> property, respectively.       The difference between the two types of threads is that the latter are bound to I/O objects, such as a stream or a pipe, and the former are traditional unrestricted threads. For Internet Information Services (IIS) version 6.0 and higher, ASP.NET processes requests on worker threads. This is because ASP.NET is integrated within IIS.       These threads are obtained from the process-wide CLR thread pool belonging to an application.      > [!NOTE] >  Usually the default values for the allowed threads are sufficient to keep the CPU utilization high. If for some reason your application is slow, perhaps waiting for external resources, you could try to increase the number of threads to a value less than 100.","needQuote":false,"needEscape":true,"nodes":[{"content":"The value of MaxWorkerThreads must be equal to or greater than the &lt;xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A&gt; setting in the <ph id=\"ph1\">`httpRuntime`</ph> configuration section.","pos":[0,187],"source":"The value of MaxWorkerThreads must be equal to or greater than the <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> setting in the `httpRuntime` configuration section."},{"content":"You can have some control over the CPU utilization by setting the number of worker threads and I/O threads, using the MaxWorkerThreads property and, the &lt;xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A&gt; property, respectively.","pos":[194,438],"source":"       You can have some control over the CPU utilization by setting the number of worker threads and I/O threads, using the MaxWorkerThreads property and, the <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A> property, respectively."},{"content":"The difference between the two types of threads is that the latter are bound to I/O objects, such as a stream or a pipe, and the former are traditional unrestricted threads.","pos":[445,618]},{"content":"For Internet Information Services (IIS) version 6.0 and higher, ASP.NET processes requests on worker threads.","pos":[619,728]},{"content":"This is because ASP.NET is integrated within IIS.","pos":[729,778]},{"content":"These threads are obtained from the process-wide CLR thread pool belonging to an application.","pos":[785,878]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Usually the default values for the allowed threads are sufficient to keep the CPU utilization high.","pos":[884,996],"source":"      > [!NOTE] >  Usually the default values for the allowed threads are sufficient to keep the CPU utilization high."},{"content":"If for some reason your application is slow, perhaps waiting for external resources, you could try to increase the number of threads to a value less than 100.","pos":[997,1155]}]},{"pos":[30052,30101],"content":"The maximum number of threads. The default is 20.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of threads. The default is 20.","pos":[0,49],"nodes":[{"content":"The maximum number of threads.","pos":[0,30]},{"content":"The default is 20.","pos":[31,49]}]}]},{"pos":[30606,30670],"content":"Gets or sets a value indicating the maximum allowed memory size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the maximum allowed memory size.","pos":[0,64]}]},{"pos":[30682,30850],"content":"The memory size is expressed as a percentage of the total system memory. This is the amount of memory a worker process can consume before ASP.NET restarts (bounces) it.","needQuote":true,"needEscape":true,"nodes":[{"content":"The memory size is expressed as a percentage of the total system memory. This is the amount of memory a worker process can consume before ASP.NET restarts (bounces) it.","pos":[0,168],"nodes":[{"content":"The memory size is expressed as a percentage of the total system memory.","pos":[0,72]},{"content":"This is the amount of memory a worker process can consume before ASP.NET restarts (bounces) it.","pos":[73,168]}]}]},{"pos":[31310,31379],"content":"The percentage of the total system memory. The default is 60 percent.","needQuote":true,"needEscape":true,"nodes":[{"content":"The percentage of the total system memory. The default is 60 percent.","pos":[0,69],"nodes":[{"content":"The percentage of the total system memory.","pos":[0,42]},{"content":"The default is 60 percent.","pos":[43,69]}]}]},{"pos":[31884,31962],"content":"Gets or sets the minimum number of I/O threads per CPU in the CLR thread pool.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the minimum number of I/O threads per CPU in the CLR thread pool.","pos":[0,78]}]},{"pos":[32438,32503],"content":"The minimum number of I/O threads per CPU in the CLR thread pool.","needQuote":true,"needEscape":true,"nodes":[{"content":"The minimum number of I/O threads per CPU in the CLR thread pool.","pos":[0,65]}]},{"pos":[33029,33110],"content":"Gets or sets the minimum number of worker threads per CPU in the CLR thread pool.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the minimum number of worker threads per CPU in the CLR thread pool.","pos":[0,81]}]},{"pos":[33594,33661],"content":"The minimum number of worker threads per CPU in the CLR thread pool","needQuote":true,"needEscape":true,"nodes":[{"content":"The minimum number of worker threads per CPU in the CLR thread pool","pos":[0,67]}]},{"pos":[34151,34228],"content":"Gets or sets a value indicating the password to use for the Windows identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the password to use for the Windows identity.","pos":[0,77]}]},{"pos":[34241,34472],"content":"The Password property must be used with the <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> property.       When present, these property values cause the worker process to run with the configured Windows identity.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Password property must be used with the <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> property.       When present, these property values cause the worker process to run with the configured Windows identity.","pos":[0,229],"nodes":[{"content":"The Password property must be used with the &lt;xref:System.Web.Configuration.ProcessModelSection.UserName%2A&gt; property.","pos":[0,117],"source":"The Password property must be used with the <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> property."},{"content":"When present, these property values cause the worker process to run with the configured Windows identity.","pos":[124,229]}]}]},{"pos":[34933,34988],"content":"The password to use. The default value is AutoGenerate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The password to use. The default value is AutoGenerate.","pos":[0,55],"nodes":[{"content":"The password to use.","pos":[0,20]},{"content":"The default value is AutoGenerate.","pos":[21,55]}]}]},{"pos":[35495,35634],"content":"Gets or sets a value indicating the time interval at which the ISAPI extension pings the worker process to determine whether it is running.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the time interval at which the ISAPI extension pings the worker process to determine whether it is running.","pos":[0,139]}]},{"pos":[35646,35754],"content":"The worker process is restarted (bounced) if it is not running after the PingFrequency interval has expired.","needQuote":true,"needEscape":true,"nodes":[{"content":"The worker process is restarted (bounced) if it is not running after the PingFrequency interval has expired.","pos":[0,108]}]},{"pos":[36226,36307],"content":"The <xref:System.TimeSpan> defining the time interval. The default is 30 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.TimeSpan> defining the time interval. The default is 30 seconds.","pos":[0,81],"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; defining the time interval.","pos":[0,54],"source":"The <xref:System.TimeSpan> defining the time interval."},{"content":"The default is 30 seconds.","pos":[55,81]}]}]},{"pos":[36809,36916],"content":"Gets or sets a value indicating the time interval after which a non-responsive worker process is restarted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the time interval after which a non-responsive worker process is restarted.","pos":[0,107]}]},{"pos":[36928,37156],"content":"The ISAPI extensions ping the worker process at the <xref:System.Web.Configuration.ProcessModelSection.PingFrequency%2A> interval. If the worker process does not respond within the PingTimeout interval, the process is restarted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ISAPI extensions ping the worker process at the <xref:System.Web.Configuration.ProcessModelSection.PingFrequency%2A> interval. If the worker process does not respond within the PingTimeout interval, the process is restarted.","pos":[0,228],"nodes":[{"content":"The ISAPI extensions ping the worker process at the &lt;xref:System.Web.Configuration.ProcessModelSection.PingFrequency%2A&gt; interval.","pos":[0,130],"source":"The ISAPI extensions ping the worker process at the <xref:System.Web.Configuration.ProcessModelSection.PingFrequency%2A> interval."},{"content":"If the worker process does not respond within the PingTimeout interval, the process is restarted.","pos":[131,228]}]}]},{"pos":[37626,37706],"content":"The <xref:System.TimeSpan> defining the time interval. The default is 5 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.TimeSpan> defining the time interval. The default is 5 seconds.","pos":[0,80],"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; defining the time interval.","pos":[0,54],"source":"The <xref:System.TimeSpan> defining the time interval."},{"content":"The default is 5 seconds.","pos":[55,80]}]}]},{"pos":[38401,38413],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[38917,39016],"content":"Gets or sets a value indicating the number of requests allowed before a worker process is recycled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the number of requests allowed before a worker process is recycled.","pos":[0,99]}]},{"pos":[39028,39156],"content":"If the number of requests is exceeded, ASP.NET automatically launches a new worker process to take the place of the current one.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the number of requests is exceeded, ASP.NET automatically launches a new worker process to take the place of the current one.","pos":[0,128]}]},{"pos":[39615,39671],"content":"The number of allowed requests. The default is Infinite.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of allowed requests. The default is Infinite.","pos":[0,56],"nodes":[{"content":"The number of allowed requests.","pos":[0,31]},{"content":"The default is Infinite.","pos":[32,56]}]}]},{"pos":[40202,40278],"content":"Gets or sets a value indicating the number of requests allowed in the queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the number of requests allowed in the queue.","pos":[0,76]}]},{"pos":[40290,40662],"content":"If the number of requests allowed in the queue is exceeded, ASP.NET begins returning \"503 – Server Too Busy\" errors to new requests. When this limit is reached, the system is operating in abnormal conditions. This might be a symptom of a malfunction or, maybe, just high load. Restarting (bouncing) the worker process might become the only way to prevent further problems.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the number of requests allowed in the queue is exceeded, ASP.NET begins returning \"503 – Server Too Busy\" errors to new requests. When this limit is reached, the system is operating in abnormal conditions. This might be a symptom of a malfunction or, maybe, just high load. Restarting (bouncing) the worker process might become the only way to prevent further problems.","pos":[0,372],"nodes":[{"content":"If the number of requests allowed in the queue is exceeded, ASP.NET begins returning \"503 – Server Too Busy\" errors to new requests.","pos":[0,132]},{"content":"When this limit is reached, the system is operating in abnormal conditions.","pos":[133,208]},{"content":"This might be a symptom of a malfunction or, maybe, just high load.","pos":[209,276]},{"content":"Restarting (bouncing) the worker process might become the only way to prevent further problems.","pos":[277,372]}]}]},{"pos":[41133,41198],"content":"The number of requests allowed to be queued. The default is 5000.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of requests allowed to be queued. The default is 5000.","pos":[0,65],"nodes":[{"content":"The number of requests allowed to be queued.","pos":[0,44]},{"content":"The default is 5000.","pos":[45,65]}]}]},{"pos":[41769,41853],"content":"Gets or sets a value indicating the time interval for the worker process to respond.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the time interval for the worker process to respond.","pos":[0,84]}]},{"pos":[41865,42025],"content":"The process is restarted if there are queued requests and if there has not been a response during the time interval that is defined by ResponseDeadlockInterval.","needQuote":true,"needEscape":true,"nodes":[{"content":"The process is restarted if there are queued requests and if there has not been a response during the time interval that is defined by ResponseDeadlockInterval.","pos":[0,160]}]},{"pos":[42518,42593],"content":"The <xref:System.TimeSpan> defining the interval. The default is 3 minutes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.TimeSpan> defining the interval. The default is 3 minutes.","pos":[0,75],"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; defining the interval.","pos":[0,49],"source":"The <xref:System.TimeSpan> defining the interval."},{"content":"The default is 3 minutes.","pos":[50,75]}]}]},{"pos":[43206,43221],"content":"No longer used.","needQuote":true,"needEscape":true,"nodes":[{"content":"No longer used.","pos":[0,15]}]},{"pos":[43233,43580],"content":"This property is no longer used by ASP.NET and is provided for backward compatibility only. It will not cause a configuration error if it is already present in a configuration file. All recycling in the event of a deadlock condition is now controlled by the <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is no longer used by ASP.NET and is provided for backward compatibility only. It will not cause a configuration error if it is already present in a configuration file. All recycling in the event of a deadlock condition is now controlled by the <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A> property.","pos":[0,347],"nodes":[{"content":"This property is no longer used by ASP.NET and is provided for backward compatibility only.","pos":[0,91]},{"content":"It will not cause a configuration error if it is already present in a configuration file.","pos":[92,181]},{"content":"All recycling in the event of a deadlock condition is now controlled by the &lt;xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A&gt; property.","pos":[182,347],"source":" All recycling in the event of a deadlock condition is now controlled by the <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A> property."}]}]},{"pos":[44088,44103],"content":"Not applicable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Not applicable.","pos":[0,15]}]},{"pos":[44653,44806],"content":"Gets or sets a value indicating the maximum number of requests queued by the ISAPI while waiting for a new worker process to start handling the requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the maximum number of requests queued by the ISAPI while waiting for a new worker process to start handling the requests.","pos":[0,153]}]},{"pos":[44818,44923],"content":"When this limit is exceeded, a client request will receive a 503 error until the worker process is ready.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this limit is exceeded, a client request will receive a 503 error until the worker process is ready.","pos":[0,105]}]},{"pos":[45395,45444],"content":"The number of requests queued. The default is 10.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of requests queued. The default is 10.","pos":[0,49],"nodes":[{"content":"The number of requests queued.","pos":[0,30]},{"content":"The default is 10.","pos":[31,49]}]}]},{"pos":[46005,46099],"content":"Gets or sets a value indicating the file whose content must be used when a fatal error occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the file whose content must be used when a fatal error occurs.","pos":[0,94]}]},{"pos":[46112,46263],"content":"The file whose content is used instead of the default Server Unavailable message.       The file location can be a relative or an absolute file path.","needQuote":false,"needEscape":true,"nodes":[{"content":"The file whose content is used instead of the default Server Unavailable message.       The file location can be a relative or an absolute file path.","pos":[0,149],"nodes":[{"content":"The file whose content is used instead of the default Server Unavailable message.","pos":[0,81]},{"content":"The file location can be a relative or an absolute file path.","pos":[88,149]}]}]},{"pos":[46749,46801],"content":"The path of the file used when a fatal error occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path of the file used when a fatal error occurs.","pos":[0,52]}]},{"pos":[47332,47417],"content":"Gets or sets a value indicating the time allowed for the worker process to shut down.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the time allowed for the worker process to shut down.","pos":[0,85]}]},{"pos":[47429,47611],"content":"This property specifies the number of minutes allowed for the worker process to shut itself down gracefully. When the timeout expires, ASP.NET shuts down the worker process forcibly.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property specifies the number of minutes allowed for the worker process to shut itself down gracefully. When the timeout expires, ASP.NET shuts down the worker process forcibly.","pos":[0,182],"nodes":[{"content":"This property specifies the number of minutes allowed for the worker process to shut itself down gracefully.","pos":[0,108]},{"content":"When the timeout expires, ASP.NET shuts down the worker process forcibly.","pos":[109,182]}]}]},{"pos":[48086,48161],"content":"The <xref:System.TimeSpan> defining the interval. The default is 5 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.TimeSpan> defining the interval. The default is 5 seconds.","pos":[0,75],"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; defining the interval.","pos":[0,49],"source":"The <xref:System.TimeSpan> defining the interval."},{"content":"The default is 5 seconds.","pos":[50,75]}]}]},{"pos":[48645,48743],"content":"Gets or sets a value indicating the number of minutes until ASP.NET launches a new worker process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the number of minutes until ASP.NET launches a new worker process.","pos":[0,98]}]},{"pos":[48755,48830],"content":"ASP.NET launches a new worker process to take the place of the current one.","needQuote":true,"needEscape":true,"nodes":[{"content":"ASP.NET launches a new worker process to take the place of the current one.","pos":[0,75]}]},{"pos":[49289,49363],"content":"The <xref:System.TimeSpan> defining the interval. The default is Infinite.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.TimeSpan> defining the interval. The default is Infinite.","pos":[0,74],"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; defining the interval.","pos":[0,49],"source":"The <xref:System.TimeSpan> defining the interval."},{"content":"The default is Infinite.","pos":[50,74]}]}]},{"pos":[49844,49913],"content":"Gets or sets a value indicating the user name for a Windows identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the user name for a Windows identity.","pos":[0,69]}]},{"pos":[49926,50830],"content":"If present, the UserName defines a Windows identity different from that of the default process. This identity is used to run the ASP.NET worker process.       By default, UserName is set to the special value Machine, and the process runs under a user account named ASPNET that is created automatically when ASP.NET is installed.       The <xref:System.Web.Configuration.ProcessModelSection.Password%2A> property must be used with the UserName property.       When present, these property values cause the worker process to run with the configured Windows identity.      > [!NOTE] >  If the UserName property is set to System, with the password AutoGenerate, it defines an entity that runs the process as an administrative account and allows all ASP.NET user code running under the process to have full administrative privileges. So, pay close attention to this case, for the permissions allowed.","needQuote":false,"needEscape":true,"nodes":[{"content":"If present, the UserName defines a Windows identity different from that of the default process.","pos":[0,95]},{"content":"This identity is used to run the ASP.NET worker process.","pos":[96,152]},{"content":"By default, UserName is set to the special value Machine, and the process runs under a user account named ASPNET that is created automatically when ASP.NET is installed.","pos":[159,328]},{"content":"The &lt;xref:System.Web.Configuration.ProcessModelSection.Password%2A&gt; property must be used with the UserName property.","pos":[335,452],"source":"       The <xref:System.Web.Configuration.ProcessModelSection.Password%2A> property must be used with the UserName property."},{"content":"When present, these property values cause the worker process to run with the configured Windows identity.","pos":[459,564]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the UserName property is set to System, with the password AutoGenerate, it defines an entity that runs the process as an administrative account and allows all ASP.NET user code running under the process to have full administrative privileges.","pos":[570,828],"source":"      > [!NOTE] >  If the UserName property is set to System, with the password AutoGenerate, it defines an entity that runs the process as an administrative account and allows all ASP.NET user code running under the process to have full administrative privileges."},{"content":"So, pay close attention to this case, for the permissions allowed.","pos":[829,895]}]},{"pos":[51291,51335],"content":"The user name. The default value is Machine.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user name. The default value is Machine.","pos":[0,44],"nodes":[{"content":"The user name.","pos":[0,14]},{"content":"The default value is Machine.","pos":[15,44]}]}]},{"pos":[51822,51899],"content":"Gets or sets a value enabling the available CPUs to run the worker processes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value enabling the available CPUs to run the worker processes.","pos":[0,77]}]},{"pos":[51912,52277],"content":"The WebGarden property must be used with the <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> property.       If the WebGarden property is set to `false`, the <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> attribute is ignored and only one worker process runs.      > [!NOTE] >  A multiprocessor Web server is called a Web garden.","needQuote":false,"needEscape":true,"nodes":[{"content":"The WebGarden property must be used with the &lt;xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A&gt; property.","pos":[0,117],"source":"The WebGarden property must be used with the <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> property."},{"content":"If the WebGarden property is set to <ph id=\"ph1\">`false`</ph>, the &lt;xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A&gt; attribute is ignored and only one worker process runs.","pos":[124,290],"source":"       If the WebGarden property is set to `false`, the <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> attribute is ignored and only one worker process runs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A multiprocessor Web server is called a Web garden.","pos":[296,360],"source":"      > [!NOTE] >  A multiprocessor Web server is called a Web garden."}]},{"pos":[52737,53069],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if &lt;xref:System.Web.Configuration.ProcessModelSection.CpuMask<bpt id=\"p2\">*</bpt>&gt; is used to map the worker processes to the number of eligible CPUs; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> if &lt;xref:System.Web.Configuration.ProcessModelSection.CpuMask<ept id=\"p2\">*</ept>&gt; is ignored.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if <xref:System.Web.Configuration.ProcessModelSection.CpuMask*> is used to map the worker processes to the number of eligible CPUs; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if <xref:System.Web.Configuration.ProcessModelSection.CpuMask*> is ignored."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Configuration.ProcessModelSection\n  id: ProcessModelSection\n  children:\n  - System.Web.Configuration.ProcessModelSection.#ctor\n  - System.Web.Configuration.ProcessModelSection.AutoConfig\n  - System.Web.Configuration.ProcessModelSection.ClientConnectedCheck\n  - System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel\n  - System.Web.Configuration.ProcessModelSection.ComImpersonationLevel\n  - System.Web.Configuration.ProcessModelSection.CpuMask\n  - System.Web.Configuration.ProcessModelSection.ElementProperty\n  - System.Web.Configuration.ProcessModelSection.Enable\n  - System.Web.Configuration.ProcessModelSection.IdleTimeout\n  - System.Web.Configuration.ProcessModelSection.LogLevel\n  - System.Web.Configuration.ProcessModelSection.MaxAppDomains\n  - System.Web.Configuration.ProcessModelSection.MaxIOThreads\n  - System.Web.Configuration.ProcessModelSection.MaxWorkerThreads\n  - System.Web.Configuration.ProcessModelSection.MemoryLimit\n  - System.Web.Configuration.ProcessModelSection.MinIOThreads\n  - System.Web.Configuration.ProcessModelSection.MinWorkerThreads\n  - System.Web.Configuration.ProcessModelSection.Password\n  - System.Web.Configuration.ProcessModelSection.PingFrequency\n  - System.Web.Configuration.ProcessModelSection.PingTimeout\n  - System.Web.Configuration.ProcessModelSection.Properties\n  - System.Web.Configuration.ProcessModelSection.RequestLimit\n  - System.Web.Configuration.ProcessModelSection.RequestQueueLimit\n  - System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval\n  - System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval\n  - System.Web.Configuration.ProcessModelSection.RestartQueueLimit\n  - System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile\n  - System.Web.Configuration.ProcessModelSection.ShutdownTimeout\n  - System.Web.Configuration.ProcessModelSection.Timeout\n  - System.Web.Configuration.ProcessModelSection.UserName\n  - System.Web.Configuration.ProcessModelSection.WebGarden\n  langs:\n  - csharp\n  name: ProcessModelSection\n  nameWithType: ProcessModelSection\n  fullName: System.Web.Configuration.ProcessModelSection\n  type: Class\n  summary: Configures the ASP.NET process model settings on an Internet Information Services (IIS) Web server. This class cannot be inherited.\n  remarks: \"The ProcessModelSection class provides a way to programmatically access and modify the `processModel` section of a configuration file.  \\n  \\n The ProcessModelSection class controls various aspects of the ASP.NET worker process, including its lifetime, the number of instances created at a time, what security identity it runs under, and the size of the CLR thread pool to service requests.  \\n  \\n When ASP.NET is running under IIS 6 in native mode, ASP.NET uses the IIS 6 process model and ignores most settings in this section. Use the IIS administration user interface (UI) to configure those properties. ASP.NET still uses the following properties, which can be configured through the configuration file: <xref:System.Web.Configuration.ProcessModelSection.RequestQueueLimit%2A>, <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A>, <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A>, <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A>, <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A>, and <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A>.  \\n  \\n The `processModel` section cannot be encrypted using the protected-configuration feature or tools because it is consumed by the ASP.NET ISAPI extension.\"\n  example:\n  - \"This example demonstrates how to specify values declaratively for several attributes of the `processModel` section, which can also be accessed as members of the ProcessModelSection class.  \\n  \\n The following configuration file example shows how to specify values declaratively for the `processModel` section.  \\n  \\n```  \\n<processModel   \\n  enable=\\\"True\\\" timeout=\\\"Infinite\\\"   \\n  idleTimeout=\\\"Infinite\\\"   \\n  shutdownTimeout=\\\"00:00:05\\\" requestLimit=\\\"Infinite\\\"  \\n  requestQueueLimit=\\\"5000\\\" restartQueueLimit=\\\"10\\\"   \\n  memoryLimit=\\\"60\\\" webGarden=\\\"False\\\" cpuMask=\\\"0xffffffff\\\"   \\n  userName=\\\"machine\\\" password=\\\"AutoGenerate\\\" logLevel=\\\"Errors\\\"  \\n  clientConnectedCheck=\\\"00:00:05\\\"   \\n  comAuthenticationLevel=\\\"Connect\\\" comImpersonationLevel=\\\"Impersonate\\\"  \\n  responseDeadlockInterval=\\\"00:03:00\\\"   \\n  responseRestartDeadlockInterval=\\\"00:03:00\\\" autoConfig=\\\"True\\\"  \\n  maxWorkerThreads=\\\"20\\\" maxIoThreads=\\\"20\\\" minWorkerThreads=\\\"1\\\"  \\n  minIoThreads=\\\"1\\\" serverErrorMessageFile=\\\"\\\" pingFrequency=\\\"Infinite\\\"  \\n  pingTimeout=\\\"Infinite\\\" asyncOption=\\\"20\\\" maxAppDomains=\\\"2000\\\"   \\n/>  \\n```  \\n  \\n The following code example demonstrates how to use the ProcessModelSection class.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#1](~/add/codesnippet/csharp/t-system.web.configurati_87_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#1](~/add/codesnippet/visualbasic/t-system.web.configurati_87_1.vb)]\"\n  syntax:\n    content: 'public sealed class ProcessModelSection : System.Configuration.ConfigurationSection'\n  inheritance:\n  - System.Object\n  - System.Configuration.ConfigurationElement\n  - System.Configuration.ConfigurationSection\n  implements: []\n  inheritedMembers:\n  - System.Configuration.ConfigurationElement.CurrentConfiguration\n  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  - System.Configuration.ConfigurationElement.ElementInformation\n  - System.Configuration.ConfigurationElement.Equals(System.Object)\n  - System.Configuration.ConfigurationElement.EvaluationContext\n  - System.Configuration.ConfigurationElement.GetHashCode\n  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  - System.Configuration.ConfigurationElement.HasContext\n  - System.Configuration.ConfigurationElement.Init\n  - System.Configuration.ConfigurationElement.InitializeDefault\n  - System.Configuration.ConfigurationElement.IsReadOnly\n  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  - System.Configuration.ConfigurationElement.Item(System.String)\n  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  - System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  - System.Configuration.ConfigurationElement.LockAllElementsExcept\n  - System.Configuration.ConfigurationElement.LockAttributes\n  - System.Configuration.ConfigurationElement.LockElements\n  - System.Configuration.ConfigurationElement.LockItem\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  - System.Configuration.ConfigurationElement.PostDeserialize\n  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  - System.Configuration.ConfigurationElement.SetReadOnly\n  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  - System.Configuration.ConfigurationSection.DeserializeSection(System.Xml.XmlReader)\n  - System.Configuration.ConfigurationSection.GetRuntimeObject\n  - System.Configuration.ConfigurationSection.IsModified\n  - System.Configuration.ConfigurationSection.ResetModified\n  - System.Configuration.ConfigurationSection.SectionInformation\n  - System.Configuration.ConfigurationSection.SerializeSection(System.Configuration.ConfigurationElement,System.String,System.Configuration.ConfigurationSaveMode)\n  - System.Configuration.ConfigurationSection.ShouldSerializeElementInTargetVersion(System.Configuration.ConfigurationElement,System.String,System.Runtime.Versioning.FrameworkName)\n  - System.Configuration.ConfigurationSection.ShouldSerializePropertyInTargetVersion(System.Configuration.ConfigurationProperty,System.String,System.Runtime.Versioning.FrameworkName,System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationSection.ShouldSerializeSectionInTargetVersion(System.Runtime.Versioning.FrameworkName)\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.#ctor\n  id: '#ctor'\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: ProcessModelSection()\n  nameWithType: ProcessModelSection.ProcessModelSection()\n  fullName: System.Web.Configuration.ProcessModelSection.ProcessModelSection()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.Web.Configuration.ProcessModelSection\"></xref> class using default settings.\n  remarks: The ProcessModelSection constructor is not intended to be used directly from your code. It is called by the ASP.NET configuration system. You obtain an instance of the <xref:System.Web.Configuration.ProcessModelSection> class by using the <xref:System.Configuration.Configuration.GetSection%2A> method.\n  syntax:\n    content: public ProcessModelSection ();\n    parameters: []\n  overload: System.Web.Configuration.ProcessModelSection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.AutoConfig\n  id: AutoConfig\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: AutoConfig\n  nameWithType: ProcessModelSection.AutoConfig\n  fullName: System.Web.Configuration.ProcessModelSection.AutoConfig\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating whether ASP.NET performance settings are automatically configured for ASP.NET applications.\n  remarks: \"If the AutoConfig value is set to `false`, explicit Web.config values are used to determine performance configuration for the ASP.NET application. If the AutoConfig value is set to `true`, the performance settings are automatically configured for the ASP.NET application.  \\n  \\n The AutoConfig value is explicitly set to `true` in the Machine.config file. The default code value is set to `false`.  If the AutoConfig value is removed from Machine.config, the explicit settings are used instead of the auto-configured settings.\"\n  syntax:\n    content: public bool AutoConfig { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if performance settings are automatically configured for ASP.NET applications; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.Configuration.ProcessModelSection.AutoConfig*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.ClientConnectedCheck\n  id: ClientConnectedCheck\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: ClientConnectedCheck\n  nameWithType: ProcessModelSection.ClientConnectedCheck\n  fullName: System.Web.Configuration.ProcessModelSection.ClientConnectedCheck\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating how long a request is left in the queue.\n  remarks: \"This property specifies how long a request is queued before ASP.NET performs a client connected check.  \\n  \\n> [!NOTE]\\n>  If the interval expires while the request is still queued, a client connected check is done before passing the request over to the ASP.NET worker process for handling.\"\n  example:\n  - \"The following code example shows how to access and modify the ClientConnectedCheck property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#18](~/add/codesnippet/csharp/p-system.web.configurati_355_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#18](~/add/codesnippet/visualbasic/p-system.web.configurati_355_1.vb)]\"\n  syntax:\n    content: public TimeSpan ClientConnectedCheck { get; set; }\n    return:\n      type: System.TimeSpan\n      description: A <xref:System.TimeSpan> value indicating the queuing time. The default value is 5 seconds.\n  overload: System.Web.Configuration.ProcessModelSection.ClientConnectedCheck*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel\n  id: ComAuthenticationLevel\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: ComAuthenticationLevel\n  nameWithType: ProcessModelSection.ComAuthenticationLevel\n  fullName: System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the level of authentication for DCOM security.\n  remarks: When this property value is set to <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel>, DCOM determines the authentication level using its normal security-negotiation algorithm. The default value assigned to this property, as specified in the Machine.config file, is <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel>. In this case, DCOM authenticates the credentials of the client only when the client establishes a relationship with the server.\n  example:\n  - \"The following code example shows how to access the ComAuthenticationLevel property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#21](~/add/codesnippet/csharp/p-system.web.configurati_143_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#21](~/add/codesnippet/visualbasic/p-system.web.configurati_143_1.vb)]\"\n  syntax:\n    content: public System.Web.Configuration.ProcessModelComAuthenticationLevel ComAuthenticationLevel { get; set; }\n    return:\n      type: System.Web.Configuration.ProcessModelComAuthenticationLevel\n      description: One of the <xref href=\"System.Web.Configuration.ProcessModelComAuthenticationLevel\"></xref> values. The default value is <xref href=\"System.Web.Configuration.ProcessModelComAuthenticationLevel\"></xref>.\n  overload: System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.ComImpersonationLevel\n  id: ComImpersonationLevel\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: ComImpersonationLevel\n  nameWithType: ProcessModelSection.ComImpersonationLevel\n  fullName: System.Web.Configuration.ProcessModelSection.ComImpersonationLevel\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the level of authentication for COM security.\n  remarks: When this property value is set to <xref:System.Web.Configuration.ProcessModelComImpersonationLevel>, DCOM determines the impersonation level using its normal security-negotiation algorithm. The default value assigned to this property, as specified in the Machine.config file, is <xref:System.Web.Configuration.ProcessModelComImpersonationLevel>. In this case, the server process can impersonate the client's security context while acting on behalf of the client.\n  example:\n  - \"The following code example shows how to access the ComImpersonationLevel property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#22](~/add/codesnippet/csharp/p-system.web.configurati_249_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#22](~/add/codesnippet/visualbasic/p-system.web.configurati_249_1.vb)]\"\n  syntax:\n    content: public System.Web.Configuration.ProcessModelComImpersonationLevel ComImpersonationLevel { get; set; }\n    return:\n      type: System.Web.Configuration.ProcessModelComImpersonationLevel\n      description: One of the <xref href=\"System.Web.Configuration.ProcessModelComImpersonationLevel\"></xref> values. The default value is <xref href=\"System.Web.Configuration.ProcessModelComImpersonationLevel\"></xref>.\n  overload: System.Web.Configuration.ProcessModelSection.ComImpersonationLevel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.CpuMask\n  id: CpuMask\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: CpuMask\n  nameWithType: ProcessModelSection.CpuMask\n  fullName: System.Web.Configuration.ProcessModelSection.CpuMask\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating which processors on a multiprocessor server are eligible to run ASP.NET processes.\n  remarks: The CpuMask value specifies a bit pattern that indicates the CPUs eligible to run ASP.NET threads. If the <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> property is set to `true`, the CpuMask limits worker processes to the number of eligible CPUs. The maximum allowed number of worker processes is equal to the number of CPUs. By default, all CPUs are enabled and ASP.NET launches one process for each CPU. If the <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> property is set to `false`, the CpuMask attribute is ignored and only one worker process will run.\n  example:\n  - \"The following code example shows how to access the CpuMask property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#25](~/add/codesnippet/csharp/p-system.web.configurati_174_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#25](~/add/codesnippet/visualbasic/p-system.web.configurati_174_1.vb)]\"\n  syntax:\n    content: public int CpuMask { get; set; }\n    return:\n      type: System.Int32\n      description: The number representing the bit pattern to apply. The default value is 0xFFFFFFFF.\n  overload: System.Web.Configuration.ProcessModelSection.CpuMask*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.ElementProperty\n  id: ElementProperty\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: ElementProperty\n  nameWithType: ProcessModelSection.ElementProperty\n  fullName: System.Web.Configuration.ProcessModelSection.ElementProperty\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  syntax:\n    content: protected override System.Configuration.ConfigurationElementProperty ElementProperty { get; }\n    return:\n      type: System.Configuration.ConfigurationElementProperty\n      description: To be added.\n  overload: System.Web.Configuration.ProcessModelSection.ElementProperty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.Enable\n  id: Enable\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: Enable\n  nameWithType: ProcessModelSection.Enable\n  fullName: System.Web.Configuration.ProcessModelSection.Enable\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating whether the process model is enabled.\n  remarks: \"The Enable property specifies whether ASP.NET is hosted in an external worker process. If Enable is `true`, ASP.NET is hosted in an external worker process; otherwise, it runs directly in Inetinfo.exe.  \\n  \\n> [!NOTE]\\n>  Running ASP.NET in Inetinfo.exe is not recommended, because this involves running the application in the Local System security context. When ASP.NET runs in Internet Information Services (IIS) 6 native mode, this setting is ignored, so there is usually no reason to set it to `false`.\"\n  example:\n  - \"The following code example shows how to access the Enable property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#2](~/add/codesnippet/csharp/p-system.web.configurati_95_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#2](~/add/codesnippet/visualbasic/p-system.web.configurati_95_1.vb)]\"\n  syntax:\n    content: public bool Enable { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the process model is enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Web.Configuration.ProcessModelSection.Enable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.IdleTimeout\n  id: IdleTimeout\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: IdleTimeout\n  nameWithType: ProcessModelSection.IdleTimeout\n  fullName: System.Web.Configuration.ProcessModelSection.IdleTimeout\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the period of inactivity after which ASP.NET automatically ends the worker process.\n  remarks: 'The worker process is restarted (bounced) when the IdleTimeout property value is reached. By default, only two conditions cause the process to bounce: the process exceeds the allowed memory limit, or the process exceeds the allowed number of requests that can be queued. You can add other conditions to the default ones. For example, you can use the IdleTimeout property to limit the time the worker process is idle.'\n  example:\n  - \"The following code example shows how to access the IdleTimeout property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#16](~/add/codesnippet/csharp/p-system.web.configurati_88_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#16](~/add/codesnippet/visualbasic/p-system.web.configurati_88_1.vb)]\"\n  syntax:\n    content: public TimeSpan IdleTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: A <xref:System.TimeSpan> value indicating the idle time. The default value is Infinite, which corresponds to <xref:System.TimeSpan>.\n  overload: System.Web.Configuration.ProcessModelSection.IdleTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.LogLevel\n  id: LogLevel\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: LogLevel\n  nameWithType: ProcessModelSection.LogLevel\n  fullName: System.Web.Configuration.ProcessModelSection.LogLevel\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the event types to be logged to the event log.\n  remarks: By using this property correctly, you can filter the errors the system can log. After you have an idea of the application's malfunctions or bottlenecks, you might want to devise a strategy that narrows the range of errors you are interested in.\n  example:\n  - \"The following code example shows how to access the LogLevel property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#23](~/add/codesnippet/csharp/p-system.web.configurati_246_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#23](~/add/codesnippet/visualbasic/p-system.web.configurati_246_1.vb)]\"\n  syntax:\n    content: public System.Web.Configuration.ProcessModelLogLevel LogLevel { get; set; }\n    return:\n      type: System.Web.Configuration.ProcessModelLogLevel\n      description: One of the <xref href=\"System.Web.Configuration.ProcessModelLogLevel\"></xref> values. The default value is <xref href=\"System.Web.Configuration.ProcessModelLogLevel\"></xref>.\n  overload: System.Web.Configuration.ProcessModelSection.LogLevel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.MaxAppDomains\n  id: MaxAppDomains\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: MaxAppDomains\n  nameWithType: ProcessModelSection.MaxAppDomains\n  fullName: System.Web.Configuration.ProcessModelSection.MaxAppDomains\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets the maximum allowed number of application domains in one process.\n  remarks: If the MaxAppDomains threshold is exceeded, the least-used application domain is shut down if a new application domain must start.\n  example:\n  - \"The following code example shows how to access the MaxAppDomains property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#27](~/add/codesnippet/csharp/p-system.web.configurati_284_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#27](~/add/codesnippet/visualbasic/p-system.web.configurati_284_1.vb)]\"\n  syntax:\n    content: public int MaxAppDomains { get; set; }\n    return:\n      type: System.Int32\n      description: The maximum allowed number of application domains in one process.\n  overload: System.Web.Configuration.ProcessModelSection.MaxAppDomains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.MaxIOThreads\n  id: MaxIOThreads\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: MaxIOThreads\n  nameWithType: ProcessModelSection.MaxIOThreads\n  fullName: System.Web.Configuration.ProcessModelSection.MaxIOThreads\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the maximum number of I/O threads per CPU in the CLR thread pool.\n  remarks: \"The value of MaxIOThreads must be equal to or greater than the <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> setting in the `httpRuntime` configuration section.  \\n  \\n You can have some control over the CPU utilization by setting the number of worker threads and I/O threads, using the <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A> property and the MaxIOThreads property respectively.  \\n  \\n The difference between the two types of threads is that the latter are bound to I/O objects, such as a stream or a pipe, and the former are traditional unrestricted threads. For Internet Information Services (IIS) version 6.0 and later, ASP.NET processes requests on worker threads. This is because ASP.NET is integrated within IIS.  \\n  \\n These threads are obtained from the process-wide CLR thread pool belonging to an application.  \\n  \\n> [!NOTE]\\n>  Usually the default values for the allowed threads are sufficient to keep the CPU utilization high. If for some reason your application is slow, perhaps waiting for external resources, you could try to increase the number of threads to a value less than 100.\"\n  example:\n  - \"The following code example shows how to access the MaxIOThreads property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#5](~/add/codesnippet/csharp/p-system.web.configurati_295_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#5](~/add/codesnippet/visualbasic/p-system.web.configurati_295_1.vb)]\"\n  syntax:\n    content: public int MaxIOThreads { get; set; }\n    return:\n      type: System.Int32\n      description: The maximum number of threads. The default is 20.\n  overload: System.Web.Configuration.ProcessModelSection.MaxIOThreads*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.MaxWorkerThreads\n  id: MaxWorkerThreads\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: MaxWorkerThreads\n  nameWithType: ProcessModelSection.MaxWorkerThreads\n  fullName: System.Web.Configuration.ProcessModelSection.MaxWorkerThreads\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the maximum amount of worker threads per CPU in the CLR thread pool.\n  remarks: \"The value of MaxWorkerThreads must be equal to or greater than the <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> setting in the `httpRuntime` configuration section.  \\n  \\n You can have some control over the CPU utilization by setting the number of worker threads and I/O threads, using the MaxWorkerThreads property and, the <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A> property, respectively.  \\n  \\n The difference between the two types of threads is that the latter are bound to I/O objects, such as a stream or a pipe, and the former are traditional unrestricted threads. For Internet Information Services (IIS) version 6.0 and higher, ASP.NET processes requests on worker threads. This is because ASP.NET is integrated within IIS.  \\n  \\n These threads are obtained from the process-wide CLR thread pool belonging to an application.  \\n  \\n> [!NOTE]\\n>  Usually the default values for the allowed threads are sufficient to keep the CPU utilization high. If for some reason your application is slow, perhaps waiting for external resources, you could try to increase the number of threads to a value less than 100.\"\n  example:\n  - \"The following code example shows how to access the MaxWorkerThreads property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#7](~/add/codesnippet/csharp/p-system.web.configurati_48_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#7](~/add/codesnippet/visualbasic/p-system.web.configurati_48_1.vb)]\"\n  syntax:\n    content: public int MaxWorkerThreads { get; set; }\n    return:\n      type: System.Int32\n      description: The maximum number of threads. The default is 20.\n  overload: System.Web.Configuration.ProcessModelSection.MaxWorkerThreads*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.MemoryLimit\n  id: MemoryLimit\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: MemoryLimit\n  nameWithType: ProcessModelSection.MemoryLimit\n  fullName: System.Web.Configuration.ProcessModelSection.MemoryLimit\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the maximum allowed memory size.\n  remarks: The memory size is expressed as a percentage of the total system memory. This is the amount of memory a worker process can consume before ASP.NET restarts (bounces) it.\n  example:\n  - \"The following code example shows how to access the MemoryLimit property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#3](~/add/codesnippet/csharp/p-system.web.configurati_265_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#3](~/add/codesnippet/visualbasic/p-system.web.configurati_265_1.vb)]\"\n  syntax:\n    content: public int MemoryLimit { get; set; }\n    return:\n      type: System.Int32\n      description: The percentage of the total system memory. The default is 60 percent.\n  overload: System.Web.Configuration.ProcessModelSection.MemoryLimit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.MinIOThreads\n  id: MinIOThreads\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: MinIOThreads\n  nameWithType: ProcessModelSection.MinIOThreads\n  fullName: System.Web.Configuration.ProcessModelSection.MinIOThreads\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets the minimum number of I/O threads per CPU in the CLR thread pool.\n  remarks: ''\n  example:\n  - \"The following code example shows how to access the MinIOThreads property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#4](~/add/codesnippet/csharp/p-system.web.configurati_296_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#4](~/add/codesnippet/visualbasic/p-system.web.configurati_296_1.vb)]\"\n  syntax:\n    content: public int MinIOThreads { get; set; }\n    return:\n      type: System.Int32\n      description: The minimum number of I/O threads per CPU in the CLR thread pool.\n  overload: System.Web.Configuration.ProcessModelSection.MinIOThreads*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.MinWorkerThreads\n  id: MinWorkerThreads\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: MinWorkerThreads\n  nameWithType: ProcessModelSection.MinWorkerThreads\n  fullName: System.Web.Configuration.ProcessModelSection.MinWorkerThreads\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets the minimum number of worker threads per CPU in the CLR thread pool.\n  remarks: ''\n  example:\n  - \"The following code example shows how to access the MinWorkerThreads property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#6](~/add/codesnippet/csharp/p-system.web.configurati_183_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#6](~/add/codesnippet/visualbasic/p-system.web.configurati_183_1.vb)]\"\n  syntax:\n    content: public int MinWorkerThreads { get; set; }\n    return:\n      type: System.Int32\n      description: The minimum number of worker threads per CPU in the CLR thread pool\n  overload: System.Web.Configuration.ProcessModelSection.MinWorkerThreads*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.Password\n  id: Password\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: Password\n  nameWithType: ProcessModelSection.Password\n  fullName: System.Web.Configuration.ProcessModelSection.Password\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the password to use for the Windows identity.\n  remarks: \"The Password property must be used with the <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> property.  \\n  \\n When present, these property values cause the worker process to run with the configured Windows identity.\"\n  example:\n  - \"The following code example shows how to access the Password property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#20](~/add/codesnippet/csharp/p-system.web.configurati_258_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#20](~/add/codesnippet/visualbasic/p-system.web.configurati_258_1.vb)]\"\n  syntax:\n    content: public string Password { get; set; }\n    return:\n      type: System.String\n      description: The password to use. The default value is AutoGenerate.\n  overload: System.Web.Configuration.ProcessModelSection.Password*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.PingFrequency\n  id: PingFrequency\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: PingFrequency\n  nameWithType: ProcessModelSection.PingFrequency\n  fullName: System.Web.Configuration.ProcessModelSection.PingFrequency\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the time interval at which the ISAPI extension pings the worker process to determine whether it is running.\n  remarks: The worker process is restarted (bounced) if it is not running after the PingFrequency interval has expired.\n  example:\n  - \"The following code example shows how to access the PingFrequency property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#13](~/add/codesnippet/csharp/p-system.web.configurati_14_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#13](~/add/codesnippet/visualbasic/p-system.web.configurati_14_1.vb)]\"\n  syntax:\n    content: public TimeSpan PingFrequency { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> defining the time interval. The default is 30 seconds.\n  overload: System.Web.Configuration.ProcessModelSection.PingFrequency*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.PingTimeout\n  id: PingTimeout\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: PingTimeout\n  nameWithType: ProcessModelSection.PingTimeout\n  fullName: System.Web.Configuration.ProcessModelSection.PingTimeout\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the time interval after which a non-responsive worker process is restarted.\n  remarks: The ISAPI extensions ping the worker process at the <xref:System.Web.Configuration.ProcessModelSection.PingFrequency%2A> interval. If the worker process does not respond within the PingTimeout interval, the process is restarted.\n  example:\n  - \"The following code example shows how to access the PingTimeout property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#14](~/add/codesnippet/csharp/p-system.web.configurati_399_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#14](~/add/codesnippet/visualbasic/p-system.web.configurati_399_1.vb)]\"\n  syntax:\n    content: public TimeSpan PingTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> defining the time interval. The default is 5 seconds.\n  overload: System.Web.Configuration.ProcessModelSection.PingTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.Properties\n  id: Properties\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: ProcessModelSection.Properties\n  fullName: System.Web.Configuration.ProcessModelSection.Properties\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  syntax:\n    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }\n    return:\n      type: System.Configuration.ConfigurationPropertyCollection\n      description: To be added.\n  overload: System.Web.Configuration.ProcessModelSection.Properties*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.RequestLimit\n  id: RequestLimit\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: RequestLimit\n  nameWithType: ProcessModelSection.RequestLimit\n  fullName: System.Web.Configuration.ProcessModelSection.RequestLimit\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the number of requests allowed before a worker process is recycled.\n  remarks: If the number of requests is exceeded, ASP.NET automatically launches a new worker process to take the place of the current one.\n  example:\n  - \"The following code example shows how to use the RequestLimit property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#8](~/add/codesnippet/csharp/p-system.web.configurati_185_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#8](~/add/codesnippet/visualbasic/p-system.web.configurati_185_1.vb)]\"\n  syntax:\n    content: public int RequestLimit { get; set; }\n    return:\n      type: System.Int32\n      description: The number of allowed requests. The default is Infinite.\n  overload: System.Web.Configuration.ProcessModelSection.RequestLimit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.RequestQueueLimit\n  id: RequestQueueLimit\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: RequestQueueLimit\n  nameWithType: ProcessModelSection.RequestQueueLimit\n  fullName: System.Web.Configuration.ProcessModelSection.RequestQueueLimit\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the number of requests allowed in the queue.\n  remarks: If the number of requests allowed in the queue is exceeded, ASP.NET begins returning \"503 – Server Too Busy\" errors to new requests. When this limit is reached, the system is operating in abnormal conditions. This might be a symptom of a malfunction or, maybe, just high load. Restarting (bouncing) the worker process might become the only way to prevent further problems.\n  example:\n  - \"The following code example shows how to use the RequestQueueLimit property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#10](~/add/codesnippet/csharp/p-system.web.configurati_126_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#10](~/add/codesnippet/visualbasic/p-system.web.configurati_126_1.vb)]\"\n  syntax:\n    content: public int RequestQueueLimit { get; set; }\n    return:\n      type: System.Int32\n      description: The number of requests allowed to be queued. The default is 5000.\n  overload: System.Web.Configuration.ProcessModelSection.RequestQueueLimit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval\n  id: ResponseDeadlockInterval\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: ResponseDeadlockInterval\n  nameWithType: ProcessModelSection.ResponseDeadlockInterval\n  fullName: System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the time interval for the worker process to respond.\n  remarks: The process is restarted if there are queued requests and if there has not been a response during the time interval that is defined by ResponseDeadlockInterval.\n  example:\n  - \"The following code example shows how to use the ResponseDeadlockInterval property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#17](~/add/codesnippet/csharp/p-system.web.configurati_402_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#17](~/add/codesnippet/visualbasic/p-system.web.configurati_402_1.vb)]\"\n  syntax:\n    content: public TimeSpan ResponseDeadlockInterval { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> defining the interval. The default is 3 minutes.\n  overload: System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval\n  id: ResponseRestartDeadlockInterval\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: ResponseRestartDeadlockInterval\n  nameWithType: ProcessModelSection.ResponseRestartDeadlockInterval\n  fullName: System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: No longer used.\n  remarks: This property is no longer used by ASP.NET and is provided for backward compatibility only. It will not cause a configuration error if it is already present in a configuration file. All recycling in the event of a deadlock condition is now controlled by the <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A> property.\n  example:\n  - \"The following code example shows how to access the ResponseRestartDeadlockInterval property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#11](~/add/codesnippet/csharp/p-system.web.configurati_58_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#11](~/add/codesnippet/visualbasic/p-system.web.configurati_58_1.vb)]\"\n  syntax:\n    content: public TimeSpan ResponseRestartDeadlockInterval { get; set; }\n    return:\n      type: System.TimeSpan\n      description: Not applicable.\n  overload: System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.RestartQueueLimit\n  id: RestartQueueLimit\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: RestartQueueLimit\n  nameWithType: ProcessModelSection.RestartQueueLimit\n  fullName: System.Web.Configuration.ProcessModelSection.RestartQueueLimit\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the maximum number of requests queued by the ISAPI while waiting for a new worker process to start handling the requests.\n  remarks: When this limit is exceeded, a client request will receive a 503 error until the worker process is ready.\n  example:\n  - \"The following code example shows how to access the RestartQueueLimit property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#9](~/add/codesnippet/csharp/p-system.web.configurati_255_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#9](~/add/codesnippet/visualbasic/p-system.web.configurati_255_1.vb)]\"\n  syntax:\n    content: public int RestartQueueLimit { get; set; }\n    return:\n      type: System.Int32\n      description: The number of requests queued. The default is 10.\n  overload: System.Web.Configuration.ProcessModelSection.RestartQueueLimit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile\n  id: ServerErrorMessageFile\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: ServerErrorMessageFile\n  nameWithType: ProcessModelSection.ServerErrorMessageFile\n  fullName: System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the file whose content must be used when a fatal error occurs.\n  remarks: \"The file whose content is used instead of the default Server Unavailable message.  \\n  \\n The file location can be a relative or an absolute file path.\"\n  example:\n  - \"The following code example shows how to use the ServerErrorMessageFile property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#28](~/add/codesnippet/csharp/p-system.web.configurati_154_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#28](~/add/codesnippet/visualbasic/p-system.web.configurati_154_1.vb)]\"\n  syntax:\n    content: public string ServerErrorMessageFile { get; set; }\n    return:\n      type: System.String\n      description: The path of the file used when a fatal error occurs.\n  overload: System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.ShutdownTimeout\n  id: ShutdownTimeout\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: ShutdownTimeout\n  nameWithType: ProcessModelSection.ShutdownTimeout\n  fullName: System.Web.Configuration.ProcessModelSection.ShutdownTimeout\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the time allowed for the worker process to shut down.\n  remarks: This property specifies the number of minutes allowed for the worker process to shut itself down gracefully. When the timeout expires, ASP.NET shuts down the worker process forcibly.\n  example:\n  - \"The following code example shows how to use the ShutdownTimeout property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#15](~/add/codesnippet/csharp/p-system.web.configurati_202_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#15](~/add/codesnippet/visualbasic/p-system.web.configurati_202_1.vb)]\"\n  syntax:\n    content: public TimeSpan ShutdownTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> defining the interval. The default is 5 seconds.\n  overload: System.Web.Configuration.ProcessModelSection.ShutdownTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.Timeout\n  id: Timeout\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: Timeout\n  nameWithType: ProcessModelSection.Timeout\n  fullName: System.Web.Configuration.ProcessModelSection.Timeout\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the number of minutes until ASP.NET launches a new worker process.\n  remarks: ASP.NET launches a new worker process to take the place of the current one.\n  example:\n  - \"The following code example shows how to use the Timeout property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#10](~/add/codesnippet/csharp/p-system.web.configurati_144_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#10](~/add/codesnippet/visualbasic/p-system.web.configurati_144_1.vb)]\"\n  syntax:\n    content: public TimeSpan Timeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> defining the interval. The default is Infinite.\n  overload: System.Web.Configuration.ProcessModelSection.Timeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.UserName\n  id: UserName\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: UserName\n  nameWithType: ProcessModelSection.UserName\n  fullName: System.Web.Configuration.ProcessModelSection.UserName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value indicating the user name for a Windows identity.\n  remarks: \"If present, the UserName defines a Windows identity different from that of the default process. This identity is used to run the ASP.NET worker process.  \\n  \\n By default, UserName is set to the special value Machine, and the process runs under a user account named ASPNET that is created automatically when ASP.NET is installed.  \\n  \\n The <xref:System.Web.Configuration.ProcessModelSection.Password%2A> property must be used with the UserName property.  \\n  \\n When present, these property values cause the worker process to run with the configured Windows identity.  \\n  \\n> [!NOTE]\\n>  If the UserName property is set to System, with the password AutoGenerate, it defines an entity that runs the process as an administrative account and allows all ASP.NET user code running under the process to have full administrative privileges. So, pay close attention to this case, for the permissions allowed.\"\n  example:\n  - \"The following code example shows how to access the UserName property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#19](~/add/codesnippet/csharp/p-system.web.configurati_166_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#19](~/add/codesnippet/visualbasic/p-system.web.configurati_166_1.vb)]\"\n  syntax:\n    content: public string UserName { get; set; }\n    return:\n      type: System.String\n      description: The user name. The default value is Machine.\n  overload: System.Web.Configuration.ProcessModelSection.UserName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.ProcessModelSection.WebGarden\n  id: WebGarden\n  parent: System.Web.Configuration.ProcessModelSection\n  langs:\n  - csharp\n  name: WebGarden\n  nameWithType: ProcessModelSection.WebGarden\n  fullName: System.Web.Configuration.ProcessModelSection.WebGarden\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets a value enabling the available CPUs to run the worker processes.\n  remarks: \"The WebGarden property must be used with the <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> property.  \\n  \\n If the WebGarden property is set to `false`, the <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> attribute is ignored and only one worker process runs.  \\n  \\n> [!NOTE]\\n>  A multiprocessor Web server is called a Web garden.\"\n  example:\n  - \"The following code example shows how to access the WebGarden property.  \\n  \\n [!code-cs[System.Web.Configuration.ProcessModelSection#24](~/add/codesnippet/csharp/p-system.web.configurati_94_1.cs)]\\n [!code-vb[System.Web.Configuration.ProcessModelSection#24](~/add/codesnippet/visualbasic/p-system.web.configurati_94_1.vb)]\"\n  syntax:\n    content: public bool WebGarden { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if <xref:System.Web.Configuration.ProcessModelSection.CpuMask*> is used to map the worker processes to the number of eligible CPUs; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if <xref:System.Web.Configuration.ProcessModelSection.CpuMask*> is ignored.\n  overload: System.Web.Configuration.ProcessModelSection.WebGarden*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.ConfigurationSection\n  isExternal: false\n  name: System.Configuration.ConfigurationSection\n- uid: System.Web.Configuration.ProcessModelSection.#ctor\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ProcessModelSection()\n  nameWithType: ProcessModelSection.ProcessModelSection()\n  fullName: System.Web.Configuration.ProcessModelSection.ProcessModelSection()\n- uid: System.Web.Configuration.ProcessModelSection.AutoConfig\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: AutoConfig\n  nameWithType: ProcessModelSection.AutoConfig\n  fullName: System.Web.Configuration.ProcessModelSection.AutoConfig\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.Configuration.ProcessModelSection.ClientConnectedCheck\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ClientConnectedCheck\n  nameWithType: ProcessModelSection.ClientConnectedCheck\n  fullName: System.Web.Configuration.ProcessModelSection.ClientConnectedCheck\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ComAuthenticationLevel\n  nameWithType: ProcessModelSection.ComAuthenticationLevel\n  fullName: System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel\n- uid: System.Web.Configuration.ProcessModelComAuthenticationLevel\n  parent: System.Web.Configuration\n  isExternal: false\n  name: ProcessModelComAuthenticationLevel\n  nameWithType: ProcessModelComAuthenticationLevel\n  fullName: System.Web.Configuration.ProcessModelComAuthenticationLevel\n- uid: System.Web.Configuration.ProcessModelSection.ComImpersonationLevel\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ComImpersonationLevel\n  nameWithType: ProcessModelSection.ComImpersonationLevel\n  fullName: System.Web.Configuration.ProcessModelSection.ComImpersonationLevel\n- uid: System.Web.Configuration.ProcessModelComImpersonationLevel\n  parent: System.Web.Configuration\n  isExternal: false\n  name: ProcessModelComImpersonationLevel\n  nameWithType: ProcessModelComImpersonationLevel\n  fullName: System.Web.Configuration.ProcessModelComImpersonationLevel\n- uid: System.Web.Configuration.ProcessModelSection.CpuMask\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: CpuMask\n  nameWithType: ProcessModelSection.CpuMask\n  fullName: System.Web.Configuration.ProcessModelSection.CpuMask\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.Configuration.ProcessModelSection.ElementProperty\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ElementProperty\n  nameWithType: ProcessModelSection.ElementProperty\n  fullName: System.Web.Configuration.ProcessModelSection.ElementProperty\n- uid: System.Configuration.ConfigurationElementProperty\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationElementProperty\n  nameWithType: ConfigurationElementProperty\n  fullName: System.Configuration.ConfigurationElementProperty\n- uid: System.Web.Configuration.ProcessModelSection.Enable\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: Enable\n  nameWithType: ProcessModelSection.Enable\n  fullName: System.Web.Configuration.ProcessModelSection.Enable\n- uid: System.Web.Configuration.ProcessModelSection.IdleTimeout\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: IdleTimeout\n  nameWithType: ProcessModelSection.IdleTimeout\n  fullName: System.Web.Configuration.ProcessModelSection.IdleTimeout\n- uid: System.Web.Configuration.ProcessModelSection.LogLevel\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: LogLevel\n  nameWithType: ProcessModelSection.LogLevel\n  fullName: System.Web.Configuration.ProcessModelSection.LogLevel\n- uid: System.Web.Configuration.ProcessModelLogLevel\n  parent: System.Web.Configuration\n  isExternal: false\n  name: ProcessModelLogLevel\n  nameWithType: ProcessModelLogLevel\n  fullName: System.Web.Configuration.ProcessModelLogLevel\n- uid: System.Web.Configuration.ProcessModelSection.MaxAppDomains\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MaxAppDomains\n  nameWithType: ProcessModelSection.MaxAppDomains\n  fullName: System.Web.Configuration.ProcessModelSection.MaxAppDomains\n- uid: System.Web.Configuration.ProcessModelSection.MaxIOThreads\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MaxIOThreads\n  nameWithType: ProcessModelSection.MaxIOThreads\n  fullName: System.Web.Configuration.ProcessModelSection.MaxIOThreads\n- uid: System.Web.Configuration.ProcessModelSection.MaxWorkerThreads\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MaxWorkerThreads\n  nameWithType: ProcessModelSection.MaxWorkerThreads\n  fullName: System.Web.Configuration.ProcessModelSection.MaxWorkerThreads\n- uid: System.Web.Configuration.ProcessModelSection.MemoryLimit\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MemoryLimit\n  nameWithType: ProcessModelSection.MemoryLimit\n  fullName: System.Web.Configuration.ProcessModelSection.MemoryLimit\n- uid: System.Web.Configuration.ProcessModelSection.MinIOThreads\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MinIOThreads\n  nameWithType: ProcessModelSection.MinIOThreads\n  fullName: System.Web.Configuration.ProcessModelSection.MinIOThreads\n- uid: System.Web.Configuration.ProcessModelSection.MinWorkerThreads\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MinWorkerThreads\n  nameWithType: ProcessModelSection.MinWorkerThreads\n  fullName: System.Web.Configuration.ProcessModelSection.MinWorkerThreads\n- uid: System.Web.Configuration.ProcessModelSection.Password\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: Password\n  nameWithType: ProcessModelSection.Password\n  fullName: System.Web.Configuration.ProcessModelSection.Password\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.Configuration.ProcessModelSection.PingFrequency\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: PingFrequency\n  nameWithType: ProcessModelSection.PingFrequency\n  fullName: System.Web.Configuration.ProcessModelSection.PingFrequency\n- uid: System.Web.Configuration.ProcessModelSection.PingTimeout\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: PingTimeout\n  nameWithType: ProcessModelSection.PingTimeout\n  fullName: System.Web.Configuration.ProcessModelSection.PingTimeout\n- uid: System.Web.Configuration.ProcessModelSection.Properties\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: Properties\n  nameWithType: ProcessModelSection.Properties\n  fullName: System.Web.Configuration.ProcessModelSection.Properties\n- uid: System.Configuration.ConfigurationPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationPropertyCollection\n  nameWithType: ConfigurationPropertyCollection\n  fullName: System.Configuration.ConfigurationPropertyCollection\n- uid: System.Web.Configuration.ProcessModelSection.RequestLimit\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: RequestLimit\n  nameWithType: ProcessModelSection.RequestLimit\n  fullName: System.Web.Configuration.ProcessModelSection.RequestLimit\n- uid: System.Web.Configuration.ProcessModelSection.RequestQueueLimit\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: RequestQueueLimit\n  nameWithType: ProcessModelSection.RequestQueueLimit\n  fullName: System.Web.Configuration.ProcessModelSection.RequestQueueLimit\n- uid: System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ResponseDeadlockInterval\n  nameWithType: ProcessModelSection.ResponseDeadlockInterval\n  fullName: System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval\n- uid: System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ResponseRestartDeadlockInterval\n  nameWithType: ProcessModelSection.ResponseRestartDeadlockInterval\n  fullName: System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval\n- uid: System.Web.Configuration.ProcessModelSection.RestartQueueLimit\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: RestartQueueLimit\n  nameWithType: ProcessModelSection.RestartQueueLimit\n  fullName: System.Web.Configuration.ProcessModelSection.RestartQueueLimit\n- uid: System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ServerErrorMessageFile\n  nameWithType: ProcessModelSection.ServerErrorMessageFile\n  fullName: System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile\n- uid: System.Web.Configuration.ProcessModelSection.ShutdownTimeout\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ShutdownTimeout\n  nameWithType: ProcessModelSection.ShutdownTimeout\n  fullName: System.Web.Configuration.ProcessModelSection.ShutdownTimeout\n- uid: System.Web.Configuration.ProcessModelSection.Timeout\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: Timeout\n  nameWithType: ProcessModelSection.Timeout\n  fullName: System.Web.Configuration.ProcessModelSection.Timeout\n- uid: System.Web.Configuration.ProcessModelSection.UserName\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: UserName\n  nameWithType: ProcessModelSection.UserName\n  fullName: System.Web.Configuration.ProcessModelSection.UserName\n- uid: System.Web.Configuration.ProcessModelSection.WebGarden\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: WebGarden\n  nameWithType: ProcessModelSection.WebGarden\n  fullName: System.Web.Configuration.ProcessModelSection.WebGarden\n- uid: System.Web.Configuration.ProcessModelSection.#ctor*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ProcessModelSection\n  nameWithType: ProcessModelSection.ProcessModelSection\n- uid: System.Web.Configuration.ProcessModelSection.AutoConfig*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: AutoConfig\n  nameWithType: ProcessModelSection.AutoConfig\n- uid: System.Web.Configuration.ProcessModelSection.ClientConnectedCheck*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ClientConnectedCheck\n  nameWithType: ProcessModelSection.ClientConnectedCheck\n- uid: System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ComAuthenticationLevel\n  nameWithType: ProcessModelSection.ComAuthenticationLevel\n- uid: System.Web.Configuration.ProcessModelSection.ComImpersonationLevel*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ComImpersonationLevel\n  nameWithType: ProcessModelSection.ComImpersonationLevel\n- uid: System.Web.Configuration.ProcessModelSection.CpuMask*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: CpuMask\n  nameWithType: ProcessModelSection.CpuMask\n- uid: System.Web.Configuration.ProcessModelSection.ElementProperty*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ElementProperty\n  nameWithType: ProcessModelSection.ElementProperty\n- uid: System.Web.Configuration.ProcessModelSection.Enable*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: Enable\n  nameWithType: ProcessModelSection.Enable\n- uid: System.Web.Configuration.ProcessModelSection.IdleTimeout*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: IdleTimeout\n  nameWithType: ProcessModelSection.IdleTimeout\n- uid: System.Web.Configuration.ProcessModelSection.LogLevel*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: LogLevel\n  nameWithType: ProcessModelSection.LogLevel\n- uid: System.Web.Configuration.ProcessModelSection.MaxAppDomains*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MaxAppDomains\n  nameWithType: ProcessModelSection.MaxAppDomains\n- uid: System.Web.Configuration.ProcessModelSection.MaxIOThreads*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MaxIOThreads\n  nameWithType: ProcessModelSection.MaxIOThreads\n- uid: System.Web.Configuration.ProcessModelSection.MaxWorkerThreads*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MaxWorkerThreads\n  nameWithType: ProcessModelSection.MaxWorkerThreads\n- uid: System.Web.Configuration.ProcessModelSection.MemoryLimit*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MemoryLimit\n  nameWithType: ProcessModelSection.MemoryLimit\n- uid: System.Web.Configuration.ProcessModelSection.MinIOThreads*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MinIOThreads\n  nameWithType: ProcessModelSection.MinIOThreads\n- uid: System.Web.Configuration.ProcessModelSection.MinWorkerThreads*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: MinWorkerThreads\n  nameWithType: ProcessModelSection.MinWorkerThreads\n- uid: System.Web.Configuration.ProcessModelSection.Password*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: Password\n  nameWithType: ProcessModelSection.Password\n- uid: System.Web.Configuration.ProcessModelSection.PingFrequency*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: PingFrequency\n  nameWithType: ProcessModelSection.PingFrequency\n- uid: System.Web.Configuration.ProcessModelSection.PingTimeout*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: PingTimeout\n  nameWithType: ProcessModelSection.PingTimeout\n- uid: System.Web.Configuration.ProcessModelSection.Properties*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: Properties\n  nameWithType: ProcessModelSection.Properties\n- uid: System.Web.Configuration.ProcessModelSection.RequestLimit*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: RequestLimit\n  nameWithType: ProcessModelSection.RequestLimit\n- uid: System.Web.Configuration.ProcessModelSection.RequestQueueLimit*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: RequestQueueLimit\n  nameWithType: ProcessModelSection.RequestQueueLimit\n- uid: System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ResponseDeadlockInterval\n  nameWithType: ProcessModelSection.ResponseDeadlockInterval\n- uid: System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ResponseRestartDeadlockInterval\n  nameWithType: ProcessModelSection.ResponseRestartDeadlockInterval\n- uid: System.Web.Configuration.ProcessModelSection.RestartQueueLimit*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: RestartQueueLimit\n  nameWithType: ProcessModelSection.RestartQueueLimit\n- uid: System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ServerErrorMessageFile\n  nameWithType: ProcessModelSection.ServerErrorMessageFile\n- uid: System.Web.Configuration.ProcessModelSection.ShutdownTimeout*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: ShutdownTimeout\n  nameWithType: ProcessModelSection.ShutdownTimeout\n- uid: System.Web.Configuration.ProcessModelSection.Timeout*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: Timeout\n  nameWithType: ProcessModelSection.Timeout\n- uid: System.Web.Configuration.ProcessModelSection.UserName*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: UserName\n  nameWithType: ProcessModelSection.UserName\n- uid: System.Web.Configuration.ProcessModelSection.WebGarden*\n  parent: System.Web.Configuration.ProcessModelSection\n  isExternal: false\n  name: WebGarden\n  nameWithType: ProcessModelSection.WebGarden\n"}