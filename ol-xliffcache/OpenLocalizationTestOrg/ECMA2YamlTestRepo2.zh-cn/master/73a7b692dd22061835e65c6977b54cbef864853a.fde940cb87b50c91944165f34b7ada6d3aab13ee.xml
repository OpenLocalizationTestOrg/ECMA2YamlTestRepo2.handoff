{"nodes":[{"pos":[913,1109],"content":"Represents a lexical scope within <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymMethod\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, providing access to the start and end offsets of the scope, as well as its child and parent scopes.","needQuote":true,"needEscape":true,"source":"Represents a lexical scope within <xref href=\"System.Diagnostics.SymbolStore.SymMethod\"></xref>, providing access to the start and end offsets of the scope, as well as its child and parent scopes."},{"pos":[1121,1208],"content":"The SymScope class also provides access to all locals defined within the current scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SymScope class also provides access to all locals defined within the current scope.","pos":[0,87]}]},{"pos":[2445,2457],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2911,3037],"content":"Releases the resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases the resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymScope\"></xref> class."},{"pos":[3628,3917],"content":"Called by the &lt;xref:System.Diagnostics.SymbolStore.SymScope.Dispose<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Diagnostics.SymbolStore.SymScope.Finalize<ept id=\"p1\">*</ept>&gt; methods to release the managed and unmanaged resources used by the current instance of the <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymScope\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Called by the <xref:System.Diagnostics.SymbolStore.SymScope.Dispose*> and <xref:System.Diagnostics.SymbolStore.SymScope.Finalize*> methods to release the managed and unmanaged resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymScope\"></xref> class."},{"pos":[3929,4133],"content":"This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymScope.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymScope.Finalize%2A> methods; do not call this method directly.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is called only by the public &lt;xref:System.Diagnostics.SymbolStore.SymScope.Dispose%2A&gt; and &lt;xref:System.Diagnostics.SymbolStore.SymScope.Finalize%2A&gt; methods; do not call this method directly.","pos":[0,204],"source":"This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymScope.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymScope.Finalize%2A> methods; do not call this method directly."}]},{"pos":[4276,4480],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[4942,4991],"content":"Gets the end offset of the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the end offset of the current lexical scope.","pos":[0,49]}]},{"pos":[5109,5243],"content":"The ending Microsoft intermediate language (MSIL) offset. The offset is from the beginning of the method of the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ending Microsoft intermediate language (MSIL) offset. The offset is from the beginning of the method of the current lexical scope.","pos":[0,134],"nodes":[{"content":"The ending Microsoft intermediate language (MSIL) offset.","pos":[0,57]},{"content":"The offset is from the beginning of the method of the current lexical scope.","pos":[58,134]}]}]},{"pos":[5706,5880],"content":"Releases unmanaged resources and performs other cleanup operations before the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"source":"Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.Diagnostics.SymbolStore.SymScope\"></xref> is reclaimed by garbage collection."},{"pos":[5892,6201],"content":"This method overrides  <xref:System.Object.Finalize%2A>. Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method overrides  &lt;xref:System.Object.Finalize%2A&gt;.","pos":[0,56],"source":"This method overrides  <xref:System.Object.Finalize%2A>."},{"content":"Application code should not call this method; an object's <ph id=\"ph1\">`Finalize`</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the &lt;xref:System.GC.SuppressFinalize%2A&gt; method.","pos":[57,309],"source":" Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method."}]},{"pos":[6734,6793],"content":"Gets the child lexical scopes of the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the child lexical scopes of the current lexical scope.","pos":[0,59]}]},{"pos":[7002,7059],"content":"The lexical scopes enclosed by the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The lexical scopes enclosed by the current lexical scope.","pos":[0,57]}]},{"pos":[7239,7291],"content":"There is insufficient memory to satisfy the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is insufficient memory to satisfy the request.","pos":[0,52]}]},{"pos":[7679,7737],"content":"Gets the local variables within the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the local variables within the current lexical scope.","pos":[0,58]}]},{"pos":[7749,7949],"content":"The local variables are returned in no particular order. If a local variable changes its address within the current scope, that variable is returned multiple times, each with a different offset range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The local variables are returned in no particular order. If a local variable changes its address within the current scope, that variable is returned multiple times, each with a different offset range.","pos":[0,200],"nodes":[{"content":"The local variables are returned in no particular order.","pos":[0,56]},{"content":"If a local variable changes its address within the current scope, that variable is returned multiple times, each with a different offset range.","pos":[57,200]}]}]},{"pos":[8162,8215],"content":"The local variables within the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The local variables within the current lexical scope.","pos":[0,53]}]},{"pos":[8393,8445],"content":"There is insufficient memory to satisfy the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is insufficient memory to satisfy the request.","pos":[0,52]}]},{"pos":[8853,8911],"content":"Throws a <xref:System.NotSupportedException> in all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws a &lt;xref:System.NotSupportedException&gt; in all cases.","pos":[0,58],"source":"Throws a <xref:System.NotSupportedException> in all cases."}]},{"pos":[9130,9188],"content":"Throws a <xref:System.NotSupportedException> in all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws a &lt;xref:System.NotSupportedException&gt; in all cases.","pos":[0,58],"source":"Throws a <xref:System.NotSupportedException> in all cases."}]},{"pos":[9641,9697],"content":"Gets the method that contains the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the method that contains the current lexical scope.","pos":[0,56]}]},{"pos":[9885,9936],"content":"The method that contains the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method that contains the current lexical scope.","pos":[0,51]}]},{"pos":[10382,10433],"content":"Gets the parent lexical scope of the current scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the parent lexical scope of the current scope.","pos":[0,51]}]},{"pos":[10619,10668],"content":"The enclosing lexical scope of the current scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The enclosing lexical scope of the current scope.","pos":[0,49]}]},{"pos":[11139,11190],"content":"Gets the start offset of the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the start offset of the current lexical scope.","pos":[0,51]}]},{"pos":[11310,11446],"content":"The starting Microsoft intermediate language (MSIL) offset. The offset is from the beginning of the method of the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting Microsoft intermediate language (MSIL) offset. The offset is from the beginning of the method of the current lexical scope.","pos":[0,136],"nodes":[{"content":"The starting Microsoft intermediate language (MSIL) offset.","pos":[0,59]},{"content":"The offset is from the beginning of the method of the current lexical scope.","pos":[60,136]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.SymbolStore.SymScope\n  id: SymScope\n  children:\n  - System.Diagnostics.SymbolStore.SymScope.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*)\n  - System.Diagnostics.SymbolStore.SymScope.Dispose\n  - System.Diagnostics.SymbolStore.SymScope.Dispose(System.Boolean)\n  - System.Diagnostics.SymbolStore.SymScope.EndOffset\n  - System.Diagnostics.SymbolStore.SymScope.Finalize\n  - System.Diagnostics.SymbolStore.SymScope.GetChildren\n  - System.Diagnostics.SymbolStore.SymScope.GetLocals\n  - System.Diagnostics.SymbolStore.SymScope.GetNamespaces\n  - System.Diagnostics.SymbolStore.SymScope.Method\n  - System.Diagnostics.SymbolStore.SymScope.Parent\n  - System.Diagnostics.SymbolStore.SymScope.StartOffset\n  langs:\n  - csharp\n  name: SymScope\n  nameWithType: SymScope\n  fullName: System.Diagnostics.SymbolStore.SymScope\n  type: Class\n  summary: Represents a lexical scope within <xref href=\"System.Diagnostics.SymbolStore.SymMethod\"></xref>, providing access to the start and end offsets of the scope, as well as its child and parent scopes.\n  remarks: The SymScope class also provides access to all locals defined within the current scope.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class SymScope : System.Diagnostics.SymbolStore.SymScopeBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolScope\n  inheritance:\n  - System.Object\n  - System.Diagnostics.SymbolStore.SymScopeBase\n  implements:\n  - System.Diagnostics.SymbolStore.ISymbolScope\n  - System.IDisposable\n  inheritedMembers:\n  - System.Diagnostics.SymbolStore.SymScopeBase.{dtor}\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymScope.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*)\n  id: '#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*)'\n  parent: System.Diagnostics.SymbolStore.SymScope\n  langs:\n  - csharp\n  name: SymScope(ISymUnmanagedScope*)\n  nameWithType: SymScope.SymScope(ISymUnmanagedScope*)\n  fullName: System.Diagnostics.SymbolStore.SymScope.SymScope(ISymUnmanagedScope*)\n  type: Constructor\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  syntax:\n    content: public SymScope (System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope* pScope);\n    parameters:\n    - id: pScope\n      type: System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*\n      description: To be added.\n  overload: System.Diagnostics.SymbolStore.SymScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymScope.Dispose\n  id: Dispose\n  parent: System.Diagnostics.SymbolStore.SymScope\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SymScope.Dispose()\n  fullName: System.Diagnostics.SymbolStore.SymScope.Dispose()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Releases the resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymScope\"></xref> class.\n  syntax:\n    content: public override sealed void Dispose ();\n    parameters: []\n  overload: System.Diagnostics.SymbolStore.SymScope.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymScope.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.SymbolStore.SymScope\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SymScope.Dispose(Boolean)\n  fullName: System.Diagnostics.SymbolStore.SymScope.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Called by the <xref:System.Diagnostics.SymbolStore.SymScope.Dispose*> and <xref:System.Diagnostics.SymbolStore.SymScope.Finalize*> methods to release the managed and unmanaged resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymScope\"></xref> class.\n  remarks: This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymScope.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymScope.Finalize%2A> methods; do not call this method directly.\n  syntax:\n    content: protected virtual void Dispose (bool A_0);\n    parameters:\n    - id: A_0\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Diagnostics.SymbolStore.SymScope.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymScope.EndOffset\n  id: EndOffset\n  parent: System.Diagnostics.SymbolStore.SymScope\n  langs:\n  - csharp\n  name: EndOffset\n  nameWithType: SymScope.EndOffset\n  fullName: System.Diagnostics.SymbolStore.SymScope.EndOffset\n  type: Property\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the end offset of the current lexical scope.\n  syntax:\n    content: public virtual int EndOffset { get; }\n    return:\n      type: System.Int32\n      description: The ending Microsoft intermediate language (MSIL) offset. The offset is from the beginning of the method of the current lexical scope.\n  overload: System.Diagnostics.SymbolStore.SymScope.EndOffset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymScope.Finalize\n  id: Finalize\n  parent: System.Diagnostics.SymbolStore.SymScope\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: SymScope.Finalize()\n  fullName: System.Diagnostics.SymbolStore.SymScope.Finalize()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.Diagnostics.SymbolStore.SymScope\"></xref> is reclaimed by garbage collection.\n  remarks: This method overrides  <xref:System.Object.Finalize%2A>. Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method.\n  syntax:\n    content: ~SymScope ();\n    parameters: []\n  overload: System.Diagnostics.SymbolStore.SymScope.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymScope.GetChildren\n  id: GetChildren\n  parent: System.Diagnostics.SymbolStore.SymScope\n  langs:\n  - csharp\n  name: GetChildren()\n  nameWithType: SymScope.GetChildren()\n  fullName: System.Diagnostics.SymbolStore.SymScope.GetChildren()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the child lexical scopes of the current lexical scope.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope[] GetChildren ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolScope[]\n      description: The lexical scopes enclosed by the current lexical scope.\n  overload: System.Diagnostics.SymbolStore.SymScope.GetChildren*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to satisfy the request.\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymScope.GetLocals\n  id: GetLocals\n  parent: System.Diagnostics.SymbolStore.SymScope\n  langs:\n  - csharp\n  name: GetLocals()\n  nameWithType: SymScope.GetLocals()\n  fullName: System.Diagnostics.SymbolStore.SymScope.GetLocals()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the local variables within the current lexical scope.\n  remarks: The local variables are returned in no particular order. If a local variable changes its address within the current scope, that variable is returned multiple times, each with a different offset range.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetLocals ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolVariable[]\n      description: The local variables within the current lexical scope.\n  overload: System.Diagnostics.SymbolStore.SymScope.GetLocals*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to satisfy the request.\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymScope.GetNamespaces\n  id: GetNamespaces\n  parent: System.Diagnostics.SymbolStore.SymScope\n  langs:\n  - csharp\n  name: GetNamespaces()\n  nameWithType: SymScope.GetNamespaces()\n  fullName: System.Diagnostics.SymbolStore.SymScope.GetNamespaces()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Throws a <xref:System.NotSupportedException> in all cases.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolNamespace[]\n      description: Throws a <xref:System.NotSupportedException> in all cases.\n  overload: System.Diagnostics.SymbolStore.SymScope.GetNamespaces*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymScope.Method\n  id: Method\n  parent: System.Diagnostics.SymbolStore.SymScope\n  langs:\n  - csharp\n  name: Method\n  nameWithType: SymScope.Method\n  fullName: System.Diagnostics.SymbolStore.SymScope.Method\n  type: Property\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the method that contains the current lexical scope.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolMethod Method { get; }\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolMethod\n      description: The method that contains the current lexical scope.\n  overload: System.Diagnostics.SymbolStore.SymScope.Method*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymScope.Parent\n  id: Parent\n  parent: System.Diagnostics.SymbolStore.SymScope\n  langs:\n  - csharp\n  name: Parent\n  nameWithType: SymScope.Parent\n  fullName: System.Diagnostics.SymbolStore.SymScope.Parent\n  type: Property\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the parent lexical scope of the current scope.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope Parent { get; }\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolScope\n      description: The enclosing lexical scope of the current scope.\n  overload: System.Diagnostics.SymbolStore.SymScope.Parent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.SymScope.StartOffset\n  id: StartOffset\n  parent: System.Diagnostics.SymbolStore.SymScope\n  langs:\n  - csharp\n  name: StartOffset\n  nameWithType: SymScope.StartOffset\n  fullName: System.Diagnostics.SymbolStore.SymScope.StartOffset\n  type: Property\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the start offset of the current lexical scope.\n  syntax:\n    content: public virtual int StartOffset { get; }\n    return:\n      type: System.Int32\n      description: The starting Microsoft intermediate language (MSIL) offset. The offset is from the beginning of the method of the current lexical scope.\n  overload: System.Diagnostics.SymbolStore.SymScope.StartOffset*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Diagnostics.SymbolStore.SymScopeBase\n  isExternal: false\n  name: System.Diagnostics.SymbolStore.SymScopeBase\n- uid: System.OutOfMemoryException\n  isExternal: true\n  name: System.OutOfMemoryException\n- uid: System.Diagnostics.SymbolStore.SymScope.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*)\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: SymScope(ISymUnmanagedScope*)\n  nameWithType: SymScope.SymScope(ISymUnmanagedScope*)\n  fullName: System.Diagnostics.SymbolStore.SymScope.SymScope(ISymUnmanagedScope*)\n- uid: System.Diagnostics.SymbolStore.SymScope.Dispose\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: Dispose()\n  nameWithType: SymScope.Dispose()\n  fullName: System.Diagnostics.SymbolStore.SymScope.Dispose()\n- uid: System.Diagnostics.SymbolStore.SymScope.Dispose(System.Boolean)\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SymScope.Dispose(Boolean)\n  fullName: System.Diagnostics.SymbolStore.SymScope.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.SymbolStore.SymScope.EndOffset\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: EndOffset\n  nameWithType: SymScope.EndOffset\n  fullName: System.Diagnostics.SymbolStore.SymScope.EndOffset\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.SymbolStore.SymScope.Finalize\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: Finalize()\n  nameWithType: SymScope.Finalize()\n  fullName: System.Diagnostics.SymbolStore.SymScope.Finalize()\n- uid: System.Diagnostics.SymbolStore.SymScope.GetChildren\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: GetChildren()\n  nameWithType: SymScope.GetChildren()\n  fullName: System.Diagnostics.SymbolStore.SymScope.GetChildren()\n- uid: System.Diagnostics.SymbolStore.ISymbolScope[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolScope\n  nameWithType: ISymbolScope\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolScope\n    name: ISymbolScope\n    nameWithType: ISymbolScope\n    fullName: ISymbolScope[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.SymScope.GetLocals\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: GetLocals()\n  nameWithType: SymScope.GetLocals()\n  fullName: System.Diagnostics.SymbolStore.SymScope.GetLocals()\n- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolVariable\n  nameWithType: ISymbolVariable\n  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolVariable\n    name: ISymbolVariable\n    nameWithType: ISymbolVariable\n    fullName: ISymbolVariable[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.SymScope.GetNamespaces\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: GetNamespaces()\n  nameWithType: SymScope.GetNamespaces()\n  fullName: System.Diagnostics.SymbolStore.SymScope.GetNamespaces()\n- uid: System.Diagnostics.SymbolStore.ISymbolNamespace[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolNamespace\n  nameWithType: ISymbolNamespace\n  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolNamespace\n    name: ISymbolNamespace\n    nameWithType: ISymbolNamespace\n    fullName: ISymbolNamespace[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.SymScope.Method\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: Method\n  nameWithType: SymScope.Method\n  fullName: System.Diagnostics.SymbolStore.SymScope.Method\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolMethod\n  nameWithType: ISymbolMethod\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod\n- uid: System.Diagnostics.SymbolStore.SymScope.Parent\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: Parent\n  nameWithType: SymScope.Parent\n  fullName: System.Diagnostics.SymbolStore.SymScope.Parent\n- uid: System.Diagnostics.SymbolStore.ISymbolScope\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolScope\n  nameWithType: ISymbolScope\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope\n- uid: System.Diagnostics.SymbolStore.SymScope.StartOffset\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: StartOffset\n  nameWithType: SymScope.StartOffset\n  fullName: System.Diagnostics.SymbolStore.SymScope.StartOffset\n- uid: System.Diagnostics.SymbolStore.SymScope.#ctor*\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: SymScope\n  nameWithType: SymScope.SymScope\n- uid: System.Diagnostics.SymbolStore.SymScope.Dispose*\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: Dispose\n  nameWithType: SymScope.Dispose\n- uid: System.Diagnostics.SymbolStore.SymScope.EndOffset*\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: EndOffset\n  nameWithType: SymScope.EndOffset\n- uid: System.Diagnostics.SymbolStore.SymScope.Finalize*\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: Finalize\n  nameWithType: SymScope.Finalize\n- uid: System.Diagnostics.SymbolStore.SymScope.GetChildren*\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: GetChildren\n  nameWithType: SymScope.GetChildren\n- uid: System.Diagnostics.SymbolStore.SymScope.GetLocals*\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: GetLocals\n  nameWithType: SymScope.GetLocals\n- uid: System.Diagnostics.SymbolStore.SymScope.GetNamespaces*\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: GetNamespaces\n  nameWithType: SymScope.GetNamespaces\n- uid: System.Diagnostics.SymbolStore.SymScope.Method*\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: Method\n  nameWithType: SymScope.Method\n- uid: System.Diagnostics.SymbolStore.SymScope.Parent*\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: Parent\n  nameWithType: SymScope.Parent\n- uid: System.Diagnostics.SymbolStore.SymScope.StartOffset*\n  parent: System.Diagnostics.SymbolStore.SymScope\n  isExternal: false\n  name: StartOffset\n  nameWithType: SymScope.StartOffset\n"}