{"nodes":[{"pos":[11180,11399],"content":"Provides an API to construct <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>s that invoke canonical EDM functions, and allows that API to be accessed as extension methods on the expression type itself.","needQuote":true,"needEscape":true,"source":"Provides an API to construct <xref href=\"System.Data.Common.CommandTrees.DbExpression\"></xref>s that invoke canonical EDM functions, and allows that API to be accessed as extension methods on the expression type itself."},{"pos":[12115,12392],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Abs' function with the specified argument, which must each have a numeric result type. The result type of the expression is the same as the result type of **value**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Abs' function with the specified argument, which must each have a numeric result type.","pos":[0,198],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Abs' function with the specified argument, which must each have a numeric result type."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept>.","pos":[199,277],"source":" The result type of the expression is the same as the result type of **value**."}]},{"pos":[12654,12701],"content":"An expression that specifies the numeric value.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the numeric value.","pos":[0,47]}]},{"pos":[12798,12870],"content":"A new DbFunctionExpression that returns the absolute value of <bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the absolute value of **value**."},{"pos":[13070,13075],"content":"value","needQuote":false,"needEscape":true,"nodes":[{"content":"value","pos":[0,5]}]},{"pos":[13176,13181],"content":"value","needQuote":false,"needEscape":true,"nodes":[{"content":"value","pos":[0,5]}]},{"pos":[13920,14231],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddDays' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of **dateValue**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'AddDays' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types.","pos":[0,228],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddDays' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept>.","pos":[229,311],"source":" The result type of the expression is the same as the result type of **dateValue**."}]},{"pos":[14560,14636],"content":"An expression that specifies the value to which <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept>should be added.","needQuote":true,"needEscape":true,"source":"An expression that specifies the value to which **addValue**should be added."},{"pos":[14732,14804],"content":"An expression that specifies the number of days to add to <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the number of days to add to **dateValue**."},{"pos":[14901,15023],"content":"A new DbFunctionExpression that adds the number of days specified by <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept> to the value specified by <bpt id=\"p2\">**</bpt>dateValue<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that adds the number of days specified by **addValue** to the value specified by **dateValue**."},{"pos":[15225,15251],"content":"<bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**dateValue** **addValue**"},{"pos":[15348,15374],"content":"<bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**dateValue** **addValue**"},{"pos":[16116,16435],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddHours' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'AddHours' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types.","pos":[0,236],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddHours' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","pos":[237,319],"source":" The result type of the expression is the same as the result type of **timeValue**."}]},{"pos":[16765,16841],"content":"An expression that specifies the value to which <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept>should be added.","needQuote":true,"needEscape":true,"source":"An expression that specifies the value to which **addValue**should be added."},{"pos":[16937,17010],"content":"An expression that specifies the number of hours to add to <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the number of hours to add to **timeValue**."},{"pos":[17107,17230],"content":"A new DbFunctionExpression that adds the number of hours specified by <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept> to the value specified by <bpt id=\"p2\">**</bpt>timeValue<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that adds the number of hours specified by **addValue** to the value specified by **timeValue**."},{"pos":[17433,17459],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[17556,17582],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[18359,18685],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMicroseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'AddMicroseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types.","pos":[0,243],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMicroseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","pos":[244,326],"source":" The result type of the expression is the same as the result type of **timeValue**."}]},{"pos":[19022,19098],"content":"An expression that specifies the value to which <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept>should be added.","needQuote":true,"needEscape":true,"source":"An expression that specifies the value to which **addValue**should be added."},{"pos":[19194,19274],"content":"An expression that specifies the number of microseconds to add to <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the number of microseconds to add to **timeValue**."},{"pos":[19371,19501],"content":"A new DbFunctionExpression that adds the number of microseconds specified by <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept> to the value specified by <bpt id=\"p2\">**</bpt>timeValue<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that adds the number of microseconds specified by **addValue** to the value specified by **timeValue**."},{"pos":[19711,19737],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[19834,19860],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[20637,20963],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMilliseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'AddMilliseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types.","pos":[0,243],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMilliseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","pos":[244,326],"source":" The result type of the expression is the same as the result type of **timeValue**."}]},{"pos":[21300,21376],"content":"An expression that specifies the value to which <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept>should be added.","needQuote":true,"needEscape":true,"source":"An expression that specifies the value to which **addValue**should be added."},{"pos":[21472,21552],"content":"An expression that specifies the number of milliseconds to add to <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the number of milliseconds to add to **timeValue**."},{"pos":[21649,21779],"content":"A new DbFunctionExpression that adds the number of milliseconds specified by <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept> to the value specified by <bpt id=\"p2\">**</bpt>timeValue<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that adds the number of milliseconds specified by **addValue** to the value specified by **timeValue**."},{"pos":[21989,22015],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[22112,22138],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[22890,23211],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMinutes' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'AddMinutes' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types.","pos":[0,238],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMinutes' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","pos":[239,321],"source":" The result type of the expression is the same as the result type of **timeValue**."}]},{"pos":[23543,23619],"content":"An expression that specifies the value to which <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept>should be added.","needQuote":true,"needEscape":true,"source":"An expression that specifies the value to which **addValue**should be added."},{"pos":[23715,23790],"content":"An expression that specifies the number of minutes to add to <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the number of minutes to add to **timeValue**."},{"pos":[23887,24012],"content":"A new DbFunctionExpression that adds the number of minutes specified by <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept> to the value specified by <bpt id=\"p2\">**</bpt>timeValue<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that adds the number of minutes specified by **addValue** to the value specified by **timeValue**."},{"pos":[24217,24243],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[24340,24366],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[25113,25426],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMonths' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of **dateValue**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'AddMonths' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types.","pos":[0,230],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMonths' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept>.","pos":[231,313],"source":" The result type of the expression is the same as the result type of **dateValue**."}]},{"pos":[25757,25833],"content":"An expression that specifies the value to which <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept>should be added.","needQuote":true,"needEscape":true,"source":"An expression that specifies the value to which **addValue**should be added."},{"pos":[25929,26003],"content":"An expression that specifies the number of months to add to <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the number of months to add to **dateValue**."},{"pos":[26100,26224],"content":"A new DbFunctionExpression that adds the number of months specified by <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept> to the value specified by <bpt id=\"p2\">**</bpt>dateValue<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that adds the number of months specified by **addValue** to the value specified by **dateValue**."},{"pos":[26428,26454],"content":"<bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**dateValue** **addValue**"},{"pos":[26551,26577],"content":"<bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**dateValue** **addValue**"},{"pos":[27349,27674],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddNanoseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'AddNanoseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types.","pos":[0,242],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddNanoseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","pos":[243,325],"source":" The result type of the expression is the same as the result type of **timeValue**."}]},{"pos":[28010,28086],"content":"An expression that specifies the value to which <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept>should be added.","needQuote":true,"needEscape":true,"source":"An expression that specifies the value to which **addValue**should be added."},{"pos":[28182,28261],"content":"An expression that specifies the number of nanoseconds to add to <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the number of nanoseconds to add to **timeValue**."},{"pos":[28358,28487],"content":"A new DbFunctionExpression that adds the number of nanoseconds specified by <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept> to the value specified by <bpt id=\"p2\">**</bpt>timeValue<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that adds the number of nanoseconds specified by **addValue** to the value specified by **timeValue**."},{"pos":[28696,28722],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[28819,28845],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[29597,29918],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddSeconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'AddSeconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types.","pos":[0,238],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddSeconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","pos":[239,321],"source":" The result type of the expression is the same as the result type of **timeValue**."}]},{"pos":[30250,30326],"content":"An expression that specifies the value to which <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept>should be added.","needQuote":true,"needEscape":true,"source":"An expression that specifies the value to which **addValue**should be added."},{"pos":[30422,30497],"content":"An expression that specifies the number of seconds to add to <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the number of seconds to add to **timeValue**."},{"pos":[30594,30719],"content":"A new DbFunctionExpression that adds the number of seconds specified by <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept> to the value specified by <bpt id=\"p2\">**</bpt>timeValue<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that adds the number of seconds specified by **addValue** to the value specified by **timeValue**."},{"pos":[30924,30950],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[31047,31073],"content":"<bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**timeValue** **addValue**"},{"pos":[31815,32127],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddYears' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of **dateValue**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'AddYears' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types.","pos":[0,229],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddYears' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept>.","pos":[230,312],"source":" The result type of the expression is the same as the result type of **dateValue**."}]},{"pos":[32457,32533],"content":"An expression that specifies the value to which <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept>should be added.","needQuote":true,"needEscape":true,"source":"An expression that specifies the value to which **addValue**should be added."},{"pos":[32629,32702],"content":"An expression that specifies the number of years to add to <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the number of years to add to **dateValue**."},{"pos":[32799,32922],"content":"A new DbFunctionExpression that adds the number of years specified by <bpt id=\"p1\">**</bpt>addValue<ept id=\"p1\">**</ept> to the value specified by <bpt id=\"p2\">**</bpt>dateValue<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that adds the number of years specified by **addValue** to the value specified by **dateValue**."},{"pos":[33125,33151],"content":"<bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**dateValue** **addValue**"},{"pos":[33248,33274],"content":"<bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>addValue<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**dateValue** **addValue**"},{"pos":[33882,34123],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Avg' function over the specified collection. The result type of the expression is the same as the element type of the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Avg' function over the specified collection.","pos":[0,156],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Avg' function over the specified collection."},{"content":"The result type of the expression is the same as the element type of the collection.","pos":[157,241]}]},{"pos":[34399,34491],"content":"An expression that specifies the collection from which the average value should be computed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the collection from which the average value should be computed.","pos":[0,92]}]},{"pos":[34588,34647],"content":"A new DbFunctionExpression that produces the average value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that produces the average value.","pos":[0,59]}]},{"pos":[34851,34861],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[34962,34972],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[35726,36018],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseAnd' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'BitwiseAnd' function with the specified arguments, which must have the same integer numeric result type.","pos":[0,216],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseAnd' function with the specified arguments, which must have the same integer numeric result type."},{"content":"The result type of the expression is the same as the type of the arguments.","pos":[217,292]}]},{"pos":[36342,36389],"content":"An expression that specifies the first operand.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first operand.","pos":[0,47]}]},{"pos":[36483,36531],"content":"An expression that specifies the second operand.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second operand.","pos":[0,48]}]},{"pos":[36628,36746],"content":"A new DbFunctionExpression that returns the value produced by performing the bitwise AND of <bpt id=\"p1\">**</bpt>value1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>value2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the value produced by performing the bitwise AND of **value1** and **value2**."},{"pos":[36951,36972],"content":"<bpt id=\"p1\">**</bpt>value1<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>value2<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**value1** **value2**"},{"pos":[37069,37090],"content":"<bpt id=\"p1\">**</bpt>value1<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>value2<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**value1** **value2**"},{"pos":[37713,37998],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseNot' function with the specified argument, which must have an integer numeric result type. The result type of the expression is the same as the type of the arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'BitwiseNot' function with the specified argument, which must have an integer numeric result type.","pos":[0,209],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseNot' function with the specified argument, which must have an integer numeric result type."},{"content":"The result type of the expression is the same as the type of the arguments.","pos":[210,285]}]},{"pos":[38267,38314],"content":"An expression that specifies the first operand.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first operand.","pos":[0,47]}]},{"pos":[38411,38513],"content":"A new DbFunctionExpression that returns the value produced by performing the bitwise NOT of <bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the value produced by performing the bitwise NOT of **value**."},{"pos":[38720,38725],"content":"value","needQuote":false,"needEscape":true,"nodes":[{"content":"value","pos":[0,5]}]},{"pos":[38826,38831],"content":"value","needQuote":false,"needEscape":true,"nodes":[{"content":"value","pos":[0,5]}]},{"pos":[39580,39871],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseOr' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'BitwiseOr' function with the specified arguments, which must have the same integer numeric result type.","pos":[0,215],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseOr' function with the specified arguments, which must have the same integer numeric result type."},{"content":"The result type of the expression is the same as the type of the arguments.","pos":[216,291]}]},{"pos":[40194,40241],"content":"An expression that specifies the first operand.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first operand.","pos":[0,47]}]},{"pos":[40335,40383],"content":"An expression that specifies the second operand.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second operand.","pos":[0,48]}]},{"pos":[40480,40597],"content":"A new DbFunctionExpression that returns the value produced by performing the bitwise OR of <bpt id=\"p1\">**</bpt>value1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>value2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the value produced by performing the bitwise OR of **value1** and **value2**."},{"pos":[40801,40822],"content":"<bpt id=\"p1\">**</bpt>value1<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>value2<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**value1** **value2**"},{"pos":[40919,40940],"content":"<bpt id=\"p1\">**</bpt>value1<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>value2<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**value1** **value2**"},{"pos":[41692,41984],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseXor' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'BitwiseXor' function with the specified arguments, which must have the same integer numeric result type.","pos":[0,216],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseXor' function with the specified arguments, which must have the same integer numeric result type."},{"content":"The result type of the expression is the same as the type of the arguments.","pos":[217,292]}]},{"pos":[42308,42355],"content":"An expression that specifies the first operand.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first operand.","pos":[0,47]}]},{"pos":[42449,42497],"content":"An expression that specifies the second operand.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second operand.","pos":[0,48]}]},{"pos":[42594,42727],"content":"A new DbFunctionExpression that returns the value produced by performing the bitwise XOR (exclusive OR) of <bpt id=\"p1\">**</bpt>value1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>value2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the value produced by performing the bitwise XOR (exclusive OR) of **value1** and **value2**."},{"pos":[42932,42953],"content":"<bpt id=\"p1\">**</bpt>value1<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>value2<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**value1** **value2**"},{"pos":[43050,43071],"content":"<bpt id=\"p1\">**</bpt>value1<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>value2<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**value1** **value2**"},{"pos":[43679,43978],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Ceiling' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of **value**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Ceiling' function with the specified argument, which must each have a single, double or decimal result type.","pos":[0,220],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Ceiling' function with the specified argument, which must each have a single, double or decimal result type."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept>.","pos":[221,299],"source":" The result type of the expression is the same as the result type of **value**."}]},{"pos":[44244,44291],"content":"An expression that specifies the numeric value.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the numeric value.","pos":[0,47]}]},{"pos":[44388,44484],"content":"A new DbFunctionExpression that returns the smallest integer value not less than than <bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the smallest integer value not less than than **value**."},{"pos":[44688,44693],"content":"value","needQuote":false,"needEscape":true,"nodes":[{"content":"value","pos":[0,5]}]},{"pos":[44794,44799],"content":"value","needQuote":false,"needEscape":true,"nodes":[{"content":"value","pos":[0,5]}]},{"pos":[45533,45779],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Concat' function with the specified arguments, which must each have a string result type. The result type of the expression is string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Concat' function with the specified arguments, which must each have a string result type.","pos":[0,201],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Concat' function with the specified arguments, which must each have a string result type."},{"content":"The result type of the expression is string.","pos":[202,246]}]},{"pos":[46102,46201],"content":"An expression that specifies the string that should appear first in the concatenated result string.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string that should appear first in the concatenated result string.","pos":[0,99]}]},{"pos":[46296,46396],"content":"An expression that specifies the string that should appear second in the concatenated result string.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string that should appear second in the concatenated result string.","pos":[0,100]}]},{"pos":[46493,46558],"content":"A new DbFunctionExpression that produces the concatenated string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that produces the concatenated string.","pos":[0,65]}]},{"pos":[46759,46782],"content":"<bpt id=\"p1\">**</bpt>string1<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>string2<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**string1** **string2**"},{"pos":[46879,46902],"content":"<bpt id=\"p1\">**</bpt>string1<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>string2<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**string1** **string2**"},{"pos":[47644,47893],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Contains' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Contains' function with the specified arguments, which must each have a string result type.","pos":[0,203],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Contains' function with the specified arguments, which must each have a string result type."},{"content":"The result type of the expression is Boolean.","pos":[204,249]}]},{"pos":[48234,48327],"content":"An expression that specifies the string to search for any occurence of <bpt id=\"p1\">**</bpt>searchedForString<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the string to search for any occurence of **searchedForString**."},{"pos":[48432,48508],"content":"An expression that specifies the string to search for in <bpt id=\"p1\">**</bpt>searchedString<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the string to search for in **searchedString**."},{"pos":[48597,48734],"content":"A new DbFunctionExpression that returns a Boolean value indicating whether or not <bpt id=\"p1\">**</bpt>searchedForString<ept id=\"p1\">**</ept> occurs within <bpt id=\"p2\">**</bpt>searchedString<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns a Boolean value indicating whether or not **searchedForString** occurs within **searchedString**."},{"pos":[48937,48977],"content":"<bpt id=\"p1\">**</bpt>searchedString<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>searchedForString<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**searchedString** **searchedForString**"},{"pos":[49074,49114],"content":"<bpt id=\"p1\">**</bpt>searchedString<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>searchedForString<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**searchedString** **searchedForString**"},{"pos":[49712,49918],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Count' function over the specified collection. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Count' function over the specified collection.","pos":[0,158],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Count' function over the specified collection."},{"content":"The result type of the expression is Edm.Int32.","pos":[159,206]}]},{"pos":[50192,50282],"content":"An expression that specifies the collection over which the count value should be computed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the collection over which the count value should be computed.","pos":[0,90]}]},{"pos":[50379,50436],"content":"A new DbFunctionExpression that produces the count value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that produces the count value.","pos":[0,57]}]},{"pos":[50638,50648],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[50749,50759],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[52047,52378],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CreateDateTime' function with the specified arguments. **second** must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.DateTime.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'CreateDateTime' function with the specified arguments.","pos":[0,166],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CreateDateTime' function with the specified arguments."},{"content":"<bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept> must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32.","pos":[167,280],"source":"**second** must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32."},{"content":"The result type of the expression is Edm.DateTime.","pos":[281,331]}]},{"pos":[52903,52976],"content":"An expression that provides the year value for the new DateTime instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the year value for the new DateTime instance.","pos":[0,73]}]},{"pos":[53069,53143],"content":"An expression that provides the month value for the new DateTime instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the month value for the new DateTime instance.","pos":[0,74]}]},{"pos":[53234,53306],"content":"An expression that provides the day value for the new DateTime instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the day value for the new DateTime instance.","pos":[0,72]}]},{"pos":[53398,53471],"content":"An expression that provides the hour value for the new DateTime instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the hour value for the new DateTime instance.","pos":[0,73]}]},{"pos":[53565,53640],"content":"An expression that provides the minute value for the new DateTime instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the minute value for the new DateTime instance.","pos":[0,75]}]},{"pos":[53734,53809],"content":"An expression that provides the second value for the new DateTime instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the second value for the new DateTime instance.","pos":[0,75]}]},{"pos":[53906,53991],"content":"A new DbFunctionExpression that returns a new DateTime based on the specified values.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that returns a new DateTime based on the specified values.","pos":[0,85]}]},{"pos":[54200,54257],"content":"<bpt id=\"p1\">**</bpt>year<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>month<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>day<ept id=\"p3\">**</ept> <bpt id=\"p4\">**</bpt>hour<ept id=\"p4\">**</ept> <bpt id=\"p5\">**</bpt>minute<ept id=\"p5\">**</ept> <bpt id=\"p6\">**</bpt>second<ept id=\"p6\">**</ept>","needQuote":false,"needEscape":true,"source":"**year** **month** **day** **hour** **minute** **second**"},{"pos":[54354,54411],"content":"<bpt id=\"p1\">**</bpt>year<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>month<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>day<ept id=\"p3\">**</ept> <bpt id=\"p4\">**</bpt>hour<ept id=\"p4\">**</ept> <bpt id=\"p5\">**</bpt>minute<ept id=\"p5\">**</ept> <bpt id=\"p6\">**</bpt>second<ept id=\"p6\">**</ept>","needQuote":false,"needEscape":true,"source":"**year** **month** **day** **hour** **minute** **second**"},{"pos":[55856,56199],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CreateDateTimeOffset' function with the specified arguments. **second** must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.DateTimeOffset.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'CreateDateTimeOffset' function with the specified arguments.","pos":[0,172],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CreateDateTimeOffset' function with the specified arguments."},{"content":"<bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept> must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32.","pos":[173,286],"source":"**second** must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32."},{"content":"The result type of the expression is Edm.DateTimeOffset.","pos":[287,343]}]},{"pos":[56791,56870],"content":"An expression that provides the year value for the new DateTimeOffset instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the year value for the new DateTimeOffset instance.","pos":[0,79]}]},{"pos":[56963,57043],"content":"An expression that provides the month value for the new DateTimeOffset instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the month value for the new DateTimeOffset instance.","pos":[0,80]}]},{"pos":[57134,57212],"content":"An expression that provides the day value for the new DateTimeOffset instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the day value for the new DateTimeOffset instance.","pos":[0,78]}]},{"pos":[57304,57383],"content":"An expression that provides the hour value for the new DateTimeOffset instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the hour value for the new DateTimeOffset instance.","pos":[0,79]}]},{"pos":[57477,57558],"content":"An expression that provides the minute value for the new DateTimeOffset instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the minute value for the new DateTimeOffset instance.","pos":[0,81]}]},{"pos":[57652,57733],"content":"An expression that provides the second value for the new DateTimeOffset instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the second value for the new DateTimeOffset instance.","pos":[0,81]}]},{"pos":[57835,57951],"content":"An expression that provides the number of minutes in the time zone offset value for the new DateTimeOffset instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the number of minutes in the time zone offset value for the new DateTimeOffset instance.","pos":[0,116]}]},{"pos":[58048,58139],"content":"A new DbFunctionExpression that returns a new DateTimeOffset based on the specified values.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that returns a new DateTimeOffset based on the specified values.","pos":[0,91]}]},{"pos":[58354,58430],"content":"<bpt id=\"p1\">**</bpt>year<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>month<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>day<ept id=\"p3\">**</ept> <bpt id=\"p4\">**</bpt>hour<ept id=\"p4\">**</ept> <bpt id=\"p5\">**</bpt>minute<ept id=\"p5\">**</ept> <bpt id=\"p6\">**</bpt>second<ept id=\"p6\">**</ept> <bpt id=\"p7\">**</bpt>timeZoneOffset<ept id=\"p7\">**</ept>","needQuote":false,"needEscape":true,"source":"**year** **month** **day** **hour** **minute** **second** **timeZoneOffset**"},{"pos":[58527,58603],"content":"<bpt id=\"p1\">**</bpt>year<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>month<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>day<ept id=\"p3\">**</ept> <bpt id=\"p4\">**</bpt>hour<ept id=\"p4\">**</ept> <bpt id=\"p5\">**</bpt>minute<ept id=\"p5\">**</ept> <bpt id=\"p6\">**</bpt>second<ept id=\"p6\">**</ept> <bpt id=\"p7\">**</bpt>timeZoneOffset<ept id=\"p7\">**</ept>","needQuote":false,"needEscape":true,"source":"**year** **month** **day** **hour** **minute** **second** **timeZoneOffset**"},{"pos":[59482,59805],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CreateTime' function with the specified arguments. **second** must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.Time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'CreateTime' function with the specified arguments.","pos":[0,162],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CreateTime' function with the specified arguments."},{"content":"<bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept> must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32.","pos":[163,276],"source":"**second** must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32."},{"content":"The result type of the expression is Edm.Time.","pos":[277,323]}]},{"pos":[60173,60246],"content":"An expression that provides the hour value for the new DateTime instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the hour value for the new DateTime instance.","pos":[0,73]}]},{"pos":[60340,60415],"content":"An expression that provides the minute value for the new DateTime instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the minute value for the new DateTime instance.","pos":[0,75]}]},{"pos":[60509,60584],"content":"An expression that provides the second value for the new DateTime instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that provides the second value for the new DateTime instance.","pos":[0,75]}]},{"pos":[60681,60762],"content":"A new DbFunctionExpression that returns a new Time based on the specified values.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that returns a new Time based on the specified values.","pos":[0,81]}]},{"pos":[60967,60997],"content":"<bpt id=\"p1\">**</bpt>hour<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>minute<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>second<ept id=\"p3\">**</ept>","needQuote":false,"needEscape":true,"source":"**hour** **minute** **second**"},{"pos":[61094,61124],"content":"<bpt id=\"p1\">**</bpt>hour<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>minute<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>second<ept id=\"p3\">**</ept>","needQuote":false,"needEscape":true,"source":"**hour** **minute** **second**"},{"pos":[61642,61780],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'CurrentDateTime' function.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CurrentDateTime' function."},{"pos":[62006,62100],"content":"A new DbFunctionExpression that returns the current date and time as an Edm.DateTime instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that returns the current date and time as an Edm.DateTime instance.","pos":[0,94]}]},{"pos":[62756,62900],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'CurrentDateTimeOffset' function.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CurrentDateTimeOffset' function."},{"pos":[63132,63232],"content":"A new DbFunctionExpression that returns the current date and time as an Edm.DateTimeOffset instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that returns the current date and time as an Edm.DateTimeOffset instance.","pos":[0,100]}]},{"pos":[63879,64020],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'CurrentUtcDateTime' function.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CurrentUtcDateTime' function."},{"pos":[64249,64347],"content":"A new DbFunctionExpression that returns the current UTC date and time as an Edm.DateTime instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that returns the current UTC date and time as an Edm.DateTime instance.","pos":[0,98]}]},{"pos":[65046,65306],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Day' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Day' function with the specified argument, which must have a DateTime or DateTimeOffset result type.","pos":[0,212],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Day' function with the specified argument, which must have a DateTime or DateTimeOffset result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[213,260]}]},{"pos":[65576,65654],"content":"An expression that specifies the value from which the day should be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the value from which the day should be retrieved.","pos":[0,78]}]},{"pos":[65751,65832],"content":"A new DbFunctionExpression that returns the integer day value from <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the integer day value from **dateValue**."},{"pos":[66032,66041],"content":"dateValue","needQuote":false,"needEscape":true,"nodes":[{"content":"dateValue","pos":[0,9]}]},{"pos":[66142,66151],"content":"dateValue","needQuote":false,"needEscape":true,"nodes":[{"content":"dateValue","pos":[0,9]}]},{"pos":[66771,67037],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DayOfYear' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'DayOfYear' function with the specified argument, which must have a DateTime or DateTimeOffset result type.","pos":[0,218],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DayOfYear' function with the specified argument, which must have a DateTime or DateTimeOffset result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[219,266]}]},{"pos":[67313,67407],"content":"An expression that specifies the value from which the day within the year should be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the value from which the day within the year should be retrieved.","pos":[0,94]}]},{"pos":[67504,67593],"content":"A new DbFunctionExpression that returns the integer day of year value from <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the integer day of year value from **dateValue**."},{"pos":[67799,67808],"content":"dateValue","needQuote":false,"needEscape":true,"nodes":[{"content":"dateValue","pos":[0,9]}]},{"pos":[67909,67918],"content":"dateValue","needQuote":false,"needEscape":true,"nodes":[{"content":"dateValue","pos":[0,9]}]},{"pos":[68662,68931],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffDays' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'DiffDays' function with the specified arguments, which must each have DateTime or DateTimeOffset result type.","pos":[0,221],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffDays' function with the specified arguments, which must each have DateTime or DateTimeOffset result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[222,269]}]},{"pos":[69265,69324],"content":"An expression that specifies the first date value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first date value argument.","pos":[0,59]}]},{"pos":[69422,69482],"content":"An expression that specifies the second date value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second date value argument.","pos":[0,60]}]},{"pos":[69579,69703],"content":"A new DbFunctionExpression that returns the number of days that is the difference between <bpt id=\"p1\">**</bpt>dateValue1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>dateValue2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the number of days that is the difference between **dateValue1** and **dateValue2**."},{"pos":[70551,70827],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffHours' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'DiffHours' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type.","pos":[0,228],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffHours' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[229,276]}]},{"pos":[71162,71221],"content":"An expression that specifies the first time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first time value argument.","pos":[0,59]}]},{"pos":[71319,71379],"content":"An expression that specifies the second time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second time value argument.","pos":[0,60]}]},{"pos":[71476,71601],"content":"A new DbFunctionExpression that returns the number of hours that is the difference between <bpt id=\"p1\">**</bpt>timeValue1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>timeValue2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the number of hours that is the difference between **timeValue1** and **timeValue2**."},{"pos":[72485,72768],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMicroseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'DiffMicroseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type.","pos":[0,235],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMicroseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[236,283]}]},{"pos":[73110,73169],"content":"An expression that specifies the first time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first time value argument.","pos":[0,59]}]},{"pos":[73267,73327],"content":"An expression that specifies the second time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second time value argument.","pos":[0,60]}]},{"pos":[73424,73556],"content":"A new DbFunctionExpression that returns the number of microseconds that is the difference between <bpt id=\"p1\">**</bpt>timeValue1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>timeValue2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the number of microseconds that is the difference between **timeValue1** and **timeValue2**."},{"pos":[74447,74730],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMilliseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'DiffMilliseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type.","pos":[0,235],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMilliseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[236,283]}]},{"pos":[75072,75131],"content":"An expression that specifies the first time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first time value argument.","pos":[0,59]}]},{"pos":[75229,75289],"content":"An expression that specifies the second time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second time value argument.","pos":[0,60]}]},{"pos":[75386,75518],"content":"A new DbFunctionExpression that returns the number of milliseconds that is the difference between <bpt id=\"p1\">**</bpt>timeValue1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>timeValue2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the number of milliseconds that is the difference between **timeValue1** and **timeValue2**."},{"pos":[76384,76662],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMinutes' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'DiffMinutes' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type.","pos":[0,230],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMinutes' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[231,278]}]},{"pos":[76999,77058],"content":"An expression that specifies the first time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first time value argument.","pos":[0,59]}]},{"pos":[77156,77216],"content":"An expression that specifies the second time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second time value argument.","pos":[0,60]}]},{"pos":[77313,77440],"content":"A new DbFunctionExpression that returns the number of minutes that is the difference between <bpt id=\"p1\">**</bpt>timeValue1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>timeValue2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the number of minutes that is the difference between **timeValue1** and **timeValue2**."},{"pos":[78296,78567],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMonths' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'DiffMonths' function with the specified arguments, which must each have DateTime or DateTimeOffset result type.","pos":[0,223],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMonths' function with the specified arguments, which must each have DateTime or DateTimeOffset result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[224,271]}]},{"pos":[78903,78962],"content":"An expression that specifies the first date value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first date value argument.","pos":[0,59]}]},{"pos":[79060,79120],"content":"An expression that specifies the second date value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second date value argument.","pos":[0,60]}]},{"pos":[79217,79343],"content":"A new DbFunctionExpression that returns the number of months that is the difference between <bpt id=\"p1\">**</bpt>dateValue1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>dateValue2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the number of months that is the difference between **dateValue1** and **dateValue2**."},{"pos":[80223,80505],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffNanoseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'DiffNanoseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type.","pos":[0,234],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffNanoseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[235,282]}]},{"pos":[80846,80905],"content":"An expression that specifies the first time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first time value argument.","pos":[0,59]}]},{"pos":[81003,81063],"content":"An expression that specifies the second time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second time value argument.","pos":[0,60]}]},{"pos":[81160,81291],"content":"A new DbFunctionExpression that returns the number of nanoseconds that is the difference between <bpt id=\"p1\">**</bpt>timeValue1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>timeValue2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the number of nanoseconds that is the difference between **timeValue1** and **timeValue2**."},{"pos":[82156,82434],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffSeconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'DiffSeconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type.","pos":[0,230],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffSeconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[231,278]}]},{"pos":[82771,82830],"content":"An expression that specifies the first time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first time value argument.","pos":[0,59]}]},{"pos":[82928,82988],"content":"An expression that specifies the second time value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second time value argument.","pos":[0,60]}]},{"pos":[83085,83212],"content":"A new DbFunctionExpression that returns the number of seconds that is the difference between <bpt id=\"p1\">**</bpt>timeValue1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>timeValue2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the number of seconds that is the difference between **timeValue1** and **timeValue2**."},{"pos":[84063,84333],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffYears' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'DiffYears' function with the specified arguments, which must each have DateTime or DateTimeOffset result type.","pos":[0,222],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffYears' function with the specified arguments, which must each have DateTime or DateTimeOffset result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[223,270]}]},{"pos":[84668,84727],"content":"An expression that specifies the first date value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the first date value argument.","pos":[0,59]}]},{"pos":[84825,84885],"content":"An expression that specifies the second date value argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the second date value argument.","pos":[0,60]}]},{"pos":[84982,85107],"content":"A new DbFunctionExpression that returns the number of years that is the difference between <bpt id=\"p1\">**</bpt>dateValue1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>dateValue2<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the number of years that is the difference between **dateValue1** and **dateValue2**."},{"pos":[85951,86200],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'EndsWith' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'EndsWith' function with the specified arguments, which must each have a string result type.","pos":[0,203],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'EndsWith' function with the specified arguments, which must each have a string result type."},{"content":"The result type of the expression is Boolean.","pos":[204,249]}]},{"pos":[86538,86628],"content":"An expression that specifies the string that is searched at the end for string <bpt id=\"p1\">**</bpt>suffix<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the string that is searched at the end for string **suffix**."},{"pos":[86722,86823],"content":"An expression that specifies the target string that is searched for at the end of <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the target string that is searched for at the end of **stringArgument**."},{"pos":[86920,87042],"content":"A new DbFunctionExpression that returns a Boolean value indicating whether or not <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> ends with <bpt id=\"p2\">**</bpt>suffix<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns a Boolean value indicating whether or not **stringArgument** ends with **suffix**."},{"pos":[87741,88038],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Floor' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of **value**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Floor' function with the specified argument, which must each have a single, double or decimal result type.","pos":[0,218],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Floor' function with the specified argument, which must each have a single, double or decimal result type."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept>.","pos":[219,297],"source":" The result type of the expression is the same as the result type of **value**."}]},{"pos":[88302,88349],"content":"An expression that specifies the numeric value.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the numeric value.","pos":[0,47]}]},{"pos":[88446,88539],"content":"A new DbFunctionExpression that returns the largest integer value not greater than <bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the largest integer value not greater than **value**."},{"pos":[88741,88746],"content":"value","needQuote":false,"needEscape":true,"nodes":[{"content":"value","pos":[0,5]}]},{"pos":[88847,88852],"content":"value","needQuote":false,"needEscape":true,"nodes":[{"content":"value","pos":[0,5]}]},{"pos":[89532,89798],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'GetTotalOffsetMinutes' function with the specified argument, which must have a DateTimeOffset result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'GetTotalOffsetMinutes' function with the specified argument, which must have a DateTimeOffset result type.","pos":[0,218],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'GetTotalOffsetMinutes' function with the specified argument, which must have a DateTimeOffset result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[219,266]}]},{"pos":[90112,90224],"content":"An expression that specifies the DateTimeOffset value from which the minute offset from GMT should be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the DateTimeOffset value from which the minute offset from GMT should be retrieved.","pos":[0,112]}]},{"pos":[90321,90429],"content":"A new DbFunctionExpression that returns the number of minutes <bpt id=\"p1\">**</bpt>dateTimeOffsetArgument<ept id=\"p1\">**</ept> is offset from GMT.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the number of minutes **dateTimeOffsetArgument** is offset from GMT."},{"pos":[90647,90669],"content":"dateTimeOffsetArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"dateTimeOffsetArgument","pos":[0,22]}]},{"pos":[90770,90792],"content":"dateTimeOffsetArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"dateTimeOffsetArgument","pos":[0,22]}]},{"pos":[91387,91654],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Hour' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Hour' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type.","pos":[0,219],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Hour' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[220,267]}]},{"pos":[91925,92004],"content":"An expression that specifies the value from which the hour should be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the value from which the hour should be retrieved.","pos":[0,79]}]},{"pos":[92101,92183],"content":"A new DbFunctionExpression that returns the integer hour value from <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the integer hour value from **timeValue**."},{"pos":[92384,92393],"content":"timeValue","needQuote":false,"needEscape":true,"nodes":[{"content":"timeValue","pos":[0,9]}]},{"pos":[92494,92503],"content":"timeValue","needQuote":false,"needEscape":true,"nodes":[{"content":"timeValue","pos":[0,9]}]},{"pos":[93242,93492],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'IndexOf' function with the specified arguments, which must each have a string result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'IndexOf' function with the specified arguments, which must each have a string result type.","pos":[0,202],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'IndexOf' function with the specified arguments, which must each have a string result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[203,250]}]},{"pos":[93504,93554],"content":"The index returned by IndexOf is \\<b>1-based\\</b>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index returned by IndexOf is <ph id=\"ph1\">\\&lt;</ph>b&gt;1-based<ph id=\"ph2\">\\&lt;</ph>/b&gt;.","pos":[0,50],"source":"The index returned by IndexOf is \\<b>1-based\\</b>."}]},{"pos":[93893,93964],"content":"An expression that specifies the string to search for <bpt id=\"p1\">**</bpt>stringToFind<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the string to search for **stringToFind**."},{"pos":[94064,94156],"content":"An expression that specifies the string to locate within <bpt id=\"p1\">**</bpt>searchString<ept id=\"p1\">**</ept> should be checked.","needQuote":true,"needEscape":true,"source":"An expression that specifies the string to locate within **searchString** should be checked."},{"pos":[94253,94349],"content":"A new DbFunctionExpression that returns the first index of <bpt id=\"p1\">**</bpt>stringToFind<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>searchString<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the first index of **stringToFind** in **searchString**."},{"pos":[94551,94584],"content":"<bpt id=\"p1\">**</bpt>searchString<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>stringToFind<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**searchString** **stringToFind**"},{"pos":[94681,94714],"content":"<bpt id=\"p1\">**</bpt>searchString<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>stringToFind<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**searchString** **stringToFind**"},{"pos":[95436,95695],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Left' function with the specified arguments, which must have a string and integer numeric result type. The result type of the expression is string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Left' function with the specified arguments, which must have a string and integer numeric result type.","pos":[0,214],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Left' function with the specified arguments, which must have a string and integer numeric result type."},{"content":"The result type of the expression is string.","pos":[215,259]}]},{"pos":[96029,96114],"content":"An expression that specifies the string from which to extract the leftmost substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string from which to extract the leftmost substring.","pos":[0,85]}]},{"pos":[96208,96309],"content":"An expression that specifies the length of the leftmost substring to extract from <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the length of the leftmost substring to extract from **stringArgument**."},{"pos":[96406,96518],"content":"A new DbFunctionExpression that returns the the leftmost substring of length <bpt id=\"p1\">**</bpt>length<ept id=\"p1\">**</ept> from <bpt id=\"p2\">**</bpt>stringArgument<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the the leftmost substring of length **length** from **stringArgument**."},{"pos":[96717,96746],"content":"<bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>length<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**stringArgument** **length**"},{"pos":[96845,96859],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[97464,97707],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Length' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Length' function with the specified argument, which must have a string result type.","pos":[0,195],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Length' function with the specified argument, which must have a string result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[196,243]}]},{"pos":[97990,98070],"content":"An expression that specifies the string for which the length should be computed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string for which the length should be computed.","pos":[0,80]}]},{"pos":[98167,98240],"content":"A new DbFunctionExpression that returns the length of <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the length of **stringArgument**."},{"pos":[98443,98457],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[98558,98572],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[99192,99401],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BigCount' function over the specified collection. The result type of the expression is Edm.Int64.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'BigCount' function over the specified collection.","pos":[0,161],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BigCount' function over the specified collection."},{"content":"The result type of the expression is Edm.Int64.","pos":[162,209]}]},{"pos":[99679,99769],"content":"An expression that specifies the collection over which the count value should be computed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the collection over which the count value should be computed.","pos":[0,90]}]},{"pos":[99866,99923],"content":"A new DbFunctionExpression that produces the count value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that produces the count value.","pos":[0,57]}]},{"pos":[100129,100139],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[100240,100250],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[100840,101081],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Max' function over the specified collection. The result type of the expression is the same as the element type of the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Max' function over the specified collection.","pos":[0,156],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Max' function over the specified collection."},{"content":"The result type of the expression is the same as the element type of the collection.","pos":[157,241]}]},{"pos":[101353,101445],"content":"An expression that specifies the collection from which the maximum value should be retrieved","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the collection from which the maximum value should be retrieved","pos":[0,92]}]},{"pos":[101542,101601],"content":"A new DbFunctionExpression that produces the maximum value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that produces the maximum value.","pos":[0,59]}]},{"pos":[101801,101811],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[101912,101922],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[102552,102826],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Millisecond' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Millisecond' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type.","pos":[0,226],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Millisecond' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[227,274]}]},{"pos":[103104,103190],"content":"An expression that specifies the value from which the millisecond should be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the value from which the millisecond should be retrieved.","pos":[0,86]}]},{"pos":[103287,103376],"content":"A new DbFunctionExpression that returns the integer millisecond value from <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the integer millisecond value from **timeValue**."},{"pos":[103584,103593],"content":"timeValue","needQuote":false,"needEscape":true,"nodes":[{"content":"timeValue","pos":[0,9]}]},{"pos":[103694,103703],"content":"timeValue","needQuote":false,"needEscape":true,"nodes":[{"content":"timeValue","pos":[0,9]}]},{"pos":[104293,104534],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Min' function over the specified collection. The result type of the expression is the same as the element type of the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Min' function over the specified collection.","pos":[0,156],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Min' function over the specified collection."},{"content":"The result type of the expression is the same as the element type of the collection.","pos":[157,241]}]},{"pos":[104806,104899],"content":"An expression that specifies the collection from which the minimum value should be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the collection from which the minimum value should be retrieved.","pos":[0,93]}]},{"pos":[104996,105055],"content":"A new DbFunctionExpression that produces the minimum value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that produces the minimum value.","pos":[0,59]}]},{"pos":[105255,105265],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[105366,105376],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[105981,106250],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Minute' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Minute' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type.","pos":[0,221],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Minute' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[222,269]}]},{"pos":[106523,106604],"content":"An expression that specifies the value from which the minute should be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the value from which the minute should be retrieved.","pos":[0,81]}]},{"pos":[106701,106785],"content":"A new DbFunctionExpression that returns the integer minute value from <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the integer minute value from **timeValue**."},{"pos":[106988,106997],"content":"timeValue","needQuote":false,"needEscape":true,"nodes":[{"content":"timeValue","pos":[0,9]}]},{"pos":[107098,107107],"content":"timeValue","needQuote":false,"needEscape":true,"nodes":[{"content":"timeValue","pos":[0,9]}]},{"pos":[107707,107969],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Month' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Month' function with the specified argument, which must have a DateTime or DateTimeOffset result type.","pos":[0,214],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Month' function with the specified argument, which must have a DateTime or DateTimeOffset result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[215,262]}]},{"pos":[108241,108321],"content":"An expression that specifies the value from which the month should be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the value from which the month should be retrieved.","pos":[0,80]}]},{"pos":[108418,108501],"content":"A new DbFunctionExpression that returns the integer month value from <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the integer month value from **dateValue**."},{"pos":[108703,108712],"content":"dateValue","needQuote":false,"needEscape":true,"nodes":[{"content":"dateValue","pos":[0,9]}]},{"pos":[108813,108822],"content":"dateValue","needQuote":false,"needEscape":true,"nodes":[{"content":"dateValue","pos":[0,9]}]},{"pos":[109302,109432],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'NewGuid' function.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'NewGuid' function."},{"pos":[109650,109707],"content":"A new DbFunctionExpression that returns a new GUID value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that returns a new GUID value.","pos":[0,57]}]},{"pos":[110534,110815],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Power' function with the specified arguments, which must have numeric result types. The result type of the expression is the same as the result type of **baseArgument**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Power' function with the specified arguments, which must have numeric result types.","pos":[0,195],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Power' function with the specified arguments, which must have numeric result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>baseArgument<ept id=\"p1\">**</ept>.","pos":[196,281],"source":" The result type of the expression is the same as the result type of **baseArgument**."}]},{"pos":[111148,111223],"content":"An expression that specifies the numeric value to raise to the given power.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the numeric value to raise to the given power.","pos":[0,75]}]},{"pos":[111319,111401],"content":"An expression that specifies the power to which <bpt id=\"p1\">**</bpt>baseArgument<ept id=\"p1\">**</ept> should be raised.","needQuote":true,"needEscape":true,"source":"An expression that specifies the power to which **baseArgument** should be raised."},{"pos":[111498,111614],"content":"A new DbFunctionExpression that returns the value of <bpt id=\"p1\">**</bpt>baseArgument<ept id=\"p1\">**</ept> raised to the power specified by <bpt id=\"p2\">**</bpt>exponent<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the value of **baseArgument** raised to the power specified by **exponent**."},{"pos":[111814,111843],"content":"<bpt id=\"p1\">**</bpt>baseArgument<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>exponent<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**baseArgument** **exponent**"},{"pos":[111940,111969],"content":"<bpt id=\"p1\">**</bpt>baseArgument<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>exponent<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**baseArgument** **exponent**"},{"pos":[112835,113087],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Replace' function with the specified arguments, which must each have a string result type. The result type of the expression is also string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Replace' function with the specified arguments, which must each have a string result type.","pos":[0,202],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Replace' function with the specified arguments, which must each have a string result type."},{"content":"The result type of the expression is also string.","pos":[203,252]}]},{"pos":[113485,113571],"content":"An expression that specifies the string in which to perform the replacement operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string in which to perform the replacement operation.","pos":[0,86]}]},{"pos":[113668,113725],"content":"An expression that specifies the string that is replaced.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string that is replaced.","pos":[0,57]}]},{"pos":[113824,113876],"content":"An expression that specifies the replacement string.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the replacement string.","pos":[0,52]}]},{"pos":[113973,114124],"content":"A new DbFunctionExpression than returns a new string based on <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> where every occurence of <bpt id=\"p2\">**</bpt>toReplace<ept id=\"p2\">**</ept> is replaced by <bpt id=\"p3\">**</bpt>replacement<ept id=\"p3\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression than returns a new string based on **stringArgument** where every occurence of **toReplace** is replaced by **replacement**."},{"pos":[114326,114374],"content":"<bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>toReplace<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>replacement<ept id=\"p3\">**</ept>","needQuote":false,"needEscape":true,"source":"**stringArgument** **toReplace** **replacement**"},{"pos":[114471,114519],"content":"<bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>toReplace<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>replacement<ept id=\"p3\">**</ept>","needQuote":false,"needEscape":true,"source":"**stringArgument** **toReplace** **replacement**"},{"pos":[115127,115373],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Reverse' function with the specified argument, which must have a string result type. The result type of the expression is also string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Reverse' function with the specified argument, which must have a string result type.","pos":[0,196],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Reverse' function with the specified argument, which must have a string result type."},{"content":"The result type of the expression is also string.","pos":[197,246]}]},{"pos":[115657,115708],"content":"An expression that specifies the string to reverse.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string to reverse.","pos":[0,51]}]},{"pos":[115805,115887],"content":"A new DbFunctionExpression that produces the reversed value of <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that produces the reversed value of **stringArgument**."},{"pos":[116091,116105],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[116206,116220],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[116949,117209],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Right' function with the specified arguments, which must have a string and integer numeric result type. The result type of the expression is string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Right' function with the specified arguments, which must have a string and integer numeric result type.","pos":[0,215],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Right' function with the specified arguments, which must have a string and integer numeric result type."},{"content":"The result type of the expression is string.","pos":[216,260]}]},{"pos":[117544,117630],"content":"An expression that specifies the string from which to extract the rightmost substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string from which to extract the rightmost substring.","pos":[0,86]}]},{"pos":[117724,117826],"content":"An expression that specifies the length of the rightmost substring to extract from <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the length of the rightmost substring to extract from **stringArgument**."},{"pos":[117923,118036],"content":"A new DbFunctionExpression that returns the the rightmost substring of length <bpt id=\"p1\">**</bpt>length<ept id=\"p1\">**</ept> from <bpt id=\"p2\">**</bpt>stringArgument<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the the rightmost substring of length **length** from **stringArgument**."},{"pos":[118236,118265],"content":"<bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>length<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**stringArgument** **length**"},{"pos":[118364,118378],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[118978,119275],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Round' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of **value**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Round' function with the specified argument, which must each have a single, double or decimal result type.","pos":[0,218],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Round' function with the specified argument, which must each have a single, double or decimal result type."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept>.","pos":[219,297],"source":" The result type of the expression is the same as the result type of **value**."}]},{"pos":[119539,119595],"content":"An expression that specifies the numeric value to round.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the numeric value to round.","pos":[0,56]}]},{"pos":[119692,119783],"content":"A new DbFunctionExpression that rounds the specified argument to the nearest integer value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that rounds the specified argument to the nearest integer value.","pos":[0,91]}]},{"pos":[119985,119990],"content":"value","needQuote":false,"needEscape":true,"nodes":[{"content":"value","pos":[0,5]}]},{"pos":[120091,120096],"content":"value","needQuote":false,"needEscape":true,"nodes":[{"content":"value","pos":[0,5]}]},{"pos":[120825,121132],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Round' function with the specified arguments, which must have a single, double or decimal, and integer result types. The result type of the expression is the same as the result type of **value**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Round' function with the specified arguments, which must have a single, double or decimal, and integer result types.","pos":[0,228],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Round' function with the specified arguments, which must have a single, double or decimal, and integer result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept>.","pos":[229,307],"source":" The result type of the expression is the same as the result type of **value**."}]},{"pos":[121449,121505],"content":"An expression that specifies the numeric value to round.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the numeric value to round.","pos":[0,56]}]},{"pos":[121599,121683],"content":"An expression that specifies the number of digits of precision to use when rounding.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the number of digits of precision to use when rounding.","pos":[0,84]}]},{"pos":[121780,121914],"content":"A new DbFunctionExpression that rounds the specified argument to the nearest integer value, with precision as specified by <bpt id=\"p1\">**</bpt>digits<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that rounds the specified argument to the nearest integer value, with precision as specified by **digits**."},{"pos":[122114,122134],"content":"<bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>digits<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**value** **digits**"},{"pos":[122231,122251],"content":"<bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>digits<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**value** **digits**"},{"pos":[122854,123123],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Second' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Second' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type.","pos":[0,221],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Second' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[222,269]}]},{"pos":[123396,123477],"content":"An expression that specifies the value from which the second should be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the value from which the second should be retrieved.","pos":[0,81]}]},{"pos":[123574,123658],"content":"A new DbFunctionExpression that returns the integer second value from <bpt id=\"p1\">**</bpt>timeValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the integer second value from **timeValue**."},{"pos":[123861,123870],"content":"timeValue","needQuote":false,"needEscape":true,"nodes":[{"content":"timeValue","pos":[0,9]}]},{"pos":[123971,123980],"content":"timeValue","needQuote":false,"needEscape":true,"nodes":[{"content":"timeValue","pos":[0,9]}]},{"pos":[124734,124985],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'StartsWith' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'StartsWith' function with the specified arguments, which must each have a string result type.","pos":[0,205],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'StartsWith' function with the specified arguments, which must each have a string result type."},{"content":"The result type of the expression is Boolean.","pos":[206,251]}]},{"pos":[125325,125417],"content":"An expression that specifies the string that is searched at the start for string <bpt id=\"p1\">**</bpt>prefix<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the string that is searched at the start for string **prefix**."},{"pos":[125511,125614],"content":"An expression that specifies the target string that is searched for at the start of <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"An expression that specifies the target string that is searched for at the start of **stringArgument**."},{"pos":[125711,125835],"content":"A new DbFunctionExpression that returns a Boolean value indicating whether or not <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> starts with <bpt id=\"p2\">**</bpt>prefix<ept id=\"p2\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns a Boolean value indicating whether or not **stringArgument** starts with **prefix**."},{"pos":[126536,126767],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'StDev' function over the non-null members of the specified collection. The result type of the expression is Edm.Double.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'StDev' function over the non-null members of the specified collection.","pos":[0,182],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'StDev' function over the non-null members of the specified collection."},{"content":"The result type of the expression is Edm.Double.","pos":[183,231]}]},{"pos":[127041,127137],"content":"An expression that specifies the collection for which the standard deviation should be computed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the collection for which the standard deviation should be computed.","pos":[0,96]}]},{"pos":[127234,127344],"content":"A new DbFunctionExpression that produces the standard deviation value over non-null members of the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that produces the standard deviation value over non-null members of the collection.","pos":[0,110]}]},{"pos":[127546,127556],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[127657,127667],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[128272,128498],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'StDevP' function over the population of the specified collection. The result type of the expression is Edm.Double.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'StDevP' function over the population of the specified collection.","pos":[0,177],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'StDevP' function over the population of the specified collection."},{"content":"The result type of the expression is Edm.Double.","pos":[178,226]}]},{"pos":[128773,128869],"content":"An expression that specifies the collection for which the standard deviation should be computed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the collection for which the standard deviation should be computed.","pos":[0,96]}]},{"pos":[128966,129036],"content":"A new DbFunctionExpression that produces the standard deviation value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that produces the standard deviation value.","pos":[0,70]}]},{"pos":[129239,129249],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[129350,129360],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[130238,130503],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Substring' function with the specified arguments, which must have a string and integer numeric result types. The result type of the expression is string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Substring' function with the specified arguments, which must have a string and integer numeric result types.","pos":[0,220],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Substring' function with the specified arguments, which must have a string and integer numeric result types."},{"content":"The result type of the expression is string.","pos":[221,265]}]},{"pos":[130515,130592],"content":"Substring requires that the index specified by <bpt id=\"p1\">**</bpt>start<ept id=\"p1\">**</ept> be <ph id=\"ph1\">\\&lt;</ph>b&gt;1-based<ph id=\"ph2\">\\&lt;</ph>/b&gt;.","needQuote":true,"needEscape":true,"source":"Substring requires that the index specified by **start** be \\<b>1-based\\</b>."},{"pos":[130983,131059],"content":"An expression that specifies the string from which to extract the substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string from which to extract the substring.","pos":[0,76]}]},{"pos":[131152,131241],"content":"An expression that specifies the starting index from which the substring should be taken.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the starting index from which the substring should be taken.","pos":[0,89]}]},{"pos":[131335,131392],"content":"An expression that specifies the length of the substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the length of the substring.","pos":[0,57]}]},{"pos":[131489,131610],"content":"A new DbFunctionExpression that returns the substring of length <bpt id=\"p1\">**</bpt>length<ept id=\"p1\">**</ept> from <bpt id=\"p2\">**</bpt>stringArgument<ept id=\"p2\">**</ept> starting at <bpt id=\"p3\">**</bpt>start<ept id=\"p3\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the substring of length **length** from **stringArgument** starting at **start**."},{"pos":[131814,131853],"content":"<bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>start<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>length<ept id=\"p3\">**</ept>","needQuote":false,"needEscape":true,"source":"**stringArgument** **start** **length**"},{"pos":[131950,131989],"content":"<bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>start<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>length<ept id=\"p3\">**</ept>","needQuote":false,"needEscape":true,"source":"**stringArgument** **start** **length**"},{"pos":[132577,132818],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Sum' function over the specified collection. The result type of the expression is the same as the element type of the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Sum' function over the specified collection.","pos":[0,156],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Sum' function over the specified collection."},{"content":"The result type of the expression is the same as the element type of the collection.","pos":[157,241]}]},{"pos":[133090,133172],"content":"An expression that specifies the collection from which the sum should be computed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the collection from which the sum should be computed.","pos":[0,82]}]},{"pos":[133269,133318],"content":"A new DbFunctionExpression that produces the sum.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that produces the sum.","pos":[0,49]}]},{"pos":[133518,133528],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[133629,133639],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[134249,134495],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'ToLower' function with the specified argument, which must have a string result type. The result type of the expression is also string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'ToLower' function with the specified argument, which must have a string result type.","pos":[0,196],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'ToLower' function with the specified argument, which must have a string result type."},{"content":"The result type of the expression is also string.","pos":[197,246]}]},{"pos":[134779,134858],"content":"An expression that specifies the string that should be converted to lower case.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string that should be converted to lower case.","pos":[0,79]}]},{"pos":[134955,135047],"content":"A new DbFunctionExpression that returns value of <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> converted to lower case.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns value of **stringArgument** converted to lower case."},{"pos":[135251,135265],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[135366,135380],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[135990,136236],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'ToUpper' function with the specified argument, which must have a string result type. The result type of the expression is also string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'ToUpper' function with the specified argument, which must have a string result type.","pos":[0,196],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'ToUpper' function with the specified argument, which must have a string result type."},{"content":"The result type of the expression is also string.","pos":[197,246]}]},{"pos":[136520,136599],"content":"An expression that specifies the string that should be converted to upper case.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string that should be converted to upper case.","pos":[0,79]}]},{"pos":[136696,136788],"content":"A new DbFunctionExpression that returns value of <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> converted to upper case.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns value of **stringArgument** converted to upper case."},{"pos":[136992,137006],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[137107,137121],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[137716,137959],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Trim' function with the specified argument, which must have a string result type. The result type of the expression is also string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Trim' function with the specified argument, which must have a string result type.","pos":[0,193],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Trim' function with the specified argument, which must have a string result type."},{"content":"The result type of the expression is also string.","pos":[194,243]}]},{"pos":[138240,138336],"content":"An expression that specifies the string from which leading and trailing space should be removed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string from which leading and trailing space should be removed.","pos":[0,96]}]},{"pos":[138433,138541],"content":"A new DbFunctionExpression that returns value of <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> with leading and trailing space removed.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns value of **stringArgument** with leading and trailing space removed."},{"pos":[138742,138756],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[138857,138871],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[139481,139725],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'RTrim' function with the specified argument, which must have a string result type. The result type of the expression is also string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'RTrim' function with the specified argument, which must have a string result type.","pos":[0,194],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'RTrim' function with the specified argument, which must have a string result type."},{"content":"The result type of the expression is also string.","pos":[195,244]}]},{"pos":[140009,140093],"content":"An expression that specifies the string from which trailing space should be removed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string from which trailing space should be removed.","pos":[0,84]}]},{"pos":[140190,140286],"content":"A new DbFunctionExpression that returns value of <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> with trailing space removed.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns value of **stringArgument** with trailing space removed."},{"pos":[140490,140504],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[140605,140619],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[141239,141483],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'LTrim' function with the specified argument, which must have a string result type. The result type of the expression is also string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'LTrim' function with the specified argument, which must have a string result type.","pos":[0,194],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'LTrim' function with the specified argument, which must have a string result type."},{"content":"The result type of the expression is also string.","pos":[195,244]}]},{"pos":[141769,141852],"content":"An expression that specifies the string from which leading space should be removed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the string from which leading space should be removed.","pos":[0,83]}]},{"pos":[141949,142044],"content":"A new DbFunctionExpression that returns value of <bpt id=\"p1\">**</bpt>stringArgument<ept id=\"p1\">**</ept> with leading space removed.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns value of **stringArgument** with leading space removed."},{"pos":[142250,142264],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[142365,142379],"content":"stringArgument","needQuote":false,"needEscape":true,"nodes":[{"content":"stringArgument","pos":[0,14]}]},{"pos":[143123,143433],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Truncate' function with the specified arguments, which must have a single, double or decimal, and integer result types. The result type of the expression is the same as the result type of **value**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Truncate' function with the specified arguments, which must have a single, double or decimal, and integer result types.","pos":[0,231],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Truncate' function with the specified arguments, which must have a single, double or decimal, and integer result types."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept>.","pos":[232,310],"source":" The result type of the expression is the same as the result type of **value**."}]},{"pos":[143753,143812],"content":"An expression that specifies the numeric value to truncate.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the numeric value to truncate.","pos":[0,59]}]},{"pos":[143906,143992],"content":"An expression that specifies the number of digits of precision to use when truncating.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the number of digits of precision to use when truncating.","pos":[0,86]}]},{"pos":[144089,144226],"content":"A new DbFunctionExpression that truncates the specified argument to the nearest integer value, with precision as specified by <bpt id=\"p1\">**</bpt>digits<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that truncates the specified argument to the nearest integer value, with precision as specified by **digits**."},{"pos":[144429,144449],"content":"<bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>digits<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**value** **digits**"},{"pos":[144546,144566],"content":"<bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>digits<ept id=\"p2\">**</ept>","needQuote":false,"needEscape":true,"source":"**value** **digits**"},{"pos":[145199,145503],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'TruncateTime' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is the same as the result type of **dateValue**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'TruncateTime' function with the specified argument, which must have a DateTime or DateTimeOffset result type.","pos":[0,221],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'TruncateTime' function with the specified argument, which must have a DateTime or DateTimeOffset result type."},{"content":"The result type of the expression is the same as the result type of <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept>.","pos":[222,304],"source":" The result type of the expression is the same as the result type of **dateValue**."}]},{"pos":[145782,145868],"content":"An expression that specifies the value for which the time portion should be truncated.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the value for which the time portion should be truncated.","pos":[0,86]}]},{"pos":[145965,146054],"content":"A new DbFunctionExpression that returns the value of <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept> with time set to zero.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the value of **dateValue** with time set to zero."},{"pos":[146263,146272],"content":"dateValue","needQuote":false,"needEscape":true,"nodes":[{"content":"dateValue","pos":[0,9]}]},{"pos":[146373,146382],"content":"dateValue","needQuote":false,"needEscape":true,"nodes":[{"content":"dateValue","pos":[0,9]}]},{"pos":[146972,147201],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Var' function over the non-null members of the specified collection. The result type of the expression is Edm.Double.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Var' function over the non-null members of the specified collection.","pos":[0,180],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Var' function over the non-null members of the specified collection."},{"content":"The result type of the expression is Edm.Double.","pos":[181,229]}]},{"pos":[147473,147571],"content":"An expression that specifies the collection for which the statistical variance should be computed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the collection for which the statistical variance should be computed.","pos":[0,98]}]},{"pos":[147668,147783],"content":"A new DbFunctionExpression that produces the statistical variance value for the non-null members of the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that produces the statistical variance value for the non-null members of the collection.","pos":[0,115]}]},{"pos":[147983,147993],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[148094,148104],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[148699,148920],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'VarP' function over the population of the specified collection. The result type of the expression Edm.Double.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'VarP' function over the population of the specified collection.","pos":[0,175],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'VarP' function over the population of the specified collection."},{"content":"The result type of the expression Edm.Double.","pos":[176,221]}]},{"pos":[149193,149291],"content":"An expression that specifies the collection for which the statistical variance should be computed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the collection for which the statistical variance should be computed.","pos":[0,98]}]},{"pos":[149388,149460],"content":"A new DbFunctionExpression that produces the statistical variance value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new DbFunctionExpression that produces the statistical variance value.","pos":[0,72]}]},{"pos":[149661,149671],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[149772,149782],"content":"collection","needQuote":false,"needEscape":true,"nodes":[{"content":"collection","pos":[0,10]}]},{"pos":[150377,150638],"content":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Year' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that invokes the canonical 'Year' function with the specified argument, which must have a DateTime or DateTimeOffset result type.","pos":[0,213],"source":"Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Year' function with the specified argument, which must have a DateTime or DateTimeOffset result type."},{"content":"The result type of the expression is Edm.Int32.","pos":[214,261]}]},{"pos":[150909,150988],"content":"An expression that specifies the value from which the year should be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"An expression that specifies the value from which the year should be retrieved.","pos":[0,79]}]},{"pos":[151085,151167],"content":"A new DbFunctionExpression that returns the integer year value from <bpt id=\"p1\">**</bpt>dateValue<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"A new DbFunctionExpression that returns the integer year value from **dateValue**."},{"pos":[151368,151377],"content":"dateValue","needQuote":false,"needEscape":true,"nodes":[{"content":"dateValue","pos":[0,9]}]},{"pos":[151478,151487],"content":"dateValue","needQuote":false,"needEscape":true,"nodes":[{"content":"dateValue","pos":[0,9]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  id: EdmFunctions\n  children:\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Common.CommandTrees.DbExpression@)\n  - System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Common.CommandTrees.DbExpression@)\n  langs:\n  - csharp\n  name: EdmFunctions\n  nameWithType: EdmFunctions\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  type: Class\n  summary: Provides an API to construct <xref href=\"System.Data.Common.CommandTrees.DbExpression\"></xref>s that invoke canonical EDM functions, and allows that API to be accessed as extension methods on the expression type itself.\n  syntax:\n    content: public static class EdmFunctions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Common.CommandTrees.DbExpression@)\n  id: Abs(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Abs(DbExpression)\n  nameWithType: EdmFunctions.Abs(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Abs' function with the specified argument, which must each have a numeric result type. The result type of the expression is the same as the result type of **value**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Abs (this System.Data.Common.CommandTrees.DbExpression value);\n    parameters:\n    - id: value\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the numeric value.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the absolute value of **value**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**value**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**value**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: AddDays(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: AddDays(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddDays(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddDays' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of **dateValue**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression AddDays (this System.Data.Common.CommandTrees.DbExpression dateValue, System.Data.Common.CommandTrees.DbExpression addValue);\n    parameters:\n    - id: dateValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value to which **addValue**should be added.\n    - id: addValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the number of days to add to **dateValue**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that adds the number of days specified by **addValue** to the value specified by **dateValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**dateValue** **addValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**dateValue** **addValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: AddHours(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: AddHours(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddHours(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddHours' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression AddHours (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);\n    parameters:\n    - id: timeValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value to which **addValue**should be added.\n    - id: addValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the number of hours to add to **timeValue**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that adds the number of hours specified by **addValue** to the value specified by **timeValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**timeValue** **addValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**timeValue** **addValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: AddMicroseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: AddMicroseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddMicroseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMicroseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression AddMicroseconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);\n    parameters:\n    - id: timeValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value to which **addValue**should be added.\n    - id: addValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the number of microseconds to add to **timeValue**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that adds the number of microseconds specified by **addValue** to the value specified by **timeValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**timeValue** **addValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**timeValue** **addValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: AddMilliseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: AddMilliseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddMilliseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMilliseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression AddMilliseconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);\n    parameters:\n    - id: timeValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value to which **addValue**should be added.\n    - id: addValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the number of milliseconds to add to **timeValue**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that adds the number of milliseconds specified by **addValue** to the value specified by **timeValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**timeValue** **addValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**timeValue** **addValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: AddMinutes(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: AddMinutes(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddMinutes(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMinutes' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression AddMinutes (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);\n    parameters:\n    - id: timeValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value to which **addValue**should be added.\n    - id: addValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the number of minutes to add to **timeValue**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that adds the number of minutes specified by **addValue** to the value specified by **timeValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**timeValue** **addValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**timeValue** **addValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: AddMonths(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: AddMonths(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddMonths(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddMonths' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of **dateValue**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression AddMonths (this System.Data.Common.CommandTrees.DbExpression dateValue, System.Data.Common.CommandTrees.DbExpression addValue);\n    parameters:\n    - id: dateValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value to which **addValue**should be added.\n    - id: addValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the number of months to add to **dateValue**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that adds the number of months specified by **addValue** to the value specified by **dateValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**dateValue** **addValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**dateValue** **addValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: AddNanoseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: AddNanoseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddNanoseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddNanoseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression AddNanoseconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);\n    parameters:\n    - id: timeValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value to which **addValue**should be added.\n    - id: addValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the number of nanoseconds to add to **timeValue**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that adds the number of nanoseconds specified by **addValue** to the value specified by **timeValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**timeValue** **addValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**timeValue** **addValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: AddSeconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: AddSeconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddSeconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddSeconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of **timeValue**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression AddSeconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);\n    parameters:\n    - id: timeValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value to which **addValue**should be added.\n    - id: addValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the number of seconds to add to **timeValue**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that adds the number of seconds specified by **addValue** to the value specified by **timeValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**timeValue** **addValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**timeValue** **addValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: AddYears(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: AddYears(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddYears(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'AddYears' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of **dateValue**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression AddYears (this System.Data.Common.CommandTrees.DbExpression dateValue, System.Data.Common.CommandTrees.DbExpression addValue);\n    parameters:\n    - id: dateValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value to which **addValue**should be added.\n    - id: addValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the number of years to add to **dateValue**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that adds the number of years specified by **addValue** to the value specified by **dateValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**dateValue** **addValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**dateValue** **addValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Common.CommandTrees.DbExpression@)\n  id: Average(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Average(DbExpression)\n  nameWithType: EdmFunctions.Average(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Avg' function over the specified collection. The result type of the expression is the same as the element type of the collection.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Average (this System.Data.Common.CommandTrees.DbExpression collection);\n    parameters:\n    - id: collection\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the collection from which the average value should be computed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the average value.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**collection**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**collection**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: BitwiseAnd(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: BitwiseAnd(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.BitwiseAnd(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseAnd' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseAnd (this System.Data.Common.CommandTrees.DbExpression value1, System.Data.Common.CommandTrees.DbExpression value2);\n    parameters:\n    - id: value1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first operand.\n    - id: value2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second operand.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the value produced by performing the bitwise AND of **value1** and **value2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**value1** **value2**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**value1** **value2**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Common.CommandTrees.DbExpression@)\n  id: BitwiseNot(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: BitwiseNot(DbExpression)\n  nameWithType: EdmFunctions.BitwiseNot(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseNot' function with the specified argument, which must have an integer numeric result type. The result type of the expression is the same as the type of the arguments.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseNot (this System.Data.Common.CommandTrees.DbExpression value);\n    parameters:\n    - id: value\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first operand.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the value produced by performing the bitwise NOT of **value**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**value**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**value**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: BitwiseOr(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: BitwiseOr(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.BitwiseOr(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseOr' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseOr (this System.Data.Common.CommandTrees.DbExpression value1, System.Data.Common.CommandTrees.DbExpression value2);\n    parameters:\n    - id: value1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first operand.\n    - id: value2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second operand.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the value produced by performing the bitwise OR of **value1** and **value2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**value1** **value2**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**value1** **value2**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: BitwiseXor(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: BitwiseXor(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.BitwiseXor(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BitwiseXor' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseXor (this System.Data.Common.CommandTrees.DbExpression value1, System.Data.Common.CommandTrees.DbExpression value2);\n    parameters:\n    - id: value1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first operand.\n    - id: value2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second operand.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the value produced by performing the bitwise XOR (exclusive OR) of **value1** and **value2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**value1** **value2**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**value1** **value2**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Common.CommandTrees.DbExpression@)\n  id: Ceiling(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Ceiling(DbExpression)\n  nameWithType: EdmFunctions.Ceiling(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Ceiling' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of **value**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Ceiling (this System.Data.Common.CommandTrees.DbExpression value);\n    parameters:\n    - id: value\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the numeric value.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the smallest integer value not less than than **value**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**value**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**value**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: Concat(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Concat(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Concat(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Concat' function with the specified arguments, which must each have a string result type. The result type of the expression is string.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Concat (this System.Data.Common.CommandTrees.DbExpression string1, System.Data.Common.CommandTrees.DbExpression string2);\n    parameters:\n    - id: string1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string that should appear first in the concatenated result string.\n    - id: string2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string that should appear second in the concatenated result string.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the concatenated string.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**string1** **string2**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**string1** **string2**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: Contains(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Contains(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Contains(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Contains' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbExpression Contains (this System.Data.Common.CommandTrees.DbExpression searchedString, System.Data.Common.CommandTrees.DbExpression searchedForString);\n    parameters:\n    - id: searchedString\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string to search for any occurence of **searchedForString**.\n    - id: searchedForString\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string to search for in **searchedString**.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: A new DbFunctionExpression that returns a Boolean value indicating whether or not **searchedForString** occurs within **searchedString**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**searchedString** **searchedForString**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**searchedString** **searchedForString**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Common.CommandTrees.DbExpression@)\n  id: Count(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Count(DbExpression)\n  nameWithType: EdmFunctions.Count(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Count' function over the specified collection. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Count (this System.Data.Common.CommandTrees.DbExpression collection);\n    parameters:\n    - id: collection\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the collection over which the count value should be computed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the count value.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**collection**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**collection**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  id: CreateDateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: CreateDateTime(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n  nameWithType: EdmFunctions.CreateDateTime(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CreateDateTime' function with the specified arguments. **second** must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.DateTime.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression CreateDateTime (System.Data.Common.CommandTrees.DbExpression year, System.Data.Common.CommandTrees.DbExpression month, System.Data.Common.CommandTrees.DbExpression day, System.Data.Common.CommandTrees.DbExpression hour, System.Data.Common.CommandTrees.DbExpression minute, System.Data.Common.CommandTrees.DbExpression second);\n    parameters:\n    - id: year\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the year value for the new DateTime instance.\n    - id: month\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the month value for the new DateTime instance.\n    - id: day\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the day value for the new DateTime instance.\n    - id: hour\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the hour value for the new DateTime instance.\n    - id: minute\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the minute value for the new DateTime instance.\n    - id: second\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the second value for the new DateTime instance.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns a new DateTime based on the specified values.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**year** **month** **day** **hour** **minute** **second**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**year** **month** **day** **hour** **minute** **second**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  id: CreateDateTimeOffset(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: CreateDateTimeOffset(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n  nameWithType: EdmFunctions.CreateDateTimeOffset(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CreateDateTimeOffset' function with the specified arguments. **second** must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.DateTimeOffset.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression CreateDateTimeOffset (System.Data.Common.CommandTrees.DbExpression year, System.Data.Common.CommandTrees.DbExpression month, System.Data.Common.CommandTrees.DbExpression day, System.Data.Common.CommandTrees.DbExpression hour, System.Data.Common.CommandTrees.DbExpression minute, System.Data.Common.CommandTrees.DbExpression second, System.Data.Common.CommandTrees.DbExpression timeZoneOffset);\n    parameters:\n    - id: year\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the year value for the new DateTimeOffset instance.\n    - id: month\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the month value for the new DateTimeOffset instance.\n    - id: day\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the day value for the new DateTimeOffset instance.\n    - id: hour\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the hour value for the new DateTimeOffset instance.\n    - id: minute\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the minute value for the new DateTimeOffset instance.\n    - id: second\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the second value for the new DateTimeOffset instance.\n    - id: timeZoneOffset\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the number of minutes in the time zone offset value for the new DateTimeOffset instance.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns a new DateTimeOffset based on the specified values.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**year** **month** **day** **hour** **minute** **second** **timeZoneOffset**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**year** **month** **day** **hour** **minute** **second** **timeZoneOffset**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  id: CreateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: CreateTime(DbExpression,DbExpression,DbExpression)\n  nameWithType: EdmFunctions.CreateTime(DbExpression,DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(DbExpression,DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CreateTime' function with the specified arguments. **second** must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.Time.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression CreateTime (System.Data.Common.CommandTrees.DbExpression hour, System.Data.Common.CommandTrees.DbExpression minute, System.Data.Common.CommandTrees.DbExpression second);\n    parameters:\n    - id: hour\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the hour value for the new DateTime instance.\n    - id: minute\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the minute value for the new DateTime instance.\n    - id: second\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that provides the second value for the new DateTime instance.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns a new Time based on the specified values.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**hour** **minute** **second**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**hour** **minute** **second**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime\n  id: CurrentDateTime\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: CurrentDateTime()\n  nameWithType: EdmFunctions.CurrentDateTime()\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CurrentDateTime' function.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression CurrentDateTime ();\n    parameters: []\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the current date and time as an Edm.DateTime instance.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset\n  id: CurrentDateTimeOffset\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: CurrentDateTimeOffset()\n  nameWithType: EdmFunctions.CurrentDateTimeOffset()\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CurrentDateTimeOffset' function.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression CurrentDateTimeOffset ();\n    parameters: []\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the current date and time as an Edm.DateTimeOffset instance.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime\n  id: CurrentUtcDateTime\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: CurrentUtcDateTime()\n  nameWithType: EdmFunctions.CurrentUtcDateTime()\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'CurrentUtcDateTime' function.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression CurrentUtcDateTime ();\n    parameters: []\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the current UTC date and time as an Edm.DateTime instance.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Common.CommandTrees.DbExpression@)\n  id: Day(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Day(DbExpression)\n  nameWithType: EdmFunctions.Day(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Day' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Day (this System.Data.Common.CommandTrees.DbExpression dateValue);\n    parameters:\n    - id: dateValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value from which the day should be retrieved.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the integer day value from **dateValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**dateValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**dateValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Common.CommandTrees.DbExpression@)\n  id: DayOfYear(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: DayOfYear(DbExpression)\n  nameWithType: EdmFunctions.DayOfYear(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DayOfYear' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression DayOfYear (this System.Data.Common.CommandTrees.DbExpression dateValue);\n    parameters:\n    - id: dateValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value from which the day within the year should be retrieved.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the integer day of year value from **dateValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**dateValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**dateValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: DiffDays(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: DiffDays(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffDays(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffDays' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression DiffDays (this System.Data.Common.CommandTrees.DbExpression dateValue1, System.Data.Common.CommandTrees.DbExpression dateValue2);\n    parameters:\n    - id: dateValue1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first date value argument.\n    - id: dateValue2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second date value argument.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the number of days that is the difference between **dateValue1** and **dateValue2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: DiffHours(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: DiffHours(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffHours(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffHours' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression DiffHours (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);\n    parameters:\n    - id: timeValue1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first time value argument.\n    - id: timeValue2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second time value argument.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the number of hours that is the difference between **timeValue1** and **timeValue2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: DiffMicroseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: DiffMicroseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffMicroseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMicroseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMicroseconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);\n    parameters:\n    - id: timeValue1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first time value argument.\n    - id: timeValue2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second time value argument.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the number of microseconds that is the difference between **timeValue1** and **timeValue2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: DiffMilliseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: DiffMilliseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffMilliseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMilliseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMilliseconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);\n    parameters:\n    - id: timeValue1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first time value argument.\n    - id: timeValue2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second time value argument.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the number of milliseconds that is the difference between **timeValue1** and **timeValue2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: DiffMinutes(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: DiffMinutes(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffMinutes(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMinutes' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMinutes (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);\n    parameters:\n    - id: timeValue1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first time value argument.\n    - id: timeValue2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second time value argument.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the number of minutes that is the difference between **timeValue1** and **timeValue2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: DiffMonths(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: DiffMonths(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffMonths(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffMonths' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMonths (this System.Data.Common.CommandTrees.DbExpression dateValue1, System.Data.Common.CommandTrees.DbExpression dateValue2);\n    parameters:\n    - id: dateValue1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first date value argument.\n    - id: dateValue2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second date value argument.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the number of months that is the difference between **dateValue1** and **dateValue2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: DiffNanoseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: DiffNanoseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffNanoseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffNanoseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression DiffNanoseconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);\n    parameters:\n    - id: timeValue1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first time value argument.\n    - id: timeValue2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second time value argument.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the number of nanoseconds that is the difference between **timeValue1** and **timeValue2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: DiffSeconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: DiffSeconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffSeconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffSeconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression DiffSeconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);\n    parameters:\n    - id: timeValue1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first time value argument.\n    - id: timeValue2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second time value argument.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the number of seconds that is the difference between **timeValue1** and **timeValue2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: DiffYears(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: DiffYears(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffYears(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'DiffYears' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression DiffYears (this System.Data.Common.CommandTrees.DbExpression dateValue1, System.Data.Common.CommandTrees.DbExpression dateValue2);\n    parameters:\n    - id: dateValue1\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the first date value argument.\n    - id: dateValue2\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the second date value argument.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the number of years that is the difference between **dateValue1** and **dateValue2**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: EndsWith(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: EndsWith(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.EndsWith(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'EndsWith' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression EndsWith (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression suffix);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string that is searched at the end for string **suffix**.\n    - id: suffix\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the target string that is searched for at the end of **stringArgument**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns a Boolean value indicating whether or not **stringArgument** ends with **suffix**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Common.CommandTrees.DbExpression@)\n  id: Floor(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Floor(DbExpression)\n  nameWithType: EdmFunctions.Floor(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Floor' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of **value**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Floor (this System.Data.Common.CommandTrees.DbExpression value);\n    parameters:\n    - id: value\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the numeric value.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the largest integer value not greater than **value**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**value**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**value**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Common.CommandTrees.DbExpression@)\n  id: GetTotalOffsetMinutes(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: GetTotalOffsetMinutes(DbExpression)\n  nameWithType: EdmFunctions.GetTotalOffsetMinutes(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'GetTotalOffsetMinutes' function with the specified argument, which must have a DateTimeOffset result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression GetTotalOffsetMinutes (this System.Data.Common.CommandTrees.DbExpression dateTimeOffsetArgument);\n    parameters:\n    - id: dateTimeOffsetArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the DateTimeOffset value from which the minute offset from GMT should be retrieved.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the number of minutes **dateTimeOffsetArgument** is offset from GMT.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**dateTimeOffsetArgument**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**dateTimeOffsetArgument**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Common.CommandTrees.DbExpression@)\n  id: Hour(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Hour(DbExpression)\n  nameWithType: EdmFunctions.Hour(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Hour' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Hour (this System.Data.Common.CommandTrees.DbExpression timeValue);\n    parameters:\n    - id: timeValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value from which the hour should be retrieved.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the integer hour value from **timeValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**timeValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**timeValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: IndexOf(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: IndexOf(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.IndexOf(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'IndexOf' function with the specified arguments, which must each have a string result type. The result type of the expression is Edm.Int32.\n  remarks: The index returned by IndexOf is \\<b>1-based\\</b>.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression IndexOf (this System.Data.Common.CommandTrees.DbExpression searchString, System.Data.Common.CommandTrees.DbExpression stringToFind);\n    parameters:\n    - id: searchString\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string to search for **stringToFind**.\n    - id: stringToFind\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string to locate within **searchString** should be checked.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the first index of **stringToFind** in **searchString**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**searchString** **stringToFind**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**searchString** **stringToFind**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: Left(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Left(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Left(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Left' function with the specified arguments, which must have a string and integer numeric result type. The result type of the expression is string.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Left (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression length);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string from which to extract the leftmost substring.\n    - id: length\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the length of the leftmost substring to extract from **stringArgument**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the the leftmost substring of length **length** from **stringArgument**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**stringArgument** **length**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**stringArgument**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Common.CommandTrees.DbExpression@)\n  id: Length(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Length(DbExpression)\n  nameWithType: EdmFunctions.Length(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Length' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Length (this System.Data.Common.CommandTrees.DbExpression stringArgument);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string for which the length should be computed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the length of **stringArgument**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**stringArgument**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**stringArgument**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Common.CommandTrees.DbExpression@)\n  id: LongCount(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: LongCount(DbExpression)\n  nameWithType: EdmFunctions.LongCount(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'BigCount' function over the specified collection. The result type of the expression is Edm.Int64.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression LongCount (this System.Data.Common.CommandTrees.DbExpression collection);\n    parameters:\n    - id: collection\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the collection over which the count value should be computed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the count value.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**collection**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**collection**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Common.CommandTrees.DbExpression@)\n  id: Max(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Max(DbExpression)\n  nameWithType: EdmFunctions.Max(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Max' function over the specified collection. The result type of the expression is the same as the element type of the collection.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Max (this System.Data.Common.CommandTrees.DbExpression collection);\n    parameters:\n    - id: collection\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the collection from which the maximum value should be retrieved\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the maximum value.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**collection**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**collection**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Common.CommandTrees.DbExpression@)\n  id: Millisecond(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Millisecond(DbExpression)\n  nameWithType: EdmFunctions.Millisecond(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Millisecond' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Millisecond (this System.Data.Common.CommandTrees.DbExpression timeValue);\n    parameters:\n    - id: timeValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value from which the millisecond should be retrieved.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the integer millisecond value from **timeValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**timeValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**timeValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Common.CommandTrees.DbExpression@)\n  id: Min(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Min(DbExpression)\n  nameWithType: EdmFunctions.Min(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Min' function over the specified collection. The result type of the expression is the same as the element type of the collection.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Min (this System.Data.Common.CommandTrees.DbExpression collection);\n    parameters:\n    - id: collection\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the collection from which the minimum value should be retrieved.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the minimum value.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**collection**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**collection**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Common.CommandTrees.DbExpression@)\n  id: Minute(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Minute(DbExpression)\n  nameWithType: EdmFunctions.Minute(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Minute' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Minute (this System.Data.Common.CommandTrees.DbExpression timeValue);\n    parameters:\n    - id: timeValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value from which the minute should be retrieved.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the integer minute value from **timeValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**timeValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**timeValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Common.CommandTrees.DbExpression@)\n  id: Month(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Month(DbExpression)\n  nameWithType: EdmFunctions.Month(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Month' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Month (this System.Data.Common.CommandTrees.DbExpression dateValue);\n    parameters:\n    - id: dateValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value from which the month should be retrieved.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the integer month value from **dateValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**dateValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**dateValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid\n  id: NewGuid\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: NewGuid()\n  nameWithType: EdmFunctions.NewGuid()\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'NewGuid' function.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression NewGuid ();\n    parameters: []\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns a new GUID value.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: Power(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Power(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Power(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Power' function with the specified arguments, which must have numeric result types. The result type of the expression is the same as the result type of **baseArgument**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Power (this System.Data.Common.CommandTrees.DbExpression baseArgument, System.Data.Common.CommandTrees.DbExpression exponent);\n    parameters:\n    - id: baseArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the numeric value to raise to the given power.\n    - id: exponent\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the power to which **baseArgument** should be raised.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the value of **baseArgument** raised to the power specified by **exponent**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**baseArgument** **exponent**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**baseArgument** **exponent**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  id: Replace(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Replace(DbExpression,DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Replace(DbExpression,DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(DbExpression,DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Replace' function with the specified arguments, which must each have a string result type. The result type of the expression is also string.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Replace (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression toReplace, System.Data.Common.CommandTrees.DbExpression replacement);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string in which to perform the replacement operation.\n    - id: toReplace\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string that is replaced.\n    - id: replacement\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the replacement string.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression than returns a new string based on **stringArgument** where every occurence of **toReplace** is replaced by **replacement**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**stringArgument** **toReplace** **replacement**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**stringArgument** **toReplace** **replacement**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Common.CommandTrees.DbExpression@)\n  id: Reverse(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Reverse(DbExpression)\n  nameWithType: EdmFunctions.Reverse(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Reverse' function with the specified argument, which must have a string result type. The result type of the expression is also string.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Reverse (this System.Data.Common.CommandTrees.DbExpression stringArgument);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string to reverse.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the reversed value of **stringArgument**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**stringArgument**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**stringArgument**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: Right(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Right(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Right(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Right' function with the specified arguments, which must have a string and integer numeric result type. The result type of the expression is string.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Right (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression length);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string from which to extract the rightmost substring.\n    - id: length\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the length of the rightmost substring to extract from **stringArgument**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the the rightmost substring of length **length** from **stringArgument**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**stringArgument** **length**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**stringArgument**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression@)\n  id: Round(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Round(DbExpression)\n  nameWithType: EdmFunctions.Round(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Round' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of **value**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Round (this System.Data.Common.CommandTrees.DbExpression value);\n    parameters:\n    - id: value\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the numeric value to round.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that rounds the specified argument to the nearest integer value.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**value**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**value**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: Round(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Round(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Round(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Round' function with the specified arguments, which must have a single, double or decimal, and integer result types. The result type of the expression is the same as the result type of **value**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Round (this System.Data.Common.CommandTrees.DbExpression value, System.Data.Common.CommandTrees.DbExpression digits);\n    parameters:\n    - id: value\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the numeric value to round.\n    - id: digits\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the number of digits of precision to use when rounding.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that rounds the specified argument to the nearest integer value, with precision as specified by **digits**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**value** **digits**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**value** **digits**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Common.CommandTrees.DbExpression@)\n  id: Second(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Second(DbExpression)\n  nameWithType: EdmFunctions.Second(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Second' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Second (this System.Data.Common.CommandTrees.DbExpression timeValue);\n    parameters:\n    - id: timeValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value from which the second should be retrieved.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the integer second value from **timeValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**timeValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**timeValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: StartsWith(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: StartsWith(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.StartsWith(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'StartsWith' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression StartsWith (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression prefix);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string that is searched at the start for string **prefix**.\n    - id: prefix\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the target string that is searched for at the start of **stringArgument**.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns a Boolean value indicating whether or not **stringArgument** starts with **prefix**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Common.CommandTrees.DbExpression@)\n  id: StDev(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: StDev(DbExpression)\n  nameWithType: EdmFunctions.StDev(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'StDev' function over the non-null members of the specified collection. The result type of the expression is Edm.Double.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression StDev (this System.Data.Common.CommandTrees.DbExpression collection);\n    parameters:\n    - id: collection\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the collection for which the standard deviation should be computed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the standard deviation value over non-null members of the collection.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**collection**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**collection**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Common.CommandTrees.DbExpression@)\n  id: StDevP(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: StDevP(DbExpression)\n  nameWithType: EdmFunctions.StDevP(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'StDevP' function over the population of the specified collection. The result type of the expression is Edm.Double.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression StDevP (this System.Data.Common.CommandTrees.DbExpression collection);\n    parameters:\n    - id: collection\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the collection for which the standard deviation should be computed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the standard deviation value.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**collection**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**collection**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  id: Substring(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Substring(DbExpression,DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Substring(DbExpression,DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(DbExpression,DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Substring' function with the specified arguments, which must have a string and integer numeric result types. The result type of the expression is string.\n  remarks: Substring requires that the index specified by **start** be \\<b>1-based\\</b>.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Substring (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression start, System.Data.Common.CommandTrees.DbExpression length);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string from which to extract the substring.\n    - id: start\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the starting index from which the substring should be taken.\n    - id: length\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the length of the substring.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the substring of length **length** from **stringArgument** starting at **start**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**stringArgument** **start** **length**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**stringArgument** **start** **length**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Common.CommandTrees.DbExpression@)\n  id: Sum(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Sum(DbExpression)\n  nameWithType: EdmFunctions.Sum(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Sum' function over the specified collection. The result type of the expression is the same as the element type of the collection.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Sum (this System.Data.Common.CommandTrees.DbExpression collection);\n    parameters:\n    - id: collection\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the collection from which the sum should be computed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the sum.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**collection**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**collection**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Common.CommandTrees.DbExpression@)\n  id: ToLower(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: ToLower(DbExpression)\n  nameWithType: EdmFunctions.ToLower(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'ToLower' function with the specified argument, which must have a string result type. The result type of the expression is also string.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression ToLower (this System.Data.Common.CommandTrees.DbExpression stringArgument);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string that should be converted to lower case.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns value of **stringArgument** converted to lower case.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**stringArgument**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**stringArgument**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Common.CommandTrees.DbExpression@)\n  id: ToUpper(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: ToUpper(DbExpression)\n  nameWithType: EdmFunctions.ToUpper(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'ToUpper' function with the specified argument, which must have a string result type. The result type of the expression is also string.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression ToUpper (this System.Data.Common.CommandTrees.DbExpression stringArgument);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string that should be converted to upper case.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns value of **stringArgument** converted to upper case.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**stringArgument**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**stringArgument**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Common.CommandTrees.DbExpression@)\n  id: Trim(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Trim(DbExpression)\n  nameWithType: EdmFunctions.Trim(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Trim' function with the specified argument, which must have a string result type. The result type of the expression is also string.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Trim (this System.Data.Common.CommandTrees.DbExpression stringArgument);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string from which leading and trailing space should be removed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns value of **stringArgument** with leading and trailing space removed.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**stringArgument**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**stringArgument**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Common.CommandTrees.DbExpression@)\n  id: TrimEnd(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: TrimEnd(DbExpression)\n  nameWithType: EdmFunctions.TrimEnd(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'RTrim' function with the specified argument, which must have a string result type. The result type of the expression is also string.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression TrimEnd (this System.Data.Common.CommandTrees.DbExpression stringArgument);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string from which trailing space should be removed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns value of **stringArgument** with trailing space removed.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**stringArgument**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**stringArgument**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Common.CommandTrees.DbExpression@)\n  id: TrimStart(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: TrimStart(DbExpression)\n  nameWithType: EdmFunctions.TrimStart(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'LTrim' function with the specified argument, which must have a string result type. The result type of the expression is also string.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression TrimStart (this System.Data.Common.CommandTrees.DbExpression stringArgument);\n    parameters:\n    - id: stringArgument\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the string from which leading space should be removed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns value of **stringArgument** with leading space removed.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**stringArgument**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**stringArgument**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  id: Truncate(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Truncate(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Truncate(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Truncate' function with the specified arguments, which must have a single, double or decimal, and integer result types. The result type of the expression is the same as the result type of **value**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Truncate (this System.Data.Common.CommandTrees.DbExpression value, System.Data.Common.CommandTrees.DbExpression digits);\n    parameters:\n    - id: value\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the numeric value to truncate.\n    - id: digits\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the number of digits of precision to use when truncating.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that truncates the specified argument to the nearest integer value, with precision as specified by **digits**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**value** **digits**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**value** **digits**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Common.CommandTrees.DbExpression@)\n  id: TruncateTime(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: TruncateTime(DbExpression)\n  nameWithType: EdmFunctions.TruncateTime(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'TruncateTime' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is the same as the result type of **dateValue**.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression TruncateTime (this System.Data.Common.CommandTrees.DbExpression dateValue);\n    parameters:\n    - id: dateValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value for which the time portion should be truncated.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the value of **dateValue** with time set to zero.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**dateValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**dateValue**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Common.CommandTrees.DbExpression@)\n  id: Var(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Var(DbExpression)\n  nameWithType: EdmFunctions.Var(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Var' function over the non-null members of the specified collection. The result type of the expression is Edm.Double.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Var (this System.Data.Common.CommandTrees.DbExpression collection);\n    parameters:\n    - id: collection\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the collection for which the statistical variance should be computed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the statistical variance value for the non-null members of the collection.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**collection**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**collection**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Common.CommandTrees.DbExpression@)\n  id: VarP(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: VarP(DbExpression)\n  nameWithType: EdmFunctions.VarP(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'VarP' function over the population of the specified collection. The result type of the expression Edm.Double.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression VarP (this System.Data.Common.CommandTrees.DbExpression collection);\n    parameters:\n    - id: collection\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the collection for which the statistical variance should be computed.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that produces the statistical variance value.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**collection**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**collection**'\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Common.CommandTrees.DbExpression@)\n  id: Year(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  langs:\n  - csharp\n  name: Year(DbExpression)\n  nameWithType: EdmFunctions.Year(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees.ExpressionBuilder\n  summary: Creates a <xref href=\"System.Data.Common.CommandTrees.DbFunctionExpression\"></xref> that invokes the canonical 'Year' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.\n  syntax:\n    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Year (this System.Data.Common.CommandTrees.DbExpression dateValue);\n    parameters:\n    - id: dateValue\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: An expression that specifies the value from which the year should be retrieved.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: A new DbFunctionExpression that returns the integer year value from **dateValue**.\n  overload: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: '**dateValue**'\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: '**dateValue**'\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Abs(DbExpression)\n  nameWithType: EdmFunctions.Abs(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(DbExpression)\n- uid: System.Data.Common.CommandTrees.DbFunctionExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbFunctionExpression\n  nameWithType: DbFunctionExpression\n  fullName: System.Data.Common.CommandTrees.DbFunctionExpression\n- uid: System.Data.Common.CommandTrees.DbExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbExpression\n  nameWithType: DbExpression\n  fullName: System.Data.Common.CommandTrees.DbExpression\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddDays(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddDays(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddHours(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddHours(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddMicroseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddMicroseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddMilliseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddMilliseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddMinutes(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddMinutes(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddMonths(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddMonths(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddNanoseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddNanoseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddSeconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddSeconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddYears(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.AddYears(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Average(DbExpression)\n  nameWithType: EdmFunctions.Average(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: BitwiseAnd(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.BitwiseAnd(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: BitwiseNot(DbExpression)\n  nameWithType: EdmFunctions.BitwiseNot(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: BitwiseOr(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.BitwiseOr(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: BitwiseXor(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.BitwiseXor(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Ceiling(DbExpression)\n  nameWithType: EdmFunctions.Ceiling(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Concat(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Concat(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Contains(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Contains(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Count(DbExpression)\n  nameWithType: EdmFunctions.Count(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CreateDateTime(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n  nameWithType: EdmFunctions.CreateDateTime(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CreateDateTimeOffset(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n  nameWithType: EdmFunctions.CreateDateTimeOffset(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CreateTime(DbExpression,DbExpression,DbExpression)\n  nameWithType: EdmFunctions.CreateTime(DbExpression,DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(DbExpression,DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CurrentDateTime()\n  nameWithType: EdmFunctions.CurrentDateTime()\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime()\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CurrentDateTimeOffset()\n  nameWithType: EdmFunctions.CurrentDateTimeOffset()\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset()\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CurrentUtcDateTime()\n  nameWithType: EdmFunctions.CurrentUtcDateTime()\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime()\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Day(DbExpression)\n  nameWithType: EdmFunctions.Day(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DayOfYear(DbExpression)\n  nameWithType: EdmFunctions.DayOfYear(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffDays(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffDays(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffHours(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffHours(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffMicroseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffMicroseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffMilliseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffMilliseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffMinutes(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffMinutes(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffMonths(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffMonths(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffNanoseconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffNanoseconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffSeconds(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffSeconds(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffYears(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.DiffYears(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: EndsWith(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.EndsWith(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Floor(DbExpression)\n  nameWithType: EdmFunctions.Floor(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: GetTotalOffsetMinutes(DbExpression)\n  nameWithType: EdmFunctions.GetTotalOffsetMinutes(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Hour(DbExpression)\n  nameWithType: EdmFunctions.Hour(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: IndexOf(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.IndexOf(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Left(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Left(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Length(DbExpression)\n  nameWithType: EdmFunctions.Length(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: LongCount(DbExpression)\n  nameWithType: EdmFunctions.LongCount(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Max(DbExpression)\n  nameWithType: EdmFunctions.Max(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Millisecond(DbExpression)\n  nameWithType: EdmFunctions.Millisecond(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Min(DbExpression)\n  nameWithType: EdmFunctions.Min(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Minute(DbExpression)\n  nameWithType: EdmFunctions.Minute(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Month(DbExpression)\n  nameWithType: EdmFunctions.Month(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: NewGuid()\n  nameWithType: EdmFunctions.NewGuid()\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid()\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Power(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Power(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Replace(DbExpression,DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Replace(DbExpression,DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(DbExpression,DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Reverse(DbExpression)\n  nameWithType: EdmFunctions.Reverse(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Right(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Right(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Round(DbExpression)\n  nameWithType: EdmFunctions.Round(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Round(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Round(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Second(DbExpression)\n  nameWithType: EdmFunctions.Second(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: StartsWith(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.StartsWith(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: StDev(DbExpression)\n  nameWithType: EdmFunctions.StDev(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: StDevP(DbExpression)\n  nameWithType: EdmFunctions.StDevP(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Substring(DbExpression,DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Substring(DbExpression,DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(DbExpression,DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Sum(DbExpression)\n  nameWithType: EdmFunctions.Sum(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: ToLower(DbExpression)\n  nameWithType: EdmFunctions.ToLower(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: ToUpper(DbExpression)\n  nameWithType: EdmFunctions.ToUpper(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Trim(DbExpression)\n  nameWithType: EdmFunctions.Trim(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: TrimEnd(DbExpression)\n  nameWithType: EdmFunctions.TrimEnd(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: TrimStart(DbExpression)\n  nameWithType: EdmFunctions.TrimStart(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Truncate(DbExpression,DbExpression)\n  nameWithType: EdmFunctions.Truncate(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: TruncateTime(DbExpression)\n  nameWithType: EdmFunctions.TruncateTime(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Var(DbExpression)\n  nameWithType: EdmFunctions.Var(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: VarP(DbExpression)\n  nameWithType: EdmFunctions.VarP(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Common.CommandTrees.DbExpression@)\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Year(DbExpression)\n  nameWithType: EdmFunctions.Year(DbExpression)\n  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(DbExpression)\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Abs\n  nameWithType: EdmFunctions.Abs\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddDays\n  nameWithType: EdmFunctions.AddDays\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddHours\n  nameWithType: EdmFunctions.AddHours\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddMicroseconds\n  nameWithType: EdmFunctions.AddMicroseconds\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddMilliseconds\n  nameWithType: EdmFunctions.AddMilliseconds\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddMinutes\n  nameWithType: EdmFunctions.AddMinutes\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddMonths\n  nameWithType: EdmFunctions.AddMonths\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddNanoseconds\n  nameWithType: EdmFunctions.AddNanoseconds\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddSeconds\n  nameWithType: EdmFunctions.AddSeconds\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: AddYears\n  nameWithType: EdmFunctions.AddYears\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Average\n  nameWithType: EdmFunctions.Average\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: BitwiseAnd\n  nameWithType: EdmFunctions.BitwiseAnd\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: BitwiseNot\n  nameWithType: EdmFunctions.BitwiseNot\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: BitwiseOr\n  nameWithType: EdmFunctions.BitwiseOr\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: BitwiseXor\n  nameWithType: EdmFunctions.BitwiseXor\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Ceiling\n  nameWithType: EdmFunctions.Ceiling\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Concat\n  nameWithType: EdmFunctions.Concat\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Contains\n  nameWithType: EdmFunctions.Contains\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Count\n  nameWithType: EdmFunctions.Count\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CreateDateTime\n  nameWithType: EdmFunctions.CreateDateTime\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CreateDateTimeOffset\n  nameWithType: EdmFunctions.CreateDateTimeOffset\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CreateTime\n  nameWithType: EdmFunctions.CreateTime\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CurrentDateTime\n  nameWithType: EdmFunctions.CurrentDateTime\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CurrentDateTimeOffset\n  nameWithType: EdmFunctions.CurrentDateTimeOffset\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: CurrentUtcDateTime\n  nameWithType: EdmFunctions.CurrentUtcDateTime\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Day\n  nameWithType: EdmFunctions.Day\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DayOfYear\n  nameWithType: EdmFunctions.DayOfYear\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffDays\n  nameWithType: EdmFunctions.DiffDays\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffHours\n  nameWithType: EdmFunctions.DiffHours\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffMicroseconds\n  nameWithType: EdmFunctions.DiffMicroseconds\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffMilliseconds\n  nameWithType: EdmFunctions.DiffMilliseconds\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffMinutes\n  nameWithType: EdmFunctions.DiffMinutes\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffMonths\n  nameWithType: EdmFunctions.DiffMonths\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffNanoseconds\n  nameWithType: EdmFunctions.DiffNanoseconds\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffSeconds\n  nameWithType: EdmFunctions.DiffSeconds\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: DiffYears\n  nameWithType: EdmFunctions.DiffYears\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: EndsWith\n  nameWithType: EdmFunctions.EndsWith\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Floor\n  nameWithType: EdmFunctions.Floor\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: GetTotalOffsetMinutes\n  nameWithType: EdmFunctions.GetTotalOffsetMinutes\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Hour\n  nameWithType: EdmFunctions.Hour\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: IndexOf\n  nameWithType: EdmFunctions.IndexOf\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Left\n  nameWithType: EdmFunctions.Left\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Length\n  nameWithType: EdmFunctions.Length\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: LongCount\n  nameWithType: EdmFunctions.LongCount\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Max\n  nameWithType: EdmFunctions.Max\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Millisecond\n  nameWithType: EdmFunctions.Millisecond\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Min\n  nameWithType: EdmFunctions.Min\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Minute\n  nameWithType: EdmFunctions.Minute\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Month\n  nameWithType: EdmFunctions.Month\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: NewGuid\n  nameWithType: EdmFunctions.NewGuid\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Power\n  nameWithType: EdmFunctions.Power\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Replace\n  nameWithType: EdmFunctions.Replace\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Reverse\n  nameWithType: EdmFunctions.Reverse\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Right\n  nameWithType: EdmFunctions.Right\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Round\n  nameWithType: EdmFunctions.Round\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Second\n  nameWithType: EdmFunctions.Second\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: StartsWith\n  nameWithType: EdmFunctions.StartsWith\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: StDev\n  nameWithType: EdmFunctions.StDev\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: StDevP\n  nameWithType: EdmFunctions.StDevP\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Substring\n  nameWithType: EdmFunctions.Substring\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Sum\n  nameWithType: EdmFunctions.Sum\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: ToLower\n  nameWithType: EdmFunctions.ToLower\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: ToUpper\n  nameWithType: EdmFunctions.ToUpper\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Trim\n  nameWithType: EdmFunctions.Trim\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: TrimEnd\n  nameWithType: EdmFunctions.TrimEnd\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: TrimStart\n  nameWithType: EdmFunctions.TrimStart\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Truncate\n  nameWithType: EdmFunctions.Truncate\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: TruncateTime\n  nameWithType: EdmFunctions.TruncateTime\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Var\n  nameWithType: EdmFunctions.Var\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: VarP\n  nameWithType: EdmFunctions.VarP\n- uid: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year*\n  parent: System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions\n  isExternal: false\n  name: Year\n  nameWithType: EdmFunctions.Year\n"}