{"nodes":[{"pos":[382,513],"content":"Provides a base class for requesting the security status of an action from the <bpt id=\"p1\">&lt;xref href=\"System.AppDomainManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Provides a base class for requesting the security status of an action from the <xref href=\"System.AppDomainManager\"></xref> object."},{"pos":[526,2876],"content":"You must inherit from this class to provide a class that includes a property that specifies the security-sensitive action to be performed. The SecurityState object that is instantiated from the derived class is passed to the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the host allows that action to be performed. The default implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method always returns `false`.  The method must be overridden to detect the actions that are allowed.       For example, if you want to access a Web camera in your library code, you would create a `WebcamSecurityState` object and call the <xref:System.Security.SecurityState.EnsureState%2A> method to determine whether the host allows Web camera access, as shown in the following example.  (You can find the code for `WebcamSecurityState` in the \"Example\" section.)      ```   WebcamSecurityState securityState = new WebcamSecurityState(\"Safe access to Webcam\", WebcamSecurityOptions.SafeAccess);   try   {      securityState.EnsureState();      // Allocate memory.      }   catch (ApplicationException e)   {       // Handle any exception that is thrown.       System.Diagnostics.Debug.WriteLine(e.Message);   }   ```       To process the call the <xref:System.AppDomainManager> must be made aware of `WebcamSecurityState` through an override of the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method, as shown in the following example.      ```   [SecurityCritical]   public override bool CheckSecuritySettings(System.Security.SecurityState securityState)   {      switch (securityState.ToString())      {         case \"WebcamSecurityState\":         {             if ((securityState as WebcamSecurityState).Options == WebcamSecurityOptions.SafeAccess)                 return PromptUser((securityState as WebcamSecurityState).Description);              return false;         }      }         return false;   }   private bool PromptUser(string text)   {      // Replace the OpenFileDialog with a custom user prompt.      OpenFileDialog o = new OpenFileDialog();      o.Title = text;      if (o.ShowDialog() == DialogResult.OK)         return true;      else         return false;   }      ```","needQuote":false,"needEscape":true,"nodes":[{"content":"You must inherit from this class to provide a class that includes a property that specifies the security-sensitive action to be performed.","pos":[0,138]},{"content":"The SecurityState object that is instantiated from the derived class is passed to the &lt;xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName&gt; method to determine whether the host allows that action to be performed.","pos":[139,378],"source":" The SecurityState object that is instantiated from the derived class is passed to the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the host allows that action to be performed."},{"content":"The default implementation of the &lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt; method always returns <ph id=\"ph1\">`false`</ph>.","pos":[379,499],"source":" The default implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method always returns `false`."},{"content":"The method must be overridden to detect the actions that are allowed.","pos":[501,570]},{"content":"For example, if you want to access a Web camera in your library code, you would create a <ph id=\"ph1\">`WebcamSecurityState`</ph> object and call the &lt;xref:System.Security.SecurityState.EnsureState%2A&gt; method to determine whether the host allows Web camera access, as shown in the following example.","pos":[577,857],"source":"       For example, if you want to access a Web camera in your library code, you would create a `WebcamSecurityState` object and call the <xref:System.Security.SecurityState.EnsureState%2A> method to determine whether the host allows Web camera access, as shown in the following example."},{"content":"(You can find the code for <ph id=\"ph1\">`WebcamSecurityState`</ph> in the \"Example\" section.)      <ph id=\"ph2\">```   WebcamSecurityState securityState = new WebcamSecurityState(\"Safe access to Webcam\", WebcamSecurityOptions.SafeAccess);   try   {      securityState.EnsureState();      // Allocate memory.      }   catch (ApplicationException e)   {       // Handle any exception that is thrown.       System.Diagnostics.Debug.WriteLine(e.Message);   }   ```</ph>       To process the call the &lt;xref:System.AppDomainManager&gt; must be made aware of <ph id=\"ph3\">`WebcamSecurityState`</ph> through an override of the &lt;xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName&gt; method, as shown in the following example.","pos":[859,1543],"source":"  (You can find the code for `WebcamSecurityState` in the \"Example\" section.)      ```   WebcamSecurityState securityState = new WebcamSecurityState(\"Safe access to Webcam\", WebcamSecurityOptions.SafeAccess);   try   {      securityState.EnsureState();      // Allocate memory.      }   catch (ApplicationException e)   {       // Handle any exception that is thrown.       System.Diagnostics.Debug.WriteLine(e.Message);   }   ```       To process the call the <xref:System.AppDomainManager> must be made aware of `WebcamSecurityState` through an override of the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method, as shown in the following example."}]},{"pos":[4187,4278],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.SecurityState\"></xref> class."},{"pos":[4769,4927],"content":"When overridden in a derived class, ensures that the state that is represented by <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is available on the host.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, ensures that the state that is represented by <xref href=\"System.Security.SecurityState\"></xref> is available on the host."},{"pos":[4940,5203],"content":"The implementation of this method should be similar to the following example.      ```   public override void EnsureState()   {       if (!IsStateAvailable())             throw new ApplicationException(\"WebcamSecurityState not available\");   }      ```","needQuote":false,"needEscape":true,"nodes":[{"content":"The implementation of this method should be similar to the following example.","pos":[0,77]}]},{"pos":[5735,5902],"content":"Gets a value that indicates whether the state for this implementation of the <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class is available on the current host.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the state for this implementation of the <xref href=\"System.Security.SecurityState\"></xref> class is available on the current host."},{"pos":[5915,6280],"content":"IsStateAvailable calls the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the state that is represented by this class is available on the host.       See the <xref:System.Security.SecurityState> class for an example implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"IsStateAvailable calls the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the state that is represented by this class is available on the host.       See the <xref:System.Security.SecurityState> class for an example implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method.","pos":[0,363],"nodes":[{"content":"IsStateAvailable calls the &lt;xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName&gt; method to determine whether the state that is represented by this class is available on the host.","pos":[0,205],"source":"IsStateAvailable calls the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the state that is represented by this class is available on the host."},{"content":"See the &lt;xref:System.Security.SecurityState&gt; class for an example implementation of the &lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt; method.","pos":[212,363],"source":"       See the <xref:System.Security.SecurityState> class for an example implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method."}]}]},{"pos":[6415,6577],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the state is available; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the state is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.SecurityState\n  id: SecurityState\n  children:\n  - System.Security.SecurityState.#ctor\n  - System.Security.SecurityState.EnsureState\n  - System.Security.SecurityState.IsStateAvailable\n  langs:\n  - csharp\n  name: SecurityState\n  nameWithType: SecurityState\n  fullName: System.Security.SecurityState\n  type: Class\n  summary: Provides a base class for requesting the security status of an action from the <xref href=\"System.AppDomainManager\"></xref> object.\n  remarks: \"You must inherit from this class to provide a class that includes a property that specifies the security-sensitive action to be performed. The SecurityState object that is instantiated from the derived class is passed to the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the host allows that action to be performed. The default implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method always returns `false`.  The method must be overridden to detect the actions that are allowed.  \\n  \\n For example, if you want to access a Web camera in your library code, you would create a `WebcamSecurityState` object and call the <xref:System.Security.SecurityState.EnsureState%2A> method to determine whether the host allows Web camera access, as shown in the following example.  (You can find the code for `WebcamSecurityState` in the \\\"Example\\\" section.)  \\n  \\n```  \\nWebcamSecurityState securityState = new WebcamSecurityState(\\\"Safe access to Webcam\\\", WebcamSecurityOptions.SafeAccess);  \\ntry  \\n{  \\n   securityState.EnsureState();  \\n   // Allocate memory.  \\n   }  \\ncatch (ApplicationException e)  \\n{  \\n    // Handle any exception that is thrown.  \\n    System.Diagnostics.Debug.WriteLine(e.Message);  \\n}  \\n```  \\n  \\n To process the call the <xref:System.AppDomainManager> must be made aware of `WebcamSecurityState` through an override of the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method, as shown in the following example.  \\n  \\n```  \\n[SecurityCritical]  \\npublic override bool CheckSecuritySettings(System.Security.SecurityState securityState)  \\n{  \\n   switch (securityState.ToString())  \\n   {  \\n      case \\\"WebcamSecurityState\\\":  \\n      {  \\n          if ((securityState as WebcamSecurityState).Options == WebcamSecurityOptions.SafeAccess)  \\n              return PromptUser((securityState as WebcamSecurityState).Description);  \\n           return false;  \\n      }  \\n   }  \\n      return false;  \\n}  \\nprivate bool PromptUser(string text)  \\n{  \\n   // Replace the OpenFileDialog with a custom user prompt.  \\n   OpenFileDialog o = new OpenFileDialog();  \\n   o.Title = text;  \\n   if (o.ShowDialog() == DialogResult.OK)  \\n      return true;  \\n   else  \\n      return false;  \\n}  \\n  \\n```\"\n  example:\n  - \"The following example shows how to override the SecurityState class.  \\n  \\n```  \\n[SecurityCritical]  \\npublic enum WebcamSecurityOptions  \\n    {  \\n        SafeAccess,  \\n        FullAccess  \\n    }  \\n[SecurityCritical]  \\npublic class WebcamSecurityState : SecurityState  \\n{  \\n    public WebcamSecurityState(string description, WebcamSecurityOptions options)  \\n    {  \\n        Options = options;  \\n        Description = description;  \\n    }  \\n    public WebcamSecurityOptions Options { get; set; }  \\n    public string Description { get; set; }  \\n    public override void EnsureState()  \\n    {  \\n       if (!IsStateAvailable())  \\n           throw new ApplicationException(\\\"WebcamSecurityState not available\\\");  \\n    }  \\n }  \\n  \\n```\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public abstract class SecurityState\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.SecurityState.#ctor\n  id: '#ctor'\n  parent: System.Security.SecurityState\n  langs:\n  - csharp\n  name: SecurityState()\n  nameWithType: SecurityState.SecurityState()\n  fullName: System.Security.SecurityState.SecurityState()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Initializes a new instance of the <xref href=\"System.Security.SecurityState\"></xref> class.\n  syntax:\n    content: protected SecurityState ();\n    parameters: []\n  overload: System.Security.SecurityState.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityState.EnsureState\n  id: EnsureState\n  parent: System.Security.SecurityState\n  langs:\n  - csharp\n  name: EnsureState()\n  nameWithType: SecurityState.EnsureState()\n  fullName: System.Security.SecurityState.EnsureState()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: When overridden in a derived class, ensures that the state that is represented by <xref href=\"System.Security.SecurityState\"></xref> is available on the host.\n  remarks: \"The implementation of this method should be similar to the following example.  \\n  \\n```  \\npublic override void EnsureState()  \\n{  \\n    if (!IsStateAvailable())  \\n          throw new ApplicationException(\\\"WebcamSecurityState not available\\\");  \\n}  \\n  \\n```\"\n  syntax:\n    content: public abstract void EnsureState ();\n    parameters: []\n  overload: System.Security.SecurityState.EnsureState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityState.IsStateAvailable\n  id: IsStateAvailable\n  parent: System.Security.SecurityState\n  langs:\n  - csharp\n  name: IsStateAvailable()\n  nameWithType: SecurityState.IsStateAvailable()\n  fullName: System.Security.SecurityState.IsStateAvailable()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets a value that indicates whether the state for this implementation of the <xref href=\"System.Security.SecurityState\"></xref> class is available on the current host.\n  remarks: \"IsStateAvailable calls the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the state that is represented by this class is available on the host.  \\n  \\n See the <xref:System.Security.SecurityState> class for an example implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method.\"\n  syntax:\n    content: public bool IsStateAvailable ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the state is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.SecurityState.IsStateAvailable*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.SecurityState.#ctor\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: SecurityState()\n  nameWithType: SecurityState.SecurityState()\n  fullName: System.Security.SecurityState.SecurityState()\n- uid: System.Security.SecurityState.EnsureState\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: EnsureState()\n  nameWithType: SecurityState.EnsureState()\n  fullName: System.Security.SecurityState.EnsureState()\n- uid: System.Security.SecurityState.IsStateAvailable\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: IsStateAvailable()\n  nameWithType: SecurityState.IsStateAvailable()\n  fullName: System.Security.SecurityState.IsStateAvailable()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.SecurityState.#ctor*\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: SecurityState\n  nameWithType: SecurityState.SecurityState\n- uid: System.Security.SecurityState.EnsureState*\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: EnsureState\n  nameWithType: SecurityState.EnsureState\n- uid: System.Security.SecurityState.IsStateAvailable*\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: IsStateAvailable\n  nameWithType: SecurityState.IsStateAvailable\n"}