{"nodes":[{"pos":[2507,2616],"content":"An <xref:System.Security.Principal.IPrincipal> implementation that supports multiple claims-based identities.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Security.Principal.IPrincipal&gt; implementation that supports multiple claims-based identities.","pos":[0,109],"source":"An <xref:System.Security.Principal.IPrincipal> implementation that supports multiple claims-based identities."}]},{"pos":[2629,8814],"content":"Beginning with .NET Framework 4.5, Windows Identity Foundation (WIF) and claims-based identity have been fully integrated into the .NET Framework. This means that many classes that represent a principal in the .NET Framework now derive from ClaimsPrincipal rather than simply implementing the <xref:System.Security.Principal.IPrincipal> interface. In addition to implementing the <xref:System.Security.Principal.IPrincipal> interface, ClaimsPrincipal exposes properties and methods that are useful for working with claims.       ClaimsPrincipal exposes a collection of identities, each of which is a <xref:System.Security.Claims.ClaimsIdentity>. In the common case, this collection, which is accessed through the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> property, will only have a single element.       The introduction of ClaimsPrincipal in .NET 4.5 as the principal from which most principal classes derive does not force you to change anything in the way in which you deal with identity. It does, however open up more possibilities and offer more chances to exercise finer access control. For example:      -   The application code itself can work directly with the claims contained in the current principal to drive extra authentication, authorization, and personalization tasks.      -   You can front your resources with a claims processing pipeline, which can deal with authentication requests and authorization policy even before execution reaches your code. For example, you can configure a web-based application or service with a custom claims authentication manager, an instance of a class that derives from the <xref:System.Security.Claims.ClaimsAuthenticationManager> class. When so configured, the request processing pipeline invokes the <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method on your claims authentication manager passing it a ClaimsPrincipal that represents the context of the incoming request. Your claims authentication manager can then perform authentication based on the values of the incoming claims. It can also filter, transform, or add claims to the incoming claim set. For example, it could be used to enrich the incoming claim set with new claims created from a local data source such as a local user profile      -   You can configure a web-based application with a custom claims authorization manager, an instance of a class that derives from the <xref:System.Security.Claims.ClaimsAuthorizationManager> class. When so configured, the request processing pipeline packages the incoming ClaimsPrincipal in an <xref:System.Security.Claims.AuthorizationContext> and invokes the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> method on your claims authorization manager. Your claims authorization manager can then enforce authorization based on the incoming claims.      -   Inline claims-based code access checks can be performed by configuring your application with a custom claims authorization manager and using either the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> class to perform imperative access checks or the <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> to perform declarative access checks. Claims-based code access checks are performed inline, outside of the processing pipeline, and so are available to all applications as long as a claims authorization manager is configured.       You can obtain a ClaimsPrincipal instance for the principal associated with a request in an RP application (or the principal under which a thread is executing) by casting the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> property to ClaimsPrincipal. The claims associated with an ClaimsPrincipal object are available through its <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> property. The <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> property returns all of the claims contained by the identities associated with the principal. In the uncommon case in which the ClaimsPrincipal contains multiple <xref:System.Security.Claims.ClaimsIdentity> instances, you can use the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> property or you can access the primary identity by using the <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> property. ClaimsPrincipal provides several methods through which these claims may be searched and fully supports Language Integrated Query (LINQ). Identities can be added to the principal by using the <xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A> or <xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A> methods.      > [!NOTE] >  To add identities to the ClaimsPrincipal, a caller must have full trust.       By default, WIF prioritizes <xref:System.Security.Principal.WindowsIdentity> objects when selecting the primary identity to return through the <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> property. You can modify this behavior by supplying a delegate through the <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A> property to perform the selection. The <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A> property provides similar functionality for the <xref:System.Security.Claims.ClaimsPrincipal.Current%2A> property.       In the claim-based model, whether a principal is in a specified role is determined by the claims presented by its underlying identities. The <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A> method essentially examines each identity associated with the principal to determine whether it possesses a claim with the specified role value. The type of the claim (represented by its <xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> property) used to determine which claims should be examined during role checks is specified on an identity through its <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> property. Thus, the claims examined during role checks can be of a different type for different identities associated with the principal.","needQuote":false,"needEscape":true,"nodes":[{"content":"Beginning with .NET Framework 4.5, Windows Identity Foundation (WIF) and claims-based identity have been fully integrated into the .NET Framework.","pos":[0,146]},{"content":"This means that many classes that represent a principal in the .NET Framework now derive from ClaimsPrincipal rather than simply implementing the &lt;xref:System.Security.Principal.IPrincipal&gt; interface.","pos":[147,347],"source":" This means that many classes that represent a principal in the .NET Framework now derive from ClaimsPrincipal rather than simply implementing the <xref:System.Security.Principal.IPrincipal> interface."},{"content":"In addition to implementing the &lt;xref:System.Security.Principal.IPrincipal&gt; interface, ClaimsPrincipal exposes properties and methods that are useful for working with claims.","pos":[348,522],"source":" In addition to implementing the <xref:System.Security.Principal.IPrincipal> interface, ClaimsPrincipal exposes properties and methods that are useful for working with claims."},{"content":"ClaimsPrincipal exposes a collection of identities, each of which is a &lt;xref:System.Security.Claims.ClaimsIdentity&gt;.","pos":[529,645],"source":"       ClaimsPrincipal exposes a collection of identities, each of which is a <xref:System.Security.Claims.ClaimsIdentity>."},{"content":"In the common case, this collection, which is accessed through the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identities%2A&gt; property, will only have a single element.","pos":[646,815],"source":" In the common case, this collection, which is accessed through the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> property, will only have a single element."},{"content":"The introduction of ClaimsPrincipal in .NET 4.5 as the principal from which most principal classes derive does not force you to change anything in the way in which you deal with identity.","pos":[822,1009]},{"content":"It does, however open up more possibilities and offer more chances to exercise finer access control.","pos":[1010,1110]},{"content":"For example:      -   The application code itself can work directly with the claims contained in the current principal to drive extra authentication, authorization, and personalization tasks.","pos":[1111,1302]},{"content":"-   You can front your resources with a claims processing pipeline, which can deal with authentication requests and authorization policy even before execution reaches your code.","pos":[1308,1485]},{"content":"For example, you can configure a web-based application or service with a custom claims authentication manager, an instance of a class that derives from the &lt;xref:System.Security.Claims.ClaimsAuthenticationManager&gt; class.","pos":[1486,1706],"source":" For example, you can configure a web-based application or service with a custom claims authentication manager, an instance of a class that derives from the <xref:System.Security.Claims.ClaimsAuthenticationManager> class."},{"content":"When so configured, the request processing pipeline invokes the &lt;xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A&gt; method on your claims authentication manager passing it a ClaimsPrincipal that represents the context of the incoming request.","pos":[1707,1971],"source":" When so configured, the request processing pipeline invokes the <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method on your claims authentication manager passing it a ClaimsPrincipal that represents the context of the incoming request."},{"content":"Your claims authentication manager can then perform authentication based on the values of the incoming claims.","pos":[1972,2082]},{"content":"It can also filter, transform, or add claims to the incoming claim set.","pos":[2083,2154]},{"content":"For example, it could be used to enrich the incoming claim set with new claims created from a local data source such as a local user profile      -   You can configure a web-based application with a custom claims authorization manager, an instance of a class that derives from the &lt;xref:System.Security.Claims.ClaimsAuthorizationManager&gt; class.","pos":[2155,2499],"source":" For example, it could be used to enrich the incoming claim set with new claims created from a local data source such as a local user profile      -   You can configure a web-based application with a custom claims authorization manager, an instance of a class that derives from the <xref:System.Security.Claims.ClaimsAuthorizationManager> class."},{"content":"When so configured, the request processing pipeline packages the incoming ClaimsPrincipal in an &lt;xref:System.Security.Claims.AuthorizationContext&gt; and invokes the &lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A&gt; method on your claims authorization manager.","pos":[2500,2779],"source":" When so configured, the request processing pipeline packages the incoming ClaimsPrincipal in an <xref:System.Security.Claims.AuthorizationContext> and invokes the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> method on your claims authorization manager."},{"content":"Your claims authorization manager can then enforce authorization based on the incoming claims.","pos":[2780,2874]},{"content":"-   Inline claims-based code access checks can be performed by configuring your application with a custom claims authorization manager and using either the &lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt; class to perform imperative access checks or the &lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute&gt; to perform declarative access checks.","pos":[2880,3257],"source":"      -   Inline claims-based code access checks can be performed by configuring your application with a custom claims authorization manager and using either the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> class to perform imperative access checks or the <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> to perform declarative access checks."},{"content":"Claims-based code access checks are performed inline, outside of the processing pipeline, and so are available to all applications as long as a claims authorization manager is configured.","pos":[3258,3445]},{"content":"You can obtain a ClaimsPrincipal instance for the principal associated with a request in an RP application (or the principal under which a thread is executing) by casting the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property to ClaimsPrincipal.","pos":[3452,3731],"source":"       You can obtain a ClaimsPrincipal instance for the principal associated with a request in an RP application (or the principal under which a thread is executing) by casting the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> property to ClaimsPrincipal."},{"content":"The claims associated with an ClaimsPrincipal object are available through its &lt;xref:System.Security.Claims.ClaimsPrincipal.Claims%2A&gt; property.","pos":[3732,3876],"source":" The claims associated with an ClaimsPrincipal object are available through its <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> property."},{"content":"The &lt;xref:System.Security.Claims.ClaimsPrincipal.Claims%2A&gt; property returns all of the claims contained by the identities associated with the principal.","pos":[3877,4030],"source":" The <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> property returns all of the claims contained by the identities associated with the principal."},{"content":"In the uncommon case in which the ClaimsPrincipal contains multiple &lt;xref:System.Security.Claims.ClaimsIdentity&gt; instances, you can use the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identities%2A&gt; property or you can access the primary identity by using the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identity%2A&gt; property.","pos":[4031,4359],"source":" In the uncommon case in which the ClaimsPrincipal contains multiple <xref:System.Security.Claims.ClaimsIdentity> instances, you can use the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> property or you can access the primary identity by using the <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> property."},{"content":"ClaimsPrincipal provides several methods through which these claims may be searched and fully supports Language Integrated Query (LINQ).","pos":[4360,4496]},{"content":"Identities can be added to the principal by using the &lt;xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A&gt; or &lt;xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A&gt; methods.","pos":[4497,4686],"source":" Identities can be added to the principal by using the <xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A> or <xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A> methods."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  To add identities to the ClaimsPrincipal, a caller must have full trust.","pos":[4692,4777],"source":"      > [!NOTE] >  To add identities to the ClaimsPrincipal, a caller must have full trust."},{"content":"By default, WIF prioritizes &lt;xref:System.Security.Principal.WindowsIdentity&gt; objects when selecting the primary identity to return through the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identity%2A&gt; property.","pos":[4784,4994],"source":"       By default, WIF prioritizes <xref:System.Security.Principal.WindowsIdentity> objects when selecting the primary identity to return through the <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> property."},{"content":"You can modify this behavior by supplying a delegate through the &lt;xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A&gt; property to perform the selection.","pos":[4995,5167],"source":" You can modify this behavior by supplying a delegate through the <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A> property to perform the selection."},{"content":"The &lt;xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A&gt; property provides similar functionality for the &lt;xref:System.Security.Claims.ClaimsPrincipal.Current%2A&gt; property.","pos":[5168,5359],"source":" The <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A> property provides similar functionality for the <xref:System.Security.Claims.ClaimsPrincipal.Current%2A> property."},{"content":"In the claim-based model, whether a principal is in a specified role is determined by the claims presented by its underlying identities.","pos":[5366,5502]},{"content":"The &lt;xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A&gt; method essentially examines each identity associated with the principal to determine whether it possesses a claim with the specified role value.","pos":[5503,5709],"source":" The <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A> method essentially examines each identity associated with the principal to determine whether it possesses a claim with the specified role value."},{"content":"The type of the claim (represented by its &lt;xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName&gt; property) used to determine which claims should be examined during role checks is specified on an identity through its &lt;xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName&gt; property.","pos":[5710,6036],"source":" The type of the claim (represented by its <xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> property) used to determine which claims should be examined during role checks is specified on an identity through its <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> property."},{"content":"Thus, the claims examined during role checks can be of a different type for different identities associated with the principal.","pos":[6037,6164]}]},{"pos":[10076,10176],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimsPrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> class."},{"pos":[10188,10326],"content":"No identities are associated with the new instance. (The <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is empty).","needQuote":true,"needEscape":true,"nodes":[{"content":"No identities are associated with the new instance. (The <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is empty).","pos":[0,138],"nodes":[{"content":"No identities are associated with the new instance.","pos":[0,51]},{"content":"(The &lt;xref:System.Security.Claims.ClaimsPrincipal.Identities%2A&gt; collection is empty).","pos":[52,138],"source":" (The <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is empty)."}]}]},{"pos":[11107,11245],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimsPrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified claims identities.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> class using the specified claims identities."},{"pos":[11257,11377],"content":"The <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is initialized with the specified identities.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Claims.ClaimsPrincipal.Identities%2A&gt; collection is initialized with the specified identities.","pos":[0,120],"source":"The <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is initialized with the specified identities."}]},{"pos":[11662,11727],"content":"The identities from which to initialize the new claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identities from which to initialize the new claims principal.","pos":[0,65]}]},{"pos":[11902,11938],"content":"<ph id=\"ph1\">&lt;code&gt;identities&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"<code>identities</code> is **null**."},{"pos":[12575,12587],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13161,13289],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimsPrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the specified identity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> class from the specified identity."},{"pos":[13301,13632],"content":"If the specified identity is assignable from <xref:System.Security.Claims.ClaimsIdentity>, it is used to initialize the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection. Otherwise, a <xref:System.Security.Claims.ClaimsIdentity> is created using the specified identity and is used to initialize the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the specified identity is assignable from <xref:System.Security.Claims.ClaimsIdentity>, it is used to initialize the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection. Otherwise, a <xref:System.Security.Claims.ClaimsIdentity> is created using the specified identity and is used to initialize the collection.","pos":[0,331],"nodes":[{"content":"If the specified identity is assignable from &lt;xref:System.Security.Claims.ClaimsIdentity&gt;, it is used to initialize the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identities%2A&gt; collection.","pos":[0,191],"source":"If the specified identity is assignable from <xref:System.Security.Claims.ClaimsIdentity>, it is used to initialize the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection."},{"content":"Otherwise, a &lt;xref:System.Security.Claims.ClaimsIdentity&gt; is created using the specified identity and is used to initialize the collection.","pos":[192,331],"source":" Otherwise, a <xref:System.Security.Claims.ClaimsIdentity> is created using the specified identity and is used to initialize the collection."}]}]},{"pos":[13829,13892],"content":"The identity from which to initialize the new claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identity from which to initialize the new claims principal.","pos":[0,63]}]},{"pos":[14067,14101],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"<code>identity</code> is **null**."},{"pos":[14605,14734],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimsPrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the specified principal.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> class from the specified principal."},{"pos":[14746,15346],"content":"If the specified principal is assignable from <xref:System.Security.Claims.ClaimsPrincipal>, all of its identities are added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection. If the specified principal is not assignable from <xref:System.Security.Claims.ClaimsPrincipal>, a new <xref:System.Security.Claims.ClaimsIdentity> is created from the <xref:System.Security.Principal.IIdentity> in its <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName> property and added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the specified principal is assignable from <xref:System.Security.Claims.ClaimsPrincipal>, all of its identities are added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection. If the specified principal is not assignable from <xref:System.Security.Claims.ClaimsPrincipal>, a new <xref:System.Security.Claims.ClaimsIdentity> is created from the <xref:System.Security.Principal.IIdentity> in its <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName> property and added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection.","pos":[0,600],"nodes":[{"content":"If the specified principal is assignable from &lt;xref:System.Security.Claims.ClaimsPrincipal&gt;, all of its identities are added to the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identities%2A&gt; collection.","pos":[0,203],"source":"If the specified principal is assignable from <xref:System.Security.Claims.ClaimsPrincipal>, all of its identities are added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection."},{"content":"If the specified principal is not assignable from &lt;xref:System.Security.Claims.ClaimsPrincipal&gt;, a new &lt;xref:System.Security.Claims.ClaimsIdentity&gt; is created from the &lt;xref:System.Security.Principal.IIdentity&gt; in its &lt;xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName&gt; property and added to the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identities%2A&gt; collection.","pos":[204,600],"source":" If the specified principal is not assignable from <xref:System.Security.Claims.ClaimsPrincipal>, a new <xref:System.Security.Claims.ClaimsIdentity> is created from the <xref:System.Security.Principal.IIdentity> in its <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName> property and added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection."}]}]},{"pos":[15547,15611],"content":"The principal from which to initialize the new claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The principal from which to initialize the new claims principal.","pos":[0,64]}]},{"pos":[15786,15821],"content":"<ph id=\"ph1\">&lt;code&gt;principal&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"<code>principal</code> is **null**."},{"pos":[16509,16715],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimsPrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from a serialized stream created by using <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.ISerializable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> class from a serialized stream created by using <xref href=\"System.Runtime.Serialization.ISerializable\"></xref>."},{"pos":[16984,17004],"content":"The serialized data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The serialized data.","pos":[0,20]}]},{"pos":[17100,17130],"content":"The context for serialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"The context for serialization.","pos":[0,30]}]},{"pos":[17305,17335],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"<code>info</code> is **null**."},{"pos":[17975,18037],"content":"Adds the specified claims identities to this claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the specified claims identities to this claims principal.","pos":[0,62]}]},{"pos":[18049,18152],"content":"The identities are added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identities are added to the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identities%2A&gt; collection.","pos":[0,103],"source":"The identities are added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection."}]},{"pos":[18448,18477],"content":"The claims identities to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The claims identities to add.","pos":[0,29]}]},{"pos":[18660,18696],"content":"<ph id=\"ph1\">&lt;code&gt;identities&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"<code>identities</code> is **null**."},{"pos":[19207,19267],"content":"Adds the specified claims identity to this claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the specified claims identity to this claims principal.","pos":[0,60]}]},{"pos":[19279,19379],"content":"The identity is added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identity is added to the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identities%2A&gt; collection.","pos":[0,100],"source":"The identity is added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection."}]},{"pos":[19589,19616],"content":"The claims identity to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The claims identity to add.","pos":[0,27]}]},{"pos":[19797,19831],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"<code>identity</code> is **null**."},{"pos":[20193,20315],"content":"Gets a collection that contains all of the claims from all of the claims identities associated with this claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection that contains all of the claims from all of the claims identities associated with this claims principal.","pos":[0,122]}]},{"pos":[20328,21163],"content":"A claims principal has a collection of <xref:System.Security.Claims.ClaimsIdentity> objects that is accessible through the Identities property. Each <xref:System.Security.Claims.ClaimsIdentity> in the collection contains one or more claims. The Claims property returns all of the claims from all of the claims identities in this collection.       The Claims property can be examined by custom implementations of the <xref:System.Security.Claims.ClaimsAuthenticationManager> class to make authentication decisions or to filter, transform, or enrich an incoming claim set; by custom implementations of the <xref:System.Security.Claims.ClaimsAuthorizationManager> class to enforce authorization policy; or by application code to make authorization decisions or to customize user experience based on the claims present in the collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"A claims principal has a collection of <xref:System.Security.Claims.ClaimsIdentity> objects that is accessible through the Identities property. Each <xref:System.Security.Claims.ClaimsIdentity> in the collection contains one or more claims. The Claims property returns all of the claims from all of the claims identities in this collection.       The Claims property can be examined by custom implementations of the <xref:System.Security.Claims.ClaimsAuthenticationManager> class to make authentication decisions or to filter, transform, or enrich an incoming claim set; by custom implementations of the <xref:System.Security.Claims.ClaimsAuthorizationManager> class to enforce authorization policy; or by application code to make authorization decisions or to customize user experience based on the claims present in the collection.","pos":[0,833],"nodes":[{"content":"A claims principal has a collection of &lt;xref:System.Security.Claims.ClaimsIdentity&gt; objects that is accessible through the Identities property.","pos":[0,143],"source":"A claims principal has a collection of <xref:System.Security.Claims.ClaimsIdentity> objects that is accessible through the Identities property."},{"content":"Each &lt;xref:System.Security.Claims.ClaimsIdentity&gt; in the collection contains one or more claims.","pos":[144,240],"source":" Each <xref:System.Security.Claims.ClaimsIdentity> in the collection contains one or more claims."},{"content":"The Claims property returns all of the claims from all of the claims identities in this collection.","pos":[241,340]},{"content":"The Claims property can be examined by custom implementations of the &lt;xref:System.Security.Claims.ClaimsAuthenticationManager&gt; class to make authentication decisions or to filter, transform, or enrich an incoming claim set; by custom implementations of the &lt;xref:System.Security.Claims.ClaimsAuthorizationManager&gt; class to enforce authorization policy; or by application code to make authorization decisions or to customize user experience based on the claims present in the collection.","pos":[347,833],"source":"       The Claims property can be examined by custom implementations of the <xref:System.Security.Claims.ClaimsAuthenticationManager> class to make authentication decisions or to filter, transform, or enrich an incoming claim set; by custom implementations of the <xref:System.Security.Claims.ClaimsAuthorizationManager> class to enforce authorization policy; or by application code to make authorization decisions or to customize user experience based on the claims present in the collection."}]}]},{"pos":[21400,21442],"content":"The claims associated with this principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The claims associated with this principal.","pos":[0,42]}]},{"pos":[21965,22108],"content":"Gets and sets the delegate used to select the claims principal returned by the <xref:System.Security.Claims.ClaimsPrincipal.Current*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets and sets the delegate used to select the claims principal returned by the &lt;xref:System.Security.Claims.ClaimsPrincipal.Current*&gt; property.","pos":[0,143],"source":"Gets and sets the delegate used to select the claims principal returned by the <xref:System.Security.Claims.ClaimsPrincipal.Current*> property."}]},{"pos":[22120,22252],"content":"You can set this property to override the default behavior of the <xref:System.Security.Claims.ClaimsPrincipal.Current%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can set this property to override the default behavior of the &lt;xref:System.Security.Claims.ClaimsPrincipal.Current%2A&gt; property.","pos":[0,132],"source":"You can set this property to override the default behavior of the <xref:System.Security.Claims.ClaimsPrincipal.Current%2A> property."}]},{"pos":[22468,22558],"content":"The delegate. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate.","pos":[0,13]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[14,90],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[23012,23044],"content":"Returns a copy of this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a copy of this instance.","pos":[0,32]}]},{"pos":[23233,23318],"content":"A new copy of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimsPrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A new copy of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> object."},{"pos":[23913,23943],"content":"Creates a new claims identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new claims identity.","pos":[0,30]}]},{"pos":[24164,24182],"content":"The binary reader.","needQuote":true,"needEscape":true,"nodes":[{"content":"The binary reader.","pos":[0,18]}]},{"pos":[24264,24292],"content":"The created claims identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The created claims identity.","pos":[0,28]}]},{"pos":[24749,24783],"content":"Gets the current claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current claims principal.","pos":[0,34]}]},{"pos":[24795,25092],"content":"By default, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> is returned. You can change this behavior by setting the <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A> property to specify a delegate to be called to determine the current principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"By default, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> is returned. You can change this behavior by setting the <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A> property to specify a delegate to be called to determine the current principal.","pos":[0,297],"nodes":[{"content":"By default, &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; is returned.","pos":[0,100],"source":"By default, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> is returned."},{"content":"You can change this behavior by setting the &lt;xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A&gt; property to specify a delegate to be called to determine the current principal.","pos":[101,297],"source":" You can change this behavior by setting the <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A> property to specify a delegate to be called to determine the current principal."}]}]},{"pos":[25268,25297],"content":"The current claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current claims principal.","pos":[0,29]}]},{"pos":[25948,25960],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26568,26640],"content":"Retrieves all of the claims that are matched by the specified predicate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves all of the claims that are matched by the specified predicate.","pos":[0,72]}]},{"pos":[26652,26724],"content":"Returns claims from all identities associated with the claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns claims from all identities associated with the claims principal.","pos":[0,72]}]},{"pos":[26999,27045],"content":"The function that performs the matching logic.","needQuote":true,"needEscape":true,"nodes":[{"content":"The function that performs the matching logic.","pos":[0,46]}]},{"pos":[27158,27178],"content":"The matching claims.","needQuote":true,"needEscape":true,"nodes":[{"content":"The matching claims.","pos":[0,20]}]},{"pos":[27355,27386],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"<code>match</code> is **null**."},{"pos":[27805,27868],"content":"Retrieves all or the claims that have the specified claim type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves all or the claims that have the specified claim type.","pos":[0,63]}]},{"pos":[27880,28018],"content":"Returns claims from all identities associated with the claims principal. The comparison is made using Ordinal case in-sensitive on `type`.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns claims from all identities associated with the claims principal.","pos":[0,72]},{"content":"The comparison is made using Ordinal case in-sensitive on <ph id=\"ph1\">`type`</ph>.","pos":[73,138],"source":" The comparison is made using Ordinal case in-sensitive on `type`."}]},{"pos":[28225,28270],"content":"The claim type against which to match claims.","needQuote":true,"needEscape":true,"nodes":[{"content":"The claim type against which to match claims.","pos":[0,45]}]},{"pos":[28383,28403],"content":"The matching claims.","needQuote":true,"needEscape":true,"nodes":[{"content":"The matching claims.","pos":[0,20]}]},{"pos":[28580,28610],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"<code>type</code> is **null**."},{"pos":[29135,29204],"content":"Retrieves the first claim that is matched by the specified predicate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the first claim that is matched by the specified predicate.","pos":[0,69]}]},{"pos":[29441,29487],"content":"The function that performs the matching logic.","needQuote":true,"needEscape":true,"nodes":[{"content":"The function that performs the matching logic.","pos":[0,46]}]},{"pos":[29560,29670],"content":"The first matching claim or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no match is found.","needQuote":true,"needEscape":true,"source":"The first matching claim or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no match is found."},{"pos":[29849,29880],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"<code>match</code> is **null**."},{"pos":[30309,30365],"content":"Retrieves the first claim with the specified claim type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the first claim with the specified claim type.","pos":[0,56]}]},{"pos":[30534,30558],"content":"The claim type to match.","needQuote":true,"needEscape":true,"nodes":[{"content":"The claim type to match.","pos":[0,24]}]},{"pos":[30631,30741],"content":"The first matching claim or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no match is found.","needQuote":true,"needEscape":true,"source":"The first matching claim or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no match is found."},{"pos":[30920,30950],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"<code>type</code> is **null**."},{"pos":[31641,31832],"content":"Populates the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with data needed to serialize the current <bpt id=\"p2\">&lt;xref href=\"System.Security.Claims.ClaimsPrincipal\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Populates the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with data needed to serialize the current <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> object."},{"pos":[32112,32145],"content":"The object to populate with data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to populate with data.","pos":[0,33]}]},{"pos":[32241,32349],"content":"The destination for this serialization. Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination for this serialization.","pos":[0,39]},{"content":"Can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[40,108],"source":" Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[32532,32614],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>info</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[33134,33280],"content":"Determines whether any of the claims identities associated with this claims principal contains a claim that is matched by the specified predicate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether any of the claims identities associated with this claims principal contains a claim that is matched by the specified predicate.","pos":[0,146]}]},{"pos":[33492,33538],"content":"The function that performs the matching logic.","needQuote":true,"needEscape":true,"nodes":[{"content":"The function that performs the matching logic.","pos":[0,46]}]},{"pos":[33597,33760],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a matching claim exists; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a matching claim exists; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[33938,33969],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","needQuote":true,"needEscape":true,"source":"<code>match</code> is **null**."},{"pos":[34442,34585],"content":"Determines whether any of the claims identities associated with this claims principal contains a claim with the specified claim type and value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether any of the claims identities associated with this claims principal contains a claim with the specified claim type and value.","pos":[0,143]}]},{"pos":[34597,34820],"content":"Does not check the <xref:System.Security.Claims.Claim.Issuer%2A> or <xref:System.Security.Claims.Claim.OriginalIssuer%2A> properties. The comparison is made using Ordinal, case sensitive on value; case in-sensitive on type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Does not check the <xref:System.Security.Claims.Claim.Issuer%2A> or <xref:System.Security.Claims.Claim.OriginalIssuer%2A> properties. The comparison is made using Ordinal, case sensitive on value; case in-sensitive on type.","pos":[0,223],"nodes":[{"content":"Does not check the &lt;xref:System.Security.Claims.Claim.Issuer%2A&gt; or &lt;xref:System.Security.Claims.Claim.OriginalIssuer%2A&gt; properties.","pos":[0,133],"source":"Does not check the <xref:System.Security.Claims.Claim.Issuer%2A> or <xref:System.Security.Claims.Claim.OriginalIssuer%2A> properties."},{"content":"The comparison is made using Ordinal, case sensitive on value; case in-sensitive on type.","pos":[134,223]}]}]},{"pos":[34978,35009],"content":"The type of the claim to match.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the claim to match.","pos":[0,31]}]},{"pos":[35071,35103],"content":"The value of the claim to match.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the claim to match.","pos":[0,32]}]},{"pos":[35162,35325],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a matching claim exists; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a matching claim exists; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[35504,35587],"content":"<code>type</code> is **null**.       -or-       <code>value</code> is **null**.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","pos":[0,30],"source":"<code>type</code> is **null**."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.","pos":[37,79],"source":"       -or-       <code>value</code> is **null**."}]},{"pos":[35970,36069],"content":"Gets a collection that contains all of the claims identities associated with this claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection that contains all of the claims identities associated with this claims principal.","pos":[0,99]}]},{"pos":[36082,36233],"content":"In the common case, the collection contains only a single element.       It is possible for the collection to contain some elements which are `null`.","needQuote":false,"needEscape":true,"nodes":[{"content":"In the common case, the collection contains only a single element.","pos":[0,66]},{"content":"It is possible for the collection to contain some elements which are <ph id=\"ph1\">`null`</ph>.","pos":[73,149],"source":"       It is possible for the collection to contain some elements which are `null`."}]},{"pos":[36492,36528],"content":"The collection of claims identities.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection of claims identities.","pos":[0,36]}]},{"pos":[36980,37051],"content":"Gets the primary claims identity associated with this claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the primary claims identity associated with this claims principal.","pos":[0,71]}]},{"pos":[37064,37952],"content":"By default, the framework prioritizes identities of type <xref:System.Security.Principal.WindowsIdentity> when returning the identity. The first <xref:System.Security.Principal.WindowsIdentity> found in the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is returned. If there is no <xref:System.Security.Principal.WindowsIdentity> in the collection, the first identity assignable from <xref:System.Security.Claims.ClaimsIdentity> is returned. If there is no <xref:System.Security.Claims.ClaimsIdentity>, `null` is returned. If the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is empty, an <xref:System.ArgumentNullException> is thrown.       You can change the default behavior by setting the <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A> property to specify a delegate to be called to determine the identity.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the framework prioritizes identities of type &lt;xref:System.Security.Principal.WindowsIdentity&gt; when returning the identity.","pos":[0,134],"source":"By default, the framework prioritizes identities of type <xref:System.Security.Principal.WindowsIdentity> when returning the identity."},{"content":"The first &lt;xref:System.Security.Principal.WindowsIdentity&gt; found in the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identities%2A&gt; collection is returned.","pos":[135,290],"source":" The first <xref:System.Security.Principal.WindowsIdentity> found in the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is returned."},{"content":"If there is no &lt;xref:System.Security.Principal.WindowsIdentity&gt; in the collection, the first identity assignable from &lt;xref:System.Security.Claims.ClaimsIdentity&gt; is returned.","pos":[291,466],"source":" If there is no <xref:System.Security.Principal.WindowsIdentity> in the collection, the first identity assignable from <xref:System.Security.Claims.ClaimsIdentity> is returned."},{"content":"If there is no &lt;xref:System.Security.Claims.ClaimsIdentity&gt;, <ph id=\"ph1\">`null`</ph> is returned.","pos":[467,547],"source":" If there is no <xref:System.Security.Claims.ClaimsIdentity>, `null` is returned."},{"content":"If the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identities%2A&gt; collection is empty, an &lt;xref:System.ArgumentNullException&gt; is thrown.","pos":[548,685],"source":" If the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is empty, an <xref:System.ArgumentNullException> is thrown."},{"content":"You can change the default behavior by setting the &lt;xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A&gt; property to specify a delegate to be called to determine the identity.","pos":[692,886],"source":"       You can change the default behavior by setting the <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A> property to specify a delegate to be called to determine the identity."}]},{"pos":[38125,38191],"content":"The primary claims identity associated with this claims principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The primary claims identity associated with this claims principal.","pos":[0,66]}]},{"pos":[38693,38812],"content":"Returns a value that indicates whether the entity (user) represented by this claims principal is in the specified role.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether the entity (user) represented by this claims principal is in the specified role.","pos":[0,119]}]},{"pos":[38825,39391],"content":"The IsInRole method checks whether an identity that this claims principal possesses contains a claim of type <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> where the value of the claim is equal to the value specified by the `role` parameter.      > [!NOTE] >  Each <xref:System.Security.Claims.ClaimsIdentity> has its own definition of the claim type that represents a role. This claim type can be accessed and set through the <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The IsInRole method checks whether an identity that this claims principal possesses contains a claim of type &lt;xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName&gt; where the value of the claim is equal to the value specified by the <ph id=\"ph1\">`role`</ph> parameter.","pos":[0,281],"source":"The IsInRole method checks whether an identity that this claims principal possesses contains a claim of type <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> where the value of the claim is equal to the value specified by the `role` parameter."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Each &lt;xref:System.Security.Claims.ClaimsIdentity&gt; has its own definition of the claim type that represents a role.","pos":[287,414],"source":"      > [!NOTE] >  Each <xref:System.Security.Claims.ClaimsIdentity> has its own definition of the claim type that represents a role."},{"content":"This claim type can be accessed and set through the &lt;xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName&gt; property.","pos":[415,563],"source":" This claim type can be accessed and set through the <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> property."}]},{"pos":[39536,39564],"content":"The role for which to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The role for which to check.","pos":[0,28]}]},{"pos":[39623,39804],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if claims principal is in the specified role; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if claims principal is in the specified role; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[40329,40472],"content":"Gets and sets the delegate used to select the claims identity returned by the <xref:System.Security.Claims.ClaimsPrincipal.Identity*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets and sets the delegate used to select the claims identity returned by the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identity*&gt; property.","pos":[0,143],"source":"Gets and sets the delegate used to select the claims identity returned by the <xref:System.Security.Claims.ClaimsPrincipal.Identity*> property."}]},{"pos":[40484,40617],"content":"You can set this property to override the default behavior of the <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can set this property to override the default behavior of the &lt;xref:System.Security.Claims.ClaimsPrincipal.Identity%2A&gt; property.","pos":[0,133],"source":"You can set this property to override the default behavior of the <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> property."}]},{"pos":[40987,41077],"content":"The delegate. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate.","pos":[0,13]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[14,90],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[41785,41797],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[42558,42570],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[42635,42647],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Claims.ClaimsPrincipal\n  id: ClaimsPrincipal\n  children:\n  - System.Security.Claims.ClaimsPrincipal.#ctor\n  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  - System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)\n  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)\n  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)\n  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  - System.Security.Claims.ClaimsPrincipal.Claims\n  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  - System.Security.Claims.ClaimsPrincipal.Clone\n  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  - System.Security.Claims.ClaimsPrincipal.Current\n  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  - System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n  - System.Security.Claims.ClaimsPrincipal.Identities\n  - System.Security.Claims.ClaimsPrincipal.Identity\n  - System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  langs:\n  - csharp\n  name: ClaimsPrincipal\n  nameWithType: ClaimsPrincipal\n  fullName: System.Security.Claims.ClaimsPrincipal\n  type: Class\n  summary: An <xref:System.Security.Principal.IPrincipal> implementation that supports multiple claims-based identities.\n  remarks: \"Beginning with .NET Framework 4.5, Windows Identity Foundation (WIF) and claims-based identity have been fully integrated into the .NET Framework. This means that many classes that represent a principal in the .NET Framework now derive from ClaimsPrincipal rather than simply implementing the <xref:System.Security.Principal.IPrincipal> interface. In addition to implementing the <xref:System.Security.Principal.IPrincipal> interface, ClaimsPrincipal exposes properties and methods that are useful for working with claims.  \\n  \\n ClaimsPrincipal exposes a collection of identities, each of which is a <xref:System.Security.Claims.ClaimsIdentity>. In the common case, this collection, which is accessed through the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> property, will only have a single element.  \\n  \\n The introduction of ClaimsPrincipal in .NET 4.5 as the principal from which most principal classes derive does not force you to change anything in the way in which you deal with identity. It does, however open up more possibilities and offer more chances to exercise finer access control. For example:  \\n  \\n-   The application code itself can work directly with the claims contained in the current principal to drive extra authentication, authorization, and personalization tasks.  \\n  \\n-   You can front your resources with a claims processing pipeline, which can deal with authentication requests and authorization policy even before execution reaches your code. For example, you can configure a web-based application or service with a custom claims authentication manager, an instance of a class that derives from the <xref:System.Security.Claims.ClaimsAuthenticationManager> class. When so configured, the request processing pipeline invokes the <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method on your claims authentication manager passing it a ClaimsPrincipal that represents the context of the incoming request. Your claims authentication manager can then perform authentication based on the values of the incoming claims. It can also filter, transform, or add claims to the incoming claim set. For example, it could be used to enrich the incoming claim set with new claims created from a local data source such as a local user profile  \\n  \\n-   You can configure a web-based application with a custom claims authorization manager, an instance of a class that derives from the <xref:System.Security.Claims.ClaimsAuthorizationManager> class. When so configured, the request processing pipeline packages the incoming ClaimsPrincipal in an <xref:System.Security.Claims.AuthorizationContext> and invokes the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> method on your claims authorization manager. Your claims authorization manager can then enforce authorization based on the incoming claims.  \\n  \\n-   Inline claims-based code access checks can be performed by configuring your application with a custom claims authorization manager and using either the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> class to perform imperative access checks or the <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> to perform declarative access checks. Claims-based code access checks are performed inline, outside of the processing pipeline, and so are available to all applications as long as a claims authorization manager is configured.  \\n  \\n You can obtain a ClaimsPrincipal instance for the principal associated with a request in an RP application (or the principal under which a thread is executing) by casting the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> property to ClaimsPrincipal. The claims associated with an ClaimsPrincipal object are available through its <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> property. The <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> property returns all of the claims contained by the identities associated with the principal. In the uncommon case in which the ClaimsPrincipal contains multiple <xref:System.Security.Claims.ClaimsIdentity> instances, you can use the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> property or you can access the primary identity by using the <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> property. ClaimsPrincipal provides several methods through which these claims may be searched and fully supports Language Integrated Query (LINQ). Identities can be added to the principal by using the <xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A> or <xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A> methods.  \\n  \\n> [!NOTE]\\n>  To add identities to the ClaimsPrincipal, a caller must have full trust.  \\n  \\n By default, WIF prioritizes <xref:System.Security.Principal.WindowsIdentity> objects when selecting the primary identity to return through the <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> property. You can modify this behavior by supplying a delegate through the <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A> property to perform the selection. The <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A> property provides similar functionality for the <xref:System.Security.Claims.ClaimsPrincipal.Current%2A> property.  \\n  \\n In the claim-based model, whether a principal is in a specified role is determined by the claims presented by its underlying identities. The <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A> method essentially examines each identity associated with the principal to determine whether it possesses a claim with the specified role value. The type of the claim (represented by its <xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> property) used to determine which claims should be examined during role checks is specified on an identity through its <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> property. Thus, the claims examined during role checks can be of a different type for different identities associated with the principal.\"\n  example:\n  - \"The following example extracts the claims presented by a user in an HTTP request and writes them to the HTTP response. The current user is read from the <xref:System.Web.HttpContext> as a ClaimsPrincipal. The claims are then read from it and then are written to the response.  \\n  \\n```  \\n  \\nClaimsPrincipal principal = HttpContext.Current.User as ClaimsPrincipal;  \\nif (null != principal)  \\n{  \\n   foreach (Claim claim in principal.Claims)  \\n   {  \\n      Response.Write(\\\"CLAIM TYPE: \\\" + claim.Type + \\\"; CLAIM VALUE: \\\" + claim.Value + \\\"</br>\\\");  \\n   }  \\n}  \\n```\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class ClaimsPrincipal : System.Security.Principal.IPrincipal\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Principal.IPrincipal\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor\n  id: '#ctor'\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: ClaimsPrincipal()\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal()\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> class.\n  remarks: No identities are associated with the new instance. (The <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is empty).\n  syntax:\n    content: public ClaimsPrincipal ();\n    parameters: []\n  overload: System.Security.Claims.ClaimsPrincipal.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})'\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> class using the specified claims identities.\n  remarks: The <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is initialized with the specified identities.\n  syntax:\n    content: public ClaimsPrincipal (System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities);\n    parameters:\n    - id: identities\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}\n      description: The identities from which to initialize the new claims principal.\n  overload: System.Security.Claims.ClaimsPrincipal.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>identities</code> is **null**.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)\n  id: '#ctor(System.IO.BinaryReader)'\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: ClaimsPrincipal(BinaryReader)\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(BinaryReader)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  syntax:\n    content: public ClaimsPrincipal (System.IO.BinaryReader reader);\n    parameters:\n    - id: reader\n      type: System.IO.BinaryReader\n      description: To be added.\n  overload: System.Security.Claims.ClaimsPrincipal.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)\n  id: '#ctor(System.Security.Principal.IIdentity)'\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: ClaimsPrincipal(IIdentity)\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IIdentity)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> class from the specified identity.\n  remarks: If the specified identity is assignable from <xref:System.Security.Claims.ClaimsIdentity>, it is used to initialize the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection. Otherwise, a <xref:System.Security.Claims.ClaimsIdentity> is created using the specified identity and is used to initialize the collection.\n  syntax:\n    content: public ClaimsPrincipal (System.Security.Principal.IIdentity identity);\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IIdentity\n      description: The identity from which to initialize the new claims principal.\n  overload: System.Security.Claims.ClaimsPrincipal.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>identity</code> is **null**.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)\n  id: '#ctor(System.Security.Principal.IPrincipal)'\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: ClaimsPrincipal(IPrincipal)\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IPrincipal)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> class from the specified principal.\n  remarks: If the specified principal is assignable from <xref:System.Security.Claims.ClaimsPrincipal>, all of its identities are added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection. If the specified principal is not assignable from <xref:System.Security.Claims.ClaimsPrincipal>, a new <xref:System.Security.Claims.ClaimsIdentity> is created from the <xref:System.Security.Principal.IIdentity> in its <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName> property and added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection.\n  syntax:\n    content: public ClaimsPrincipal (System.Security.Principal.IPrincipal principal);\n    parameters:\n    - id: principal\n      type: System.Security.Principal.IPrincipal\n      description: The principal from which to initialize the new claims principal.\n  overload: System.Security.Claims.ClaimsPrincipal.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>principal</code> is **null**.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: ClaimsPrincipal(SerializationInfo,StreamingContext)\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> class from a serialized stream created by using <xref href=\"System.Runtime.Serialization.ISerializable\"></xref>.\n  syntax:\n    content: protected ClaimsPrincipal (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The serialized data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The context for serialization.\n  overload: System.Security.Claims.ClaimsPrincipal.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>info</code> is **null**.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  id: AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: AddIdentities(IEnumerable<ClaimsIdentity>)\n  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)\n  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Adds the specified claims identities to this claims principal.\n  remarks: The identities are added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection.\n  syntax:\n    content: public virtual void AddIdentities (System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities);\n    parameters:\n    - id: identities\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}\n      description: The claims identities to add.\n  overload: System.Security.Claims.ClaimsPrincipal.AddIdentities*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>identities</code> is **null**.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  id: AddIdentity(System.Security.Claims.ClaimsIdentity)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: AddIdentity(ClaimsIdentity)\n  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)\n  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(ClaimsIdentity)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Adds the specified claims identity to this claims principal.\n  remarks: The identity is added to the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection.\n  syntax:\n    content: public virtual void AddIdentity (System.Security.Claims.ClaimsIdentity identity);\n    parameters:\n    - id: identity\n      type: System.Security.Claims.ClaimsIdentity\n      description: The claims identity to add.\n  overload: System.Security.Claims.ClaimsPrincipal.AddIdentity*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>identity</code> is **null**.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.Claims\n  id: Claims\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: Claims\n  nameWithType: ClaimsPrincipal.Claims\n  fullName: System.Security.Claims.ClaimsPrincipal.Claims\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Gets a collection that contains all of the claims from all of the claims identities associated with this claims principal.\n  remarks: \"A claims principal has a collection of <xref:System.Security.Claims.ClaimsIdentity> objects that is accessible through the Identities property. Each <xref:System.Security.Claims.ClaimsIdentity> in the collection contains one or more claims. The Claims property returns all of the claims from all of the claims identities in this collection.  \\n  \\n The Claims property can be examined by custom implementations of the <xref:System.Security.Claims.ClaimsAuthenticationManager> class to make authentication decisions or to filter, transform, or enrich an incoming claim set; by custom implementations of the <xref:System.Security.Claims.ClaimsAuthorizationManager> class to enforce authorization policy; or by application code to make authorization decisions or to customize user experience based on the claims present in the collection.\"\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: The claims associated with this principal.\n  overload: System.Security.Claims.ClaimsPrincipal.Claims*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  id: ClaimsPrincipalSelector\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: ClaimsPrincipalSelector\n  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Gets and sets the delegate used to select the claims principal returned by the <xref:System.Security.Claims.ClaimsPrincipal.Current*> property.\n  remarks: You can set this property to override the default behavior of the <xref:System.Security.Claims.ClaimsPrincipal.Current%2A> property.\n  syntax:\n    content: public static Func<System.Security.Claims.ClaimsPrincipal> ClaimsPrincipalSelector { get; set; }\n    return:\n      type: System.Func{System.Security.Claims.ClaimsPrincipal}\n      description: The delegate. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.Clone\n  id: Clone\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: ClaimsPrincipal.Clone()\n  fullName: System.Security.Claims.ClaimsPrincipal.Clone()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Returns a copy of this instance.\n  syntax:\n    content: public virtual System.Security.Claims.ClaimsPrincipal Clone ();\n    parameters: []\n    return:\n      type: System.Security.Claims.ClaimsPrincipal\n      description: A new copy of the <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> object.\n  overload: System.Security.Claims.ClaimsPrincipal.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  id: CreateClaimsIdentity(System.IO.BinaryReader)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: CreateClaimsIdentity(BinaryReader)\n  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)\n  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Creates a new claims identity.\n  syntax:\n    content: protected virtual System.Security.Claims.ClaimsIdentity CreateClaimsIdentity (System.IO.BinaryReader reader);\n    parameters:\n    - id: reader\n      type: System.IO.BinaryReader\n      description: The binary reader.\n    return:\n      type: System.Security.Claims.ClaimsIdentity\n      description: The created claims identity.\n  overload: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.Current\n  id: Current\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: Current\n  nameWithType: ClaimsPrincipal.Current\n  fullName: System.Security.Claims.ClaimsPrincipal.Current\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Gets the current claims principal.\n  remarks: By default, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> is returned. You can change this behavior by setting the <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A> property to specify a delegate to be called to determine the current principal.\n  syntax:\n    content: public static System.Security.Claims.ClaimsPrincipal Current { get; }\n    return:\n      type: System.Security.Claims.ClaimsPrincipal\n      description: The current claims principal.\n  overload: System.Security.Claims.ClaimsPrincipal.Current*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  id: CustomSerializationData\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: CustomSerializationData\n  nameWithType: ClaimsPrincipal.CustomSerializationData\n  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  syntax:\n    content: protected virtual byte[] CustomSerializationData { get; }\n    return:\n      type: System.Byte[]\n      description: To be added.\n  overload: System.Security.Claims.ClaimsPrincipal.CustomSerializationData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n  id: FindAll(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: FindAll(Predicate<Claim>)\n  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(Predicate<Claim>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Retrieves all of the claims that are matched by the specified predicate.\n  remarks: Returns claims from all identities associated with the claims principal.\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (Predicate<System.Security.Claims.Claim> match);\n    parameters:\n    - id: match\n      type: System.Predicate{System.Security.Claims.Claim}\n      description: The function that performs the matching logic.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: The matching claims.\n  overload: System.Security.Claims.ClaimsPrincipal.FindAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is **null**.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  id: FindAll(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: FindAll(String)\n  nameWithType: ClaimsPrincipal.FindAll(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Retrieves all or the claims that have the specified claim type.\n  remarks: Returns claims from all identities associated with the claims principal. The comparison is made using Ordinal case in-sensitive on `type`.\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (string type);\n    parameters:\n    - id: type\n      type: System.String\n      description: The claim type against which to match claims.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: The matching claims.\n  overload: System.Security.Claims.ClaimsPrincipal.FindAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is **null**.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  id: FindFirst(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: FindFirst(Predicate<Claim>)\n  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(Predicate<Claim>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Retrieves the first claim that is matched by the specified predicate.\n  syntax:\n    content: public virtual System.Security.Claims.Claim FindFirst (Predicate<System.Security.Claims.Claim> match);\n    parameters:\n    - id: match\n      type: System.Predicate{System.Security.Claims.Claim}\n      description: The function that performs the matching logic.\n    return:\n      type: System.Security.Claims.Claim\n      description: The first matching claim or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no match is found.\n  overload: System.Security.Claims.ClaimsPrincipal.FindFirst*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is **null**.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  id: FindFirst(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: FindFirst(String)\n  nameWithType: ClaimsPrincipal.FindFirst(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Retrieves the first claim with the specified claim type.\n  syntax:\n    content: public virtual System.Security.Claims.Claim FindFirst (string type);\n    parameters:\n    - id: type\n      type: System.String\n      description: The claim type to match.\n    return:\n      type: System.Security.Claims.Claim\n      description: The first matching claim or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no match is found.\n  overload: System.Security.Claims.ClaimsPrincipal.FindFirst*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is **null**.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Populates the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with data needed to serialize the current <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> object.\n  syntax:\n    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object to populate with data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The destination for this serialization. Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.Claims.ClaimsPrincipal.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>info</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  id: HasClaim(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: HasClaim(Predicate<Claim>)\n  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(Predicate<Claim>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Determines whether any of the claims identities associated with this claims principal contains a claim that is matched by the specified predicate.\n  syntax:\n    content: public virtual bool HasClaim (Predicate<System.Security.Claims.Claim> match);\n    parameters:\n    - id: match\n      type: System.Predicate{System.Security.Claims.Claim}\n      description: The function that performs the matching logic.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a matching claim exists; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Claims.ClaimsPrincipal.HasClaim*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is **null**.\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n  id: HasClaim(System.String,System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: HasClaim(String,String)\n  nameWithType: ClaimsPrincipal.HasClaim(String,String)\n  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(String,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Determines whether any of the claims identities associated with this claims principal contains a claim with the specified claim type and value.\n  remarks: Does not check the <xref:System.Security.Claims.Claim.Issuer%2A> or <xref:System.Security.Claims.Claim.OriginalIssuer%2A> properties. The comparison is made using Ordinal, case sensitive on value; case in-sensitive on type.\n  syntax:\n    content: public virtual bool HasClaim (string type, string value);\n    parameters:\n    - id: type\n      type: System.String\n      description: The type of the claim to match.\n    - id: value\n      type: System.String\n      description: The value of the claim to match.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a matching claim exists; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Claims.ClaimsPrincipal.HasClaim*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> is **null**.  \\n  \\n -or-  \\n  \\n <code>value</code> is **null**.\"\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.Identities\n  id: Identities\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: Identities\n  nameWithType: ClaimsPrincipal.Identities\n  fullName: System.Security.Claims.ClaimsPrincipal.Identities\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Gets a collection that contains all of the claims identities associated with this claims principal.\n  remarks: \"In the common case, the collection contains only a single element.  \\n  \\n It is possible for the collection to contain some elements which are `null`.\"\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> Identities { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}\n      description: The collection of claims identities.\n  overload: System.Security.Claims.ClaimsPrincipal.Identities*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.Identity\n  id: Identity\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: Identity\n  nameWithType: ClaimsPrincipal.Identity\n  fullName: System.Security.Claims.ClaimsPrincipal.Identity\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Gets the primary claims identity associated with this claims principal.\n  remarks: \"By default, the framework prioritizes identities of type <xref:System.Security.Principal.WindowsIdentity> when returning the identity. The first <xref:System.Security.Principal.WindowsIdentity> found in the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is returned. If there is no <xref:System.Security.Principal.WindowsIdentity> in the collection, the first identity assignable from <xref:System.Security.Claims.ClaimsIdentity> is returned. If there is no <xref:System.Security.Claims.ClaimsIdentity>, `null` is returned. If the <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> collection is empty, an <xref:System.ArgumentNullException> is thrown.  \\n  \\n You can change the default behavior by setting the <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A> property to specify a delegate to be called to determine the identity.\"\n  syntax:\n    content: public virtual System.Security.Principal.IIdentity Identity { get; }\n    return:\n      type: System.Security.Principal.IIdentity\n      description: The primary claims identity associated with this claims principal.\n  overload: System.Security.Claims.ClaimsPrincipal.Identity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  id: IsInRole(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: IsInRole(String)\n  nameWithType: ClaimsPrincipal.IsInRole(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Returns a value that indicates whether the entity (user) represented by this claims principal is in the specified role.\n  remarks: \"The IsInRole method checks whether an identity that this claims principal possesses contains a claim of type <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> where the value of the claim is equal to the value specified by the `role` parameter.  \\n  \\n> [!NOTE]\\n>  Each <xref:System.Security.Claims.ClaimsIdentity> has its own definition of the claim type that represents a role. This claim type can be accessed and set through the <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public virtual bool IsInRole (string role);\n    parameters:\n    - id: role\n      type: System.String\n      description: The role for which to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if claims principal is in the specified role; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Claims.ClaimsPrincipal.IsInRole*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  id: PrimaryIdentitySelector\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: PrimaryIdentitySelector\n  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector\n  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  summary: Gets and sets the delegate used to select the claims identity returned by the <xref:System.Security.Claims.ClaimsPrincipal.Identity*> property.\n  remarks: You can set this property to override the default behavior of the <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> property.\n  syntax:\n    content: public static Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity> PrimaryIdentitySelector { get; set; }\n    return:\n      type: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}\n      description: The delegate. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  id: WriteTo(System.IO.BinaryWriter)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: WriteTo(BinaryWriter)\n  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)\n  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  syntax:\n    content: public virtual void WriteTo (System.IO.BinaryWriter writer);\n    parameters:\n    - id: writer\n      type: System.IO.BinaryWriter\n      description: To be added.\n  overload: System.Security.Claims.ClaimsPrincipal.WriteTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  id: WriteTo(System.IO.BinaryWriter,System.Byte[])\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  name: WriteTo(BinaryWriter,Byte[])\n  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])\n  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Claims\n  syntax:\n    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);\n    parameters:\n    - id: writer\n      type: System.IO.BinaryWriter\n      description: To be added.\n    - id: userData\n      type: System.Byte[]\n      description: To be added.\n  overload: System.Security.Claims.ClaimsPrincipal.WriteTo*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: ClaimsPrincipal()\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal()\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)\n- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<ClaimsIdentity>\n  nameWithType: IEnumerable<ClaimsIdentity>\n  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Security.Claims.ClaimsIdentity>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    nameWithType: ClaimsIdentity\n    fullName: ClaimsIdentity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: ClaimsPrincipal(BinaryReader)\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(BinaryReader)\n- uid: System.IO.BinaryReader\n  parent: System.IO\n  isExternal: true\n  name: BinaryReader\n  nameWithType: BinaryReader\n  fullName: System.IO.BinaryReader\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: ClaimsPrincipal(IIdentity)\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IIdentity)\n- uid: System.Security.Principal.IIdentity\n  parent: System.Security.Principal\n  isExternal: true\n  name: IIdentity\n  nameWithType: IIdentity\n  fullName: System.Security.Principal.IIdentity\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: ClaimsPrincipal(IPrincipal)\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IPrincipal)\n- uid: System.Security.Principal.IPrincipal\n  parent: System.Security.Principal\n  isExternal: true\n  name: IPrincipal\n  nameWithType: IPrincipal\n  fullName: System.Security.Principal.IPrincipal\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: ClaimsPrincipal(SerializationInfo,StreamingContext)\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: AddIdentities(IEnumerable<ClaimsIdentity>)\n  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)\n  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)\n- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: AddIdentity(ClaimsIdentity)\n  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)\n  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(ClaimsIdentity)\n- uid: System.Security.Claims.ClaimsIdentity\n  parent: System.Security.Claims\n  isExternal: false\n  name: ClaimsIdentity\n  nameWithType: ClaimsIdentity\n  fullName: System.Security.Claims.ClaimsIdentity\n- uid: System.Security.Claims.ClaimsPrincipal.Claims\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Claims\n  nameWithType: ClaimsPrincipal.Claims\n  fullName: System.Security.Claims.ClaimsPrincipal.Claims\n- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<Claim>\n  nameWithType: IEnumerable<Claim>\n  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Security.Claims.Claim>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    nameWithType: Claim\n    fullName: Claim\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: ClaimsPrincipalSelector\n  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n- uid: System.Func{System.Security.Claims.ClaimsPrincipal}\n  parent: System\n  isExternal: true\n  name: Func<ClaimsPrincipal>\n  nameWithType: Func<ClaimsPrincipal>\n  fullName: System.Func<System.Security.Claims.ClaimsPrincipal>\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    nameWithType: Func\n    fullName: Func<System.Security.Claims.ClaimsPrincipal>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Security.Claims.ClaimsPrincipal\n    name: ClaimsPrincipal\n    nameWithType: ClaimsPrincipal\n    fullName: ClaimsPrincipal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Security.Claims.ClaimsPrincipal.Clone\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Clone()\n  nameWithType: ClaimsPrincipal.Clone()\n  fullName: System.Security.Claims.ClaimsPrincipal.Clone()\n- uid: System.Security.Claims.ClaimsPrincipal\n  parent: System.Security.Claims\n  isExternal: false\n  name: ClaimsPrincipal\n  nameWithType: ClaimsPrincipal\n  fullName: System.Security.Claims.ClaimsPrincipal\n- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: CreateClaimsIdentity(BinaryReader)\n  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)\n  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)\n- uid: System.Security.Claims.ClaimsPrincipal.Current\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Current\n  nameWithType: ClaimsPrincipal.Current\n  fullName: System.Security.Claims.ClaimsPrincipal.Current\n- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: CustomSerializationData\n  nameWithType: ClaimsPrincipal.CustomSerializationData\n  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: FindAll(Predicate<Claim>)\n  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(Predicate<Claim>)\n- uid: System.Predicate{System.Security.Claims.Claim}\n  parent: System\n  isExternal: true\n  name: Predicate<Claim>\n  nameWithType: Predicate<Claim>\n  fullName: System.Predicate<System.Security.Claims.Claim>\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    nameWithType: Predicate\n    fullName: Predicate<System.Security.Claims.Claim>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    nameWithType: Claim\n    fullName: Claim\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: FindAll(String)\n  nameWithType: ClaimsPrincipal.FindAll(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: FindFirst(Predicate<Claim>)\n  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(Predicate<Claim>)\n- uid: System.Security.Claims.Claim\n  parent: System.Security.Claims\n  isExternal: false\n  name: Claim\n  nameWithType: Claim\n  fullName: System.Security.Claims.Claim\n- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: FindFirst(String)\n  nameWithType: ClaimsPrincipal.FindFirst(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(String)\n- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: HasClaim(Predicate<Claim>)\n  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(Predicate<Claim>)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: HasClaim(String,String)\n  nameWithType: ClaimsPrincipal.HasClaim(String,String)\n  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(String,String)\n- uid: System.Security.Claims.ClaimsPrincipal.Identities\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Identities\n  nameWithType: ClaimsPrincipal.Identities\n  fullName: System.Security.Claims.ClaimsPrincipal.Identities\n- uid: System.Security.Claims.ClaimsPrincipal.Identity\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Identity\n  nameWithType: ClaimsPrincipal.Identity\n  fullName: System.Security.Claims.ClaimsPrincipal.Identity\n- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: IsInRole(String)\n  nameWithType: ClaimsPrincipal.IsInRole(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(String)\n- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: PrimaryIdentitySelector\n  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector\n  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n- uid: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}\n  parent: System\n  isExternal: true\n  name: Func<IEnumerable<ClaimsIdentity>,ClaimsIdentity>\n  nameWithType: Func<IEnumerable<ClaimsIdentity>,ClaimsIdentity>\n  fullName: System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Security.Claims.ClaimsIdentity>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    nameWithType: ClaimsIdentity\n    fullName: ClaimsIdentity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    nameWithType: ClaimsIdentity\n    fullName: ClaimsIdentity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: WriteTo(BinaryWriter)\n  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)\n  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter)\n- uid: System.IO.BinaryWriter\n  parent: System.IO\n  isExternal: true\n  name: BinaryWriter\n  nameWithType: BinaryWriter\n  fullName: System.IO.BinaryWriter\n- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: WriteTo(BinaryWriter,Byte[])\n  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])\n  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: ClaimsPrincipal\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal\n- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: AddIdentities\n  nameWithType: ClaimsPrincipal.AddIdentities\n- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: AddIdentity\n  nameWithType: ClaimsPrincipal.AddIdentity\n- uid: System.Security.Claims.ClaimsPrincipal.Claims*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Claims\n  nameWithType: ClaimsPrincipal.Claims\n- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: ClaimsPrincipalSelector\n  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector\n- uid: System.Security.Claims.ClaimsPrincipal.Clone*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Clone\n  nameWithType: ClaimsPrincipal.Clone\n- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: CreateClaimsIdentity\n  nameWithType: ClaimsPrincipal.CreateClaimsIdentity\n- uid: System.Security.Claims.ClaimsPrincipal.Current*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Current\n  nameWithType: ClaimsPrincipal.Current\n- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: CustomSerializationData\n  nameWithType: ClaimsPrincipal.CustomSerializationData\n- uid: System.Security.Claims.ClaimsPrincipal.FindAll*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: FindAll\n  nameWithType: ClaimsPrincipal.FindAll\n- uid: System.Security.Claims.ClaimsPrincipal.FindFirst*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: FindFirst\n  nameWithType: ClaimsPrincipal.FindFirst\n- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: GetObjectData\n  nameWithType: ClaimsPrincipal.GetObjectData\n- uid: System.Security.Claims.ClaimsPrincipal.HasClaim*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: HasClaim\n  nameWithType: ClaimsPrincipal.HasClaim\n- uid: System.Security.Claims.ClaimsPrincipal.Identities*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Identities\n  nameWithType: ClaimsPrincipal.Identities\n- uid: System.Security.Claims.ClaimsPrincipal.Identity*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Identity\n  nameWithType: ClaimsPrincipal.Identity\n- uid: System.Security.Claims.ClaimsPrincipal.IsInRole*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: IsInRole\n  nameWithType: ClaimsPrincipal.IsInRole\n- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: PrimaryIdentitySelector\n  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector\n- uid: System.Security.Claims.ClaimsPrincipal.WriteTo*\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: WriteTo\n  nameWithType: ClaimsPrincipal.WriteTo\n"}