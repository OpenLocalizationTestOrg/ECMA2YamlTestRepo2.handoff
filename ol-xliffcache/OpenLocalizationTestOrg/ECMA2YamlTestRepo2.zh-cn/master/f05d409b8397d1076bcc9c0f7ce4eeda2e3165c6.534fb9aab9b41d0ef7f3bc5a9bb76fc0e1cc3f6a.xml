{"nodes":[{"pos":[1820,1947],"content":"Represents keys that are generated using symmetric algorithms and are only stored in the local computer's random access memory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents keys that are generated using symmetric algorithms and are only stored in the local computer's random access memory.","pos":[0,127]}]},{"pos":[1959,2055],"content":"Typically, this class is only used by the infrastructure to transform XML using a symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Typically, this class is only used by the infrastructure to transform XML using a symmetric key.","pos":[0,96]}]},{"pos":[2912,3064],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified symmetric key.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"></xref> class using the specified symmetric key."},{"pos":[3231,3294],"content":"An array of <xref:System.Byte> that contains the symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the symmetric key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the symmetric key."}]},{"pos":[3487,3577],"content":"<ph id=\"ph1\">&lt;code&gt;symmetricKey&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>symmetricKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[3672,3713],"content":"<ph id=\"ph1\">&lt;code&gt;symmetricKey&lt;/code&gt;</ph> is zero length.","needQuote":true,"needEscape":true,"source":"<code>symmetricKey</code> is zero length."},{"pos":[4336,4554],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified symmetric key and a value that indicates whether the binary data must be cloned.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"></xref> class using the specified symmetric key and a value that indicates whether the binary data must be cloned."},{"pos":[4739,4802],"content":"An array of <xref:System.Byte> that contains the symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the symmetric key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the symmetric key."}]},{"pos":[4871,5067],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to clone the array passed into the <ph id=\"ph1\">`symmetricKey`</ph> parameter; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to clone the array passed into the `symmetricKey` parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5260,5350],"content":"<ph id=\"ph1\">&lt;code&gt;symmetricKey&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>symmetricKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5445,5486],"content":"<ph id=\"ph1\">&lt;code&gt;symmetricKey&lt;/code&gt;</ph> is zero length.","needQuote":true,"needEscape":true,"source":"<code>symmetricKey</code> is zero length."},{"pos":[6053,6090],"content":"Decrypts the specified encrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decrypts the specified encrypted key.","pos":[0,37]}]},{"pos":[6102,6216],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the static fields of the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[6391,6452],"content":"The cryptographic algorithm that was used to encrypt the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm that was used to encrypt the key.","pos":[0,61]}]},{"pos":[6516,6579],"content":"An array of <xref:System.Byte> that contains the encrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the encrypted key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the encrypted key."}]},{"pos":[6637,6700],"content":"An array of <xref:System.Byte> that contains the decrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the decrypted key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the decrypted key."}]},{"pos":[6906,7314],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, and <bpt id=\"p4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[41,408],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>."}]},{"pos":[7881,7908],"content":"Encrypts the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encrypts the specified key.","pos":[0,27]}]},{"pos":[7920,8034],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the static fields of the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[8209,8261],"content":"The cryptographic algorithm to encrypt the key with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm to encrypt the key with.","pos":[0,52]}]},{"pos":[8325,8378],"content":"An array of <xref:System.Byte> that contains the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the key.","pos":[0,53],"source":"An array of <xref:System.Byte> that contains the key."}]},{"pos":[8436,8499],"content":"An array of <xref:System.Byte> that contains the encrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the encrypted key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the encrypted key."}]},{"pos":[8705,9112],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, or <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, or <bpt id=\"p4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[41,407],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, or <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>."}]},{"pos":[9856,9959],"content":"Generates a derived key using the specified cryptographic algorithm and parameters for the current key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates a derived key using the specified cryptographic algorithm and parameters for the current key.","pos":[0,103]}]},{"pos":[9971,10108],"content":"To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.","needQuote":true,"needEscape":true,"nodes":[{"content":"To specify P-SHA1 as the cryptographic algorithm, use the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&gt; field.","pos":[0,137],"source":"To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field."}]},{"pos":[10337,10422],"content":"A URI that represents the cryptographic algorithm to use to generate the derived key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A URI that represents the cryptographic algorithm to use to generate the derived key.","pos":[0,85]}]},{"pos":[10484,10581],"content":"An array of <xref:System.Byte> that contains the label parameter for the cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the label parameter for the cryptographic algorithm.","pos":[0,97],"source":"An array of <xref:System.Byte> that contains the label parameter for the cryptographic algorithm."}]},{"pos":[10643,10735],"content":"An array of <xref:System.Byte> that contains the nonce that is used to create a derived key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the nonce that is used to create a derived key.","pos":[0,92],"source":"An array of <xref:System.Byte> that contains the nonce that is used to create a derived key."}]},{"pos":[10807,10835],"content":"The size of the derived key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the derived key.","pos":[0,28]}]},{"pos":[10897,10998],"content":"The position at which the derived key is located in the byte array that is returned from this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position at which the derived key is located in the byte array that is returned from this method.","pos":[0,101]}]},{"pos":[11056,11117],"content":"An array of <xref:System.Byte> that contains the derived key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the derived key.","pos":[0,61],"source":"An array of <xref:System.Byte> that contains the derived key."}]},{"pos":[11331,11487],"content":"<code>algorithm</code> is not supported. The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms is <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[41,156],"source":" The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation\"></xref>."}]},{"pos":[12114,12201],"content":"Gets a transform that decrypts cipher text using the specified cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a transform that decrypts cipher text using the specified cryptographic algorithm.","pos":[0,87]}]},{"pos":[12213,12357],"content":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the fields that represent decryption algorithms in the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[12578,12653],"content":"A cryptographic algorithm that decrypts cipher text, such as encrypted XML.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic algorithm that decrypts cipher text, such as encrypted XML.","pos":[0,75]}]},{"pos":[12712,12870],"content":"An array of &lt;xref:System.Byte&gt; that contains the initialization vector (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) for the specified algorithm.","needQuote":true,"needEscape":true,"source":"An array of <xref:System.Byte> that contains the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) for the specified algorithm."},{"pos":[12960,13071],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ICryptoTransform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the decryption transform.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the decryption transform."},{"pos":[13289,13709],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, and <bpt id=\"p4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[41,420],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>."}]},{"pos":[14336,14415],"content":"Gets a transform that encrypts XML using the specified cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a transform that encrypts XML using the specified cryptographic algorithm.","pos":[0,79]}]},{"pos":[14427,14571],"content":"Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the fields that represent encryption algorithms in the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[14792,14836],"content":"A cryptographic algorithm that encrypts XML.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic algorithm that encrypts XML.","pos":[0,44]}]},{"pos":[14895,15053],"content":"An array of &lt;xref:System.Byte&gt; that contains the initialization vector (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) for the specified algorithm.","needQuote":true,"needEscape":true,"source":"An array of <xref:System.Byte> that contains the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) for the specified algorithm."},{"pos":[15143,15254],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ICryptoTransform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the encryption transform.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the encryption transform."},{"pos":[15472,15892],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, and <bpt id=\"p4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[41,420],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>."}]},{"pos":[16405,16576],"content":"Gets the size, in bits, of the initialization vector (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) that is required for the specified cryptographic algorithm.","needQuote":true,"needEscape":true,"source":"Gets the size, in bits, of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) that is required for the specified cryptographic algorithm."},{"pos":[16588,16732],"content":"Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the fields that represent encryption algorithms in the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[16887,17019],"content":"The cryptographic algorithm to get the size of the initialization vector (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"The cryptographic algorithm to get the size of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>)."},{"pos":[17076,17282],"content":"The size, in bits, of the initialization vector (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) that is required for the cryptographic algorithm specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">algorithm</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"The size, in bits, of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) that is required for the cryptographic algorithm specified in the <code>algorithm</code> parameter."},{"pos":[17487,17907],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, and <bpt id=\"p4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[41,420],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>."}]},{"pos":[18480,18535],"content":"Gets an instance of the specified keyed hash algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an instance of the specified keyed hash algorithm.","pos":[0,55]}]},{"pos":[18746,18793],"content":"The keyed hash algorithm to get an instance of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The keyed hash algorithm to get an instance of.","pos":[0,47]}]},{"pos":[18885,18997],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the keyed hash algorithm.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> that represents the keyed hash algorithm."},{"pos":[19214,19369],"content":"<code>algorithm</code> is not supported. The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms is <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[41,155],"source":" The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature\"></xref>."}]},{"pos":[19942,19996],"content":"Gets an instance of the specified symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an instance of the specified symmetric algorithm.","pos":[0,54]}]},{"pos":[20207,20253],"content":"The symmetric algorithm to get an instance of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The symmetric algorithm to get an instance of.","pos":[0,46]}]},{"pos":[20345,20456],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the symmetric algorithm.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> that represents the symmetric algorithm."},{"pos":[20673,21428],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>,  <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>,  <bpt id=\"p4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>, <bpt id=\"p5\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>, <bpt id=\"p6\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"&gt;</bpt><ept id=\"p6\">&lt;/xref&gt;</ept>, <bpt id=\"p7\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"&gt;</bpt><ept id=\"p7\">&lt;/xref&gt;</ept>, and <bpt id=\"p8\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"&gt;</bpt><ept id=\"p8\">&lt;/xref&gt;</ept>","pos":[41,755],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>,  <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>"}]},{"pos":[21923,21971],"content":"Gets the bytes that represent the symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the bytes that represent the symmetric key.","pos":[0,48]}]},{"pos":[22114,22177],"content":"An array of <xref:System.Byte> that contains the symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the symmetric key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the symmetric key."}]},{"pos":[22853,22934],"content":"Gets a value that indicates whether the specified algorithm uses asymmetric keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the specified algorithm uses asymmetric keys.","pos":[0,81]}]},{"pos":[23102,23130],"content":"The cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]},{"pos":[23189,23375],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the specified algorithm uses asymmetric keys; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses asymmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24052,24139],"content":"Gets a value that indicates whether the specified algorithm is supported by this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the specified algorithm is supported by this class.","pos":[0,87]}]},{"pos":[24152,25082],"content":"The symmetric algorithms that are supported by this class are the algorithms represented by the following fields:      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap>","needQuote":false,"needEscape":true,"nodes":[{"content":"The symmetric algorithms that are supported by this class are the algorithms represented by the following fields:      -   &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature&gt;      -   &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&gt;      -   &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&gt;      -   &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&gt;      -   &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&gt;      -   &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&gt;      -   &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&gt;      -   &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&gt;      -   &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&gt;      -   &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&gt;","pos":[0,910],"source":"The symmetric algorithms that are supported by this class are the algorithms represented by the following fields:      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>      -   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap>"}]},{"pos":[25250,25278],"content":"The cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]},{"pos":[25337,25529],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the specified algorithm is supported by this class; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm is supported by this class; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[26205,26285],"content":"Gets a value that indicates whether the specified algorithm uses symmetric keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the specified algorithm uses symmetric keys.","pos":[0,80]}]},{"pos":[26452,26480],"content":"The cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]},{"pos":[26539,26724],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the specified algorithm uses symmetric keys; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses symmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[27283,27318],"content":"Gets the size, in bits, of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the size, in bits, of the key.","pos":[0,35]}]},{"pos":[27435,27465],"content":"The size, in bits, of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bits, of the key.","pos":[0,30]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  id: InMemorySymmetricSecurityKey\n  children:\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize\n  langs:\n  - csharp\n  name: InMemorySymmetricSecurityKey\n  nameWithType: InMemorySymmetricSecurityKey\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  type: Class\n  summary: Represents keys that are generated using symmetric algorithms and are only stored in the local computer's random access memory.\n  remarks: Typically, this class is only used by the infrastructure to transform XML using a symmetric key.\n  syntax:\n    content: 'public class InMemorySymmetricSecurityKey : System.IdentityModel.Tokens.SymmetricSecurityKey'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.SecurityKey\n  - System.IdentityModel.Tokens.SymmetricSecurityKey\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: InMemorySymmetricSecurityKey(Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"></xref> class using the specified symmetric key.\n  syntax:\n    content: public InMemorySymmetricSecurityKey (byte[] symmetricKey);\n    parameters:\n    - id: symmetricKey\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the symmetric key.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>symmetricKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>symmetricKey</code> is zero length.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)\n  id: '#ctor(System.Byte[],System.Boolean)'\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: InMemorySymmetricSecurityKey(Byte[],Boolean)\n  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"></xref> class using the specified symmetric key and a value that indicates whether the binary data must be cloned.\n  syntax:\n    content: public InMemorySymmetricSecurityKey (byte[] symmetricKey, bool cloneBuffer);\n    parameters:\n    - id: symmetricKey\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the symmetric key.\n    - id: cloneBuffer\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to clone the array passed into the `symmetricKey` parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>symmetricKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>symmetricKey</code> is zero length.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])\n  id: DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: DecryptKey(String,Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Decrypts the specified encrypted key.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm that was used to encrypt the key.\n    - id: keyData\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the encrypted key.\n    return:\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the decrypted key.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])\n  id: EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: EncryptKey(String,Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Encrypts the specified key.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm to encrypt the key with.\n    - id: keyData\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the key.\n    return:\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the encrypted key.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, or <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  id: GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Generates a derived key using the specified cryptographic algorithm and parameters for the current key.\n  remarks: To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.\n  syntax:\n    content: public override byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A URI that represents the cryptographic algorithm to use to generate the derived key.\n    - id: label\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the label parameter for the cryptographic algorithm.\n    - id: nonce\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the nonce that is used to create a derived key.\n    - id: derivedKeyLength\n      type: System.Int32\n      description: The size of the derived key.\n    - id: offset\n      type: System.Int32\n      description: The position at which the derived key is located in the byte array that is returned from this method.\n    return:\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the derived key.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  id: GetDecryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetDecryptionTransform(String,Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a transform that decrypts cipher text using the specified cryptographic algorithm.\n  remarks: Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public override System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A cryptographic algorithm that decrypts cipher text, such as encrypted XML.\n    - id: iv\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) for the specified algorithm.\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the decryption transform.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  id: GetEncryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetEncryptionTransform(String,Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a transform that encrypts XML using the specified cryptographic algorithm.\n  remarks: Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public override System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A cryptographic algorithm that encrypts XML.\n    - id: iv\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) for the specified algorithm.\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the encryption transform.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)\n  id: GetIVSize(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetIVSize(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the size, in bits, of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) that is required for the specified cryptographic algorithm.\n  remarks: Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public override int GetIVSize (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm to get the size of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>).\n    return:\n      type: System.Int32\n      description: The size, in bits, of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) that is required for the cryptographic algorithm specified in the <code>algorithm</code> parameter.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  id: GetKeyedHashAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetKeyedHashAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets an instance of the specified keyed hash algorithm.\n  syntax:\n    content: public override System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The keyed hash algorithm to get an instance of.\n    return:\n      type: System.Security.Cryptography.KeyedHashAlgorithm\n      description: A <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> that represents the keyed hash algorithm.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  id: GetSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets an instance of the specified symmetric algorithm.\n  syntax:\n    content: public override System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The symmetric algorithm to get an instance of.\n    return:\n      type: System.Security.Cryptography.SymmetricAlgorithm\n      description: A <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> that represents the symmetric algorithm.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>,  <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey\n  id: GetSymmetricKey\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSymmetricKey()\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the bytes that represent the symmetric key.\n  syntax:\n    content: public override byte[] GetSymmetricKey ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the symmetric key.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)\n  id: IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the specified algorithm uses asymmetric keys.\n  syntax:\n    content: public override bool IsAsymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses asymmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)\n  id: IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: IsSupportedAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the specified algorithm is supported by this class.\n  remarks: \"The symmetric algorithms that are supported by this class are the algorithms represented by the following fields:  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap>\"\n  syntax:\n    content: public override bool IsSupportedAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm is supported by this class; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)\n  id: IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the specified algorithm uses symmetric keys.\n  syntax:\n    content: public override bool IsSymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the specified algorithm uses symmetric keys; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize\n  id: KeySize\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: InMemorySymmetricSecurityKey.KeySize\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the size, in bits, of the key.\n  syntax:\n    content: public override int KeySize { get; }\n    return:\n      type: System.Int32\n      description: The size, in bits, of the key.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: System.IdentityModel.Tokens.SymmetricSecurityKey\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: InMemorySymmetricSecurityKey(Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: InMemorySymmetricSecurityKey(Byte[],Boolean)\n  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: DecryptKey(String,Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: EncryptKey(String,Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetDecryptionTransform(String,Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetEncryptionTransform(String,Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetIVSize(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(String)\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetKeyedHashAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n- uid: System.Security.Cryptography.KeyedHashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeyedHashAlgorithm\n  nameWithType: KeyedHashAlgorithm\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricKey()\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey()\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: InMemorySymmetricSecurityKey.KeySize\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: InMemorySymmetricSecurityKey\n  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: DecryptKey\n  nameWithType: InMemorySymmetricSecurityKey.DecryptKey\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: EncryptKey\n  nameWithType: InMemorySymmetricSecurityKey.EncryptKey\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GenerateDerivedKey\n  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetDecryptionTransform\n  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetEncryptionTransform\n  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetIVSize\n  nameWithType: InMemorySymmetricSecurityKey.GetIVSize\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetKeyedHashAlgorithm\n  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricAlgorithm\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricKey\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm\n  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm\n  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm\n  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: InMemorySymmetricSecurityKey.KeySize\n"}