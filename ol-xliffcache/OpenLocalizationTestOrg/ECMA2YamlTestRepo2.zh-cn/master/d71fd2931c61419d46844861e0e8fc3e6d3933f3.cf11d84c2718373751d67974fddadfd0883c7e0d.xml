{"nodes":[{"pos":[1252,1310],"content":"This class is the public entry point for executing builds.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class is the public entry point for executing builds.","pos":[0,58]}]},{"pos":[1864,1915],"content":"Gets a new build manager without specifying a name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a new build manager without specifying a name.","pos":[0,51]}]},{"pos":[2500,2536],"content":"Creates a new unnamed build manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new unnamed build manager.","pos":[0,36]}]},{"pos":[2548,2683],"content":"Create a new BuildManager. Creating multiple multi-processor aware build managers is not supported due to conflicts in the NodeManager.","needQuote":true,"needEscape":true,"nodes":[{"content":"Create a new BuildManager. Creating multiple multi-processor aware build managers is not supported due to conflicts in the NodeManager.","pos":[0,135],"nodes":[{"content":"Create a new BuildManager.","pos":[0,26]},{"content":"Creating multiple multi-processor aware build managers is not supported due to conflicts in the NodeManager.","pos":[27,135]}]}]},{"pos":[2826,2857],"content":"The host for the build manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"The host for the build manager.","pos":[0,31]}]},{"pos":[3456,3508],"content":"Prepares the BuildManager to receive build requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"Prepares the BuildManager to receive build requests.","pos":[0,52]}]},{"pos":[3721,3755],"content":"The build parameters. May be null.","needQuote":true,"needEscape":true,"nodes":[{"content":"The build parameters. May be null.","pos":[0,34],"nodes":[{"content":"The build parameters.","pos":[0,21]},{"content":"May be null.","pos":[22,34]}]}]},{"pos":[3943,3984],"content":"Thrown if a build is already in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"Thrown if a build is already in progress.","pos":[0,41]}]},{"pos":[4620,4688],"content":"Submits a lone build request and blocks until results are available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Submits a lone build request and blocks until results are available.","pos":[0,68]}]},{"pos":[4700,4719],"content":"Convenience method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Convenience method.","pos":[0,19]}]},{"pos":[5016,5033],"content":"Build parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Build parameters.","pos":[0,17]}]},{"pos":[5130,5149],"content":"Build request data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Build request data.","pos":[0,19]}]},{"pos":[5231,5256],"content":"Returns the build result.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the build result.","pos":[0,25]}]},{"pos":[5439,5480],"content":"Thrown if a build is already in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"Thrown if a build is already in progress.","pos":[0,41]}]},{"pos":[6019,6086],"content":"Submits a build request and blocks until the results are available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Submits a build request and blocks until the results are available.","pos":[0,67]}]},{"pos":[6098,6117],"content":"Convenience method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Convenience method.","pos":[0,19]}]},{"pos":[6369,6383],"content":"Build request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Build request.","pos":[0,14]}]},{"pos":[6465,6490],"content":"Returns the build result.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the build result.","pos":[0,25]}]},{"pos":[6680,6752],"content":"Thrown if StartBuild has not been called or if EndBuild has been called.","needQuote":true,"needEscape":true,"nodes":[{"content":"Thrown if StartBuild has not been called or if EndBuild has been called.","pos":[0,72]}]},{"pos":[7195,7246],"content":"Cancels all outstanding submissions asynchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels all outstanding submissions asynchronously.","pos":[0,51]}]},{"pos":[7849,7898],"content":"Gets the singleton instance of the Build Manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the singleton instance of the Build Manager.","pos":[0,49]}]},{"pos":[8086,8138],"content":"Returns the singleton instance of the Build Manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the singleton instance of the Build Manager.","pos":[0,52]}]},{"pos":[8605,8634],"content":"Dispose of the build manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose of the build manager.","pos":[0,29]}]},{"pos":[9160,9261],"content":"Signals that no more build requests are expected (or allowed) and that the BuildManager may clean up.","needQuote":true,"needEscape":true,"nodes":[{"content":"Signals that no more build requests are expected (or allowed) and that the BuildManager may clean up.","pos":[0,101]}]},{"pos":[9273,9340],"content":"This call blocks until all currently pending requests are complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"This call blocks until all currently pending requests are complete.","pos":[0,67]}]},{"pos":[9593,9633],"content":"Thrown if there is no build in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"Thrown if there is no build in progress.","pos":[0,40]}]},{"pos":[10016,10046],"content":"Finalize the building manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"Finalize the building manager.","pos":[0,30]}]},{"pos":[10750,10839],"content":"Gets a matching ProjectInstance from the BuildManager cache of previously built projects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a matching ProjectInstance from the BuildManager cache of previously built projects.","pos":[0,89]}]},{"pos":[11085,11139],"content":"The project for which an instance should be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"The project for which an instance should be retrieved.","pos":[0,54]}]},{"pos":[11225,11399],"content":"Returns a matching ProjectInstance from the BuildManager cache of previously built projects. If none exist, a new project instance will be created from the specified project.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a matching ProjectInstance from the BuildManager cache of previously built projects. If none exist, a new project instance will be created from the specified project.","pos":[0,174],"nodes":[{"content":"Returns a matching ProjectInstance from the BuildManager cache of previously built projects.","pos":[0,92]},{"content":"If none exist, a new project instance will be created from the specified project.","pos":[93,174]}]}]},{"pos":[12054,12243],"content":"Submits a build request to the current build but does not start it immediately. Allows the user to perform asynchronous execution or access the submission ID prior to executing the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Submits a build request to the current build but does not start it immediately. Allows the user to perform asynchronous execution or access the submission ID prior to executing the request.","pos":[0,189],"nodes":[{"content":"Submits a build request to the current build but does not start it immediately.","pos":[0,79]},{"content":"Allows the user to perform asynchronous execution or access the submission ID prior to executing the request.","pos":[80,189]}]}]},{"pos":[12503,12522],"content":"Build request data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Build request data.","pos":[0,19]}]},{"pos":[12608,12650],"content":"Returns the submission that will be built.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the submission that will be built.","pos":[0,42]}]},{"pos":[12844,12916],"content":"Thrown if StartBuild has not been called or if EndBuild has been called.","needQuote":true,"needEscape":true,"nodes":[{"content":"Thrown if StartBuild has not been called or if EndBuild has been called.","pos":[0,72]}]},{"pos":[13314,13369],"content":"Clears out all of the build manager cached information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clears out all of the build manager cached information.","pos":[0,55]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Build.Execution.BuildManager\n  id: BuildManager\n  children:\n  - Microsoft.Build.Execution.BuildManager.#ctor\n  - Microsoft.Build.Execution.BuildManager.#ctor(System.String)\n  - Microsoft.Build.Execution.BuildManager.BeginBuild(Microsoft.Build.Execution.BuildParameters)\n  - Microsoft.Build.Execution.BuildManager.Build(Microsoft.Build.Execution.BuildParameters,Microsoft.Build.Execution.BuildRequestData)\n  - Microsoft.Build.Execution.BuildManager.BuildRequest(Microsoft.Build.Execution.BuildRequestData)\n  - Microsoft.Build.Execution.BuildManager.CancelAllSubmissions\n  - Microsoft.Build.Execution.BuildManager.DefaultBuildManager\n  - Microsoft.Build.Execution.BuildManager.Dispose\n  - Microsoft.Build.Execution.BuildManager.EndBuild\n  - Microsoft.Build.Execution.BuildManager.Finalize\n  - Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Microsoft.Build.Evaluation.Project)\n  - Microsoft.Build.Execution.BuildManager.PendBuildRequest(Microsoft.Build.Execution.BuildRequestData)\n  - Microsoft.Build.Execution.BuildManager.ResetCaches\n  langs:\n  - csharp\n  name: BuildManager\n  nameWithType: BuildManager\n  fullName: Microsoft.Build.Execution.BuildManager\n  type: Class\n  summary: This class is the public entry point for executing builds.\n  syntax:\n    content: 'public class BuildManager : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.#ctor\n  id: '#ctor'\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: BuildManager()\n  nameWithType: BuildManager.BuildManager()\n  fullName: Microsoft.Build.Execution.BuildManager.BuildManager()\n  type: Constructor\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets a new build manager without specifying a name.\n  syntax:\n    content: public BuildManager ();\n    parameters: []\n  overload: Microsoft.Build.Execution.BuildManager.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: BuildManager(String)\n  nameWithType: BuildManager.BuildManager(String)\n  fullName: Microsoft.Build.Execution.BuildManager.BuildManager(String)\n  type: Constructor\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Creates a new unnamed build manager.\n  remarks: Create a new BuildManager. Creating multiple multi-processor aware build managers is not supported due to conflicts in the NodeManager.\n  syntax:\n    content: public BuildManager (string hostName);\n    parameters:\n    - id: hostName\n      type: System.String\n      description: The host for the build manager.\n  overload: Microsoft.Build.Execution.BuildManager.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.BeginBuild(Microsoft.Build.Execution.BuildParameters)\n  id: BeginBuild(Microsoft.Build.Execution.BuildParameters)\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: BeginBuild(BuildParameters)\n  nameWithType: BuildManager.BeginBuild(BuildParameters)\n  fullName: Microsoft.Build.Execution.BuildManager.BeginBuild(BuildParameters)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Prepares the BuildManager to receive build requests.\n  syntax:\n    content: public void BeginBuild (Microsoft.Build.Execution.BuildParameters parameters);\n    parameters:\n    - id: parameters\n      type: Microsoft.Build.Execution.BuildParameters\n      description: The build parameters. May be null.\n  overload: Microsoft.Build.Execution.BuildManager.BeginBuild*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Thrown if a build is already in progress.\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.Build(Microsoft.Build.Execution.BuildParameters,Microsoft.Build.Execution.BuildRequestData)\n  id: Build(Microsoft.Build.Execution.BuildParameters,Microsoft.Build.Execution.BuildRequestData)\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: Build(BuildParameters,BuildRequestData)\n  nameWithType: BuildManager.Build(BuildParameters,BuildRequestData)\n  fullName: Microsoft.Build.Execution.BuildManager.Build(BuildParameters,BuildRequestData)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Submits a lone build request and blocks until results are available.\n  remarks: Convenience method.\n  syntax:\n    content: public Microsoft.Build.Execution.BuildResult Build (Microsoft.Build.Execution.BuildParameters parameters, Microsoft.Build.Execution.BuildRequestData requestData);\n    parameters:\n    - id: parameters\n      type: Microsoft.Build.Execution.BuildParameters\n      description: Build parameters.\n    - id: requestData\n      type: Microsoft.Build.Execution.BuildRequestData\n      description: Build request data.\n    return:\n      type: Microsoft.Build.Execution.BuildResult\n      description: Returns the build result.\n  overload: Microsoft.Build.Execution.BuildManager.Build*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Thrown if a build is already in progress.\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.BuildRequest(Microsoft.Build.Execution.BuildRequestData)\n  id: BuildRequest(Microsoft.Build.Execution.BuildRequestData)\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: BuildRequest(BuildRequestData)\n  nameWithType: BuildManager.BuildRequest(BuildRequestData)\n  fullName: Microsoft.Build.Execution.BuildManager.BuildRequest(BuildRequestData)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Submits a build request and blocks until the results are available.\n  remarks: Convenience method.\n  syntax:\n    content: public Microsoft.Build.Execution.BuildResult BuildRequest (Microsoft.Build.Execution.BuildRequestData requestData);\n    parameters:\n    - id: requestData\n      type: Microsoft.Build.Execution.BuildRequestData\n      description: Build request.\n    return:\n      type: Microsoft.Build.Execution.BuildResult\n      description: Returns the build result.\n  overload: Microsoft.Build.Execution.BuildManager.BuildRequest*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Thrown if StartBuild has not been called or if EndBuild has been called.\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions\n  id: CancelAllSubmissions\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: CancelAllSubmissions()\n  nameWithType: BuildManager.CancelAllSubmissions()\n  fullName: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions()\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Cancels all outstanding submissions asynchronously.\n  syntax:\n    content: public void CancelAllSubmissions ();\n    parameters: []\n  overload: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.DefaultBuildManager\n  id: DefaultBuildManager\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: DefaultBuildManager\n  nameWithType: BuildManager.DefaultBuildManager\n  fullName: Microsoft.Build.Execution.BuildManager.DefaultBuildManager\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets the singleton instance of the Build Manager.\n  syntax:\n    content: public static Microsoft.Build.Execution.BuildManager DefaultBuildManager { get; }\n    return:\n      type: Microsoft.Build.Execution.BuildManager\n      description: Returns the singleton instance of the Build Manager.\n  overload: Microsoft.Build.Execution.BuildManager.DefaultBuildManager*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.Dispose\n  id: Dispose\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: BuildManager.Dispose()\n  fullName: Microsoft.Build.Execution.BuildManager.Dispose()\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Dispose of the build manager.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: Microsoft.Build.Execution.BuildManager.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.EndBuild\n  id: EndBuild\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: EndBuild()\n  nameWithType: BuildManager.EndBuild()\n  fullName: Microsoft.Build.Execution.BuildManager.EndBuild()\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Signals that no more build requests are expected (or allowed) and that the BuildManager may clean up.\n  remarks: This call blocks until all currently pending requests are complete.\n  syntax:\n    content: public void EndBuild ();\n    parameters: []\n  overload: Microsoft.Build.Execution.BuildManager.EndBuild*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Thrown if there is no build in progress.\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.Finalize\n  id: Finalize\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: BuildManager.Finalize()\n  fullName: Microsoft.Build.Execution.BuildManager.Finalize()\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Finalize the building manager.\n  syntax:\n    content: ~BuildManager ();\n    parameters: []\n  overload: Microsoft.Build.Execution.BuildManager.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Microsoft.Build.Evaluation.Project)\n  id: GetProjectInstanceForBuild(Microsoft.Build.Evaluation.Project)\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: GetProjectInstanceForBuild(Project)\n  nameWithType: BuildManager.GetProjectInstanceForBuild(Project)\n  fullName: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Project)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets a matching ProjectInstance from the BuildManager cache of previously built projects.\n  syntax:\n    content: public Microsoft.Build.Execution.ProjectInstance GetProjectInstanceForBuild (Microsoft.Build.Evaluation.Project project);\n    parameters:\n    - id: project\n      type: Microsoft.Build.Evaluation.Project\n      description: The project for which an instance should be retrieved.\n    return:\n      type: Microsoft.Build.Execution.ProjectInstance\n      description: Returns a matching ProjectInstance from the BuildManager cache of previously built projects. If none exist, a new project instance will be created from the specified project.\n  overload: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.PendBuildRequest(Microsoft.Build.Execution.BuildRequestData)\n  id: PendBuildRequest(Microsoft.Build.Execution.BuildRequestData)\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: PendBuildRequest(BuildRequestData)\n  nameWithType: BuildManager.PendBuildRequest(BuildRequestData)\n  fullName: Microsoft.Build.Execution.BuildManager.PendBuildRequest(BuildRequestData)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Submits a build request to the current build but does not start it immediately. Allows the user to perform asynchronous execution or access the submission ID prior to executing the request.\n  syntax:\n    content: public Microsoft.Build.Execution.BuildSubmission PendBuildRequest (Microsoft.Build.Execution.BuildRequestData requestData);\n    parameters:\n    - id: requestData\n      type: Microsoft.Build.Execution.BuildRequestData\n      description: Build request data.\n    return:\n      type: Microsoft.Build.Execution.BuildSubmission\n      description: Returns the submission that will be built.\n  overload: Microsoft.Build.Execution.BuildManager.PendBuildRequest*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Thrown if StartBuild has not been called or if EndBuild has been called.\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildManager.ResetCaches\n  id: ResetCaches\n  parent: Microsoft.Build.Execution.BuildManager\n  langs:\n  - csharp\n  name: ResetCaches()\n  nameWithType: BuildManager.ResetCaches()\n  fullName: Microsoft.Build.Execution.BuildManager.ResetCaches()\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Clears out all of the build manager cached information.\n  syntax:\n    content: public void ResetCaches ();\n    parameters: []\n  overload: Microsoft.Build.Execution.BuildManager.ResetCaches*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: Microsoft.Build.Execution.BuildManager.#ctor\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: BuildManager()\n  nameWithType: BuildManager.BuildManager()\n  fullName: Microsoft.Build.Execution.BuildManager.BuildManager()\n- uid: Microsoft.Build.Execution.BuildManager.#ctor(System.String)\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: BuildManager(String)\n  nameWithType: BuildManager.BuildManager(String)\n  fullName: Microsoft.Build.Execution.BuildManager.BuildManager(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.Build.Execution.BuildManager.BeginBuild(Microsoft.Build.Execution.BuildParameters)\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: BeginBuild(BuildParameters)\n  nameWithType: BuildManager.BeginBuild(BuildParameters)\n  fullName: Microsoft.Build.Execution.BuildManager.BeginBuild(BuildParameters)\n- uid: Microsoft.Build.Execution.BuildParameters\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: BuildParameters\n  nameWithType: BuildParameters\n  fullName: Microsoft.Build.Execution.BuildParameters\n- uid: Microsoft.Build.Execution.BuildManager.Build(Microsoft.Build.Execution.BuildParameters,Microsoft.Build.Execution.BuildRequestData)\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: Build(BuildParameters,BuildRequestData)\n  nameWithType: BuildManager.Build(BuildParameters,BuildRequestData)\n  fullName: Microsoft.Build.Execution.BuildManager.Build(BuildParameters,BuildRequestData)\n- uid: Microsoft.Build.Execution.BuildResult\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: BuildResult\n  nameWithType: BuildResult\n  fullName: Microsoft.Build.Execution.BuildResult\n- uid: Microsoft.Build.Execution.BuildRequestData\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: BuildRequestData\n  nameWithType: BuildRequestData\n  fullName: Microsoft.Build.Execution.BuildRequestData\n- uid: Microsoft.Build.Execution.BuildManager.BuildRequest(Microsoft.Build.Execution.BuildRequestData)\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: BuildRequest(BuildRequestData)\n  nameWithType: BuildManager.BuildRequest(BuildRequestData)\n  fullName: Microsoft.Build.Execution.BuildManager.BuildRequest(BuildRequestData)\n- uid: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: CancelAllSubmissions()\n  nameWithType: BuildManager.CancelAllSubmissions()\n  fullName: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions()\n- uid: Microsoft.Build.Execution.BuildManager.DefaultBuildManager\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: DefaultBuildManager\n  nameWithType: BuildManager.DefaultBuildManager\n  fullName: Microsoft.Build.Execution.BuildManager.DefaultBuildManager\n- uid: Microsoft.Build.Execution.BuildManager\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: BuildManager\n  nameWithType: BuildManager\n  fullName: Microsoft.Build.Execution.BuildManager\n- uid: Microsoft.Build.Execution.BuildManager.Dispose\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: Dispose()\n  nameWithType: BuildManager.Dispose()\n  fullName: Microsoft.Build.Execution.BuildManager.Dispose()\n- uid: Microsoft.Build.Execution.BuildManager.EndBuild\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: EndBuild()\n  nameWithType: BuildManager.EndBuild()\n  fullName: Microsoft.Build.Execution.BuildManager.EndBuild()\n- uid: Microsoft.Build.Execution.BuildManager.Finalize\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: Finalize()\n  nameWithType: BuildManager.Finalize()\n  fullName: Microsoft.Build.Execution.BuildManager.Finalize()\n- uid: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Microsoft.Build.Evaluation.Project)\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: GetProjectInstanceForBuild(Project)\n  nameWithType: BuildManager.GetProjectInstanceForBuild(Project)\n  fullName: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Project)\n- uid: Microsoft.Build.Execution.ProjectInstance\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: ProjectInstance\n  nameWithType: ProjectInstance\n  fullName: Microsoft.Build.Execution.ProjectInstance\n- uid: Microsoft.Build.Evaluation.Project\n  parent: Microsoft.Build.Evaluation\n  isExternal: false\n  name: Project\n  nameWithType: Project\n  fullName: Microsoft.Build.Evaluation.Project\n- uid: Microsoft.Build.Execution.BuildManager.PendBuildRequest(Microsoft.Build.Execution.BuildRequestData)\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: PendBuildRequest(BuildRequestData)\n  nameWithType: BuildManager.PendBuildRequest(BuildRequestData)\n  fullName: Microsoft.Build.Execution.BuildManager.PendBuildRequest(BuildRequestData)\n- uid: Microsoft.Build.Execution.BuildSubmission\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: BuildSubmission\n  nameWithType: BuildSubmission\n  fullName: Microsoft.Build.Execution.BuildSubmission\n- uid: Microsoft.Build.Execution.BuildManager.ResetCaches\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: ResetCaches()\n  nameWithType: BuildManager.ResetCaches()\n  fullName: Microsoft.Build.Execution.BuildManager.ResetCaches()\n- uid: Microsoft.Build.Execution.BuildManager.#ctor*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: BuildManager\n  nameWithType: BuildManager.BuildManager\n- uid: Microsoft.Build.Execution.BuildManager.BeginBuild*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: BeginBuild\n  nameWithType: BuildManager.BeginBuild\n- uid: Microsoft.Build.Execution.BuildManager.Build*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: Build\n  nameWithType: BuildManager.Build\n- uid: Microsoft.Build.Execution.BuildManager.BuildRequest*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: BuildRequest\n  nameWithType: BuildManager.BuildRequest\n- uid: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: CancelAllSubmissions\n  nameWithType: BuildManager.CancelAllSubmissions\n- uid: Microsoft.Build.Execution.BuildManager.DefaultBuildManager*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: DefaultBuildManager\n  nameWithType: BuildManager.DefaultBuildManager\n- uid: Microsoft.Build.Execution.BuildManager.Dispose*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: Dispose\n  nameWithType: BuildManager.Dispose\n- uid: Microsoft.Build.Execution.BuildManager.EndBuild*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: EndBuild\n  nameWithType: BuildManager.EndBuild\n- uid: Microsoft.Build.Execution.BuildManager.Finalize*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: Finalize\n  nameWithType: BuildManager.Finalize\n- uid: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: GetProjectInstanceForBuild\n  nameWithType: BuildManager.GetProjectInstanceForBuild\n- uid: Microsoft.Build.Execution.BuildManager.PendBuildRequest*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: PendBuildRequest\n  nameWithType: BuildManager.PendBuildRequest\n- uid: Microsoft.Build.Execution.BuildManager.ResetCaches*\n  parent: Microsoft.Build.Execution.BuildManager\n  isExternal: false\n  name: ResetCaches\n  nameWithType: BuildManager.ResetCaches\n"}