{"nodes":[{"pos":[1820,1963],"content":"Registers a &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*&gt; in a <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or set of clouds.","needQuote":true,"needEscape":true,"source":"Registers a <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> in a <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> or set of clouds."},{"pos":[1976,2485],"content":"Registration creates (or updates) all the information that is associated with a <xref:System.Net.PeerToPeer.PeerName> in a peer cloud or clouds.       It is possible to have multiple PeerNameRegistration objects for the same peer name. In such a case, if the peer name is secured, each instance represents PeerNameRegistration in a different cloud. However, if the peer name is not secured, it can be registered in the same cloud multiple times, providing that each registration is from a different process.","needQuote":false,"needEscape":true,"nodes":[{"content":"Registration creates (or updates) all the information that is associated with a <xref:System.Net.PeerToPeer.PeerName> in a peer cloud or clouds.       It is possible to have multiple PeerNameRegistration objects for the same peer name. In such a case, if the peer name is secured, each instance represents PeerNameRegistration in a different cloud. However, if the peer name is not secured, it can be registered in the same cloud multiple times, providing that each registration is from a different process.","pos":[0,507],"nodes":[{"content":"Registration creates (or updates) all the information that is associated with a &lt;xref:System.Net.PeerToPeer.PeerName&gt; in a peer cloud or clouds.","pos":[0,144],"source":"Registration creates (or updates) all the information that is associated with a <xref:System.Net.PeerToPeer.PeerName> in a peer cloud or clouds."},{"content":"It is possible to have multiple PeerNameRegistration objects for the same peer name.","pos":[151,235]},{"content":"In such a case, if the peer name is secured, each instance represents PeerNameRegistration in a different cloud.","pos":[236,348]},{"content":"However, if the peer name is not secured, it can be registered in the same cloud multiple times, providing that each registration is from a different process.","pos":[349,507]}]}]},{"pos":[3174,3286],"content":"Initializes a new default instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new default instance of the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> class."},{"pos":[3299,3717],"content":"Returns a new default instance of type <xref:System.Net.PeerToPeer.PeerNameRegistration>. It does not perform peer name registration during construction.       After instantiating an object with this constructor, the caller should populate the appropriate fields in the instance prior to calling <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> or <xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns a new default instance of type <xref:System.Net.PeerToPeer.PeerNameRegistration>. It does not perform peer name registration during construction.       After instantiating an object with this constructor, the caller should populate the appropriate fields in the instance prior to calling <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> or <xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>.","pos":[0,416],"nodes":[{"content":"Returns a new default instance of type &lt;xref:System.Net.PeerToPeer.PeerNameRegistration&gt;.","pos":[0,89],"source":"Returns a new default instance of type <xref:System.Net.PeerToPeer.PeerNameRegistration>."},{"content":"It does not perform peer name registration during construction.","pos":[90,153]},{"content":"After instantiating an object with this constructor, the caller should populate the appropriate fields in the instance prior to calling &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A&gt; or &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A&gt;.","pos":[160,416],"source":"       After instantiating an object with this constructor, the caller should populate the appropriate fields in the instance prior to calling <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> or <xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>."}]}]},{"pos":[4434,4578],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified name and port number.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> class with the specified name and port number."},{"pos":[4591,5571],"content":"Calling this constructor creates an instance that will be used to register all source addresses (both IPv6and IPv4) and the provided port for all clouds in which the peer is currently participating.  If the object is constructed successfully, the specified <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> and <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> are populated.       If the peer name is secured and was previously registered in a <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> the peer is currently participating in, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.       This constructor only creates a <xref:System.Net.PeerToPeer.PeerNameRegistration> instance; it does not perform the registration. After instantiating the registration object with this constructor and populating its fields, the application must call <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> to perform the actual registration.","needQuote":false,"needEscape":true,"nodes":[{"content":"Calling this constructor creates an instance that will be used to register all source addresses (both IPv6and IPv4) and the provided port for all clouds in which the peer is currently participating.  If the object is constructed successfully, the specified <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> and <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> are populated.       If the peer name is secured and was previously registered in a <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> the peer is currently participating in, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.       This constructor only creates a <xref:System.Net.PeerToPeer.PeerNameRegistration> instance; it does not perform the registration. After instantiating the registration object with this constructor and populating its fields, the application must call <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> to perform the actual registration.","pos":[0,976],"nodes":[{"content":"Calling this constructor creates an instance that will be used to register all source addresses (both IPv6and IPv4) and the provided port for all clouds in which the peer is currently participating.","pos":[0,198]},{"content":"If the object is constructed successfully, the specified &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A&gt; and &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A&gt; are populated.","pos":[200,395],"source":"  If the object is constructed successfully, the specified <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> and <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> are populated."},{"content":"If the peer name is secured and was previously registered in a &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A&gt; the peer is currently participating in, an &lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt; is thrown.","pos":[402,626],"source":"       If the peer name is secured and was previously registered in a <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> the peer is currently participating in, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown."},{"content":"This constructor only creates a &lt;xref:System.Net.PeerToPeer.PeerNameRegistration&gt; instance; it does not perform the registration.","pos":[633,762],"source":"       This constructor only creates a <xref:System.Net.PeerToPeer.PeerNameRegistration> instance; it does not perform the registration."},{"content":"After instantiating the registration object with this constructor and populating its fields, the application must call &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A&gt; to perform the actual registration.","pos":[763,976],"source":" After instantiating the registration object with this constructor and populating its fields, the application must call <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> to perform the actual registration."}]}]},{"pos":[5766,5841],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to register.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> object to register."},{"pos":[5901,5958],"content":"Integer value that specifies the port number to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"Integer value that specifies the port number to register.","pos":[0,57]}]},{"pos":[6137,6240],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter cannot be <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6355,6482],"content":"The specified port number is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified port number is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).","pos":[0,127],"nodes":[{"content":"The specified port number is less than zero.","pos":[0,44]},{"content":"Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).","pos":[46,127]}]}]},{"pos":[6612,6899],"content":"-   The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> specified has already been registered from this host.      -   The remote peer does not own the <xref:System.Net.PeerToPeer.PeerName.Authority*> for the supplied <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">-</ph>   The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified has already been registered from this host.","pos":[0,113],"source":"-   The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> specified has already been registered from this host."},{"content":"-   The remote peer does not own the &lt;xref:System.Net.PeerToPeer.PeerName.Authority*&gt; for the supplied <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[119,281],"source":"      -   The remote peer does not own the <xref:System.Net.PeerToPeer.PeerName.Authority*> for the supplied <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> object."}]},{"pos":[7621,7723],"content":"Initializes a new serializable <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Initializes a new serializable <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object."},{"pos":[7997,8077],"content":"Reference to the object that holds the data needed to deserialize this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reference to the object that holds the data needed to deserialize this instance.","pos":[0,80]}]},{"pos":[8173,8287],"content":"Context that provides the means for deserializing the data. Also referred to as the source of the serialized data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Context that provides the means for deserializing the data. Also referred to as the source of the serialized data.","pos":[0,114],"nodes":[{"content":"Context that provides the means for deserializing the data.","pos":[0,59]},{"content":"Also referred to as the source of the serialized data.","pos":[60,114]}]}]},{"pos":[9003,9203],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified peer name, port number, and <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> class with the specified peer name, port number, and <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>."},{"pos":[9216,10187],"content":"Calling this constructor creates an instance that will be used to register all source addresses (both IPv6 and IPv4), the provided port, and the specified <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>.  If the object is constructed successfully, the properties are populated with the specified <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>, <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> and <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>.       If the cloud parameter is `null`, the name is registered using the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.       After instantiation, the <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> method must be called to register the <xref:System.Net.PeerToPeer.PeerName>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Calling this constructor creates an instance that will be used to register all source addresses (both IPv6 and IPv4), the provided port, and the specified &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A&gt;.","pos":[0,214],"source":"Calling this constructor creates an instance that will be used to register all source addresses (both IPv6 and IPv4), the provided port, and the specified <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>."},{"content":"If the object is constructed successfully, the properties are populated with the specified &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A&gt;, &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A&gt; and &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A&gt;.","pos":[216,491],"source":"  If the object is constructed successfully, the properties are populated with the specified <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>, <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> and <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>."},{"content":"If the cloud parameter is <ph id=\"ph1\">`null`</ph>, the name is registered using the &lt;xref:System.Net.PeerToPeer.Cloud.Available&gt; shortcut, which initializes default values for the &lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;, &lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;, and &lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;.","pos":[498,800],"source":"       If the cloud parameter is `null`, the name is registered using the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>."},{"content":"After instantiation, the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A&gt; method must be called to register the &lt;xref:System.Net.PeerToPeer.PeerName&gt;.","pos":[807,967],"source":"       After instantiation, the <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> method must be called to register the <xref:System.Net.PeerToPeer.PeerName>."}]},{"pos":[10417,10492],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to register.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> object to register."},{"pos":[10552,10609],"content":"Integer value that specifies the port number to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"Integer value that specifies the port number to register.","pos":[0,57]}]},{"pos":[10685,10769],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which to register the peer name.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Net.PeerToPeer.Cloud\"></xref> in which to register the peer name."},{"pos":[10948,11051],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter cannot be <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11166,11293],"content":"The specified port number is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified port number is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).","pos":[0,127],"nodes":[{"content":"The specified port number is less than zero.","pos":[0,44]},{"content":"Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).","pos":[46,127]}]}]},{"pos":[11423,11710],"content":"-   The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> specified has already been registered from this host.      -   The remote peer does not own the <xref:System.Net.PeerToPeer.PeerName.Authority*> for the supplied <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">-</ph>   The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified has already been registered from this host.","pos":[0,113],"source":"-   The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> specified has already been registered from this host."},{"content":"-   The remote peer does not own the &lt;xref:System.Net.PeerToPeer.PeerName.Authority*&gt; for the supplied <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[119,281],"source":"      -   The remote peer does not own the <xref:System.Net.PeerToPeer.PeerName.Authority*> for the supplied <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> object."}]},{"pos":[12086,12218],"content":"Gets or sets information in a Cloud into which this <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*> object will be registered.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets information in a Cloud into which this &lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*&gt; object will be registered.","pos":[0,132],"source":"Gets or sets information in a Cloud into which this <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*> object will be registered."}]},{"pos":[12368,12601],"content":"An object of type <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> that specifies the peer cloud for which this registration is defined. This property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object of type <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the peer cloud for which this registration is defined.","pos":[0,136],"source":"An object of type <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> that specifies the peer cloud for which this registration is defined."},{"content":"This property is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by default.","pos":[137,233],"source":" This property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default."}]},{"pos":[13065,13252],"content":"Gets or sets additional information about the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that will be registered with the <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets additional information about the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> object that will be registered with the <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>."},{"pos":[13369,13648],"content":"The comment that contains additional information about the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to associate with the <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>. This property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default.","needQuote":true,"needEscape":true,"nodes":[{"content":"The comment that contains additional information about the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to associate with the <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,182],"source":"The comment that contains additional information about the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to associate with the <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>."},{"content":"This property is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by default.","pos":[183,279],"source":" This property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default."}]},{"pos":[13855,13920],"content":"The specified string value is greater than 39 Unicode characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified string value is greater than 39 Unicode characters.","pos":[0,65]}]},{"pos":[14290,14414],"content":"Gets or sets application-defined binary data for the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets application-defined binary data for the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object."},{"pos":[14426,14489],"content":"The maximum amount of Data that can be supplied is 4,096 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum amount of Data that can be supplied is 4,096 bytes.","pos":[0,63]}]},{"pos":[14603,14771],"content":"An array of bytes that holds the binary data associated with the entry. This property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of bytes that holds the binary data associated with the entry.","pos":[0,71]},{"content":"This property is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by default.","pos":[72,168],"source":" This property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default."}]},{"pos":[14961,15007],"content":"The specified Data is greater than 4096 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified Data is greater than 4096 bytes.","pos":[0,46]}]},{"pos":[15396,15502],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object."},{"pos":[16091,16253],"content":"Releases the unmanaged resources and optionally releases the managed resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources and optionally releases the managed resources used by the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object."},{"pos":[16408,16617],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[17138,17228],"content":"Gets the collection of network endpoints for which the associated peer name is registered.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of network endpoints for which the associated peer name is registered.","pos":[0,90]}]},{"pos":[17241,18354],"content":"In the <xref:System.Net> namespace, an <xref:System.Net.IPEndPoint> represents a network endpoint as an IP address and a port number.  For PNRP, an IP address and port value must be provided for each endpoint.  The maximum number of endpoints that can be provided is ten. Automatic address selection is used when this parameter is `null`.       If a registration method is used that automatically selects the addresses to register, there is no method to determine theaddresses for which the peer name was registered.  That is, the EndPointCollection property will not be updated to reflect the addresses selected.       When a peer name is registered for more than one node, each <xref:System.Net.PeerToPeer.PeerNameRegistration> is distinct and the EndPointCollection property defined on each registration instance will be different. Also, when a <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> is registered into more than one <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>, each registration is distinct and the collection of endpoints will usually be different for each instance.","needQuote":false,"needEscape":true,"nodes":[{"content":"In the &lt;xref:System.Net&gt; namespace, an &lt;xref:System.Net.IPEndPoint&gt; represents a network endpoint as an IP address and a port number.","pos":[0,133],"source":"In the <xref:System.Net> namespace, an <xref:System.Net.IPEndPoint> represents a network endpoint as an IP address and a port number."},{"content":"For PNRP, an IP address and port value must be provided for each endpoint.","pos":[135,209]},{"content":"The maximum number of endpoints that can be provided is ten.","pos":[211,271]},{"content":"Automatic address selection is used when this parameter is <ph id=\"ph1\">`null`</ph>.","pos":[272,338],"source":" Automatic address selection is used when this parameter is `null`."},{"content":"If a registration method is used that automatically selects the addresses to register, there is no method to determine theaddresses for which the peer name was registered.","pos":[345,516]},{"content":"That is, the EndPointCollection property will not be updated to reflect the addresses selected.","pos":[518,613]},{"content":"When a peer name is registered for more than one node, each &lt;xref:System.Net.PeerToPeer.PeerNameRegistration&gt; is distinct and the EndPointCollection property defined on each registration instance will be different.","pos":[620,834],"source":"       When a peer name is registered for more than one node, each <xref:System.Net.PeerToPeer.PeerNameRegistration> is distinct and the EndPointCollection property defined on each registration instance will be different."},{"content":"Also, when a &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A&gt; is registered into more than one &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A&gt;, each registration is distinct and the collection of endpoints will usually be different for each instance.","pos":[835,1109],"source":" Also, when a <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> is registered into more than one <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>, each registration is distinct and the collection of endpoints will usually be different for each instance."}]},{"pos":[18521,18831],"content":"An <xref:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection*> object that contains the network endpoints for which the associated peer name is registered. Unless explicitly specified, the default value for all properties is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> for reference types.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection*&gt; object that contains the network endpoints for which the associated peer name is registered.","pos":[0,159],"source":"An <xref:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection*> object that contains the network endpoints for which the associated peer name is registered."},{"content":"Unless explicitly specified, the default value for all properties is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for reference types.","pos":[160,310],"source":" Unless explicitly specified, the default value for all properties is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> for reference types."}]},{"pos":[19632,19788],"content":"Populates a serialization information object with the data needed to serialize the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Populates a serialization information object with the data needed to serialize the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> instance."},{"pos":[20068,20185],"content":"Holds the serialized data associated with the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Holds the serialized data associated with the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object."},{"pos":[20281,20419],"content":"Contains destination for the serialized stream associated with the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Contains destination for the serialized stream associated with the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object."},{"pos":[20920,21130],"content":"Gets or sets whether the peer name specified in the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*&gt; property is registered with a specific <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on a host.","needQuote":true,"needEscape":true,"source":"Gets or sets whether the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property is registered with a specific <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> on a host."},{"pos":[21260,21610],"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the peer name is registered with a &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud<bpt id=\"p2\">*</bpt>&gt; for the peer host. If <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, then the registration process can be started with &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Start<ept id=\"p2\">*</ept>&gt;.","needQuote":true,"needEscape":true,"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the peer name is registered with a <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*> for the peer host. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, then the registration process can be started with <xref:System.Net.PeerToPeer.PeerNameRegistration.Start*>."},{"pos":[21800,21862],"content":"An object that has been disposed already cannot be registered.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that has been disposed already cannot be registered.","pos":[0,62]}]},{"pos":[22252,22309],"content":"Gets or sets the peer name to register with a peer cloud.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the peer name to register with a peer cloud.","pos":[0,57]}]},{"pos":[22321,22874],"content":"A peer name can be registered for more than one node; each <xref:System.Net.PeerToPeer.PeerNameRegistration> instance is distinct. The <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A> property associated with each corresponding <xref:System.Net.PeerToPeer.PeerName> instance is different. Also, it is possible to register a peer name for more than one cloud that the node is connected to; each of these registrations is distinct. The peer name's <xref:System.Net.IPEndPointCollection> will be different in each of these instances.","needQuote":true,"needEscape":true,"nodes":[{"content":"A peer name can be registered for more than one node; each <xref:System.Net.PeerToPeer.PeerNameRegistration> instance is distinct. The <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A> property associated with each corresponding <xref:System.Net.PeerToPeer.PeerName> instance is different. Also, it is possible to register a peer name for more than one cloud that the node is connected to; each of these registrations is distinct. The peer name's <xref:System.Net.IPEndPointCollection> will be different in each of these instances.","pos":[0,553],"nodes":[{"content":"A peer name can be registered for more than one node; each &lt;xref:System.Net.PeerToPeer.PeerNameRegistration&gt; instance is distinct.","pos":[0,130],"source":"A peer name can be registered for more than one node; each <xref:System.Net.PeerToPeer.PeerNameRegistration> instance is distinct."},{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A&gt; property associated with each corresponding &lt;xref:System.Net.PeerToPeer.PeerName&gt; instance is different.","pos":[131,311],"source":" The <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A> property associated with each corresponding <xref:System.Net.PeerToPeer.PeerName> instance is different."},{"content":"Also, it is possible to register a peer name for more than one cloud that the node is connected to; each of these registrations is distinct.","pos":[312,452]},{"content":"The peer name's &lt;xref:System.Net.IPEndPointCollection&gt; will be different in each of these instances.","pos":[453,553],"source":" The peer name's <xref:System.Net.IPEndPointCollection> will be different in each of these instances."}]}]},{"pos":[23033,23367],"content":"An object of type <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> that contains values associated with this <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object. Unless explicitly specified, the default value for all properties is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> for reference types.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object of type <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains values associated with this <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","pos":[0,183],"source":"An object of type <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> that contains values associated with this <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object."},{"content":"Unless explicitly specified, the default value for all properties is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for reference types.","pos":[184,334],"source":" Unless explicitly specified, the default value for all properties is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> for reference types."}]},{"pos":[23819,24016],"content":"Gets or sets the <bpt id=\"p1\">[</bpt>TCP/IP<ept id=\"p1\">](http://go.microsoft.com/fwlink?LinkID=98458)</ept> port number used by the peer being registered into the <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets the [TCP/IP](http://go.microsoft.com/fwlink?LinkID=98458) port number used by the peer being registered into the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object."},{"pos":[24028,24163],"content":"The default port is used by the <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> method only when no endpoints are specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default port is used by the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A&gt; method only when no endpoints are specified.","pos":[0,135],"source":"The default port is used by the <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> method only when no endpoints are specified."}]},{"pos":[24273,24435],"content":"An integer value indicating the TCP port number of the <xref:System.Net.IPEndPoint>. Unless explicitly specified, the default value for this property is zero (0).","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer value indicating the TCP port number of the <xref:System.Net.IPEndPoint>. Unless explicitly specified, the default value for this property is zero (0).","pos":[0,162],"nodes":[{"content":"An integer value indicating the TCP port number of the &lt;xref:System.Net.IPEndPoint&gt;.","pos":[0,84],"source":"An integer value indicating the TCP port number of the <xref:System.Net.IPEndPoint>."},{"content":"Unless explicitly specified, the default value for this property is zero (0).","pos":[85,162]}]}]},{"pos":[24625,24751],"content":"The specified port value is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified port value is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).","pos":[0,126],"nodes":[{"content":"The specified port value is less than zero.","pos":[0,43]},{"content":"Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).","pos":[45,126]}]}]},{"pos":[25130,25499],"content":"Registers the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> into the <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>. If no <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection*> is specified, automatic address selection is used with the port value specified by the <xref:System.Net.PeerToPeer.PeerNameRegistration.Port*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName<bpt id=\"p1\">*</bpt>&gt; into the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud<ept id=\"p1\">*</ept>&gt;.","pos":[0,140],"source":"Registers the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> into the <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>."},{"content":"If no &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection<bpt id=\"p1\">*</bpt>&gt; is specified, automatic address selection is used with the port value specified by the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Port<ept id=\"p1\">*</ept>&gt; property.","pos":[141,369],"source":" If no <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection*> is specified, automatic address selection is used with the port value specified by the <xref:System.Net.PeerToPeer.PeerNameRegistration.Port*> property."}]},{"pos":[25512,26588],"content":"The method registers the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> property with all source addresses and the <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> specified in the constructor. The default port is used by this method only when no endpoints are specified.       If the <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> property is `null`, this method registers the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> property using the <xref:System.Net.PeerToPeer.Cloud.Available> field, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.       After a <xref:System.Net.PeerToPeer.PeerNameRegistration> object has been started, the <xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A> method is used to stop it.       To update a registration, the <xref:System.Net.PeerToPeer.PeerNameRegistration.Update%2A> method must be used.","needQuote":false,"needEscape":true,"nodes":[{"content":"The method registers the peer name specified in the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A&gt; property with all source addresses and the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A&gt; specified in the constructor.","pos":[0,244],"source":"The method registers the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> property with all source addresses and the <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> specified in the constructor."},{"content":"The default port is used by this method only when no endpoints are specified.","pos":[245,322]},{"content":"If the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A&gt; property is <ph id=\"ph1\">`null`</ph>, this method registers the peer name specified in the &lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A&gt; property using the &lt;xref:System.Net.PeerToPeer.Cloud.Available&gt; field, which initializes default values for the &lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;, &lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;, and &lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;.","pos":[329,775],"source":"       If the <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> property is `null`, this method registers the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> property using the <xref:System.Net.PeerToPeer.Cloud.Available> field, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>."},{"content":"After a &lt;xref:System.Net.PeerToPeer.PeerNameRegistration&gt; object has been started, the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A&gt; method is used to stop it.","pos":[782,953],"source":"       After a <xref:System.Net.PeerToPeer.PeerNameRegistration> object has been started, the <xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A> method is used to stop it."},{"content":"To update a registration, the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Update%2A&gt; method must be used.","pos":[960,1070],"source":"       To update a registration, the <xref:System.Net.PeerToPeer.PeerNameRegistration.Update%2A> method must be used."}]},{"pos":[27080,27224],"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*&gt; property is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[27331,27381],"content":"This object had Dispose() called on it previously.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object had Dispose() called on it previously.","pos":[0,50]}]},{"pos":[27511,28278],"content":"-   The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> specified has already been registered. The <xref:System.Net.PeerToPeer.PeerNameRegistration.Update*> method must be used to update a registration.      -   The remote peer does not own the <xref:System.Net.PeerToPeer.PeerName.Authority*> for the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> specified.      -   Either the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> or the <xref:System.Net.PeerToPeer.PeerNameRecord.Data*> is not specified; at least one needs to be provided.      -   The message or data elements are invalid. Or, <xref:System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection*> is not set and no data blob or <xref:System.Net.IPEndPoint> is specified.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">-</ph>   The <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified has already been registered.","pos":[0,98],"source":"-   The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> specified has already been registered."},{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Update<bpt id=\"p1\">*</bpt>&gt; method must be used to update a registration.      -   The remote peer does not own the &lt;xref:System.Net.PeerToPeer.PeerName.Authority<ept id=\"p1\">*</ept>&gt; for the <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> specified.","pos":[99,368],"source":" The <xref:System.Net.PeerToPeer.PeerNameRegistration.Update*> method must be used to update a registration.      -   The remote peer does not own the <xref:System.Net.PeerToPeer.PeerName.Authority*> for the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> specified."},{"content":"-   Either the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or the &lt;xref:System.Net.PeerToPeer.PeerNameRecord.Data<bpt id=\"p2\">*</bpt>&gt; is not specified; at least one needs to be provided.      -   The message or data elements are invalid. Or, &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection<ept id=\"p2\">*</ept>&gt; is not set and no data blob or &lt;xref:System.Net.IPEndPoint&gt; is specified.","pos":[374,755],"source":"      -   Either the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> or the <xref:System.Net.PeerToPeer.PeerNameRecord.Data*> is not specified; at least one needs to be provided.      -   The message or data elements are invalid. Or, <xref:System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection*> is not set and no data blob or <xref:System.Net.IPEndPoint> is specified."}]},{"pos":[28653,28812],"content":"Unregisters the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property from all the clouds in which it was registered.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unregisters the peer name specified in the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*&gt; property from all the clouds in which it was registered.","pos":[0,159],"source":"Unregisters the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property from all the clouds in which it was registered."}]},{"pos":[28825,29532],"content":"After the registration process has been stopped, the registration object's state is equal to the state directly after being constructed by the default constructor. In this state, all of its properties are assumed to have no value. The <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> method may be used to restart it.       It is possible to have multiple registration objects for the same peer name.  In such a case, if the peer name is secured, each instance will represent a registration in a different PNRP cloud.  However, if the peer name is not secured, it can be registered in the same cloud multiple times.       If this instance is already stopped, calling this method has no effect.","needQuote":false,"needEscape":true,"nodes":[{"content":"After the registration process has been stopped, the registration object's state is equal to the state directly after being constructed by the default constructor. In this state, all of its properties are assumed to have no value. The <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> method may be used to restart it.       It is possible to have multiple registration objects for the same peer name.  In such a case, if the peer name is secured, each instance will represent a registration in a different PNRP cloud.  However, if the peer name is not secured, it can be registered in the same cloud multiple times.       If this instance is already stopped, calling this method has no effect.","pos":[0,703],"nodes":[{"content":"After the registration process has been stopped, the registration object's state is equal to the state directly after being constructed by the default constructor.","pos":[0,163]},{"content":"In this state, all of its properties are assumed to have no value.","pos":[164,230]},{"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A&gt; method may be used to restart it.","pos":[231,327],"source":" The <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> method may be used to restart it."},{"content":"It is possible to have multiple registration objects for the same peer name.","pos":[334,410]},{"content":"In such a case, if the peer name is secured, each instance will represent a registration in a different PNRP cloud.","pos":[412,527]},{"content":"However, if the peer name is not secured, it can be registered in the same cloud multiple times.","pos":[529,625]},{"content":"If this instance is already stopped, calling this method has no effect.","pos":[632,703]}]}]},{"pos":[29782,30200],"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName<bpt id=\"p1\">*</bpt>&gt; property has not yet been registered. This occurs when a <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object is constructed using the empty constructor. The &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName<ept id=\"p1\">*</ept>&gt; property must be populated in this instance prior to calling &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Start*&gt;.","needQuote":true,"needEscape":true,"source":"The <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property has not yet been registered. This occurs when a <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object is constructed using the empty constructor. The <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property must be populated in this instance prior to calling <xref:System.Net.PeerToPeer.PeerNameRegistration.Start*>."},{"pos":[30307,30357],"content":"This object had Dispose() called on it previously.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object had Dispose() called on it previously.","pos":[0,50]}]},{"pos":[31295,31502],"content":"Implements the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.ISerializable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface and returns the data needed to serialize the <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Implements the <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> interface and returns the data needed to serialize the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> instance."},{"pos":[31778,31897],"content":"Holds the serialized data associated with the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Holds the serialized data associated with the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> instance."},{"pos":[31993,32137],"content":"Contains the destination for the serialized stream associated with the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Contains the destination for the serialized stream associated with the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> instance."},{"pos":[32651,32885],"content":"Updates the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> for a node registered with a specific <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>. Update is performed using the information specified in the properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Updates the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for a node registered with a specific <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.Cloud\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,163],"source":"Updates the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> for a node registered with a specific <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>."},{"content":"Update is performed using the information specified in the properties.","pos":[164,234]}]},{"pos":[32898,33435],"content":"All information registered in cloud(s) for this <xref:System.Net.PeerToPeer.PeerName> prior to the call is completely discarded.  The new data is not combined with the existing registration.  To update a <xref:System.Net.PeerToPeer.PeerNameRegistration>, first update the properties on this instance and then call this method.       After a <xref:System.Net.PeerToPeer.PeerNameRecord> is registered, the <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> property cannot be updated.  All other fields in the record may be updated.","needQuote":false,"needEscape":true,"nodes":[{"content":"All information registered in cloud(s) for this <xref:System.Net.PeerToPeer.PeerName> prior to the call is completely discarded.  The new data is not combined with the existing registration.  To update a <xref:System.Net.PeerToPeer.PeerNameRegistration>, first update the properties on this instance and then call this method.       After a <xref:System.Net.PeerToPeer.PeerNameRecord> is registered, the <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> property cannot be updated.  All other fields in the record may be updated.","pos":[0,535],"nodes":[{"content":"All information registered in cloud(s) for this &lt;xref:System.Net.PeerToPeer.PeerName&gt; prior to the call is completely discarded.","pos":[0,128],"source":"All information registered in cloud(s) for this <xref:System.Net.PeerToPeer.PeerName> prior to the call is completely discarded."},{"content":"The new data is not combined with the existing registration.","pos":[130,190]},{"content":"To update a &lt;xref:System.Net.PeerToPeer.PeerNameRegistration&gt;, first update the properties on this instance and then call this method.","pos":[192,326],"source":"  To update a <xref:System.Net.PeerToPeer.PeerNameRegistration>, first update the properties on this instance and then call this method."},{"content":"After a &lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt; is registered, the &lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A&gt; property cannot be updated.","pos":[333,487],"source":"       After a <xref:System.Net.PeerToPeer.PeerNameRecord> is registered, the <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> property cannot be updated."},{"content":"All other fields in the record may be updated.","pos":[489,535]}]}]},{"pos":[33689,33833],"content":"The &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*&gt; property is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[33941,34447],"content":"-   The <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property has not yet been registered. The Update method cannot be called until the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property is registered in one or more clouds.      -   The peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property has changed since the corresponding <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> was registered.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">-</ph>   The &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName<bpt id=\"p1\">*</bpt>&gt; property has not yet been registered. The Update method cannot be called until the peer name specified in the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName<ept id=\"p1\">*</ept>&gt; property is registered in one or more clouds.","pos":[0,283],"source":"-   The <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property has not yet been registered. The Update method cannot be called until the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property is registered in one or more clouds."},{"content":"-   The peer name specified in the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*&gt; property has changed since the corresponding <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecord\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was registered.","pos":[289,502],"source":"      -   The peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property has changed since the corresponding <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> was registered."}]},{"pos":[34577,34631],"content":"An object that has been disposed cannot be registered.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that has been disposed cannot be registered.","pos":[0,54]}]},{"pos":[34734,34874],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecord\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> property is set to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[35344,35512],"content":"Gets or sets a value that specifies whether to use automatic endpoint selection when traversing a peer mesh or <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that specifies whether to use automatic endpoint selection when traversing a peer mesh or &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*&gt;.","pos":[0,168],"source":"Gets or sets a value that specifies whether to use automatic endpoint selection when traversing a peer mesh or <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>."}]},{"pos":[35525,36696],"content":"When auto endpoint selection is used (this property is set to `true`) with no endpoint information specified prior to the start of a <xref:System.Net.PeerToPeer.PeerNameRegistration>, the system chooses individual endpoints and publishes them with the associated peer name into all available clouds.  If the port is not specified, auto selection chooses zero as the <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>.       When set to `false`, auto selection as described above is not performed.  This enables the registration process to publish a peer name along with a data blob (as specified by the <xref:System.Net.PeerToPeer.PeerNameRecord.Data%2A> property). No endpoints are associated with the name.       If a registration method is used that automatically selects the addresses to register, there is no method to determine what addresses for which the <xref:System.Net.PeerToPeer.PeerName> object was registered.  That is, the <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A> property will not be updated to reflect the addresses selected.       Updating this property after peer name registration has started has no effect.","needQuote":false,"needEscape":true,"nodes":[{"content":"When auto endpoint selection is used (this property is set to <ph id=\"ph1\">`true`</ph>) with no endpoint information specified prior to the start of a &lt;xref:System.Net.PeerToPeer.PeerNameRegistration&gt;, the system chooses individual endpoints and publishes them with the associated peer name into all available clouds.","pos":[0,299],"source":"When auto endpoint selection is used (this property is set to `true`) with no endpoint information specified prior to the start of a <xref:System.Net.PeerToPeer.PeerNameRegistration>, the system chooses individual endpoints and publishes them with the associated peer name into all available clouds."},{"content":"If the port is not specified, auto selection chooses zero as the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A&gt;.","pos":[301,424],"source":"  If the port is not specified, auto selection chooses zero as the <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>."},{"content":"When set to <ph id=\"ph1\">`false`</ph>, auto selection as described above is not performed.","pos":[431,503],"source":"       When set to `false`, auto selection as described above is not performed."},{"content":"This enables the registration process to publish a peer name along with a data blob (as specified by the &lt;xref:System.Net.PeerToPeer.PeerNameRecord.Data%2A&gt; property).","pos":[505,672],"source":"  This enables the registration process to publish a peer name along with a data blob (as specified by the <xref:System.Net.PeerToPeer.PeerNameRecord.Data%2A> property)."},{"content":"No endpoints are associated with the name.","pos":[673,715]},{"content":"If a registration method is used that automatically selects the addresses to register, there is no method to determine what addresses for which the &lt;xref:System.Net.PeerToPeer.PeerName&gt; object was registered.","pos":[722,930],"source":"       If a registration method is used that automatically selects the addresses to register, there is no method to determine what addresses for which the <xref:System.Net.PeerToPeer.PeerName> object was registered."},{"content":"That is, the &lt;xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A&gt; property will not be updated to reflect the addresses selected.","pos":[932,1080],"source":"  That is, the <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A> property will not be updated to reflect the addresses selected."},{"content":"Updating this property after peer name registration has started has no effect.","pos":[1087,1165]}]},{"pos":[36830,37143],"content":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if automatic endpoint selection is to be used; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if some other method will be used to determine an endpoint. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if automatic endpoint selection is to be used; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if some other method will be used to determine an endpoint.","pos":[0,230],"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if automatic endpoint selection is to be used; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if some other method will be used to determine an endpoint."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[231,313],"source":" The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.PeerToPeer.PeerNameRegistration\n  id: PeerNameRegistration\n  children:\n  - System.Net.PeerToPeer.PeerNameRegistration.#ctor\n  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)\n  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)\n  - System.Net.PeerToPeer.PeerNameRegistration.Cloud\n  - System.Net.PeerToPeer.PeerNameRegistration.Comment\n  - System.Net.PeerToPeer.PeerNameRegistration.Data\n  - System.Net.PeerToPeer.PeerNameRegistration.Dispose\n  - System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)\n  - System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection\n  - System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Net.PeerToPeer.PeerNameRegistration.IsRegistered\n  - System.Net.PeerToPeer.PeerNameRegistration.PeerName\n  - System.Net.PeerToPeer.PeerNameRegistration.Port\n  - System.Net.PeerToPeer.PeerNameRegistration.Start\n  - System.Net.PeerToPeer.PeerNameRegistration.Stop\n  - System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Net.PeerToPeer.PeerNameRegistration.Update\n  - System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection\n  langs:\n  - csharp\n  name: PeerNameRegistration\n  nameWithType: PeerNameRegistration\n  fullName: System.Net.PeerToPeer.PeerNameRegistration\n  type: Class\n  summary: Registers a <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> in a <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> or set of clouds.\n  remarks: \"Registration creates (or updates) all the information that is associated with a <xref:System.Net.PeerToPeer.PeerName> in a peer cloud or clouds.  \\n  \\n It is possible to have multiple PeerNameRegistration objects for the same peer name. In such a case, if the peer name is secured, each instance represents PeerNameRegistration in a different cloud. However, if the peer name is not secured, it can be registered in the same cloud multiple times, providing that each registration is from a different process.\"\n  syntax:\n    content: 'public class PeerNameRegistration : IDisposable, System.Runtime.Serialization.ISerializable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor\n  id: '#ctor'\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: PeerNameRegistration()\n  nameWithType: PeerNameRegistration.PeerNameRegistration()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration()\n  type: Constructor\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Initializes a new default instance of the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> class.\n  remarks: \"Returns a new default instance of type <xref:System.Net.PeerToPeer.PeerNameRegistration>. It does not perform peer name registration during construction.  \\n  \\n After instantiating an object with this constructor, the caller should populate the appropriate fields in the instance prior to calling <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> or <xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>.\"\n  syntax:\n    content: public PeerNameRegistration ();\n    parameters: []\n  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)\n  id: '#ctor(System.Net.PeerToPeer.PeerName,System.Int32)'\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: PeerNameRegistration(PeerName,Int32)\n  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32)\n  type: Constructor\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> class with the specified name and port number.\n  remarks: \"Calling this constructor creates an instance that will be used to register all source addresses (both IPv6and IPv4) and the provided port for all clouds in which the peer is currently participating.  If the object is constructed successfully, the specified <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> and <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> are populated.  \\n  \\n If the peer name is secured and was previously registered in a <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> the peer is currently participating in, an <xref:System.Net.PeerToPeer.PeerToPeerException> is thrown.  \\n  \\n This constructor only creates a <xref:System.Net.PeerToPeer.PeerNameRegistration> instance; it does not perform the registration. After instantiating the registration object with this constructor and populating its fields, the application must call <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> to perform the actual registration.\"\n  syntax:\n    content: public PeerNameRegistration (System.Net.PeerToPeer.PeerName name, int port);\n    parameters:\n    - id: name\n      type: System.Net.PeerToPeer.PeerName\n      description: The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> object to register.\n    - id: port\n      type: System.Int32\n      description: Integer value that specifies the port number to register.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The specified port number is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).\n  - type: System.Net.PeerToPeer.PeerToPeerException\n    commentId: T:System.Net.PeerToPeer.PeerToPeerException\n    description: \"-   The <xref href=\\\"System.Net.PeerToPeer.PeerName\\\"></xref> specified has already been registered from this host.  \\n  \\n-   The remote peer does not own the <xref:System.Net.PeerToPeer.PeerName.Authority*> for the supplied <xref href=\\\"System.Net.PeerToPeer.PeerName\\\"></xref> object.\"\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: PeerNameRegistration(SerializationInfo,StreamingContext)\n  nameWithType: PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)\n  type: Constructor\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Initializes a new serializable <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object.\n  syntax:\n    content: protected PeerNameRegistration (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: Reference to the object that holds the data needed to deserialize this instance.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: Context that provides the means for deserializing the data. Also referred to as the source of the serialized data.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)\n  id: '#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)'\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: PeerNameRegistration(PeerName,Int32,Cloud)\n  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)\n  type: Constructor\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> class with the specified peer name, port number, and <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>.\n  remarks: \"Calling this constructor creates an instance that will be used to register all source addresses (both IPv6 and IPv4), the provided port, and the specified <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>.  If the object is constructed successfully, the properties are populated with the specified <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>, <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> and <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>.  \\n  \\n If the cloud parameter is `null`, the name is registered using the <xref:System.Net.PeerToPeer.Cloud.Available> shortcut, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.  \\n  \\n After instantiation, the <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> method must be called to register the <xref:System.Net.PeerToPeer.PeerName>.\"\n  syntax:\n    content: public PeerNameRegistration (System.Net.PeerToPeer.PeerName name, int port, System.Net.PeerToPeer.Cloud cloud);\n    parameters:\n    - id: name\n      type: System.Net.PeerToPeer.PeerName\n      description: The <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> object to register.\n    - id: port\n      type: System.Int32\n      description: Integer value that specifies the port number to register.\n    - id: cloud\n      type: System.Net.PeerToPeer.Cloud\n      description: <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> in which to register the peer name.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter cannot be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The specified port number is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).\n  - type: System.Net.PeerToPeer.PeerToPeerException\n    commentId: T:System.Net.PeerToPeer.PeerToPeerException\n    description: \"-   The <xref href=\\\"System.Net.PeerToPeer.PeerName\\\"></xref> specified has already been registered from this host.  \\n  \\n-   The remote peer does not own the <xref:System.Net.PeerToPeer.PeerName.Authority*> for the supplied <xref href=\\\"System.Net.PeerToPeer.PeerName\\\"></xref> object.\"\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud\n  id: Cloud\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: Cloud\n  nameWithType: PeerNameRegistration.Cloud\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Cloud\n  type: Property\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Gets or sets information in a Cloud into which this <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*> object will be registered.\n  syntax:\n    content: public System.Net.PeerToPeer.Cloud Cloud { get; set; }\n    return:\n      type: System.Net.PeerToPeer.Cloud\n      description: An object of type <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> that specifies the peer cloud for which this registration is defined. This property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.Cloud*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment\n  id: Comment\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: Comment\n  nameWithType: PeerNameRegistration.Comment\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Comment\n  type: Property\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Gets or sets additional information about the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> object that will be registered with the <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>.\n  syntax:\n    content: public string Comment { get; set; }\n    return:\n      type: System.String\n      description: The comment that contains additional information about the <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> to associate with the <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>. This property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.Comment*\n  exceptions:\n  - type: System.Net.PeerToPeer.PeerToPeerException\n    commentId: T:System.Net.PeerToPeer.PeerToPeerException\n    description: The specified string value is greater than 39 Unicode characters.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Data\n  id: Data\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: Data\n  nameWithType: PeerNameRegistration.Data\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Data\n  type: Property\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Gets or sets application-defined binary data for the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object.\n  remarks: The maximum amount of Data that can be supplied is 4,096 bytes.\n  syntax:\n    content: public byte[] Data { get; set; }\n    return:\n      type: System.Byte[]\n      description: An array of bytes that holds the binary data associated with the entry. This property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> by default.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.Data*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The specified Data is greater than 4096 bytes.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose\n  id: Dispose\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: PeerNameRegistration.Dispose()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose()\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Releases all resources used by the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Net.PeerToPeer.PeerNameRegistration.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: PeerNameRegistration.Dispose(Boolean)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Releases the unmanaged resources and optionally releases the managed resources used by the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection\n  id: EndPointCollection\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: EndPointCollection\n  nameWithType: PeerNameRegistration.EndPointCollection\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection\n  type: Property\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Gets the collection of network endpoints for which the associated peer name is registered.\n  remarks: \"In the <xref:System.Net> namespace, an <xref:System.Net.IPEndPoint> represents a network endpoint as an IP address and a port number.  For PNRP, an IP address and port value must be provided for each endpoint.  The maximum number of endpoints that can be provided is ten. Automatic address selection is used when this parameter is `null`.  \\n  \\n If a registration method is used that automatically selects the addresses to register, there is no method to determine theaddresses for which the peer name was registered.  That is, the EndPointCollection property will not be updated to reflect the addresses selected.  \\n  \\n When a peer name is registered for more than one node, each <xref:System.Net.PeerToPeer.PeerNameRegistration> is distinct and the EndPointCollection property defined on each registration instance will be different. Also, when a <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> is registered into more than one <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>, each registration is distinct and the collection of endpoints will usually be different for each instance.\"\n  syntax:\n    content: public System.Net.IPEndPointCollection EndPointCollection { get; }\n    return:\n      type: System.Net.IPEndPointCollection\n      description: An <xref:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection*> object that contains the network endpoints for which the associated peer name is registered. Unless explicitly specified, the default value for all properties is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> for reference types.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Populates a serialization information object with the data needed to serialize the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> instance.\n  syntax:\n    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: Holds the serialized data associated with the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: Contains destination for the serialized stream associated with the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered\n  id: IsRegistered\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: IsRegistered()\n  nameWithType: PeerNameRegistration.IsRegistered()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered()\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Gets or sets whether the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property is registered with a specific <xref href=\"System.Net.PeerToPeer.Cloud\"></xref> on a host.\n  syntax:\n    content: public bool IsRegistered ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the peer name is registered with a <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*> for the peer host. If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, then the registration process can be started with <xref:System.Net.PeerToPeer.PeerNameRegistration.Start*>.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An object that has been disposed already cannot be registered.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName\n  id: PeerName\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: PeerName\n  nameWithType: PeerNameRegistration.PeerName\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerName\n  type: Property\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Gets or sets the peer name to register with a peer cloud.\n  remarks: A peer name can be registered for more than one node; each <xref:System.Net.PeerToPeer.PeerNameRegistration> instance is distinct. The <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A> property associated with each corresponding <xref:System.Net.PeerToPeer.PeerName> instance is different. Also, it is possible to register a peer name for more than one cloud that the node is connected to; each of these registrations is distinct. The peer name's <xref:System.Net.IPEndPointCollection> will be different in each of these instances.\n  syntax:\n    content: public System.Net.PeerToPeer.PeerName PeerName { get; set; }\n    return:\n      type: System.Net.PeerToPeer.PeerName\n      description: An object of type <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> that contains values associated with this <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object. Unless explicitly specified, the default value for all properties is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> for reference types.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.PeerName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Port\n  id: Port\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: Port\n  nameWithType: PeerNameRegistration.Port\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Port\n  type: Property\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Gets or sets the [TCP/IP](http://go.microsoft.com/fwlink?LinkID=98458) port number used by the peer being registered into the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object.\n  remarks: The default port is used by the <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> method only when no endpoints are specified.\n  syntax:\n    content: public int Port { get; set; }\n    return:\n      type: System.Int32\n      description: An integer value indicating the TCP port number of the <xref:System.Net.IPEndPoint>. Unless explicitly specified, the default value for this property is zero (0).\n  overload: System.Net.PeerToPeer.PeerNameRegistration.Port*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The specified port value is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Start\n  id: Start\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: PeerNameRegistration.Start()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Start()\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Registers the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> into the <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>. If no <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection*> is specified, automatic address selection is used with the port value specified by the <xref:System.Net.PeerToPeer.PeerNameRegistration.Port*> property.\n  remarks: \"The method registers the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> property with all source addresses and the <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> specified in the constructor. The default port is used by this method only when no endpoints are specified.  \\n  \\n If the <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> property is `null`, this method registers the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> property using the <xref:System.Net.PeerToPeer.Cloud.Available> field, which initializes default values for the <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>, and <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.  \\n  \\n After a <xref:System.Net.PeerToPeer.PeerNameRegistration> object has been started, the <xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A> method is used to stop it.  \\n  \\n To update a registration, the <xref:System.Net.PeerToPeer.PeerNameRegistration.Update%2A> method must be used.\"\n  example:\n  - \"The following code example creates a <xref:System.Net.PeerToPeer.PeerName> and registers it along with the metadata specified.  \\n  \\n [!code-cs[NCLPNRPRegisterPeerName#1](~/add/codesnippet/csharp/m-system.net.peertopeer._1_1.cs)]\"\n  syntax:\n    content: public void Start ();\n    parameters: []\n  overload: System.Net.PeerToPeer.PeerNameRegistration.Start*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object had Dispose() called on it previously.\n  - type: System.Net.PeerToPeer.PeerToPeerException\n    commentId: T:System.Net.PeerToPeer.PeerToPeerException\n    description: \"-   The <xref href=\\\"System.Net.PeerToPeer.PeerName\\\"></xref> specified has already been registered. The <xref:System.Net.PeerToPeer.PeerNameRegistration.Update*> method must be used to update a registration.  \\n  \\n-   The remote peer does not own the <xref:System.Net.PeerToPeer.PeerName.Authority*> for the <xref href=\\\"System.Net.PeerToPeer.PeerName\\\"></xref> specified.  \\n  \\n-   Either the <xref href=\\\"System.Net.PeerToPeer.PeerName\\\"></xref> or the <xref:System.Net.PeerToPeer.PeerNameRecord.Data*> is not specified; at least one needs to be provided.  \\n  \\n-   The message or data elements are invalid. Or, <xref:System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection*> is not set and no data blob or <xref:System.Net.IPEndPoint> is specified.\"\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop\n  id: Stop\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: PeerNameRegistration.Stop()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Stop()\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Unregisters the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property from all the clouds in which it was registered.\n  remarks: \"After the registration process has been stopped, the registration object's state is equal to the state directly after being constructed by the default constructor. In this state, all of its properties are assumed to have no value. The <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> method may be used to restart it.  \\n  \\n It is possible to have multiple registration objects for the same peer name.  In such a case, if the peer name is secured, each instance will represent a registration in a different PNRP cloud.  However, if the peer name is not secured, it can be registered in the same cloud multiple times.  \\n  \\n If this instance is already stopped, calling this method has no effect.\"\n  syntax:\n    content: public void Stop ();\n    parameters: []\n  overload: System.Net.PeerToPeer.PeerNameRegistration.Stop*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property has not yet been registered. This occurs when a <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> object is constructed using the empty constructor. The <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property must be populated in this instance prior to calling <xref:System.Net.PeerToPeer.PeerNameRegistration.Start*>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object had Dispose() called on it previously.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Implements the <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> interface and returns the data needed to serialize the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> instance.\n  syntax:\n    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: Holds the serialized data associated with the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> instance.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: Contains the destination for the serialized stream associated with the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> instance.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Update\n  id: Update\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: Update()\n  nameWithType: PeerNameRegistration.Update()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Update()\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Updates the <xref href=\"System.Net.PeerToPeer.PeerNameRegistration\"></xref> for a node registered with a specific <xref href=\"System.Net.PeerToPeer.Cloud\"></xref>. Update is performed using the information specified in the properties.\n  remarks: \"All information registered in cloud(s) for this <xref:System.Net.PeerToPeer.PeerName> prior to the call is completely discarded.  The new data is not combined with the existing registration.  To update a <xref:System.Net.PeerToPeer.PeerNameRegistration>, first update the properties on this instance and then call this method.  \\n  \\n After a <xref:System.Net.PeerToPeer.PeerNameRecord> is registered, the <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> property cannot be updated.  All other fields in the record may be updated.\"\n  syntax:\n    content: public void Update ();\n    parameters: []\n  overload: System.Net.PeerToPeer.PeerNameRegistration.Update*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"-   The <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property has not yet been registered. The Update method cannot be called until the peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property is registered in one or more clouds.  \\n  \\n-   The peer name specified in the <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> property has changed since the corresponding <xref href=\\\"System.Net.PeerToPeer.PeerNameRecord\\\"></xref> was registered.\"\n  - type: System.Net.PeerToPeer.PeerToPeerException\n    commentId: T:System.Net.PeerToPeer.PeerToPeerException\n    description: An object that has been disposed cannot be registered.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A <xref href=\"System.Net.PeerToPeer.PeerNameRecord\"></xref> property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection\n  id: UseAutoEndPointSelection\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  langs:\n  - csharp\n  name: UseAutoEndPointSelection\n  nameWithType: PeerNameRegistration.UseAutoEndPointSelection\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection\n  type: Property\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Gets or sets a value that specifies whether to use automatic endpoint selection when traversing a peer mesh or <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>.\n  remarks: \"When auto endpoint selection is used (this property is set to `true`) with no endpoint information specified prior to the start of a <xref:System.Net.PeerToPeer.PeerNameRegistration>, the system chooses individual endpoints and publishes them with the associated peer name into all available clouds.  If the port is not specified, auto selection chooses zero as the <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>.  \\n  \\n When set to `false`, auto selection as described above is not performed.  This enables the registration process to publish a peer name along with a data blob (as specified by the <xref:System.Net.PeerToPeer.PeerNameRecord.Data%2A> property). No endpoints are associated with the name.  \\n  \\n If a registration method is used that automatically selects the addresses to register, there is no method to determine what addresses for which the <xref:System.Net.PeerToPeer.PeerName> object was registered.  That is, the <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A> property will not be updated to reflect the addresses selected.  \\n  \\n Updating this property after peer name registration has started has no effect.\"\n  syntax:\n    content: public bool UseAutoEndPointSelection { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if automatic endpoint selection is to be used; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if some other method will be used to determine an endpoint. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Net.PeerToPeer.PeerToPeerException\n  parent: System.Net.PeerToPeer\n  isExternal: false\n  name: PeerToPeerException\n  nameWithType: PeerToPeerException\n  fullName: System.Net.PeerToPeer.PeerToPeerException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: PeerNameRegistration()\n  nameWithType: PeerNameRegistration.PeerNameRegistration()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration()\n- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: PeerNameRegistration(PeerName,Int32)\n  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32)\n- uid: System.Net.PeerToPeer.PeerName\n  parent: System.Net.PeerToPeer\n  isExternal: false\n  name: PeerName\n  nameWithType: PeerName\n  fullName: System.Net.PeerToPeer.PeerName\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: PeerNameRegistration(SerializationInfo,StreamingContext)\n  nameWithType: PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: PeerNameRegistration(PeerName,Int32,Cloud)\n  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)\n- uid: System.Net.PeerToPeer.Cloud\n  parent: System.Net.PeerToPeer\n  isExternal: false\n  name: Cloud\n  nameWithType: Cloud\n  fullName: System.Net.PeerToPeer.Cloud\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Cloud\n  nameWithType: PeerNameRegistration.Cloud\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Cloud\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Comment\n  nameWithType: PeerNameRegistration.Comment\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Comment\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Data\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Data\n  nameWithType: PeerNameRegistration.Data\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Data\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Dispose()\n  nameWithType: PeerNameRegistration.Dispose()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose()\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: PeerNameRegistration.Dispose(Boolean)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: EndPointCollection\n  nameWithType: PeerNameRegistration.EndPointCollection\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection\n- uid: System.Net.IPEndPointCollection\n  parent: System.Net\n  isExternal: false\n  name: IPEndPointCollection\n  nameWithType: IPEndPointCollection\n  fullName: System.Net.IPEndPointCollection\n- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: IsRegistered()\n  nameWithType: PeerNameRegistration.IsRegistered()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered()\n- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: PeerName\n  nameWithType: PeerNameRegistration.PeerName\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerName\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Port\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Port\n  nameWithType: PeerNameRegistration.Port\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Port\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Start\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Start()\n  nameWithType: PeerNameRegistration.Start()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Start()\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Stop()\n  nameWithType: PeerNameRegistration.Stop()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Stop()\n- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Update\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Update()\n  nameWithType: PeerNameRegistration.Update()\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.Update()\n- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: UseAutoEndPointSelection\n  nameWithType: PeerNameRegistration.UseAutoEndPointSelection\n  fullName: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection\n- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: PeerNameRegistration\n  nameWithType: PeerNameRegistration.PeerNameRegistration\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Cloud\n  nameWithType: PeerNameRegistration.Cloud\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Comment\n  nameWithType: PeerNameRegistration.Comment\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Data*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Data\n  nameWithType: PeerNameRegistration.Data\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Dispose\n  nameWithType: PeerNameRegistration.Dispose\n- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: EndPointCollection\n  nameWithType: PeerNameRegistration.EndPointCollection\n- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: GetObjectData\n  nameWithType: PeerNameRegistration.GetObjectData\n- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: IsRegistered\n  nameWithType: PeerNameRegistration.IsRegistered\n- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: PeerName\n  nameWithType: PeerNameRegistration.PeerName\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Port*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Port\n  nameWithType: PeerNameRegistration.Port\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Start*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Start\n  nameWithType: PeerNameRegistration.Start\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Stop\n  nameWithType: PeerNameRegistration.Stop\n- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData\n- uid: System.Net.PeerToPeer.PeerNameRegistration.Update*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: Update\n  nameWithType: PeerNameRegistration.Update\n- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection*\n  parent: System.Net.PeerToPeer.PeerNameRegistration\n  isExternal: false\n  name: UseAutoEndPointSelection\n  nameWithType: PeerNameRegistration.UseAutoEndPointSelection\n"}