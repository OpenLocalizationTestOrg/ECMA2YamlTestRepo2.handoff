{"nodes":[{"pos":[738,853],"content":"Creates a timer for a specified duration, using a <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.TimerExtension\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a timer for a specified duration, using a <xref href=\"System.Activities.Statements.TimerExtension\"></xref>."},{"pos":[865,1197],"content":"When the activity’s timer expires, the Delay activity completes its execution. If a workflow instance persists while a Delay activity has an outstanding timer, then an <xref:System.ServiceModel.Activities.Description.ITimerExpiredNotification> standard endpoint must be configured to receive notification that the timer has expired.","needQuote":true,"needEscape":true,"nodes":[{"content":"When the activity’s timer expires, the Delay activity completes its execution. If a workflow instance persists while a Delay activity has an outstanding timer, then an <xref:System.ServiceModel.Activities.Description.ITimerExpiredNotification> standard endpoint must be configured to receive notification that the timer has expired.","pos":[0,332],"nodes":[{"content":"When the activity’s timer expires, the Delay activity completes its execution.","pos":[0,78]},{"content":"If a workflow instance persists while a Delay activity has an outstanding timer, then an &lt;xref:System.ServiceModel.Activities.Description.ITimerExpiredNotification&gt; standard endpoint must be configured to receive notification that the timer has expired.","pos":[79,332],"source":" If a workflow instance persists while a Delay activity has an outstanding timer, then an <xref:System.ServiceModel.Activities.Description.ITimerExpiredNotification> standard endpoint must be configured to receive notification that the timer has expired."}]}]},{"pos":[2966,3061],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.Delay\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> activity.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Activities.Statements.Delay\"></xref> activity."},{"pos":[4228,4240],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5065,5077],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5859,5871],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6450,6462],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6906,7097],"content":"The duration of the timer that the <xref href=\"System.Activities.Statements.Delay\"></xref> activity creates. If the duration is set to <xref:System.TimeSpan.MaxValue*>, the delay is infinite.","needQuote":true,"needEscape":true,"nodes":[{"content":"The duration of the timer that the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.Delay\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> activity creates.","pos":[0,108],"source":"The duration of the timer that the <xref href=\"System.Activities.Statements.Delay\"></xref> activity creates."},{"content":"If the duration is set to &lt;xref:System.TimeSpan.MaxValue*&gt;, the delay is infinite.","pos":[109,191],"source":" If the duration is set to <xref:System.TimeSpan.MaxValue*>, the delay is infinite."}]},{"pos":[7594,7613],"content":"The timer duration.","needQuote":true,"needEscape":true,"nodes":[{"content":"The timer duration.","pos":[0,19]}]},{"pos":[8396,8408],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Statements.Delay\n  id: Delay\n  children:\n  - System.Activities.Statements.Delay.#ctor\n  - System.Activities.Statements.Delay.Abort(System.Activities.NativeActivityAbortContext)\n  - System.Activities.Statements.Delay.CacheMetadata(System.Activities.NativeActivityMetadata)\n  - System.Activities.Statements.Delay.Cancel(System.Activities.NativeActivityContext)\n  - System.Activities.Statements.Delay.CanInduceIdle\n  - System.Activities.Statements.Delay.Duration\n  - System.Activities.Statements.Delay.Execute(System.Activities.NativeActivityContext)\n  langs:\n  - csharp\n  name: Delay\n  nameWithType: Delay\n  fullName: System.Activities.Statements.Delay\n  type: Class\n  summary: Creates a timer for a specified duration, using a <xref href=\"System.Activities.Statements.TimerExtension\"></xref>.\n  remarks: When the activity’s timer expires, the Delay activity completes its execution. If a workflow instance persists while a Delay activity has an outstanding timer, then an <xref:System.ServiceModel.Activities.Description.ITimerExpiredNotification> standard endpoint must be configured to receive notification that the timer has expired.\n  example:\n  - \"The following code sample demonstrates creating a Delay activity. This example is from the [Using the Pick Activity](~/add/includes/ajax-current-ext-md.md) sample.  \\n  \\n [!code-cs[wfs_Pick#1](~/add/codesnippet/csharp/pick/program.cs#1)]\"\n  syntax:\n    content: >-\n      [System.Windows.Markup.ContentProperty(\"Duration\")]\n\n      public sealed class Delay : System.Activities.NativeActivity\n  inheritance:\n  - System.Object\n  - System.Activities.Activity\n  - System.Activities.NativeActivity\n  implements: []\n  inheritedMembers:\n  - System.Activities.Activity.CacheId\n  - System.Activities.Activity.Constraints\n  - System.Activities.Activity.DisplayName\n  - System.Activities.Activity.Id\n  - System.Activities.Activity.ShouldSerializeDisplayName\n  - System.Activities.Activity.ToString\n  - System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)\n  - System.Activities.NativeActivity.Implementation\n  - System.Activities.NativeActivity.ImplementationVersion\n  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)\n  - System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)\n  platform:\n  - net462\n- uid: System.Activities.Statements.Delay.#ctor\n  id: '#ctor'\n  parent: System.Activities.Statements.Delay\n  langs:\n  - csharp\n  name: Delay()\n  nameWithType: Delay.Delay()\n  fullName: System.Activities.Statements.Delay.Delay()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Creates a new instance of the <xref href=\"System.Activities.Statements.Delay\"></xref> activity.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates creating a <xref:System.Activities.Statements.Delay> activity. This example is from the [Using the Pick Activity](~/add/includes/ajax-current-ext-md.md)sample.  \\n  \\n [!code-cs[wfs_Pick#1](~/add/codesnippet/csharp/pick/program.cs#1)]\"\n  syntax:\n    content: public Delay ();\n    parameters: []\n  overload: System.Activities.Statements.Delay.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Delay.Abort(System.Activities.NativeActivityAbortContext)\n  id: Abort(System.Activities.NativeActivityAbortContext)\n  parent: System.Activities.Statements.Delay\n  langs:\n  - csharp\n  name: Abort(NativeActivityAbortContext)\n  nameWithType: Delay.Abort(NativeActivityAbortContext)\n  fullName: System.Activities.Statements.Delay.Abort(NativeActivityAbortContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void Abort (System.Activities.NativeActivityAbortContext context);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityAbortContext\n      description: To be added.\n  overload: System.Activities.Statements.Delay.Abort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Delay.CacheMetadata(System.Activities.NativeActivityMetadata)\n  id: CacheMetadata(System.Activities.NativeActivityMetadata)\n  parent: System.Activities.Statements.Delay\n  langs:\n  - csharp\n  name: CacheMetadata(NativeActivityMetadata)\n  nameWithType: Delay.CacheMetadata(NativeActivityMetadata)\n  fullName: System.Activities.Statements.Delay.CacheMetadata(NativeActivityMetadata)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void CacheMetadata (System.Activities.NativeActivityMetadata metadata);\n    parameters:\n    - id: metadata\n      type: System.Activities.NativeActivityMetadata\n      description: To be added.\n  overload: System.Activities.Statements.Delay.CacheMetadata*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Delay.Cancel(System.Activities.NativeActivityContext)\n  id: Cancel(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.Delay\n  langs:\n  - csharp\n  name: Cancel(NativeActivityContext)\n  nameWithType: Delay.Cancel(NativeActivityContext)\n  fullName: System.Activities.Statements.Delay.Cancel(NativeActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void Cancel (System.Activities.NativeActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: To be added.\n  overload: System.Activities.Statements.Delay.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Delay.CanInduceIdle\n  id: CanInduceIdle\n  parent: System.Activities.Statements.Delay\n  langs:\n  - csharp\n  name: CanInduceIdle\n  nameWithType: Delay.CanInduceIdle\n  fullName: System.Activities.Statements.Delay.CanInduceIdle\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override bool CanInduceIdle { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Activities.Statements.Delay.CanInduceIdle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Delay.Duration\n  id: Duration\n  parent: System.Activities.Statements.Delay\n  langs:\n  - csharp\n  name: Duration\n  nameWithType: Delay.Duration\n  fullName: System.Activities.Statements.Delay.Duration\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: The duration of the timer that the <xref href=\"System.Activities.Statements.Delay\"></xref> activity creates. If the duration is set to <xref:System.TimeSpan.MaxValue*>, the delay is infinite.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates using Duration in a <xref:System.Activities.Statements.Delay> activity. This example is from the [Using the Pick Activity](~/add/includes/ajax-current-ext-md.md) sample.  \\n  \\n [!code-cs[wfs_Pick#1](~/add/codesnippet/csharp/pick/program.cs#1)]\"\n  syntax:\n    content: public System.Activities.InArgument<TimeSpan> Duration { get; set; }\n    return:\n      type: System.Activities.InArgument{System.TimeSpan}\n      description: The timer duration.\n  overload: System.Activities.Statements.Delay.Duration*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Delay.Execute(System.Activities.NativeActivityContext)\n  id: Execute(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.Delay\n  langs:\n  - csharp\n  name: Execute(NativeActivityContext)\n  nameWithType: Delay.Execute(NativeActivityContext)\n  fullName: System.Activities.Statements.Delay.Execute(NativeActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void Execute (System.Activities.NativeActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: To be added.\n  overload: System.Activities.Statements.Delay.Execute*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Activities.NativeActivity\n  isExternal: false\n  name: System.Activities.NativeActivity\n- uid: System.Activities.Statements.Delay.#ctor\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: Delay()\n  nameWithType: Delay.Delay()\n  fullName: System.Activities.Statements.Delay.Delay()\n- uid: System.Activities.Statements.Delay.Abort(System.Activities.NativeActivityAbortContext)\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: Abort(NativeActivityAbortContext)\n  nameWithType: Delay.Abort(NativeActivityAbortContext)\n  fullName: System.Activities.Statements.Delay.Abort(NativeActivityAbortContext)\n- uid: System.Activities.NativeActivityAbortContext\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityAbortContext\n  nameWithType: NativeActivityAbortContext\n  fullName: System.Activities.NativeActivityAbortContext\n- uid: System.Activities.Statements.Delay.CacheMetadata(System.Activities.NativeActivityMetadata)\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: CacheMetadata(NativeActivityMetadata)\n  nameWithType: Delay.CacheMetadata(NativeActivityMetadata)\n  fullName: System.Activities.Statements.Delay.CacheMetadata(NativeActivityMetadata)\n- uid: System.Activities.NativeActivityMetadata\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityMetadata\n  nameWithType: NativeActivityMetadata\n  fullName: System.Activities.NativeActivityMetadata\n- uid: System.Activities.Statements.Delay.Cancel(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: Cancel(NativeActivityContext)\n  nameWithType: Delay.Cancel(NativeActivityContext)\n  fullName: System.Activities.Statements.Delay.Cancel(NativeActivityContext)\n- uid: System.Activities.NativeActivityContext\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityContext\n  nameWithType: NativeActivityContext\n  fullName: System.Activities.NativeActivityContext\n- uid: System.Activities.Statements.Delay.CanInduceIdle\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: CanInduceIdle\n  nameWithType: Delay.CanInduceIdle\n  fullName: System.Activities.Statements.Delay.CanInduceIdle\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Statements.Delay.Duration\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: Duration\n  nameWithType: Delay.Duration\n  fullName: System.Activities.Statements.Delay.Duration\n- uid: System.Activities.InArgument{System.TimeSpan}\n  parent: System.Activities\n  isExternal: false\n  name: InArgument<TimeSpan>\n  nameWithType: InArgument<TimeSpan>\n  fullName: System.Activities.InArgument<System.TimeSpan>\n  spec.csharp:\n  - uid: System.Activities.InArgument`1\n    name: InArgument\n    nameWithType: InArgument\n    fullName: InArgument<System.TimeSpan>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.TimeSpan\n    name: TimeSpan\n    nameWithType: TimeSpan\n    fullName: TimeSpan\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.Delay.Execute(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: Execute(NativeActivityContext)\n  nameWithType: Delay.Execute(NativeActivityContext)\n  fullName: System.Activities.Statements.Delay.Execute(NativeActivityContext)\n- uid: System.Activities.Statements.Delay.#ctor*\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: Delay\n  nameWithType: Delay.Delay\n- uid: System.Activities.Statements.Delay.Abort*\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: Abort\n  nameWithType: Delay.Abort\n- uid: System.Activities.Statements.Delay.CacheMetadata*\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: CacheMetadata\n  nameWithType: Delay.CacheMetadata\n- uid: System.Activities.Statements.Delay.Cancel*\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: Cancel\n  nameWithType: Delay.Cancel\n- uid: System.Activities.Statements.Delay.CanInduceIdle*\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: CanInduceIdle\n  nameWithType: Delay.CanInduceIdle\n- uid: System.Activities.Statements.Delay.Duration*\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: Duration\n  nameWithType: Delay.Duration\n- uid: System.Activities.Statements.Delay.Execute*\n  parent: System.Activities.Statements.Delay\n  isExternal: false\n  name: Execute\n  nameWithType: Delay.Execute\n"}