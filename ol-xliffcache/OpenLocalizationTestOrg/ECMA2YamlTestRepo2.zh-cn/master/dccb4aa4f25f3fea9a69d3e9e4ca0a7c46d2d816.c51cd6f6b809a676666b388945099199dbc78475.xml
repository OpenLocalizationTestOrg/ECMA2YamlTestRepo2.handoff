{"nodes":[{"pos":[504,608],"content":"Represents an object that is associated with a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Represents an object that is associated with a <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."},{"pos":[621,1736],"content":"Only the thread that the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the DispatcherObject directly.  To access a DispatcherObject from a thread other than the thread the DispatcherObject was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the DispatcherObject is associated with.       Subclasses of DispatcherObject that need to enforce thread safety can do so by calling <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> on all public methods.  This guarantees the calling thread is the thread that the DispatcherObject was created on.       A DispatcherObject cannot be independently instantiated; that is, all constructors are protected.       Objects that derive from DispatcherObject have thread affinity.       Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.  For more information, see the [Freezable Objects Overview](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Only the thread that the &lt;xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A&gt; was created on may access the DispatcherObject directly.","pos":[0,144],"source":"Only the thread that the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the DispatcherObject directly."},{"content":"To access a DispatcherObject from a thread other than the thread the DispatcherObject was created on, call &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; on the &lt;xref:System.Windows.Threading.Dispatcher&gt; the DispatcherObject is associated with.","pos":[146,457],"source":"  To access a DispatcherObject from a thread other than the thread the DispatcherObject was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the DispatcherObject is associated with."},{"content":"Subclasses of DispatcherObject that need to enforce thread safety can do so by calling &lt;xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A&gt; on all public methods.","pos":[464,638],"source":"       Subclasses of DispatcherObject that need to enforce thread safety can do so by calling <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> on all public methods."},{"content":"This guarantees the calling thread is the thread that the DispatcherObject was created on.","pos":[640,730]},{"content":"A DispatcherObject cannot be independently instantiated; that is, all constructors are protected.","pos":[737,834]},{"content":"Objects that derive from DispatcherObject have thread affinity.","pos":[841,904]},{"content":"Objects that derive from &lt;xref:System.Windows.Freezable&gt; are free-threaded when they are frozen.","pos":[911,1007],"source":"       Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Freezable Objects Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1009,1107],"source":"  For more information, see the [Freezable Objects Overview](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[2288,2391],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.DispatcherObject\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Threading.DispatcherObject\"></xref> class."},{"pos":[2948,3068],"content":"Determines whether the calling thread has access to this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.DispatcherObject\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines whether the calling thread has access to this <xref href=\"System.Windows.Threading.DispatcherObject\"></xref>."},{"pos":[3081,3992],"content":"Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.       Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.       The difference between CheckAccess and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> is that CheckAccess returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>.       Calling this method is identical to calling <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> on the associated <xref:System.Windows.Threading.Dispatcher> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.       Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.       The difference between CheckAccess and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> is that CheckAccess returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>.       Calling this method is identical to calling <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> on the associated <xref:System.Windows.Threading.Dispatcher> object.","pos":[0,905],"nodes":[{"content":"Only the thread the &lt;xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A&gt; was created on may access the &lt;xref:System.Windows.Threading.DispatcherObject&gt;.","pos":[0,162],"source":"Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>."},{"content":"Any thread can check to see whether it has access to this &lt;xref:System.Windows.Threading.DispatcherObject&gt;.","pos":[169,276],"source":"       Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>."},{"content":"The difference between CheckAccess and &lt;xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A&gt; is that CheckAccess returns a Boolean that specifies whether the calling thread has access to this &lt;xref:System.Windows.Threading.DispatcherObject&gt; and &lt;xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A&gt; throws an exception if the calling thread does not have access to the this &lt;xref:System.Windows.Threading.DispatcherObject&gt;.","pos":[283,728],"source":"       The difference between CheckAccess and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> is that CheckAccess returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>."},{"content":"Calling this method is identical to calling &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; on the associated &lt;xref:System.Windows.Threading.Dispatcher&gt; object.","pos":[735,905],"source":"       Calling this method is identical to calling <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> on the associated <xref:System.Windows.Threading.Dispatcher> object."}]}]},{"pos":[5145,5329],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the calling thread has access to this object; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the calling thread has access to this object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5810,5963],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> this <bpt id=\"p2\">&lt;xref href=\"System.Windows.Threading.DispatcherObject\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is associated with.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> this <xref href=\"System.Windows.Threading.DispatcherObject\"></xref> is associated with."},{"pos":[5975,6509],"content":"Only the thread that the Dispatcher was created on may access the <xref:System.Windows.Threading.DispatcherObject> directly.  To access a <xref:System.Windows.Threading.DispatcherObject> from a thread other than the thread the <xref:System.Windows.Threading.DispatcherObject> was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the <xref:System.Windows.Threading.DispatcherObject> is associated with.","needQuote":true,"needEscape":true,"nodes":[{"content":"Only the thread that the Dispatcher was created on may access the <xref:System.Windows.Threading.DispatcherObject> directly.  To access a <xref:System.Windows.Threading.DispatcherObject> from a thread other than the thread the <xref:System.Windows.Threading.DispatcherObject> was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the <xref:System.Windows.Threading.DispatcherObject> is associated with.","pos":[0,534],"nodes":[{"content":"Only the thread that the Dispatcher was created on may access the &lt;xref:System.Windows.Threading.DispatcherObject&gt; directly.","pos":[0,124],"source":"Only the thread that the Dispatcher was created on may access the <xref:System.Windows.Threading.DispatcherObject> directly."},{"content":"To access a &lt;xref:System.Windows.Threading.DispatcherObject&gt; from a thread other than the thread the &lt;xref:System.Windows.Threading.DispatcherObject&gt; was created on, call &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; on the &lt;xref:System.Windows.Threading.Dispatcher&gt; the &lt;xref:System.Windows.Threading.DispatcherObject&gt; is associated with.","pos":[126,534],"source":"  To access a <xref:System.Windows.Threading.DispatcherObject> from a thread other than the thread the <xref:System.Windows.Threading.DispatcherObject> was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the <xref:System.Windows.Threading.DispatcherObject> is associated with."}]}]},{"pos":[6675,6690],"content":"The dispatcher.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dispatcher.","pos":[0,15]}]},{"pos":[7184,7299],"content":"Enforces that the calling thread has access to this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.DispatcherObject\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Enforces that the calling thread has access to this <xref href=\"System.Windows.Threading.DispatcherObject\"></xref>."},{"pos":[7312,8044],"content":"Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.       Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.       The difference between <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> and VerifyAccess is that <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and VerifyAccess throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.       Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.       The difference between <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> and VerifyAccess is that <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and VerifyAccess throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>.","pos":[0,728],"nodes":[{"content":"Only the thread the &lt;xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A&gt; was created on may access the &lt;xref:System.Windows.Threading.DispatcherObject&gt;.","pos":[0,162],"source":"Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>."},{"content":"Any thread can check to see whether it has access to this &lt;xref:System.Windows.Threading.DispatcherObject&gt;.","pos":[169,276],"source":"       Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>."},{"content":"The difference between &lt;xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A&gt; and VerifyAccess is that &lt;xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A&gt; returns a Boolean that specifies whether the calling thread has access to this &lt;xref:System.Windows.Threading.DispatcherObject&gt; and VerifyAccess throws an exception if the calling thread does not have access to the this &lt;xref:System.Windows.Threading.DispatcherObject&gt;.","pos":[283,728],"source":"       The difference between <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> and VerifyAccess is that <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and VerifyAccess throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>."}]}]},{"pos":[8960,9071],"content":"the calling thread does not have access to this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.DispatcherObject\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"the calling thread does not have access to this <xref href=\"System.Windows.Threading.DispatcherObject\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Threading.DispatcherObject\n  id: DispatcherObject\n  children:\n  - System.Windows.Threading.DispatcherObject.#ctor\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  langs:\n  - csharp\n  name: DispatcherObject\n  nameWithType: DispatcherObject\n  fullName: System.Windows.Threading.DispatcherObject\n  type: Class\n  summary: Represents an object that is associated with a <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n  remarks: \"Only the thread that the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the DispatcherObject directly.  To access a DispatcherObject from a thread other than the thread the DispatcherObject was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the DispatcherObject is associated with.  \\n  \\n Subclasses of DispatcherObject that need to enforce thread safety can do so by calling <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> on all public methods.  This guarantees the calling thread is the thread that the DispatcherObject was created on.  \\n  \\n A DispatcherObject cannot be independently instantiated; that is, all constructors are protected.  \\n  \\n Objects that derive from DispatcherObject have thread affinity.  \\n  \\n Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.  For more information, see the [Freezable Objects Overview](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public abstract class DispatcherObject\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherObject.#ctor\n  id: '#ctor'\n  parent: System.Windows.Threading.DispatcherObject\n  langs:\n  - csharp\n  name: DispatcherObject()\n  nameWithType: DispatcherObject.DispatcherObject()\n  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Threading.DispatcherObject\"></xref> class.\n  syntax:\n    content: protected DispatcherObject ();\n    parameters: []\n  overload: System.Windows.Threading.DispatcherObject.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  id: CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  langs:\n  - csharp\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Determines whether the calling thread has access to this <xref href=\"System.Windows.Threading.DispatcherObject\"></xref>.\n  remarks: \"Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.  \\n  \\n Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.  \\n  \\n The difference between CheckAccess and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> is that CheckAccess returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>.  \\n  \\n Calling this method is identical to calling <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> on the associated <xref:System.Windows.Threading.Dispatcher> object.\"\n  example:\n  - \"The following example uses CheckAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  The CheckAccess method on the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  If the calling thread has access, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is posted onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.  \\n  \\n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]\\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]\"\n  syntax:\n    content: public bool CheckAccess ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the calling thread has access to this object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Threading.DispatcherObject.CheckAccess*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  id: Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  langs:\n  - csharp\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: System.Windows.Threading.DispatcherObject.Dispatcher\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> this <xref href=\"System.Windows.Threading.DispatcherObject\"></xref> is associated with.\n  remarks: Only the thread that the Dispatcher was created on may access the <xref:System.Windows.Threading.DispatcherObject> directly.  To access a <xref:System.Windows.Threading.DispatcherObject> from a thread other than the thread the <xref:System.Windows.Threading.DispatcherObject> was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the <xref:System.Windows.Threading.DispatcherObject> is associated with.\n  syntax:\n    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }\n    return:\n      type: System.Windows.Threading.Dispatcher\n      description: The dispatcher.\n  overload: System.Windows.Threading.DispatcherObject.Dispatcher*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  id: VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  langs:\n  - csharp\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Enforces that the calling thread has access to this <xref href=\"System.Windows.Threading.DispatcherObject\"></xref>.\n  remarks: \"Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.  \\n  \\n Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.  \\n  \\n The difference between <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> and VerifyAccess is that <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and VerifyAccess throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>.\"\n  example:\n  - \"The following example uses VerifyAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.  \\n  \\n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]\\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]\"\n  syntax:\n    content: public void VerifyAccess ();\n    parameters: []\n  overload: System.Windows.Threading.DispatcherObject.VerifyAccess*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: the calling thread does not have access to this <xref href=\"System.Windows.Threading.DispatcherObject\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Windows.Threading.DispatcherObject.#ctor\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: DispatcherObject()\n  nameWithType: DispatcherObject.DispatcherObject()\n  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: System.Windows.Threading.DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.Dispatcher\n  parent: System.Windows.Threading\n  isExternal: false\n  name: Dispatcher\n  nameWithType: Dispatcher\n  fullName: System.Windows.Threading.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()\n- uid: System.Windows.Threading.DispatcherObject.#ctor*\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: DispatcherObject\n  nameWithType: DispatcherObject.DispatcherObject\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess*\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess\n  nameWithType: DispatcherObject.CheckAccess\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher*\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess*\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess\n  nameWithType: DispatcherObject.VerifyAccess\n"}