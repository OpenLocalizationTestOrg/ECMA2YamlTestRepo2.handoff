{"nodes":[{"pos":[1063,1173],"content":"Defines a command that implements <xref:System.Windows.Input.ICommand> and is routed through the element tree.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines a command that implements &lt;xref:System.Windows.Input.ICommand&gt; and is routed through the element tree.","pos":[0,110],"source":"Defines a command that implements <xref:System.Windows.Input.ICommand> and is routed through the element tree."}]},{"pos":[3906,4002],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class."},{"pos":[4611,4746],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified name and owner type.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class with the specified name and owner type."},{"pos":[4898,4930],"content":"Declared name for serialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"Declared name for serialization.","pos":[0,32]}]},{"pos":[4994,5036],"content":"The type which is registering the command.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type which is registering the command.","pos":[0,42]}]},{"pos":[5207,5289],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5384,5471],"content":"<ph id=\"ph1\">&lt;code&gt;ownerType&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ownerType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6099,6259],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified name, owner type, and collection of gestures.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class with the specified name, owner type, and collection of gestures."},{"pos":[6470,6502],"content":"Declared name for serialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"Declared name for serialization.","pos":[0,32]}]},{"pos":[6566,6607],"content":"The type that is registering the command.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type that is registering the command.","pos":[0,41]}]},{"pos":[6707,6759],"content":"Default input gestures associated with this command.","needQuote":true,"needEscape":true,"nodes":[{"content":"Default input gestures associated with this command.","pos":[0,52]}]},{"pos":[6930,7012],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7793,7906],"content":"Determines whether this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can execute in its current state.","needQuote":true,"needEscape":true,"source":"Determines whether this <xref href=\"System.Windows.Input.RoutedCommand\"></xref> can execute in its current state."},{"pos":[7919,9261],"content":"The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the CanExecute methods, rather CanExecute raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.       The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.","needQuote":false,"needEscape":true,"nodes":[{"content":"The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the CanExecute methods, rather CanExecute raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.       The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.","pos":[0,1340],"nodes":[{"content":"The actual logic that determines if a &lt;xref:System.Windows.Input.RoutedCommand&gt; can execute on the current command target is not contained in the CanExecute methods, rather CanExecute raises the &lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt; and the &lt;xref:System.Windows.Input.CommandManager.CanExecute&gt; events which tunnel and bubble through element tree looking for a object with a &lt;xref:System.Windows.Input.CommandBinding&gt;.","pos":[0,441],"source":"The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the CanExecute methods, rather CanExecute raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>."},{"content":"If a &lt;xref:System.Windows.Input.CommandBinding&gt; for that &lt;xref:System.Windows.Input.RoutedCommand&gt; is found, then the &lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt; attached to &lt;xref:System.Windows.Input.CommandBinding&gt; is called.","pos":[443,683],"source":"  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called."},{"content":"These handlers supply the programming logic for determining if the &lt;xref:System.Windows.Input.RoutedCommand&gt; can execute or not.","pos":[685,813],"source":"  These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not."},{"content":"The &lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt; and &lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt; events are raised on the &lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;.","pos":[820,1033],"source":"       The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>."},{"content":"If the &lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt; is not set on the &lt;xref:System.Windows.Input.ICommandSource&gt;, the &lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt; and &lt;xref:System.Windows.Input.CommandManager.CanExecute&gt; events are raised on the element with keyboard focus.","pos":[1035,1340],"source":"  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus."}]}]},{"pos":[10884,10909],"content":"A user defined data type.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user defined data type.","pos":[0,25]}]},{"pos":[10987,11006],"content":"The command target.","needQuote":true,"needEscape":true,"nodes":[{"content":"The command target.","pos":[0,19]}]},{"pos":[11065,11258],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the command can execute on the current command target; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the command can execute on the current command target; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11442,11571],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not a <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.Windows.ContentElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>target</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>."},{"pos":[11977,12148],"content":"Occurs when changes to the command source are detected by the command manager. These changes often affect whether the command should execute on the current command target.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when changes to the command source are detected by the command manager. These changes often affect whether the command should execute on the current command target.","pos":[0,171],"nodes":[{"content":"Occurs when changes to the command source are detected by the command manager.","pos":[0,78]},{"content":"These changes often affect whether the command should execute on the current command target.","pos":[79,171]}]}]},{"pos":[12161,13647],"content":"The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>. The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.  When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the CanExecuteChanged event.  Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.  Most command sources will disable themselves if the command cannot be executed, as part of their command binding.  An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.       In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.  In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the CanExecuteChanged event.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>. The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.  When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the CanExecuteChanged event.  Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.  Most command sources will disable themselves if the command cannot be executed, as part of their command binding.  An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.       In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.  In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the CanExecuteChanged event.","pos":[0,1484],"nodes":[{"content":"The &lt;xref:System.Windows.Input.RoutedCommand&gt; listens for the &lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt; event, which is raised by the &lt;xref:System.Windows.Input.CommandManager&gt;.","pos":[0,195],"source":"The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>."},{"content":"The &lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt; event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.","pos":[196,395],"source":" The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus."},{"content":"When the command receives the &lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt; event, it raises the CanExecuteChanged event.","pos":[397,532],"source":"  When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the CanExecuteChanged event."},{"content":"Generally, the command source will listen for this event and query the &lt;xref:System.Windows.Input.RoutedCommand&gt; by way of the &lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt; method.","pos":[534,724],"source":"  Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method."},{"content":"Most command sources will disable themselves if the command cannot be executed, as part of their command binding.","pos":[726,839]},{"content":"An example of this is when a &lt;xref:System.Windows.Controls.MenuItem&gt; grays itself out when the command cannot be executed.","pos":[841,963],"source":"  An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed."},{"content":"In some situations, the &lt;xref:System.Windows.Input.CommandManager&gt; is unaware of a change in conditions that alters the ability of a command to execute.","pos":[970,1122],"source":"       In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute."},{"content":"In these cases, you can force the &lt;xref:System.Windows.Input.CommandManager&gt; to raises the &lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt; event by calling the &lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt; method, this will in turn cause the &lt;xref:System.Windows.Input.RoutedCommand&gt; to raise the CanExecuteChanged event.","pos":[1124,1484],"source":"  In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the CanExecuteChanged event."}]}]},{"pos":[15308,15320],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15848,15947],"content":"Executes the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on the current command target.","needQuote":true,"needEscape":true,"source":"Executes the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on the current command target."},{"pos":[15960,17204],"content":"The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the Execute methods.  Execute raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.       The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.","needQuote":false,"needEscape":true,"nodes":[{"content":"The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the Execute methods.  Execute raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.       The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.","pos":[0,1242],"nodes":[{"content":"The actual logic that executes the &lt;xref:System.Windows.Input.RoutedCommand&gt; is not contained in the Execute methods.","pos":[0,117],"source":"The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the Execute methods."},{"content":"Execute raises the &lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt; and &lt;xref:System.Windows.Input.CommandManager.Executed&gt; events, which tunnel and bubble through the element tree looking for an object with a &lt;xref:System.Windows.Input.CommandBinding&gt;.","pos":[119,382],"source":"  Execute raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>."},{"content":"If a &lt;xref:System.Windows.Input.CommandBinding&gt; for that &lt;xref:System.Windows.Input.RoutedCommand&gt; is found, then the &lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt; attached to &lt;xref:System.Windows.Input.CommandBinding&gt; is called.","pos":[384,622],"source":"  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called."},{"content":"These handlers supply the programming logic that performs the &lt;xref:System.Windows.Input.RoutedCommand&gt;.","pos":[624,728],"source":"  These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>."},{"content":"The &lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt; and &lt;xref:System.Windows.Input.CommandManager.Executed&gt; events are raised on the &lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;.","pos":[735,939],"source":"       The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>."},{"content":"If the &lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt; is not set on the &lt;xref:System.Windows.Input.ICommandSource&gt;, the &lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt; and &lt;xref:System.Windows.Input.CommandManager.Executed&gt; events are raised on the element with keyboard focus.","pos":[941,1242],"source":"  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus."}]}]},{"pos":[18548,18599],"content":"User defined parameter to be passed to the handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"User defined parameter to be passed to the handler.","pos":[0,51]}]},{"pos":[18677,18732],"content":"Element at which to begin looking for command handlers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Element at which to begin looking for command handlers.","pos":[0,55]}]},{"pos":[18913,19042],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not a <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.Windows.ContentElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>target</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>."},{"pos":[19431,19555],"content":"Gets the collection of <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.InputGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that are associated with this command.","needQuote":true,"needEscape":true,"source":"Gets the collection of <xref href=\"System.Windows.Input.InputGesture\"></xref> objects that are associated with this command."},{"pos":[20218,20237],"content":"The input gestures.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input gestures.","pos":[0,19]}]},{"pos":[20660,20689],"content":"Gets the name of the command.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the command.","pos":[0,29]}]},{"pos":[20701,20860],"content":"This property can be used when referencing a &lt;xref:System.Windows.Input.RoutedCommand&gt; in <ph id=\"ph1\">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph>.","needQuote":true,"needEscape":true,"source":"This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]."},{"pos":[20969,20993],"content":"The name of the command.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the command.","pos":[0,24]}]},{"pos":[21432,21482],"content":"Gets the type that is registered with the command.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the type that is registered with the command.","pos":[0,50]}]},{"pos":[21592,21622],"content":"The type of the command owner.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the command owner.","pos":[0,30]}]},{"pos":[22287,22375],"content":"For a description of this members, see <xref:System.Windows.Input.ICommand.CanExecute*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this members, see &lt;xref:System.Windows.Input.ICommand.CanExecute*&gt;.","pos":[0,88],"source":"For a description of this members, see <xref:System.Windows.Input.ICommand.CanExecute*>."}]},{"pos":[22387,22588],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.","pos":[0,201],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Windows.Input.RoutedCommand&gt; instance is cast to an &lt;xref:System.Windows.Input.ICommand&gt; interface.","pos":[60,201],"source":" It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface."}]}]},{"pos":[22738,22903],"content":"Data used by the command.  If the command does not require data to be passed, this object can be set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Data used by the command.","pos":[0,25]},{"content":"If the command does not require data to be passed, this object can be set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[27,165],"source":"  If the command does not require data to be passed, this object can be set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[22962,23130],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this command can be executed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this command can be executed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[23811,23896],"content":"For a description of this members, see <xref:System.Windows.Input.ICommand.Execute*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this members, see &lt;xref:System.Windows.Input.ICommand.Execute*&gt;.","pos":[0,85],"source":"For a description of this members, see <xref:System.Windows.Input.ICommand.Execute*>."}]},{"pos":[23908,24109],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.","pos":[0,201],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Windows.Input.RoutedCommand&gt; instance is cast to an &lt;xref:System.Windows.Input.ICommand&gt; interface.","pos":[60,201],"source":" It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface."}]}]},{"pos":[24343,24508],"content":"Data used by the command.  If the command does not require data to be passed, this object can be set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Data used by the command.","pos":[0,25]},{"content":"If the command does not require data to be passed, this object can be set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[27,165],"source":"  If the command does not require data to be passed, this object can be set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.RoutedCommand\n  id: RoutedCommand\n  children:\n  - System.Windows.Input.RoutedCommand.#ctor\n  - System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)\n  - System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)\n  - System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)\n  - System.Windows.Input.RoutedCommand.CanExecuteChanged\n  - System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)\n  - System.Windows.Input.RoutedCommand.InputGestures\n  - System.Windows.Input.RoutedCommand.Name\n  - System.Windows.Input.RoutedCommand.OwnerType\n  - System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)\n  - System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)\n  langs:\n  - csharp\n  name: RoutedCommand\n  nameWithType: RoutedCommand\n  fullName: System.Windows.Input.RoutedCommand\n  type: Class\n  summary: Defines a command that implements <xref:System.Windows.Input.ICommand> and is routed through the element tree.\n  remarks: \"The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a RoutedCommand do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.  \\n  \\n The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.  The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.  \\n  \\n<a name=\\\"xamlAttributeUsage_RoutedCommand\\\"></a>   \\n## XAML Attribute Usage  \\n \\\\<*object* *property*=\\\"*predefinedCommandName*\\\"/>  \\n  \\n \\\\- or -  \\n  \\n \\\\<*object* *property*=\\\"*predefinedClassName*.*predefinedCommandName*\\\"/>  \\n  \\n \\\\- or -  \\n  \\n \\\\<*object* *property*=\\\"{ *customClassName*.*customCommandName*}\\\"/>  \\n  \\n<a name=\\\"xamlValues_RoutedCommand\\\"></a>   \\n## XAML Values  \\n *predefinedClassName*  \\n One of the predefined command classes.  \\n  \\n *predefinedCommandName*  \\n One of the predefined commands.  \\n  \\n *customClassName*  \\n A custom class which contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md).  \\n  \\n *customCommandName*  \\n A custom command.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(\"System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null\")]\n\n      [System.Windows.Markup.ValueSerializer(\"System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null\")]\n\n      public class RoutedCommand : System.Windows.Input.ICommand\n  inheritance:\n  - System.Object\n  implements:\n  - System.Windows.Input.ICommand\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Input.RoutedCommand.#ctor\n  id: '#ctor'\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: RoutedCommand()\n  nameWithType: RoutedCommand.RoutedCommand()\n  fullName: System.Windows.Input.RoutedCommand.RoutedCommand()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class.\n  syntax:\n    content: public RoutedCommand ();\n    parameters: []\n  overload: System.Windows.Input.RoutedCommand.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)\n  id: '#ctor(System.String,System.Type)'\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: RoutedCommand(String,Type)\n  nameWithType: RoutedCommand.RoutedCommand(String,Type)\n  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class with the specified name and owner type.\n  syntax:\n    content: public RoutedCommand (string name, Type ownerType);\n    parameters:\n    - id: name\n      type: System.String\n      description: Declared name for serialization.\n    - id: ownerType\n      type: System.Type\n      description: The type which is registering the command.\n  overload: System.Windows.Input.RoutedCommand.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ownerType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)\n  id: '#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)'\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: RoutedCommand(String,Type,InputGestureCollection)\n  nameWithType: RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)\n  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class with the specified name, owner type, and collection of gestures.\n  syntax:\n    content: public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);\n    parameters:\n    - id: name\n      type: System.String\n      description: Declared name for serialization.\n    - id: ownerType\n      type: System.Type\n      description: The type that is registering the command.\n    - id: inputGestures\n      type: System.Windows.Input.InputGestureCollection\n      description: Default input gestures associated with this command.\n  overload: System.Windows.Input.RoutedCommand.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"the length of <code>name</code> is zero  \\n  \\n \\\\- or -  \\n  \\n <code>ownerType</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)\n  id: CanExecute(System.Object,System.Windows.IInputElement)\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: CanExecute(Object,IInputElement)\n  nameWithType: RoutedCommand.CanExecute(Object,IInputElement)\n  fullName: System.Windows.Input.RoutedCommand.CanExecute(Object,IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Determines whether this <xref href=\"System.Windows.Input.RoutedCommand\"></xref> can execute in its current state.\n  remarks: \"The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the CanExecute methods, rather CanExecute raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.  \\n  \\n The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.\"\n  example:\n  - \"The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.  \\n  \\n `this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If the command is a <xref:System.Windows.Input.RoutedCommand>, then the CanExecute method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \\n  \\n If the CanExecute method returns `true`, then the control is enabled; otherwise, the control is disable.  \\n  \\n [!code-cs[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandcanexecutechanged)]\\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandcanexecutechanged)]\"\n  syntax:\n    content: public bool CanExecute (object parameter, System.Windows.IInputElement target);\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: A user defined data type.\n    - id: target\n      type: System.Windows.IInputElement\n      description: The command target.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the command can execute on the current command target; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.RoutedCommand.CanExecute*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>target</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.RoutedCommand.CanExecuteChanged\n  id: CanExecuteChanged\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: CanExecuteChanged\n  nameWithType: RoutedCommand.CanExecuteChanged\n  fullName: System.Windows.Input.RoutedCommand.CanExecuteChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when changes to the command source are detected by the command manager. These changes often affect whether the command should execute on the current command target.\n  remarks: \"The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>. The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.  When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the CanExecuteChanged event.  Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.  Most command sources will disable themselves if the command cannot be executed, as part of their command binding.  An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.  \\n  \\n In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.  In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the CanExecuteChanged event.\"\n  example:\n  - \"The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.  \\n  \\n `this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \\n  \\n If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.  \\n  \\n [!code-cs[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandcanexecutechanged)]\\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandcanexecutechanged)]\"\n  syntax:\n    content: public event EventHandler CanExecuteChanged;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)\n  id: Execute(System.Object,System.Windows.IInputElement)\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: Execute(Object,IInputElement)\n  nameWithType: RoutedCommand.Execute(Object,IInputElement)\n  fullName: System.Windows.Input.RoutedCommand.Execute(Object,IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Executes the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on the current command target.\n  remarks: \"The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the Execute methods.  Execute raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.  \\n  \\n The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.\"\n  example:\n  - \"The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.  \\n  \\n `this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If it is a <xref:System.Windows.Input.RoutedCommand>, then the Execute method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \\n  \\n [!code-cs[ImplementICommandSource#ImplementICommandExecute](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandexecute)]\\n [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandexecute)]\"\n  syntax:\n    content: public void Execute (object parameter, System.Windows.IInputElement target);\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: User defined parameter to be passed to the handler.\n    - id: target\n      type: System.Windows.IInputElement\n      description: Element at which to begin looking for command handlers.\n  overload: System.Windows.Input.RoutedCommand.Execute*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>target</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.RoutedCommand.InputGestures\n  id: InputGestures\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: InputGestures\n  nameWithType: RoutedCommand.InputGestures\n  fullName: System.Windows.Input.RoutedCommand.InputGestures\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the collection of <xref href=\"System.Windows.Input.InputGesture\"></xref> objects that are associated with this command.\n  remarks: ''\n  example:\n  - \"The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.  \\n  \\n [!code-cs[commandlibrarysnippets#MouseBindingAddedCommand](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#mousebindingaddedcommand)]\\n [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#mousebindingaddedcommand)]\"\n  syntax:\n    content: public System.Windows.Input.InputGestureCollection InputGestures { get; }\n    return:\n      type: System.Windows.Input.InputGestureCollection\n      description: The input gestures.\n  overload: System.Windows.Input.RoutedCommand.InputGestures*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.RoutedCommand.Name\n  id: Name\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: Name\n  nameWithType: RoutedCommand.Name\n  fullName: System.Windows.Input.RoutedCommand.Name\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the name of the command.\n  remarks: This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)].\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: The name of the command.\n  overload: System.Windows.Input.RoutedCommand.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.RoutedCommand.OwnerType\n  id: OwnerType\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: OwnerType\n  nameWithType: RoutedCommand.OwnerType\n  fullName: System.Windows.Input.RoutedCommand.OwnerType\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the type that is registered with the command.\n  syntax:\n    content: public Type OwnerType { get; }\n    return:\n      type: System.Type\n      description: The type of the command owner.\n  overload: System.Windows.Input.RoutedCommand.OwnerType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)\n  id: System#Windows#Input#ICommand#CanExecute(System.Object)\n  isEii: true\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: System.Windows.Input.ICommand.CanExecute(Object)\n  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)\n  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: For a description of this members, see <xref:System.Windows.Input.ICommand.CanExecute*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.\n  syntax:\n    content: bool ICommand.CanExecute (object parameter);\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: Data used by the command.  If the command does not require data to be passed, this object can be set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this command can be executed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)\n  id: System#Windows#Input#ICommand#Execute(System.Object)\n  isEii: true\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: System.Windows.Input.ICommand.Execute(Object)\n  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute(Object)\n  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.Execute(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: For a description of this members, see <xref:System.Windows.Input.ICommand.Execute*>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.\n  example:\n  - \"See Also  \\n  \\n <xref:System.Windows.Input.RoutedCommand.Execute%2A>\"\n  syntax:\n    content: void ICommand.Execute (object parameter);\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: Data used by the command.  If the command does not require data to be passed, this object can be set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Windows.Input.RoutedCommand.#ctor\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: RoutedCommand()\n  nameWithType: RoutedCommand.RoutedCommand()\n  fullName: System.Windows.Input.RoutedCommand.RoutedCommand()\n- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: RoutedCommand(String,Type)\n  nameWithType: RoutedCommand.RoutedCommand(String,Type)\n  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: RoutedCommand(String,Type,InputGestureCollection)\n  nameWithType: RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)\n  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)\n- uid: System.Windows.Input.InputGestureCollection\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGestureCollection\n  nameWithType: InputGestureCollection\n  fullName: System.Windows.Input.InputGestureCollection\n- uid: System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: CanExecute(Object,IInputElement)\n  nameWithType: RoutedCommand.CanExecute(Object,IInputElement)\n  fullName: System.Windows.Input.RoutedCommand.CanExecute(Object,IInputElement)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.RoutedCommand.CanExecuteChanged\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: CanExecuteChanged\n  nameWithType: RoutedCommand.CanExecuteChanged\n  fullName: System.Windows.Input.RoutedCommand.CanExecuteChanged\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: Execute(Object,IInputElement)\n  nameWithType: RoutedCommand.Execute(Object,IInputElement)\n  fullName: System.Windows.Input.RoutedCommand.Execute(Object,IInputElement)\n- uid: System.Windows.Input.RoutedCommand.InputGestures\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: InputGestures\n  nameWithType: RoutedCommand.InputGestures\n  fullName: System.Windows.Input.RoutedCommand.InputGestures\n- uid: System.Windows.Input.RoutedCommand.Name\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: Name\n  nameWithType: RoutedCommand.Name\n  fullName: System.Windows.Input.RoutedCommand.Name\n- uid: System.Windows.Input.RoutedCommand.OwnerType\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: OwnerType\n  nameWithType: RoutedCommand.OwnerType\n  fullName: System.Windows.Input.RoutedCommand.OwnerType\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: System.Windows.Input.ICommand.CanExecute(Object)\n  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)\n  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: System.Windows.Input.ICommand.Execute(Object)\n  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute(Object)\n  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.Execute(Object)\n- uid: System.Windows.Input.RoutedCommand.#ctor*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: RoutedCommand\n  nameWithType: RoutedCommand.RoutedCommand\n- uid: System.Windows.Input.RoutedCommand.CanExecute*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: CanExecute\n  nameWithType: RoutedCommand.CanExecute\n- uid: System.Windows.Input.RoutedCommand.Execute*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: Execute\n  nameWithType: RoutedCommand.Execute\n- uid: System.Windows.Input.RoutedCommand.InputGestures*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: InputGestures\n  nameWithType: RoutedCommand.InputGestures\n- uid: System.Windows.Input.RoutedCommand.Name*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: Name\n  nameWithType: RoutedCommand.Name\n- uid: System.Windows.Input.RoutedCommand.OwnerType*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: OwnerType\n  nameWithType: RoutedCommand.OwnerType\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: System.Windows.Input.ICommand.CanExecute\n  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: System.Windows.Input.ICommand.Execute\n  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute\n"}