{"nodes":[{"pos":[1150,1276],"content":"Allows structured data to be stored, retrieved, and manipulated through a relational <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Allows structured data to be stored, retrieved, and manipulated through a relational <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[1289,2368],"content":"This class extends <xref:System.Xml.XmlDocument>. It enables you to load either relational data or XML data and manipulate that data using the World Wide Web Consortium (W3C) Document Object Model (DOM). The DOM presents data as a hierarchy of node objects. Because `XmlDataDocument` implements the <xref:System.Xml.XPath.IXPathNavigable> interface, it can also be used as the source document for the <xref:System.Xml.Xsl.XslTransform> class.       `XmlDataDocument` has a close affiliation with the `DataSet` class, which provides a relational view of the loaded XML data. Any changes made to the `XmlDataDocument` are reflected in the `DataSet` and vice versa.       To load a `DataSet` with XML data, use <xref:System.Data.DataSet.ReadXmlSchema%2A> to build a relational mapping. The XML data can then be loaded using <xref:System.Xml.XmlDataDocument.Load%2A> or <xref:System.Xml.XmlDocument.LoadXml%2A>.       To load relational data, specify the `DataSet` containing the relational data as the parameter in the <xref:System.Xml.XmlDataDocument.%23ctor%2A> constructor.","needQuote":false,"needEscape":true,"nodes":[{"content":"This class extends &lt;xref:System.Xml.XmlDocument&gt;.","pos":[0,49],"source":"This class extends <xref:System.Xml.XmlDocument>."},{"content":"It enables you to load either relational data or XML data and manipulate that data using the World Wide Web Consortium (W3C) Document Object Model (DOM).","pos":[50,203]},{"content":"The DOM presents data as a hierarchy of node objects.","pos":[204,257]},{"content":"Because <ph id=\"ph1\">`XmlDataDocument`</ph> implements the &lt;xref:System.Xml.XPath.IXPathNavigable&gt; interface, it can also be used as the source document for the &lt;xref:System.Xml.Xsl.XslTransform&gt; class.","pos":[258,442],"source":" Because `XmlDataDocument` implements the <xref:System.Xml.XPath.IXPathNavigable> interface, it can also be used as the source document for the <xref:System.Xml.Xsl.XslTransform> class."},{"content":"<ph id=\"ph1\">`XmlDataDocument`</ph> has a close affiliation with the <ph id=\"ph2\">`DataSet`</ph> class, which provides a relational view of the loaded XML data.","pos":[449,573],"source":"`XmlDataDocument` has a close affiliation with the `DataSet` class, which provides a relational view of the loaded XML data."},{"content":"Any changes made to the <ph id=\"ph1\">`XmlDataDocument`</ph> are reflected in the <ph id=\"ph2\">`DataSet`</ph> and vice versa.","pos":[574,662],"source":" Any changes made to the `XmlDataDocument` are reflected in the `DataSet` and vice versa."},{"content":"To load a <ph id=\"ph1\">`DataSet`</ph> with XML data, use &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; to build a relational mapping.","pos":[669,782],"source":"       To load a `DataSet` with XML data, use <xref:System.Data.DataSet.ReadXmlSchema%2A> to build a relational mapping."},{"content":"The XML data can then be loaded using &lt;xref:System.Xml.XmlDataDocument.Load%2A&gt; or &lt;xref:System.Xml.XmlDocument.LoadXml%2A&gt;.","pos":[783,907],"source":" The XML data can then be loaded using <xref:System.Xml.XmlDataDocument.Load%2A> or <xref:System.Xml.XmlDocument.LoadXml%2A>."},{"content":"To load relational data, specify the <ph id=\"ph1\">`DataSet`</ph> containing the relational data as the parameter in the &lt;xref:System.Xml.XmlDataDocument.%23ctor%2A&gt; constructor.","pos":[914,1073],"source":"       To load relational data, specify the `DataSet` containing the relational data as the parameter in the <xref:System.Xml.XmlDataDocument.%23ctor%2A> constructor."}]},{"pos":[7644,7732],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlDataDocument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Xml.XmlDataDocument\"></xref> class."},{"pos":[7744,7833],"content":"An empty &lt;xref:System.Data.DataSet&gt; is created and associated with the <ph id=\"ph1\">`XmlDataDocument`</ph>.","needQuote":true,"needEscape":true,"source":"An empty <xref:System.Data.DataSet> is created and associated with the `XmlDataDocument`."},{"pos":[8381,8529],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlDataDocument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Xml.XmlDataDocument\"></xref> class with the specified <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[8541,8878],"content":"The `XmlDataDocument` is synchronized with the specified `DataSet`. Any data in the `DataSet` is immediately available through the `XmlDataDocument`. Any changes in the `DataSet` are propagated in the `XmlDataDocument`. Any changes made in the `XmlDataDocument`, provided they match the `DataSet` schema, are propagated in the `DataSet`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`XmlDataDocument`</ph> is synchronized with the specified <ph id=\"ph2\">`DataSet`</ph>.","pos":[0,67],"source":"The `XmlDataDocument` is synchronized with the specified `DataSet`."},{"content":"Any data in the <ph id=\"ph1\">`DataSet`</ph> is immediately available through the <ph id=\"ph2\">`XmlDataDocument`</ph>.","pos":[68,149],"source":" Any data in the `DataSet` is immediately available through the `XmlDataDocument`."},{"content":"Any changes in the <ph id=\"ph1\">`DataSet`</ph> are propagated in the <ph id=\"ph2\">`XmlDataDocument`</ph>.","pos":[150,219],"source":" Any changes in the `DataSet` are propagated in the `XmlDataDocument`."},{"content":"Any changes made in the <ph id=\"ph1\">`XmlDataDocument`</ph>, provided they match the <ph id=\"ph2\">`DataSet`</ph> schema, are propagated in the <ph id=\"ph3\">`DataSet`</ph>.","pos":[220,337],"source":" Any changes made in the `XmlDataDocument`, provided they match the `DataSet` schema, are propagated in the `DataSet`."}]},{"pos":[9598,9765],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to load into <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> to load into <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref>."},{"pos":[10217,10257],"content":"Creates a duplicate of the current node.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a duplicate of the current node.","pos":[0,40]}]},{"pos":[10270,10716],"content":"Cloning the `XmlDataDocument` also clones the <xref:System.Data.DataSet> schema.       If `deep` is set to `false`, the cloned `DataSet` has no data; that is, no rows.       If `deep` is set to `true`, the cloned `DataSet` is set with the schema and then populated with the data.       See <xref:System.Xml.XmlNode.CloneNode%2A> in the `XmlNode` class to see a table describing how this method behaves with each of the different node types.","needQuote":false,"needEscape":true,"nodes":[{"content":"Cloning the <ph id=\"ph1\">`XmlDataDocument`</ph> also clones the &lt;xref:System.Data.DataSet&gt; schema.","pos":[0,80],"source":"Cloning the `XmlDataDocument` also clones the <xref:System.Data.DataSet> schema."},{"content":"If <ph id=\"ph1\">`deep`</ph> is set to <ph id=\"ph2\">`false`</ph>, the cloned <ph id=\"ph3\">`DataSet`</ph> has no data; that is, no rows.","pos":[87,167],"source":"       If `deep` is set to `false`, the cloned `DataSet` has no data; that is, no rows."},{"content":"If <ph id=\"ph1\">`deep`</ph> is set to <ph id=\"ph2\">`true`</ph>, the cloned <ph id=\"ph3\">`DataSet`</ph> is set with the schema and then populated with the data.","pos":[174,279],"source":"       If `deep` is set to `true`, the cloned `DataSet` is set with the schema and then populated with the data."},{"content":"See &lt;xref:System.Xml.XmlNode.CloneNode%2A&gt; in the <ph id=\"ph1\">`XmlNode`</ph> class to see a table describing how this method behaves with each of the different node types.","pos":[286,440],"source":"       See <xref:System.Xml.XmlNode.CloneNode%2A> in the `XmlNode` class to see a table describing how this method behaves with each of the different node types."}]},{"pos":[11465,11678],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to recursively clone the subtree under the specified node; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to clone only the node itself.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to recursively clone the subtree under the specified node; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clone only the node itself."},{"pos":[11741,11757],"content":"The cloned node.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cloned node.","pos":[0,16]}]},{"pos":[12326,12486],"content":"Creates an element with the specified &lt;xref:System.Xml.XmlNode.Prefix<bpt id=\"p1\">*</bpt>&gt;, &lt;xref:System.Xml.XmlDocument.LocalName<ept id=\"p1\">*</ept>&gt; , and &lt;xref:System.Xml.XmlNode.NamespaceURI*&gt;.","needQuote":true,"needEscape":true,"source":"Creates an element with the specified <xref:System.Xml.XmlNode.Prefix*>, <xref:System.Xml.XmlDocument.LocalName*> , and <xref:System.Xml.XmlNode.NamespaceURI*>."},{"pos":[12499,13126],"content":"`Note to Inheritors` If you overload this function, it cannot be used for extensibility. Instead, you can return an element created by the base class, in this case, `XmlDataDocument`. See the following example.      ```   class MyXmlDataDocument : XmlDataDocument {    public override XmlElement CreateElement(string prefix, string localName, string nsURI) {      //Ensure we are returning the base class implementation of element.      XmlElement e = base.CreateElement(prefix, localName, nsURI);      //Add additional code here.      return e;    //Return the element created by XmlDataDocument.    }       }   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`Note to Inheritors`</ph> If you overload this function, it cannot be used for extensibility.","pos":[0,88],"source":"`Note to Inheritors` If you overload this function, it cannot be used for extensibility."},{"content":"Instead, you can return an element created by the base class, in this case, <ph id=\"ph1\">`XmlDataDocument`</ph>.","pos":[89,183],"source":" Instead, you can return an element created by the base class, in this case, `XmlDataDocument`."},{"content":"See the following example.","pos":[184,210]}]},{"pos":[13337,13468],"content":"The prefix of the new element. If String.Empty or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, there is no prefix.","needQuote":true,"needEscape":true,"nodes":[{"content":"The prefix of the new element.","pos":[0,30]},{"content":"If String.Empty or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, there is no prefix.","pos":[31,131],"source":" If String.Empty or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, there is no prefix."}]},{"pos":[13534,13568],"content":"The local name of the new element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The local name of the new element.","pos":[0,34]}]},{"pos":[13637,13811],"content":"The namespace Uniform Resource Identifier (URI) of the new element. If String.Empty or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, there is no namespaceURI.","needQuote":true,"needEscape":true,"nodes":[{"content":"The namespace Uniform Resource Identifier (URI) of the new element.","pos":[0,67]},{"content":"If String.Empty or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, there is no namespaceURI.","pos":[68,174],"source":" If String.Empty or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, there is no namespaceURI."}]},{"pos":[13877,13926],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.Xml.XmlElement\"></xref>."},{"pos":[14441,14527],"content":"Creates an <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlEntityReference\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified name.","needQuote":true,"needEscape":true,"source":"Creates an <xref href=\"System.Xml.XmlEntityReference\"></xref> with the specified name."},{"pos":[14539,14687],"content":"<xref:System.Xml.XmlEntityReference> nodes cannot be created for <xref:System.Xml.XmlDataDocument> objects. Calling this method throws an exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"<xref:System.Xml.XmlEntityReference> nodes cannot be created for <xref:System.Xml.XmlDataDocument> objects. Calling this method throws an exception.","pos":[0,148],"nodes":[{"content":"&lt;xref:System.Xml.XmlEntityReference&gt; nodes cannot be created for &lt;xref:System.Xml.XmlDataDocument&gt; objects.","pos":[0,107],"source":"<xref:System.Xml.XmlEntityReference> nodes cannot be created for <xref:System.Xml.XmlDataDocument> objects."},{"content":"Calling this method throws an exception.","pos":[108,148]}]}]},{"pos":[14870,14903],"content":"The name of the entity reference.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the entity reference.","pos":[0,33]}]},{"pos":[14977,15055],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlEntityReference\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified name.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Xml.XmlEntityReference\"></xref> with the specified name."},{"pos":[15234,15254],"content":"Calling this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calling this method.","pos":[0,20]}]},{"pos":[15681,15941],"content":"Creates a new <xref href=\"System.Xml.XPath.XPathNavigator\"></xref> object for navigating this document. The <xref uid=\"langword_csharp_XPathNavigator\" name=\"XPathNavigator\" href=\"\"></xref> is positioned on the node specified in the <code>node</code> parameter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Xml.XPath.XPathNavigator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for navigating this document.","pos":[0,103],"source":"Creates a new <xref href=\"System.Xml.XPath.XPathNavigator\"></xref> object for navigating this document."},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XPathNavigator\" name=\"XPathNavigator\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is positioned on the node specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">node</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","pos":[104,260],"source":" The <xref uid=\"langword_csharp_XPathNavigator\" name=\"XPathNavigator\" href=\"\"></xref> is positioned on the node specified in the <code>node</code> parameter."}]},{"pos":[15953,16194],"content":"The `XPathNavigator` provides read-only, random access to data. Because it is optimized for XSLT transformations, it provides performance benefits when used as an input mechanism to the <xref:System.Xml.Xsl.XslTransform.Transform%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`XPathNavigator`</ph> provides read-only, random access to data.","pos":[0,63],"source":"The `XPathNavigator` provides read-only, random access to data."},{"content":"Because it is optimized for XSLT transformations, it provides performance benefits when used as an input mechanism to the &lt;xref:System.Xml.Xsl.XslTransform.Transform%2A&gt; method.","pos":[64,241],"source":" Because it is optimized for XSLT transformations, it provides performance benefits when used as an input mechanism to the <xref:System.Xml.Xsl.XslTransform.Transform%2A> method."}]},{"pos":[16576,16667],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlNode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> you want the navigator initially positioned on.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Xml.XmlNode\"></xref> you want the navigator initially positioned on."},{"pos":[16743,16857],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XPathNavigator\" name=\"XPathNavigator\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to navigate the document.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_XPathNavigator\" name=\"XPathNavigator\" href=\"\"></xref> used to navigate the document."},{"pos":[17252,17444],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides a relational representation of the data in the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Data.DataSet\"></xref> that provides a relational representation of the data in the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref>."},{"pos":[17456,17732],"content":"The `DataSet` enables you to access the data in the `XmlDataDocument` using a relational model. This means that you can handle the data as tables and views, rows and columns, relations, and so on. Changes made in the `DataSet` are immediately visible in the `XmlDataDocument`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`DataSet`</ph> enables you to access the data in the <ph id=\"ph2\">`XmlDataDocument`</ph> using a relational model.","pos":[0,95],"source":"The `DataSet` enables you to access the data in the `XmlDataDocument` using a relational model."},{"content":"This means that you can handle the data as tables and views, rows and columns, relations, and so on.","pos":[96,196]},{"content":"Changes made in the <ph id=\"ph1\">`DataSet`</ph> are immediately visible in the <ph id=\"ph2\">`XmlDataDocument`</ph>.","pos":[197,276],"source":" Changes made in the `DataSet` are immediately visible in the `XmlDataDocument`."}]},{"pos":[18680,18900],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that can be used to access the data in the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> using a relational model.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> that can be used to access the data in the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref> using a relational model."},{"pos":[19374,19580],"content":"Gets the <xref href=\"System.Xml.XmlElement\"></xref> with the specified ID. This method is not supported by the <xref href=\"System.Xml.XmlDataDocument\"></xref> class. Calling this method throws an exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified ID.","pos":[0,74],"source":"Gets the <xref href=\"System.Xml.XmlElement\"></xref> with the specified ID."},{"content":"This method is not supported by the <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlDataDocument\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","pos":[75,165],"source":" This method is not supported by the <xref href=\"System.Xml.XmlDataDocument\"></xref> class."},{"content":"Calling this method throws an exception.","pos":[166,206]}]},{"pos":[19592,19668],"content":"This method is not supported by the <xref:System.Xml.XmlDataDocument> class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not supported by the &lt;xref:System.Xml.XmlDataDocument&gt; class.","pos":[0,76],"source":"This method is not supported by the <xref:System.Xml.XmlDataDocument> class."}]},{"pos":[19840,19866],"content":"The attribute ID to match.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attribute ID to match.","pos":[0,26]}]},{"pos":[19932,20000],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified ID.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Xml.XmlElement\"></xref> with the specified ID."},{"pos":[20172,20192],"content":"Calling this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calling this method.","pos":[0,20]}]},{"pos":[20631,20759],"content":"Retrieves the <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Retrieves the <xref href=\"System.Xml.XmlElement\"></xref> associated with the specified <xref href=\"System.Data.DataRow\"></xref>."},{"pos":[21575,21757],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whose associated <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> you want to retrieve.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref> whose associated <xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"></xref> you want to retrieve."},{"pos":[21823,22012],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing a representation of the specified <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"></xref> containing a representation of the specified <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref>."},{"pos":[22526,22687],"content":"Returns an <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlNodeList\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing a list of all descendant elements that match the specified &lt;xref:System.Xml.XmlDocument.Name*&gt;.","needQuote":true,"needEscape":true,"source":"Returns an <xref href=\"System.Xml.XmlNodeList\"></xref> containing a list of all descendant elements that match the specified <xref:System.Xml.XmlDocument.Name*>."},{"pos":[23124,23285],"content":"The qualified name to match. It is matched against the <xref:System.Xml.XmlDocument.Name*> property of the matching node. The special value \"*\" matches all tags.","needQuote":true,"needEscape":true,"nodes":[{"content":"The qualified name to match.","pos":[0,28]},{"content":"It is matched against the &lt;xref:System.Xml.XmlDocument.Name<bpt id=\"p1\">*</bpt>&gt; property of the matching node. The special value \"<ept id=\"p1\">*</ept>\" matches all tags.","pos":[29,161],"source":" It is matched against the <xref:System.Xml.XmlDocument.Name*> property of the matching node. The special value \"*\" matches all tags."}]},{"pos":[23352,23439],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Xml.XmlNodeList\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing a list of all matching nodes.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Xml.XmlNodeList\"></xref> containing a list of all matching nodes."},{"pos":[23969,24097],"content":"Retrieves the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with the specified <bpt id=\"p2\">&lt;xref href=\"System.Xml.XmlElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Retrieves the <xref href=\"System.Data.DataRow\"></xref> associated with the specified <xref href=\"System.Xml.XmlElement\"></xref>."},{"pos":[25046,25228],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whose associated <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> you want to retrieve.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"></xref> whose associated <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref> you want to retrieve."},{"pos":[25292,25708],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing a representation of the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> if there is no <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> associated with the <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref> containing a representation of the <xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"></xref>; <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there is no <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref> associated with the <xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"></xref>."},{"pos":[26148,26267],"content":"Loads the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified stream.","needQuote":true,"needEscape":true,"source":"Loads the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref> from the specified stream."},{"pos":[26280,26771],"content":"`XmlDataDocument` does not support creating entity references. If the data includes entity references, the `Load` method resolves and expands any entity references.      > [!NOTE] >  In order to view the XML data relationally, you must first specify a schema to use for data mapping. This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually. This step must be done before calling `Load`.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`XmlDataDocument`</ph> does not support creating entity references.","pos":[0,62],"source":"`XmlDataDocument` does not support creating entity references."},{"content":"If the data includes entity references, the <ph id=\"ph1\">`Load`</ph> method resolves and expands any entity references.","pos":[63,164],"source":" If the data includes entity references, the `Load` method resolves and expands any entity references."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In order to view the XML data relationally, you must first specify a schema to use for data mapping.","pos":[170,283],"source":"      > [!NOTE] >  In order to view the XML data relationally, you must first specify a schema to use for data mapping."},{"content":"This can be done either by calling the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method or by creating the tables and columns within the <ph id=\"ph1\">`DataSet`</ph> manually.","pos":[284,442],"source":" This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually."},{"content":"This step must be done before calling <ph id=\"ph1\">`Load`</ph>.","pos":[443,488],"source":" This step must be done before calling `Load`."}]},{"pos":[26934,26981],"content":"The stream containing the XML document to load.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream containing the XML document to load.","pos":[0,47]}]},{"pos":[27428,27568],"content":"Loads the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified &lt;xref:System.IO.TextReader&gt;.","needQuote":true,"needEscape":true,"source":"Loads the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref> from the specified <xref:System.IO.TextReader>."},{"pos":[27581,28072],"content":"`XmlDataDocument` does not support creating entity references. If the data includes entity references, the `Load` method resolves and expands any entity references.      > [!NOTE] >  In order to view the XML data relationally, you must first specify a schema to use for data mapping. This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually. This step must be done before calling `Load`.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`XmlDataDocument`</ph> does not support creating entity references.","pos":[0,62],"source":"`XmlDataDocument` does not support creating entity references."},{"content":"If the data includes entity references, the <ph id=\"ph1\">`Load`</ph> method resolves and expands any entity references.","pos":[63,164],"source":" If the data includes entity references, the `Load` method resolves and expands any entity references."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In order to view the XML data relationally, you must first specify a schema to use for data mapping.","pos":[170,283],"source":"      > [!NOTE] >  In order to view the XML data relationally, you must first specify a schema to use for data mapping."},{"content":"This can be done either by calling the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method or by creating the tables and columns within the <ph id=\"ph1\">`DataSet`</ph> manually.","pos":[284,442],"source":" This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually."},{"content":"This step must be done before calling <ph id=\"ph1\">`Load`</ph>.","pos":[443,488],"source":" This step must be done before calling `Load`."}]},{"pos":[28245,28366],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TextReader\" name=\"TextReader\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to feed the XML data into the document.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_TextReader\" name=\"TextReader\" href=\"\"></xref> used to feed the XML data into the document."},{"pos":[28787,28904],"content":"Loads the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified URL.","needQuote":true,"needEscape":true,"source":"Loads the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref> using the specified URL."},{"pos":[28917,29408],"content":"`XmlDataDocument` does not support creating entity references. If the data includes entity references, the `Load` method resolves and expands any entity references.      > [!NOTE] >  In order to view the XML data relationally, you must first specify a schema to use for data mapping. This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually. This step must be done before calling `Load`.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`XmlDataDocument`</ph> does not support creating entity references.","pos":[0,62],"source":"`XmlDataDocument` does not support creating entity references."},{"content":"If the data includes entity references, the <ph id=\"ph1\">`Load`</ph> method resolves and expands any entity references.","pos":[63,164],"source":" If the data includes entity references, the `Load` method resolves and expands any entity references."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In order to view the XML data relationally, you must first specify a schema to use for data mapping.","pos":[170,283],"source":"      > [!NOTE] >  In order to view the XML data relationally, you must first specify a schema to use for data mapping."},{"content":"This can be done either by calling the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method or by creating the tables and columns within the <ph id=\"ph1\">`DataSet`</ph> manually.","pos":[284,442],"source":" This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually."},{"content":"This step must be done before calling <ph id=\"ph1\">`Load`</ph>.","pos":[443,488],"source":" This step must be done before calling `Load`."}]},{"pos":[29558,29614],"content":"The URL of the file containing the XML document to load.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL of the file containing the XML document to load.","pos":[0,56]}]},{"pos":[30058,30198],"content":"Loads the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified &lt;xref:System.Xml.XmlReader&gt;.","needQuote":true,"needEscape":true,"source":"Loads the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref> from the specified <xref:System.Xml.XmlReader>."},{"pos":[30211,32259],"content":"`XmlDataDocument` does not support creating entity references. If the data source contains entity references, you must create an <xref:System.Xml.XmlValidatingReader> with the <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> property set to EntityHandling.ExpandEntities (this is the default behavior) and pass the `XmlValidatingReader` to the `Load` method. If you do not use an `XmlValidatingReader`, the `Load` method throws an exception.       The `Load` method always preserves significant white space. The <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> property determines whether or not white space is preserved. The default is `false`, white space is not preserved.       If the reader is in the initial state (that is, ReadState=ReadState.Initial), `Load` consumes the entire contents of the reader and builds the DOM from what it finds.       If the reader is already positioned on some node at depth \"n\", then this method loads that node and all subsequent siblings up to the end tag that closes depth \"n\". This has the following results.       If the current node and its following siblings look similar to the following:      ```   <!--comment--><element1>one</element1><element2>two</element2>   ```       `Load` throws an exception, because a document cannot have two root-level elements. If the current node and its following siblings look similar to the following:      ```   <!--comment--><?process       instruction?><!--comment--></endtag>   ```       `Load` will succeed; however, you will have an incomplete DOM tree, because there is no root-level element. You have to add a root-level element before you save the document; otherwise, the <xref:System.Xml.XmlDocument.Save%2A> method throws an exception.       If the reader is positioned on a leaf node that is invalid for the root level of a document (for example, a white space or attribute node), the reader continues to read until it is positioned on a node that can be used for the root. The document begins loading at this point.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">`XmlDataDocument`</ph> does not support creating entity references.","pos":[0,62],"source":"`XmlDataDocument` does not support creating entity references."},{"content":"If the data source contains entity references, you must create an &lt;xref:System.Xml.XmlValidatingReader&gt; with the &lt;xref:System.Xml.XmlValidatingReader.EntityHandling%2A&gt; property set to EntityHandling.ExpandEntities (this is the default behavior) and pass the <ph id=\"ph1\">`XmlValidatingReader`</ph> to the <ph id=\"ph2\">`Load`</ph> method.","pos":[63,365],"source":" If the data source contains entity references, you must create an <xref:System.Xml.XmlValidatingReader> with the <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> property set to EntityHandling.ExpandEntities (this is the default behavior) and pass the `XmlValidatingReader` to the `Load` method."},{"content":"If you do not use an <ph id=\"ph1\">`XmlValidatingReader`</ph>, the <ph id=\"ph2\">`Load`</ph> method throws an exception.","pos":[366,448],"source":" If you do not use an `XmlValidatingReader`, the `Load` method throws an exception."},{"content":"The <ph id=\"ph1\">`Load`</ph> method always preserves significant white space.","pos":[455,514],"source":"       The `Load` method always preserves significant white space."},{"content":"The &lt;xref:System.Xml.XmlDocument.PreserveWhitespace%2A&gt; property determines whether or not white space is preserved.","pos":[515,631],"source":" The <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> property determines whether or not white space is preserved."},{"content":"The default is <ph id=\"ph1\">`false`</ph>, white space is not preserved.","pos":[632,685],"source":" The default is `false`, white space is not preserved."},{"content":"If the reader is in the initial state (that is, ReadState=ReadState.Initial), <ph id=\"ph1\">`Load`</ph> consumes the entire contents of the reader and builds the DOM from what it finds.","pos":[692,858],"source":"       If the reader is in the initial state (that is, ReadState=ReadState.Initial), `Load` consumes the entire contents of the reader and builds the DOM from what it finds."},{"content":"If the reader is already positioned on some node at depth \"n\", then this method loads that node and all subsequent siblings up to the end tag that closes depth \"n\".","pos":[865,1029]},{"content":"This has the following results.","pos":[1030,1061]},{"content":"If the current node and its following siblings look similar to the following:      <ph id=\"ph1\">```   &lt;!--comment--&gt;&lt;element1&gt;one&lt;/element1&gt;&lt;element2&gt;two&lt;/element2&gt;   ```</ph>       <ph id=\"ph2\">`Load`</ph> throws an exception, because a document cannot have two root-level elements.","pos":[1068,1315],"source":"       If the current node and its following siblings look similar to the following:      ```   <!--comment--><element1>one</element1><element2>two</element2>   ```       `Load` throws an exception, because a document cannot have two root-level elements."},{"content":"If the current node and its following siblings look similar to the following:      <ph id=\"ph1\">```   &lt;!--comment--&gt;&lt;?process       instruction?&gt;&lt;!--comment--&gt;&lt;/endtag&gt;   ```</ph>       <ph id=\"ph2\">`Load`</ph> will succeed; however, you will have an incomplete DOM tree, because there is no root-level element.","pos":[1316,1591],"source":" If the current node and its following siblings look similar to the following:      ```   <!--comment--><?process       instruction?><!--comment--></endtag>   ```       `Load` will succeed; however, you will have an incomplete DOM tree, because there is no root-level element."},{"content":"You have to add a root-level element before you save the document; otherwise, the &lt;xref:System.Xml.XmlDocument.Save%2A&gt; method throws an exception.","pos":[1592,1739],"source":" You have to add a root-level element before you save the document; otherwise, the <xref:System.Xml.XmlDocument.Save%2A> method throws an exception."},{"content":"If the reader is positioned on a leaf node that is invalid for the root level of a document (for example, a white space or attribute node), the reader continues to read until it is positioned on a node that can be used for the root.","pos":[1746,1978]},{"content":"The document begins loading at this point.","pos":[1979,2021]}]},{"pos":[33115,33226],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlReader\" name=\"XmlReader\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the XML document to load.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_XmlReader\" name=\"XmlReader\" href=\"\"></xref> containing the XML document to load."},{"pos":[33388,33476],"content":"The XML being loaded contains entity references, and the reader cannot resolve entities.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML being loaded contains entity references, and the reader cannot resolve entities.","pos":[0,88]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.XmlDataDocument\n  id: XmlDataDocument\n  children:\n  - System.Xml.XmlDataDocument.#ctor\n  - System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)\n  - System.Xml.XmlDataDocument.CloneNode(System.Boolean)\n  - System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)\n  - System.Xml.XmlDataDocument.CreateEntityReference(System.String)\n  - System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)\n  - System.Xml.XmlDataDocument.DataSet\n  - System.Xml.XmlDataDocument.GetElementById(System.String)\n  - System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)\n  - System.Xml.XmlDataDocument.GetElementsByTagName(System.String)\n  - System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)\n  - System.Xml.XmlDataDocument.Load(System.IO.Stream)\n  - System.Xml.XmlDataDocument.Load(System.IO.TextReader)\n  - System.Xml.XmlDataDocument.Load(System.String)\n  - System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)\n  langs:\n  - csharp\n  name: XmlDataDocument\n  nameWithType: XmlDataDocument\n  fullName: System.Xml.XmlDataDocument\n  type: Class\n  summary: Allows structured data to be stored, retrieved, and manipulated through a relational <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"This class extends <xref:System.Xml.XmlDocument>. It enables you to load either relational data or XML data and manipulate that data using the World Wide Web Consortium (W3C) Document Object Model (DOM). The DOM presents data as a hierarchy of node objects. Because `XmlDataDocument` implements the <xref:System.Xml.XPath.IXPathNavigable> interface, it can also be used as the source document for the <xref:System.Xml.Xsl.XslTransform> class.  \\n  \\n `XmlDataDocument` has a close affiliation with the `DataSet` class, which provides a relational view of the loaded XML data. Any changes made to the `XmlDataDocument` are reflected in the `DataSet` and vice versa.  \\n  \\n To load a `DataSet` with XML data, use <xref:System.Data.DataSet.ReadXmlSchema%2A> to build a relational mapping. The XML data can then be loaded using <xref:System.Xml.XmlDataDocument.Load%2A> or <xref:System.Xml.XmlDocument.LoadXml%2A>.  \\n  \\n To load relational data, specify the `DataSet` containing the relational data as the parameter in the <xref:System.Xml.XmlDataDocument.%23ctor%2A> constructor.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"XmlDataDocument class will be removed in a future release.\")]\n\n      public class XmlDataDocument : System.Xml.XmlDocument\n  inheritance:\n  - System.Object\n  - System.Xml.XmlNode\n  - System.Xml.XmlDocument\n  implements: []\n  inheritedMembers:\n  - System.Xml.XmlDocument.BaseURI\n  - System.Xml.XmlDocument.CreateAttribute(System.String)\n  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)\n  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)\n  - System.Xml.XmlDocument.CreateCDataSection(System.String)\n  - System.Xml.XmlDocument.CreateComment(System.String)\n  - System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)\n  - System.Xml.XmlDocument.CreateDocumentFragment\n  - System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)\n  - System.Xml.XmlDocument.CreateElement(System.String)\n  - System.Xml.XmlDocument.CreateElement(System.String,System.String)\n  - System.Xml.XmlDocument.CreateNavigator\n  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)\n  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)\n  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)\n  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)\n  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)\n  - System.Xml.XmlDocument.CreateTextNode(System.String)\n  - System.Xml.XmlDocument.CreateWhitespace(System.String)\n  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)\n  - System.Xml.XmlDocument.DocumentElement\n  - System.Xml.XmlDocument.DocumentType\n  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)\n  - System.Xml.XmlDocument.Implementation\n  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n  - System.Xml.XmlDocument.InnerText\n  - System.Xml.XmlDocument.InnerXml\n  - System.Xml.XmlDocument.IsReadOnly\n  - System.Xml.XmlDocument.LoadXml(System.String)\n  - System.Xml.XmlDocument.LocalName\n  - System.Xml.XmlDocument.Name\n  - System.Xml.XmlDocument.NameTable\n  - System.Xml.XmlDocument.NodeChanged\n  - System.Xml.XmlDocument.NodeChanging\n  - System.Xml.XmlDocument.NodeInserted\n  - System.Xml.XmlDocument.NodeInserting\n  - System.Xml.XmlDocument.NodeRemoved\n  - System.Xml.XmlDocument.NodeRemoving\n  - System.Xml.XmlDocument.NodeType\n  - System.Xml.XmlDocument.OwnerDocument\n  - System.Xml.XmlDocument.ParentNode\n  - System.Xml.XmlDocument.PreserveWhitespace\n  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)\n  - System.Xml.XmlDocument.Save(System.IO.Stream)\n  - System.Xml.XmlDocument.Save(System.IO.TextWriter)\n  - System.Xml.XmlDocument.Save(System.String)\n  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)\n  - System.Xml.XmlDocument.SchemaInfo\n  - System.Xml.XmlDocument.Schemas\n  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)\n  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)\n  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)\n  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)\n  - System.Xml.XmlDocument.XmlResolver\n  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.Attributes\n  - System.Xml.XmlNode.ChildNodes\n  - System.Xml.XmlNode.Clone\n  - System.Xml.XmlNode.FirstChild\n  - System.Xml.XmlNode.GetEnumerator\n  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  - System.Xml.XmlNode.HasChildNodes\n  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.Item(System.String)\n  - System.Xml.XmlNode.Item(System.String,System.String)\n  - System.Xml.XmlNode.LastChild\n  - System.Xml.XmlNode.NamespaceURI\n  - System.Xml.XmlNode.NextSibling\n  - System.Xml.XmlNode.Normalize\n  - System.Xml.XmlNode.OuterXml\n  - System.Xml.XmlNode.Prefix\n  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.PreviousSibling\n  - System.Xml.XmlNode.PreviousText\n  - System.Xml.XmlNode.RemoveAll\n  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.SelectNodes(System.String)\n  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)\n  - System.Xml.XmlNode.SelectSingleNode(System.String)\n  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)\n  - System.Xml.XmlNode.Supports(System.String,System.String)\n  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  - System.Xml.XmlNode.System#ICloneable#Clone\n  - System.Xml.XmlNode.Value\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.#ctor\n  id: '#ctor'\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: XmlDataDocument()\n  nameWithType: XmlDataDocument.XmlDataDocument()\n  fullName: System.Xml.XmlDataDocument.XmlDataDocument()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Initializes a new instance of the <xref href=\"System.Xml.XmlDataDocument\"></xref> class.\n  remarks: An empty <xref:System.Data.DataSet> is created and associated with the `XmlDataDocument`.\n  syntax:\n    content: public XmlDataDocument ();\n    parameters: []\n  overload: System.Xml.XmlDataDocument.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)\n  id: '#ctor(System.Data.DataSet)'\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: XmlDataDocument(DataSet)\n  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)\n  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Initializes a new instance of the <xref href=\"System.Xml.XmlDataDocument\"></xref> class with the specified <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: The `XmlDataDocument` is synchronized with the specified `DataSet`. Any data in the `DataSet` is immediately available through the `XmlDataDocument`. Any changes in the `DataSet` are propagated in the `XmlDataDocument`. Any changes made in the `XmlDataDocument`, provided they match the `DataSet` schema, are propagated in the `DataSet`.\n  example:\n  - \"The following example loads a customer table into an `XmlDataDocument`.  \\n  \\n The example uses the SQL Server 2000 Northwind database.  \\n  \\n [!code-cpp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_0_1.cpp)]\\n [!code-cs[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_0_1.cs)]\\n [!code-vb[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_0_1.vb)]\"\n  syntax:\n    content: public XmlDataDocument (System.Data.DataSet dataset);\n    parameters:\n    - id: dataset\n      type: System.Data.DataSet\n      description: The <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> to load into <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref>.\n  overload: System.Xml.XmlDataDocument.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)\n  id: CloneNode(System.Boolean)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: CloneNode(Boolean)\n  nameWithType: XmlDataDocument.CloneNode(Boolean)\n  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Creates a duplicate of the current node.\n  remarks: \"Cloning the `XmlDataDocument` also clones the <xref:System.Data.DataSet> schema.  \\n  \\n If `deep` is set to `false`, the cloned `DataSet` has no data; that is, no rows.  \\n  \\n If `deep` is set to `true`, the cloned `DataSet` is set with the schema and then populated with the data.  \\n  \\n See <xref:System.Xml.XmlNode.CloneNode%2A> in the `XmlNode` class to see a table describing how this method behaves with each of the different node types.\"\n  example:\n  - \"The following example loads a `DataSet` into an `XmlDataDocument` and then creates a shallow clone of the `XmlDataDocument`.  \\n  \\n The example uses the SQL Server 2000 Northwind database.  \\n  \\n [!code-cpp[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_4_1.cpp)]\\n [!code-vb[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_4_1.vb)]\\n [!code-cs[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_4_1.cs)]\"\n  syntax:\n    content: public override System.Xml.XmlNode CloneNode (bool deep);\n    parameters:\n    - id: deep\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to recursively clone the subtree under the specified node; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clone only the node itself.\n    return:\n      type: System.Xml.XmlNode\n      description: The cloned node.\n  overload: System.Xml.XmlDataDocument.CloneNode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)\n  id: CreateElement(System.String,System.String,System.String)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: CreateElement(String,String,String)\n  nameWithType: XmlDataDocument.CreateElement(String,String,String)\n  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Creates an element with the specified <xref:System.Xml.XmlNode.Prefix*>, <xref:System.Xml.XmlDocument.LocalName*> , and <xref:System.Xml.XmlNode.NamespaceURI*>.\n  remarks: \"`Note to Inheritors` If you overload this function, it cannot be used for extensibility. Instead, you can return an element created by the base class, in this case, `XmlDataDocument`. See the following example.  \\n  \\n```  \\nclass MyXmlDataDocument : XmlDataDocument {  \\n public override XmlElement CreateElement(string prefix, string localName, string nsURI) {  \\n   //Ensure we are returning the base class implementation of element.  \\n   XmlElement e = base.CreateElement(prefix, localName, nsURI);  \\n   //Add additional code here.  \\n   return e;    //Return the element created by XmlDataDocument.  \\n }      \\n}  \\n```\"\n  syntax:\n    content: public override System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);\n    parameters:\n    - id: prefix\n      type: System.String\n      description: The prefix of the new element. If String.Empty or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, there is no prefix.\n    - id: localName\n      type: System.String\n      description: The local name of the new element.\n    - id: namespaceURI\n      type: System.String\n      description: The namespace Uniform Resource Identifier (URI) of the new element. If String.Empty or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, there is no namespaceURI.\n    return:\n      type: System.Xml.XmlElement\n      description: A new <xref href=\"System.Xml.XmlElement\"></xref>.\n  overload: System.Xml.XmlDataDocument.CreateElement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)\n  id: CreateEntityReference(System.String)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: CreateEntityReference(String)\n  nameWithType: XmlDataDocument.CreateEntityReference(String)\n  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Creates an <xref href=\"System.Xml.XmlEntityReference\"></xref> with the specified name.\n  remarks: <xref:System.Xml.XmlEntityReference> nodes cannot be created for <xref:System.Xml.XmlDataDocument> objects. Calling this method throws an exception.\n  syntax:\n    content: public override System.Xml.XmlEntityReference CreateEntityReference (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the entity reference.\n    return:\n      type: System.Xml.XmlEntityReference\n      description: An <xref href=\"System.Xml.XmlEntityReference\"></xref> with the specified name.\n  overload: System.Xml.XmlDataDocument.CreateEntityReference*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Calling this method.\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)\n  id: CreateNavigator(System.Xml.XmlNode)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: CreateNavigator(XmlNode)\n  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)\n  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Creates a new <xref href=\"System.Xml.XPath.XPathNavigator\"></xref> object for navigating this document. The <xref uid=\"langword_csharp_XPathNavigator\" name=\"XPathNavigator\" href=\"\"></xref> is positioned on the node specified in the <code>node</code> parameter.\n  remarks: The `XPathNavigator` provides read-only, random access to data. Because it is optimized for XSLT transformations, it provides performance benefits when used as an input mechanism to the <xref:System.Xml.Xsl.XslTransform.Transform%2A> method.\n  example:\n  - To see an XSLT transformation using `XmlDataDocument` and an `XPathNavigator`, see the <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=fullName> method.\n  syntax:\n    content: protected override System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);\n    parameters:\n    - id: node\n      type: System.Xml.XmlNode\n      description: The <xref href=\"System.Xml.XmlNode\"></xref> you want the navigator initially positioned on.\n    return:\n      type: System.Xml.XPath.XPathNavigator\n      description: An <xref uid=\"langword_csharp_XPathNavigator\" name=\"XPathNavigator\" href=\"\"></xref> used to navigate the document.\n  overload: System.Xml.XmlDataDocument.CreateNavigator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.DataSet\n  id: DataSet\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: DataSet\n  nameWithType: XmlDataDocument.DataSet\n  fullName: System.Xml.XmlDataDocument.DataSet\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Gets a <xref href=\"System.Data.DataSet\"></xref> that provides a relational representation of the data in the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref>.\n  remarks: The `DataSet` enables you to access the data in the `XmlDataDocument` using a relational model. This means that you can handle the data as tables and views, rows and columns, relations, and so on. Changes made in the `DataSet` are immediately visible in the `XmlDataDocument`.\n  example:\n  - \"The following example modifies the price of a book using the `DataSet` methods.  \\n  \\n [!code-cpp[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/cpp/p-system.xml.xmldatadocu_1.cpp)]\\n [!code-cs[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/csharp/p-system.xml.xmldatadocu_1.cs)]\\n [!code-vb[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldatadocu_1.vb)]  \\n  \\n The example uses the following two files as input.  \\n  \\n `2books.xml`  \\n  \\n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/p-system.xml.xmldatadocu_2.xml)]  \\n  \\n `store.xsd`  \\n  \\n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/p-system.xml.xmldatadocu_3.xml)]\"\n  syntax:\n    content: public System.Data.DataSet DataSet { get; }\n    return:\n      type: System.Data.DataSet\n      description: A <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> that can be used to access the data in the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref> using a relational model.\n  overload: System.Xml.XmlDataDocument.DataSet*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.GetElementById(System.String)\n  id: GetElementById(System.String)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: GetElementById(String)\n  nameWithType: XmlDataDocument.GetElementById(String)\n  fullName: System.Xml.XmlDataDocument.GetElementById(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Gets the <xref href=\"System.Xml.XmlElement\"></xref> with the specified ID. This method is not supported by the <xref href=\"System.Xml.XmlDataDocument\"></xref> class. Calling this method throws an exception.\n  remarks: This method is not supported by the <xref:System.Xml.XmlDataDocument> class.\n  syntax:\n    content: public override System.Xml.XmlElement GetElementById (string elemId);\n    parameters:\n    - id: elemId\n      type: System.String\n      description: The attribute ID to match.\n    return:\n      type: System.Xml.XmlElement\n      description: An <xref href=\"System.Xml.XmlElement\"></xref> with the specified ID.\n  overload: System.Xml.XmlDataDocument.GetElementById*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Calling this method.\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)\n  id: GetElementFromRow(System.Data.DataRow)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: GetElementFromRow(DataRow)\n  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)\n  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Retrieves the <xref href=\"System.Xml.XmlElement\"></xref> associated with the specified <xref href=\"System.Data.DataRow\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example loads a `DataSet` into an `XmlDataDocument` and then creates an `XmlElement` representing the first customer record.  \\n  \\n The example uses the SQL Server 2000 Northwind database.  \\n  \\n [!code-cs[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_1_1.cs)]\\n [!code-cpp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_1_1.cpp)]\\n [!code-vb[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_1_1.vb)]\"\n  syntax:\n    content: public System.Xml.XmlElement GetElementFromRow (System.Data.DataRow r);\n    parameters:\n    - id: r\n      type: System.Data.DataRow\n      description: The <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref> whose associated <xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"></xref> you want to retrieve.\n    return:\n      type: System.Xml.XmlElement\n      description: The <xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"></xref> containing a representation of the specified <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref>.\n  overload: System.Xml.XmlDataDocument.GetElementFromRow*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)\n  id: GetElementsByTagName(System.String)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: GetElementsByTagName(String)\n  nameWithType: XmlDataDocument.GetElementsByTagName(String)\n  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Returns an <xref href=\"System.Xml.XmlNodeList\"></xref> containing a list of all descendant elements that match the specified <xref:System.Xml.XmlDocument.Name*>.\n  remarks: >-\n    > [!NOTE]\n\n    >  It is recommended that you use the <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> or <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> method instead of the GetElementsByTagName method.\n  syntax:\n    content: public override System.Xml.XmlNodeList GetElementsByTagName (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The qualified name to match. It is matched against the <xref:System.Xml.XmlDocument.Name*> property of the matching node. The special value \"*\" matches all tags.\n    return:\n      type: System.Xml.XmlNodeList\n      description: An <xref href=\"System.Xml.XmlNodeList\"></xref> containing a list of all matching nodes.\n  overload: System.Xml.XmlDataDocument.GetElementsByTagName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)\n  id: GetRowFromElement(System.Xml.XmlElement)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: GetRowFromElement(XmlElement)\n  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)\n  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Retrieves the <xref href=\"System.Data.DataRow\"></xref> associated with the specified <xref href=\"System.Xml.XmlElement\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example modifies the price of the first book.  \\n  \\n [!code-cs[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_2_1.cs)]\\n [!code-cpp[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_2_1.cpp)]\\n [!code-vb[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_2_1.vb)]  \\n  \\n The example uses the following input files:  \\n  \\n `2books.xml`  \\n  \\n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_2.xml)]  \\n  \\n `store.xsd`  \\n  \\n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_3.xml)]\"\n  syntax:\n    content: public System.Data.DataRow GetRowFromElement (System.Xml.XmlElement e);\n    parameters:\n    - id: e\n      type: System.Xml.XmlElement\n      description: The <xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"></xref> whose associated <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref> you want to retrieve.\n    return:\n      type: System.Data.DataRow\n      description: The <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref> containing a representation of the <xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"></xref>; <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there is no <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref> associated with the <xref uid=\"langword_csharp_XmlElement\" name=\"XmlElement\" href=\"\"></xref>.\n  overload: System.Xml.XmlDataDocument.GetRowFromElement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)\n  id: Load(System.IO.Stream)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: Load(Stream)\n  nameWithType: XmlDataDocument.Load(Stream)\n  fullName: System.Xml.XmlDataDocument.Load(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Loads the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref> from the specified stream.\n  remarks: \"`XmlDataDocument` does not support creating entity references. If the data includes entity references, the `Load` method resolves and expands any entity references.  \\n  \\n> [!NOTE]\\n>  In order to view the XML data relationally, you must first specify a schema to use for data mapping. This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually. This step must be done before calling `Load`.\"\n  syntax:\n    content: public override void Load (System.IO.Stream inStream);\n    parameters:\n    - id: inStream\n      type: System.IO.Stream\n      description: The stream containing the XML document to load.\n  overload: System.Xml.XmlDataDocument.Load*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)\n  id: Load(System.IO.TextReader)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: Load(TextReader)\n  nameWithType: XmlDataDocument.Load(TextReader)\n  fullName: System.Xml.XmlDataDocument.Load(TextReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Loads the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref> from the specified <xref:System.IO.TextReader>.\n  remarks: \"`XmlDataDocument` does not support creating entity references. If the data includes entity references, the `Load` method resolves and expands any entity references.  \\n  \\n> [!NOTE]\\n>  In order to view the XML data relationally, you must first specify a schema to use for data mapping. This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually. This step must be done before calling `Load`.\"\n  syntax:\n    content: public override void Load (System.IO.TextReader txtReader);\n    parameters:\n    - id: txtReader\n      type: System.IO.TextReader\n      description: The <xref uid=\"langword_csharp_TextReader\" name=\"TextReader\" href=\"\"></xref> used to feed the XML data into the document.\n  overload: System.Xml.XmlDataDocument.Load*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.Load(System.String)\n  id: Load(System.String)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: Load(String)\n  nameWithType: XmlDataDocument.Load(String)\n  fullName: System.Xml.XmlDataDocument.Load(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Loads the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref> using the specified URL.\n  remarks: \"`XmlDataDocument` does not support creating entity references. If the data includes entity references, the `Load` method resolves and expands any entity references.  \\n  \\n> [!NOTE]\\n>  In order to view the XML data relationally, you must first specify a schema to use for data mapping. This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually. This step must be done before calling `Load`.\"\n  syntax:\n    content: public override void Load (string filename);\n    parameters:\n    - id: filename\n      type: System.String\n      description: The URL of the file containing the XML document to load.\n  overload: System.Xml.XmlDataDocument.Load*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)\n  id: Load(System.Xml.XmlReader)\n  parent: System.Xml.XmlDataDocument\n  langs:\n  - csharp\n  name: Load(XmlReader)\n  nameWithType: XmlDataDocument.Load(XmlReader)\n  fullName: System.Xml.XmlDataDocument.Load(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Xml\n  summary: Loads the <xref uid=\"langword_csharp_XmlDataDocument\" name=\"XmlDataDocument\" href=\"\"></xref> from the specified <xref:System.Xml.XmlReader>.\n  remarks: \"`XmlDataDocument` does not support creating entity references. If the data source contains entity references, you must create an <xref:System.Xml.XmlValidatingReader> with the <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> property set to EntityHandling.ExpandEntities (this is the default behavior) and pass the `XmlValidatingReader` to the `Load` method. If you do not use an `XmlValidatingReader`, the `Load` method throws an exception.  \\n  \\n The `Load` method always preserves significant white space. The <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> property determines whether or not white space is preserved. The default is `false`, white space is not preserved.  \\n  \\n If the reader is in the initial state (that is, ReadState=ReadState.Initial), `Load` consumes the entire contents of the reader and builds the DOM from what it finds.  \\n  \\n If the reader is already positioned on some node at depth \\\"n\\\", then this method loads that node and all subsequent siblings up to the end tag that closes depth \\\"n\\\". This has the following results.  \\n  \\n If the current node and its following siblings look similar to the following:  \\n  \\n```  \\n<!--comment--><element1>one</element1><element2>two</element2>  \\n```  \\n  \\n `Load` throws an exception, because a document cannot have two root-level elements. If the current node and its following siblings look similar to the following:  \\n  \\n```  \\n<!--comment--><?process  \\n    instruction?><!--comment--></endtag>  \\n```  \\n  \\n `Load` will succeed; however, you will have an incomplete DOM tree, because there is no root-level element. You have to add a root-level element before you save the document; otherwise, the <xref:System.Xml.XmlDocument.Save%2A> method throws an exception.  \\n  \\n If the reader is positioned on a leaf node that is invalid for the root level of a document (for example, a white space or attribute node), the reader continues to read until it is positioned on a node that can be used for the root. The document begins loading at this point.\"\n  example:\n  - \"The following example modifies the price of a book using the `DataSet` methods.  \\n  \\n [!code-cpp[XmlDataDocument.Load#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_3_1.cpp)]\\n [!code-cs[XmlDataDocument.Load#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_3_1.cs)]\\n [!code-vb[XmlDataDocument.Load#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_3_1.vb)]  \\n  \\n The example uses the following two input files.  \\n  \\n `2books.xml`  \\n  \\n [!code-xml[XmlDataDocument.Load#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_2.xml)]  \\n  \\n `store.xsd`  \\n  \\n [!code-xml[XmlDataDocument.Load#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_3.xsd)]\"\n  syntax:\n    content: public override void Load (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref uid=\"langword_csharp_XmlReader\" name=\"XmlReader\" href=\"\"></xref> containing the XML document to load.\n  overload: System.Xml.XmlDataDocument.Load*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The XML being loaded contains entity references, and the reader cannot resolve entities.\n  platform:\n  - net462\nreferences:\n- uid: System.Xml.XmlDocument\n  isExternal: false\n  name: System.Xml.XmlDocument\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Xml.XmlDataDocument.#ctor\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: XmlDataDocument()\n  nameWithType: XmlDataDocument.XmlDataDocument()\n  fullName: System.Xml.XmlDataDocument.XmlDataDocument()\n- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: XmlDataDocument(DataSet)\n  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)\n  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)\n- uid: System.Data.DataSet\n  parent: System.Data\n  isExternal: false\n  name: DataSet\n  nameWithType: DataSet\n  fullName: System.Data.DataSet\n- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: CloneNode(Boolean)\n  nameWithType: XmlDataDocument.CloneNode(Boolean)\n  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)\n- uid: System.Xml.XmlNode\n  parent: System.Xml\n  isExternal: false\n  name: XmlNode\n  nameWithType: XmlNode\n  fullName: System.Xml.XmlNode\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: CreateElement(String,String,String)\n  nameWithType: XmlDataDocument.CreateElement(String,String,String)\n  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)\n- uid: System.Xml.XmlElement\n  parent: System.Xml\n  isExternal: false\n  name: XmlElement\n  nameWithType: XmlElement\n  fullName: System.Xml.XmlElement\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: CreateEntityReference(String)\n  nameWithType: XmlDataDocument.CreateEntityReference(String)\n  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)\n- uid: System.Xml.XmlEntityReference\n  parent: System.Xml\n  isExternal: false\n  name: XmlEntityReference\n  nameWithType: XmlEntityReference\n  fullName: System.Xml.XmlEntityReference\n- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: CreateNavigator(XmlNode)\n  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)\n  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)\n- uid: System.Xml.XPath.XPathNavigator\n  parent: System.Xml.XPath\n  isExternal: false\n  name: XPathNavigator\n  nameWithType: XPathNavigator\n  fullName: System.Xml.XPath.XPathNavigator\n- uid: System.Xml.XmlDataDocument.DataSet\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: DataSet\n  nameWithType: XmlDataDocument.DataSet\n  fullName: System.Xml.XmlDataDocument.DataSet\n- uid: System.Xml.XmlDataDocument.GetElementById(System.String)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: GetElementById(String)\n  nameWithType: XmlDataDocument.GetElementById(String)\n  fullName: System.Xml.XmlDataDocument.GetElementById(String)\n- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: GetElementFromRow(DataRow)\n  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)\n  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)\n- uid: System.Data.DataRow\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow\n- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: GetElementsByTagName(String)\n  nameWithType: XmlDataDocument.GetElementsByTagName(String)\n  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)\n- uid: System.Xml.XmlNodeList\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeList\n  nameWithType: XmlNodeList\n  fullName: System.Xml.XmlNodeList\n- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: GetRowFromElement(XmlElement)\n  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)\n  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)\n- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: Load(Stream)\n  nameWithType: XmlDataDocument.Load(Stream)\n  fullName: System.Xml.XmlDataDocument.Load(Stream)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: Load(TextReader)\n  nameWithType: XmlDataDocument.Load(TextReader)\n  fullName: System.Xml.XmlDataDocument.Load(TextReader)\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: true\n  name: TextReader\n  nameWithType: TextReader\n  fullName: System.IO.TextReader\n- uid: System.Xml.XmlDataDocument.Load(System.String)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: Load(String)\n  nameWithType: XmlDataDocument.Load(String)\n  fullName: System.Xml.XmlDataDocument.Load(String)\n- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: Load(XmlReader)\n  nameWithType: XmlDataDocument.Load(XmlReader)\n  fullName: System.Xml.XmlDataDocument.Load(XmlReader)\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: true\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Xml.XmlDataDocument.#ctor*\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: XmlDataDocument\n  nameWithType: XmlDataDocument.XmlDataDocument\n- uid: System.Xml.XmlDataDocument.CloneNode*\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: CloneNode\n  nameWithType: XmlDataDocument.CloneNode\n- uid: System.Xml.XmlDataDocument.CreateElement*\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: CreateElement\n  nameWithType: XmlDataDocument.CreateElement\n- uid: System.Xml.XmlDataDocument.CreateEntityReference*\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: CreateEntityReference\n  nameWithType: XmlDataDocument.CreateEntityReference\n- uid: System.Xml.XmlDataDocument.CreateNavigator*\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: CreateNavigator\n  nameWithType: XmlDataDocument.CreateNavigator\n- uid: System.Xml.XmlDataDocument.DataSet*\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: DataSet\n  nameWithType: XmlDataDocument.DataSet\n- uid: System.Xml.XmlDataDocument.GetElementById*\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: GetElementById\n  nameWithType: XmlDataDocument.GetElementById\n- uid: System.Xml.XmlDataDocument.GetElementFromRow*\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: GetElementFromRow\n  nameWithType: XmlDataDocument.GetElementFromRow\n- uid: System.Xml.XmlDataDocument.GetElementsByTagName*\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: GetElementsByTagName\n  nameWithType: XmlDataDocument.GetElementsByTagName\n- uid: System.Xml.XmlDataDocument.GetRowFromElement*\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: GetRowFromElement\n  nameWithType: XmlDataDocument.GetRowFromElement\n- uid: System.Xml.XmlDataDocument.Load*\n  parent: System.Xml.XmlDataDocument\n  isExternal: false\n  name: Load\n  nameWithType: XmlDataDocument.Load\n"}