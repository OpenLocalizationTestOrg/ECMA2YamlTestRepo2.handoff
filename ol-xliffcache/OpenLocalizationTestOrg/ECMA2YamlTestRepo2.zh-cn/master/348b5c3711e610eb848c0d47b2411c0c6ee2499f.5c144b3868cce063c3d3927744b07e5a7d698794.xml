{"nodes":[{"pos":[1177,1257],"content":"Represents the identity of a software publisher. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the identity of a software publisher. This class cannot be inherited.","pos":[0,80],"nodes":[{"content":"Represents the identity of a software publisher.","pos":[0,48]},{"content":"This class cannot be inherited.","pos":[49,80]}]}]},{"pos":[1270,3132],"content":"> [!IMPORTANT] >  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used.   >    >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.   >    >  In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.      > [!NOTE] >  By default, code access security does not check for <xref:System.Security.Policy.Publisher> evidence. Unless your computer has a custom code group based on the <xref:System.Security.Policy.PublisherMembershipCondition> class, you can improve performance by bypassing Authenticode signature verification. This is accomplished by configuring the runtime to not provide <xref:System.Security.Policy.Publisher> evidence for code access security. For more information about how to configure this option and which applications can use it, see the  element.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  Starting with the <ph id=\"ph2\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, identity permissions are not used.","pos":[0,131],"source":"> [!IMPORTANT] >  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used."},{"content":"&gt;    &gt;  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an &lt;xref:System.Security.Permissions.PermissionState&gt; permission state value.","pos":[134,296],"source":"   >    >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value."},{"content":"Starting with the .NET Framework version 2.0, identity permissions can have any permission state value.","pos":[297,400]},{"content":"This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the &lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt; interface.","pos":[401,591],"source":" This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface."},{"content":"That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.","pos":[592,731]},{"content":"&gt;    &gt;  In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted.","pos":[734,885],"source":"   >    >  In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted."},{"content":"That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria.","pos":[886,1035]},{"content":"Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust.","pos":[1036,1170]},{"content":"This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","pos":[1171,1285]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  By default, code access security does not check for &lt;xref:System.Security.Policy.Publisher&gt; evidence.","pos":[1291,1405],"source":"      > [!NOTE] >  By default, code access security does not check for <xref:System.Security.Policy.Publisher> evidence."},{"content":"Unless your computer has a custom code group based on the &lt;xref:System.Security.Policy.PublisherMembershipCondition&gt; class, you can improve performance by bypassing Authenticode signature verification.","pos":[1406,1607],"source":" Unless your computer has a custom code group based on the <xref:System.Security.Policy.PublisherMembershipCondition> class, you can improve performance by bypassing Authenticode signature verification."},{"content":"This is accomplished by configuring the runtime to not provide &lt;xref:System.Security.Policy.Publisher&gt; evidence for code access security.","pos":[1608,1745],"source":" This is accomplished by configuring the runtime to not provide <xref:System.Security.Policy.Publisher> evidence for code access security."},{"content":"For more information about how to configure this option and which applications can use it, see the  element.","pos":[1746,1854]}]},{"pos":[4668,4837],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PublisherIdentityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified Authenticode X.509v3 certificate.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.PublisherIdentityPermission\"></xref> class with the specified Authenticode X.509v3 certificate."},{"pos":[4849,4973],"content":"The X.509 certificate defines the identity of the specified software publisher, as established by Authenticode code signing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X.509 certificate defines the identity of the specified software publisher, as established by Authenticode code signing.","pos":[0,124]}]},{"pos":[5240,5308],"content":"An X.509 certificate representing the software publisher's identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"An X.509 certificate representing the software publisher's identity.","pos":[0,68]}]},{"pos":[5500,5603],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">certificate</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>certificate</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5698,5764],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">certificate</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid certificate.","needQuote":true,"needEscape":true,"source":"The <code>certificate</code> parameter is not a valid certificate."},{"pos":[6401,6602],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PublisherIdentityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.PublisherIdentityPermission\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>."},{"pos":[6615,7850],"content":"Creates either a fully restricted (`None`) or `Unrestricted` permission.      > [!NOTE] >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.       In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","needQuote":false,"needEscape":true,"nodes":[{"content":"Creates either a fully restricted (<ph id=\"ph1\">`None`</ph>) or <ph id=\"ph2\">`Unrestricted`</ph> permission.","pos":[0,72],"source":"Creates either a fully restricted (`None`) or `Unrestricted` permission."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an &lt;xref:System.Security.Permissions.PermissionState&gt; permission state value.","pos":[78,245],"source":"      > [!NOTE] >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value."},{"content":"Starting with the .NET Framework version 2.0, identity permissions can have any permission state value.","pos":[246,349]},{"content":"This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the &lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt; interface.","pos":[350,540],"source":" This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface."},{"content":"That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.","pos":[541,680]},{"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted.","pos":[687,830]},{"content":"That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria.","pos":[831,980]},{"content":"Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust.","pos":[981,1115]},{"content":"This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","pos":[1116,1230]}]},{"pos":[8565,8648],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values."},{"pos":[8832,8954],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>."},{"pos":[9409,9513],"content":"Gets or sets an Authenticode X.509v3 certificate that represents the identity of the software publisher.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an Authenticode X.509v3 certificate that represents the identity of the software publisher.","pos":[0,104]}]},{"pos":[9737,9810],"content":"An X.509 certificate representing the identity of the software publisher.","needQuote":true,"needEscape":true,"nodes":[{"content":"An X.509 certificate representing the identity of the software publisher.","pos":[0,73]}]},{"pos":[10008,10088],"content":"The Certificate is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The Certificate is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[10183,10226],"content":"The Certificate is not a valid certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Certificate is not a valid certificate.","pos":[0,43]}]},{"pos":[10329,10390],"content":"The property cannot be set because the identity is ambiguous.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property cannot be set because the identity is ambiguous.","pos":[0,61]}]},{"pos":[10814,10878],"content":"Creates and returns an identical copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns an identical copy of the current permission.","pos":[0,64]}]},{"pos":[10890,10980],"content":"A copy of a permission represents the same access to resources as the original permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of a permission represents the same access to resources as the original permission.","pos":[0,90]}]},{"pos":[11147,11180],"content":"A copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of the current permission.","pos":[0,33]}]},{"pos":[11821,11891],"content":"Reconstructs a permission with a specified state from an XML encoding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reconstructs a permission with a specified state from an XML encoding.","pos":[0,70]}]},{"pos":[12076,12130],"content":"The XML encoding to use to reconstruct the permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML encoding to use to reconstruct the permission.","pos":[0,54]}]},{"pos":[12324,12419],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>esd</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12515,12663],"content":"The <code>esd</code> parameter is not a valid permission element.       -or-       The <code>esd</code> parameter's version number is not valid.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid permission element.","pos":[0,65],"source":"The <code>esd</code> parameter is not a valid permission element."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's version number is not valid.","pos":[72,144],"source":"       -or-       The <code>esd</code> parameter's version number is not valid."}]},{"pos":[13204,13317],"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,113]}]},{"pos":[13330,13861],"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.       <xref:System.Security.Permissions.PublisherIdentityPermission> only supports set operations (<xref:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf%2A>, Intersect, and <xref:System.Security.Permissions.PublisherIdentityPermission.Union%2A>) when the current permission is equal to the specified permission.","needQuote":false,"needEscape":true,"nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.       <xref:System.Security.Permissions.PublisherIdentityPermission> only supports set operations (<xref:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf%2A>, Intersect, and <xref:System.Security.Permissions.PublisherIdentityPermission.Union%2A>) when the current permission is equal to the specified permission.","pos":[0,529],"nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common.","pos":[0,118]},{"content":"Only a demand that passes both original permissions will pass the intersection.","pos":[119,198]},{"content":"&lt;xref:System.Security.Permissions.PublisherIdentityPermission&gt; only supports set operations (&lt;xref:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf%2A&gt;, Intersect, and &lt;xref:System.Security.Permissions.PublisherIdentityPermission.Union%2A&gt;) when the current permission is equal to the specified permission.","pos":[205,529],"source":"       <xref:System.Security.Permissions.PublisherIdentityPermission> only supports set operations (<xref:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf%2A>, Intersect, and <xref:System.Security.Permissions.PublisherIdentityPermission.Union%2A>) when the current permission is equal to the specified permission."}]}]},{"pos":[14070,14179],"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","pos":[0,109],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be of the same type as the current permission.","pos":[55,109]}]}]},{"pos":[14251,14470],"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission that represents the intersection of the current permission and the specified permission.","pos":[0,105]},{"content":"This new permission is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the intersection is empty.","pos":[106,219],"source":" This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty."}]},{"pos":[14658,14814],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"pos":[15359,15441],"content":"Determines whether the current permission is a subset of the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the current permission is a subset of the specified permission.","pos":[0,82]}]},{"pos":[15454,16019],"content":"The current permission is a subset of the specified permission if the two permissions are equal. If this method returns `true`, the current permission represents the same access to the protected resource as the specified permission.       <xref:System.Security.Permissions.PublisherIdentityPermission> supports set operations (IsSubsetOf, <xref:System.Security.Permissions.PublisherIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.PublisherIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission.","needQuote":false,"needEscape":true,"nodes":[{"content":"The current permission is a subset of the specified permission if the two permissions are equal.","pos":[0,96]},{"content":"If this method returns <ph id=\"ph1\">`true`</ph>, the current permission represents the same access to the protected resource as the specified permission.","pos":[97,232],"source":" If this method returns `true`, the current permission represents the same access to the protected resource as the specified permission."},{"content":"&lt;xref:System.Security.Permissions.PublisherIdentityPermission&gt; supports set operations (IsSubsetOf, &lt;xref:System.Security.Permissions.PublisherIdentityPermission.Intersect%2A&gt;, and &lt;xref:System.Security.Permissions.PublisherIdentityPermission.Union%2A&gt;) only when the current permission is equal to the specified permission.","pos":[239,563],"source":"       <xref:System.Security.Permissions.PublisherIdentityPermission> supports set operations (IsSubsetOf, <xref:System.Security.Permissions.PublisherIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.PublisherIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission."}]},{"pos":[16206,16336],"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","pos":[0,130],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be of the same type as the current permission.","pos":[63,130]}]}]},{"pos":[16395,16597],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current permission is a subset of the specified permission; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16786,16942],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"pos":[17371,17435],"content":"Creates an XML encoding of the permission and its current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an XML encoding of the permission and its current state.","pos":[0,64]}]},{"pos":[17611,17678],"content":"An XML encoding of the permission, including any state information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML encoding of the permission, including any state information.","pos":[0,67]}]},{"pos":[18290,18384],"content":"Creates a permission that is the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a permission that is the union of the current permission and the specified permission.","pos":[0,94]}]},{"pos":[18397,18965],"content":"The result of a call to the Union method is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.       The <xref:System.Security.Permissions.PublisherIdentityPermission> class only supports set operations (<xref:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.PublisherIdentityPermission.Intersect%2A>, and Union) when the current permission is equal to the specified permission.","needQuote":false,"needEscape":true,"nodes":[{"content":"The result of a call to the Union method is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.       The <xref:System.Security.Permissions.PublisherIdentityPermission> class only supports set operations (<xref:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.PublisherIdentityPermission.Intersect%2A>, and Union) when the current permission is equal to the specified permission.","pos":[0,566],"nodes":[{"content":"The result of a call to the Union method is a permission that represents all the operations represented by both the current permission and the specified permission.","pos":[0,164]},{"content":"Any demand that passes either permission passes their union.","pos":[165,225]},{"content":"The &lt;xref:System.Security.Permissions.PublisherIdentityPermission&gt; class only supports set operations (&lt;xref:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf%2A&gt;, &lt;xref:System.Security.Permissions.PublisherIdentityPermission.Intersect%2A&gt;, and Union) when the current permission is equal to the specified permission.","pos":[232,566],"source":"       The <xref:System.Security.Permissions.PublisherIdentityPermission> class only supports set operations (<xref:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.PublisherIdentityPermission.Intersect%2A>, and Union) when the current permission is equal to the specified permission."}]}]},{"pos":[19170,19277],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]},{"pos":[19349,19447],"content":"A new permission that represents the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission that represents the union of the current permission and the specified permission.","pos":[0,98]}]},{"pos":[19632,19850],"content":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.       -or-       The two permissions are not equal.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","pos":[0,156],"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"content":"-or-       The two permissions are not equal.","pos":[163,208]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.PublisherIdentityPermission\n  id: PublisherIdentityPermission\n  children:\n  - System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.PublisherIdentityPermission.Certificate\n  - System.Security.Permissions.PublisherIdentityPermission.Copy\n  - System.Security.Permissions.PublisherIdentityPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.PublisherIdentityPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.PublisherIdentityPermission.ToXml\n  - System.Security.Permissions.PublisherIdentityPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: PublisherIdentityPermission\n  nameWithType: PublisherIdentityPermission\n  fullName: System.Security.Permissions.PublisherIdentityPermission\n  type: Class\n  summary: Represents the identity of a software publisher. This class cannot be inherited.\n  remarks: \"> [!IMPORTANT]\\n>  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used.  \\n>   \\n>  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.  \\n>   \\n>  In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.  \\n  \\n> [!NOTE]\\n>  By default, code access security does not check for <xref:System.Security.Policy.Publisher> evidence. Unless your computer has a custom code group based on the <xref:System.Security.Policy.PublisherMembershipCondition> class, you can improve performance by bypassing Authenticode signature verification. This is accomplished by configuring the runtime to not provide <xref:System.Security.Policy.Publisher> evidence for code access security. For more information about how to configure this option and which applications can use it, see the  element.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class PublisherIdentityPermission : System.Security.CodeAccessPermission\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements: []\n  inheritedMembers:\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)'\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  langs:\n  - csharp\n  name: PublisherIdentityPermission(X509Certificate)\n  nameWithType: PublisherIdentityPermission.PublisherIdentityPermission(X509Certificate)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.PublisherIdentityPermission(X509Certificate)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.PublisherIdentityPermission\"></xref> class with the specified Authenticode X.509v3 certificate.\n  remarks: The X.509 certificate defines the identity of the specified software publisher, as established by Authenticode code signing.\n  syntax:\n    content: public PublisherIdentityPermission (System.Security.Cryptography.X509Certificates.X509Certificate certificate);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: An X.509 certificate representing the software publisher's identity.\n  overload: System.Security.Permissions.PublisherIdentityPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>certificate</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>certificate</code> parameter is not a valid certificate.\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  langs:\n  - csharp\n  name: PublisherIdentityPermission(PermissionState)\n  nameWithType: PublisherIdentityPermission.PublisherIdentityPermission(PermissionState)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.PublisherIdentityPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.PublisherIdentityPermission\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  remarks: \"Creates either a fully restricted (`None`) or `Unrestricted` permission.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.  \\n  \\n In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.\"\n  example:\n  - \"The following example shows how to use the PublisherIdentityPermission constructor.  \\n  \\n [!code-cs[System.Security.Permissions.PublisherIdentityPermission#7](~/add/codesnippet/csharp/1a39ce0c-6535-46dd-bd5f-_1.cs)]\\n [!code-vb[System.Security.Permissions.PublisherIdentityPermission#7](~/add/codesnippet/visualbasic/1a39ce0c-6535-46dd-bd5f-_1.vb)]\\n [!code-cpp[System.Security.Permissions.PublisherIdentityPermission#7](~/add/codesnippet/cpp/1a39ce0c-6535-46dd-bd5f-_1.cpp)]\"\n  syntax:\n    content: public PublisherIdentityPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.\n  overload: System.Security.Permissions.PublisherIdentityPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermission.Certificate\n  id: Certificate\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  langs:\n  - csharp\n  name: Certificate\n  nameWithType: PublisherIdentityPermission.Certificate\n  fullName: System.Security.Permissions.PublisherIdentityPermission.Certificate\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets an Authenticode X.509v3 certificate that represents the identity of the software publisher.\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X509Certificate Certificate { get; set; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: An X.509 certificate representing the identity of the software publisher.\n  overload: System.Security.Permissions.PublisherIdentityPermission.Certificate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The Certificate is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The Certificate is not a valid certificate.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The property cannot be set because the identity is ambiguous.\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: PublisherIdentityPermission.Copy()\n  fullName: System.Security.Permissions.PublisherIdentityPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns an identical copy of the current permission.\n  remarks: A copy of a permission represents the same access to resources as the original permission.\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission.\n  overload: System.Security.Permissions.PublisherIdentityPermission.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: PublisherIdentityPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Reconstructs a permission with a specified state from an XML encoding.\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement esd);\n    parameters:\n    - id: esd\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the permission.\n  overload: System.Security.Permissions.PublisherIdentityPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>esd</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>esd</code> parameter is not a valid permission element.  \\n  \\n -or-  \\n  \\n The <code>esd</code> parameter's version number is not valid.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: PublisherIdentityPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.\n  remarks: \"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.  \\n  \\n <xref:System.Security.Permissions.PublisherIdentityPermission> only supports set operations (<xref:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf%2A>, Intersect, and <xref:System.Security.Permissions.PublisherIdentityPermission.Union%2A>) when the current permission is equal to the specified permission.\"\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.\n  overload: System.Security.Permissions.PublisherIdentityPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: PublisherIdentityPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Determines whether the current permission is a subset of the specified permission.\n  remarks: \"The current permission is a subset of the specified permission if the two permissions are equal. If this method returns `true`, the current permission represents the same access to the protected resource as the specified permission.  \\n  \\n <xref:System.Security.Permissions.PublisherIdentityPermission> supports set operations (IsSubsetOf, <xref:System.Security.Permissions.PublisherIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.PublisherIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission.\"\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: PublisherIdentityPermission.ToXml()\n  fullName: System.Security.Permissions.PublisherIdentityPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates an XML encoding of the permission and its current state.\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the permission, including any state information.\n  overload: System.Security.Permissions.PublisherIdentityPermission.ToXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PublisherIdentityPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: PublisherIdentityPermission.Union(IPermission)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates a permission that is the union of the current permission and the specified permission.\n  remarks: \"The result of a call to the Union method is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.  \\n  \\n The <xref:System.Security.Permissions.PublisherIdentityPermission> class only supports set operations (<xref:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.PublisherIdentityPermission.Intersect%2A>, and Union) when the current permission is equal to the specified permission.\"\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the union of the current permission and the specified permission.\n  overload: System.Security.Permissions.PublisherIdentityPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>target</code> parameter is not <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> and is not of the same type as the current permission.  \\n  \\n -or-  \\n  \\n The two permissions are not equal.\"\n  platform:\n  - net462\nreferences:\n- uid: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.CodeAccessPermission\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: PublisherIdentityPermission(X509Certificate)\n  nameWithType: PublisherIdentityPermission.PublisherIdentityPermission(X509Certificate)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.PublisherIdentityPermission(X509Certificate)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate\n  nameWithType: X509Certificate\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n- uid: System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: PublisherIdentityPermission(PermissionState)\n  nameWithType: PublisherIdentityPermission.PublisherIdentityPermission(PermissionState)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.PublisherIdentityPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.PublisherIdentityPermission.Certificate\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: Certificate\n  nameWithType: PublisherIdentityPermission.Certificate\n  fullName: System.Security.Permissions.PublisherIdentityPermission.Certificate\n- uid: System.Security.Permissions.PublisherIdentityPermission.Copy\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: PublisherIdentityPermission.Copy()\n  fullName: System.Security.Permissions.PublisherIdentityPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.PublisherIdentityPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: PublisherIdentityPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.PublisherIdentityPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: PublisherIdentityPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.Intersect(IPermission)\n- uid: System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: PublisherIdentityPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.PublisherIdentityPermission.ToXml\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: PublisherIdentityPermission.ToXml()\n  fullName: System.Security.Permissions.PublisherIdentityPermission.ToXml()\n- uid: System.Security.Permissions.PublisherIdentityPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: PublisherIdentityPermission.Union(IPermission)\n  fullName: System.Security.Permissions.PublisherIdentityPermission.Union(IPermission)\n- uid: System.Security.Permissions.PublisherIdentityPermission.#ctor*\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: PublisherIdentityPermission\n  nameWithType: PublisherIdentityPermission.PublisherIdentityPermission\n- uid: System.Security.Permissions.PublisherIdentityPermission.Certificate*\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: Certificate\n  nameWithType: PublisherIdentityPermission.Certificate\n- uid: System.Security.Permissions.PublisherIdentityPermission.Copy*\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: Copy\n  nameWithType: PublisherIdentityPermission.Copy\n- uid: System.Security.Permissions.PublisherIdentityPermission.FromXml*\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: PublisherIdentityPermission.FromXml\n- uid: System.Security.Permissions.PublisherIdentityPermission.Intersect*\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: PublisherIdentityPermission.Intersect\n- uid: System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf*\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: PublisherIdentityPermission.IsSubsetOf\n- uid: System.Security.Permissions.PublisherIdentityPermission.ToXml*\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: PublisherIdentityPermission.ToXml\n- uid: System.Security.Permissions.PublisherIdentityPermission.Union*\n  parent: System.Security.Permissions.PublisherIdentityPermission\n  isExternal: false\n  name: Union\n  nameWithType: PublisherIdentityPermission.Union\n"}