{"nodes":[{"pos":[689,774],"content":"Represents an expression that consists of a binary operation between two expressions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an expression that consists of a binary operation between two expressions.","pos":[0,85]}]},{"pos":[786,1145],"content":"CodeBinaryOperatorExpression can be used to represent code expressions that include a binary operator. Some examples of binary operators are equality (`==`), addition (`+`), and bitwise (`|`) operators. The <xref:System.CodeDom.CodeBinaryOperatorType> enumeration represents a set of basic, commonly used binary operators that are supported in many languages.","needQuote":true,"needEscape":true,"nodes":[{"content":"CodeBinaryOperatorExpression can be used to represent code expressions that include a binary operator.","pos":[0,102]},{"content":"Some examples of binary operators are equality (<ph id=\"ph1\">`==`</ph>), addition (<ph id=\"ph2\">`+`</ph>), and bitwise (<ph id=\"ph3\">`|`</ph>) operators.","pos":[103,202],"source":" Some examples of binary operators are equality (`==`), addition (`+`), and bitwise (`|`) operators."},{"content":"The &lt;xref:System.CodeDom.CodeBinaryOperatorType&gt; enumeration represents a set of basic, commonly used binary operators that are supported in many languages.","pos":[203,359],"source":" The <xref:System.CodeDom.CodeBinaryOperatorType> enumeration represents a set of basic, commonly used binary operators that are supported in many languages."}]},{"pos":[2478,2583],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeBinaryOperatorExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeBinaryOperatorExpression\"></xref> class."},{"pos":[3554,3690],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeBinaryOperatorExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified parameters.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeBinaryOperatorExpression\"></xref> class using the specified parameters."},{"pos":[3959,4042],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on the left of the operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.CodeDom.CodeExpression\"></xref> on the left of the operator."},{"pos":[4125,4218],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeBinaryOperatorType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> indicating the type of operator.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeBinaryOperatorType\"></xref> indicating the type of operator."},{"pos":[4296,4380],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on the right of the operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.CodeDom.CodeExpression\"></xref> on the right of the operator."},{"pos":[4830,4891],"content":"Gets or sets the code expression on the left of the operator.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the code expression on the left of the operator.","pos":[0,61]}]},{"pos":[5044,5129],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the left operand.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the left operand."},{"pos":[5598,5658],"content":"Gets or sets the operator in the binary operator expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the operator in the binary operator expression.","pos":[0,60]}]},{"pos":[5670,5941],"content":"A binary operator performs an evaluation on two operands. Some examples of binary operators are equality (`==`), addition (`+`), and bitwise (`|`) operators. Many commonly used binary operators can be found in the <xref:System.CodeDom.CodeBinaryOperatorType> enumeration.","needQuote":true,"needEscape":true,"nodes":[{"content":"A binary operator performs an evaluation on two operands.","pos":[0,57]},{"content":"Some examples of binary operators are equality (<ph id=\"ph1\">`==`</ph>), addition (<ph id=\"ph2\">`+`</ph>), and bitwise (<ph id=\"ph3\">`|`</ph>) operators.","pos":[58,157],"source":" Some examples of binary operators are equality (`==`), addition (`+`), and bitwise (`|`) operators."},{"content":"Many commonly used binary operators can be found in the &lt;xref:System.CodeDom.CodeBinaryOperatorType&gt; enumeration.","pos":[158,271],"source":" Many commonly used binary operators can be found in the <xref:System.CodeDom.CodeBinaryOperatorType> enumeration."}]},{"pos":[6114,6229],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeBinaryOperatorType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the type of operator in the expression.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeBinaryOperatorType\"></xref> that indicates the type of operator in the expression."},{"pos":[6687,6749],"content":"Gets or sets the code expression on the right of the operator.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the code expression on the right of the operator.","pos":[0,62]}]},{"pos":[6903,6989],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the right operand.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the right operand."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.CodeDom.CodeBinaryOperatorExpression\n  id: CodeBinaryOperatorExpression\n  children:\n  - System.CodeDom.CodeBinaryOperatorExpression.#ctor\n  - System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)\n  - System.CodeDom.CodeBinaryOperatorExpression.Left\n  - System.CodeDom.CodeBinaryOperatorExpression.Operator\n  - System.CodeDom.CodeBinaryOperatorExpression.Right\n  langs:\n  - csharp\n  name: CodeBinaryOperatorExpression\n  nameWithType: CodeBinaryOperatorExpression\n  fullName: System.CodeDom.CodeBinaryOperatorExpression\n  type: Class\n  summary: Represents an expression that consists of a binary operation between two expressions.\n  remarks: CodeBinaryOperatorExpression can be used to represent code expressions that include a binary operator. Some examples of binary operators are equality (`==`), addition (`+`), and bitwise (`|`) operators. The <xref:System.CodeDom.CodeBinaryOperatorType> enumeration represents a set of basic, commonly used binary operators that are supported in many languages.\n  example:\n  - \"This example demonstrates use of a CodeBinaryOperatorExpression to add two numbers together.  \\n  \\n [!code-cs[CodeBinaryOperatorExpression#2](~/add/codesnippet/csharp/t-system.codedom.codebin_1.cs)]\\n [!code-cpp[CodeBinaryOperatorExpression#2](~/add/codesnippet/cpp/t-system.codedom.codebin_1.cpp)]\\n [!code-vb[CodeBinaryOperatorExpression#2](~/add/codesnippet/visualbasic/t-system.codedom.codebin_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class CodeBinaryOperatorExpression : System.CodeDom.CodeExpression\n  inheritance:\n  - System.Object\n  - System.CodeDom.CodeObject\n  - System.CodeDom.CodeExpression\n  implements: []\n  inheritedMembers:\n  - System.CodeDom.CodeObject.UserData\n  platform:\n  - net462\n- uid: System.CodeDom.CodeBinaryOperatorExpression.#ctor\n  id: '#ctor'\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  langs:\n  - csharp\n  name: CodeBinaryOperatorExpression()\n  nameWithType: CodeBinaryOperatorExpression.CodeBinaryOperatorExpression()\n  fullName: System.CodeDom.CodeBinaryOperatorExpression.CodeBinaryOperatorExpression()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeBinaryOperatorExpression\"></xref> class.\n  syntax:\n    content: public CodeBinaryOperatorExpression ();\n    parameters: []\n  overload: System.CodeDom.CodeBinaryOperatorExpression.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)\n  id: '#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)'\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  langs:\n  - csharp\n  name: CodeBinaryOperatorExpression(CodeExpression,CodeBinaryOperatorType,CodeExpression)\n  nameWithType: CodeBinaryOperatorExpression.CodeBinaryOperatorExpression(CodeExpression,CodeBinaryOperatorType,CodeExpression)\n  fullName: System.CodeDom.CodeBinaryOperatorExpression.CodeBinaryOperatorExpression(CodeExpression,CodeBinaryOperatorType,CodeExpression)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeBinaryOperatorExpression\"></xref> class using the specified parameters.\n  syntax:\n    content: public CodeBinaryOperatorExpression (System.CodeDom.CodeExpression left, System.CodeDom.CodeBinaryOperatorType op, System.CodeDom.CodeExpression right);\n    parameters:\n    - id: left\n      type: System.CodeDom.CodeExpression\n      description: The <xref href=\"System.CodeDom.CodeExpression\"></xref> on the left of the operator.\n    - id: op\n      type: System.CodeDom.CodeBinaryOperatorType\n      description: A <xref href=\"System.CodeDom.CodeBinaryOperatorType\"></xref> indicating the type of operator.\n    - id: right\n      type: System.CodeDom.CodeExpression\n      description: The <xref href=\"System.CodeDom.CodeExpression\"></xref> on the right of the operator.\n  overload: System.CodeDom.CodeBinaryOperatorExpression.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeBinaryOperatorExpression.Left\n  id: Left\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  langs:\n  - csharp\n  name: Left\n  nameWithType: CodeBinaryOperatorExpression.Left\n  fullName: System.CodeDom.CodeBinaryOperatorExpression.Left\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the code expression on the left of the operator.\n  syntax:\n    content: public System.CodeDom.CodeExpression Left { get; set; }\n    return:\n      type: System.CodeDom.CodeExpression\n      description: A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the left operand.\n  overload: System.CodeDom.CodeBinaryOperatorExpression.Left*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeBinaryOperatorExpression.Operator\n  id: Operator\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  langs:\n  - csharp\n  name: Operator\n  nameWithType: CodeBinaryOperatorExpression.Operator\n  fullName: System.CodeDom.CodeBinaryOperatorExpression.Operator\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the operator in the binary operator expression.\n  remarks: A binary operator performs an evaluation on two operands. Some examples of binary operators are equality (`==`), addition (`+`), and bitwise (`|`) operators. Many commonly used binary operators can be found in the <xref:System.CodeDom.CodeBinaryOperatorType> enumeration.\n  syntax:\n    content: public System.CodeDom.CodeBinaryOperatorType Operator { get; set; }\n    return:\n      type: System.CodeDom.CodeBinaryOperatorType\n      description: A <xref href=\"System.CodeDom.CodeBinaryOperatorType\"></xref> that indicates the type of operator in the expression.\n  overload: System.CodeDom.CodeBinaryOperatorExpression.Operator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeBinaryOperatorExpression.Right\n  id: Right\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  langs:\n  - csharp\n  name: Right\n  nameWithType: CodeBinaryOperatorExpression.Right\n  fullName: System.CodeDom.CodeBinaryOperatorExpression.Right\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the code expression on the right of the operator.\n  syntax:\n    content: public System.CodeDom.CodeExpression Right { get; set; }\n    return:\n      type: System.CodeDom.CodeExpression\n      description: A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the right operand.\n  overload: System.CodeDom.CodeBinaryOperatorExpression.Right*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.CodeDom.CodeExpression\n  isExternal: false\n  name: System.CodeDom.CodeExpression\n- uid: System.CodeDom.CodeBinaryOperatorExpression.#ctor\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  isExternal: false\n  name: CodeBinaryOperatorExpression()\n  nameWithType: CodeBinaryOperatorExpression.CodeBinaryOperatorExpression()\n  fullName: System.CodeDom.CodeBinaryOperatorExpression.CodeBinaryOperatorExpression()\n- uid: System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  isExternal: false\n  name: CodeBinaryOperatorExpression(CodeExpression,CodeBinaryOperatorType,CodeExpression)\n  nameWithType: CodeBinaryOperatorExpression.CodeBinaryOperatorExpression(CodeExpression,CodeBinaryOperatorType,CodeExpression)\n  fullName: System.CodeDom.CodeBinaryOperatorExpression.CodeBinaryOperatorExpression(CodeExpression,CodeBinaryOperatorType,CodeExpression)\n- uid: System.CodeDom.CodeBinaryOperatorType\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeBinaryOperatorType\n  nameWithType: CodeBinaryOperatorType\n  fullName: System.CodeDom.CodeBinaryOperatorType\n- uid: System.CodeDom.CodeBinaryOperatorExpression.Left\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  isExternal: false\n  name: Left\n  nameWithType: CodeBinaryOperatorExpression.Left\n  fullName: System.CodeDom.CodeBinaryOperatorExpression.Left\n- uid: System.CodeDom.CodeBinaryOperatorExpression.Operator\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  isExternal: false\n  name: Operator\n  nameWithType: CodeBinaryOperatorExpression.Operator\n  fullName: System.CodeDom.CodeBinaryOperatorExpression.Operator\n- uid: System.CodeDom.CodeBinaryOperatorExpression.Right\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  isExternal: false\n  name: Right\n  nameWithType: CodeBinaryOperatorExpression.Right\n  fullName: System.CodeDom.CodeBinaryOperatorExpression.Right\n- uid: System.CodeDom.CodeBinaryOperatorExpression.#ctor*\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  isExternal: false\n  name: CodeBinaryOperatorExpression\n  nameWithType: CodeBinaryOperatorExpression.CodeBinaryOperatorExpression\n- uid: System.CodeDom.CodeBinaryOperatorExpression.Left*\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  isExternal: false\n  name: Left\n  nameWithType: CodeBinaryOperatorExpression.Left\n- uid: System.CodeDom.CodeBinaryOperatorExpression.Operator*\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  isExternal: false\n  name: Operator\n  nameWithType: CodeBinaryOperatorExpression.Operator\n- uid: System.CodeDom.CodeBinaryOperatorExpression.Right*\n  parent: System.CodeDom.CodeBinaryOperatorExpression\n  isExternal: false\n  name: Right\n  nameWithType: CodeBinaryOperatorExpression.Right\n"}