{"nodes":[{"pos":[601,747],"content":"Provides utilities to support the exporting of COM+ SOAP-enabled application proxies by the server and the importing of the proxies by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides utilities to support the exporting of COM+ SOAP-enabled application proxies by the server and the importing of the proxies by the client.","pos":[0,146]}]},{"pos":[760,1152],"content":"The utility functions that ISoapUtility provides are called from numerous locations within COM+; however, their primary purpose is to support the export and import of client proxies.       See <xref:System.EnterpriseServices.Internal.SoapUtility> for the default implementation.       ISoapUtility is used internally by the .NET Framework. You do not need to use it directly in your code.","needQuote":false,"needEscape":true,"nodes":[{"content":"The utility functions that ISoapUtility provides are called from numerous locations within COM+; however, their primary purpose is to support the export and import of client proxies.       See <xref:System.EnterpriseServices.Internal.SoapUtility> for the default implementation.       ISoapUtility is used internally by the .NET Framework. You do not need to use it directly in your code.","pos":[0,388],"nodes":[{"content":"The utility functions that ISoapUtility provides are called from numerous locations within COM+; however, their primary purpose is to support the export and import of client proxies.","pos":[0,182]},{"content":"See &lt;xref:System.EnterpriseServices.Internal.SoapUtility&gt; for the default implementation.","pos":[189,278],"source":"       See <xref:System.EnterpriseServices.Internal.SoapUtility> for the default implementation."},{"content":"ISoapUtility is used internally by the .NET Framework.","pos":[285,339]},{"content":"You do not need to use it directly in your code.","pos":[340,388]}]}]},{"pos":[1983,2040],"content":"Returns the path for the SOAP virtual root bin directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the path for the SOAP virtual root bin directory.","pos":[0,57]}]},{"pos":[2262,2282],"content":"The root Web server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The root Web server.","pos":[0,20]}]},{"pos":[2348,2369],"content":"The base URL address.","needQuote":true,"needEscape":true,"nodes":[{"content":"The base URL address.","pos":[0,21]}]},{"pos":[2439,2468],"content":"The name of the virtual root.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the virtual root.","pos":[0,29]}]},{"pos":[2532,2636],"content":"When this method returns, this parameter contains the file path for the SOAP virtual root bin directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, this parameter contains the file path for the SOAP virtual root bin directory.","pos":[0,104]}]},{"pos":[2841,2918],"content":"A caller in the call chain does not have permission to access unmanaged code.","needQuote":true,"needEscape":true,"nodes":[{"content":"A caller in the call chain does not have permission to access unmanaged code.","pos":[0,77]}]},{"pos":[3037,3071],"content":"The SOAP utility is not available.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SOAP utility is not available.","pos":[0,34]}]},{"pos":[3222,3266],"content":"The call to get the system directory failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The call to get the system directory failed.","pos":[0,44]}]},{"pos":[3957,4000],"content":"Returns the path for the SOAP virtual root.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the path for the SOAP virtual root.","pos":[0,43]}]},{"pos":[4232,4252],"content":"The root Web server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The root Web server.","pos":[0,20]}]},{"pos":[4318,4339],"content":"The base URL address.","needQuote":true,"needEscape":true,"nodes":[{"content":"The base URL address.","pos":[0,21]}]},{"pos":[4409,4438],"content":"The name of the virtual root.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the virtual root.","pos":[0,29]}]},{"pos":[4507,4597],"content":"When this method returns, this parameter contains the file path for the SOAP virtual root.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, this parameter contains the file path for the SOAP virtual root.","pos":[0,90]}]},{"pos":[4807,4884],"content":"A caller in the call chain does not have permission to access unmanaged code.","needQuote":true,"needEscape":true,"nodes":[{"content":"A caller in the call chain does not have permission to access unmanaged code.","pos":[0,77]}]},{"pos":[5003,5037],"content":"The SOAP utility is not available.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SOAP utility is not available.","pos":[0,34]}]},{"pos":[5188,5232],"content":"The call to get the system directory failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The call to get the system directory failed.","pos":[0,44]}]},{"pos":[5656,5728],"content":"Determines whether authenticated, encrypted SOAP interfaces are present.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether authenticated, encrypted SOAP interfaces are present.","pos":[0,72]}]},{"pos":[5990,6067],"content":"A caller in the call chain does not have permission to access unmanaged code.","needQuote":true,"needEscape":true,"nodes":[{"content":"A caller in the call chain does not have permission to access unmanaged code.","pos":[0,77]}]},{"pos":[6186,6220],"content":"The SOAP utility is not available.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SOAP utility is not available.","pos":[0,34]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.EnterpriseServices.Internal.ISoapUtility\n  id: ISoapUtility\n  children:\n  - System.EnterpriseServices.Internal.ISoapUtility.GetServerBinPath(System.String,System.String,System.String,System.String@)\n  - System.EnterpriseServices.Internal.ISoapUtility.GetServerPhysicalPath(System.String,System.String,System.String,System.String@)\n  - System.EnterpriseServices.Internal.ISoapUtility.Present\n  langs:\n  - csharp\n  name: ISoapUtility\n  nameWithType: ISoapUtility\n  fullName: System.EnterpriseServices.Internal.ISoapUtility\n  type: Interface\n  summary: Provides utilities to support the exporting of COM+ SOAP-enabled application proxies by the server and the importing of the proxies by the client.\n  remarks: \"The utility functions that ISoapUtility provides are called from numerous locations within COM+; however, their primary purpose is to support the export and import of client proxies.  \\n  \\n See <xref:System.EnterpriseServices.Internal.SoapUtility> for the default implementation.  \\n  \\n ISoapUtility is used internally by the .NET Framework. You do not need to use it directly in your code.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.Guid(\"5AC4CB7E-F89F-429b-926B-C7F940936BF4\")]\n\n      public interface ISoapUtility\n  implements: []\n  platform:\n  - net462\n- uid: System.EnterpriseServices.Internal.ISoapUtility.GetServerBinPath(System.String,System.String,System.String,System.String@)\n  id: GetServerBinPath(System.String,System.String,System.String,System.String@)\n  parent: System.EnterpriseServices.Internal.ISoapUtility\n  langs:\n  - csharp\n  name: GetServerBinPath(String,String,String,String)\n  nameWithType: ISoapUtility.GetServerBinPath(String,String,String,String)\n  fullName: System.EnterpriseServices.Internal.ISoapUtility.GetServerBinPath(String,String,String,String)\n  type: Method\n  assemblies:\n  - System.EnterpriseServices\n  namespace: System.EnterpriseServices.Internal\n  summary: Returns the path for the SOAP virtual root bin directory.\n  syntax:\n    content: public void GetServerBinPath (string rootWebServer, string inBaseUrl, string inVirtualRoot, out string binPath);\n    parameters:\n    - id: rootWebServer\n      type: System.String\n      description: The root Web server.\n    - id: inBaseUrl\n      type: System.String\n      description: The base URL address.\n    - id: inVirtualRoot\n      type: System.String\n      description: The name of the virtual root.\n    - id: binPath\n      type: System.String\n      description: When this method returns, this parameter contains the file path for the SOAP virtual root bin directory.\n  overload: System.EnterpriseServices.Internal.ISoapUtility.GetServerBinPath*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A caller in the call chain does not have permission to access unmanaged code.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The SOAP utility is not available.\n  - type: System.EnterpriseServices.ServicedComponentException\n    commentId: T:System.EnterpriseServices.ServicedComponentException\n    description: The call to get the system directory failed.\n  platform:\n  - net462\n- uid: System.EnterpriseServices.Internal.ISoapUtility.GetServerPhysicalPath(System.String,System.String,System.String,System.String@)\n  id: GetServerPhysicalPath(System.String,System.String,System.String,System.String@)\n  parent: System.EnterpriseServices.Internal.ISoapUtility\n  langs:\n  - csharp\n  name: GetServerPhysicalPath(String,String,String,String)\n  nameWithType: ISoapUtility.GetServerPhysicalPath(String,String,String,String)\n  fullName: System.EnterpriseServices.Internal.ISoapUtility.GetServerPhysicalPath(String,String,String,String)\n  type: Method\n  assemblies:\n  - System.EnterpriseServices\n  namespace: System.EnterpriseServices.Internal\n  summary: Returns the path for the SOAP virtual root.\n  syntax:\n    content: public void GetServerPhysicalPath (string rootWebServer, string inBaseUrl, string inVirtualRoot, out string physicalPath);\n    parameters:\n    - id: rootWebServer\n      type: System.String\n      description: The root Web server.\n    - id: inBaseUrl\n      type: System.String\n      description: The base URL address.\n    - id: inVirtualRoot\n      type: System.String\n      description: The name of the virtual root.\n    - id: physicalPath\n      type: System.String\n      description: When this method returns, this parameter contains the file path for the SOAP virtual root.\n  overload: System.EnterpriseServices.Internal.ISoapUtility.GetServerPhysicalPath*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A caller in the call chain does not have permission to access unmanaged code.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The SOAP utility is not available.\n  - type: System.EnterpriseServices.ServicedComponentException\n    commentId: T:System.EnterpriseServices.ServicedComponentException\n    description: The call to get the system directory failed.\n  platform:\n  - net462\n- uid: System.EnterpriseServices.Internal.ISoapUtility.Present\n  id: Present\n  parent: System.EnterpriseServices.Internal.ISoapUtility\n  langs:\n  - csharp\n  name: Present()\n  nameWithType: ISoapUtility.Present()\n  fullName: System.EnterpriseServices.Internal.ISoapUtility.Present()\n  type: Method\n  assemblies:\n  - System.EnterpriseServices\n  namespace: System.EnterpriseServices.Internal\n  summary: Determines whether authenticated, encrypted SOAP interfaces are present.\n  syntax:\n    content: public void Present ();\n    parameters: []\n  overload: System.EnterpriseServices.Internal.ISoapUtility.Present*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A caller in the call chain does not have permission to access unmanaged code.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The SOAP utility is not available.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.EnterpriseServices.ServicedComponentException\n  parent: System.EnterpriseServices\n  isExternal: false\n  name: ServicedComponentException\n  nameWithType: ServicedComponentException\n  fullName: System.EnterpriseServices.ServicedComponentException\n- uid: System.EnterpriseServices.Internal.ISoapUtility.GetServerBinPath(System.String,System.String,System.String,System.String@)\n  parent: System.EnterpriseServices.Internal.ISoapUtility\n  isExternal: false\n  name: GetServerBinPath(String,String,String,String)\n  nameWithType: ISoapUtility.GetServerBinPath(String,String,String,String)\n  fullName: System.EnterpriseServices.Internal.ISoapUtility.GetServerBinPath(String,String,String,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.EnterpriseServices.Internal.ISoapUtility.GetServerPhysicalPath(System.String,System.String,System.String,System.String@)\n  parent: System.EnterpriseServices.Internal.ISoapUtility\n  isExternal: false\n  name: GetServerPhysicalPath(String,String,String,String)\n  nameWithType: ISoapUtility.GetServerPhysicalPath(String,String,String,String)\n  fullName: System.EnterpriseServices.Internal.ISoapUtility.GetServerPhysicalPath(String,String,String,String)\n- uid: System.EnterpriseServices.Internal.ISoapUtility.Present\n  parent: System.EnterpriseServices.Internal.ISoapUtility\n  isExternal: false\n  name: Present()\n  nameWithType: ISoapUtility.Present()\n  fullName: System.EnterpriseServices.Internal.ISoapUtility.Present()\n- uid: System.EnterpriseServices.Internal.ISoapUtility.GetServerBinPath*\n  parent: System.EnterpriseServices.Internal.ISoapUtility\n  isExternal: false\n  name: GetServerBinPath\n  nameWithType: ISoapUtility.GetServerBinPath\n- uid: System.EnterpriseServices.Internal.ISoapUtility.GetServerPhysicalPath*\n  parent: System.EnterpriseServices.Internal.ISoapUtility\n  isExternal: false\n  name: GetServerPhysicalPath\n  nameWithType: ISoapUtility.GetServerPhysicalPath\n- uid: System.EnterpriseServices.Internal.ISoapUtility.Present*\n  parent: System.EnterpriseServices.Internal.ISoapUtility\n  isExternal: false\n  name: Present\n  nameWithType: ISoapUtility.Present\n"}