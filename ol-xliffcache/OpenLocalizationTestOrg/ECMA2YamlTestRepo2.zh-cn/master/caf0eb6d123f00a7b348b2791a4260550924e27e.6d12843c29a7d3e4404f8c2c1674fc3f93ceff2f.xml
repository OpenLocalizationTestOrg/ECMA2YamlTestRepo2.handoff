{"nodes":[{"pos":[2291,2416],"content":"Provides the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> base class for a strongly typed collection.","needQuote":true,"needEscape":true,"source":"Provides the <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class for a strongly typed collection."},{"pos":[2429,2900],"content":"A CollectionBase instance is always modifiable. See <xref:System.Collections.ReadOnlyCollectionBase> for a read-only version of this class.       The capacity of a CollectionBase is the number of elements the CollectionBase can hold. As elements are added to a CollectionBase, the capacity is automatically increased as required through reallocation. The capacity can be decreased by setting the <xref:System.Collections.CollectionBase.Capacity%2A> property explicitly.","needQuote":false,"needEscape":true,"nodes":[{"content":"A CollectionBase instance is always modifiable. See <xref:System.Collections.ReadOnlyCollectionBase> for a read-only version of this class.       The capacity of a CollectionBase is the number of elements the CollectionBase can hold. As elements are added to a CollectionBase, the capacity is automatically increased as required through reallocation. The capacity can be decreased by setting the <xref:System.Collections.CollectionBase.Capacity%2A> property explicitly.","pos":[0,469],"nodes":[{"content":"A CollectionBase instance is always modifiable.","pos":[0,47]},{"content":"See &lt;xref:System.Collections.ReadOnlyCollectionBase&gt; for a read-only version of this class.","pos":[48,139],"source":" See <xref:System.Collections.ReadOnlyCollectionBase> for a read-only version of this class."},{"content":"The capacity of a CollectionBase is the number of elements the CollectionBase can hold.","pos":[146,233]},{"content":"As elements are added to a CollectionBase, the capacity is automatically increased as required through reallocation.","pos":[234,350]},{"content":"The capacity can be decreased by setting the &lt;xref:System.Collections.CollectionBase.Capacity%2A&gt; property explicitly.","pos":[351,469],"source":" The capacity can be decreased by setting the <xref:System.Collections.CollectionBase.Capacity%2A> property explicitly."}]}]},{"pos":[4020,4149],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the default initial capacity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.CollectionBase\"></xref> class with the default initial capacity."},{"pos":[4162,4732],"content":"The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold. As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array.       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>.       This constructor is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold. As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array.       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>.       This constructor is an O(1) operation.","pos":[0,566],"nodes":[{"content":"The capacity of a &lt;xref:System.Collections.CollectionBase&gt; is the number of elements that the &lt;xref:System.Collections.CollectionBase&gt; can hold.","pos":[0,144],"source":"The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold."},{"content":"As elements are added to a &lt;xref:System.Collections.CollectionBase&gt;, the capacity is automatically increased as required by reallocating the internal array.","pos":[145,301],"source":" As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array."},{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.CollectionBase&gt;.","pos":[308,521],"source":"       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>."},{"content":"This constructor is an O(1) operation.","pos":[528,566]}]}]},{"pos":[5292,5415],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified capacity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.CollectionBase\"></xref> class with the specified capacity."},{"pos":[5428,6025],"content":"The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold. As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array.       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>.       This constructor is an O(`n`) operation, where `n` is `capacity`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The capacity of a &lt;xref:System.Collections.CollectionBase&gt; is the number of elements that the &lt;xref:System.Collections.CollectionBase&gt; can hold.","pos":[0,144],"source":"The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold."},{"content":"As elements are added to a &lt;xref:System.Collections.CollectionBase&gt;, the capacity is automatically increased as required by reallocating the internal array.","pos":[145,301],"source":" As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array."},{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.CollectionBase&gt;.","pos":[308,521],"source":"       If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`capacity`</ph>.","pos":[528,593],"source":"       This constructor is an O(`n`) operation, where `n` is `capacity`."}]},{"pos":[6170,6231],"content":"The number of elements that the new list can initially store.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of elements that the new list can initially store.","pos":[0,61]}]},{"pos":[6653,6765],"content":"Gets or sets the number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can contain.","needQuote":true,"needEscape":true,"source":"Gets or sets the number of elements that the <xref href=\"System.Collections.CollectionBase\"></xref> can contain."},{"pos":[6778,7699],"content":"Capacity is the number of elements that the <xref:System.Collections.CollectionBase> can store. <xref:System.Collections.CollectionBase.Count%2A> is the number of elements that are actually in the <xref:System.Collections.CollectionBase>.       Capacity is always greater than or equal to <xref:System.Collections.CollectionBase.Count%2A>. If <xref:System.Collections.CollectionBase.Count%2A> exceeds Capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.       The capacity can be decreased by setting the Capacity property explicitly. When the value of Capacity is set explicitly, the internal array is also reallocated to accommodate the specified capacity.       Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.","needQuote":false,"needEscape":true,"nodes":[{"content":"Capacity is the number of elements that the &lt;xref:System.Collections.CollectionBase&gt; can store.","pos":[0,95],"source":"Capacity is the number of elements that the <xref:System.Collections.CollectionBase> can store."},{"content":"&lt;xref:System.Collections.CollectionBase.Count%2A&gt; is the number of elements that are actually in the &lt;xref:System.Collections.CollectionBase&gt;.","pos":[96,238],"source":" <xref:System.Collections.CollectionBase.Count%2A> is the number of elements that are actually in the <xref:System.Collections.CollectionBase>."},{"content":"Capacity is always greater than or equal to &lt;xref:System.Collections.CollectionBase.Count%2A&gt;.","pos":[245,339],"source":"       Capacity is always greater than or equal to <xref:System.Collections.CollectionBase.Count%2A>."},{"content":"If &lt;xref:System.Collections.CollectionBase.Count%2A&gt; exceeds Capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[340,568],"source":" If <xref:System.Collections.CollectionBase.Count%2A> exceeds Capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements."},{"content":"The capacity can be decreased by setting the Capacity property explicitly.","pos":[575,649]},{"content":"When the value of Capacity is set explicitly, the internal array is also reallocated to accommodate the specified capacity.","pos":[650,773]},{"content":"Retrieving the value of this property is an O(1) operation; setting the property is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the new capacity.","pos":[780,915],"source":"       Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity."}]},{"pos":[7814,7913],"content":"The number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can contain.","needQuote":true,"needEscape":true,"source":"The number of elements that the <xref href=\"System.Collections.CollectionBase\"></xref> can contain."},{"pos":[8098,8191],"content":"Capacity is set to a value that is less than <xref:System.Collections.CollectionBase.Count*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Capacity is set to a value that is less than &lt;xref:System.Collections.CollectionBase.Count*&gt;.","pos":[0,93],"source":"Capacity is set to a value that is less than <xref:System.Collections.CollectionBase.Count*>."}]},{"pos":[8292,8343],"content":"There is not enough memory available on the system.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory available on the system.","pos":[0,51]}]},{"pos":[8684,8811],"content":"Removes all objects from the <xref href=\"System.Collections.CollectionBase\"></xref> instance. This method cannot be overridden.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes all objects from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","pos":[0,93],"source":"Removes all objects from the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"content":"This method cannot be overridden.","pos":[94,127]}]},{"pos":[8824,9220],"content":"<xref:System.Collections.CollectionBase.Count%2A> is set to zero.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.       To perform custom actions before or after the collection is cleared, override the protected <xref:System.Collections.CollectionBase.OnClear%2A> or <xref:System.Collections.CollectionBase.OnClearComplete%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Collections.CollectionBase.Count%2A&gt; is set to zero.","pos":[0,65],"source":"<xref:System.Collections.CollectionBase.Count%2A> is set to zero."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.CollectionBase.Count%2A&gt;.","pos":[72,171],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>."},{"content":"To perform custom actions before or after the collection is cleared, override the protected &lt;xref:System.Collections.CollectionBase.OnClear%2A&gt; or &lt;xref:System.Collections.CollectionBase.OnClearComplete%2A&gt; method.","pos":[178,392],"source":"       To perform custom actions before or after the collection is cleared, override the protected <xref:System.Collections.CollectionBase.OnClear%2A> or <xref:System.Collections.CollectionBase.OnClearComplete%2A> method."}]},{"pos":[9692,9837],"content":"Gets the number of elements contained in the <xref href=\"System.Collections.CollectionBase\"></xref> instance. This property cannot be overridden.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of elements contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","pos":[0,109],"source":"Gets the number of elements contained in the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"content":"This property cannot be overridden.","pos":[110,145]}]},{"pos":[10482,10656],"content":"The number of elements contained in the <xref href=\"System.Collections.CollectionBase\"></xref> instance.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The number of elements contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","pos":[0,104],"source":"The number of elements contained in the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[111,170]}]},{"pos":[11108,11220],"content":"Returns an enumerator that iterates through the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Returns an enumerator that iterates through the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[11233,14581],"content":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       While the GetEnumerator method is not visible to COM clients by default, inheriting the <xref:System.Collections.CollectionBase> class can expose it and can cause undesirable behavior in COM clients.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Visual Basic, C#]       The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,137],"source":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[139,230],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[237,357]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[364,447]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[448,544],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[545,640],"source":" At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[641,858],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[865,1061],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1062,1186],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1193,1420],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1421,1552],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[1553,1718],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1719,1943],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1950,2022]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[2023,2326],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the element that it is set to, even if the enumerator is already invalidated.","pos":[2327,2603],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated."},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.","pos":[2610,2764]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[2765,2902]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[2903,3084]},{"content":"While the GetEnumerator method is not visible to COM clients by default, inheriting the &lt;xref:System.Collections.CollectionBase&gt; class can expose it and can cause undesirable behavior in COM clients.","pos":[3091,3290],"source":"       While the GetEnumerator method is not visible to COM clients by default, inheriting the <xref:System.Collections.CollectionBase> class can expose it and can cause undesirable behavior in COM clients."},{"content":"This method is an O(1) operation.","pos":[3297,3330]}]},{"pos":[15279,15392],"content":"An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[15827,15988],"content":"Gets an <bpt id=\"p1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the list of elements in the <bpt id=\"p2\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets an <xref href=\"System.Collections.ArrayList\"></xref> containing the list of elements in the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[16000,16183],"content":"The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the InnerList property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The On* methods are invoked only on the instance returned by the &lt;xref:System.Collections.CollectionBase.List%2A&gt; property, but not on the instance returned by the InnerList property.","pos":[0,183],"source":"The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the InnerList property."}]},{"pos":[16338,16551],"content":"An <xref href=\"System.Collections.ArrayList\"></xref> representing the <xref href=\"System.Collections.CollectionBase\"></xref> instance itself.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the <bpt id=\"p2\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance itself.","pos":[0,141],"source":"An <xref href=\"System.Collections.ArrayList\"></xref> representing the <xref href=\"System.Collections.CollectionBase\"></xref> instance itself."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[148,207]}]},{"pos":[16958,17101],"content":"Gets an &lt;xref:System.Collections.IList&gt; containing the list of elements in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets an <xref:System.Collections.IList> containing the list of elements in the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[17114,17365],"content":"The On* methods are invoked only on the instance returned by the List property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The On* methods are invoked only on the instance returned by the List property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       Retrieving the value of this property is an O(1) operation.","pos":[0,249],"nodes":[{"content":"The On* methods are invoked only on the instance returned by the List property, but not on the instance returned by the &lt;xref:System.Collections.CollectionBase.InnerList%2A&gt; property.","pos":[0,183],"source":"The On* methods are invoked only on the instance returned by the List property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[190,249]}]}]},{"pos":[18031,18154],"content":"An &lt;xref:System.Collections.IList&gt; representing the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance itself.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.IList> representing the <xref href=\"System.Collections.CollectionBase\"></xref> instance itself."},{"pos":[18574,18709],"content":"Performs additional custom processes when clearing the contents of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Performs additional custom processes when clearing the contents of the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[18722,19257],"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       If the process fails, the collection reverts back to its previous state.       The default implementation of this method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       If the process fails, the collection reverts back to its previous state.       The default implementation of this method is an O(1) operation.","pos":[0,529],"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.","pos":[0,146]},{"content":"The On* methods are invoked only on the instance returned by the &lt;xref:System.Collections.CollectionBase.List%2A&gt; property, but not on the instance returned by the &lt;xref:System.Collections.CollectionBase.InnerList%2A&gt; property.","pos":[153,380],"source":"       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property."},{"content":"If the process fails, the collection reverts back to its previous state.","pos":[387,459]},{"content":"The default implementation of this method is an O(1) operation.","pos":[466,529]}]}]},{"pos":[19798,19934],"content":"Performs additional custom processes after clearing the contents of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Performs additional custom processes after clearing the contents of the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[19947,20400],"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       The default implementation of this method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       The default implementation of this method is an O(1) operation.","pos":[0,449],"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.","pos":[0,145]},{"content":"The On* methods are invoked only on the instance returned by the &lt;xref:System.Collections.CollectionBase.List%2A&gt; property, but not on the instance returned by the &lt;xref:System.Collections.CollectionBase.InnerList%2A&gt; property.","pos":[152,379],"source":"       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property."},{"content":"The default implementation of this method is an O(1) operation.","pos":[386,449]}]}]},{"pos":[21014,21155],"content":"Performs additional custom processes before inserting a new element into the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Performs additional custom processes before inserting a new element into the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[21168,21711],"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       If the process fails, the collection reverts back to its previous state.       The default implementation of this method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       If the process fails, the collection reverts back to its previous state.       The default implementation of this method is an O(1) operation.","pos":[0,537],"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.","pos":[0,154]},{"content":"The On* methods are invoked only on the instance returned by the &lt;xref:System.Collections.CollectionBase.List%2A&gt; property, but not on the instance returned by the &lt;xref:System.Collections.CollectionBase.InnerList%2A&gt; property.","pos":[161,388],"source":"       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property."},{"content":"If the process fails, the collection reverts back to its previous state.","pos":[395,467]},{"content":"The default implementation of this method is an O(1) operation.","pos":[474,537]}]}]},{"pos":[22395,22443],"content":"The zero-based index at which to insert <ph id=\"ph1\">`value`</ph>.","needQuote":true,"needEscape":true,"source":"The zero-based index at which to insert `value`."},{"pos":[22505,22545],"content":"The new value of the element at <ph id=\"ph1\">`index`</ph>.","needQuote":true,"needEscape":true,"source":"The new value of the element at `index`."},{"pos":[23106,23246],"content":"Performs additional custom processes after inserting a new element into the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Performs additional custom processes after inserting a new element into the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[23259,23900],"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       The collection reverts back to its previous state if one of the following occurs:      -   The process fails.      -   This method is overridden to throw an exception.       The default implementation of this method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       The collection reverts back to its previous state if one of the following occurs:      -   The process fails.      -   This method is overridden to throw an exception.       The default implementation of this method is an O(1) operation.","pos":[0,631],"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.","pos":[0,153]},{"content":"The On* methods are invoked only on the instance returned by the &lt;xref:System.Collections.CollectionBase.List%2A&gt; property, but not on the instance returned by the &lt;xref:System.Collections.CollectionBase.InnerList%2A&gt; property.","pos":[160,387],"source":"       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property."},{"content":"The collection reverts back to its previous state if one of the following occurs:      -   The process fails.","pos":[394,503]},{"content":"-   This method is overridden to throw an exception.","pos":[509,561]},{"content":"The default implementation of this method is an O(1) operation.","pos":[568,631]}]}]},{"pos":[24068,24116],"content":"The zero-based index at which to insert <ph id=\"ph1\">`value`</ph>.","needQuote":true,"needEscape":true,"source":"The zero-based index at which to insert `value`."},{"pos":[24178,24218],"content":"The new value of the element at <ph id=\"ph1\">`index`</ph>.","needQuote":true,"needEscape":true,"source":"The new value of the element at `index`."},{"pos":[24747,24882],"content":"Performs additional custom processes when removing an element from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Performs additional custom processes when removing an element from the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[24895,25437],"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       If the process fails, the collection reverts back to its previous state.       The default implementation of this method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       If the process fails, the collection reverts back to its previous state.       The default implementation of this method is an O(1) operation.","pos":[0,536],"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.","pos":[0,153]},{"content":"The On* methods are invoked only on the instance returned by the &lt;xref:System.Collections.CollectionBase.List%2A&gt; property, but not on the instance returned by the &lt;xref:System.Collections.CollectionBase.InnerList%2A&gt; property.","pos":[160,387],"source":"       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property."},{"content":"If the process fails, the collection reverts back to its previous state.","pos":[394,466]},{"content":"The default implementation of this method is an O(1) operation.","pos":[473,536]}]}]},{"pos":[26121,26172],"content":"The zero-based index at which <ph id=\"ph1\">`value`</ph> can be found.","needQuote":true,"needEscape":true,"source":"The zero-based index at which `value` can be found."},{"pos":[26234,26282],"content":"The value of the element to remove from <ph id=\"ph1\">`index`</ph>.","needQuote":true,"needEscape":true,"source":"The value of the element to remove from `index`."},{"pos":[26843,26979],"content":"Performs additional custom processes after removing an element from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Performs additional custom processes after removing an element from the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[26992,27632],"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       The collection reverts back to its previous state if one of the following occurs:      -   The process fails.      -   This method is overridden to throw an exception.       The default implementation of this method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       The collection reverts back to its previous state if one of the following occurs:      -   The process fails.      -   This method is overridden to throw an exception.       The default implementation of this method is an O(1) operation.","pos":[0,630],"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.","pos":[0,152]},{"content":"The On* methods are invoked only on the instance returned by the &lt;xref:System.Collections.CollectionBase.List%2A&gt; property, but not on the instance returned by the &lt;xref:System.Collections.CollectionBase.InnerList%2A&gt; property.","pos":[159,386],"source":"       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property."},{"content":"The collection reverts back to its previous state if one of the following occurs:      -   The process fails.","pos":[393,502]},{"content":"-   This method is overridden to throw an exception.","pos":[508,560]},{"content":"The default implementation of this method is an O(1) operation.","pos":[567,630]}]}]},{"pos":[27800,27851],"content":"The zero-based index at which <ph id=\"ph1\">`value`</ph> can be found.","needQuote":true,"needEscape":true,"source":"The zero-based index at which `value` can be found."},{"pos":[27913,27961],"content":"The value of the element to remove from <ph id=\"ph1\">`index`</ph>.","needQuote":true,"needEscape":true,"source":"The value of the element to remove from `index`."},{"pos":[28524,28655],"content":"Performs additional custom processes before setting a value in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Performs additional custom processes before setting a value in the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[28668,29206],"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       If the process fails, the collection reverts back to its previous state.       The default implementation of this method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       If the process fails, the collection reverts back to its previous state.       The default implementation of this method is an O(1) operation.","pos":[0,532],"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.","pos":[0,149]},{"content":"The On* methods are invoked only on the instance returned by the &lt;xref:System.Collections.CollectionBase.List%2A&gt; property, but not on the instance returned by the &lt;xref:System.Collections.CollectionBase.InnerList%2A&gt; property.","pos":[156,383],"source":"       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property."},{"content":"If the process fails, the collection reverts back to its previous state.","pos":[390,462]},{"content":"The default implementation of this method is an O(1) operation.","pos":[469,532]}]}]},{"pos":[29901,29955],"content":"The zero-based index at which <ph id=\"ph1\">`oldValue`</ph> can be found.","needQuote":true,"needEscape":true,"source":"The zero-based index at which `oldValue` can be found."},{"pos":[30020,30057],"content":"The value to replace with <ph id=\"ph1\">`newValue`</ph>.","needQuote":true,"needEscape":true,"source":"The value to replace with `newValue`."},{"pos":[30122,30162],"content":"The new value of the element at <ph id=\"ph1\">`index`</ph>.","needQuote":true,"needEscape":true,"source":"The new value of the element at `index`."},{"pos":[30754,30884],"content":"Performs additional custom processes after setting a value in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Performs additional custom processes after setting a value in the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"pos":[30897,31533],"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       The collection reverts back to its previous state if one of the following occurs:      -   The process fails.      -   This method is overridden to throw an exception.       The default implementation of this method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       The collection reverts back to its previous state if one of the following occurs:      -   The process fails.      -   This method is overridden to throw an exception.       The default implementation of this method is an O(1) operation.","pos":[0,626],"nodes":[{"content":"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.","pos":[0,148]},{"content":"The On* methods are invoked only on the instance returned by the &lt;xref:System.Collections.CollectionBase.List%2A&gt; property, but not on the instance returned by the &lt;xref:System.Collections.CollectionBase.InnerList%2A&gt; property.","pos":[155,382],"source":"       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property."},{"content":"The collection reverts back to its previous state if one of the following occurs:      -   The process fails.","pos":[389,498]},{"content":"-   This method is overridden to throw an exception.","pos":[504,556]},{"content":"The default implementation of this method is an O(1) operation.","pos":[563,626]}]}]},{"pos":[31718,31772],"content":"The zero-based index at which <ph id=\"ph1\">`oldValue`</ph> can be found.","needQuote":true,"needEscape":true,"source":"The zero-based index at which `oldValue` can be found."},{"pos":[31837,31874],"content":"The value to replace with <ph id=\"ph1\">`newValue`</ph>.","needQuote":true,"needEscape":true,"source":"The value to replace with `newValue`."},{"pos":[31939,31979],"content":"The new value of the element at <ph id=\"ph1\">`index`</ph>.","needQuote":true,"needEscape":true,"source":"The new value of the element at `index`."},{"pos":[32471,32532],"content":"Performs additional custom processes when validating a value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs additional custom processes when validating a value.","pos":[0,61]}]},{"pos":[32545,33109],"content":"The default implementation of this method determines whether `value` is `null`, and, if so, throws <xref:System.ArgumentNullException>. It is intended to be overridden by a derived class to perform additional action when the specified element is validated.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.       The default implementation of this method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The default implementation of this method determines whether <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, and, if so, throws &lt;xref:System.ArgumentNullException&gt;.","pos":[0,135],"source":"The default implementation of this method determines whether `value` is `null`, and, if so, throws <xref:System.ArgumentNullException>."},{"content":"It is intended to be overridden by a derived class to perform additional action when the specified element is validated.","pos":[136,256]},{"content":"The On* methods are invoked only on the instance returned by the &lt;xref:System.Collections.CollectionBase.List%2A&gt; property, but not on the instance returned by the &lt;xref:System.Collections.CollectionBase.InnerList%2A&gt; property.","pos":[263,490],"source":"       The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property."},{"content":"The default implementation of this method is an O(1) operation.","pos":[497,560]}]},{"pos":[33785,33808],"content":"The object to validate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to validate.","pos":[0,23]}]},{"pos":[33983,34066],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[34465,34611],"content":"Removes the element at the specified index of the <xref href=\"System.Collections.CollectionBase\"></xref> instance. This method is not overridable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the element at the specified index of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","pos":[0,114],"source":"Removes the element at the specified index of the <xref href=\"System.Collections.CollectionBase\"></xref> instance."},{"content":"This method is not overridable.","pos":[115,146]}]},{"pos":[34624,35077],"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[0,134]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[135,225]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[226,345]},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.CollectionBase.Count%2A&gt;.","pos":[352,451],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>."}]},{"pos":[35212,35258],"content":"The zero-based index of the element to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the element to remove.","pos":[0,46]}]},{"pos":[35444,35598],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.CollectionBase.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref:System.Collections.CollectionBase.Count*&gt;</ph>.","pos":[44,150],"source":"       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.CollectionBase.Count*>."}]},{"pos":[36201,36379],"content":"Copies the entire <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the specified index of the target array.","needQuote":true,"needEscape":true,"source":"Copies the entire <xref href=\"System.Collections.CollectionBase\"></xref> to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array."},{"pos":[36392,36649],"content":"The specified array must be of a compatible type.       This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The specified array must be of a compatible type.","pos":[0,49]},{"content":"This method uses &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt; to copy the elements.","pos":[56,147],"source":"       This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.CollectionBase.Count%2A&gt;.","pos":[154,253],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>."}]},{"pos":[36800,37002],"content":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.CollectionBase\"></xref>. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,147],"source":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.CollectionBase\"></xref>."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[148,202],"source":" The <xref:System.Array> must have zero-based indexing."}]},{"pos":[37063,37119],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[37321,37404],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[37519,37556],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero."},{"pos":[37652,37916],"content":"<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref href=\"System.Collections.CollectionBase\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","pos":[0,39],"source":"<code>array</code> is multidimensional."},{"content":"-or-       The number of elements in the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is greater than the available space from <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","pos":[46,258],"source":"       -or-       The number of elements in the source <xref href=\"System.Collections.CollectionBase\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}]},{"pos":[38018,38175],"content":"The type of the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of the source <xref href=\"System.Collections.CollectionBase\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."},{"pos":[38726,38857],"content":"Gets a value indicating whether access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is synchronized (thread safe).","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether access to the <xref href=\"System.Collections.CollectionBase\"></xref> is synchronized (thread safe)."},{"pos":[38870,40073],"content":"A <xref:System.Collections.CollectionBase> instance is not synchronized. Derived classes can provide a synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property.       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:       [!code-cpp[System.Collections.CollectionBase#2](~/add/codesnippet/cpp/c3b5b435-5577-4ea3-8822-_1.cpp)]  [!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/c3b5b435-5577-4ea3-8822-_1.cs)]  [!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/c3b5b435-5577-4ea3-8822-_1.vb)]       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Collections.CollectionBase&gt; instance is not synchronized.","pos":[0,72],"source":"A <xref:System.Collections.CollectionBase> instance is not synchronized."},{"content":"Derived classes can provide a synchronized version of the &lt;xref:System.Collections.CollectionBase&gt; using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; property.","pos":[73,241],"source":" Derived classes can provide a synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property."},{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[248,326]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[327,464]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[465,646]},{"content":"The following code example shows how to lock the collection using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; during the entire enumeration:       <bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Collections.CollectionBase#2<ept id=\"p2\">](~/add/codesnippet/cpp/c3b5b435-5577-4ea3-8822-_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Collections.CollectionBase#2<ept id=\"p4\">](~/add/codesnippet/csharp/c3b5b435-5577-4ea3-8822-_1.cs)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Collections.CollectionBase#2<ept id=\"p6\">](~/add/codesnippet/visualbasic/c3b5b435-5577-4ea3-8822-_1.vb)</ept><ept id=\"p5\">]</ept>       Retrieving the value of this property is an O(1) operation.","pos":[653,1193],"source":"       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:       [!code-cpp[System.Collections.CollectionBase#2](~/add/codesnippet/cpp/c3b5b435-5577-4ea3-8822-_1.cpp)]  [!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/c3b5b435-5577-4ea3-8822-_1.cs)]  [!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/c3b5b435-5577-4ea3-8822-_1.vb)]       Retrieving the value of this property is an O(1) operation."}]},{"pos":[40216,40533],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.CollectionBase\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access to the <bpt id=\"p2\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is synchronized (thread safe); otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,238],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.CollectionBase\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[239,317],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[41164,41280],"content":"Gets an object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.CollectionBase\"></xref>."},{"pos":[41293,42889],"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the <xref:System.Collections.CollectionBase>, not directly on the <xref:System.Collections.CollectionBase>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.CollectionBase> object.       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:       [!code-cpp[System.Collections.CollectionBase#2](~/add/codesnippet/cpp/cacfe8dc-771f-47eb-a7e1-_1.cpp)]  [!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/cacfe8dc-771f-47eb-a7e1-_1.cs)]  [!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/cacfe8dc-771f-47eb-a7e1-_1.vb)]       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Derived classes can provide their own synchronized version of the &lt;xref:System.Collections.CollectionBase&gt; using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; property.","pos":[0,176],"source":"Derived classes can provide their own synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; of the &lt;xref:System.Collections.CollectionBase&gt;, not directly on the &lt;xref:System.Collections.CollectionBase&gt;.","pos":[177,391],"source":" The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the <xref:System.Collections.CollectionBase>, not directly on the <xref:System.Collections.CollectionBase>."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[392,473]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.CollectionBase&gt; object.","pos":[474,634],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.CollectionBase> object."},{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[641,719]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[720,857]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[858,1039]},{"content":"The following code example shows how to lock the collection using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; during the entire enumeration:       <bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Collections.CollectionBase#2<ept id=\"p2\">](~/add/codesnippet/cpp/cacfe8dc-771f-47eb-a7e1-_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Collections.CollectionBase#2<ept id=\"p4\">](~/add/codesnippet/csharp/cacfe8dc-771f-47eb-a7e1-_1.cs)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Collections.CollectionBase#2<ept id=\"p6\">](~/add/codesnippet/visualbasic/cacfe8dc-771f-47eb-a7e1-_1.vb)</ept><ept id=\"p5\">]</ept>       Retrieving the value of this property is an O(1) operation.","pos":[1046,1586],"source":"       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:       [!code-cpp[System.Collections.CollectionBase#2](~/add/codesnippet/cpp/cacfe8dc-771f-47eb-a7e1-_1.cpp)]  [!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/cacfe8dc-771f-47eb-a7e1-_1.cs)]  [!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/cacfe8dc-771f-47eb-a7e1-_1.vb)]       Retrieving the value of this property is an O(1) operation."}]},{"pos":[43027,43138],"content":"An object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.CollectionBase\"></xref>."},{"pos":[43760,43848],"content":"Adds an object to the end of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds an object to the end of the <xref href=\"System.Collections.CollectionBase\"></xref>."},{"pos":[43861,44408],"content":"If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array before the new element is added.       If <xref:System.Collections.CollectionBase.Count%2A> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"If &lt;xref:System.Collections.CollectionBase.Count%2A&gt; already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array before the new element is added.","pos":[0,250],"source":"If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array before the new element is added."},{"content":"If &lt;xref:System.Collections.CollectionBase.Count%2A&gt; is less than the capacity, this method is an O(1) operation.","pos":[257,370],"source":"       If <xref:System.Collections.CollectionBase.Count%2A> is less than the capacity, this method is an O(1) operation."},{"content":"If the capacity needs to be increased to accommodate the new element, this method becomes an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.CollectionBase.Count%2A&gt;.","pos":[371,545],"source":" If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>."}]},{"pos":[45058,45168],"content":"The &lt;xref:System.Object&gt; to be added to the end of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Object> to be added to the end of the <xref href=\"System.Collections.CollectionBase\"></xref>."},{"pos":[45225,45337],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> index at which the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> has been added.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.CollectionBase\"></xref> index at which the <code>value</code> has been added."},{"pos":[45531,45705],"content":"The <xref href=\"System.Collections.CollectionBase\"></xref> is read-only.       -or-       The <xref href=\"System.Collections.CollectionBase\"></xref> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","pos":[0,72],"source":"The <xref href=\"System.Collections.CollectionBase\"></xref> is read-only."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","pos":[79,166],"source":"       -or-       The <xref href=\"System.Collections.CollectionBase\"></xref> has a fixed size."}]},{"pos":[46249,46355],"content":"Determines whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contains a specific element.","needQuote":true,"needEscape":true,"source":"Determines whether the <xref href=\"System.Collections.CollectionBase\"></xref> contains a specific element."},{"pos":[46368,47069],"content":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.CollectionBase.Count%2A&gt;.","pos":[0,148],"source":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>."},{"content":"This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[155,254],"source":"       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id=\"ph1\">`item`</ph> to determine whether <ph id=\"ph2\">`item`</ph> exists.","pos":[261,469],"source":"       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id=\"ph1\">`item`</ph> parameter on the objects in the collection.","pos":[470,697],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]},{"pos":[47725,47822],"content":"The &lt;xref:System.Object&gt; to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Object> to locate in the <xref href=\"System.Collections.CollectionBase\"></xref>."},{"pos":[47881,48121],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> contains the specified <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.CollectionBase\"></xref> contains the specified <code>value</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[48757,48935],"content":"Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the first occurrence within the entire <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Searches for the specified <xref:System.Object> and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.CollectionBase\"></xref>."},{"pos":[48948,49649],"content":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.CollectionBase.Count%2A&gt;.","pos":[0,148],"source":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>."},{"content":"This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[155,254],"source":"       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id=\"ph1\">`item`</ph> to determine whether <ph id=\"ph2\">`item`</ph> exists.","pos":[261,469],"source":"       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id=\"ph1\">`item`</ph> parameter on the objects in the collection.","pos":[470,697],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]},{"pos":[50303,50400],"content":"The &lt;xref:System.Object&gt; to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Object> to locate in the <xref href=\"System.Collections.CollectionBase\"></xref>."},{"pos":[50457,50622],"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the entire <bpt id=\"p2\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, if found; otherwise, -1.","needQuote":true,"needEscape":true,"source":"The zero-based index of the first occurrence of <code>value</code> within the entire <xref href=\"System.Collections.CollectionBase\"></xref>, if found; otherwise, -1."},{"pos":[51296,51402],"content":"Inserts an element into the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index.","needQuote":true,"needEscape":true,"source":"Inserts an element into the <xref href=\"System.Collections.CollectionBase\"></xref> at the specified index."},{"pos":[51415,52240],"content":"If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.       If `index` is equal to <xref:System.Collections.CollectionBase.Count%2A>, `value` is added to the end of <xref:System.Collections.CollectionBase>.       In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"If &lt;xref:System.Collections.CollectionBase.Count%2A&gt; already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.","pos":[0,202],"source":"If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted."},{"content":"If <ph id=\"ph1\">`index`</ph> is equal to &lt;xref:System.Collections.CollectionBase.Count%2A&gt;, <ph id=\"ph2\">`value`</ph> is added to the end of &lt;xref:System.Collections.CollectionBase&gt;.","pos":[209,355],"source":"       If `index` is equal to <xref:System.Collections.CollectionBase.Count%2A>, `value` is added to the end of <xref:System.Collections.CollectionBase>."},{"content":"In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.","pos":[362,502]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[503,593]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[594,713]},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.CollectionBase.Count%2A&gt;.","pos":[720,819],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>."}]},{"pos":[52904,52961],"content":"The zero-based index at which <ph id=\"ph1\">`value`</ph> should be inserted.","needQuote":true,"needEscape":true,"source":"The zero-based index at which `value` should be inserted."},{"pos":[53023,53058],"content":"The <xref:System.Object> to insert.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to insert.","pos":[0,35],"source":"The <xref:System.Object> to insert."}]},{"pos":[53267,53409],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is greater than <xref:System.Collections.CollectionBase.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref:System.Collections.CollectionBase.Count*&gt;</ph>.","pos":[44,138],"source":"       -or-       <code>index</code> is greater than <xref:System.Collections.CollectionBase.Count*>."}]},{"pos":[53514,53688],"content":"The <xref href=\"System.Collections.CollectionBase\"></xref> is read-only.       -or-       The <xref href=\"System.Collections.CollectionBase\"></xref> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","pos":[0,72],"source":"The <xref href=\"System.Collections.CollectionBase\"></xref> is read-only."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","pos":[79,166],"source":"       -or-       The <xref href=\"System.Collections.CollectionBase\"></xref> has a fixed size."}]},{"pos":[54195,54303],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Collections.CollectionBase\"></xref> has a fixed size."},{"pos":[54316,54830],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","pos":[0,510],"nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","pos":[0,167]},{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[174,444]},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[451,510]}]}]},{"pos":[54964,55258],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.CollectionBase\"></xref> has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> has a fixed size; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,215],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.CollectionBase\"></xref> has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[216,294],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[55860,55964],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Collections.CollectionBase\"></xref> is read-only."},{"pos":[55977,56401],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","pos":[0,420],"nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]},{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[136,354]},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[361,420]}]}]},{"pos":[56534,56824],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.CollectionBase\"></xref> is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is read-only; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,211],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.CollectionBase\"></xref> is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[212,290],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[57444,57492],"content":"Gets or sets the element at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the element at the specified index.","pos":[0,48]}]},{"pos":[57505,57756],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.       Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[index]`</ph>.","pos":[0,135],"source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`."},{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[142,249]}]},{"pos":[58437,58487],"content":"The zero-based index of the element to get or set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the element to get or set.","pos":[0,50]}]},{"pos":[58545,58580],"content":"The element at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element at the specified index.","pos":[0,35]}]},{"pos":[58787,58941],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.CollectionBase.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref:System.Collections.CollectionBase.Count*&gt;</ph>.","pos":[44,150],"source":"       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.CollectionBase.Count*>."}]},{"pos":[59475,59589],"content":"Removes the first occurrence of a specific object from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes the first occurrence of a specific object from the <xref href=\"System.Collections.CollectionBase\"></xref>."},{"pos":[59602,60395],"content":"If the <xref:System.Collections.CollectionBase> does not contain the specified object, the <xref:System.Collections.CollectionBase> remains unchanged. No exception is thrown.       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.       In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the &lt;xref:System.Collections.CollectionBase&gt; does not contain the specified object, the &lt;xref:System.Collections.CollectionBase&gt; remains unchanged.","pos":[0,150],"source":"If the <xref:System.Collections.CollectionBase> does not contain the specified object, the <xref:System.Collections.CollectionBase> remains unchanged."},{"content":"No exception is thrown.","pos":[151,174]},{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.CollectionBase.Count%2A&gt;.","pos":[181,329],"source":"       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>."},{"content":"This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[336,435],"source":"       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[442,576]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[577,667]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[668,787]}]},{"pos":[61049,61148],"content":"The &lt;xref:System.Object&gt; to remove from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Object> to remove from the <xref href=\"System.Collections.CollectionBase\"></xref>."},{"pos":[61336,61452],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was not found in the <bpt id=\"p2\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <code>value</code> parameter was not found in the <xref href=\"System.Collections.CollectionBase\"></xref> object."},{"pos":[61556,61730],"content":"The <xref href=\"System.Collections.CollectionBase\"></xref> is read-only.       -or-       The <xref href=\"System.Collections.CollectionBase\"></xref> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","pos":[0,72],"source":"The <xref href=\"System.Collections.CollectionBase\"></xref> is read-only."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Collections.CollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","pos":[79,166],"source":"       -or-       The <xref href=\"System.Collections.CollectionBase\"></xref> has a fixed size."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.CollectionBase\n  id: CollectionBase\n  children:\n  - System.Collections.CollectionBase.#ctor\n  - System.Collections.CollectionBase.#ctor(System.Int32)\n  - System.Collections.CollectionBase.Capacity\n  - System.Collections.CollectionBase.Clear\n  - System.Collections.CollectionBase.Count\n  - System.Collections.CollectionBase.GetEnumerator\n  - System.Collections.CollectionBase.InnerList\n  - System.Collections.CollectionBase.List\n  - System.Collections.CollectionBase.OnClear\n  - System.Collections.CollectionBase.OnClearComplete\n  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)\n  - System.Collections.CollectionBase.OnValidate(System.Object)\n  - System.Collections.CollectionBase.RemoveAt(System.Int32)\n  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized\n  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot\n  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize\n  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly\n  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)\n  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  name: CollectionBase\n  nameWithType: CollectionBase\n  fullName: System.Collections.CollectionBase\n  type: Class\n  summary: Provides the <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class for a strongly typed collection.\n  remarks: \"A CollectionBase instance is always modifiable. See <xref:System.Collections.ReadOnlyCollectionBase> for a read-only version of this class.  \\n  \\n The capacity of a CollectionBase is the number of elements the CollectionBase can hold. As elements are added to a CollectionBase, the capacity is automatically increased as required through reallocation. The capacity can be decreased by setting the <xref:System.Collections.CollectionBase.Capacity%2A> property explicitly.\"\n  example:\n  - \"The following code example implements the CollectionBase class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/t-system.collections.col_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/t-system.collections.col_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/t-system.collections.col_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class CollectionBase : System.Collections.IList\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IList\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.#ctor\n  id: '#ctor'\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: CollectionBase()\n  nameWithType: CollectionBase.CollectionBase()\n  fullName: System.Collections.CollectionBase.CollectionBase()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.CollectionBase\"></xref> class with the default initial capacity.\n  remarks: \"The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold. As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>.  \\n  \\n This constructor is an O(1) operation.\"\n  syntax:\n    content: protected CollectionBase ();\n    parameters: []\n  overload: System.Collections.CollectionBase.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: CollectionBase(Int32)\n  nameWithType: CollectionBase.CollectionBase(Int32)\n  fullName: System.Collections.CollectionBase.CollectionBase(Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.CollectionBase\"></xref> class with the specified capacity.\n  remarks: \"The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold. As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `capacity`.\"\n  syntax:\n    content: protected CollectionBase (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The number of elements that the new list can initially store.\n  overload: System.Collections.CollectionBase.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.Capacity\n  id: Capacity\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: CollectionBase.Capacity\n  fullName: System.Collections.CollectionBase.Capacity\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets or sets the number of elements that the <xref href=\"System.Collections.CollectionBase\"></xref> can contain.\n  remarks: \"Capacity is the number of elements that the <xref:System.Collections.CollectionBase> can store. <xref:System.Collections.CollectionBase.Count%2A> is the number of elements that are actually in the <xref:System.Collections.CollectionBase>.  \\n  \\n Capacity is always greater than or equal to <xref:System.Collections.CollectionBase.Count%2A>. If <xref:System.Collections.CollectionBase.Count%2A> exceeds Capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \\n  \\n The capacity can be decreased by setting the Capacity property explicitly. When the value of Capacity is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.\"\n  syntax:\n    content: public int Capacity { get; set; }\n    return:\n      type: System.Int32\n      description: The number of elements that the <xref href=\"System.Collections.CollectionBase\"></xref> can contain.\n  overload: System.Collections.CollectionBase.Capacity*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Capacity is set to a value that is less than <xref:System.Collections.CollectionBase.Count*>.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory available on the system.\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.Clear\n  id: Clear\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: CollectionBase.Clear()\n  fullName: System.Collections.CollectionBase.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Removes all objects from the <xref href=\"System.Collections.CollectionBase\"></xref> instance. This method cannot be overridden.\n  remarks: \"<xref:System.Collections.CollectionBase.Count%2A> is set to zero.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.  \\n  \\n To perform custom actions before or after the collection is cleared, override the protected <xref:System.Collections.CollectionBase.OnClear%2A> or <xref:System.Collections.CollectionBase.OnClearComplete%2A> method.\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Collections.CollectionBase.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.Count\n  id: Count\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: Count\n  nameWithType: CollectionBase.Count\n  fullName: System.Collections.CollectionBase.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets the number of elements contained in the <xref href=\"System.Collections.CollectionBase\"></xref> instance. This property cannot be overridden.\n  remarks: ''\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/p-system.collections.col_0_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/p-system.collections.col_0_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.col_0_1.vb)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: \"The number of elements contained in the <xref href=\\\"System.Collections.CollectionBase\\\"></xref> instance.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  overload: System.Collections.CollectionBase.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: CollectionBase.GetEnumerator()\n  fullName: System.Collections.CollectionBase.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns an enumerator that iterates through the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n While the GetEnumerator method is not visible to COM clients by default, inheriting the <xref:System.Collections.CollectionBase> class can expose it and can cause undesirable behavior in COM clients.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_2_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_2_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_2_1.vb)]\"\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  overload: System.Collections.CollectionBase.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.InnerList\n  id: InnerList\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: InnerList\n  nameWithType: CollectionBase.InnerList\n  fullName: System.Collections.CollectionBase.InnerList\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets an <xref href=\"System.Collections.ArrayList\"></xref> containing the list of elements in the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  remarks: The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the InnerList property.\n  syntax:\n    content: protected System.Collections.ArrayList InnerList { get; }\n    return:\n      type: System.Collections.ArrayList\n      description: \"An <xref href=\\\"System.Collections.ArrayList\\\"></xref> representing the <xref href=\\\"System.Collections.CollectionBase\\\"></xref> instance itself.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  overload: System.Collections.CollectionBase.InnerList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.List\n  id: List\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: List\n  nameWithType: CollectionBase.List\n  fullName: System.Collections.CollectionBase.List\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets an <xref:System.Collections.IList> containing the list of elements in the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  remarks: \"The On* methods are invoked only on the instance returned by the List property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/p-system.collections.col_1_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/p-system.collections.col_1_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.col_1_1.vb)]\"\n  syntax:\n    content: protected System.Collections.IList List { get; }\n    return:\n      type: System.Collections.IList\n      description: An <xref:System.Collections.IList> representing the <xref href=\"System.Collections.CollectionBase\"></xref> instance itself.\n  overload: System.Collections.CollectionBase.List*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.OnClear\n  id: OnClear\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: OnClear()\n  nameWithType: CollectionBase.OnClear()\n  fullName: System.Collections.CollectionBase.OnClear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Performs additional custom processes when clearing the contents of the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  remarks: \"The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.  \\n  \\n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \\n  \\n If the process fails, the collection reverts back to its previous state.  \\n  \\n The default implementation of this method is an O(1) operation.\"\n  syntax:\n    content: protected virtual void OnClear ();\n    parameters: []\n  overload: System.Collections.CollectionBase.OnClear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.OnClearComplete\n  id: OnClearComplete\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: OnClearComplete()\n  nameWithType: CollectionBase.OnClearComplete()\n  fullName: System.Collections.CollectionBase.OnClearComplete()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Performs additional custom processes after clearing the contents of the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  remarks: \"The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.  \\n  \\n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \\n  \\n The default implementation of this method is an O(1) operation.\"\n  syntax:\n    content: protected virtual void OnClearComplete ();\n    parameters: []\n  overload: System.Collections.CollectionBase.OnClearComplete*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n  id: OnInsert(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: OnInsert(Int32,Object)\n  nameWithType: CollectionBase.OnInsert(Int32,Object)\n  fullName: System.Collections.CollectionBase.OnInsert(Int32,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Performs additional custom processes before inserting a new element into the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  remarks: \"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.  \\n  \\n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \\n  \\n If the process fails, the collection reverts back to its previous state.  \\n  \\n The default implementation of this method is an O(1) operation.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_1_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_1_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_1_1.vb)]\"\n  syntax:\n    content: protected virtual void OnInsert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which to insert `value`.\n    - id: value\n      type: System.Object\n      description: The new value of the element at `index`.\n  overload: System.Collections.CollectionBase.OnInsert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)\n  id: OnInsertComplete(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: OnInsertComplete(Int32,Object)\n  nameWithType: CollectionBase.OnInsertComplete(Int32,Object)\n  fullName: System.Collections.CollectionBase.OnInsertComplete(Int32,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Performs additional custom processes after inserting a new element into the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  remarks: \"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.  \\n  \\n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \\n  \\n The collection reverts back to its previous state if one of the following occurs:  \\n  \\n-   The process fails.  \\n  \\n-   This method is overridden to throw an exception.  \\n  \\n The default implementation of this method is an O(1) operation.\"\n  syntax:\n    content: protected virtual void OnInsertComplete (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which to insert `value`.\n    - id: value\n      type: System.Object\n      description: The new value of the element at `index`.\n  overload: System.Collections.CollectionBase.OnInsertComplete*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)\n  id: OnRemove(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: OnRemove(Int32,Object)\n  nameWithType: CollectionBase.OnRemove(Int32,Object)\n  fullName: System.Collections.CollectionBase.OnRemove(Int32,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Performs additional custom processes when removing an element from the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  remarks: \"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.  \\n  \\n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \\n  \\n If the process fails, the collection reverts back to its previous state.  \\n  \\n The default implementation of this method is an O(1) operation.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_0_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_0_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_0_1.vb)]\"\n  syntax:\n    content: protected virtual void OnRemove (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which `value` can be found.\n    - id: value\n      type: System.Object\n      description: The value of the element to remove from `index`.\n  overload: System.Collections.CollectionBase.OnRemove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)\n  id: OnRemoveComplete(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: OnRemoveComplete(Int32,Object)\n  nameWithType: CollectionBase.OnRemoveComplete(Int32,Object)\n  fullName: System.Collections.CollectionBase.OnRemoveComplete(Int32,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Performs additional custom processes after removing an element from the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  remarks: \"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.  \\n  \\n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \\n  \\n The collection reverts back to its previous state if one of the following occurs:  \\n  \\n-   The process fails.  \\n  \\n-   This method is overridden to throw an exception.  \\n  \\n The default implementation of this method is an O(1) operation.\"\n  syntax:\n    content: protected virtual void OnRemoveComplete (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which `value` can be found.\n    - id: value\n      type: System.Object\n      description: The value of the element to remove from `index`.\n  overload: System.Collections.CollectionBase.OnRemoveComplete*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n  id: OnSet(System.Int32,System.Object,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: OnSet(Int32,Object,Object)\n  nameWithType: CollectionBase.OnSet(Int32,Object,Object)\n  fullName: System.Collections.CollectionBase.OnSet(Int32,Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Performs additional custom processes before setting a value in the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  remarks: \"The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.  \\n  \\n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \\n  \\n If the process fails, the collection reverts back to its previous state.  \\n  \\n The default implementation of this method is an O(1) operation.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/b38eea40-0898-4372-aa13-_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/b38eea40-0898-4372-aa13-_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/b38eea40-0898-4372-aa13-_1.vb)]\"\n  syntax:\n    content: protected virtual void OnSet (int index, object oldValue, object newValue);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which `oldValue` can be found.\n    - id: oldValue\n      type: System.Object\n      description: The value to replace with `newValue`.\n    - id: newValue\n      type: System.Object\n      description: The new value of the element at `index`.\n  overload: System.Collections.CollectionBase.OnSet*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)\n  id: OnSetComplete(System.Int32,System.Object,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: OnSetComplete(Int32,Object,Object)\n  nameWithType: CollectionBase.OnSetComplete(Int32,Object,Object)\n  fullName: System.Collections.CollectionBase.OnSetComplete(Int32,Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Performs additional custom processes after setting a value in the <xref href=\"System.Collections.CollectionBase\"></xref> instance.\n  remarks: \"The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.  \\n  \\n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \\n  \\n The collection reverts back to its previous state if one of the following occurs:  \\n  \\n-   The process fails.  \\n  \\n-   This method is overridden to throw an exception.  \\n  \\n The default implementation of this method is an O(1) operation.\"\n  syntax:\n    content: protected virtual void OnSetComplete (int index, object oldValue, object newValue);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which `oldValue` can be found.\n    - id: oldValue\n      type: System.Object\n      description: The value to replace with `newValue`.\n    - id: newValue\n      type: System.Object\n      description: The new value of the element at `index`.\n  overload: System.Collections.CollectionBase.OnSetComplete*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.OnValidate(System.Object)\n  id: OnValidate(System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: OnValidate(Object)\n  nameWithType: CollectionBase.OnValidate(Object)\n  fullName: System.Collections.CollectionBase.OnValidate(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Performs additional custom processes when validating a value.\n  remarks: \"The default implementation of this method determines whether `value` is `null`, and, if so, throws <xref:System.ArgumentNullException>. It is intended to be overridden by a derived class to perform additional action when the specified element is validated.  \\n  \\n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \\n  \\n The default implementation of this method is an O(1) operation.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_3_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_3_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_3_1.vb)]\"\n  syntax:\n    content: protected virtual void OnValidate (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to validate.\n  overload: System.Collections.CollectionBase.OnValidate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: CollectionBase.RemoveAt(Int32)\n  fullName: System.Collections.CollectionBase.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Removes the element at the specified index of the <xref href=\"System.Collections.CollectionBase\"></xref> instance. This method is not overridable.\n  remarks: \"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.\"\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to remove.\n  overload: System.Collections.CollectionBase.RemoveAt*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref:System.Collections.CollectionBase.Count*>.\"\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Copies the entire <xref href=\"System.Collections.CollectionBase\"></xref> to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array.\n  remarks: \"The specified array must be of a compatible type.  \\n  \\n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.\"\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.CollectionBase\"></xref>. The <xref:System.Array> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.CollectionBase\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.CollectionBase\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.CollectionBase\"></xref> is synchronized (thread safe).\n  remarks: \"A <xref:System.Collections.CollectionBase> instance is not synchronized. Derived classes can provide a synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property.  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n [!code-cpp[System.Collections.CollectionBase#2](~/add/codesnippet/cpp/c3b5b435-5577-4ea3-8822-_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/c3b5b435-5577-4ea3-8822-_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/c3b5b435-5577-4ea3-8822-_1.vb)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.CollectionBase\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.CollectionBase\"></xref>.\n  remarks: \"Derived classes can provide their own synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the <xref:System.Collections.CollectionBase>, not directly on the <xref:System.Collections.CollectionBase>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.CollectionBase> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n [!code-cpp[System.Collections.CollectionBase#2](~/add/codesnippet/cpp/cacfe8dc-771f-47eb-a7e1-_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/cacfe8dc-771f-47eb-a7e1-_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/cacfe8dc-771f-47eb-a7e1-_1.vb)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.CollectionBase\"></xref>.\n  overload: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: CollectionBase.System.Collections.IList.Add(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Adds an object to the end of the <xref href=\"System.Collections.CollectionBase\"></xref>.\n  remarks: \"If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array before the new element is added.  \\n  \\n If <xref:System.Collections.CollectionBase.Count%2A> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/9be064c1-54ea-4721-8714-_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/9be064c1-54ea-4721-8714-_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/9be064c1-54ea-4721-8714-_1.vb)]\"\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to be added to the end of the <xref href=\"System.Collections.CollectionBase\"></xref>.\n    return:\n      type: System.Int32\n      description: The <xref href=\"System.Collections.CollectionBase\"></xref> index at which the <code>value</code> has been added.\n  overload: System.Collections.CollectionBase.System#Collections#IList#Add*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.CollectionBase\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.CollectionBase\\\"></xref> has a fixed size.\"\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: CollectionBase.System.Collections.IList.Contains(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Determines whether the <xref href=\"System.Collections.CollectionBase\"></xref> contains a specific element.\n  remarks: \"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/c05c77a6-90e8-47cd-a625-_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/c05c77a6-90e8-47cd-a625-_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/c05c77a6-90e8-47cd-a625-_1.vb)]\"\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to locate in the <xref href=\"System.Collections.CollectionBase\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.CollectionBase\"></xref> contains the specified <code>value</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.CollectionBase.System#Collections#IList#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: CollectionBase.System.Collections.IList.IndexOf(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Searches for the specified <xref:System.Object> and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.CollectionBase\"></xref>.\n  remarks: \"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/154015bb-f734-471d-93de-_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/154015bb-f734-471d-93de-_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/154015bb-f734-471d-93de-_1.vb)]\"\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to locate in the <xref href=\"System.Collections.CollectionBase\"></xref>.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code> within the entire <xref href=\"System.Collections.CollectionBase\"></xref>, if found; otherwise, -1.\n  overload: System.Collections.CollectionBase.System#Collections#IList#IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: CollectionBase.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Inserts an element into the <xref href=\"System.Collections.CollectionBase\"></xref> at the specified index.\n  remarks: \"If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.  \\n  \\n If `index` is equal to <xref:System.Collections.CollectionBase.Count%2A>, `value` is added to the end of <xref:System.Collections.CollectionBase>.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/f8b730a7-8cec-40ed-9d7e-_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/f8b730a7-8cec-40ed-9d7e-_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/f8b730a7-8cec-40ed-9d7e-_1.vb)]\"\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which `value` should be inserted.\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to insert.\n  overload: System.Collections.CollectionBase.System#Collections#IList#Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than <xref:System.Collections.CollectionBase.Count*>.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.CollectionBase\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.CollectionBase\\\"></xref> has a fixed size.\"\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize\n  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.CollectionBase\"></xref> has a fixed size.\n  remarks: \"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.CollectionBase\"></xref> has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly\n  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.CollectionBase\"></xref> is read-only.\n  remarks: \"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.CollectionBase\"></xref> is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: CollectionBase.System.Collections.IList.Item(Int32)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets or sets the element at the specified index.\n  remarks: \"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/83a912ba-0bf4-468a-a9c4-_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/83a912ba-0bf4-468a-a9c4-_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/83a912ba-0bf4-468a-a9c4-_1.vb)]\"\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to get or set.\n    return:\n      type: System.Object\n      description: The element at the specified index.\n  overload: System.Collections.CollectionBase.System#Collections#IList#Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref:System.Collections.CollectionBase.Count*>.\"\n  platform:\n  - net462\n- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: CollectionBase.System.Collections.IList.Remove(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Removes the first occurrence of a specific object from the <xref href=\"System.Collections.CollectionBase\"></xref>.\n  remarks: \"If the <xref:System.Collections.CollectionBase> does not contain the specified object, the <xref:System.Collections.CollectionBase> remains unchanged. No exception is thrown.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \\n  \\n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/92a20c91-2133-45e3-9527-_1.cpp)]\\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/92a20c91-2133-45e3-9527-_1.cs)]\\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/92a20c91-2133-45e3-9527-_1.vb)]\"\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to remove from the <xref href=\"System.Collections.CollectionBase\"></xref>.\n  overload: System.Collections.CollectionBase.System#Collections#IList#Remove*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>value</code> parameter was not found in the <xref href=\"System.Collections.CollectionBase\"></xref> object.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.CollectionBase\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.CollectionBase\\\"></xref> has a fixed size.\"\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.OutOfMemoryException\n  isExternal: true\n  name: System.OutOfMemoryException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Collections.CollectionBase.#ctor\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: CollectionBase()\n  nameWithType: CollectionBase.CollectionBase()\n  fullName: System.Collections.CollectionBase.CollectionBase()\n- uid: System.Collections.CollectionBase.#ctor(System.Int32)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: CollectionBase(Int32)\n  nameWithType: CollectionBase.CollectionBase(Int32)\n  fullName: System.Collections.CollectionBase.CollectionBase(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.CollectionBase.Capacity\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: Capacity\n  nameWithType: CollectionBase.Capacity\n  fullName: System.Collections.CollectionBase.Capacity\n- uid: System.Collections.CollectionBase.Clear\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: Clear()\n  nameWithType: CollectionBase.Clear()\n  fullName: System.Collections.CollectionBase.Clear()\n- uid: System.Collections.CollectionBase.Count\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: Count\n  nameWithType: CollectionBase.Count\n  fullName: System.Collections.CollectionBase.Count\n- uid: System.Collections.CollectionBase.GetEnumerator\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: CollectionBase.GetEnumerator()\n  fullName: System.Collections.CollectionBase.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.CollectionBase.InnerList\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: InnerList\n  nameWithType: CollectionBase.InnerList\n  fullName: System.Collections.CollectionBase.InnerList\n- uid: System.Collections.ArrayList\n  parent: System.Collections\n  isExternal: false\n  name: ArrayList\n  nameWithType: ArrayList\n  fullName: System.Collections.ArrayList\n- uid: System.Collections.CollectionBase.List\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: List\n  nameWithType: CollectionBase.List\n  fullName: System.Collections.CollectionBase.List\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: true\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Collections.CollectionBase.OnClear\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnClear()\n  nameWithType: CollectionBase.OnClear()\n  fullName: System.Collections.CollectionBase.OnClear()\n- uid: System.Collections.CollectionBase.OnClearComplete\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnClearComplete()\n  nameWithType: CollectionBase.OnClearComplete()\n  fullName: System.Collections.CollectionBase.OnClearComplete()\n- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnInsert(Int32,Object)\n  nameWithType: CollectionBase.OnInsert(Int32,Object)\n  fullName: System.Collections.CollectionBase.OnInsert(Int32,Object)\n- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnInsertComplete(Int32,Object)\n  nameWithType: CollectionBase.OnInsertComplete(Int32,Object)\n  fullName: System.Collections.CollectionBase.OnInsertComplete(Int32,Object)\n- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnRemove(Int32,Object)\n  nameWithType: CollectionBase.OnRemove(Int32,Object)\n  fullName: System.Collections.CollectionBase.OnRemove(Int32,Object)\n- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnRemoveComplete(Int32,Object)\n  nameWithType: CollectionBase.OnRemoveComplete(Int32,Object)\n  fullName: System.Collections.CollectionBase.OnRemoveComplete(Int32,Object)\n- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnSet(Int32,Object,Object)\n  nameWithType: CollectionBase.OnSet(Int32,Object,Object)\n  fullName: System.Collections.CollectionBase.OnSet(Int32,Object,Object)\n- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnSetComplete(Int32,Object,Object)\n  nameWithType: CollectionBase.OnSetComplete(Int32,Object,Object)\n  fullName: System.Collections.CollectionBase.OnSetComplete(Int32,Object,Object)\n- uid: System.Collections.CollectionBase.OnValidate(System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnValidate(Object)\n  nameWithType: CollectionBase.OnValidate(Object)\n  fullName: System.Collections.CollectionBase.OnValidate(Object)\n- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: CollectionBase.RemoveAt(Int32)\n  fullName: System.Collections.CollectionBase.RemoveAt(Int32)\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: CollectionBase.System.Collections.IList.Add(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(Object)\n- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: CollectionBase.System.Collections.IList.Contains(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(Object)\n- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: CollectionBase.System.Collections.IList.IndexOf(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(Object)\n- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: CollectionBase.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(Int32,Object)\n- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize\n  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize\n- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly\n  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly\n- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: CollectionBase.System.Collections.IList.Item(Int32)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Item(Int32)\n- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: CollectionBase.System.Collections.IList.Remove(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(Object)\n- uid: System.Collections.CollectionBase.#ctor*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: CollectionBase\n  nameWithType: CollectionBase.CollectionBase\n- uid: System.Collections.CollectionBase.Capacity*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: Capacity\n  nameWithType: CollectionBase.Capacity\n- uid: System.Collections.CollectionBase.Clear*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: Clear\n  nameWithType: CollectionBase.Clear\n- uid: System.Collections.CollectionBase.Count*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: Count\n  nameWithType: CollectionBase.Count\n- uid: System.Collections.CollectionBase.GetEnumerator*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: CollectionBase.GetEnumerator\n- uid: System.Collections.CollectionBase.InnerList*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: InnerList\n  nameWithType: CollectionBase.InnerList\n- uid: System.Collections.CollectionBase.List*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: List\n  nameWithType: CollectionBase.List\n- uid: System.Collections.CollectionBase.OnClear*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnClear\n  nameWithType: CollectionBase.OnClear\n- uid: System.Collections.CollectionBase.OnClearComplete*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnClearComplete\n  nameWithType: CollectionBase.OnClearComplete\n- uid: System.Collections.CollectionBase.OnInsert*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnInsert\n  nameWithType: CollectionBase.OnInsert\n- uid: System.Collections.CollectionBase.OnInsertComplete*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnInsertComplete\n  nameWithType: CollectionBase.OnInsertComplete\n- uid: System.Collections.CollectionBase.OnRemove*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnRemove\n  nameWithType: CollectionBase.OnRemove\n- uid: System.Collections.CollectionBase.OnRemoveComplete*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnRemoveComplete\n  nameWithType: CollectionBase.OnRemoveComplete\n- uid: System.Collections.CollectionBase.OnSet*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnSet\n  nameWithType: CollectionBase.OnSet\n- uid: System.Collections.CollectionBase.OnSetComplete*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnSetComplete\n  nameWithType: CollectionBase.OnSetComplete\n- uid: System.Collections.CollectionBase.OnValidate*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: OnValidate\n  nameWithType: CollectionBase.OnValidate\n- uid: System.Collections.CollectionBase.RemoveAt*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: RemoveAt\n  nameWithType: CollectionBase.RemoveAt\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.CollectionBase.System#Collections#IList#Add*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: CollectionBase.System.Collections.IList.Add\n- uid: System.Collections.CollectionBase.System#Collections#IList#Contains*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: CollectionBase.System.Collections.IList.Contains\n- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: CollectionBase.System.Collections.IList.IndexOf\n- uid: System.Collections.CollectionBase.System#Collections#IList#Insert*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: CollectionBase.System.Collections.IList.Insert\n- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize\n- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly\n- uid: System.Collections.CollectionBase.System#Collections#IList#Item*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: CollectionBase.System.Collections.IList.Item\n- uid: System.Collections.CollectionBase.System#Collections#IList#Remove*\n  parent: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: CollectionBase.System.Collections.IList.Remove\n"}