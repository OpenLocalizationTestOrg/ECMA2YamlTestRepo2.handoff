{"nodes":[{"pos":[1963,2088],"content":"Describes an incoming HTTP request to an <xref href=\"System.Net.HttpListener\"></xref> object. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes an incoming HTTP request to an <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,93],"source":"Describes an incoming HTTP request to an <xref href=\"System.Net.HttpListener\"></xref> object."},{"content":"This class cannot be inherited.","pos":[94,125]}]},{"pos":[2101,3022],"content":"When a client makes a request to a Uniform Resource Identifier (URI) handled by an <xref:System.Net.HttpListener> object, the <xref:System.Net.HttpListener> provides a <xref:System.Net.HttpListenerContext> object that contains information about the sender, the request, and the response that is sent to the client. The <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName> property returns the HttpListenerRequest object that describes the request.       The HttpListenerRequest object contains information about the request, such as the request <xref:System.Net.HttpListenerRequest.HttpMethod%2A> string, <xref:System.Net.HttpListenerRequest.UserAgent%2A> string, and request body data (see the <xref:System.Net.HttpListenerRequest.InputStream%2A> property).       To reply to the request, you must get the associated response using the <xref:System.Net.HttpListenerContext.Response%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"When a client makes a request to a Uniform Resource Identifier (URI) handled by an <xref:System.Net.HttpListener> object, the <xref:System.Net.HttpListener> provides a <xref:System.Net.HttpListenerContext> object that contains information about the sender, the request, and the response that is sent to the client. The <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName> property returns the HttpListenerRequest object that describes the request.       The HttpListenerRequest object contains information about the request, such as the request <xref:System.Net.HttpListenerRequest.HttpMethod%2A> string, <xref:System.Net.HttpListenerRequest.UserAgent%2A> string, and request body data (see the <xref:System.Net.HttpListenerRequest.InputStream%2A> property).       To reply to the request, you must get the associated response using the <xref:System.Net.HttpListenerContext.Response%2A> property.","pos":[0,917],"nodes":[{"content":"When a client makes a request to a Uniform Resource Identifier (URI) handled by an &lt;xref:System.Net.HttpListener&gt; object, the &lt;xref:System.Net.HttpListener&gt; provides a &lt;xref:System.Net.HttpListenerContext&gt; object that contains information about the sender, the request, and the response that is sent to the client.","pos":[0,314],"source":"When a client makes a request to a Uniform Resource Identifier (URI) handled by an <xref:System.Net.HttpListener> object, the <xref:System.Net.HttpListener> provides a <xref:System.Net.HttpListenerContext> object that contains information about the sender, the request, and the response that is sent to the client."},{"content":"The &lt;xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName&gt; property returns the HttpListenerRequest object that describes the request.","pos":[315,468],"source":" The <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName> property returns the HttpListenerRequest object that describes the request."},{"content":"The HttpListenerRequest object contains information about the request, such as the request &lt;xref:System.Net.HttpListenerRequest.HttpMethod%2A&gt; string, &lt;xref:System.Net.HttpListenerRequest.UserAgent%2A&gt; string, and request body data (see the &lt;xref:System.Net.HttpListenerRequest.InputStream%2A&gt; property).","pos":[475,779],"source":"       The HttpListenerRequest object contains information about the request, such as the request <xref:System.Net.HttpListenerRequest.HttpMethod%2A> string, <xref:System.Net.HttpListenerRequest.UserAgent%2A> string, and request body data (see the <xref:System.Net.HttpListenerRequest.InputStream%2A> property)."},{"content":"To reply to the request, you must get the associated response using the &lt;xref:System.Net.HttpListenerContext.Response%2A&gt; property.","pos":[786,917],"source":"       To reply to the request, you must get the associated response using the <xref:System.Net.HttpListenerContext.Response%2A> property."}]}]},{"pos":[3721,3764],"content":"Gets the MIME types accepted by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the MIME types accepted by the client.","pos":[0,43]}]},{"pos":[3777,4312],"content":"The `Accept` header is a string of space-separated Multipurpose Internet Mail Extensions (MIME) type names (for example, `image/jpeg`), which indicate the MIME types that the client is prepared to accept and process in a response. The `*/*` entry indicates that the client accepts any MIME type. For a detailed description of the `Accept` header, see RFC 2616, available at [http://www.rfc-editor.org](http://www.rfc-editor.org/).       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Accept`</ph> header is a string of space-separated Multipurpose Internet Mail Extensions (MIME) type names (for example, <ph id=\"ph2\">`image/jpeg`</ph>), which indicate the MIME types that the client is prepared to accept and process in a response.","pos":[0,230],"source":"The `Accept` header is a string of space-separated Multipurpose Internet Mail Extensions (MIME) type names (for example, `image/jpeg`), which indicate the MIME types that the client is prepared to accept and process in a response."},{"content":"The <ph id=\"ph1\">`*/*`</ph> entry indicates that the client accepts any MIME type.","pos":[231,295],"source":" The `*/*` entry indicates that the client accepts any MIME type."},{"content":"For a detailed description of the <ph id=\"ph1\">`Accept`</ph> header, see RFC 2616, available at <bpt id=\"p1\">[</bpt>http://www.rfc-editor.org<ept id=\"p1\">](http://www.rfc-editor.org/)</ept>.","pos":[296,430],"source":" For a detailed description of the `Accept` header, see RFC 2616, available at [http://www.rfc-editor.org](http://www.rfc-editor.org/)."},{"content":"For a complete list of request headers, see the &lt;xref:System.Net.HttpRequestHeader&gt; enumeration.","pos":[437,533],"source":"       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration."}]},{"pos":[4612,4946],"content":"A &lt;xref:System.String&gt; array that contains the type names specified in the request's <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Accept\" name=\"Accept\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> header or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the client request did not include an <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Accept\" name=\"Accept\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> header.","needQuote":true,"needEscape":true,"source":"A <xref:System.String> array that contains the type names specified in the request's <xref uid=\"langword_csharp_Accept\" name=\"Accept\" href=\"\"></xref> header or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the client request did not include an <xref uid=\"langword_csharp_Accept\" name=\"Accept\" href=\"\"></xref> header."},{"pos":[5578,5648],"content":"Begins an asynchronous request for the client's X.509 v.3 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous request for the client's X.509 v.3 certificate.","pos":[0,70]}]},{"pos":[5859,5967],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[6029,6174],"content":"A user-defined object that contains information about the operation. This object is passed to the callback delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the operation. This object is passed to the callback delegate when the operation completes.","pos":[0,145],"nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the callback delegate when the operation completes.","pos":[69,145]}]}]},{"pos":[6238,6311],"content":"An <xref:System.IAsyncResult> that indicates the status of the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; that indicates the status of the operation.","pos":[0,73],"source":"An <xref:System.IAsyncResult> that indicates the status of the operation."}]},{"pos":[6806,6966],"content":"Gets an error code that identifies a problem with the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> provided by the client.","needQuote":true,"needEscape":true,"source":"Gets an error code that identifies a problem with the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\"></xref> provided by the client."},{"pos":[6978,7359],"content":"This property contains a Windows error code returned by the Secure Channel (Schannel) Security Support Provider Interface (SSPI), which is used to validate the certificate. For more information about SSPI support for Schannel, see \"Creating a Secure Connection Using Schannel\" in the Security documentation at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).","needQuote":true,"needEscape":true,"nodes":[{"content":"This property contains a Windows error code returned by the Secure Channel (Schannel) Security Support Provider Interface (SSPI), which is used to validate the certificate.","pos":[0,172]},{"content":"For more information about SSPI support for Schannel, see \"Creating a Secure Connection Using Schannel\" in the Security documentation at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p1\">](http://msdn.microsoft.com/library)</ept>.","pos":[173,381],"source":" For more information about SSPI support for Schannel, see \"Creating a Secure Connection Using Schannel\" in the Security documentation at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."}]},{"pos":[7802,7866],"content":"An <xref:System.Int32> value that contains a Windows error code.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that contains a Windows error code.","pos":[0,64],"source":"An <xref:System.Int32> value that contains a Windows error code."}]},{"pos":[8059,8321],"content":"The client certificate has not been initialized yet by a call to the &lt;xref:System.Net.HttpListenerRequest.BeginGetClientCertificate<bpt id=\"p1\">*</bpt>&gt; or &lt;xref:System.Net.HttpListenerRequest.GetClientCertificate<ept id=\"p1\">*</ept>&gt; methods       -or -       The operation is still in progress.","needQuote":false,"needEscape":true,"source":"The client certificate has not been initialized yet by a call to the <xref:System.Net.HttpListenerRequest.BeginGetClientCertificate*> or <xref:System.Net.HttpListenerRequest.GetClientCertificate*> methods       -or -       The operation is still in progress."},{"pos":[8695,8769],"content":"Gets the content encoding that can be used with data sent with the request","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the content encoding that can be used with data sent with the request","pos":[0,74]}]},{"pos":[8781,9145],"content":"An <xref:System.Text.Encoding> object can be used to convert byte sequences into character sets (code pages) and characters into byte sequences. This property uses the charset value from the `Content-Type` header to determine the encoding. If that information is not available, this property returns <xref:System.Text.Encoding.Default%2A?displayProperty=fullName>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Text.Encoding&gt; object can be used to convert byte sequences into character sets (code pages) and characters into byte sequences.","pos":[0,144],"source":"An <xref:System.Text.Encoding> object can be used to convert byte sequences into character sets (code pages) and characters into byte sequences."},{"content":"This property uses the charset value from the <ph id=\"ph1\">`Content-Type`</ph> header to determine the encoding.","pos":[145,239],"source":" This property uses the charset value from the `Content-Type` header to determine the encoding."},{"content":"If that information is not available, this property returns &lt;xref:System.Text.Encoding.Default%2A?displayProperty=fullName&gt;.","pos":[240,364],"source":" If that information is not available, this property returns <xref:System.Text.Encoding.Default%2A?displayProperty=fullName>."}]},{"pos":[9480,9616],"content":"An <xref:System.Text.Encoding> object suitable for use with the data in the <xref:System.Net.HttpListenerRequest.InputStream*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Text.Encoding&gt; object suitable for use with the data in the &lt;xref:System.Net.HttpListenerRequest.InputStream*&gt; property.","pos":[0,136],"source":"An <xref:System.Text.Encoding> object suitable for use with the data in the <xref:System.Net.HttpListenerRequest.InputStream*> property."}]},{"pos":[10066,10123],"content":"Gets the length of the body data included in the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the length of the body data included in the request.","pos":[0,57]}]},{"pos":[10136,10347],"content":"The `Content-Length` header expresses the length, in bytes, of the body data that accompanies the request.       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Content-Length`</ph> header expresses the length, in bytes, of the body data that accompanies the request.","pos":[0,106],"source":"The `Content-Length` header expresses the length, in bytes, of the body data that accompanies the request."},{"content":"For a complete list of request headers, see the &lt;xref:System.Net.HttpRequestHeader&gt; enumeration.","pos":[113,209],"source":"       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration."}]},{"pos":[10671,10841],"content":"The value from the request's <xref uid=\"langword_csharp_Content-Length\" name=\"Content-Length\" href=\"\"></xref> header. This value is -1 if the content length is not known.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value from the request's <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Content-Length\" name=\"Content-Length\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> header.","pos":[0,117],"source":"The value from the request's <xref uid=\"langword_csharp_Content-Length\" name=\"Content-Length\" href=\"\"></xref> header."},{"content":"This value is -1 if the content length is not known.","pos":[118,170]}]},{"pos":[11271,11331],"content":"Gets the MIME type of the body data included in the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the MIME type of the body data included in the request.","pos":[0,60]}]},{"pos":[11344,11908],"content":"If a client includes body data in a request, it declares the Multipurpose Internet Mail Extensions (MIME) type of the body data in the `Content-Type` header. For example, the default MIME type of data returned from a Web form using the `POST` method is `application/x-www-form-urlencoded`.       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration and RFC 2616, available at [http://www.rfc-editor.org](http://www.rfc-editor.org/).       The ContentType is null when there is no `Content-Type` header in the request.","needQuote":false,"needEscape":true,"nodes":[{"content":"If a client includes body data in a request, it declares the Multipurpose Internet Mail Extensions (MIME) type of the body data in the <ph id=\"ph1\">`Content-Type`</ph> header.","pos":[0,157],"source":"If a client includes body data in a request, it declares the Multipurpose Internet Mail Extensions (MIME) type of the body data in the `Content-Type` header."},{"content":"For example, the default MIME type of data returned from a Web form using the <ph id=\"ph1\">`POST`</ph> method is <ph id=\"ph2\">`application/x-www-form-urlencoded`</ph>.","pos":[158,289],"source":" For example, the default MIME type of data returned from a Web form using the `POST` method is `application/x-www-form-urlencoded`."},{"content":"For a complete list of request headers, see the &lt;xref:System.Net.HttpRequestHeader&gt; enumeration and RFC 2616, available at <bpt id=\"p1\">[</bpt>http://www.rfc-editor.org<ept id=\"p1\">](http://www.rfc-editor.org/)</ept>.","pos":[296,475],"source":"       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration and RFC 2616, available at [http://www.rfc-editor.org](http://www.rfc-editor.org/)."},{"content":"The ContentType is null when there is no <ph id=\"ph1\">`Content-Type`</ph> header in the request.","pos":[482,560],"source":"       The ContentType is null when there is no `Content-Type` header in the request."}]},{"pos":[12209,12356],"content":"A &lt;xref:System.String&gt; that contains the text of the request's <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Content-Type\" name=\"Content-Type\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> header.","needQuote":true,"needEscape":true,"source":"A <xref:System.String> that contains the text of the request's <xref uid=\"langword_csharp_Content-Type\" name=\"Content-Type\" href=\"\"></xref> header."},{"pos":[12762,12801],"content":"Gets the cookies sent with the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the cookies sent with the request.","pos":[0,39]}]},{"pos":[12813,12910],"content":"A cookie is name/value text data from a Web server that is stored on the local (client) computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cookie is name/value text data from a Web server that is stored on the local (client) computer.","pos":[0,97]}]},{"pos":[13255,13424],"content":"A <xref:System.Net.CookieCollection> that contains cookies that accompany the request. This property returns an empty collection if the request does not contain cookies.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Net.CookieCollection> that contains cookies that accompany the request. This property returns an empty collection if the request does not contain cookies.","pos":[0,169],"nodes":[{"content":"A &lt;xref:System.Net.CookieCollection&gt; that contains cookies that accompany the request.","pos":[0,86],"source":"A <xref:System.Net.CookieCollection> that contains cookies that accompany the request."},{"content":"This property returns an empty collection if the request does not contain cookies.","pos":[87,169]}]}]},{"pos":[13988,14056],"content":"Ends an asynchronous request for the client's X.509 v.3 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends an asynchronous request for the client's X.509 v.3 certificate.","pos":[0,68]}]},{"pos":[14291,14331],"content":"The pending request for the certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The pending request for the certificate.","pos":[0,40]}]},{"pos":[14438,14520],"content":"The <xref:System.IAsyncResult> object that is returned when the operation started.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IAsyncResult&gt; object that is returned when the operation started.","pos":[0,82],"source":"The <xref:System.IAsyncResult> object that is returned when the operation started."}]},{"pos":[14705,14794],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[14889,15021],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not obtained by calling <ph id=\"ph2\">&lt;xref:System.Net.HttpListenerRequest.BeginGetClientCertificate*&gt;</ph><ph id=\"ph3\">&lt;code&gt;e.&lt;/code&gt;</ph>","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> was not obtained by calling <xref:System.Net.HttpListenerRequest.BeginGetClientCertificate*><code>e.</code>"},{"pos":[15132,15220],"content":"This method was already called for the operation identified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method was already called for the operation identified by <code>asyncResult</code>."},{"pos":[15622,15667],"content":"Retrieves the client's X.509 v.3 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the client's X.509 v.3 certificate.","pos":[0,45]}]},{"pos":[15679,15733],"content":"This method blocks until the certificate is retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method blocks until the certificate is retrieved.","pos":[0,54]}]},{"pos":[15977,16102],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the client's X.509 v.3 certificate.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.X509Certificates\"></xref> object that contains the client's X.509 v.3 certificate."},{"pos":[16292,16433],"content":"A call to this method to retrieve the client's X.509 v.3 certificate is in progress and therefore another call to this method cannot be made.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to this method to retrieve the client's X.509 v.3 certificate is in progress and therefore another call to this method cannot be made.","pos":[0,141]}]},{"pos":[16860,16934],"content":"Retrieves the client's X.509 v.3 certificate as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the client's X.509 v.3 certificate as an asynchronous operation.","pos":[0,74]}]},{"pos":[16947,17236],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete when the certificate has been retrieved.       If a call to this method to retrieve the client's X.509 v.3 certificate is in progress, then another call to this method cannot be made.","needQuote":false,"needEscape":true,"nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete when the certificate has been retrieved.       If a call to this method to retrieve the client's X.509 v.3 certificate is in progress, then another call to this method cannot be made.","pos":[0,287],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete when the certificate has been retrieved.","pos":[31,144],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete when the certificate has been retrieved."},{"content":"If a call to this method to retrieve the client's X.509 v.3 certificate is in progress, then another call to this method cannot be made.","pos":[151,287]}]}]},{"pos":[17545,17886],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref href=\"System.Security.Cryptography.X509Certificates\"></xref> object that contains the client's X.509 v.3 certificate.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]},{"content":"The <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601.Result%2A<ph id=\"ph2\">&amp;gt;</ph> property on the task object returns a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the client's X.509 v.3 certificate.","pos":[117,337],"source":" The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref href=\"System.Security.Cryptography.X509Certificates\"></xref> object that contains the client's X.509 v.3 certificate."}]},{"pos":[18337,18432],"content":"Gets a <xref:System.Boolean> value that indicates whether the request has associated body data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the request has associated body data.","pos":[0,95],"source":"Gets a <xref:System.Boolean> value that indicates whether the request has associated body data."}]},{"pos":[18444,18549],"content":"A request that sends data to the server using the <ph id=\"ph1\">`POST`</ph> method, for example, should have an entity body.","needQuote":true,"needEscape":true,"source":"A request that sends data to the server using the `POST` method, for example, should have an entity body."},{"pos":[18845,19021],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the request has associated body data; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the request has associated body data; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19429,19496],"content":"Gets the collection of header name/value pairs sent in the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of header name/value pairs sent in the request.","pos":[0,67]}]},{"pos":[19509,19902],"content":"Request headers contain metadata information. For example, headers can contain the Uniform Resource Identifier (URI) of the resource that referred the client to the server, the identity of the user agent employed by the client, and the acceptable MIME types for data in the response body.       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"Request headers contain metadata information. For example, headers can contain the Uniform Resource Identifier (URI) of the resource that referred the client to the server, the identity of the user agent employed by the client, and the acceptable MIME types for data in the response body.       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.","pos":[0,391],"nodes":[{"content":"Request headers contain metadata information.","pos":[0,45]},{"content":"For example, headers can contain the Uniform Resource Identifier (URI) of the resource that referred the client to the server, the identity of the user agent employed by the client, and the acceptable MIME types for data in the response body.","pos":[46,288]},{"content":"For a complete list of request headers, see the &lt;xref:System.Net.HttpRequestHeader&gt; enumeration.","pos":[295,391],"source":"       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration."}]}]},{"pos":[20327,20422],"content":"A <xref:System.Net.WebHeaderCollection> that contains the HTTP headers included in the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Net.WebHeaderCollection&gt; that contains the HTTP headers included in the request.","pos":[0,95],"source":"A <xref:System.Net.WebHeaderCollection> that contains the HTTP headers included in the request."}]},{"pos":[20839,20884],"content":"Gets the HTTP method specified by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the HTTP method specified by the client.","pos":[0,45]}]},{"pos":[20896,20984],"content":"The HTTP method is typically GET or POST, depending on the action desired by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTTP method is typically GET or POST, depending on the action desired by the client.","pos":[0,88]}]},{"pos":[21278,21346],"content":"A <xref:System.String> that contains the method used in the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that contains the method used in the request.","pos":[0,68],"source":"A <xref:System.String> that contains the method used in the request."}]},{"pos":[21771,21832],"content":"Gets a stream that contains the body data sent by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a stream that contains the body data sent by the client.","pos":[0,61]}]},{"pos":[21845,22179],"content":"If the client transmits data (for example, using the HTTP `POST` method), the stream returned by this method contains that data.      > [!NOTE] >  Closing the request does not close the stream returned by this property. When you no longer need the stream, you should close it by calling the <xref:System.IO.Stream.Close%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the client transmits data (for example, using the HTTP <ph id=\"ph1\">`POST`</ph> method), the stream returned by this method contains that data.","pos":[0,128],"source":"If the client transmits data (for example, using the HTTP `POST` method), the stream returned by this method contains that data."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Closing the request does not close the stream returned by this property.","pos":[134,219],"source":"      > [!NOTE] >  Closing the request does not close the stream returned by this property."},{"content":"When you no longer need the stream, you should close it by calling the &lt;xref:System.IO.Stream.Close%2A&gt; method.","pos":[220,331],"source":" When you no longer need the stream, you should close it by calling the <xref:System.IO.Stream.Close%2A> method."}]},{"pos":[22525,22720],"content":"A readable <xref:System.IO.Stream> object that contains the bytes sent by the client in the body of the request. This property returns <xref:System.IO.Stream> if no data is sent with the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A readable <xref:System.IO.Stream> object that contains the bytes sent by the client in the body of the request. This property returns <xref:System.IO.Stream> if no data is sent with the request.","pos":[0,195],"nodes":[{"content":"A readable &lt;xref:System.IO.Stream&gt; object that contains the bytes sent by the client in the body of the request.","pos":[0,112],"source":"A readable <xref:System.IO.Stream> object that contains the bytes sent by the client in the body of the request."},{"content":"This property returns &lt;xref:System.IO.Stream&gt; if no data is sent with the request.","pos":[113,195],"source":" This property returns <xref:System.IO.Stream> if no data is sent with the request."}]}]},{"pos":[23166,23273],"content":"Gets a <xref:System.Boolean> value that indicates whether the client sending this request is authenticated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the client sending this request is authenticated.","pos":[0,107],"source":"Gets a <xref:System.Boolean> value that indicates whether the client sending this request is authenticated."}]},{"pos":[23286,23633],"content":"Your application requests client authentication using the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> or <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property.       Your application does not receive an <xref:System.Net.HttpListenerContext> for requests from clients that are not successfully authenticated.","needQuote":false,"needEscape":true,"nodes":[{"content":"Your application requests client authentication using the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> or <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property.       Your application does not receive an <xref:System.Net.HttpListenerContext> for requests from clients that are not successfully authenticated.","pos":[0,345],"nodes":[{"content":"Your application requests client authentication using the &lt;xref:System.Net.HttpListener.AuthenticationSchemes%2A&gt; or &lt;xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A&gt; property.","pos":[0,197],"source":"Your application requests client authentication using the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> or <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property."},{"content":"Your application does not receive an &lt;xref:System.Net.HttpListenerContext&gt; for requests from clients that are not successfully authenticated.","pos":[204,345],"source":"       Your application does not receive an <xref:System.Net.HttpListenerContext> for requests from clients that are not successfully authenticated."}]}]},{"pos":[23949,24117],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the client was authenticated; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the client was authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24527,24629],"content":"Gets a <xref:System.Boolean> value that indicates whether the request is sent from the local computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the request is sent from the local computer.","pos":[0,102],"source":"Gets a <xref:System.Boolean> value that indicates whether the request is sent from the local computer."}]},{"pos":[24641,24748],"content":"Applications can use this property to perform special processing when requests are from the local computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Applications can use this property to perform special processing when requests are from the local computer.","pos":[0,107]}]},{"pos":[25045,25313],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the request originated on the same computer as the <bpt id=\"p2\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object that provided the request; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the request originated on the same computer as the <xref href=\"System.Net.HttpListener\"></xref> object that provided the request; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[25770,25921],"content":"Gets a <xref:System.Boolean> value that indicates whether the TCP connection used to send the request is using the Secure Sockets Layer (SSL) protocol.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the TCP connection used to send the request is using the Secure Sockets Layer (SSL) protocol.","pos":[0,151],"source":"Gets a <xref:System.Boolean> value that indicates whether the TCP connection used to send the request is using the Secure Sockets Layer (SSL) protocol."}]},{"pos":[25933,26212],"content":"To request a secure connection, the client request uses <xref:System.Uri.UriSchemeHttps> instead of <xref:System.Uri.UriSchemeHttp>. If the connection cannot be established using SSL, the client receives a <xref:System.Net.WebException> that provides information about the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"To request a secure connection, the client request uses <xref:System.Uri.UriSchemeHttps> instead of <xref:System.Uri.UriSchemeHttp>. If the connection cannot be established using SSL, the client receives a <xref:System.Net.WebException> that provides information about the error.","pos":[0,279],"nodes":[{"content":"To request a secure connection, the client request uses &lt;xref:System.Uri.UriSchemeHttps&gt; instead of &lt;xref:System.Uri.UriSchemeHttp&gt;.","pos":[0,132],"source":"To request a secure connection, the client request uses <xref:System.Uri.UriSchemeHttps> instead of <xref:System.Uri.UriSchemeHttp>."},{"content":"If the connection cannot be established using SSL, the client receives a &lt;xref:System.Net.WebException&gt; that provides information about the error.","pos":[133,279],"source":" If the connection cannot be established using SSL, the client receives a <xref:System.Net.WebException> that provides information about the error."}]}]},{"pos":[26530,26701],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the TCP connection is using SSL; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the TCP connection is using SSL; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[27169,27271],"content":"Gets a <xref:System.Boolean> value that indicates whether the TCP connection was  a WebSocket request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the TCP connection was  a WebSocket request.","pos":[0,102],"source":"Gets a <xref:System.Boolean> value that indicates whether the TCP connection was  a WebSocket request."}]},{"pos":[27394,27626],"content":"Returns <xref:System.Boolean>.       <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the TCP connection is a WebSocket request; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Boolean&gt;.","pos":[0,30],"source":"Returns <xref:System.Boolean>."},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the TCP connection is a WebSocket request; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[37,218],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the TCP connection is a WebSocket request; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[28050,28152],"content":"Gets a <xref:System.Boolean> value that indicates whether the client requests a persistent connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the client requests a persistent connection.","pos":[0,102],"source":"Gets a <xref:System.Boolean> value that indicates whether the client requests a persistent connection."}]},{"pos":[28164,28486],"content":"If an HTTP client and server expect to exchange data multiple times in a short time period, a persistent connection speeds up their communications by allowing them to avoid the overhead required to open and close a TCP connection for each message. For clients using HTTP/1.1, the default value for this property is `true`.","needQuote":true,"needEscape":true,"nodes":[{"content":"If an HTTP client and server expect to exchange data multiple times in a short time period, a persistent connection speeds up their communications by allowing them to avoid the overhead required to open and close a TCP connection for each message.","pos":[0,247]},{"content":"For clients using HTTP/1.1, the default value for this property is <ph id=\"ph1\">`true`</ph>.","pos":[248,322],"source":" For clients using HTTP/1.1, the default value for this property is `true`."}]},{"pos":[28777,28951],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the connection should be kept open; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the connection should be kept open; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[29385,29460],"content":"Get the server IP address and port number to which the request is directed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Get the server IP address and port number to which the request is directed.","pos":[0,75]}]},{"pos":[29472,29569],"content":"This property is useful when you want to respond to requests based on the way they are addressed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is useful when you want to respond to requests based on the way they are addressed.","pos":[0,97]}]},{"pos":[29889,29980],"content":"An <xref:System.Net.IPEndPoint> that represents the IP address that the request is sent to.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPEndPoint&gt; that represents the IP address that the request is sent to.","pos":[0,91],"source":"An <xref:System.Net.IPEndPoint> that represents the IP address that the request is sent to."}]},{"pos":[30428,30480],"content":"Gets the HTTP version used by the requesting client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the HTTP version used by the requesting client.","pos":[0,52]}]},{"pos":[30492,30636],"content":"The capabilities of different HTTP versions are specified in the documents available at <bpt id=\"p1\">[</bpt>http://www.rfc-editor.org<ept id=\"p1\">](http://www.rfc-editor.org/)</ept>.","needQuote":true,"needEscape":true,"source":"The capabilities of different HTTP versions are specified in the documents available at [http://www.rfc-editor.org](http://www.rfc-editor.org/)."},{"pos":[30936,31005],"content":"A <xref:System.Version> that identifies the client's version of HTTP.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Version&gt; that identifies the client's version of HTTP.","pos":[0,69],"source":"A <xref:System.Version> that identifies the client's version of HTTP."}]},{"pos":[31435,31481],"content":"Gets the query string included in the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the query string included in the request.","pos":[0,46]}]},{"pos":[31494,32065],"content":"In a URL, the query information is separated from the path information by a question mark (?). Name/value pairs are separated by an equals sign (=). To access the query data as a single string, get the <xref:System.Uri.Query%2A> property value from the <xref:System.Uri> object returned by <xref:System.Net.HttpListenerRequest.Url%2A>.      > [!NOTE] >  Queries without an equal sign (example: [http://www.contoso.com/query.htm?Name](http://www.contoso.com/query.htm?Name) ) are added to the `null` key in the <xref:System.Collections.Specialized.NameValueCollection>.","needQuote":false,"needEscape":true,"nodes":[{"content":"In a URL, the query information is separated from the path information by a question mark (?).","pos":[0,94]},{"content":"Name/value pairs are separated by an equals sign (=).","pos":[95,148]},{"content":"To access the query data as a single string, get the &lt;xref:System.Uri.Query%2A&gt; property value from the &lt;xref:System.Uri&gt; object returned by &lt;xref:System.Net.HttpListenerRequest.Url%2A&gt;.","pos":[149,335],"source":" To access the query data as a single string, get the <xref:System.Uri.Query%2A> property value from the <xref:System.Uri> object returned by <xref:System.Net.HttpListenerRequest.Url%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Queries without an equal sign (example: <bpt id=\"p1\">[</bpt>http://www.contoso.com/query.htm?Name<ept id=\"p1\">](http://www.contoso.com/query.htm?Name)</ept> ) are added to the <ph id=\"ph2\">`null`</ph> key in the &lt;xref:System.Collections.Specialized.NameValueCollection&gt;.","pos":[341,568],"source":"      > [!NOTE] >  Queries without an equal sign (example: [http://www.contoso.com/query.htm?Name](http://www.contoso.com/query.htm?Name) ) are added to the `null` key in the <xref:System.Collections.Specialized.NameValueCollection>."}]},{"pos":[32452,32629],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the query data included in the request &lt;xref:System.Net.HttpListenerRequest.Url*&gt;.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> object that contains the query data included in the request <xref:System.Net.HttpListenerRequest.Url*>."},{"pos":[33030,33107],"content":"Gets the URL information (without the host and port) requested by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the URL information (without the host and port) requested by the client.","pos":[0,77]}]},{"pos":[33120,33478],"content":"The raw URL is defined as the part of the URL following the domain information. In the URL string `http://www.contoso.com/articles/recent.aspx`, the raw URL is `/articles/recent.aspx`. The raw URL includes the query string, if present.       To obtain the host and port information, use the <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The raw URL is defined as the part of the URL following the domain information.","pos":[0,79]},{"content":"In the URL string <ph id=\"ph1\">`http://www.contoso.com/articles/recent.aspx`</ph>, the raw URL is <ph id=\"ph2\">`/articles/recent.aspx`</ph>.","pos":[80,184],"source":" In the URL string `http://www.contoso.com/articles/recent.aspx`, the raw URL is `/articles/recent.aspx`."},{"content":"The raw URL includes the query string, if present.","pos":[185,235]},{"content":"To obtain the host and port information, use the &lt;xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A&gt; property.","pos":[242,356],"source":"       To obtain the host and port information, use the <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> property."}]},{"pos":[33775,33841],"content":"A <xref:System.String> that contains the raw URL for this request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that contains the raw URL for this request.","pos":[0,66],"source":"A <xref:System.String> that contains the raw URL for this request."}]},{"pos":[34277,34354],"content":"Gets the client IP address and port number from which the request originated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the client IP address and port number from which the request originated.","pos":[0,77]}]},{"pos":[34689,34802],"content":"An <xref:System.Net.IPEndPoint> that represents the IP address and port number from which the request originated.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPEndPoint&gt; that represents the IP address and port number from which the request originated.","pos":[0,113],"source":"An <xref:System.Net.IPEndPoint> that represents the IP address and port number from which the request originated."}]},{"pos":[35286,35343],"content":"Gets the request identifier of the incoming HTTP request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the request identifier of the incoming HTTP request.","pos":[0,57]}]},{"pos":[35466,35543],"content":"A <xref:System.Guid> object that contains the identifier of the HTTP request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Guid&gt; object that contains the identifier of the HTTP request.","pos":[0,77],"source":"A <xref:System.Guid> object that contains the identifier of the HTTP request."}]},{"pos":[35980,36053],"content":"Gets the Service Provider Name (SPN) that the client sent on the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the Service Provider Name (SPN) that the client sent on the request.","pos":[0,73]}]},{"pos":[36065,36171],"content":"An application could use the ServiceName property to perform custom Service Provide Name (SPN) validation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An application could use the ServiceName property to perform custom Service Provide Name (SPN) validation.","pos":[0,106]}]},{"pos":[36287,36363],"content":"A <xref:System.String> that contains the SPN the client sent on the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that contains the SPN the client sent on the request.","pos":[0,76],"source":"A <xref:System.String> that contains the SPN the client sent on the request."}]},{"pos":[36814,36881],"content":"Gets the <xref:System.Net.TransportContext> for the client request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the &lt;xref:System.Net.TransportContext&gt; for the client request.","pos":[0,67],"source":"Gets the <xref:System.Net.TransportContext> for the client request."}]},{"pos":[36894,37900],"content":"The <xref:System.Net.TransportContext> property can be used to retrieve the channel binding token (CBT) for an <xref:System.Net.HttpListenerRequest> which was sent using HTTPS.       An application could use the <xref:System.Net.TransportContext> property to perform custom authentication using calls to the native Win32 [AcceptSecurityContext](http://go.microsoft.com/fwlink/?LinkId=147021) function.       If an application attempts to retrieve the channel binding token (CBT) from this TransportContext property using the <xref:System.Net.TransportContext.GetChannelBinding%2A> method and the <xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind> is not <xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind>, then the <xref:System.Net.HttpListenerRequest> will throw <xref:System.NotSupportedException>. The <xref:System.Net.HttpListenerRequest> overrides the <xref:System.Net.TransportContext.GetChannelBinding%2A> method with an internal implementation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.TransportContext&gt; property can be used to retrieve the channel binding token (CBT) for an &lt;xref:System.Net.HttpListenerRequest&gt; which was sent using HTTPS.","pos":[0,176],"source":"The <xref:System.Net.TransportContext> property can be used to retrieve the channel binding token (CBT) for an <xref:System.Net.HttpListenerRequest> which was sent using HTTPS."},{"content":"An application could use the &lt;xref:System.Net.TransportContext&gt; property to perform custom authentication using calls to the native Win32 <bpt id=\"p1\">[</bpt>AcceptSecurityContext<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=147021)</ept> function.","pos":[183,401],"source":"       An application could use the <xref:System.Net.TransportContext> property to perform custom authentication using calls to the native Win32 [AcceptSecurityContext](http://go.microsoft.com/fwlink/?LinkId=147021) function."},{"content":"If an application attempts to retrieve the channel binding token (CBT) from this TransportContext property using the &lt;xref:System.Net.TransportContext.GetChannelBinding%2A&gt; method and the &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind&gt; is not &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind&gt;, then the &lt;xref:System.Net.HttpListenerRequest&gt; will throw &lt;xref:System.NotSupportedException&gt;.","pos":[408,850],"source":"       If an application attempts to retrieve the channel binding token (CBT) from this TransportContext property using the <xref:System.Net.TransportContext.GetChannelBinding%2A> method and the <xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind> is not <xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind>, then the <xref:System.Net.HttpListenerRequest> will throw <xref:System.NotSupportedException>."},{"content":"The &lt;xref:System.Net.HttpListenerRequest&gt; overrides the &lt;xref:System.Net.TransportContext.GetChannelBinding%2A&gt; method with an internal implementation.","pos":[851,1002],"source":" The <xref:System.Net.HttpListenerRequest> overrides the <xref:System.Net.TransportContext.GetChannelBinding%2A> method with an internal implementation."}]},{"pos":[38057,38124],"content":"A <xref:System.Net.TransportContext> object for the client request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Net.TransportContext&gt; object for the client request.","pos":[0,67],"source":"A <xref:System.Net.TransportContext> object for the client request."}]},{"pos":[38515,38573],"content":"Gets the <xref:System.Uri> object requested by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the &lt;xref:System.Uri&gt; object requested by the client.","pos":[0,58],"source":"Gets the <xref:System.Uri> object requested by the client."}]},{"pos":[38586,43082],"content":"The Url property allows you to obtain all the information available from a <xref:System.Uri> object. If you need to know only the raw text of the URI request, consider using the <xref:System.Net.HttpListenerRequest.RawUrl%2A> property instead.       The Url property is null if the <xref:System.Uri> from the client could not be parsed.       The <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property indicates if <xref:System.Net.HttpListener> uses the raw unescaped URI instead of the converted URI where any percent-encoded values are converted and other normalization steps are taken.       When a <xref:System.Net.HttpListener> instance receives a request through the `http.sys` service, it creates an instance of the URI string provided by `http.sys`, and exposes it as the Url property.       The `http.sys` service exposes two request URI strings:      -   Raw URI      -   Converted URI       The raw URI is the <xref:System.Uri?displayProperty=fullName> provided in the request line of a HTTP request:       `GET /path/`       `Host: www.contoso.com`       The raw URI provided by `http.sys` for the request mentioned above, is \"/path/\". This represents the string following the HTTP verb as it was sent over the network.       The `http.sys` service creates a converted URI from the information provided in the request using the URI provided in the HTTP request line and the Host header to determine the origin server the request should be forwarded to. This is done by comparing the information from the request with a set of registered URI prefixes. In order to be able to compare those values, some normalization to the request needs to be done. For the sample above the converted URI would be as follows:       `http://www.contoso.com/path/`       The `http.sys` service combines the <xref:System.Uri.Host%2A?displayProperty=fullName> property value and the string in the request line to create a converted URI. In addition, `http.sys` and the <xref:System.Uri?displayProperty=fullName> class also do the following:      -   Un-escapes all percent encoded values.      -   Converts percent-encoded non-ASCII characters into a UTF-16 character representation. Note that UTF-8 and ANSI/DBCS characters are supported as well as Unicode characters (Unicode encoding using the %uXXXX format).      -   Executes other normalization steps, like path compression.       Since the request doesn't contain any information about the encoding used for percent-encoded values, it may not be possible to determine the correct encoding just by parsing the percent-encoded values.       Therefore `http.sys` provides two registry keys for modifying the process:      |Registry Key|Default Value|Description|   |------------------|-------------------|-----------------|   |EnableNonUTF8|1|If zero, `http.sys` accepts only UTF-8-encoded URLs.<br /><br /> If non-zero, `http.sys` also accepts ANSI-encoded or DBCS-encoded URLs in requests.|   |FavorUTF8|1|If non-zero, `http.sys` always tries to decode a URL as UTF-8 first; if that conversion fails and EnableNonUTF8 is non-zero, Http.sys then tries to decode it as ANSI or DBCS.<br /><br /> If zero (and EnableNonUTF8 is non-zero), `http.sys` tries to decode it as ANSI or DBCS; if that is not successful, it tries a UTF-8 conversion.|       When <xref:System.Net.HttpListener> receives a request, it uses the converted URI from `http.sys` as input to the Url property.       There is a need for supporting characters besides characters and numbers in URIs. An example is the following URI, which is used to retrieve customer information for customer number \"1/3812\":       `http://www.contoso.com/Customer('1%2F3812')/`       Note the percent-encoded slash in the Uri (%2F). This is necessary, since in this case the slash character represents data and not a path delimiter.       Passing the string to Uri constructor will lead to the following URI:       `http://www.contoso.com/Customer('1/3812')/`       Splitting the path into its segments would result in the following elements:       `Customer('1`       `3812')`       This is not the intent of the sender of the request.       If the <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property is set to false, then when the <xref:System.Net.HttpListener> receives a request, it uses the raw URI instead of the converted URI from `http.sys` as input to the Url property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Url property allows you to obtain all the information available from a <xref:System.Uri> object. If you need to know only the raw text of the URI request, consider using the <xref:System.Net.HttpListenerRequest.RawUrl%2A> property instead.       The Url property is null if the <xref:System.Uri> from the client could not be parsed.       The <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property indicates if <xref:System.Net.HttpListener> uses the raw unescaped URI instead of the converted URI where any percent-encoded values are converted and other normalization steps are taken.       When a <xref:System.Net.HttpListener> instance receives a request through the `http.sys` service, it creates an instance of the URI string provided by `http.sys`, and exposes it as the Url property.       The `http.sys` service exposes two request URI strings:      -   Raw URI      -   Converted URI       The raw URI is the <xref:System.Uri?displayProperty=fullName> provided in the request line of a HTTP request:       `GET /path/`       `Host: www.contoso.com`       The raw URI provided by `http.sys` for the request mentioned above, is \"/path/\". This represents the string following the HTTP verb as it was sent over the network.       The `http.sys` service creates a converted URI from the information provided in the request using the URI provided in the HTTP request line and the Host header to determine the origin server the request should be forwarded to. This is done by comparing the information from the request with a set of registered URI prefixes. In order to be able to compare those values, some normalization to the request needs to be done. For the sample above the converted URI would be as follows:       `http://www.contoso.com/path/`       The `http.sys` service combines the <xref:System.Uri.Host%2A?displayProperty=fullName> property value and the string in the request line to create a converted URI. In addition, `http.sys` and the <xref:System.Uri?displayProperty=fullName> class also do the following:      -   Un-escapes all percent encoded values.      -   Converts percent-encoded non-ASCII characters into a UTF-16 character representation. Note that UTF-8 and ANSI/DBCS characters are supported as well as Unicode characters (Unicode encoding using the %uXXXX format).      -   Executes other normalization steps, like path compression.       Since the request doesn't contain any information about the encoding used for percent-encoded values, it may not be possible to determine the correct encoding just by parsing the percent-encoded values.       Therefore `http.sys` provides two registry keys for modifying the process:      |Registry Key|Default Value|Description|   |------------------|-------------------|-----------------|   |EnableNonUTF8|1|If zero, `http.sys` accepts only UTF-8-encoded URLs.","pos":[0,2868],"nodes":[{"content":"The Url property allows you to obtain all the information available from a &lt;xref:System.Uri&gt; object.","pos":[0,100],"source":"The Url property allows you to obtain all the information available from a <xref:System.Uri> object."},{"content":"If you need to know only the raw text of the URI request, consider using the &lt;xref:System.Net.HttpListenerRequest.RawUrl%2A&gt; property instead.","pos":[101,243],"source":" If you need to know only the raw text of the URI request, consider using the <xref:System.Net.HttpListenerRequest.RawUrl%2A> property instead."},{"content":"The Url property is null if the &lt;xref:System.Uri&gt; from the client could not be parsed.","pos":[250,336],"source":"       The Url property is null if the <xref:System.Uri> from the client could not be parsed."},{"content":"The &lt;xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A&gt; property indicates if &lt;xref:System.Net.HttpListener&gt; uses the raw unescaped URI instead of the converted URI where any percent-encoded values are converted and other normalization steps are taken.","pos":[343,617],"source":"       The <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property indicates if <xref:System.Net.HttpListener> uses the raw unescaped URI instead of the converted URI where any percent-encoded values are converted and other normalization steps are taken."},{"content":"When a &lt;xref:System.Net.HttpListener&gt; instance receives a request through the <ph id=\"ph1\">`http.sys`</ph> service, it creates an instance of the URI string provided by <ph id=\"ph2\">`http.sys`</ph>, and exposes it as the Url property.","pos":[624,822],"source":"       When a <xref:System.Net.HttpListener> instance receives a request through the `http.sys` service, it creates an instance of the URI string provided by `http.sys`, and exposes it as the Url property."},{"content":"The <ph id=\"ph1\">`http.sys`</ph> service exposes two request URI strings:      -   Raw URI      -   Converted URI       The raw URI is the &lt;xref:System.Uri?displayProperty=fullName&gt; provided in the request line of a HTTP request:       <ph id=\"ph2\">`GET /path/`</ph>       <ph id=\"ph3\">`Host: www.contoso.com`</ph>       The raw URI provided by <ph id=\"ph4\">`http.sys`</ph> for the request mentioned above, is \"/path/\".","pos":[829,1176],"source":"       The `http.sys` service exposes two request URI strings:      -   Raw URI      -   Converted URI       The raw URI is the <xref:System.Uri?displayProperty=fullName> provided in the request line of a HTTP request:       `GET /path/`       `Host: www.contoso.com`       The raw URI provided by `http.sys` for the request mentioned above, is \"/path/\"."},{"content":"This represents the string following the HTTP verb as it was sent over the network.","pos":[1177,1260]},{"content":"The <ph id=\"ph1\">`http.sys`</ph> service creates a converted URI from the information provided in the request using the URI provided in the HTTP request line and the Host header to determine the origin server the request should be forwarded to.","pos":[1267,1493],"source":"       The `http.sys` service creates a converted URI from the information provided in the request using the URI provided in the HTTP request line and the Host header to determine the origin server the request should be forwarded to."},{"content":"This is done by comparing the information from the request with a set of registered URI prefixes.","pos":[1494,1591]},{"content":"In order to be able to compare those values, some normalization to the request needs to be done.","pos":[1592,1688]},{"content":"For the sample above the converted URI would be as follows:       <ph id=\"ph1\">`http://www.contoso.com/path/`</ph>       The <ph id=\"ph2\">`http.sys`</ph> service combines the &lt;xref:System.Uri.Host%2A?displayProperty=fullName&gt; property value and the string in the request line to create a converted URI.","pos":[1689,1955],"source":" For the sample above the converted URI would be as follows:       `http://www.contoso.com/path/`       The `http.sys` service combines the <xref:System.Uri.Host%2A?displayProperty=fullName> property value and the string in the request line to create a converted URI."},{"content":"In addition, <ph id=\"ph1\">`http.sys`</ph> and the &lt;xref:System.Uri?displayProperty=fullName&gt; class also do the following:      -   Un-escapes all percent encoded values.","pos":[1956,2107],"source":" In addition, `http.sys` and the <xref:System.Uri?displayProperty=fullName> class also do the following:      -   Un-escapes all percent encoded values."},{"content":"-   Converts percent-encoded non-ASCII characters into a UTF-16 character representation.","pos":[2113,2202]},{"content":"Note that UTF-8 and ANSI/DBCS characters are supported as well as Unicode characters (Unicode encoding using the %uXXXX format).","pos":[2203,2331]},{"content":"-   Executes other normalization steps, like path compression.","pos":[2337,2399]},{"content":"Since the request doesn't contain any information about the encoding used for percent-encoded values, it may not be possible to determine the correct encoding just by parsing the percent-encoded values.","pos":[2406,2608]},{"content":"Therefore <ph id=\"ph1\">`http.sys`</ph> provides two registry keys for modifying the process:      |Registry Key|Default Value|Description|   |------------------|-------------------|-----------------|   |EnableNonUTF8|1|If zero, <ph id=\"ph2\">`http.sys`</ph> accepts only UTF-8-encoded URLs.","pos":[2615,2868],"source":"       Therefore `http.sys` provides two registry keys for modifying the process:      |Registry Key|Default Value|Description|   |------------------|-------------------|-----------------|   |EnableNonUTF8|1|If zero, `http.sys` accepts only UTF-8-encoded URLs."}]},{"content":"If non-zero, <ph id=\"ph1\">`http.sys`</ph> also accepts ANSI-encoded or DBCS-encoded URLs in requests.|   |FavorUTF8|1|If non-zero, <ph id=\"ph2\">`http.sys`</ph> always tries to decode a URL as UTF-8 first; if that conversion fails and EnableNonUTF8 is non-zero, Http.sys then tries to decode it as ANSI or DBCS.","pos":[2881,3155],"source":" If non-zero, `http.sys` also accepts ANSI-encoded or DBCS-encoded URLs in requests.|   |FavorUTF8|1|If non-zero, `http.sys` always tries to decode a URL as UTF-8 first; if that conversion fails and EnableNonUTF8 is non-zero, Http.sys then tries to decode it as ANSI or DBCS."},{"content":" If zero (and EnableNonUTF8 is non-zero), `http.sys` tries to decode it as ANSI or DBCS; if that is not successful, it tries a UTF-8 conversion.|       When <xref:System.Net.HttpListener> receives a request, it uses the converted URI from `http.sys` as input to the Url property.       There is a need for supporting characters besides characters and numbers in URIs. An example is the following URI, which is used to retrieve customer information for customer number \"1/3812\":       `http://www.contoso.com/Customer('1%2F3812')/`       Note the percent-encoded slash in the Uri (%2F). This is necessary, since in this case the slash character represents data and not a path delimiter.       Passing the string to Uri constructor will lead to the following URI:       `http://www.contoso.com/Customer('1/3812')/`       Splitting the path into its segments would result in the following elements:       `Customer('1`       `3812')`       This is not the intent of the sender of the request.       If the <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property is set to false, then when the <xref:System.Net.HttpListener> receives a request, it uses the raw URI instead of the converted URI from `http.sys` as input to the Url property.","pos":[3167,4429],"nodes":[{"content":"If zero (and EnableNonUTF8 is non-zero), <ph id=\"ph1\">`http.sys`</ph> tries to decode it as ANSI or DBCS; if that is not successful, it tries a UTF-8 conversion.|       When &lt;xref:System.Net.HttpListener&gt; receives a request, it uses the converted URI from <ph id=\"ph2\">`http.sys`</ph> as input to the Url property.","pos":[1,279],"source":" If zero (and EnableNonUTF8 is non-zero), `http.sys` tries to decode it as ANSI or DBCS; if that is not successful, it tries a UTF-8 conversion.|       When <xref:System.Net.HttpListener> receives a request, it uses the converted URI from `http.sys` as input to the Url property."},{"content":"There is a need for supporting characters besides characters and numbers in URIs.","pos":[286,367]},{"content":"An example is the following URI, which is used to retrieve customer information for customer number \"1/3812\":       <ph id=\"ph1\">`http://www.contoso.com/Customer('1%2F3812')/`</ph>       Note the percent-encoded slash in the Uri (%2F).","pos":[368,585],"source":" An example is the following URI, which is used to retrieve customer information for customer number \"1/3812\":       `http://www.contoso.com/Customer('1%2F3812')/`       Note the percent-encoded slash in the Uri (%2F)."},{"content":"This is necessary, since in this case the slash character represents data and not a path delimiter.","pos":[586,685]},{"content":"Passing the string to Uri constructor will lead to the following URI:       <ph id=\"ph1\">`http://www.contoso.com/Customer('1/3812')/`</ph>       Splitting the path into its segments would result in the following elements:       <ph id=\"ph2\">`Customer('1`</ph>       <ph id=\"ph3\">`3812')`</ph>       This is not the intent of the sender of the request.","pos":[692,989],"source":"       Passing the string to Uri constructor will lead to the following URI:       `http://www.contoso.com/Customer('1/3812')/`       Splitting the path into its segments would result in the following elements:       `Customer('1`       `3812')`       This is not the intent of the sender of the request."},{"content":"If the &lt;xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A&gt; property is set to false, then when the &lt;xref:System.Net.HttpListener&gt; receives a request, it uses the raw URI instead of the converted URI from <ph id=\"ph1\">`http.sys`</ph> as input to the Url property.","pos":[996,1262],"source":"       If the <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property is set to false, then when the <xref:System.Net.HttpListener> receives a request, it uses the raw URI instead of the converted URI from `http.sys` as input to the Url property."}]}]},{"pos":[43367,43447],"content":"A <xref:System.Uri> object that identifies the resource requested by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Uri&gt; object that identifies the resource requested by the client.","pos":[0,80],"source":"A <xref:System.Uri> object that identifies the resource requested by the client."}]},{"pos":[43865,43963],"content":"Gets the Uniform Resource Identifier (URI) of the resource that referred the client to the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the Uniform Resource Identifier (URI) of the resource that referred the client to the server.","pos":[0,98]}]},{"pos":[43976,44726],"content":"If a client has followed a hyperlink to the requested URI, its request might contain a `Referrer` header that identifies the URI of the resource that contained the hyperlink.       Clients can falsify or choose not to present a <xref:System.Net.HttpRequestHeader> header. Therefore, while the UrlReferrer property can be useful for identifying basic trends in Web traffic; you should not use it as part of an authorization scheme to control access to data.       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.       The UrlReferrer is null when there is no `Referrer` header in the request or when the `Referrer` header is present in the request but does not parse to a valid <xref:System.Uri>.","needQuote":false,"needEscape":true,"nodes":[{"content":"If a client has followed a hyperlink to the requested URI, its request might contain a <ph id=\"ph1\">`Referrer`</ph> header that identifies the URI of the resource that contained the hyperlink.","pos":[0,174],"source":"If a client has followed a hyperlink to the requested URI, its request might contain a `Referrer` header that identifies the URI of the resource that contained the hyperlink."},{"content":"Clients can falsify or choose not to present a &lt;xref:System.Net.HttpRequestHeader&gt; header.","pos":[181,271],"source":"       Clients can falsify or choose not to present a <xref:System.Net.HttpRequestHeader> header."},{"content":"Therefore, while the UrlReferrer property can be useful for identifying basic trends in Web traffic; you should not use it as part of an authorization scheme to control access to data.","pos":[272,456]},{"content":"For a complete list of request headers, see the &lt;xref:System.Net.HttpRequestHeader&gt; enumeration.","pos":[463,559],"source":"       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration."},{"content":"The UrlReferrer is null when there is no <ph id=\"ph1\">`Referrer`</ph> header in the request or when the <ph id=\"ph2\">`Referrer`</ph> header is present in the request but does not parse to a valid &lt;xref:System.Uri&gt;.","pos":[566,744],"source":"       The UrlReferrer is null when there is no `Referrer` header in the request or when the `Referrer` header is present in the request but does not parse to a valid <xref:System.Uri>."}]},{"pos":[45016,45237],"content":"A &lt;xref:System.Uri&gt; object that contains the text of the request's &lt;xref:System.Net.HttpRequestHeader&gt; header, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the header was not included in the request.","needQuote":true,"needEscape":true,"source":"A <xref:System.Uri> object that contains the text of the request's <xref:System.Net.HttpRequestHeader> header, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the header was not included in the request."},{"pos":[45653,45697],"content":"Gets the user agent presented by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the user agent presented by the client.","pos":[0,44]}]},{"pos":[45710,46035],"content":"The `User-Agent` header typically contains text that identifies the name and version number of the software used to generate the request.       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.       The UserAgent is null when there is no `User-Agent` header in the request.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`User-Agent`</ph> header typically contains text that identifies the name and version number of the software used to generate the request.","pos":[0,137],"source":"The `User-Agent` header typically contains text that identifies the name and version number of the software used to generate the request."},{"content":"For a complete list of request headers, see the &lt;xref:System.Net.HttpRequestHeader&gt; enumeration.","pos":[144,240],"source":"       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration."},{"content":"The UserAgent is null when there is no <ph id=\"ph1\">`User-Agent`</ph> header in the request.","pos":[247,321],"source":"       The UserAgent is null when there is no `User-Agent` header in the request."}]},{"pos":[46329,46479],"content":"A &lt;xref:System.String&gt; object that contains the text of the request's <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_User-Agent\" name=\"User-Agent\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> header.","needQuote":true,"needEscape":true,"source":"A <xref:System.String> object that contains the text of the request's <xref uid=\"langword_csharp_User-Agent\" name=\"User-Agent\" href=\"\"></xref> header."},{"pos":[46923,46999],"content":"Gets the server IP address and port number to which the request is directed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the server IP address and port number to which the request is directed.","pos":[0,76]}]},{"pos":[47011,47148],"content":"The information returned by this property is also available in the <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> property value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The information returned by this property is also available in the &lt;xref:System.Net.HttpListenerRequest.LocalEndPoint%2A&gt; property value.","pos":[0,137],"source":"The information returned by this property is also available in the <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> property value."}]},{"pos":[47449,47515],"content":"A <xref:System.String> that contains the host address information.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that contains the host address information.","pos":[0,66],"source":"A <xref:System.String> that contains the host address information."}]},{"pos":[47950,48026],"content":"Gets the DNS name and, if provided, the port number specified by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the DNS name and, if provided, the port number specified by the client.","pos":[0,76]}]},{"pos":[48039,48409],"content":"The `Host` header contains the requested server host name and port number, if specified, separated by a colon (for example, `www.contoso.com:8080`).       You can use this property to return different responses depending on the host name specified in the request.       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Host`</ph> header contains the requested server host name and port number, if specified, separated by a colon (for example, <ph id=\"ph2\">`www.contoso.com:8080`</ph>).","pos":[0,148],"source":"The `Host` header contains the requested server host name and port number, if specified, separated by a colon (for example, `www.contoso.com:8080`)."},{"content":"You can use this property to return different responses depending on the host name specified in the request.","pos":[155,263]},{"content":"For a complete list of request headers, see the &lt;xref:System.Net.HttpRequestHeader&gt; enumeration.","pos":[270,366],"source":"       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration."}]},{"pos":[48706,48843],"content":"A &lt;xref:System.String&gt; value that contains the text of the request's <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Host\" name=\"Host\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> header.","needQuote":true,"needEscape":true,"source":"A <xref:System.String> value that contains the text of the request's <xref uid=\"langword_csharp_Host\" name=\"Host\" href=\"\"></xref> header."},{"pos":[49280,49343],"content":"Gets the natural languages that are preferred for the response.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the natural languages that are preferred for the response.","pos":[0,63]}]},{"pos":[49356,49617],"content":"For a detailed description of the `Accept-Language` header, see RFC 2616 Section 14.4, available at [http://www.rfc-editor.org](http://www.rfc-editor.org/).       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"For a detailed description of the <ph id=\"ph1\">`Accept-Language`</ph> header, see RFC 2616 Section 14.4, available at <bpt id=\"p1\">[</bpt>http://www.rfc-editor.org<ept id=\"p1\">](http://www.rfc-editor.org/)</ept>.","pos":[0,156],"source":"For a detailed description of the `Accept-Language` header, see RFC 2616 Section 14.4, available at [http://www.rfc-editor.org](http://www.rfc-editor.org/)."},{"content":"For a complete list of request headers, see the &lt;xref:System.Net.HttpRequestHeader&gt; enumeration.","pos":[163,259],"source":"       For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration."}]},{"pos":[49953,50228],"content":"A &lt;xref:System.String&gt; array that contains the languages specified in the request's &lt;xref:System.Net.HttpRequestHeader&gt; header or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the client request did not include an &lt;xref:System.Net.HttpRequestHeader&gt; header.","needQuote":true,"needEscape":true,"source":"A <xref:System.String> array that contains the languages specified in the request's <xref:System.Net.HttpRequestHeader> header or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the client request did not include an <xref:System.Net.HttpRequestHeader> header."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.HttpListenerRequest\n  id: HttpListenerRequest\n  children:\n  - System.Net.HttpListenerRequest.AcceptTypes\n  - System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)\n  - System.Net.HttpListenerRequest.ClientCertificateError\n  - System.Net.HttpListenerRequest.ContentEncoding\n  - System.Net.HttpListenerRequest.ContentLength64\n  - System.Net.HttpListenerRequest.ContentType\n  - System.Net.HttpListenerRequest.Cookies\n  - System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)\n  - System.Net.HttpListenerRequest.GetClientCertificate\n  - System.Net.HttpListenerRequest.GetClientCertificateAsync\n  - System.Net.HttpListenerRequest.HasEntityBody\n  - System.Net.HttpListenerRequest.Headers\n  - System.Net.HttpListenerRequest.HttpMethod\n  - System.Net.HttpListenerRequest.InputStream\n  - System.Net.HttpListenerRequest.IsAuthenticated\n  - System.Net.HttpListenerRequest.IsLocal\n  - System.Net.HttpListenerRequest.IsSecureConnection\n  - System.Net.HttpListenerRequest.IsWebSocketRequest\n  - System.Net.HttpListenerRequest.KeepAlive\n  - System.Net.HttpListenerRequest.LocalEndPoint\n  - System.Net.HttpListenerRequest.ProtocolVersion\n  - System.Net.HttpListenerRequest.QueryString\n  - System.Net.HttpListenerRequest.RawUrl\n  - System.Net.HttpListenerRequest.RemoteEndPoint\n  - System.Net.HttpListenerRequest.RequestTraceIdentifier\n  - System.Net.HttpListenerRequest.ServiceName\n  - System.Net.HttpListenerRequest.TransportContext\n  - System.Net.HttpListenerRequest.Url\n  - System.Net.HttpListenerRequest.UrlReferrer\n  - System.Net.HttpListenerRequest.UserAgent\n  - System.Net.HttpListenerRequest.UserHostAddress\n  - System.Net.HttpListenerRequest.UserHostName\n  - System.Net.HttpListenerRequest.UserLanguages\n  langs:\n  - csharp\n  name: HttpListenerRequest\n  nameWithType: HttpListenerRequest\n  fullName: System.Net.HttpListenerRequest\n  type: Class\n  summary: Describes an incoming HTTP request to an <xref href=\"System.Net.HttpListener\"></xref> object. This class cannot be inherited.\n  remarks: \"When a client makes a request to a Uniform Resource Identifier (URI) handled by an <xref:System.Net.HttpListener> object, the <xref:System.Net.HttpListener> provides a <xref:System.Net.HttpListenerContext> object that contains information about the sender, the request, and the response that is sent to the client. The <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName> property returns the HttpListenerRequest object that describes the request.  \\n  \\n The HttpListenerRequest object contains information about the request, such as the request <xref:System.Net.HttpListenerRequest.HttpMethod%2A> string, <xref:System.Net.HttpListenerRequest.UserAgent%2A> string, and request body data (see the <xref:System.Net.HttpListenerRequest.InputStream%2A> property).  \\n  \\n To reply to the request, you must get the associated response using the <xref:System.Net.HttpListenerContext.Response%2A> property.\"\n  example:\n  - \"The following code example demonstrates how to receive and respond to a HttpListenerRequest.  \\n  \\n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/t-system.net.httplistene_3_1.cs)]\"\n  syntax:\n    content: public sealed class HttpListenerRequest\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.AcceptTypes\n  id: AcceptTypes\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: AcceptTypes\n  nameWithType: HttpListenerRequest.AcceptTypes\n  fullName: System.Net.HttpListenerRequest.AcceptTypes\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the MIME types accepted by the client.\n  remarks: \"The `Accept` header is a string of space-separated Multipurpose Internet Mail Extensions (MIME) type names (for example, `image/jpeg`), which indicate the MIME types that the client is prepared to accept and process in a response. The `*/*` entry indicates that the client accepts any MIME type. For a detailed description of the `Accept` header, see RFC 2616, available at [http://www.rfc-editor.org](http://www.rfc-editor.org/).  \\n  \\n For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.\"\n  example:\n  - \"The following code example demonstrates using this property.  \\n  \\n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_37_1.cs)]\"\n  syntax:\n    content: public string[] AcceptTypes { get; }\n    return:\n      type: System.String[]\n      description: A <xref:System.String> array that contains the type names specified in the request's <xref uid=\"langword_csharp_Accept\" name=\"Accept\" href=\"\"></xref> header or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the client request did not include an <xref uid=\"langword_csharp_Accept\" name=\"Accept\" href=\"\"></xref> header.\n  overload: System.Net.HttpListenerRequest.AcceptTypes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)\n  id: BeginGetClientCertificate(System.AsyncCallback,System.Object)\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: BeginGetClientCertificate(AsyncCallback,Object)\n  nameWithType: HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)\n  fullName: System.Net.HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Begins an asynchronous request for the client's X.509 v.3 certificate.\n  syntax:\n    content: public IAsyncResult BeginGetClientCertificate (AsyncCallback requestCallback, object state);\n    parameters:\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the callback delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that indicates the status of the operation.\n  overload: System.Net.HttpListenerRequest.BeginGetClientCertificate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.ClientCertificateError\n  id: ClientCertificateError\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: ClientCertificateError\n  nameWithType: HttpListenerRequest.ClientCertificateError\n  fullName: System.Net.HttpListenerRequest.ClientCertificateError\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets an error code that identifies a problem with the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\"></xref> provided by the client.\n  remarks: This property contains a Windows error code returned by the Secure Channel (Schannel) Security Support Provider Interface (SSPI), which is used to validate the certificate. For more information about SSPI support for Schannel, see \"Creating a Secure Connection Using Schannel\" in the Security documentation at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).\n  example:\n  - \"The following code example checks this property to determine whether the request includes a valid client certificate.  \\n  \\n [!code-vb[NCLListener#3](~/add/codesnippet/visualbasic/p-system.net.httplistene_33_1.vb)]\\n [!code-cs[NCLListener#3](~/add/codesnippet/csharp/p-system.net.httplistene_33_1.cs)]\"\n  syntax:\n    content: public int ClientCertificateError { get; }\n    return:\n      type: System.Int32\n      description: An <xref:System.Int32> value that contains a Windows error code.\n  overload: System.Net.HttpListenerRequest.ClientCertificateError*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The client certificate has not been initialized yet by a call to the <xref:System.Net.HttpListenerRequest.BeginGetClientCertificate*> or <xref:System.Net.HttpListenerRequest.GetClientCertificate*> methods  \\n  \\n -or -  \\n  \\n The operation is still in progress.\"\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.ContentEncoding\n  id: ContentEncoding\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: ContentEncoding\n  nameWithType: HttpListenerRequest.ContentEncoding\n  fullName: System.Net.HttpListenerRequest.ContentEncoding\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the content encoding that can be used with data sent with the request\n  remarks: An <xref:System.Text.Encoding> object can be used to convert byte sequences into character sets (code pages) and characters into byte sequences. This property uses the charset value from the `Content-Type` header to determine the encoding. If that information is not available, this property returns <xref:System.Text.Encoding.Default%2A?displayProperty=fullName>.\n  example:\n  - \"The following code example demonstrates using the ContentEncoding property.  \\n  \\n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_40_1.cs)]\"\n  syntax:\n    content: public System.Text.Encoding ContentEncoding { get; }\n    return:\n      type: System.Text.Encoding\n      description: An <xref:System.Text.Encoding> object suitable for use with the data in the <xref:System.Net.HttpListenerRequest.InputStream*> property.\n  overload: System.Net.HttpListenerRequest.ContentEncoding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.ContentLength64\n  id: ContentLength64\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: ContentLength64\n  nameWithType: HttpListenerRequest.ContentLength64\n  fullName: System.Net.HttpListenerRequest.ContentLength64\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the length of the body data included in the request.\n  remarks: \"The `Content-Length` header expresses the length, in bytes, of the body data that accompanies the request.  \\n  \\n For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.\"\n  example:\n  - \"The following code example uses the ContentLength64 property while processing body data.  \\n  \\n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_8_1.cs)]\"\n  syntax:\n    content: public long ContentLength64 { get; }\n    return:\n      type: System.Int64\n      description: The value from the request's <xref uid=\"langword_csharp_Content-Length\" name=\"Content-Length\" href=\"\"></xref> header. This value is -1 if the content length is not known.\n  overload: System.Net.HttpListenerRequest.ContentLength64*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.ContentType\n  id: ContentType\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: ContentType\n  nameWithType: HttpListenerRequest.ContentType\n  fullName: System.Net.HttpListenerRequest.ContentType\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the MIME type of the body data included in the request.\n  remarks: \"If a client includes body data in a request, it declares the Multipurpose Internet Mail Extensions (MIME) type of the body data in the `Content-Type` header. For example, the default MIME type of data returned from a Web form using the `POST` method is `application/x-www-form-urlencoded`.  \\n  \\n For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration and RFC 2616, available at [http://www.rfc-editor.org](http://www.rfc-editor.org/).  \\n  \\n The ContentType is null when there is no `Content-Type` header in the request.\"\n  example:\n  - \"The following code example demonstrates how to use this property.  \\n  \\n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_12_1.cs)]\"\n  syntax:\n    content: public string ContentType { get; }\n    return:\n      type: System.String\n      description: A <xref:System.String> that contains the text of the request's <xref uid=\"langword_csharp_Content-Type\" name=\"Content-Type\" href=\"\"></xref> header.\n  overload: System.Net.HttpListenerRequest.ContentType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.Cookies\n  id: Cookies\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: Cookies\n  nameWithType: HttpListenerRequest.Cookies\n  fullName: System.Net.HttpListenerRequest.Cookies\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the cookies sent with the request.\n  remarks: A cookie is name/value text data from a Web server that is stored on the local (client) computer.\n  example:\n  - \"The following code example displays the values of cookies sent with the request.  \\n  \\n [!code-cs[Net_Listener_Basic#18](~/add/codesnippet/csharp/p-system.net.httplistene_7_1.cs)]\"\n  syntax:\n    content: public System.Net.CookieCollection Cookies { get; }\n    return:\n      type: System.Net.CookieCollection\n      description: A <xref:System.Net.CookieCollection> that contains cookies that accompany the request. This property returns an empty collection if the request does not contain cookies.\n  overload: System.Net.HttpListenerRequest.Cookies*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)\n  id: EndGetClientCertificate(System.IAsyncResult)\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: EndGetClientCertificate(IAsyncResult)\n  nameWithType: HttpListenerRequest.EndGetClientCertificate(IAsyncResult)\n  fullName: System.Net.HttpListenerRequest.EndGetClientCertificate(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Ends an asynchronous request for the client's X.509 v.3 certificate.\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 EndGetClientCertificate (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The pending request for the certificate.\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The <xref:System.IAsyncResult> object that is returned when the operation started.\n  overload: System.Net.HttpListenerRequest.EndGetClientCertificate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not obtained by calling <xref:System.Net.HttpListenerRequest.BeginGetClientCertificate*><code>e.</code>\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This method was already called for the operation identified by <code>asyncResult</code>.\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.GetClientCertificate\n  id: GetClientCertificate\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: GetClientCertificate()\n  nameWithType: HttpListenerRequest.GetClientCertificate()\n  fullName: System.Net.HttpListenerRequest.GetClientCertificate()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Retrieves the client's X.509 v.3 certificate.\n  remarks: This method blocks until the certificate is retrieved.\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 GetClientCertificate ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: A <xref href=\"System.Security.Cryptography.X509Certificates\"></xref> object that contains the client's X.509 v.3 certificate.\n  overload: System.Net.HttpListenerRequest.GetClientCertificate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to this method to retrieve the client's X.509 v.3 certificate is in progress and therefore another call to this method cannot be made.\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync\n  id: GetClientCertificateAsync\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: GetClientCertificateAsync()\n  nameWithType: HttpListenerRequest.GetClientCertificateAsync()\n  fullName: System.Net.HttpListenerRequest.GetClientCertificateAsync()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Retrieves the client's X.509 v.3 certificate as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete when the certificate has been retrieved.  \\n  \\n If a call to this method to retrieve the client's X.509 v.3 certificate is in progress, then another call to this method cannot be made.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetClientCertificateAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.Security.Cryptography.X509Certificates.X509Certificate2}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref href=\\\"System.Security.Cryptography.X509Certificates\\\"></xref> object that contains the client's X.509 v.3 certificate.\"\n  overload: System.Net.HttpListenerRequest.GetClientCertificateAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.HasEntityBody\n  id: HasEntityBody\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: HasEntityBody\n  nameWithType: HttpListenerRequest.HasEntityBody\n  fullName: System.Net.HttpListenerRequest.HasEntityBody\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a <xref:System.Boolean> value that indicates whether the request has associated body data.\n  remarks: A request that sends data to the server using the `POST` method, for example, should have an entity body.\n  example:\n  - \"The following code example demonstrates using this property.  \\n  \\n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_17_1.cs)]\"\n  syntax:\n    content: public bool HasEntityBody { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the request has associated body data; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListenerRequest.HasEntityBody*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.Headers\n  id: Headers\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: Headers\n  nameWithType: HttpListenerRequest.Headers\n  fullName: System.Net.HttpListenerRequest.Headers\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the collection of header name/value pairs sent in the request.\n  remarks: \"Request headers contain metadata information. For example, headers can contain the Uniform Resource Identifier (URI) of the resource that referred the client to the server, the identity of the user agent employed by the client, and the acceptable MIME types for data in the response body.  \\n  \\n For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.\"\n  example:\n  - \"The following code example displays all the information in a given <xref:System.Net.WebHeaderCollection> object.  \\n  \\n [!code-cs[Net_Listener_Basic#21](~/add/codesnippet/csharp/p-system.net.httplistene_14_1.cs)]\"\n  syntax:\n    content: public System.Collections.Specialized.NameValueCollection Headers { get; }\n    return:\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref:System.Net.WebHeaderCollection> that contains the HTTP headers included in the request.\n  overload: System.Net.HttpListenerRequest.Headers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.HttpMethod\n  id: HttpMethod\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: HttpMethod\n  nameWithType: HttpListenerRequest.HttpMethod\n  fullName: System.Net.HttpListenerRequest.HttpMethod\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the HTTP method specified by the client.\n  remarks: The HTTP method is typically GET or POST, depending on the action desired by the client.\n  example:\n  - \"The following code example demonstrates using this property.  \\n  \\n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_10_1.cs)]\"\n  syntax:\n    content: public string HttpMethod { get; }\n    return:\n      type: System.String\n      description: A <xref:System.String> that contains the method used in the request.\n  overload: System.Net.HttpListenerRequest.HttpMethod*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.InputStream\n  id: InputStream\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: InputStream\n  nameWithType: HttpListenerRequest.InputStream\n  fullName: System.Net.HttpListenerRequest.InputStream\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a stream that contains the body data sent by the client.\n  remarks: \"If the client transmits data (for example, using the HTTP `POST` method), the stream returned by this method contains that data.  \\n  \\n> [!NOTE]\\n>  Closing the request does not close the stream returned by this property. When you no longer need the stream, you should close it by calling the <xref:System.IO.Stream.Close%2A> method.\"\n  example:\n  - \"The following code example demonstrates using this property to read the data sent with a request.  \\n  \\n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_27_1.cs)]\"\n  syntax:\n    content: public System.IO.Stream InputStream { get; }\n    return:\n      type: System.IO.Stream\n      description: A readable <xref:System.IO.Stream> object that contains the bytes sent by the client in the body of the request. This property returns <xref:System.IO.Stream> if no data is sent with the request.\n  overload: System.Net.HttpListenerRequest.InputStream*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.IsAuthenticated\n  id: IsAuthenticated\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: IsAuthenticated\n  nameWithType: HttpListenerRequest.IsAuthenticated\n  fullName: System.Net.HttpListenerRequest.IsAuthenticated\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a <xref:System.Boolean> value that indicates whether the client sending this request is authenticated.\n  remarks: \"Your application requests client authentication using the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> or <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property.  \\n  \\n Your application does not receive an <xref:System.Net.HttpListenerContext> for requests from clients that are not successfully authenticated.\"\n  example:\n  - \"The following code example displays the value of the IsAuthenticated property.  \\n  \\n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_1_1.cs)]\"\n  syntax:\n    content: public bool IsAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the client was authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListenerRequest.IsAuthenticated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.IsLocal\n  id: IsLocal\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: IsLocal\n  nameWithType: HttpListenerRequest.IsLocal\n  fullName: System.Net.HttpListenerRequest.IsLocal\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a <xref:System.Boolean> value that indicates whether the request is sent from the local computer.\n  remarks: Applications can use this property to perform special processing when requests are from the local computer.\n  example:\n  - \"The following code example demonstrates using the IsLocal property.  \\n  \\n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_28_1.cs)]\"\n  syntax:\n    content: public bool IsLocal { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the request originated on the same computer as the <xref href=\"System.Net.HttpListener\"></xref> object that provided the request; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListenerRequest.IsLocal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.IsSecureConnection\n  id: IsSecureConnection\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: IsSecureConnection\n  nameWithType: HttpListenerRequest.IsSecureConnection\n  fullName: System.Net.HttpListenerRequest.IsSecureConnection\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a <xref:System.Boolean> value that indicates whether the TCP connection used to send the request is using the Secure Sockets Layer (SSL) protocol.\n  remarks: To request a secure connection, the client request uses <xref:System.Uri.UriSchemeHttps> instead of <xref:System.Uri.UriSchemeHttp>. If the connection cannot be established using SSL, the client receives a <xref:System.Net.WebException> that provides information about the error.\n  example:\n  - \"The following code example demonstrates using the IsSecureConnection property.  \\n  \\n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_3_1.cs)]\"\n  syntax:\n    content: public bool IsSecureConnection { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the TCP connection is using SSL; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListenerRequest.IsSecureConnection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.IsWebSocketRequest\n  id: IsWebSocketRequest\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: IsWebSocketRequest\n  nameWithType: HttpListenerRequest.IsWebSocketRequest\n  fullName: System.Net.HttpListenerRequest.IsWebSocketRequest\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a <xref:System.Boolean> value that indicates whether the TCP connection was  a WebSocket request.\n  syntax:\n    content: public bool IsWebSocketRequest { get; }\n    return:\n      type: System.Boolean\n      description: \"Returns <xref:System.Boolean>.  \\n  \\n <xref uid=\\\"langword_csharp_true\\\" name=\\\"true\\\" href=\\\"\\\"></xref> if the TCP connection is a WebSocket request; otherwise, <xref uid=\\\"langword_csharp_false\\\" name=\\\"false\\\" href=\\\"\\\"></xref>.\"\n  overload: System.Net.HttpListenerRequest.IsWebSocketRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.KeepAlive\n  id: KeepAlive\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: KeepAlive\n  nameWithType: HttpListenerRequest.KeepAlive\n  fullName: System.Net.HttpListenerRequest.KeepAlive\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a <xref:System.Boolean> value that indicates whether the client requests a persistent connection.\n  remarks: If an HTTP client and server expect to exchange data multiple times in a short time period, a persistent connection speeds up their communications by allowing them to avoid the overhead required to open and close a TCP connection for each message. For clients using HTTP/1.1, the default value for this property is `true`.\n  example:\n  - \"The following code example demonstrates using this property.  \\n  \\n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_5_1.cs)]\"\n  syntax:\n    content: public bool KeepAlive { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the connection should be kept open; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListenerRequest.KeepAlive*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.LocalEndPoint\n  id: LocalEndPoint\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: LocalEndPoint\n  nameWithType: HttpListenerRequest.LocalEndPoint\n  fullName: System.Net.HttpListenerRequest.LocalEndPoint\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Get the server IP address and port number to which the request is directed.\n  remarks: This property is useful when you want to respond to requests based on the way they are addressed.\n  example:\n  - \"The following code example demonstrates using this property.  \\n  \\n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_38_1.cs)]\"\n  syntax:\n    content: public System.Net.IPEndPoint LocalEndPoint { get; }\n    return:\n      type: System.Net.IPEndPoint\n      description: An <xref:System.Net.IPEndPoint> that represents the IP address that the request is sent to.\n  overload: System.Net.HttpListenerRequest.LocalEndPoint*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.ProtocolVersion\n  id: ProtocolVersion\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: ProtocolVersion\n  nameWithType: HttpListenerRequest.ProtocolVersion\n  fullName: System.Net.HttpListenerRequest.ProtocolVersion\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the HTTP version used by the requesting client.\n  remarks: The capabilities of different HTTP versions are specified in the documents available at [http://www.rfc-editor.org](http://www.rfc-editor.org/).\n  example:\n  - \"The following code example demonstrates using this property.  \\n  \\n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_9_1.cs)]\"\n  syntax:\n    content: public Version ProtocolVersion { get; }\n    return:\n      type: System.Version\n      description: A <xref:System.Version> that identifies the client's version of HTTP.\n  overload: System.Net.HttpListenerRequest.ProtocolVersion*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.QueryString\n  id: QueryString\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: QueryString\n  nameWithType: HttpListenerRequest.QueryString\n  fullName: System.Net.HttpListenerRequest.QueryString\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the query string included in the request.\n  remarks: \"In a URL, the query information is separated from the path information by a question mark (?). Name/value pairs are separated by an equals sign (=). To access the query data as a single string, get the <xref:System.Uri.Query%2A> property value from the <xref:System.Uri> object returned by <xref:System.Net.HttpListenerRequest.Url%2A>.  \\n  \\n> [!NOTE]\\n>  Queries without an equal sign (example: [http://www.contoso.com/query.htm?Name](http://www.contoso.com/query.htm?Name) ) are added to the `null` key in the <xref:System.Collections.Specialized.NameValueCollection>.\"\n  example:\n  - \"The following code example demonstrates using the QueryString property.  \\n  \\n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_4_1.cs)]\"\n  syntax:\n    content: public System.Collections.Specialized.NameValueCollection QueryString { get; }\n    return:\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> object that contains the query data included in the request <xref:System.Net.HttpListenerRequest.Url*>.\n  overload: System.Net.HttpListenerRequest.QueryString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.RawUrl\n  id: RawUrl\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: RawUrl\n  nameWithType: HttpListenerRequest.RawUrl\n  fullName: System.Net.HttpListenerRequest.RawUrl\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the URL information (without the host and port) requested by the client.\n  remarks: \"The raw URL is defined as the part of the URL following the domain information. In the URL string `http://www.contoso.com/articles/recent.aspx`, the raw URL is `/articles/recent.aspx`. The raw URL includes the query string, if present.  \\n  \\n To obtain the host and port information, use the <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> property.\"\n  example:\n  - \"The following code example demonstrates using the RawUrl property.  \\n  \\n [!code-cs[Net_Listener_Basic#11](~/add/codesnippet/csharp/p-system.net.httplistene_29_1.cs)]\"\n  syntax:\n    content: public string RawUrl { get; }\n    return:\n      type: System.String\n      description: A <xref:System.String> that contains the raw URL for this request.\n  overload: System.Net.HttpListenerRequest.RawUrl*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.RemoteEndPoint\n  id: RemoteEndPoint\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: RemoteEndPoint\n  nameWithType: HttpListenerRequest.RemoteEndPoint\n  fullName: System.Net.HttpListenerRequest.RemoteEndPoint\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the client IP address and port number from which the request originated.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates using this property.  \\n  \\n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_11_1.cs)]\"\n  syntax:\n    content: public System.Net.IPEndPoint RemoteEndPoint { get; }\n    return:\n      type: System.Net.IPEndPoint\n      description: An <xref:System.Net.IPEndPoint> that represents the IP address and port number from which the request originated.\n  overload: System.Net.HttpListenerRequest.RemoteEndPoint*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier\n  id: RequestTraceIdentifier\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: RequestTraceIdentifier\n  nameWithType: HttpListenerRequest.RequestTraceIdentifier\n  fullName: System.Net.HttpListenerRequest.RequestTraceIdentifier\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the request identifier of the incoming HTTP request.\n  syntax:\n    content: public Guid RequestTraceIdentifier { get; }\n    return:\n      type: System.Guid\n      description: A <xref:System.Guid> object that contains the identifier of the HTTP request.\n  overload: System.Net.HttpListenerRequest.RequestTraceIdentifier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.ServiceName\n  id: ServiceName\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: ServiceName\n  nameWithType: HttpListenerRequest.ServiceName\n  fullName: System.Net.HttpListenerRequest.ServiceName\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the Service Provider Name (SPN) that the client sent on the request.\n  remarks: An application could use the ServiceName property to perform custom Service Provide Name (SPN) validation.\n  syntax:\n    content: public string ServiceName { get; }\n    return:\n      type: System.String\n      description: A <xref:System.String> that contains the SPN the client sent on the request.\n  overload: System.Net.HttpListenerRequest.ServiceName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.TransportContext\n  id: TransportContext\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: TransportContext\n  nameWithType: HttpListenerRequest.TransportContext\n  fullName: System.Net.HttpListenerRequest.TransportContext\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the <xref:System.Net.TransportContext> for the client request.\n  remarks: \"The <xref:System.Net.TransportContext> property can be used to retrieve the channel binding token (CBT) for an <xref:System.Net.HttpListenerRequest> which was sent using HTTPS.  \\n  \\n An application could use the <xref:System.Net.TransportContext> property to perform custom authentication using calls to the native Win32 [AcceptSecurityContext](http://go.microsoft.com/fwlink/?LinkId=147021) function.  \\n  \\n If an application attempts to retrieve the channel binding token (CBT) from this TransportContext property using the <xref:System.Net.TransportContext.GetChannelBinding%2A> method and the <xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind> is not <xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind>, then the <xref:System.Net.HttpListenerRequest> will throw <xref:System.NotSupportedException>. The <xref:System.Net.HttpListenerRequest> overrides the <xref:System.Net.TransportContext.GetChannelBinding%2A> method with an internal implementation.\"\n  syntax:\n    content: public System.Net.TransportContext TransportContext { get; }\n    return:\n      type: System.Net.TransportContext\n      description: A <xref:System.Net.TransportContext> object for the client request.\n  overload: System.Net.HttpListenerRequest.TransportContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.Url\n  id: Url\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: Url\n  nameWithType: HttpListenerRequest.Url\n  fullName: System.Net.HttpListenerRequest.Url\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the <xref:System.Uri> object requested by the client.\n  remarks: \"The Url property allows you to obtain all the information available from a <xref:System.Uri> object. If you need to know only the raw text of the URI request, consider using the <xref:System.Net.HttpListenerRequest.RawUrl%2A> property instead.  \\n  \\n The Url property is null if the <xref:System.Uri> from the client could not be parsed.  \\n  \\n The <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property indicates if <xref:System.Net.HttpListener> uses the raw unescaped URI instead of the converted URI where any percent-encoded values are converted and other normalization steps are taken.  \\n  \\n When a <xref:System.Net.HttpListener> instance receives a request through the `http.sys` service, it creates an instance of the URI string provided by `http.sys`, and exposes it as the Url property.  \\n  \\n The `http.sys` service exposes two request URI strings:  \\n  \\n-   Raw URI  \\n  \\n-   Converted URI  \\n  \\n The raw URI is the <xref:System.Uri?displayProperty=fullName> provided in the request line of a HTTP request:  \\n  \\n `GET /path/`  \\n  \\n `Host: www.contoso.com`  \\n  \\n The raw URI provided by `http.sys` for the request mentioned above, is \\\"/path/\\\". This represents the string following the HTTP verb as it was sent over the network.  \\n  \\n The `http.sys` service creates a converted URI from the information provided in the request using the URI provided in the HTTP request line and the Host header to determine the origin server the request should be forwarded to. This is done by comparing the information from the request with a set of registered URI prefixes. In order to be able to compare those values, some normalization to the request needs to be done. For the sample above the converted URI would be as follows:  \\n  \\n `http://www.contoso.com/path/`  \\n  \\n The `http.sys` service combines the <xref:System.Uri.Host%2A?displayProperty=fullName> property value and the string in the request line to create a converted URI. In addition, `http.sys` and the <xref:System.Uri?displayProperty=fullName> class also do the following:  \\n  \\n-   Un-escapes all percent encoded values.  \\n  \\n-   Converts percent-encoded non-ASCII characters into a UTF-16 character representation. Note that UTF-8 and ANSI/DBCS characters are supported as well as Unicode characters (Unicode encoding using the %uXXXX format).  \\n  \\n-   Executes other normalization steps, like path compression.  \\n  \\n Since the request doesn't contain any information about the encoding used for percent-encoded values, it may not be possible to determine the correct encoding just by parsing the percent-encoded values.  \\n  \\n Therefore `http.sys` provides two registry keys for modifying the process:  \\n  \\n|Registry Key|Default Value|Description|  \\n|------------------|-------------------|-----------------|  \\n|EnableNonUTF8|1|If zero, `http.sys` accepts only UTF-8-encoded URLs.<br /><br /> If non-zero, `http.sys` also accepts ANSI-encoded or DBCS-encoded URLs in requests.|  \\n|FavorUTF8|1|If non-zero, `http.sys` always tries to decode a URL as UTF-8 first; if that conversion fails and EnableNonUTF8 is non-zero, Http.sys then tries to decode it as ANSI or DBCS.<br /><br /> If zero (and EnableNonUTF8 is non-zero), `http.sys` tries to decode it as ANSI or DBCS; if that is not successful, it tries a UTF-8 conversion.|  \\n  \\n When <xref:System.Net.HttpListener> receives a request, it uses the converted URI from `http.sys` as input to the Url property.  \\n  \\n There is a need for supporting characters besides characters and numbers in URIs. An example is the following URI, which is used to retrieve customer information for customer number \\\"1/3812\\\":  \\n  \\n `http://www.contoso.com/Customer('1%2F3812')/`  \\n  \\n Note the percent-encoded slash in the Uri (%2F). This is necessary, since in this case the slash character represents data and not a path delimiter.  \\n  \\n Passing the string to Uri constructor will lead to the following URI:  \\n  \\n `http://www.contoso.com/Customer('1/3812')/`  \\n  \\n Splitting the path into its segments would result in the following elements:  \\n  \\n `Customer('1`  \\n  \\n `3812')`  \\n  \\n This is not the intent of the sender of the request.  \\n  \\n If the <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property is set to false, then when the <xref:System.Net.HttpListener> receives a request, it uses the raw URI instead of the converted URI from `http.sys` as input to the Url property.\"\n  example:\n  - \"The following code example demonstrates using the Url property.  \\n  \\n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_20_1.cs)]\"\n  syntax:\n    content: public Uri Url { get; }\n    return:\n      type: System.Uri\n      description: A <xref:System.Uri> object that identifies the resource requested by the client.\n  overload: System.Net.HttpListenerRequest.Url*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.UrlReferrer\n  id: UrlReferrer\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: UrlReferrer\n  nameWithType: HttpListenerRequest.UrlReferrer\n  fullName: System.Net.HttpListenerRequest.UrlReferrer\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the Uniform Resource Identifier (URI) of the resource that referred the client to the server.\n  remarks: \"If a client has followed a hyperlink to the requested URI, its request might contain a `Referrer` header that identifies the URI of the resource that contained the hyperlink.  \\n  \\n Clients can falsify or choose not to present a <xref:System.Net.HttpRequestHeader> header. Therefore, while the UrlReferrer property can be useful for identifying basic trends in Web traffic; you should not use it as part of an authorization scheme to control access to data.  \\n  \\n For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.  \\n  \\n The UrlReferrer is null when there is no `Referrer` header in the request or when the `Referrer` header is present in the request but does not parse to a valid <xref:System.Uri>.\"\n  example:\n  - \"The following code example demonstrates using this property.  \\n  \\n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_22_1.cs)]\"\n  syntax:\n    content: public Uri UrlReferrer { get; }\n    return:\n      type: System.Uri\n      description: A <xref:System.Uri> object that contains the text of the request's <xref:System.Net.HttpRequestHeader> header, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the header was not included in the request.\n  overload: System.Net.HttpListenerRequest.UrlReferrer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.UserAgent\n  id: UserAgent\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: UserAgent\n  nameWithType: HttpListenerRequest.UserAgent\n  fullName: System.Net.HttpListenerRequest.UserAgent\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the user agent presented by the client.\n  remarks: \"The `User-Agent` header typically contains text that identifies the name and version number of the software used to generate the request.  \\n  \\n For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.  \\n  \\n The UserAgent is null when there is no `User-Agent` header in the request.\"\n  example:\n  - \"The following code example demonstrates using this property.  \\n  \\n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_42_1.cs)]\"\n  syntax:\n    content: public string UserAgent { get; }\n    return:\n      type: System.String\n      description: A <xref:System.String> object that contains the text of the request's <xref uid=\"langword_csharp_User-Agent\" name=\"User-Agent\" href=\"\"></xref> header.\n  overload: System.Net.HttpListenerRequest.UserAgent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.UserHostAddress\n  id: UserHostAddress\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: UserHostAddress\n  nameWithType: HttpListenerRequest.UserHostAddress\n  fullName: System.Net.HttpListenerRequest.UserHostAddress\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the server IP address and port number to which the request is directed.\n  remarks: The information returned by this property is also available in the <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> property value.\n  example:\n  - \"The following code example displays the value of this property.  \\n  \\n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_6_1.cs)]\"\n  syntax:\n    content: public string UserHostAddress { get; }\n    return:\n      type: System.String\n      description: A <xref:System.String> that contains the host address information.\n  overload: System.Net.HttpListenerRequest.UserHostAddress*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.UserHostName\n  id: UserHostName\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: UserHostName\n  nameWithType: HttpListenerRequest.UserHostName\n  fullName: System.Net.HttpListenerRequest.UserHostName\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the DNS name and, if provided, the port number specified by the client.\n  remarks: \"The `Host` header contains the requested server host name and port number, if specified, separated by a colon (for example, `www.contoso.com:8080`).  \\n  \\n You can use this property to return different responses depending on the host name specified in the request.  \\n  \\n For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.\"\n  example:\n  - \"The following code example demonstrates using this property.  \\n  \\n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_39_1.cs)]\"\n  syntax:\n    content: public string UserHostName { get; }\n    return:\n      type: System.String\n      description: A <xref:System.String> value that contains the text of the request's <xref uid=\"langword_csharp_Host\" name=\"Host\" href=\"\"></xref> header.\n  overload: System.Net.HttpListenerRequest.UserHostName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerRequest.UserLanguages\n  id: UserLanguages\n  parent: System.Net.HttpListenerRequest\n  langs:\n  - csharp\n  name: UserLanguages\n  nameWithType: HttpListenerRequest.UserLanguages\n  fullName: System.Net.HttpListenerRequest.UserLanguages\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the natural languages that are preferred for the response.\n  remarks: \"For a detailed description of the `Accept-Language` header, see RFC 2616 Section 14.4, available at [http://www.rfc-editor.org](http://www.rfc-editor.org/).  \\n  \\n For a complete list of request headers, see the <xref:System.Net.HttpRequestHeader> enumeration.\"\n  example:\n  - \"The following code example displays the languages from the request's `Accept-Language` header.  \\n  \\n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_18_1.cs)]\"\n  syntax:\n    content: public string[] UserLanguages { get; }\n    return:\n      type: System.String[]\n      description: A <xref:System.String> array that contains the languages specified in the request's <xref:System.Net.HttpRequestHeader> header or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the client request did not include an <xref:System.Net.HttpRequestHeader> header.\n  overload: System.Net.HttpListenerRequest.UserLanguages*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Net.HttpListenerRequest.AcceptTypes\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: AcceptTypes\n  nameWithType: HttpListenerRequest.AcceptTypes\n  fullName: System.Net.HttpListenerRequest.AcceptTypes\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: BeginGetClientCertificate(AsyncCallback,Object)\n  nameWithType: HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)\n  fullName: System.Net.HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Net.HttpListenerRequest.ClientCertificateError\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ClientCertificateError\n  nameWithType: HttpListenerRequest.ClientCertificateError\n  fullName: System.Net.HttpListenerRequest.ClientCertificateError\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.HttpListenerRequest.ContentEncoding\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ContentEncoding\n  nameWithType: HttpListenerRequest.ContentEncoding\n  fullName: System.Net.HttpListenerRequest.ContentEncoding\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: true\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.Net.HttpListenerRequest.ContentLength64\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ContentLength64\n  nameWithType: HttpListenerRequest.ContentLength64\n  fullName: System.Net.HttpListenerRequest.ContentLength64\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Net.HttpListenerRequest.ContentType\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ContentType\n  nameWithType: HttpListenerRequest.ContentType\n  fullName: System.Net.HttpListenerRequest.ContentType\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.HttpListenerRequest.Cookies\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: Cookies\n  nameWithType: HttpListenerRequest.Cookies\n  fullName: System.Net.HttpListenerRequest.Cookies\n- uid: System.Net.CookieCollection\n  parent: System.Net\n  isExternal: true\n  name: CookieCollection\n  nameWithType: CookieCollection\n  fullName: System.Net.CookieCollection\n- uid: System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: EndGetClientCertificate(IAsyncResult)\n  nameWithType: HttpListenerRequest.EndGetClientCertificate(IAsyncResult)\n  fullName: System.Net.HttpListenerRequest.EndGetClientCertificate(IAsyncResult)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate2\n  nameWithType: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n- uid: System.Net.HttpListenerRequest.GetClientCertificate\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: GetClientCertificate()\n  nameWithType: HttpListenerRequest.GetClientCertificate()\n  fullName: System.Net.HttpListenerRequest.GetClientCertificate()\n- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: GetClientCertificateAsync()\n  nameWithType: HttpListenerRequest.GetClientCertificateAsync()\n  fullName: System.Net.HttpListenerRequest.GetClientCertificateAsync()\n- uid: System.Threading.Tasks.Task{System.Security.Cryptography.X509Certificates.X509Certificate2}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<X509Certificate2>\n  nameWithType: Task<X509Certificate2>\n  fullName: System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Security.Cryptography.X509Certificates.X509Certificate2>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    nameWithType: X509Certificate2\n    fullName: X509Certificate2\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.HttpListenerRequest.HasEntityBody\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: HasEntityBody\n  nameWithType: HttpListenerRequest.HasEntityBody\n  fullName: System.Net.HttpListenerRequest.HasEntityBody\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.HttpListenerRequest.Headers\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: Headers\n  nameWithType: HttpListenerRequest.Headers\n  fullName: System.Net.HttpListenerRequest.Headers\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Net.HttpListenerRequest.HttpMethod\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: HttpMethod\n  nameWithType: HttpListenerRequest.HttpMethod\n  fullName: System.Net.HttpListenerRequest.HttpMethod\n- uid: System.Net.HttpListenerRequest.InputStream\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: InputStream\n  nameWithType: HttpListenerRequest.InputStream\n  fullName: System.Net.HttpListenerRequest.InputStream\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Net.HttpListenerRequest.IsAuthenticated\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: HttpListenerRequest.IsAuthenticated\n  fullName: System.Net.HttpListenerRequest.IsAuthenticated\n- uid: System.Net.HttpListenerRequest.IsLocal\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: IsLocal\n  nameWithType: HttpListenerRequest.IsLocal\n  fullName: System.Net.HttpListenerRequest.IsLocal\n- uid: System.Net.HttpListenerRequest.IsSecureConnection\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: IsSecureConnection\n  nameWithType: HttpListenerRequest.IsSecureConnection\n  fullName: System.Net.HttpListenerRequest.IsSecureConnection\n- uid: System.Net.HttpListenerRequest.IsWebSocketRequest\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: IsWebSocketRequest\n  nameWithType: HttpListenerRequest.IsWebSocketRequest\n  fullName: System.Net.HttpListenerRequest.IsWebSocketRequest\n- uid: System.Net.HttpListenerRequest.KeepAlive\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: KeepAlive\n  nameWithType: HttpListenerRequest.KeepAlive\n  fullName: System.Net.HttpListenerRequest.KeepAlive\n- uid: System.Net.HttpListenerRequest.LocalEndPoint\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: LocalEndPoint\n  nameWithType: HttpListenerRequest.LocalEndPoint\n  fullName: System.Net.HttpListenerRequest.LocalEndPoint\n- uid: System.Net.IPEndPoint\n  parent: System.Net\n  isExternal: true\n  name: IPEndPoint\n  nameWithType: IPEndPoint\n  fullName: System.Net.IPEndPoint\n- uid: System.Net.HttpListenerRequest.ProtocolVersion\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ProtocolVersion\n  nameWithType: HttpListenerRequest.ProtocolVersion\n  fullName: System.Net.HttpListenerRequest.ProtocolVersion\n- uid: System.Version\n  parent: System\n  isExternal: true\n  name: Version\n  nameWithType: Version\n  fullName: System.Version\n- uid: System.Net.HttpListenerRequest.QueryString\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: QueryString\n  nameWithType: HttpListenerRequest.QueryString\n  fullName: System.Net.HttpListenerRequest.QueryString\n- uid: System.Net.HttpListenerRequest.RawUrl\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: RawUrl\n  nameWithType: HttpListenerRequest.RawUrl\n  fullName: System.Net.HttpListenerRequest.RawUrl\n- uid: System.Net.HttpListenerRequest.RemoteEndPoint\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: RemoteEndPoint\n  nameWithType: HttpListenerRequest.RemoteEndPoint\n  fullName: System.Net.HttpListenerRequest.RemoteEndPoint\n- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: RequestTraceIdentifier\n  nameWithType: HttpListenerRequest.RequestTraceIdentifier\n  fullName: System.Net.HttpListenerRequest.RequestTraceIdentifier\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Net.HttpListenerRequest.ServiceName\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ServiceName\n  nameWithType: HttpListenerRequest.ServiceName\n  fullName: System.Net.HttpListenerRequest.ServiceName\n- uid: System.Net.HttpListenerRequest.TransportContext\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: TransportContext\n  nameWithType: HttpListenerRequest.TransportContext\n  fullName: System.Net.HttpListenerRequest.TransportContext\n- uid: System.Net.TransportContext\n  parent: System.Net\n  isExternal: true\n  name: TransportContext\n  nameWithType: TransportContext\n  fullName: System.Net.TransportContext\n- uid: System.Net.HttpListenerRequest.Url\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: Url\n  nameWithType: HttpListenerRequest.Url\n  fullName: System.Net.HttpListenerRequest.Url\n- uid: System.Uri\n  parent: System\n  isExternal: true\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.Net.HttpListenerRequest.UrlReferrer\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: UrlReferrer\n  nameWithType: HttpListenerRequest.UrlReferrer\n  fullName: System.Net.HttpListenerRequest.UrlReferrer\n- uid: System.Net.HttpListenerRequest.UserAgent\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: UserAgent\n  nameWithType: HttpListenerRequest.UserAgent\n  fullName: System.Net.HttpListenerRequest.UserAgent\n- uid: System.Net.HttpListenerRequest.UserHostAddress\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: UserHostAddress\n  nameWithType: HttpListenerRequest.UserHostAddress\n  fullName: System.Net.HttpListenerRequest.UserHostAddress\n- uid: System.Net.HttpListenerRequest.UserHostName\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: UserHostName\n  nameWithType: HttpListenerRequest.UserHostName\n  fullName: System.Net.HttpListenerRequest.UserHostName\n- uid: System.Net.HttpListenerRequest.UserLanguages\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: UserLanguages\n  nameWithType: HttpListenerRequest.UserLanguages\n  fullName: System.Net.HttpListenerRequest.UserLanguages\n- uid: System.Net.HttpListenerRequest.AcceptTypes*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: AcceptTypes\n  nameWithType: HttpListenerRequest.AcceptTypes\n- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: BeginGetClientCertificate\n  nameWithType: HttpListenerRequest.BeginGetClientCertificate\n- uid: System.Net.HttpListenerRequest.ClientCertificateError*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ClientCertificateError\n  nameWithType: HttpListenerRequest.ClientCertificateError\n- uid: System.Net.HttpListenerRequest.ContentEncoding*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ContentEncoding\n  nameWithType: HttpListenerRequest.ContentEncoding\n- uid: System.Net.HttpListenerRequest.ContentLength64*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ContentLength64\n  nameWithType: HttpListenerRequest.ContentLength64\n- uid: System.Net.HttpListenerRequest.ContentType*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ContentType\n  nameWithType: HttpListenerRequest.ContentType\n- uid: System.Net.HttpListenerRequest.Cookies*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: Cookies\n  nameWithType: HttpListenerRequest.Cookies\n- uid: System.Net.HttpListenerRequest.EndGetClientCertificate*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: EndGetClientCertificate\n  nameWithType: HttpListenerRequest.EndGetClientCertificate\n- uid: System.Net.HttpListenerRequest.GetClientCertificate*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: GetClientCertificate\n  nameWithType: HttpListenerRequest.GetClientCertificate\n- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: GetClientCertificateAsync\n  nameWithType: HttpListenerRequest.GetClientCertificateAsync\n- uid: System.Net.HttpListenerRequest.HasEntityBody*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: HasEntityBody\n  nameWithType: HttpListenerRequest.HasEntityBody\n- uid: System.Net.HttpListenerRequest.Headers*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: Headers\n  nameWithType: HttpListenerRequest.Headers\n- uid: System.Net.HttpListenerRequest.HttpMethod*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: HttpMethod\n  nameWithType: HttpListenerRequest.HttpMethod\n- uid: System.Net.HttpListenerRequest.InputStream*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: InputStream\n  nameWithType: HttpListenerRequest.InputStream\n- uid: System.Net.HttpListenerRequest.IsAuthenticated*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: HttpListenerRequest.IsAuthenticated\n- uid: System.Net.HttpListenerRequest.IsLocal*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: IsLocal\n  nameWithType: HttpListenerRequest.IsLocal\n- uid: System.Net.HttpListenerRequest.IsSecureConnection*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: IsSecureConnection\n  nameWithType: HttpListenerRequest.IsSecureConnection\n- uid: System.Net.HttpListenerRequest.IsWebSocketRequest*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: IsWebSocketRequest\n  nameWithType: HttpListenerRequest.IsWebSocketRequest\n- uid: System.Net.HttpListenerRequest.KeepAlive*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: KeepAlive\n  nameWithType: HttpListenerRequest.KeepAlive\n- uid: System.Net.HttpListenerRequest.LocalEndPoint*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: LocalEndPoint\n  nameWithType: HttpListenerRequest.LocalEndPoint\n- uid: System.Net.HttpListenerRequest.ProtocolVersion*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ProtocolVersion\n  nameWithType: HttpListenerRequest.ProtocolVersion\n- uid: System.Net.HttpListenerRequest.QueryString*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: QueryString\n  nameWithType: HttpListenerRequest.QueryString\n- uid: System.Net.HttpListenerRequest.RawUrl*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: RawUrl\n  nameWithType: HttpListenerRequest.RawUrl\n- uid: System.Net.HttpListenerRequest.RemoteEndPoint*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: RemoteEndPoint\n  nameWithType: HttpListenerRequest.RemoteEndPoint\n- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: RequestTraceIdentifier\n  nameWithType: HttpListenerRequest.RequestTraceIdentifier\n- uid: System.Net.HttpListenerRequest.ServiceName*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: ServiceName\n  nameWithType: HttpListenerRequest.ServiceName\n- uid: System.Net.HttpListenerRequest.TransportContext*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: TransportContext\n  nameWithType: HttpListenerRequest.TransportContext\n- uid: System.Net.HttpListenerRequest.Url*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: Url\n  nameWithType: HttpListenerRequest.Url\n- uid: System.Net.HttpListenerRequest.UrlReferrer*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: UrlReferrer\n  nameWithType: HttpListenerRequest.UrlReferrer\n- uid: System.Net.HttpListenerRequest.UserAgent*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: UserAgent\n  nameWithType: HttpListenerRequest.UserAgent\n- uid: System.Net.HttpListenerRequest.UserHostAddress*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: UserHostAddress\n  nameWithType: HttpListenerRequest.UserHostAddress\n- uid: System.Net.HttpListenerRequest.UserHostName*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: UserHostName\n  nameWithType: HttpListenerRequest.UserHostName\n- uid: System.Net.HttpListenerRequest.UserLanguages*\n  parent: System.Net.HttpListenerRequest\n  isExternal: false\n  name: UserLanguages\n  nameWithType: HttpListenerRequest.UserLanguages\n"}