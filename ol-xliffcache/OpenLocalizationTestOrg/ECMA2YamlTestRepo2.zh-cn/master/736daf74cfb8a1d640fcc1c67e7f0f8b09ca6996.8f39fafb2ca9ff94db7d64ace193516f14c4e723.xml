{"nodes":[{"pos":[1100,1188],"content":"Describes a set of security permissions applied to code. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes a set of security permissions applied to code. This class cannot be inherited.","pos":[0,88],"nodes":[{"content":"Describes a set of security permissions applied to code.","pos":[0,56]},{"content":"This class cannot be inherited.","pos":[57,88]}]}]},{"pos":[1200,1362],"content":"This permission uses the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration. The values for this enumeration can be found in its documentation.","needQuote":true,"needEscape":true,"nodes":[{"content":"This permission uses the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration. The values for this enumeration can be found in its documentation.","pos":[0,162],"nodes":[{"content":"This permission uses the &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; enumeration.","pos":[0,95],"source":"This permission uses the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration."},{"content":"The values for this enumeration can be found in its documentation.","pos":[96,162]}]}]},{"pos":[2895,3066],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with either restricted or unrestricted permission as specified.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> class with either restricted or unrestricted permission as specified."},{"pos":[3078,3172],"content":"Creates either fully restricted (<ph id=\"ph1\">`None`</ph>) or <ph id=\"ph2\">`Unrestricted`</ph> access to all security permissions.","needQuote":true,"needEscape":true,"source":"Creates either fully restricted (`None`) or `Unrestricted` access to all security permissions."},{"pos":[3382,3465],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values."},{"pos":[3640,3762],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>."},{"pos":[4371,4529],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified initial set state of the flags.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> class with the specified initial set state of the flags."},{"pos":[5563,5746],"content":"The initial state of the permission, represented by a bitwise OR combination of any permission bits defined by <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The initial state of the permission, represented by a bitwise OR combination of any permission bits defined by <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref>."},{"pos":[5921,6049],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">flag</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>flag</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref>."},{"pos":[6437,6501],"content":"Creates and returns an identical copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns an identical copy of the current permission.","pos":[0,64]}]},{"pos":[6513,6603],"content":"A copy of a permission represents the same access to resources as the original permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of a permission represents the same access to resources as the original permission.","pos":[0,90]}]},{"pos":[6770,6803],"content":"A copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of the current permission.","pos":[0,33]}]},{"pos":[7274,7317],"content":"Gets or sets the security permission flags.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the security permission flags.","pos":[0,43]}]},{"pos":[7329,7449],"content":"Individual permission bits can be determined by performing an AND operation against this value and checking for nonzero.","needQuote":true,"needEscape":true,"nodes":[{"content":"Individual permission bits can be determined by performing an AND operation against this value and checking for nonzero.","pos":[0,120]}]},{"pos":[7645,7828],"content":"The state of the current permission, represented by a bitwise OR combination of any permission bits defined by <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The state of the current permission, represented by a bitwise OR combination of any permission bits defined by <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref>."},{"pos":[8003,8161],"content":"An attempt is made to set this property to an invalid value. See <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> for the valid values.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt is made to set this property to an invalid value.","pos":[0,60]},{"content":"See <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the valid values.","pos":[61,158],"source":" See <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> for the valid values."}]},{"pos":[8675,8745],"content":"Reconstructs a permission with a specified state from an XML encoding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reconstructs a permission with a specified state from an XML encoding.","pos":[0,70]}]},{"pos":[8930,8984],"content":"The XML encoding to use to reconstruct the permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML encoding to use to reconstruct the permission.","pos":[0,54]}]},{"pos":[9169,9264],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>esd</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9360,9512],"content":"The <code>esd</code> parameter is not a valid permission element.       -or-       The <code>esd</code> parameter's version number is not supported.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid permission element.","pos":[0,65],"source":"The <code>esd</code> parameter is not a valid permission element."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's version number is not supported.","pos":[72,148],"source":"       -or-       The <code>esd</code> parameter's version number is not supported."}]},{"pos":[10017,10130],"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,113]}]},{"pos":[10142,10333],"content":"The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will pass the intersection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will pass the intersection.","pos":[0,191],"nodes":[{"content":"The intersection of two permissions is a permission that describes the state that they both describe in common.","pos":[0,111]},{"content":"Only a demand that passes both original permissions will pass the intersection.","pos":[112,191]}]}]},{"pos":[10541,10650],"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","pos":[0,109],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be of the same type as the current permission.","pos":[55,109]}]}]},{"pos":[10722,10948],"content":"A new permission object that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission object that represents the intersection of the current permission and the specified permission.","pos":[0,112]},{"content":"This new permission is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the intersection is empty.","pos":[113,226],"source":" This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty."}]},{"pos":[11127,11283],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"pos":[11792,11874],"content":"Determines whether the current permission is a subset of the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the current permission is a subset of the specified permission.","pos":[0,82]}]},{"pos":[11886,12327],"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.","pos":[0,172]},{"content":"For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:<ph id=\"ph1\">\\\\</ph>.","pos":[173,299],"source":" For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\."},{"content":"If this method returns <ph id=\"ph1\">`true`</ph>, the current permission represents no more access to the protected resource than does the specified permission.","pos":[300,441],"source":" If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission."}]},{"pos":[12513,12643],"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","pos":[0,130],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be of the same type as the current permission.","pos":[63,130]}]}]},{"pos":[12702,12904],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current permission is a subset of the specified permission; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13084,13240],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"pos":[13678,13752],"content":"Returns a value indicating whether the current permission is unrestricted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value indicating whether the current permission is unrestricted.","pos":[0,74]}]},{"pos":[13764,13862],"content":"An unrestricted permission represents access to any and all resources protected by the permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"An unrestricted permission represents access to any and all resources protected by the permission.","pos":[0,98]}]},{"pos":[13994,14172],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current permission is unrestricted; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is unrestricted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14657,14721],"content":"Creates an XML encoding of the permission and its current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an XML encoding of the permission and its current state.","pos":[0,64]}]},{"pos":[14897,14964],"content":"An XML encoding of the permission, including any state information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML encoding of the permission, including any state information.","pos":[0,67]}]},{"pos":[15531,15625],"content":"Creates a permission that is the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a permission that is the union of the current permission and the specified permission.","pos":[0,94]}]},{"pos":[15637,15851],"content":"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","needQuote":true,"needEscape":true,"nodes":[{"content":"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","pos":[0,214],"nodes":[{"content":"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission.","pos":[0,153]},{"content":"Any demand that passes either permission passes their union.","pos":[154,214]}]}]},{"pos":[16055,16162],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]},{"pos":[16234,16332],"content":"A new permission that represents the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission that represents the union of the current permission and the specified permission.","pos":[0,98]}]},{"pos":[16507,16663],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.SecurityPermission\n  id: SecurityPermission\n  children:\n  - System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)\n  - System.Security.Permissions.SecurityPermission.Copy\n  - System.Security.Permissions.SecurityPermission.Flags\n  - System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.SecurityPermission.IsUnrestricted\n  - System.Security.Permissions.SecurityPermission.ToXml\n  - System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: SecurityPermission\n  nameWithType: SecurityPermission\n  fullName: System.Security.Permissions.SecurityPermission\n  type: Class\n  summary: Describes a set of security permissions applied to code. This class cannot be inherited.\n  remarks: This permission uses the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration. The values for this enumeration can be found in its documentation.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class SecurityPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: SecurityPermission(PermissionState)\n  nameWithType: SecurityPermission.SecurityPermission(PermissionState)\n  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> class with either restricted or unrestricted permission as specified.\n  remarks: Creates either fully restricted (`None`) or `Unrestricted` access to all security permissions.\n  syntax:\n    content: public SecurityPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.\n  overload: System.Security.Permissions.SecurityPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)\n  id: '#ctor(System.Security.Permissions.SecurityPermissionFlag)'\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: SecurityPermission(SecurityPermissionFlag)\n  nameWithType: SecurityPermission.SecurityPermission(SecurityPermissionFlag)\n  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(SecurityPermissionFlag)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> class with the specified initial set state of the flags.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the SecurityPermission constructor to create instances of the <xref:System.Security.Permissions.SecurityPermission> class that are used to demand security permissions.  For the complete code example, see the <xref:System.Security.Permissions.SecurityPermissionAttribute.%23ctor%28System.Security.Permissions.SecurityAction%29> constructor.  \\n  \\n [!code-cs[System.Security.Permissions.SecurityPermissionAttribute#18](~/add/codesnippet/csharp/d0b0f9d1-82bd-4e97-862e-_1.cs)]\\n [!code-cpp[System.Security.Permissions.SecurityPermissionAttribute#18](~/add/codesnippet/cpp/d0b0f9d1-82bd-4e97-862e-_1.cpp)]\\n [!code-vb[System.Security.Permissions.SecurityPermissionAttribute#18](~/add/codesnippet/visualbasic/d0b0f9d1-82bd-4e97-862e-_1.vb)]\"\n  syntax:\n    content: public SecurityPermission (System.Security.Permissions.SecurityPermissionFlag flag);\n    parameters:\n    - id: flag\n      type: System.Security.Permissions.SecurityPermissionFlag\n      description: The initial state of the permission, represented by a bitwise OR combination of any permission bits defined by <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref>.\n  overload: System.Security.Permissions.SecurityPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>flag</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: SecurityPermission.Copy()\n  fullName: System.Security.Permissions.SecurityPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns an identical copy of the current permission.\n  remarks: A copy of a permission represents the same access to resources as the original permission.\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission.\n  overload: System.Security.Permissions.SecurityPermission.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermission.Flags\n  id: Flags\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: Flags\n  nameWithType: SecurityPermission.Flags\n  fullName: System.Security.Permissions.SecurityPermission.Flags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets the security permission flags.\n  remarks: Individual permission bits can be determined by performing an AND operation against this value and checking for nonzero.\n  syntax:\n    content: public System.Security.Permissions.SecurityPermissionFlag Flags { get; set; }\n    return:\n      type: System.Security.Permissions.SecurityPermissionFlag\n      description: The state of the current permission, represented by a bitwise OR combination of any permission bits defined by <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref>.\n  overload: System.Security.Permissions.SecurityPermission.Flags*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An attempt is made to set this property to an invalid value. See <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> for the valid values.\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: SecurityPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.SecurityPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Reconstructs a permission with a specified state from an XML encoding.\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement esd);\n    parameters:\n    - id: esd\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the permission.\n  overload: System.Security.Permissions.SecurityPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>esd</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>esd</code> parameter is not a valid permission element.  \\n  \\n -or-  \\n  \\n The <code>esd</code> parameter's version number is not supported.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: SecurityPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.\n  remarks: The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will pass the intersection.\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission object that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.\n  overload: System.Security.Permissions.SecurityPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: SecurityPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Determines whether the current permission is a subset of the specified permission.\n  remarks: The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: SecurityPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.SecurityPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Returns a value indicating whether the current permission is unrestricted.\n  remarks: An unrestricted permission represents access to any and all resources protected by the permission.\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is unrestricted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermission.IsUnrestricted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: SecurityPermission.ToXml()\n  fullName: System.Security.Permissions.SecurityPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates an XML encoding of the permission and its current state.\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the permission, including any state information.\n  overload: System.Security.Permissions.SecurityPermission.ToXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: SecurityPermission.Union(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates a permission that is the union of the current permission and the specified permission.\n  remarks: The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the union of the current permission and the specified permission.\n  overload: System.Security.Permissions.SecurityPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.CodeAccessPermission\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: SecurityPermission(PermissionState)\n  nameWithType: SecurityPermission.SecurityPermission(PermissionState)\n  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: SecurityPermission(SecurityPermissionFlag)\n  nameWithType: SecurityPermission.SecurityPermission(SecurityPermissionFlag)\n  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(SecurityPermissionFlag)\n- uid: System.Security.Permissions.SecurityPermissionFlag\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityPermissionFlag\n  nameWithType: SecurityPermissionFlag\n  fullName: System.Security.Permissions.SecurityPermissionFlag\n- uid: System.Security.Permissions.SecurityPermission.Copy\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: SecurityPermission.Copy()\n  fullName: System.Security.Permissions.SecurityPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.SecurityPermission.Flags\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Flags\n  nameWithType: SecurityPermission.Flags\n  fullName: System.Security.Permissions.SecurityPermission.Flags\n- uid: System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: SecurityPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.SecurityPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: SecurityPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.Intersect(IPermission)\n- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: SecurityPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: SecurityPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.SecurityPermission.IsUnrestricted()\n- uid: System.Security.Permissions.SecurityPermission.ToXml\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: SecurityPermission.ToXml()\n  fullName: System.Security.Permissions.SecurityPermission.ToXml()\n- uid: System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: SecurityPermission.Union(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.Union(IPermission)\n- uid: System.Security.Permissions.SecurityPermission.#ctor*\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: SecurityPermission\n  nameWithType: SecurityPermission.SecurityPermission\n- uid: System.Security.Permissions.SecurityPermission.Copy*\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Copy\n  nameWithType: SecurityPermission.Copy\n- uid: System.Security.Permissions.SecurityPermission.Flags*\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Flags\n  nameWithType: SecurityPermission.Flags\n- uid: System.Security.Permissions.SecurityPermission.FromXml*\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: SecurityPermission.FromXml\n- uid: System.Security.Permissions.SecurityPermission.Intersect*\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: SecurityPermission.Intersect\n- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf*\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: SecurityPermission.IsSubsetOf\n- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted*\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: SecurityPermission.IsUnrestricted\n- uid: System.Security.Permissions.SecurityPermission.ToXml*\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: SecurityPermission.ToXml\n- uid: System.Security.Permissions.SecurityPermission.Union*\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Union\n  nameWithType: SecurityPermission.Union\n"}