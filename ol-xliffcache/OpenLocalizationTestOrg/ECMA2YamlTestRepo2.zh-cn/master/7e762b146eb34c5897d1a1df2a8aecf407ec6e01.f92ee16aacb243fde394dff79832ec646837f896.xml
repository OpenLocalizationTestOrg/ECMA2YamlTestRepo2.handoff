{"nodes":[{"pos":[2173,2228],"content":"This class has been deprecated as of Visual Basic 2005.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class has been deprecated as of Visual Basic 2005.","pos":[0,55]}]},{"pos":[2240,2341],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[3014,3125],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.CompilerServices.ObjectType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.CompilerServices.ObjectType\"></xref> class."},{"pos":[3137,3238],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[3908,3943],"content":"Performs an addition (+) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs an addition (+) operation.","pos":[0,35]}]},{"pos":[3955,4056],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[4206,4239],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[4298,4331],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[4389,4436],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">o1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">o2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The sum of <code>o1</code> and <code>o2</code>."},{"pos":[5058,5146],"content":"Performs a bitwise <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_And\" name=\"And\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> operation.","needQuote":true,"needEscape":true,"source":"Performs a bitwise <xref uid=\"langword_csharp_And\" name=\"And\" href=\"\"></xref> operation."},{"pos":[5158,5259],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[5418,5521],"content":"Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or numeric expression.","pos":[10,103],"source":" Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression."}]},{"pos":[5582,5685],"content":"Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or numeric expression.","pos":[10,103],"source":" Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression."}]},{"pos":[5743,5821],"content":"1 if both <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">obj2</ph><ept id=\"p2\">&lt;/code&gt;</ept> evaluate to 1; otherwise, 0.","needQuote":true,"needEscape":true,"source":"1 if both <code>obj1</code> and <code>obj2</code> evaluate to 1; otherwise, 0."},{"pos":[6441,6527],"content":"Performs a bitwise <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Or\" name=\"Or\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> operation.","needQuote":true,"needEscape":true,"source":"Performs a bitwise <xref uid=\"langword_csharp_Or\" name=\"Or\" href=\"\"></xref> operation."},{"pos":[6539,6640],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[6798,6901],"content":"Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or numeric expression.","pos":[10,103],"source":" Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression."}]},{"pos":[6962,7065],"content":"Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or numeric expression.","pos":[10,103],"source":" Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression."}]},{"pos":[7123,7201],"content":"0 if both <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">obj2</ph><ept id=\"p2\">&lt;/code&gt;</ept> evaluate to 0; otherwise, 1.","needQuote":true,"needEscape":true,"source":"0 if both <code>obj1</code> and <code>obj2</code> evaluate to 0; otherwise, 1."},{"pos":[7825,7906],"content":"Performs an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Xor\" name=\"Xor\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> operation.","needQuote":true,"needEscape":true,"source":"Performs an <xref uid=\"langword_csharp_Xor\" name=\"Xor\" href=\"\"></xref> operation."},{"pos":[7918,8019],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[8178,8281],"content":"Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or numeric expression.","pos":[10,103],"source":" Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression."}]},{"pos":[8342,8445],"content":"Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or numeric expression.","pos":[10,103],"source":" Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression."}]},{"pos":[8503,8698],"content":"A numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see [Xor Operator](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns.","pos":[0,114]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Xor Operator<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[115,195],"source":" For more information, see [Xor Operator](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[9308,9342],"content":"Performs a division (/) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a division (/) operation.","pos":[0,34]}]},{"pos":[9354,9455],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[9605,9638],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[9697,9730],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[9788,9877],"content":"The full quotient of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">o1</ph><ept id=\"p1\">&lt;/code&gt;</ept> divided by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">o2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, including any remainder.","needQuote":true,"needEscape":true,"source":"The full quotient of <code>o1</code> divided by <code>o2</code>, including any remainder."},{"pos":[10520,10618],"content":"Returns a boxed primitive value. This method is used to prevent copying structures multiple times.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a boxed primitive value. This method is used to prevent copying structures multiple times.","pos":[0,98],"nodes":[{"content":"Returns a boxed primitive value.","pos":[0,32]},{"content":"This method is used to prevent copying structures multiple times.","pos":[33,98]}]}]},{"pos":[10630,10731],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[10885,10910],"content":"Required. Any expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]},{"pos":[10968,11022],"content":"The primitive value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">o</ph><ept id=\"p1\">&lt;/code&gt;</ept> typed as object.","needQuote":true,"needEscape":true,"source":"The primitive value of <code>o</code> typed as object."},{"pos":[11651,11695],"content":"Performs an integer division (\\\\) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs an integer division (<ph id=\"ph1\">\\\\</ph>) operation.","pos":[0,44],"source":"Performs an integer division (\\\\) operation."}]},{"pos":[11707,11808],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[11959,11992],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[12051,12084],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[12142,12276],"content":"The integer quotient of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">o1</ph><ept id=\"p1\">&lt;/code&gt;</ept> divided by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">o2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, which discards any remainder and retains only the integer portion.","needQuote":true,"needEscape":true,"source":"The integer quotient of <code>o1</code> divided by <code>o2</code>, which discards any remainder and retains only the integer portion."},{"pos":[13003,13086],"content":"Performs a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Like\" name=\"Like\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> comparison.","needQuote":true,"needEscape":true,"source":"Performs a <xref uid=\"langword_csharp_Like\" name=\"Like\" href=\"\"></xref> comparison."},{"pos":[13098,13199],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[13409,13434],"content":"Required. Any expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]},{"pos":[13497,13603],"content":"Required. Any string expression conforming to the pattern-matching conventions described in Like Operator.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any string expression conforming to the pattern-matching conventions described in Like Operator.","pos":[0,106],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any string expression conforming to the pattern-matching conventions described in Like Operator.","pos":[10,106]}]}]},{"pos":[13695,13841],"content":"Required. A <xref href=\"Microsoft.VisualBasic.CompareMethod\"></xref> value that specifies that the operation use either text or binary comparison.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A <bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.CompareMethod\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that specifies that the operation use either text or binary comparison.","pos":[10,146],"source":" A <xref href=\"Microsoft.VisualBasic.CompareMethod\"></xref> value that specifies that the operation use either text or binary comparison."}]},{"pos":[13900,14347],"content":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the string representation of the value in <code>vLeft</code> satisfies the pattern that is contained in <code>vRight</code>; otherwise, <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>. <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if both <code>vLeft</code> and <code>vRight</code> are <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the string representation of the value in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">vLeft</ph><ept id=\"p2\">&lt;/code&gt;</ept> satisfies the pattern that is contained in <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">vRight</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[0,263],"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the string representation of the value in <code>vLeft</code> satisfies the pattern that is contained in <code>vRight</code>; otherwise, <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>."},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if both <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">vLeft</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">vRight</ph><ept id=\"p3\">&lt;/code&gt;</ept> are <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[264,447],"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if both <code>vLeft</code> and <code>vRight</code> are <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>."}]},{"pos":[14955,15045],"content":"Performs a modulus (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Mod\" name=\"Mod\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) operation.","needQuote":true,"needEscape":true,"source":"Performs a modulus (<xref uid=\"langword_csharp_Mod\" name=\"Mod\" href=\"\"></xref>) operation."},{"pos":[15057,15158],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[15308,15341],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[15400,15433],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[15491,15557],"content":"The remainder after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">o1</ph><ept id=\"p1\">&lt;/code&gt;</ept> is divided by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">o2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The remainder after <code>o1</code> is divided by <code>o2</code>."},{"pos":[16164,16204],"content":"Performs a multiplication (*) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a multiplication (*) operation.","pos":[0,40]}]},{"pos":[16216,16317],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[16467,16500],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[16559,16592],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[16650,16701],"content":"The product of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">o1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">o2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The product of <code>o1</code> and <code>o2</code>."},{"pos":[17259,17296],"content":"Performs a unary minus (–) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a unary minus (–) operation.","pos":[0,37]}]},{"pos":[17308,17409],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[17550,17583],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[17641,17680],"content":"The negative value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The negative value of <code>obj</code>."},{"pos":[18238,18318],"content":"Performs a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Not\" name=\"Not\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> operation.","needQuote":true,"needEscape":true,"source":"Performs a <xref uid=\"langword_csharp_Not\" name=\"Not\" href=\"\"></xref> operation."},{"pos":[18330,18431],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[18572,18675],"content":"Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or numeric expression.","pos":[10,103],"source":" Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression."}]},{"pos":[18733,19102],"content":"For <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> operations, <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> if <code>obj</code> is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>; otherwise, <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>. For bitwise operations, 1 if <code>obj</code> is 0; otherwise, 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"For <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> operations, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","pos":[0,303],"source":"For <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> operations, <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> if <code>obj</code> is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>; otherwise, <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>."},{"content":"For bitwise operations, 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 0; otherwise, 0.","pos":[304,369],"source":" For bitwise operations, 1 if <code>obj</code> is 0; otherwise, 0."}]},{"pos":[19763,19828],"content":"Performs binary or text string comparison when given two objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs binary or text string comparison when given two objects.","pos":[0,65]}]},{"pos":[19840,19941],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[20106,20131],"content":"Required. Any expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]},{"pos":[20190,20215],"content":"Required. Any expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]},{"pos":[20284,20478],"content":"Required. <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> to perform a case-insensitive string comparison; otherwise, <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to perform a case-insensitive string comparison; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[10,194],"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> to perform a case-insensitive string comparison; otherwise, <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>."}]},{"pos":[20536,20957],"content":"<table><thead><tr><th> Value       </th><th> Condition       </th></tr></thead><tbody><tr><td> -1       </td><td>           <code>o1</code> is less than <code>o2</code>.       </td></tr><tr><td> 0       </td><td>           <code>o1</code> is equal to <code>o2</code>.       </td></tr><tr><td> 1       </td><td>           <code>o1</code> is greater than <code>o2</code>.       </td></tr></tbody></table>","needQuote":false,"needEscape":true,"nodes":[{"content":"Value","pos":[23,28]},{"content":"Condition","pos":[45,54]},{"content":"-1","pos":[95,97]},{"content":"           <code>o1</code> is less than <code>o2</code>.       ","pos":[113,176],"nodes":[{"content":"<ph id=\"ph1\">           &lt;code&gt;o1&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;o2&lt;/code&gt;</ph>.","pos":[0,56],"source":"           <code>o1</code> is less than <code>o2</code>."}]},{"content":"0","pos":[195,196]},{"content":"           <code>o1</code> is equal to <code>o2</code>.       ","pos":[212,274],"nodes":[{"content":"<ph id=\"ph1\">           &lt;code&gt;o1&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;code&gt;o2&lt;/code&gt;</ph>.","pos":[0,55],"source":"           <code>o1</code> is equal to <code>o2</code>."}]},{"content":"1","pos":[293,294]},{"content":"           <code>o1</code> is greater than <code>o2</code>.       ","pos":[310,376],"nodes":[{"content":"<ph id=\"ph1\">           &lt;code&gt;o1&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;o2&lt;/code&gt;</ph>.","pos":[0,59],"source":"           <code>o1</code> is greater than <code>o2</code>."}]}]},{"pos":[21521,21557],"content":"Performs a unary plus (+) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a unary plus (+) operation.","pos":[0,36]}]},{"pos":[21569,21670],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[21812,21845],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[21903,21982],"content":"The value of <code>obj</code>. (The sign of the <code>obj</code> is unchanged.)","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,30],"source":"The value of <code>obj</code>."},{"content":"(The sign of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is unchanged.)","pos":[31,79],"source":" (The sign of the <code>obj</code> is unchanged.)"}]},{"pos":[22590,22625],"content":"Performs an exponent (^) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs an exponent (^) operation.","pos":[0,35]}]},{"pos":[22637,22738],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[22894,22927],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[22988,23021],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[23079,23152],"content":"The result of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj1</ph><ept id=\"p1\">&lt;/code&gt;</ept> raised to the power of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">obj2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The result of <code>obj1</code> raised to the power of <code>obj2</code>."},{"pos":[23784,23839],"content":"Performs an arithmetic left shift (&lt;&lt;) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs an arithmetic left shift (<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph>) operation.","pos":[0,55],"source":"Performs an arithmetic left shift (&lt;&lt;) operation."}]},{"pos":[23851,23952],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[24109,24742],"content":"Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<xref uid=\"langword_csharp_SByte\" name=\"SByte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Byte\" name=\"Byte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Short\" name=\"Short\" href=\"\"></xref>, <xref uid=\"langword_csharp_UShort\" name=\"UShort\" href=\"\"></xref>, <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>, <xref uid=\"langword_csharp_UInteger\" name=\"UInteger\" href=\"\"></xref>, <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>, or <xref uid=\"langword_csharp_ULong\" name=\"ULong\" href=\"\"></xref>).","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Integral numeric expression.","pos":[10,38]},{"content":"The bit pattern to be shifted.","pos":[39,69]},{"content":"The data type must be an integral type (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_SByte\" name=\"SByte\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Byte\" name=\"Byte\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Short\" name=\"Short\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_UShort\" name=\"UShort\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>, <bpt id=\"p6\">&lt;xref uid=\"langword_csharp_UInteger\" name=\"UInteger\" href=\"\"&gt;</bpt><ept id=\"p6\">&lt;/xref&gt;</ept>, <bpt id=\"p7\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p7\">&lt;/xref&gt;</ept>, or <bpt id=\"p8\">&lt;xref uid=\"langword_csharp_ULong\" name=\"ULong\" href=\"\"&gt;</bpt><ept id=\"p8\">&lt;/xref&gt;</ept>).","pos":[70,633],"source":" The data type must be an integral type (<xref uid=\"langword_csharp_SByte\" name=\"SByte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Byte\" name=\"Byte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Short\" name=\"Short\" href=\"\"></xref>, <xref uid=\"langword_csharp_UShort\" name=\"UShort\" href=\"\"></xref>, <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>, <xref uid=\"langword_csharp_UInteger\" name=\"UInteger\" href=\"\"></xref>, <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>, or <xref uid=\"langword_csharp_ULong\" name=\"ULong\" href=\"\"></xref>)."}]},{"pos":[24804,25047],"content":"Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> or widen to <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Numeric expression.","pos":[10,29]},{"content":"The number of bits to shift the bit pattern.","pos":[30,74]},{"content":"The data type must be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or widen to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[75,243],"source":" The data type must be <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> or widen to <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>."}]},{"pos":[25105,25225],"content":"An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <code>o1</code>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integral numeric value.","pos":[0,26]},{"content":"The result of shifting the bit pattern.","pos":[27,66]},{"content":"The data type is the same as that of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">o1</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[67,120],"source":" The data type is the same as that of <code>o1</code>."}]},{"pos":[25868,25924],"content":"Performs an arithmetic right shift (&gt;&gt;) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs an arithmetic right shift (<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">&amp;gt;</ph>) operation.","pos":[0,56],"source":"Performs an arithmetic right shift (&gt;&gt;) operation."}]},{"pos":[25936,26037],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[26195,26828],"content":"Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<xref uid=\"langword_csharp_SByte\" name=\"SByte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Byte\" name=\"Byte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Short\" name=\"Short\" href=\"\"></xref>, <xref uid=\"langword_csharp_UShort\" name=\"UShort\" href=\"\"></xref>, <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>, <xref uid=\"langword_csharp_UInteger\" name=\"UInteger\" href=\"\"></xref>, <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>, or <xref uid=\"langword_csharp_ULong\" name=\"ULong\" href=\"\"></xref>).","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Integral numeric expression.","pos":[10,38]},{"content":"The bit pattern to be shifted.","pos":[39,69]},{"content":"The data type must be an integral type (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_SByte\" name=\"SByte\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Byte\" name=\"Byte\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Short\" name=\"Short\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_UShort\" name=\"UShort\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>, <bpt id=\"p6\">&lt;xref uid=\"langword_csharp_UInteger\" name=\"UInteger\" href=\"\"&gt;</bpt><ept id=\"p6\">&lt;/xref&gt;</ept>, <bpt id=\"p7\">&lt;xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"&gt;</bpt><ept id=\"p7\">&lt;/xref&gt;</ept>, or <bpt id=\"p8\">&lt;xref uid=\"langword_csharp_ULong\" name=\"ULong\" href=\"\"&gt;</bpt><ept id=\"p8\">&lt;/xref&gt;</ept>).","pos":[70,633],"source":" The data type must be an integral type (<xref uid=\"langword_csharp_SByte\" name=\"SByte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Byte\" name=\"Byte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Short\" name=\"Short\" href=\"\"></xref>, <xref uid=\"langword_csharp_UShort\" name=\"UShort\" href=\"\"></xref>, <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>, <xref uid=\"langword_csharp_UInteger\" name=\"UInteger\" href=\"\"></xref>, <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>, or <xref uid=\"langword_csharp_ULong\" name=\"ULong\" href=\"\"></xref>)."}]},{"pos":[26890,27133],"content":"Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> or widen to <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Numeric expression.","pos":[10,29]},{"content":"The number of bits to shift the bit pattern.","pos":[30,74]},{"content":"The data type must be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or widen to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[75,243],"source":" The data type must be <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> or widen to <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>."}]},{"pos":[27191,27311],"content":"An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <code>o1</code>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integral numeric value.","pos":[0,26]},{"content":"The result of shifting the bit pattern.","pos":[27,66]},{"content":"The data type is the same as that of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">o1</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[67,120],"source":" The data type is the same as that of <code>o1</code>."}]},{"pos":[27940,27990],"content":"Performs a string concatenation (&amp;) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a string concatenation (<ph id=\"ph1\">&amp;amp;</ph>) operation.","pos":[0,50],"source":"Performs a string concatenation (&amp;) operation."}]},{"pos":[28002,28103],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[28266,28291],"content":"Required. Any expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]},{"pos":[28354,28379],"content":"Required. Any expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]},{"pos":[28437,28523],"content":"A string representing the concatenation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vLeft</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vRight</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string representing the concatenation of <code>vLeft</code> and <code>vRight</code>."},{"pos":[29133,29170],"content":"Performs a subtraction (–) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a subtraction (–) operation.","pos":[0,37]}]},{"pos":[29182,29283],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[29433,29466],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[29525,29558],"content":"Required. Any numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]},{"pos":[29616,29675],"content":"The difference between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">o1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">o2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The difference between <code>o1</code> and <code>o2</code>."},{"pos":[30282,30364],"content":"Performs an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Xor\" name=\"Xor\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> comparison.","needQuote":true,"needEscape":true,"source":"Performs an <xref uid=\"langword_csharp_Xor\" name=\"Xor\" href=\"\"></xref> comparison."},{"pos":[30376,30477],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[30633,30736],"content":"Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or numeric expression.","pos":[10,103],"source":" Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression."}]},{"pos":[30797,30900],"content":"Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or numeric expression.","pos":[10,103],"source":" Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression."}]},{"pos":[30958,31535],"content":"A <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric value. For a <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> comparison, the return value is the logical exclusion (exclusive logical disjunction) of two <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> values. For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see [Xor Operator](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or numeric value.","pos":[0,86],"source":"A <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric value."},{"content":"For a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> comparison, the return value is the logical exclusion (exclusive logical disjunction) of two <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values.","pos":[87,327],"source":" For a <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> comparison, the return value is the logical exclusion (exclusive logical disjunction) of two <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> values."},{"content":"For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns.","pos":[328,496]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Xor Operator<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[497,577],"source":" For more information, see [Xor Operator](~/add/includes/ajax-current-ext-md.md)."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType\n  id: ObjectType\n  children:\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.#ctor\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive(System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj(System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj(System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj(System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj(System.Object,System.Int32)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj(System.Object,System.Int32)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj(System.Object,System.Object)\n  langs:\n  - csharp\n  name: ObjectType\n  nameWithType: ObjectType\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType\n  type: Class\n  summary: This class has been deprecated as of Visual Basic 2005.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: >-\n      [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]\n\n      public sealed class ObjectType\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: ObjectType()\n  nameWithType: ObjectType.ObjectType()\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.ObjectType()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.CompilerServices.ObjectType\"></xref> class.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public ObjectType ();\n    parameters: []\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj(System.Object,System.Object)\n  id: AddObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: AddObj(Object,Object)\n  nameWithType: ObjectType.AddObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs an addition (+) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object AddObj (object o1, object o2);\n    parameters:\n    - id: o1\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: o2\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The sum of <code>o1</code> and <code>o2</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj(System.Object,System.Object)\n  id: BitAndObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: BitAndObj(Object,Object)\n  nameWithType: ObjectType.BitAndObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs a bitwise <xref uid=\"langword_csharp_And\" name=\"And\" href=\"\"></xref> operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object BitAndObj (object obj1, object obj2);\n    parameters:\n    - id: obj1\n      type: System.Object\n      description: Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.\n    - id: obj2\n      type: System.Object\n      description: Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.\n    return:\n      type: System.Object\n      description: 1 if both <code>obj1</code> and <code>obj2</code> evaluate to 1; otherwise, 0.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj(System.Object,System.Object)\n  id: BitOrObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: BitOrObj(Object,Object)\n  nameWithType: ObjectType.BitOrObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs a bitwise <xref uid=\"langword_csharp_Or\" name=\"Or\" href=\"\"></xref> operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object BitOrObj (object obj1, object obj2);\n    parameters:\n    - id: obj1\n      type: System.Object\n      description: Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.\n    - id: obj2\n      type: System.Object\n      description: Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.\n    return:\n      type: System.Object\n      description: 0 if both <code>obj1</code> and <code>obj2</code> evaluate to 0; otherwise, 1.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj(System.Object,System.Object)\n  id: BitXorObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: BitXorObj(Object,Object)\n  nameWithType: ObjectType.BitXorObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs an <xref uid=\"langword_csharp_Xor\" name=\"Xor\" href=\"\"></xref> operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object BitXorObj (object obj1, object obj2);\n    parameters:\n    - id: obj1\n      type: System.Object\n      description: Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.\n    - id: obj2\n      type: System.Object\n      description: Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.\n    return:\n      type: System.Object\n      description: A numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see [Xor Operator](~/add/includes/ajax-current-ext-md.md).\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj(System.Object,System.Object)\n  id: DivObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: DivObj(Object,Object)\n  nameWithType: ObjectType.DivObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs a division (/) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object DivObj (object o1, object o2);\n    parameters:\n    - id: o1\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: o2\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The full quotient of <code>o1</code> divided by <code>o2</code>, including any remainder.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive(System.Object)\n  id: GetObjectValuePrimitive(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: GetObjectValuePrimitive(Object)\n  nameWithType: ObjectType.GetObjectValuePrimitive(Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Returns a boxed primitive value. This method is used to prevent copying structures multiple times.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object GetObjectValuePrimitive (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: Required. Any expression.\n    return:\n      type: System.Object\n      description: The primitive value of <code>o</code> typed as object.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj(System.Object,System.Object)\n  id: IDivObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: IDivObj(Object,Object)\n  nameWithType: ObjectType.IDivObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs an integer division (\\\\) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object IDivObj (object o1, object o2);\n    parameters:\n    - id: o1\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: o2\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The integer quotient of <code>o1</code> divided by <code>o2</code>, which discards any remainder and retains only the integer portion.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)\n  id: LikeObj(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: LikeObj(Object,Object,CompareMethod)\n  nameWithType: ObjectType.LikeObj(Object,Object,CompareMethod)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj(Object,Object,CompareMethod)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs a <xref uid=\"langword_csharp_Like\" name=\"Like\" href=\"\"></xref> comparison.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static bool LikeObj (object vLeft, object vRight, Microsoft.VisualBasic.CompareMethod CompareOption);\n    parameters:\n    - id: vLeft\n      type: System.Object\n      description: Required. Any expression.\n    - id: vRight\n      type: System.Object\n      description: Required. Any string expression conforming to the pattern-matching conventions described in Like Operator.\n    - id: CompareOption\n      type: Microsoft.VisualBasic.CompareMethod\n      description: Required. A <xref href=\"Microsoft.VisualBasic.CompareMethod\"></xref> value that specifies that the operation use either text or binary comparison.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the string representation of the value in <code>vLeft</code> satisfies the pattern that is contained in <code>vRight</code>; otherwise, <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>. <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if both <code>vLeft</code> and <code>vRight</code> are <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj(System.Object,System.Object)\n  id: ModObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: ModObj(Object,Object)\n  nameWithType: ObjectType.ModObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs a modulus (<xref uid=\"langword_csharp_Mod\" name=\"Mod\" href=\"\"></xref>) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object ModObj (object o1, object o2);\n    parameters:\n    - id: o1\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: o2\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The remainder after <code>o1</code> is divided by <code>o2</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj(System.Object,System.Object)\n  id: MulObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: MulObj(Object,Object)\n  nameWithType: ObjectType.MulObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs a multiplication (*) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object MulObj (object o1, object o2);\n    parameters:\n    - id: o1\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: o2\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The product of <code>o1</code> and <code>o2</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj(System.Object)\n  id: NegObj(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: NegObj(Object)\n  nameWithType: ObjectType.NegObj(Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs a unary minus (–) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object NegObj (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The negative value of <code>obj</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj(System.Object)\n  id: NotObj(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: NotObj(Object)\n  nameWithType: ObjectType.NotObj(Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs a <xref uid=\"langword_csharp_Not\" name=\"Not\" href=\"\"></xref> operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object NotObj (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.\n    return:\n      type: System.Object\n      description: For <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> operations, <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> if <code>obj</code> is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>; otherwise, <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>. For bitwise operations, 1 if <code>obj</code> is 0; otherwise, 0.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst(System.Object,System.Object,System.Boolean)\n  id: ObjTst(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: ObjTst(Object,Object,Boolean)\n  nameWithType: ObjectType.ObjTst(Object,Object,Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst(Object,Object,Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs binary or text string comparison when given two objects.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static int ObjTst (object o1, object o2, bool TextCompare);\n    parameters:\n    - id: o1\n      type: System.Object\n      description: Required. Any expression.\n    - id: o2\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> to perform a case-insensitive string comparison; otherwise, <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.\n    return:\n      type: System.Int32\n      description: \"<table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td>\\n          <code>o1</code> is less than <code>o2</code>.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td>\\n          <code>o1</code> is equal to <code>o2</code>.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td>\\n          <code>o1</code> is greater than <code>o2</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj(System.Object)\n  id: PlusObj(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: PlusObj(Object)\n  nameWithType: ObjectType.PlusObj(Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs a unary plus (+) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object PlusObj (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The value of <code>obj</code>. (The sign of the <code>obj</code> is unchanged.)\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj(System.Object,System.Object)\n  id: PowObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: PowObj(Object,Object)\n  nameWithType: ObjectType.PowObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs an exponent (^) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object PowObj (object obj1, object obj2);\n    parameters:\n    - id: obj1\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: obj2\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The result of <code>obj1</code> raised to the power of <code>obj2</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj(System.Object,System.Int32)\n  id: ShiftLeftObj(System.Object,System.Int32)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: ShiftLeftObj(Object,Int32)\n  nameWithType: ObjectType.ShiftLeftObj(Object,Int32)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj(Object,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs an arithmetic left shift (&lt;&lt;) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object ShiftLeftObj (object o1, int amount);\n    parameters:\n    - id: o1\n      type: System.Object\n      description: Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<xref uid=\"langword_csharp_SByte\" name=\"SByte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Byte\" name=\"Byte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Short\" name=\"Short\" href=\"\"></xref>, <xref uid=\"langword_csharp_UShort\" name=\"UShort\" href=\"\"></xref>, <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>, <xref uid=\"langword_csharp_UInteger\" name=\"UInteger\" href=\"\"></xref>, <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>, or <xref uid=\"langword_csharp_ULong\" name=\"ULong\" href=\"\"></xref>).\n    - id: amount\n      type: System.Int32\n      description: Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> or widen to <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>.\n    return:\n      type: System.Object\n      description: An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <code>o1</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj(System.Object,System.Int32)\n  id: ShiftRightObj(System.Object,System.Int32)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: ShiftRightObj(Object,Int32)\n  nameWithType: ObjectType.ShiftRightObj(Object,Int32)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj(Object,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs an arithmetic right shift (&gt;&gt;) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object ShiftRightObj (object o1, int amount);\n    parameters:\n    - id: o1\n      type: System.Object\n      description: Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<xref uid=\"langword_csharp_SByte\" name=\"SByte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Byte\" name=\"Byte\" href=\"\"></xref>, <xref uid=\"langword_csharp_Short\" name=\"Short\" href=\"\"></xref>, <xref uid=\"langword_csharp_UShort\" name=\"UShort\" href=\"\"></xref>, <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>, <xref uid=\"langword_csharp_UInteger\" name=\"UInteger\" href=\"\"></xref>, <xref uid=\"langword_csharp_Long\" name=\"Long\" href=\"\"></xref>, or <xref uid=\"langword_csharp_ULong\" name=\"ULong\" href=\"\"></xref>).\n    - id: amount\n      type: System.Int32\n      description: Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> or widen to <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>.\n    return:\n      type: System.Object\n      description: An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <code>o1</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj(System.Object,System.Object)\n  id: StrCatObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: StrCatObj(Object,Object)\n  nameWithType: ObjectType.StrCatObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs a string concatenation (&amp;) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object StrCatObj (object vLeft, object vRight);\n    parameters:\n    - id: vLeft\n      type: System.Object\n      description: Required. Any expression.\n    - id: vRight\n      type: System.Object\n      description: Required. Any expression.\n    return:\n      type: System.Object\n      description: A string representing the concatenation of <code>vLeft</code> and <code>vRight</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj(System.Object,System.Object)\n  id: SubObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: SubObj(Object,Object)\n  nameWithType: ObjectType.SubObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs a subtraction (–) operation.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object SubObj (object o1, object o2);\n    parameters:\n    - id: o1\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: o2\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The difference between <code>o1</code> and <code>o2</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj(System.Object,System.Object)\n  id: XorObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  langs:\n  - csharp\n  name: XorObj(Object,Object)\n  nameWithType: ObjectType.XorObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj(Object,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs an <xref uid=\"langword_csharp_Xor\" name=\"Xor\" href=\"\"></xref> comparison.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object XorObj (object obj1, object obj2);\n    parameters:\n    - id: obj1\n      type: System.Object\n      description: Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.\n    - id: obj2\n      type: System.Object\n      description: Required. Any <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric expression.\n    return:\n      type: System.Object\n      description: A <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> or numeric value. For a <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> comparison, the return value is the logical exclusion (exclusive logical disjunction) of two <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> values. For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see [Xor Operator](~/add/includes/ajax-current-ext-md.md).\n  overload: Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.#ctor\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: ObjectType()\n  nameWithType: ObjectType.ObjectType()\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.ObjectType()\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: AddObj(Object,Object)\n  nameWithType: ObjectType.AddObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: BitAndObj(Object,Object)\n  nameWithType: ObjectType.BitAndObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: BitOrObj(Object,Object)\n  nameWithType: ObjectType.BitOrObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: BitXorObj(Object,Object)\n  nameWithType: ObjectType.BitXorObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: DivObj(Object,Object)\n  nameWithType: ObjectType.DivObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: GetObjectValuePrimitive(Object)\n  nameWithType: ObjectType.GetObjectValuePrimitive(Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive(Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: IDivObj(Object,Object)\n  nameWithType: ObjectType.IDivObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: LikeObj(Object,Object,CompareMethod)\n  nameWithType: ObjectType.LikeObj(Object,Object,CompareMethod)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj(Object,Object,CompareMethod)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualBasic.CompareMethod\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: CompareMethod\n  nameWithType: CompareMethod\n  fullName: Microsoft.VisualBasic.CompareMethod\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: ModObj(Object,Object)\n  nameWithType: ObjectType.ModObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: MulObj(Object,Object)\n  nameWithType: ObjectType.MulObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: NegObj(Object)\n  nameWithType: ObjectType.NegObj(Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj(Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: NotObj(Object)\n  nameWithType: ObjectType.NotObj(Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj(Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: ObjTst(Object,Object,Boolean)\n  nameWithType: ObjectType.ObjTst(Object,Object,Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst(Object,Object,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: PlusObj(Object)\n  nameWithType: ObjectType.PlusObj(Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj(Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: PowObj(Object,Object)\n  nameWithType: ObjectType.PowObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj(System.Object,System.Int32)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: ShiftLeftObj(Object,Int32)\n  nameWithType: ObjectType.ShiftLeftObj(Object,Int32)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj(Object,Int32)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj(System.Object,System.Int32)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: ShiftRightObj(Object,Int32)\n  nameWithType: ObjectType.ShiftRightObj(Object,Int32)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj(Object,Int32)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: StrCatObj(Object,Object)\n  nameWithType: ObjectType.StrCatObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: SubObj(Object,Object)\n  nameWithType: ObjectType.SubObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: XorObj(Object,Object)\n  nameWithType: ObjectType.XorObj(Object,Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj(Object,Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.#ctor*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: ObjectType\n  nameWithType: ObjectType.ObjectType\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: AddObj\n  nameWithType: ObjectType.AddObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: BitAndObj\n  nameWithType: ObjectType.BitAndObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: BitOrObj\n  nameWithType: ObjectType.BitOrObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: BitXorObj\n  nameWithType: ObjectType.BitXorObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: DivObj\n  nameWithType: ObjectType.DivObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: GetObjectValuePrimitive\n  nameWithType: ObjectType.GetObjectValuePrimitive\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: IDivObj\n  nameWithType: ObjectType.IDivObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: LikeObj\n  nameWithType: ObjectType.LikeObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: ModObj\n  nameWithType: ObjectType.ModObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: MulObj\n  nameWithType: ObjectType.MulObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: NegObj\n  nameWithType: ObjectType.NegObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: NotObj\n  nameWithType: ObjectType.NotObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: ObjTst\n  nameWithType: ObjectType.ObjTst\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: PlusObj\n  nameWithType: ObjectType.PlusObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: PowObj\n  nameWithType: ObjectType.PowObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: ShiftLeftObj\n  nameWithType: ObjectType.ShiftLeftObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: ShiftRightObj\n  nameWithType: ObjectType.ShiftRightObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: StrCatObj\n  nameWithType: ObjectType.StrCatObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: SubObj\n  nameWithType: ObjectType.SubObj\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj*\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectType\n  isExternal: false\n  name: XorObj\n  nameWithType: ObjectType.XorObj\n"}