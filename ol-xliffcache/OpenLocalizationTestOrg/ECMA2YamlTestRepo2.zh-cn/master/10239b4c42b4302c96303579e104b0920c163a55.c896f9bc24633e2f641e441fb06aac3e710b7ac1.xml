{"nodes":[{"pos":[1250,1305],"content":"Provides methods used for security and transport sinks.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides methods used for security and transport sinks.","pos":[0,55]}]},{"pos":[1317,1699],"content":"Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object. Channel sinks are linked together in a chain of channel sink providers, and all channel messages flow through this chain of sinks before the message is serialized and transported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object. Channel sinks are linked together in a chain of channel sink providers, and all channel messages flow through this chain of sinks before the message is serialized and transported.","pos":[0,382],"nodes":[{"content":"Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object.","pos":[0,202]},{"content":"Channel sinks are linked together in a chain of channel sink providers, and all channel messages flow through this chain of sinks before the message is serialized and transported.","pos":[203,382]}]}]},{"pos":[3508,3605],"content":"Requests processing from the current sink of the response from a method call sent asynchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"Requests processing from the current sink of the response from a method call sent asynchronously.","pos":[0,97]}]},{"pos":[3617,3741],"content":"The <ph id=\"ph1\">`state`</ph> parameter contains information that was pushed onto the channel sink stack and associated with the current sink.","needQuote":true,"needEscape":true,"source":"The `state` parameter contains information that was pushed onto the channel sink stack and associated with the current sink."},{"pos":[4461,4520],"content":"A stack of sinks leading back to the server transport sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"A stack of sinks leading back to the server transport sink.","pos":[0,59]}]},{"pos":[4582,4658],"content":"Information generated on the request side that is associated with this sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"Information generated on the request side that is associated with this sink.","pos":[0,76]}]},{"pos":[4747,4768],"content":"The response message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The response message.","pos":[0,21]}]},{"pos":[4869,4932],"content":"The headers to add to the return message heading to the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The headers to add to the return message heading to the client.","pos":[0,63]}]},{"pos":[4998,5044],"content":"The stream heading back to the transport sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream heading back to the transport sink.","pos":[0,46]}]},{"pos":[5257,5318],"content":"The immediate caller does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller does not have infrastructure permission.","pos":[0,61]}]},{"pos":[6334,6431],"content":"Returns the <xref:System.IO.Stream> onto which the provided response message is to be serialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the &lt;xref:System.IO.Stream&gt; onto which the provided response message is to be serialized.","pos":[0,97],"source":"Returns the <xref:System.IO.Stream> onto which the provided response message is to be serialized."}]},{"pos":[6443,6508],"content":"This method is called when a response stream needs to be created.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is called when a response stream needs to be created.","pos":[0,65]}]},{"pos":[6906,6965],"content":"A stack of sinks leading back to the server transport sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"A stack of sinks leading back to the server transport sink.","pos":[0,59]}]},{"pos":[7027,7084],"content":"The state that has been pushed to the stack by this sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"The state that has been pushed to the stack by this sink.","pos":[0,57]}]},{"pos":[7173,7207],"content":"The response message to serialize.","needQuote":true,"needEscape":true,"nodes":[{"content":"The response message to serialize.","pos":[0,34]}]},{"pos":[7308,7364],"content":"The headers to put in the response stream to the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The headers to put in the response stream to the client.","pos":[0,56]}]},{"pos":[7425,7514],"content":"The <xref:System.IO.Stream> onto which the provided response message is to be serialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.Stream&gt; onto which the provided response message is to be serialized.","pos":[0,89],"source":"The <xref:System.IO.Stream> onto which the provided response message is to be serialized."}]},{"pos":[7724,7785],"content":"The immediate caller does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller does not have infrastructure permission.","pos":[0,61]}]},{"pos":[8244,8303],"content":"Gets the next server channel sink in the server sink chain.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the next server channel sink in the server sink chain.","pos":[0,59]}]},{"pos":[8315,8477],"content":"Channel sinks are linked together in a chain of sink providers, and all channel messages flow through this chain before the message is serialized and transported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Channel sinks are linked together in a chain of sink providers, and all channel messages flow through this chain before the message is serialized and transported.","pos":[0,162]}]},{"pos":[8680,8734],"content":"The next server channel sink in the server sink chain.","needQuote":true,"needEscape":true,"nodes":[{"content":"The next server channel sink in the server sink chain.","pos":[0,54]}]},{"pos":[8942,9073],"content":"The immediate caller does not have the required <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> permission.","needQuote":true,"needEscape":true,"source":"The immediate caller does not have the required <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> permission."},{"pos":[10370,10420],"content":"Requests message processing from the current sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"Requests message processing from the current sink.","pos":[0,50]}]},{"pos":[10432,11047],"content":"The job of a proxy is to convert a method call invoked on it into a message object. This message object, which implements the <xref:System.Runtime.Remoting.Messaging.IMessage> interface, is passed from the client end to the server end by invoking ProcessMessage on message sink objects. Message sinks are chained together in the sense that every message sink is responsible for calling ProcessMessage on the next message sink after it has performed its work. For instance, a synchronization-related message sink can cause a lock to be acquired or released, and then delegated further to the downstream message sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"The job of a proxy is to convert a method call invoked on it into a message object. This message object, which implements the <xref:System.Runtime.Remoting.Messaging.IMessage> interface, is passed from the client end to the server end by invoking ProcessMessage on message sink objects. Message sinks are chained together in the sense that every message sink is responsible for calling ProcessMessage on the next message sink after it has performed its work. For instance, a synchronization-related message sink can cause a lock to be acquired or released, and then delegated further to the downstream message sink.","pos":[0,615],"nodes":[{"content":"The job of a proxy is to convert a method call invoked on it into a message object.","pos":[0,83]},{"content":"This message object, which implements the &lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt; interface, is passed from the client end to the server end by invoking ProcessMessage on message sink objects.","pos":[84,286],"source":" This message object, which implements the <xref:System.Runtime.Remoting.Messaging.IMessage> interface, is passed from the client end to the server end by invoking ProcessMessage on message sink objects."},{"content":"Message sinks are chained together in the sense that every message sink is responsible for calling ProcessMessage on the next message sink after it has performed its work.","pos":[287,458]},{"content":"For instance, a synchronization-related message sink can cause a lock to be acquired or released, and then delegated further to the downstream message sink.","pos":[459,615]}]}]},{"pos":[11660,11714],"content":"A stack of channel sinks that called the current sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"A stack of channel sinks that called the current sink.","pos":[0,54]}]},{"pos":[11810,11848],"content":"The message that contains the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message that contains the request.","pos":[0,38]}]},{"pos":[11956,12016],"content":"Headers retrieved from the incoming message from the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Headers retrieved from the incoming message from the client.","pos":[0,60]}]},{"pos":[12089,12172],"content":"The stream that needs to be to processed and passed on to the deserialization sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream that needs to be to processed and passed on to the deserialization sink.","pos":[0,83]}]},{"pos":[12269,12442],"content":"When this method returns, contains a <xref href=\"System.Runtime.Remoting.Messaging.IMessage\"></xref> that holds the response message. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains a <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Messaging.IMessage\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that holds the response message.","pos":[0,133],"source":"When this method returns, contains a <xref href=\"System.Runtime.Remoting.Messaging.IMessage\"></xref> that holds the response message."},{"content":"This parameter is passed uninitialized.","pos":[134,173]}]},{"pos":[12551,12784],"content":"When this method returns, contains a <xref href=\"System.Runtime.Remoting.Channels.ITransportHeaders\"></xref> that holds the headers that are to be added to return message heading to the client. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains a <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Channels.ITransportHeaders\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that holds the headers that are to be added to return message heading to the client.","pos":[0,193],"source":"When this method returns, contains a <xref href=\"System.Runtime.Remoting.Channels.ITransportHeaders\"></xref> that holds the headers that are to be added to return message heading to the client."},{"content":"This parameter is passed uninitialized.","pos":[194,233]}]},{"pos":[12858,13002],"content":"When this method returns, contains a <xref:System.IO.Stream> that is heading back to the transport sink. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains a <xref:System.IO.Stream> that is heading back to the transport sink. This parameter is passed uninitialized.","pos":[0,144],"nodes":[{"content":"When this method returns, contains a &lt;xref:System.IO.Stream&gt; that is heading back to the transport sink.","pos":[0,104],"source":"When this method returns, contains a <xref:System.IO.Stream> that is heading back to the transport sink."},{"content":"This parameter is passed uninitialized.","pos":[105,144]}]}]},{"pos":[13096,13240],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Channels.ServerProcessing\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> status value that provides information about how message was processed.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Runtime.Remoting.Channels.ServerProcessing\"></xref> status value that provides information about how message was processed."},{"pos":[13447,13508],"content":"The immediate caller does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller does not have infrastructure permission.","pos":[0,61]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink\n  id: IServerChannelSink\n  children:\n  - System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)\n  - System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)\n  - System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink\n  - System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)\n  langs:\n  - csharp\n  name: IServerChannelSink\n  nameWithType: IServerChannelSink\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSink\n  type: Interface\n  summary: Provides methods used for security and transport sinks.\n  remarks: Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object. Channel sinks are linked together in a chain of channel sink providers, and all channel messages flow through this chain of sinks before the message is serialized and transported.\n  example:\n  - \"The following code example illustrates an implementation of the IServerChannelSink interface.  \\n  \\n [!code-cs[Remoting_Sinks#60](~/add/codesnippet/csharp/t-system.runtime.remotin_17_1.cs)]\\n [!code-cpp[Remoting_Sinks#60](~/add/codesnippet/cpp/t-system.runtime.remotin_17_1.cpp)]  \\n  \\n See the <xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider> interface documentation for an example of the corresponding server sink provider implementation.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface IServerChannelSink : System.Runtime.Remoting.Channels.IChannelSinkBase\n  implements:\n  - System.Runtime.Remoting.Channels.IChannelSinkBase\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)\n  id: AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  langs:\n  - csharp\n  name: AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)\n  nameWithType: IServerChannelSink.AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Channels\n  summary: Requests processing from the current sink of the response from a method call sent asynchronously.\n  remarks: The `state` parameter contains information that was pushed onto the channel sink stack and associated with the current sink.\n  example:\n  - >-\n    [!code-cpp[CommonTransportKeys#1](~/add/codesnippet/cpp/c6d0c233-95cd-4d1f-b4f8-_1.cpp)]\n     [!code-cs[CommonTransportKeys#1](~/add/codesnippet/csharp/c6d0c233-95cd-4d1f-b4f8-_1.cs)]\n     [!code-vb[CommonTransportKeys#1](~/add/codesnippet/visualbasic/c6d0c233-95cd-4d1f-b4f8-_1.vb)]\n  syntax:\n    content: public void AsyncProcessResponse (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);\n    parameters:\n    - id: sinkStack\n      type: System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack\n      description: A stack of sinks leading back to the server transport sink.\n    - id: state\n      type: System.Object\n      description: Information generated on the request side that is associated with this sink.\n    - id: msg\n      type: System.Runtime.Remoting.Messaging.IMessage\n      description: The response message.\n    - id: headers\n      type: System.Runtime.Remoting.Channels.ITransportHeaders\n      description: The headers to add to the return message heading to the client.\n    - id: stream\n      type: System.IO.Stream\n      description: The stream heading back to the transport sink.\n  overload: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)\n  id: GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  langs:\n  - csharp\n  name: GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)\n  nameWithType: IServerChannelSink.GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Channels\n  summary: Returns the <xref:System.IO.Stream> onto which the provided response message is to be serialized.\n  remarks: This method is called when a response stream needs to be created.\n  syntax:\n    content: public System.IO.Stream GetResponseStream (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers);\n    parameters:\n    - id: sinkStack\n      type: System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack\n      description: A stack of sinks leading back to the server transport sink.\n    - id: state\n      type: System.Object\n      description: The state that has been pushed to the stack by this sink.\n    - id: msg\n      type: System.Runtime.Remoting.Messaging.IMessage\n      description: The response message to serialize.\n    - id: headers\n      type: System.Runtime.Remoting.Channels.ITransportHeaders\n      description: The headers to put in the response stream to the client.\n    return:\n      type: System.IO.Stream\n      description: The <xref:System.IO.Stream> onto which the provided response message is to be serialized.\n  overload: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink\n  id: NextChannelSink\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  langs:\n  - csharp\n  name: NextChannelSink\n  nameWithType: IServerChannelSink.NextChannelSink\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Channels\n  summary: Gets the next server channel sink in the server sink chain.\n  remarks: Channel sinks are linked together in a chain of sink providers, and all channel messages flow through this chain before the message is serialized and transported.\n  syntax:\n    content: public System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink { get; }\n    return:\n      type: System.Runtime.Remoting.Channels.IServerChannelSink\n      description: The next server channel sink in the server sink chain.\n  overload: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller does not have the required <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)\n  id: ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  langs:\n  - csharp\n  name: ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)\n  nameWithType: IServerChannelSink.ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Channels\n  summary: Requests message processing from the current sink.\n  remarks: The job of a proxy is to convert a method call invoked on it into a message object. This message object, which implements the <xref:System.Runtime.Remoting.Messaging.IMessage> interface, is passed from the client end to the server end by invoking ProcessMessage on message sink objects. Message sinks are chained together in the sense that every message sink is responsible for calling ProcessMessage on the next message sink after it has performed its work. For instance, a synchronization-related message sink can cause a lock to be acquired or released, and then delegated further to the downstream message sink.\n  syntax:\n    content: public System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage (System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage requestMsg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, out System.Runtime.Remoting.Messaging.IMessage responseMsg, out System.Runtime.Remoting.Channels.ITransportHeaders responseHeaders, out System.IO.Stream responseStream);\n    parameters:\n    - id: sinkStack\n      type: System.Runtime.Remoting.Channels.IServerChannelSinkStack\n      description: A stack of channel sinks that called the current sink.\n    - id: requestMsg\n      type: System.Runtime.Remoting.Messaging.IMessage\n      description: The message that contains the request.\n    - id: requestHeaders\n      type: System.Runtime.Remoting.Channels.ITransportHeaders\n      description: Headers retrieved from the incoming message from the client.\n    - id: requestStream\n      type: System.IO.Stream\n      description: The stream that needs to be to processed and passed on to the deserialization sink.\n    - id: responseMsg\n      type: System.Runtime.Remoting.Messaging.IMessage\n      description: When this method returns, contains a <xref href=\"System.Runtime.Remoting.Messaging.IMessage\"></xref> that holds the response message. This parameter is passed uninitialized.\n    - id: responseHeaders\n      type: System.Runtime.Remoting.Channels.ITransportHeaders\n      description: When this method returns, contains a <xref href=\"System.Runtime.Remoting.Channels.ITransportHeaders\"></xref> that holds the headers that are to be added to return message heading to the client. This parameter is passed uninitialized.\n    - id: responseStream\n      type: System.IO.Stream\n      description: When this method returns, contains a <xref:System.IO.Stream> that is heading back to the transport sink. This parameter is passed uninitialized.\n    return:\n      type: System.Runtime.Remoting.Channels.ServerProcessing\n      description: A <xref href=\"System.Runtime.Remoting.Channels.ServerProcessing\"></xref> status value that provides information about how message was processed.\n  overload: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller does not have infrastructure permission.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  isExternal: false\n  name: AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)\n  nameWithType: IServerChannelSink.AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)\n- uid: System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack\n  parent: System.Runtime.Remoting.Channels\n  isExternal: false\n  name: IServerResponseChannelSinkStack\n  nameWithType: IServerResponseChannelSinkStack\n  fullName: System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.Remoting.Messaging.IMessage\n  parent: System.Runtime.Remoting.Messaging\n  isExternal: false\n  name: IMessage\n  nameWithType: IMessage\n  fullName: System.Runtime.Remoting.Messaging.IMessage\n- uid: System.Runtime.Remoting.Channels.ITransportHeaders\n  parent: System.Runtime.Remoting.Channels\n  isExternal: false\n  name: ITransportHeaders\n  nameWithType: ITransportHeaders\n  fullName: System.Runtime.Remoting.Channels.ITransportHeaders\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  isExternal: false\n  name: GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)\n  nameWithType: IServerChannelSink.GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  isExternal: false\n  name: NextChannelSink\n  nameWithType: IServerChannelSink.NextChannelSink\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink\n  parent: System.Runtime.Remoting.Channels\n  isExternal: false\n  name: IServerChannelSink\n  nameWithType: IServerChannelSink\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSink\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  isExternal: false\n  name: ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)\n  nameWithType: IServerChannelSink.ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)\n- uid: System.Runtime.Remoting.Channels.ServerProcessing\n  parent: System.Runtime.Remoting.Channels\n  isExternal: false\n  name: ServerProcessing\n  nameWithType: ServerProcessing\n  fullName: System.Runtime.Remoting.Channels.ServerProcessing\n- uid: System.Runtime.Remoting.Channels.IServerChannelSinkStack\n  parent: System.Runtime.Remoting.Channels\n  isExternal: false\n  name: IServerChannelSinkStack\n  nameWithType: IServerChannelSinkStack\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSinkStack\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse*\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  isExternal: false\n  name: AsyncProcessResponse\n  nameWithType: IServerChannelSink.AsyncProcessResponse\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream*\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  isExternal: false\n  name: GetResponseStream\n  nameWithType: IServerChannelSink.GetResponseStream\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink*\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  isExternal: false\n  name: NextChannelSink\n  nameWithType: IServerChannelSink.NextChannelSink\n- uid: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage*\n  parent: System.Runtime.Remoting.Channels.IServerChannelSink\n  isExternal: false\n  name: ProcessMessage\n  nameWithType: IServerChannelSink.ProcessMessage\n"}