{"nodes":[{"pos":[1438,1509],"content":"Manages ASP.NET application domains for an ASP.NET hosting application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Manages ASP.NET application domains for an ASP.NET hosting application.","pos":[0,71]}]},{"pos":[1522,2031],"content":"The ApplicationManager object provides lifetime management of objects in the hosting environment for an ASP.NET application. It is responsible for:      -   Activating and initializing ASP.NET applications.      -   Managing the application lifetime and the lifetime of objects registered in the application.      -   Exposing objects used by the hosting environment to process ASP.NET application requests.      -   Providing a list of applications running in the hosting process at any given moment.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ApplicationManager object provides lifetime management of objects in the hosting environment for an ASP.NET application. It is responsible for:      -   Activating and initializing ASP.NET applications.      -   Managing the application lifetime and the lifetime of objects registered in the application.      -   Exposing objects used by the hosting environment to process ASP.NET application requests.      -   Providing a list of applications running in the hosting process at any given moment.","pos":[0,501],"nodes":[{"content":"The ApplicationManager object provides lifetime management of objects in the hosting environment for an ASP.NET application.","pos":[0,124]},{"content":"It is responsible for:      -   Activating and initializing ASP.NET applications.","pos":[125,206]},{"content":"-   Managing the application lifetime and the lifetime of objects registered in the application.","pos":[212,308]},{"content":"-   Exposing objects used by the hosting environment to process ASP.NET application requests.","pos":[314,407]},{"content":"-   Providing a list of applications running in the hosting process at any given moment.","pos":[413,501]}]}]},{"pos":[2743,2778],"content":"Shuts down all application domains.","needQuote":true,"needEscape":true,"nodes":[{"content":"Shuts down all application domains.","pos":[0,35]}]},{"pos":[2790,2994],"content":"If a call to the Close method reduces the reference count of applications using the application manager to 0, the Close method calls the <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"If a call to the Close method reduces the reference count of applications using the application manager to 0, the Close method calls the &lt;xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A&gt; method.","pos":[0,204],"source":"If a call to the Close method reduces the reference count of applications using the application manager to 0, the Close method calls the <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> method."}]},{"pos":[3687,3757],"content":"Creates an object for the specified application domain, based on type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an object for the specified application domain, based on type.","pos":[0,70]}]},{"pos":[3769,3925],"content":"CreateObject is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateObject is introduced in the .NET Framework version 3.5.","pos":[0,61]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Versions and Dependencies<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[63,156],"source":"  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[4165,4232],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.IApplicationHost\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Web.Hosting.IApplicationHost\"></xref> object."},{"pos":[4291,4324],"content":"The type of the object to create.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the object to create.","pos":[0,33]}]},{"pos":[4405,4461],"content":"A new object of the type specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new object of the type specified in <code>type</code>."},{"pos":[4634,4685],"content":"A physical path for the application does not exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"A physical path for the application does not exist.","pos":[0,51]}]},{"pos":[5628,5826],"content":"Creates an object for the specified application domain based on type, virtual and physical paths, and a Boolean value indicating failure behavior when an object of the specified type already exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an object for the specified application domain based on type, virtual and physical paths, and a Boolean value indicating failure behavior when an object of the specified type already exists.","pos":[0,198]}]},{"pos":[5839,7026],"content":"The CreateObject method is used to create and register objects in the application. Only one object of each type can be created. If you need to create multiple objects of the same type, you must implement an object factory. For more information, see the code example in this topic.       Each application, identified by a unique application identifier, runs in its own application domain. The CreateObject method creates an object of the specified type in the application domain of the application specified in the `appID` parameter. If an application domain does not exist for the specified application, one is created before the object is created.       The `failIfExists` parameter controls the behavior of the CreateObject method when an object of the specified type already exists in the application. When `failIfExists` is `true`, the CreateObject method throws an <xref:System.InvalidOperationException> exception.       When `failIfExists` is `false`, the CreateObject method returns the existing registered object of the specified type.       The CreateObject method calls the overload that takes an additional `throwOnError` parameter with `throwOnError` set to `false`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The CreateObject method is used to create and register objects in the application.","pos":[0,82]},{"content":"Only one object of each type can be created.","pos":[83,127]},{"content":"If you need to create multiple objects of the same type, you must implement an object factory.","pos":[128,222]},{"content":"For more information, see the code example in this topic.","pos":[223,280]},{"content":"Each application, identified by a unique application identifier, runs in its own application domain.","pos":[287,387]},{"content":"The CreateObject method creates an object of the specified type in the application domain of the application specified in the <ph id=\"ph1\">`appID`</ph> parameter.","pos":[388,532],"source":" The CreateObject method creates an object of the specified type in the application domain of the application specified in the `appID` parameter."},{"content":"If an application domain does not exist for the specified application, one is created before the object is created.","pos":[533,648]},{"content":"The <ph id=\"ph1\">`failIfExists`</ph> parameter controls the behavior of the CreateObject method when an object of the specified type already exists in the application.","pos":[655,804],"source":"       The `failIfExists` parameter controls the behavior of the CreateObject method when an object of the specified type already exists in the application."},{"content":"When <ph id=\"ph1\">`failIfExists`</ph> is <ph id=\"ph2\">`true`</ph>, the CreateObject method throws an &lt;xref:System.InvalidOperationException&gt; exception.","pos":[805,920],"source":" When `failIfExists` is `true`, the CreateObject method throws an <xref:System.InvalidOperationException> exception."},{"content":"When <ph id=\"ph1\">`failIfExists`</ph> is <ph id=\"ph2\">`false`</ph>, the CreateObject method returns the existing registered object of the specified type.","pos":[927,1044],"source":"       When `failIfExists` is `false`, the CreateObject method returns the existing registered object of the specified type."},{"content":"The CreateObject method calls the overload that takes an additional <ph id=\"ph1\">`throwOnError`</ph> parameter with <ph id=\"ph2\">`throwOnError`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[1051,1179],"source":"       The CreateObject method calls the overload that takes an additional `throwOnError` parameter with `throwOnError` set to `false`."}]},{"pos":[7916,7979],"content":"The unique identifier for the application that owns the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unique identifier for the application that owns the object.","pos":[0,63]}]},{"pos":[8038,8071],"content":"The type of the object to create.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the object to create.","pos":[0,33]}]},{"pos":[8139,8175],"content":"The virtual path to the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path to the application.","pos":[0,36]}]},{"pos":[8244,8281],"content":"The physical path to the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The physical path to the application.","pos":[0,37]}]},{"pos":[8351,8620],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to throw an exception if an object of the specified type is currently registered; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to return the existing registered object of the specified type.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to throw an exception if an object of the specified type is currently registered; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to return the existing registered object of the specified type."},{"pos":[8701,8749],"content":"A new object of the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new object of the specified <code>type</code>."},{"pos":[9659,9807],"content":"<ph id=\"ph1\">&lt;code&gt;failIfExists&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and an object of the specified type is already registered.","needQuote":true,"needEscape":true,"source":"<code>failIfExists</code> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> and an object of the specified type is already registered."},{"pos":[10494,10779],"content":"Creates an object for the specified application domain based on type, virtual and physical paths, a Boolean value indicating failure behavior when an object of the specified type already exists, and a Boolean value indicating whether hosting initialization error exceptions are thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an object for the specified application domain based on type, virtual and physical paths, a Boolean value indicating failure behavior when an object of the specified type already exists, and a Boolean value indicating whether hosting initialization error exceptions are thrown.","pos":[0,285]}]},{"pos":[10791,11180],"content":"This overload of the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> method provides the `throwOnError` parameter, which allows you to control whether hosting initialization exceptions are thrown. The overload of the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> method that does not provide `throwOnError` calls this overload with the parameter set to `false`.","needQuote":true,"needEscape":true,"nodes":[{"content":"This overload of the &lt;xref:System.Web.Hosting.ApplicationManager.CreateObject%2A&gt; method provides the <ph id=\"ph1\">`throwOnError`</ph> parameter, which allows you to control whether hosting initialization exceptions are thrown.","pos":[0,209],"source":"This overload of the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> method provides the `throwOnError` parameter, which allows you to control whether hosting initialization exceptions are thrown."},{"content":"The overload of the &lt;xref:System.Web.Hosting.ApplicationManager.CreateObject%2A&gt; method that does not provide <ph id=\"ph1\">`throwOnError`</ph> calls this overload with the parameter set to <ph id=\"ph2\">`false`</ph>.","pos":[210,389],"source":" The overload of the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> method that does not provide `throwOnError` calls this overload with the parameter set to `false`."}]},{"pos":[11444,11507],"content":"The unique identifier for the application that owns the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unique identifier for the application that owns the object.","pos":[0,63]}]},{"pos":[11566,11599],"content":"The type of the object to create.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the object to create.","pos":[0,33]}]},{"pos":[11667,11703],"content":"The virtual path to the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path to the application.","pos":[0,36]}]},{"pos":[11772,11809],"content":"The physical path to the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The physical path to the application.","pos":[0,37]}]},{"pos":[11879,12148],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to throw an exception if an object of the specified type is currently registered; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to return the existing registered object of the specified type.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to throw an exception if an object of the specified type is currently registered; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to return the existing registered object of the specified type."},{"pos":[12218,12444],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to throw exceptions for hosting initialization errors; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to not throw hosting initialization exceptions.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to throw exceptions for hosting initialization errors; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to not throw hosting initialization exceptions."},{"pos":[12525,12573],"content":"A new object of the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new object of the specified <code>type</code>."},{"pos":[13483,13631],"content":"<ph id=\"ph1\">&lt;code&gt;failIfExists&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and an object of the specified type is already registered.","needQuote":true,"needEscape":true,"source":"<code>failIfExists</code> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> and an object of the specified type is already registered."},{"pos":[14073,14130],"content":"Gets the application domain of the specified application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the application domain of the specified application.","pos":[0,57]}]},{"pos":[14277,14319],"content":"The unique identifier for the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unique identifier for the application.","pos":[0,42]}]},{"pos":[14380,14422],"content":"The application domain of the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The application domain of the application.","pos":[0,42]}]},{"pos":[15019,15090],"content":"Gets the application domain of an application using the specified host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the application domain of an application using the specified host.","pos":[0,71]}]},{"pos":[15292,15335],"content":"The host to get the application domain for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The host to get the application domain for.","pos":[0,43]}]},{"pos":[15396,15438],"content":"The application domain of the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The application domain of the application.","pos":[0,42]}]},{"pos":[15958,16101],"content":"Returns the single instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.ApplicationManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object associated with this ASP.NET host process.","needQuote":true,"needEscape":true,"source":"Returns the single instance of the <xref href=\"System.Web.Hosting.ApplicationManager\"></xref> object associated with this ASP.NET host process."},{"pos":[16113,16672],"content":"Only one instance of the <xref:System.Web.Hosting.ApplicationManager> object is created by an ASP.NET host process in the default application domain. If an instance of the <xref:System.Web.Hosting.ApplicationManager> class is not available, the GetApplicationManager method first creates an instance of the <xref:System.Web.Hosting.ApplicationManager> class and then returns the newly created object. If an instance of the <xref:System.Web.Hosting.ApplicationManager> class was previously created, the GetApplicationManager method returns the existing object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Only one instance of the <xref:System.Web.Hosting.ApplicationManager> object is created by an ASP.NET host process in the default application domain. If an instance of the <xref:System.Web.Hosting.ApplicationManager> class is not available, the GetApplicationManager method first creates an instance of the <xref:System.Web.Hosting.ApplicationManager> class and then returns the newly created object. If an instance of the <xref:System.Web.Hosting.ApplicationManager> class was previously created, the GetApplicationManager method returns the existing object.","pos":[0,559],"nodes":[{"content":"Only one instance of the &lt;xref:System.Web.Hosting.ApplicationManager&gt; object is created by an ASP.NET host process in the default application domain.","pos":[0,149],"source":"Only one instance of the <xref:System.Web.Hosting.ApplicationManager> object is created by an ASP.NET host process in the default application domain."},{"content":"If an instance of the &lt;xref:System.Web.Hosting.ApplicationManager&gt; class is not available, the GetApplicationManager method first creates an instance of the &lt;xref:System.Web.Hosting.ApplicationManager&gt; class and then returns the newly created object.","pos":[150,400],"source":" If an instance of the <xref:System.Web.Hosting.ApplicationManager> class is not available, the GetApplicationManager method first creates an instance of the <xref:System.Web.Hosting.ApplicationManager> class and then returns the newly created object."},{"content":"If an instance of the &lt;xref:System.Web.Hosting.ApplicationManager&gt; class was previously created, the GetApplicationManager method returns the existing object.","pos":[401,559],"source":" If an instance of the <xref:System.Web.Hosting.ApplicationManager> class was previously created, the GetApplicationManager method returns the existing object."}]}]},{"pos":[17282,17432],"content":"The single instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.ApplicationManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object associated with the ASP.NET host process that is running.","needQuote":true,"needEscape":true,"source":"The single instance of the <xref href=\"System.Web.Hosting.ApplicationManager\"></xref> object associated with the ASP.NET host process that is running."},{"pos":[17988,18071],"content":"Returns the registered object of the specified type from the specified application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the registered object of the specified type from the specified application.","pos":[0,83]}]},{"pos":[18253,18316],"content":"The unique identifier for the application that owns the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unique identifier for the application that owns the object.","pos":[0,63]}]},{"pos":[18375,18408],"content":"The type of the object to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the object to return.","pos":[0,33]}]},{"pos":[18489,18722],"content":"The registered object of the specified type; or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the type has not been registered through a call to the &lt;xref:System.Web.Hosting.ApplicationManager.CreateObject*&gt; method.","needQuote":true,"needEscape":true,"source":"The registered object of the specified type; or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the type has not been registered through a call to the <xref:System.Web.Hosting.ApplicationManager.CreateObject*> method."},{"pos":[18901,19100],"content":"<code>appId</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       —or—       <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;appId&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>appId</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"—or—       <ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,183],"source":"       —or—       <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[19545,19588],"content":"Returns a snapshot of running applications.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a snapshot of running applications.","pos":[0,43]}]},{"pos":[20227,20435],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.ApplicationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that contain information about the applications managed by this <bpt id=\"p2\">&lt;xref href=\"System.Web.Hosting.ApplicationManager\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Web.Hosting.ApplicationInfo\"></xref> objects that contain information about the applications managed by this <xref href=\"System.Web.Hosting.ApplicationManager\"></xref> instance."},{"pos":[20985,21076],"content":"Gives the application domain an infinite lifetime by preventing a lease from being created.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gives the application domain an infinite lifetime by preventing a lease from being created.","pos":[0,91]}]},{"pos":[21088,21326],"content":"This method overrides the <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> method in its base class. It always returns `null` and thereby prevents a lease from being created that would limit the application domain's lifetime.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method overrides the &lt;xref:System.MarshalByRefObject.InitializeLifetimeService%2A&gt; method in its base class.","pos":[0,113],"source":"This method overrides the <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> method in its base class."},{"content":"It always returns <ph id=\"ph1\">`null`</ph> and thereby prevents a lease from being created that would limit the application domain's lifetime.","pos":[114,238],"source":" It always returns `null` and thereby prevents a lease from being created that would limit the application domain's lifetime."}]},{"pos":[21479,21547],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22005,22116],"content":"Returns a value indicating whether all applications hosted by the process are idle and not processing requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value indicating whether all applications hosted by the process are idle and not processing requests.","pos":[0,111]}]},{"pos":[22128,22212],"content":"The IsIdle method returns <ph id=\"ph1\">`true`</ph> if all applications hosted by the process are idle.","needQuote":true,"needEscape":true,"source":"The IsIdle method returns `true` if all applications hosted by the process are idle."},{"pos":[22336,22516],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if all applications in the process are idle; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if all applications in the process are idle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22945,23039],"content":"Makes a thread-safe increment to the user reference count of the application manager instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Makes a thread-safe increment to the user reference count of the application manager instance.","pos":[0,94]}]},{"pos":[23564,23598],"content":"Unloads all application resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unloads all application resources.","pos":[0,34]}]},{"pos":[23610,23956],"content":"Calling the ShutdownAll method is equivalent to calling the <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName> method in all application domains managed by this <xref:System.Web.Hosting.ApplicationManager> instance; however, the ShutdownAll method can be called from outside the managed application domains.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calling the ShutdownAll method is equivalent to calling the &lt;xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName&gt; method in all application domains managed by this &lt;xref:System.Web.Hosting.ApplicationManager&gt; instance; however, the ShutdownAll method can be called from outside the managed application domains.","pos":[0,346],"source":"Calling the ShutdownAll method is equivalent to calling the <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName> method in all application domains managed by this <xref:System.Web.Hosting.ApplicationManager> instance; however, the ShutdownAll method can be called from outside the managed application domains."}]},{"pos":[24583,24617],"content":"Unloads the specified application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unloads the specified application.","pos":[0,34]}]},{"pos":[24629,24924],"content":"Calling the ShutdownApplication method is equivalent to calling the <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName> method for a specific application domain; however, the ShutdownApplication method can be called from outside managed application domains.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calling the ShutdownApplication method is equivalent to calling the &lt;xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName&gt; method for a specific application domain; however, the ShutdownApplication method can be called from outside managed application domains.","pos":[0,295],"source":"Calling the ShutdownApplication method is equivalent to calling the <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName> method for a specific application domain; however, the ShutdownApplication method can be called from outside managed application domains."}]},{"pos":[25073,25124],"content":"The unique identifier of the application to unload.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unique identifier of the application to unload.","pos":[0,51]}]},{"pos":[25312,25395],"content":"<ph id=\"ph1\">&lt;code&gt;appId&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>appId</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[25866,26088],"content":"Removes the specified object from the list of registered objects in an application. If the object to be removed is the last remaining object in the list of registered objects in an application, the application is unloaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the specified object from the list of registered objects in an application. If the object to be removed is the last remaining object in the list of registered objects in an application, the application is unloaded.","pos":[0,222],"nodes":[{"content":"Removes the specified object from the list of registered objects in an application.","pos":[0,83]},{"content":"If the object to be removed is the last remaining object in the list of registered objects in an application, the application is unloaded.","pos":[84,222]}]}]},{"pos":[26239,26302],"content":"The unique identifier for the application that owns the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unique identifier for the application that owns the object.","pos":[0,63]}]},{"pos":[26361,26394],"content":"The type of the object to unload.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the object to unload.","pos":[0,33]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Hosting.ApplicationManager\n  id: ApplicationManager\n  children:\n  - System.Web.Hosting.ApplicationManager.Close\n  - System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)\n  - System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)\n  - System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)\n  - System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)\n  - System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)\n  - System.Web.Hosting.ApplicationManager.GetApplicationManager\n  - System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)\n  - System.Web.Hosting.ApplicationManager.GetRunningApplications\n  - System.Web.Hosting.ApplicationManager.InitializeLifetimeService\n  - System.Web.Hosting.ApplicationManager.IsIdle\n  - System.Web.Hosting.ApplicationManager.Open\n  - System.Web.Hosting.ApplicationManager.ShutdownAll\n  - System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)\n  - System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)\n  langs:\n  - csharp\n  name: ApplicationManager\n  nameWithType: ApplicationManager\n  fullName: System.Web.Hosting.ApplicationManager\n  type: Class\n  summary: Manages ASP.NET application domains for an ASP.NET hosting application.\n  remarks: \"The ApplicationManager object provides lifetime management of objects in the hosting environment for an ASP.NET application. It is responsible for:  \\n  \\n-   Activating and initializing ASP.NET applications.  \\n  \\n-   Managing the application lifetime and the lifetime of objects registered in the application.  \\n  \\n-   Exposing objects used by the hosting environment to process ASP.NET application requests.  \\n  \\n-   Providing a list of applications running in the hosting process at any given moment.\"\n  syntax:\n    content: 'public sealed class ApplicationManager : MarshalByRefObject'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.Close\n  id: Close\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: ApplicationManager.Close()\n  fullName: System.Web.Hosting.ApplicationManager.Close()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Shuts down all application domains.\n  remarks: If a call to the Close method reduces the reference count of applications using the application manager to 0, the Close method calls the <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> method.\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Web.Hosting.ApplicationManager.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)\n  id: CreateObject(System.Web.Hosting.IApplicationHost,System.Type)\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: CreateObject(IApplicationHost,Type)\n  nameWithType: ApplicationManager.CreateObject(IApplicationHost,Type)\n  fullName: System.Web.Hosting.ApplicationManager.CreateObject(IApplicationHost,Type)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Creates an object for the specified application domain, based on type.\n  remarks: CreateObject is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: public System.Web.Hosting.IRegisteredObject CreateObject (System.Web.Hosting.IApplicationHost appHost, Type type);\n    parameters:\n    - id: appHost\n      type: System.Web.Hosting.IApplicationHost\n      description: An <xref href=\"System.Web.Hosting.IApplicationHost\"></xref> object.\n    - id: type\n      type: System.Type\n      description: The type of the object to create.\n    return:\n      type: System.Web.Hosting.IRegisteredObject\n      description: A new object of the type specified in <code>type</code>.\n  overload: System.Web.Hosting.ApplicationManager.CreateObject*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A physical path for the application does not exist.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>appHost</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>type</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)\n  id: CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: CreateObject(String,Type,String,String,Boolean)\n  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean)\n  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Creates an object for the specified application domain based on type, virtual and physical paths, and a Boolean value indicating failure behavior when an object of the specified type already exists.\n  remarks: \"The CreateObject method is used to create and register objects in the application. Only one object of each type can be created. If you need to create multiple objects of the same type, you must implement an object factory. For more information, see the code example in this topic.  \\n  \\n Each application, identified by a unique application identifier, runs in its own application domain. The CreateObject method creates an object of the specified type in the application domain of the application specified in the `appID` parameter. If an application domain does not exist for the specified application, one is created before the object is created.  \\n  \\n The `failIfExists` parameter controls the behavior of the CreateObject method when an object of the specified type already exists in the application. When `failIfExists` is `true`, the CreateObject method throws an <xref:System.InvalidOperationException> exception.  \\n  \\n When `failIfExists` is `false`, the CreateObject method returns the existing registered object of the specified type.  \\n  \\n The CreateObject method calls the overload that takes an additional `throwOnError` parameter with `throwOnError` set to `false`.\"\n  example:\n  - \"The following code example is an implementation of the object-factory design pattern for registered objects. Using the factory pattern enables you to register multiple instances of an object. The example contains two objects: `SampleComponent`, which is the object the application will use multiple instances of, and `SampleComponentFactory`, which manages a list of `SampleComponent` instances.  \\n  \\n [!code-cs[System.Web.Hosting.ApplicationManager#1](~/add/codesnippet/csharp/37d6d853-1462-44e9-b1c3-_1.cs)]\\n [!code-vb[System.Web.Hosting.ApplicationManager#1](~/add/codesnippet/visualbasic/37d6d853-1462-44e9-b1c3-_1.vb)]\"\n  syntax:\n    content: public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists);\n    parameters:\n    - id: appId\n      type: System.String\n      description: The unique identifier for the application that owns the object.\n    - id: type\n      type: System.Type\n      description: The type of the object to create.\n    - id: virtualPath\n      type: System.String\n      description: The virtual path to the application.\n    - id: physicalPath\n      type: System.String\n      description: The physical path to the application.\n    - id: failIfExists\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to throw an exception if an object of the specified type is currently registered; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to return the existing registered object of the specified type.\n    return:\n      type: System.Web.Hosting.IRegisteredObject\n      description: A new object of the specified <code>type</code>.\n  overload: System.Web.Hosting.ApplicationManager.CreateObject*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>physicalPath</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>  \\n  \\n \\\\- or -  \\n  \\n <code>physicalPath</code> is not a valid application path.  \\n  \\n \\\\- or -  \\n  \\n <code>type</code> does not implement the <xref href=\\\"System.Web.Hosting.IRegisteredObject\\\"></xref> interface.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>appID</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>type</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>failIfExists</code> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> and an object of the specified type is already registered.\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)\n  id: CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: CreateObject(String,Type,String,String,Boolean,Boolean)\n  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)\n  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Creates an object for the specified application domain based on type, virtual and physical paths, a Boolean value indicating failure behavior when an object of the specified type already exists, and a Boolean value indicating whether hosting initialization error exceptions are thrown.\n  remarks: This overload of the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> method provides the `throwOnError` parameter, which allows you to control whether hosting initialization exceptions are thrown. The overload of the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> method that does not provide `throwOnError` calls this overload with the parameter set to `false`.\n  syntax:\n    content: public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError);\n    parameters:\n    - id: appId\n      type: System.String\n      description: The unique identifier for the application that owns the object.\n    - id: type\n      type: System.Type\n      description: The type of the object to create.\n    - id: virtualPath\n      type: System.String\n      description: The virtual path to the application.\n    - id: physicalPath\n      type: System.String\n      description: The physical path to the application.\n    - id: failIfExists\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to throw an exception if an object of the specified type is currently registered; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to return the existing registered object of the specified type.\n    - id: throwOnError\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to throw exceptions for hosting initialization errors; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to not throw hosting initialization exceptions.\n    return:\n      type: System.Web.Hosting.IRegisteredObject\n      description: A new object of the specified <code>type</code>.\n  overload: System.Web.Hosting.ApplicationManager.CreateObject*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>physicalPath</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>  \\n  \\n \\\\- or -  \\n  \\n <code>physicalPath</code> is not a valid application path.  \\n  \\n \\\\- or -  \\n  \\n <code>type</code> does not implement the <xref href=\\\"System.Web.Hosting.IRegisteredObject\\\"></xref> interface.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>appID</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>type</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>failIfExists</code> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> and an object of the specified type is already registered.\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)\n  id: GetAppDomain(System.String)\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: GetAppDomain(String)\n  nameWithType: ApplicationManager.GetAppDomain(String)\n  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets the application domain of the specified application.\n  syntax:\n    content: public AppDomain GetAppDomain (string appId);\n    parameters:\n    - id: appId\n      type: System.String\n      description: The unique identifier for the application.\n    return:\n      type: System.AppDomain\n      description: The application domain of the application.\n  overload: System.Web.Hosting.ApplicationManager.GetAppDomain*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)\n  id: GetAppDomain(System.Web.Hosting.IApplicationHost)\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: GetAppDomain(IApplicationHost)\n  nameWithType: ApplicationManager.GetAppDomain(IApplicationHost)\n  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(IApplicationHost)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets the application domain of an application using the specified host.\n  syntax:\n    content: public AppDomain GetAppDomain (System.Web.Hosting.IApplicationHost appHost);\n    parameters:\n    - id: appHost\n      type: System.Web.Hosting.IApplicationHost\n      description: The host to get the application domain for.\n    return:\n      type: System.AppDomain\n      description: The application domain of the application.\n  overload: System.Web.Hosting.ApplicationManager.GetAppDomain*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.GetApplicationManager\n  id: GetApplicationManager\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: GetApplicationManager()\n  nameWithType: ApplicationManager.GetApplicationManager()\n  fullName: System.Web.Hosting.ApplicationManager.GetApplicationManager()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Returns the single instance of the <xref href=\"System.Web.Hosting.ApplicationManager\"></xref> object associated with this ASP.NET host process.\n  remarks: Only one instance of the <xref:System.Web.Hosting.ApplicationManager> object is created by an ASP.NET host process in the default application domain. If an instance of the <xref:System.Web.Hosting.ApplicationManager> class is not available, the GetApplicationManager method first creates an instance of the <xref:System.Web.Hosting.ApplicationManager> class and then returns the newly created object. If an instance of the <xref:System.Web.Hosting.ApplicationManager> class was previously created, the GetApplicationManager method returns the existing object.\n  example:\n  - \"The following code example uses the GetApplicationManager method to retrieve the <xref:System.Web.Hosting.ApplicationManager> instance for a Web application.  \\n  \\n [!code-vb[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/visualbasic/m-system.web.hosting.app_0_1.aspx)]\\n [!code-cs[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/csharp/m-system.web.hosting.app_0_1.aspx)]\"\n  syntax:\n    content: public static System.Web.Hosting.ApplicationManager GetApplicationManager ();\n    parameters: []\n    return:\n      type: System.Web.Hosting.ApplicationManager\n      description: The single instance of the <xref href=\"System.Web.Hosting.ApplicationManager\"></xref> object associated with the ASP.NET host process that is running.\n  overload: System.Web.Hosting.ApplicationManager.GetApplicationManager*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)\n  id: GetObject(System.String,System.Type)\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: GetObject(String,Type)\n  nameWithType: ApplicationManager.GetObject(String,Type)\n  fullName: System.Web.Hosting.ApplicationManager.GetObject(String,Type)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Returns the registered object of the specified type from the specified application.\n  syntax:\n    content: public System.Web.Hosting.IRegisteredObject GetObject (string appId, Type type);\n    parameters:\n    - id: appId\n      type: System.String\n      description: The unique identifier for the application that owns the object.\n    - id: type\n      type: System.Type\n      description: The type of the object to return.\n    return:\n      type: System.Web.Hosting.IRegisteredObject\n      description: The registered object of the specified type; or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the type has not been registered through a call to the <xref:System.Web.Hosting.ApplicationManager.CreateObject*> method.\n  overload: System.Web.Hosting.ApplicationManager.GetObject*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>appId</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n —or—  \\n  \\n <code>type</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.GetRunningApplications\n  id: GetRunningApplications\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: GetRunningApplications()\n  nameWithType: ApplicationManager.GetRunningApplications()\n  fullName: System.Web.Hosting.ApplicationManager.GetRunningApplications()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Returns a snapshot of running applications.\n  remarks: ''\n  example:\n  - \"The following code example uses the GetRunningApplications method to display information about the applications managed by an <xref:System.Web.Hosting.ApplicationManager> instance.  \\n  \\n [!code-vb[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/visualbasic/m-system.web.hosting.app_1_1.aspx)]\\n [!code-cs[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/csharp/m-system.web.hosting.app_1_1.aspx)]\"\n  syntax:\n    content: public System.Web.Hosting.ApplicationInfo[] GetRunningApplications ();\n    parameters: []\n    return:\n      type: System.Web.Hosting.ApplicationInfo[]\n      description: An array of <xref href=\"System.Web.Hosting.ApplicationInfo\"></xref> objects that contain information about the applications managed by this <xref href=\"System.Web.Hosting.ApplicationManager\"></xref> instance.\n  overload: System.Web.Hosting.ApplicationManager.GetRunningApplications*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.InitializeLifetimeService\n  id: InitializeLifetimeService\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: InitializeLifetimeService()\n  nameWithType: ApplicationManager.InitializeLifetimeService()\n  fullName: System.Web.Hosting.ApplicationManager.InitializeLifetimeService()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gives the application domain an infinite lifetime by preventing a lease from being created.\n  remarks: This method overrides the <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> method in its base class. It always returns `null` and thereby prevents a lease from being created that would limit the application domain's lifetime.\n  syntax:\n    content: public override object InitializeLifetimeService ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Web.Hosting.ApplicationManager.InitializeLifetimeService*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.IsIdle\n  id: IsIdle\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: IsIdle()\n  nameWithType: ApplicationManager.IsIdle()\n  fullName: System.Web.Hosting.ApplicationManager.IsIdle()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Returns a value indicating whether all applications hosted by the process are idle and not processing requests.\n  remarks: The IsIdle method returns `true` if all applications hosted by the process are idle.\n  syntax:\n    content: public bool IsIdle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if all applications in the process are idle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.Hosting.ApplicationManager.IsIdle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.Open\n  id: Open\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: Open()\n  nameWithType: ApplicationManager.Open()\n  fullName: System.Web.Hosting.ApplicationManager.Open()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Makes a thread-safe increment to the user reference count of the application manager instance.\n  syntax:\n    content: public void Open ();\n    parameters: []\n  overload: System.Web.Hosting.ApplicationManager.Open*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.ShutdownAll\n  id: ShutdownAll\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: ShutdownAll()\n  nameWithType: ApplicationManager.ShutdownAll()\n  fullName: System.Web.Hosting.ApplicationManager.ShutdownAll()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Unloads all application resources.\n  remarks: Calling the ShutdownAll method is equivalent to calling the <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName> method in all application domains managed by this <xref:System.Web.Hosting.ApplicationManager> instance; however, the ShutdownAll method can be called from outside the managed application domains.\n  syntax:\n    content: public void ShutdownAll ();\n    parameters: []\n  overload: System.Web.Hosting.ApplicationManager.ShutdownAll*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)\n  id: ShutdownApplication(System.String)\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: ShutdownApplication(String)\n  nameWithType: ApplicationManager.ShutdownApplication(String)\n  fullName: System.Web.Hosting.ApplicationManager.ShutdownApplication(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Unloads the specified application.\n  remarks: Calling the ShutdownApplication method is equivalent to calling the <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName> method for a specific application domain; however, the ShutdownApplication method can be called from outside managed application domains.\n  syntax:\n    content: public void ShutdownApplication (string appId);\n    parameters:\n    - id: appId\n      type: System.String\n      description: The unique identifier of the application to unload.\n  overload: System.Web.Hosting.ApplicationManager.ShutdownApplication*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>appId</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)\n  id: StopObject(System.String,System.Type)\n  parent: System.Web.Hosting.ApplicationManager\n  langs:\n  - csharp\n  name: StopObject(String,Type)\n  nameWithType: ApplicationManager.StopObject(String,Type)\n  fullName: System.Web.Hosting.ApplicationManager.StopObject(String,Type)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Removes the specified object from the list of registered objects in an application. If the object to be removed is the last remaining object in the list of registered objects in an application, the application is unloaded.\n  syntax:\n    content: public void StopObject (string appId, Type type);\n    parameters:\n    - id: appId\n      type: System.String\n      description: The unique identifier for the application that owns the object.\n    - id: type\n      type: System.Type\n      description: The type of the object to unload.\n  overload: System.Web.Hosting.ApplicationManager.StopObject*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>appId</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>type</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Web.Hosting.ApplicationManager.Close\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: Close()\n  nameWithType: ApplicationManager.Close()\n  fullName: System.Web.Hosting.ApplicationManager.Close()\n- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: CreateObject(IApplicationHost,Type)\n  nameWithType: ApplicationManager.CreateObject(IApplicationHost,Type)\n  fullName: System.Web.Hosting.ApplicationManager.CreateObject(IApplicationHost,Type)\n- uid: System.Web.Hosting.IRegisteredObject\n  parent: System.Web.Hosting\n  isExternal: false\n  name: IRegisteredObject\n  nameWithType: IRegisteredObject\n  fullName: System.Web.Hosting.IRegisteredObject\n- uid: System.Web.Hosting.IApplicationHost\n  parent: System.Web.Hosting\n  isExternal: false\n  name: IApplicationHost\n  nameWithType: IApplicationHost\n  fullName: System.Web.Hosting.IApplicationHost\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: CreateObject(String,Type,String,String,Boolean)\n  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean)\n  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: CreateObject(String,Type,String,String,Boolean,Boolean)\n  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)\n  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)\n- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: GetAppDomain(String)\n  nameWithType: ApplicationManager.GetAppDomain(String)\n  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(String)\n- uid: System.AppDomain\n  parent: System\n  isExternal: false\n  name: AppDomain\n  nameWithType: AppDomain\n  fullName: System.AppDomain\n- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: GetAppDomain(IApplicationHost)\n  nameWithType: ApplicationManager.GetAppDomain(IApplicationHost)\n  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(IApplicationHost)\n- uid: System.Web.Hosting.ApplicationManager.GetApplicationManager\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: GetApplicationManager()\n  nameWithType: ApplicationManager.GetApplicationManager()\n  fullName: System.Web.Hosting.ApplicationManager.GetApplicationManager()\n- uid: System.Web.Hosting.ApplicationManager\n  parent: System.Web.Hosting\n  isExternal: false\n  name: ApplicationManager\n  nameWithType: ApplicationManager\n  fullName: System.Web.Hosting.ApplicationManager\n- uid: System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: GetObject(String,Type)\n  nameWithType: ApplicationManager.GetObject(String,Type)\n  fullName: System.Web.Hosting.ApplicationManager.GetObject(String,Type)\n- uid: System.Web.Hosting.ApplicationManager.GetRunningApplications\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: GetRunningApplications()\n  nameWithType: ApplicationManager.GetRunningApplications()\n  fullName: System.Web.Hosting.ApplicationManager.GetRunningApplications()\n- uid: System.Web.Hosting.ApplicationInfo[]\n  parent: System.Web.Hosting\n  isExternal: false\n  name: ApplicationInfo\n  nameWithType: ApplicationInfo\n  fullName: System.Web.Hosting.ApplicationInfo[]\n  spec.csharp:\n  - uid: System.Web.Hosting.ApplicationInfo\n    name: ApplicationInfo\n    nameWithType: ApplicationInfo\n    fullName: ApplicationInfo[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Web.Hosting.ApplicationManager.InitializeLifetimeService\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: ApplicationManager.InitializeLifetimeService()\n  fullName: System.Web.Hosting.ApplicationManager.InitializeLifetimeService()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.Hosting.ApplicationManager.IsIdle\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: IsIdle()\n  nameWithType: ApplicationManager.IsIdle()\n  fullName: System.Web.Hosting.ApplicationManager.IsIdle()\n- uid: System.Web.Hosting.ApplicationManager.Open\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: Open()\n  nameWithType: ApplicationManager.Open()\n  fullName: System.Web.Hosting.ApplicationManager.Open()\n- uid: System.Web.Hosting.ApplicationManager.ShutdownAll\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: ShutdownAll()\n  nameWithType: ApplicationManager.ShutdownAll()\n  fullName: System.Web.Hosting.ApplicationManager.ShutdownAll()\n- uid: System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: ShutdownApplication(String)\n  nameWithType: ApplicationManager.ShutdownApplication(String)\n  fullName: System.Web.Hosting.ApplicationManager.ShutdownApplication(String)\n- uid: System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: StopObject(String,Type)\n  nameWithType: ApplicationManager.StopObject(String,Type)\n  fullName: System.Web.Hosting.ApplicationManager.StopObject(String,Type)\n- uid: System.Web.Hosting.ApplicationManager.Close*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: Close\n  nameWithType: ApplicationManager.Close\n- uid: System.Web.Hosting.ApplicationManager.CreateObject*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: CreateObject\n  nameWithType: ApplicationManager.CreateObject\n- uid: System.Web.Hosting.ApplicationManager.GetAppDomain*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: GetAppDomain\n  nameWithType: ApplicationManager.GetAppDomain\n- uid: System.Web.Hosting.ApplicationManager.GetApplicationManager*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: GetApplicationManager\n  nameWithType: ApplicationManager.GetApplicationManager\n- uid: System.Web.Hosting.ApplicationManager.GetObject*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: GetObject\n  nameWithType: ApplicationManager.GetObject\n- uid: System.Web.Hosting.ApplicationManager.GetRunningApplications*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: GetRunningApplications\n  nameWithType: ApplicationManager.GetRunningApplications\n- uid: System.Web.Hosting.ApplicationManager.InitializeLifetimeService*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: InitializeLifetimeService\n  nameWithType: ApplicationManager.InitializeLifetimeService\n- uid: System.Web.Hosting.ApplicationManager.IsIdle*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: IsIdle\n  nameWithType: ApplicationManager.IsIdle\n- uid: System.Web.Hosting.ApplicationManager.Open*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: Open\n  nameWithType: ApplicationManager.Open\n- uid: System.Web.Hosting.ApplicationManager.ShutdownAll*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: ShutdownAll\n  nameWithType: ApplicationManager.ShutdownAll\n- uid: System.Web.Hosting.ApplicationManager.ShutdownApplication*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: ShutdownApplication\n  nameWithType: ApplicationManager.ShutdownApplication\n- uid: System.Web.Hosting.ApplicationManager.StopObject*\n  parent: System.Web.Hosting.ApplicationManager\n  isExternal: false\n  name: StopObject\n  nameWithType: ApplicationManager.StopObject\n"}