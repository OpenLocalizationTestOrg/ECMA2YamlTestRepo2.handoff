{"nodes":[{"pos":[782,885],"content":"Provides the functionality to restore the migration, or flow, of the execution context between threads.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides the functionality to restore the migration, or flow, of the execution context between threads.","pos":[0,103]}]},{"pos":[897,1431],"content":"An execution context contains all execution-related information for a logical thread. The flow of the execution context to other threads can be prevented by using the <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method, which returns an AsyncFlowControl structure. The <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the returned AsyncFlowControl structure can be used to undo the flow suppression. The AsyncFlowControl structure must be used on the same thread on which it was created.","needQuote":true,"needEscape":true,"nodes":[{"content":"An execution context contains all execution-related information for a logical thread. The flow of the execution context to other threads can be prevented by using the <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method, which returns an AsyncFlowControl structure. The <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the returned AsyncFlowControl structure can be used to undo the flow suppression. The AsyncFlowControl structure must be used on the same thread on which it was created.","pos":[0,534],"nodes":[{"content":"An execution context contains all execution-related information for a logical thread.","pos":[0,85]},{"content":"The flow of the execution context to other threads can be prevented by using the &lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName&gt; method, which returns an AsyncFlowControl structure.","pos":[86,301],"source":" The flow of the execution context to other threads can be prevented by using the <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method, which returns an AsyncFlowControl structure."},{"content":"The &lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt; method of the returned AsyncFlowControl structure can be used to undo the flow suppression.","pos":[302,446],"source":" The <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the returned AsyncFlowControl structure can be used to undo the flow suppression."},{"content":"The AsyncFlowControl structure must be used on the same thread on which it was created.","pos":[447,534]}]}]},{"pos":[1925,2045],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Threading.AsyncFlowControl\"></xref> class."},{"pos":[2058,2935],"content":"Call `Dispose` when you are finished using the <xref:System.Threading.AsyncFlowControl>. The `Dispose` method leaves the <xref:System.Threading.AsyncFlowControl> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.AsyncFlowControl> so the garbage collector can reclaim the memory that the <xref:System.Threading.AsyncFlowControl> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Threading.AsyncFlowControl>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.AsyncFlowControl> object's `Finalize` method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the &lt;xref:System.Threading.AsyncFlowControl&gt;.","pos":[0,88],"source":"Call `Dispose` when you are finished using the <xref:System.Threading.AsyncFlowControl>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the &lt;xref:System.Threading.AsyncFlowControl&gt; in an unusable state.","pos":[89,183],"source":" The `Dispose` method leaves the <xref:System.Threading.AsyncFlowControl> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the &lt;xref:System.Threading.AsyncFlowControl&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Threading.AsyncFlowControl&gt; was occupying.","pos":[184,401],"source":" After calling `Dispose`, you must release all references to the <xref:System.Threading.AsyncFlowControl> so the garbage collector can reclaim the memory that the <xref:System.Threading.AsyncFlowControl> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[408,582],"source":"       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call <ph id=\"ph2\">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Threading.AsyncFlowControl&gt;.","pos":[588,710],"source":"      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Threading.AsyncFlowControl>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Threading.AsyncFlowControl&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[711,872],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.AsyncFlowControl> object's `Finalize` method."}]},{"pos":[3183,3482],"content":"The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is not used on the thread where it was created.       -or-       The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure has already been used to call Dispose or <xref:System.Threading.AsyncFlowControl.Undo*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure is not used on the thread where it was created.","pos":[0,116],"source":"The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is not used on the thread where it was created."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure has already been used to call Dispose or &lt;xref:System.Threading.AsyncFlowControl.Undo*&gt;.","pos":[123,291],"source":"       -or-       The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure has already been used to call Dispose or <xref:System.Threading.AsyncFlowControl.Undo*>."}]},{"pos":[3877,4006],"content":"Determines whether the specified object is equal to the current <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Determines whether the specified object is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."},{"pos":[4147,4195],"content":"An object to compare with the current structure.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object to compare with the current structure.","pos":[0,48]}]},{"pos":[4254,4574],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an <bpt id=\"p3\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> structure and is equal to the current <bpt id=\"p4\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> structure; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is an <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure and is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5109,5296],"content":"Determines whether the specified <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure is equal to the current <bpt id=\"p2\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Determines whether the specified <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."},{"pos":[5475,5581],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to compare with the current structure.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure to compare with the current structure."},{"pos":[5640,5885],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> is equal to the current <bpt id=\"p3\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> structure; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6327,6425],"content":"Gets a hash code for the current <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Gets a hash code for the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."},{"pos":[6560,6653],"content":"A hash code for the current <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"A hash code for the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."},{"pos":[7339,7454],"content":"Compares two <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures to determine whether they are equal.","needQuote":true,"needEscape":true,"source":"Compares two <xref href=\"System.Threading.AsyncFlowControl\"></xref> structures to determine whether they are equal."},{"pos":[7678,7746],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."},{"pos":[7824,7892],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."},{"pos":[7951,8119],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two structures are equal; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two structures are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8815,8934],"content":"Compares two <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures to determine whether they are not equal.","needQuote":true,"needEscape":true,"source":"Compares two <xref href=\"System.Threading.AsyncFlowControl\"></xref> structures to determine whether they are not equal."},{"pos":[9160,9228],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."},{"pos":[9306,9374],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."},{"pos":[9433,9601],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the structures are not equal; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the structures are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10015,10074],"content":"Restores the flow of the execution context between threads.","needQuote":true,"needEscape":true,"nodes":[{"content":"Restores the flow of the execution context between threads.","pos":[0,59]}]},{"pos":[10087,10469],"content":"The <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method returns an <xref:System.Threading.AsyncFlowControl> structure that is used to restore the flow.       The Undo method must be called only on the <xref:System.Threading.AsyncFlowControl> structure returned by its associated <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method returns an <xref:System.Threading.AsyncFlowControl> structure that is used to restore the flow.       The Undo method must be called only on the <xref:System.Threading.AsyncFlowControl> structure returned by its associated <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.","pos":[0,380],"nodes":[{"content":"The &lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName&gt; method returns an &lt;xref:System.Threading.AsyncFlowControl&gt; structure that is used to restore the flow.","pos":[0,188],"source":"The <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method returns an <xref:System.Threading.AsyncFlowControl> structure that is used to restore the flow."},{"content":"The Undo method must be called only on the &lt;xref:System.Threading.AsyncFlowControl&gt; structure returned by its associated &lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt; method.","pos":[195,380],"source":"       The Undo method must be called only on the <xref:System.Threading.AsyncFlowControl> structure returned by its associated <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method."}]}]},{"pos":[10711,11010],"content":"The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is not used on the thread where it was created.       -or-       The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure has already been used to call <xref:System.Threading.AsyncFlowControl.Dispose*> or Undo.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure is not used on the thread where it was created.","pos":[0,116],"source":"The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is not used on the thread where it was created."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure has already been used to call &lt;xref:System.Threading.AsyncFlowControl.Dispose*&gt; or Undo.","pos":[123,291],"source":"       -or-       The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure has already been used to call <xref:System.Threading.AsyncFlowControl.Dispose*> or Undo."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.AsyncFlowControl\n  id: AsyncFlowControl\n  children:\n  - System.Threading.AsyncFlowControl.Dispose\n  - System.Threading.AsyncFlowControl.Equals(System.Object)\n  - System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)\n  - System.Threading.AsyncFlowControl.GetHashCode\n  - System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  - System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  - System.Threading.AsyncFlowControl.Undo\n  langs:\n  - csharp\n  name: AsyncFlowControl\n  nameWithType: AsyncFlowControl\n  fullName: System.Threading.AsyncFlowControl\n  type: Struct\n  summary: Provides the functionality to restore the migration, or flow, of the execution context between threads.\n  remarks: An execution context contains all execution-related information for a logical thread. The flow of the execution context to other threads can be prevented by using the <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method, which returns an AsyncFlowControl structure. The <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the returned AsyncFlowControl structure can be used to undo the flow suppression. The AsyncFlowControl structure must be used on the same thread on which it was created.\n  syntax:\n    content: 'public struct AsyncFlowControl : IDisposable'\n  inheritance:\n  - System.ValueType\n  implements:\n  - System.IDisposable\n  platform:\n  - net462\n- uid: System.Threading.AsyncFlowControl.Dispose\n  id: Dispose\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: AsyncFlowControl.Dispose()\n  fullName: System.Threading.AsyncFlowControl.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Threading.AsyncFlowControl\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Threading.AsyncFlowControl>. The `Dispose` method leaves the <xref:System.Threading.AsyncFlowControl> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.AsyncFlowControl> so the garbage collector can reclaim the memory that the <xref:System.Threading.AsyncFlowControl> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.AsyncFlowControl>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.AsyncFlowControl> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Threading.AsyncFlowControl.Dispose*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Threading.AsyncFlowControl\\\"></xref> structure is not used on the thread where it was created.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.AsyncFlowControl\\\"></xref> structure has already been used to call Dispose or <xref:System.Threading.AsyncFlowControl.Undo*>.\"\n  platform:\n  - net462\n- uid: System.Threading.AsyncFlowControl.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: AsyncFlowControl.Equals(Object)\n  fullName: System.Threading.AsyncFlowControl.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Determines whether the specified object is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An object to compare with the current structure.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is an <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure and is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Threading.AsyncFlowControl.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)\n  id: Equals(System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: Equals(AsyncFlowControl)\n  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)\n  fullName: System.Threading.AsyncFlowControl.Equals(AsyncFlowControl)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Determines whether the specified <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n  syntax:\n    content: public bool Equals (System.Threading.AsyncFlowControl obj);\n    parameters:\n    - id: obj\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure to compare with the current structure.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Threading.AsyncFlowControl.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.AsyncFlowControl.GetHashCode\n  id: GetHashCode\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: AsyncFlowControl.GetHashCode()\n  fullName: System.Threading.AsyncFlowControl.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets a hash code for the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n  overload: System.Threading.AsyncFlowControl.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  id: op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: op_Equality(AsyncFlowControl,AsyncFlowControl)\n  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)\n  fullName: System.Threading.AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Compares two <xref href=\"System.Threading.AsyncFlowControl\"></xref> structures to determine whether they are equal.\n  syntax:\n    content: public static bool op_Equality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);\n    parameters:\n    - id: a\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n    - id: b\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two structures are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Threading.AsyncFlowControl.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  id: op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: op_Inequality(AsyncFlowControl,AsyncFlowControl)\n  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)\n  fullName: System.Threading.AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Compares two <xref href=\"System.Threading.AsyncFlowControl\"></xref> structures to determine whether they are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);\n    parameters:\n    - id: a\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n    - id: b\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the structures are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Threading.AsyncFlowControl.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.AsyncFlowControl.Undo\n  id: Undo\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: Undo()\n  nameWithType: AsyncFlowControl.Undo()\n  fullName: System.Threading.AsyncFlowControl.Undo()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Restores the flow of the execution context between threads.\n  remarks: \"The <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method returns an <xref:System.Threading.AsyncFlowControl> structure that is used to restore the flow.  \\n  \\n The Undo method must be called only on the <xref:System.Threading.AsyncFlowControl> structure returned by its associated <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.\"\n  syntax:\n    content: public void Undo ();\n    parameters: []\n  overload: System.Threading.AsyncFlowControl.Undo*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Threading.AsyncFlowControl\\\"></xref> structure is not used on the thread where it was created.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.AsyncFlowControl\\\"></xref> structure has already been used to call <xref:System.Threading.AsyncFlowControl.Dispose*> or Undo.\"\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Threading.AsyncFlowControl.Dispose\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Dispose()\n  nameWithType: AsyncFlowControl.Dispose()\n  fullName: System.Threading.AsyncFlowControl.Dispose()\n- uid: System.Threading.AsyncFlowControl.Equals(System.Object)\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: AsyncFlowControl.Equals(Object)\n  fullName: System.Threading.AsyncFlowControl.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Equals(AsyncFlowControl)\n  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)\n  fullName: System.Threading.AsyncFlowControl.Equals(AsyncFlowControl)\n- uid: System.Threading.AsyncFlowControl\n  parent: System.Threading\n  isExternal: false\n  name: AsyncFlowControl\n  nameWithType: AsyncFlowControl\n  fullName: System.Threading.AsyncFlowControl\n- uid: System.Threading.AsyncFlowControl.GetHashCode\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: AsyncFlowControl.GetHashCode()\n  fullName: System.Threading.AsyncFlowControl.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: op_Equality(AsyncFlowControl,AsyncFlowControl)\n  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)\n  fullName: System.Threading.AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)\n- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: op_Inequality(AsyncFlowControl,AsyncFlowControl)\n  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)\n  fullName: System.Threading.AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)\n- uid: System.Threading.AsyncFlowControl.Undo\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Undo()\n  nameWithType: AsyncFlowControl.Undo()\n  fullName: System.Threading.AsyncFlowControl.Undo()\n- uid: System.Threading.AsyncFlowControl.Dispose*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Dispose\n  nameWithType: AsyncFlowControl.Dispose\n- uid: System.Threading.AsyncFlowControl.Equals*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Equals\n  nameWithType: AsyncFlowControl.Equals\n- uid: System.Threading.AsyncFlowControl.GetHashCode*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: GetHashCode\n  nameWithType: AsyncFlowControl.GetHashCode\n- uid: System.Threading.AsyncFlowControl.op_Equality*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: op_Equality\n  nameWithType: AsyncFlowControl.op_Equality\n- uid: System.Threading.AsyncFlowControl.op_Inequality*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: op_Inequality\n  nameWithType: AsyncFlowControl.op_Inequality\n- uid: System.Threading.AsyncFlowControl.Undo*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Undo\n  nameWithType: AsyncFlowControl.Undo\n"}