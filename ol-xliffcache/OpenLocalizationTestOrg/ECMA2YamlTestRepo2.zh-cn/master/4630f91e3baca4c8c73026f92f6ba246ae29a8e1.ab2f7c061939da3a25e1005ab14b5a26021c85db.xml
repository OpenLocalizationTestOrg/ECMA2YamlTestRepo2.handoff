{"nodes":[{"pos":[532,707],"content":"Assists interoperation between <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> code.","needQuote":true,"needEscape":true,"source":"Assists interoperation between [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] and [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)] code."},{"pos":[720,3407],"content":"Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.  The proper security checks are performed by those members.       Use this class whenever you need a more specific object based on its HWND.       An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] application. Initialize the WindowInteropHelper with a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window object for the dialog box. You can then get the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window's handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property. The following code example shows how to use WindowInteropHelper when hosting a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] application.       [!code-cs[CorePseudocode#WindowInteropHelper](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)]  [!code-vb[CorePseudocode#WindowInteropHelper](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper)]       Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object. The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method. By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]. Create a WindowInteropHelper with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the WindowInteropHelper to get from HWND to <xref:System.Windows.Interop.HwndSource>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Members of this class allows the caller to have internal access to the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> HWND and the parent HWND of a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt;.","pos":[0,274],"source":"Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>."},{"content":"The proper security checks are performed by those members.","pos":[276,334]},{"content":"Use this class whenever you need a more specific object based on its HWND.","pos":[341,415]},{"content":"An example scenario is if you need to host a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.","pos":[422,639],"source":"       An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] application."},{"content":"Initialize the WindowInteropHelper with a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window object for the dialog box.","pos":[640,791],"source":" Initialize the WindowInteropHelper with a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window object for the dialog box."},{"content":"You can then get the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window's handle (HWND) from the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property and specify the owner for the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window with the &lt;xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt; property.","pos":[792,1180],"source":" You can then get the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window's handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property."},{"content":"The following code example shows how to use WindowInteropHelper when hosting a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.","pos":[1181,1432],"source":" The following code example shows how to use WindowInteropHelper when hosting a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] application."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>CorePseudocode#WindowInteropHelper<ept id=\"p2\">](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>CorePseudocode#WindowInteropHelper<ept id=\"p4\">](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper)</ept><ept id=\"p3\">]</ept>       Another scenario supported by this class is to obtain a &lt;xref:System.Windows.Interop.HwndSource&gt; object from a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt; object.","pos":[1439,1926],"source":"[!code-cs[CorePseudocode#WindowInteropHelper](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)]  [!code-vb[CorePseudocode#WindowInteropHelper](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper)]       Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object."},{"content":"The &lt;xref:System.Windows.Interop.HwndSource&gt; enables direct processing of <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> messages through the &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; method.","pos":[1927,2149],"source":" The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method."},{"content":"By using &lt;xref:System.Windows.Interop.HwndSource&gt; and &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; in place of a &lt;xref:System.Windows.Window&gt; you can still handle messages that have no equivalent or handling in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.","pos":[2150,2444],"source":" By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]."},{"content":"Create a WindowInteropHelper with the &lt;xref:System.Windows.Window&gt; source, then call &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; on the WindowInteropHelper to get from HWND to &lt;xref:System.Windows.Interop.HwndSource&gt;.","pos":[2445,2678],"source":" Create a WindowInteropHelper with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the WindowInteropHelper to get from HWND to <xref:System.Windows.Interop.HwndSource>."}]},{"pos":[4047,4243],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Interop.WindowInteropHelper\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for a specified <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Interop.WindowInteropHelper\"></xref> class for a specified [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] window."},{"pos":[4255,4450],"content":"The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.","needQuote":true,"needEscape":true,"source":"The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] application."},{"pos":[4619,4711],"content":"A <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window object.","needQuote":true,"needEscape":true,"source":"A [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window object."},{"pos":[5215,5283],"content":"Creates the HWND of the window if the HWND has not been created yet.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates the HWND of the window if the HWND has not been created yet.","pos":[0,68]}]},{"pos":[5296,7004],"content":"Use the EnsureHandle method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>. This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.       If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND. If the native window has been created already, the handle of the existing native window is returned.       If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised.       Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the EnsureHandle method is called returns the existing window handle. The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.       Calling the EnsureHandle method more than one time does not create new window handles. Calling the EnsureHandle method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle. A native window is only created when no handle exists when the EnsureHandle method is called.       Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs. For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the EnsureHandle method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the EnsureHandle method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>. This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.       If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND. If the native window has been created already, the handle of the existing native window is returned.       If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised.       Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the EnsureHandle method is called returns the existing window handle. The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.       Calling the EnsureHandle method more than one time does not create new window handles. Calling the EnsureHandle method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle. A native window is only created when no handle exists when the EnsureHandle method is called.       Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs. For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the EnsureHandle method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting.","pos":[0,1698],"nodes":[{"content":"Use the EnsureHandle method when you want to separate window handle (HWND) creation from the actual showing of the managed &lt;xref:System.Windows.Window&gt;.","pos":[0,152],"source":"Use the EnsureHandle method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>."},{"content":"This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.","pos":[153,271]},{"content":"If the native window has not yet been created, this method creates the native window, sets the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property, and returns the HWND.","pos":[278,464],"source":"       If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND."},{"content":"If the native window has been created already, the handle of the existing native window is returned.","pos":[465,565]},{"content":"If the native window is created as a result of calling this method, the &lt;xref:System.Windows.Window.SourceInitialized&gt; event is raised.","pos":[572,707],"source":"       If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised."},{"content":"Querying the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property after the EnsureHandle method is called returns the existing window handle.","pos":[714,871],"source":"       Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the EnsureHandle method is called returns the existing window handle."},{"content":"The visual tree is not attached to the window until after the &lt;xref:System.Windows.Window.Show%2A&gt; method is called.","pos":[872,988],"source":" The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called."},{"content":"Calling the EnsureHandle method more than one time does not create new window handles.","pos":[995,1081]},{"content":"Calling the EnsureHandle method when the handle has already been created by a call to the &lt;xref:System.Windows.Window.Show%2A&gt; method does not create a new window handle.","pos":[1082,1252],"source":" Calling the EnsureHandle method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle."},{"content":"A native window is only created when no handle exists when the EnsureHandle method is called.","pos":[1253,1346]},{"content":"Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs.","pos":[1353,1467]},{"content":"For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the EnsureHandle method is called, the &lt;xref:System.Windows.Window.Topmost%2A&gt; property is not guaranteed to reflect the native setting.","pos":[1468,1698],"source":" For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the EnsureHandle method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting."}]}]},{"pos":[7136,7185],"content":"An <xref:System.IntPtr> that represents the HWND.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IntPtr&gt; that represents the HWND.","pos":[0,49],"source":"An <xref:System.IntPtr> that represents the HWND."}]},{"pos":[7662,7859],"content":"Gets the window handle for a <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window that is used to create this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Interop.WindowInteropHelper\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] window that is used to create this <xref href=\"System.Windows.Interop.WindowInteropHelper\"></xref>."},{"pos":[7970,8064],"content":"The <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window handle (HWND).","needQuote":true,"needEscape":true,"source":"The [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] window handle (HWND)."},{"pos":[8530,8643],"content":"Gets or sets the handle of the <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> owner window.","needQuote":true,"needEscape":true,"source":"Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] owner window."},{"pos":[8655,8858],"content":"You can reparent windows by setting this property. As is true for general [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can reparent windows by setting this property.","pos":[0,50]},{"content":"As is true for general <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> programming, do not reparent windows that are already in use.","pos":[51,203],"source":" As is true for general [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use."}]},{"pos":[8973,9004],"content":"The owner window handle (HWND).","needQuote":true,"needEscape":true,"nodes":[{"content":"The owner window handle (HWND).","pos":[0,31]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Interop.WindowInteropHelper\n  id: WindowInteropHelper\n  children:\n  - System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)\n  - System.Windows.Interop.WindowInteropHelper.EnsureHandle\n  - System.Windows.Interop.WindowInteropHelper.Handle\n  - System.Windows.Interop.WindowInteropHelper.Owner\n  langs:\n  - csharp\n  name: WindowInteropHelper\n  nameWithType: WindowInteropHelper\n  fullName: System.Windows.Interop.WindowInteropHelper\n  type: Class\n  summary: Assists interoperation between [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] and [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)] code.\n  remarks: \"Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.  The proper security checks are performed by those members.  \\n  \\n Use this class whenever you need a more specific object based on its HWND.  \\n  \\n An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] application. Initialize the WindowInteropHelper with a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window object for the dialog box. You can then get the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window's handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property. The following code example shows how to use WindowInteropHelper when hosting a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] application.  \\n  \\n [!code-cs[CorePseudocode#WindowInteropHelper](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)]\\n [!code-vb[CorePseudocode#WindowInteropHelper](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper)]  \\n  \\n Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object. The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method. By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]. Create a WindowInteropHelper with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the WindowInteropHelper to get from HWND to <xref:System.Windows.Interop.HwndSource>.\"\n  syntax:\n    content: public sealed class WindowInteropHelper\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)\n  id: '#ctor(System.Windows.Window)'\n  parent: System.Windows.Interop.WindowInteropHelper\n  langs:\n  - csharp\n  name: WindowInteropHelper(Window)\n  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)\n  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Interop\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Interop.WindowInteropHelper\"></xref> class for a specified [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] window.\n  remarks: The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] application.\n  syntax:\n    content: public WindowInteropHelper (System.Windows.Window window);\n    parameters:\n    - id: window\n      type: System.Windows.Window\n      description: A [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window object.\n  overload: System.Windows.Interop.WindowInteropHelper.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle\n  id: EnsureHandle\n  parent: System.Windows.Interop.WindowInteropHelper\n  langs:\n  - csharp\n  name: EnsureHandle()\n  nameWithType: WindowInteropHelper.EnsureHandle()\n  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Interop\n  summary: Creates the HWND of the window if the HWND has not been created yet.\n  remarks: \"Use the EnsureHandle method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>. This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.  \\n  \\n If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND. If the native window has been created already, the handle of the existing native window is returned.  \\n  \\n If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised.  \\n  \\n Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the EnsureHandle method is called returns the existing window handle. The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.  \\n  \\n Calling the EnsureHandle method more than one time does not create new window handles. Calling the EnsureHandle method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle. A native window is only created when no handle exists when the EnsureHandle method is called.  \\n  \\n Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs. For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the EnsureHandle method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting.\"\n  syntax:\n    content: public IntPtr EnsureHandle ();\n    parameters: []\n    return:\n      type: System.IntPtr\n      description: An <xref:System.IntPtr> that represents the HWND.\n  overload: System.Windows.Interop.WindowInteropHelper.EnsureHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.WindowInteropHelper.Handle\n  id: Handle\n  parent: System.Windows.Interop.WindowInteropHelper\n  langs:\n  - csharp\n  name: Handle\n  nameWithType: WindowInteropHelper.Handle\n  fullName: System.Windows.Interop.WindowInteropHelper.Handle\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Interop\n  summary: Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] window that is used to create this <xref href=\"System.Windows.Interop.WindowInteropHelper\"></xref>.\n  syntax:\n    content: public IntPtr Handle { get; }\n    return:\n      type: System.IntPtr\n      description: The [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] window handle (HWND).\n  overload: System.Windows.Interop.WindowInteropHelper.Handle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.WindowInteropHelper.Owner\n  id: Owner\n  parent: System.Windows.Interop.WindowInteropHelper\n  langs:\n  - csharp\n  name: Owner\n  nameWithType: WindowInteropHelper.Owner\n  fullName: System.Windows.Interop.WindowInteropHelper.Owner\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Interop\n  summary: Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] owner window.\n  remarks: You can reparent windows by setting this property. As is true for general [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use.\n  syntax:\n    content: public IntPtr Owner { get; set; }\n    return:\n      type: System.IntPtr\n      description: The owner window handle (HWND).\n  overload: System.Windows.Interop.WindowInteropHelper.Owner*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: WindowInteropHelper(Window)\n  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)\n  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)\n- uid: System.Windows.Window\n  parent: System.Windows\n  isExternal: false\n  name: Window\n  nameWithType: Window\n  fullName: System.Windows.Window\n- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: EnsureHandle()\n  nameWithType: WindowInteropHelper.EnsureHandle()\n  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Windows.Interop.WindowInteropHelper.Handle\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: Handle\n  nameWithType: WindowInteropHelper.Handle\n  fullName: System.Windows.Interop.WindowInteropHelper.Handle\n- uid: System.Windows.Interop.WindowInteropHelper.Owner\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: Owner\n  nameWithType: WindowInteropHelper.Owner\n  fullName: System.Windows.Interop.WindowInteropHelper.Owner\n- uid: System.Windows.Interop.WindowInteropHelper.#ctor*\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: WindowInteropHelper\n  nameWithType: WindowInteropHelper.WindowInteropHelper\n- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle*\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: EnsureHandle\n  nameWithType: WindowInteropHelper.EnsureHandle\n- uid: System.Windows.Interop.WindowInteropHelper.Handle*\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: Handle\n  nameWithType: WindowInteropHelper.Handle\n- uid: System.Windows.Interop.WindowInteropHelper.Owner*\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: Owner\n  nameWithType: WindowInteropHelper.Owner\n"}