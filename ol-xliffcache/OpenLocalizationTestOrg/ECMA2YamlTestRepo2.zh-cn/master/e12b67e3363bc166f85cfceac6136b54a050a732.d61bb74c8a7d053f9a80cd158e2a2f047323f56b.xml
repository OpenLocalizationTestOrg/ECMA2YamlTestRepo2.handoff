{"nodes":[{"pos":[806,994],"content":"Binds a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> (or another  &lt;xref:System.Windows.Input.ICommand&gt; implementation).","needQuote":true,"needEscape":true,"source":"Binds a <xref href=\"System.Windows.Input.KeyGesture\"></xref> to a <xref href=\"System.Windows.Input.RoutedCommand\"></xref> (or another  <xref:System.Windows.Input.ICommand> implementation)."},{"pos":[1007,4817],"content":"A KeyBinding associates a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>. <xref:System.Windows.Input.RoutedCommand> is the primary implementation of the <xref:System.Windows.Input.ICommand> interface for the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] commanding system .  In general, when the <xref:System.Windows.Input.KeyGesture> is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> value.  For more information on commanding, see the [Commanding Overview](~/add/includes/ajax-current-ext-md.md).       With the exception of the function keys and the numeric keypad keys, a valid <xref:System.Windows.Input.KeyGesture> must contain exactly one <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  Function keys and numeric keypad keys do not require a modifier key in order to be a valid <xref:System.Windows.Input.KeyGesture>. It is possible to specify an invalid <xref:System.Windows.Input.KeyGesture> and a KeyBinding with an invalid associated gesture, either through [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] or code. For instance, there is no validation that prevents creating and binding a <xref:System.Windows.Input.KeyGesture> that contains only a nonfunction key, or only modifiers but no key. Such a KeyBinding will never attempt to invoke its associated command.       When defining a KeyBinding in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a KeyBinding in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the KeyBinding element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the KeyBinding element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.       A KeyBinding can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> on the <xref:System.Windows.Input.CommandManager> class. The most typical way to define a KeyBinding is within the control template, setting the <xref:System.Windows.UIElement.InputBindings%2A> property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] by declaring one or more <xref:System.Windows.Input.MouseBinding> or KeyBinding elements.","needQuote":false,"needEscape":true,"nodes":[{"content":"A KeyBinding associates a &lt;xref:System.Windows.Input.KeyGesture&gt; with a &lt;xref:System.Windows.Input.ICommand&gt;, such as a &lt;xref:System.Windows.Input.RoutedCommand&gt;.","pos":[0,162],"source":"A KeyBinding associates a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>."},{"content":"&lt;xref:System.Windows.Input.RoutedCommand&gt; is the primary implementation of the &lt;xref:System.Windows.Input.ICommand&gt; interface for the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> commanding system .","pos":[163,392],"source":" <xref:System.Windows.Input.RoutedCommand> is the primary implementation of the <xref:System.Windows.Input.ICommand> interface for the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] commanding system ."},{"content":"In general, when the &lt;xref:System.Windows.Input.KeyGesture&gt; is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the &lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt; value.","pos":[394,656],"source":"  In general, when the <xref:System.Windows.Input.KeyGesture> is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> value."},{"content":"For more information on commanding, see the <bpt id=\"p1\">[</bpt>Commanding Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[658,763],"source":"  For more information on commanding, see the [Commanding Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"With the exception of the function keys and the numeric keypad keys, a valid &lt;xref:System.Windows.Input.KeyGesture&gt; must contain exactly one &lt;xref:System.Windows.Input.Key&gt; and one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.","pos":[770,1000],"source":"       With the exception of the function keys and the numeric keypad keys, a valid <xref:System.Windows.Input.KeyGesture> must contain exactly one <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"Function keys and numeric keypad keys do not require a modifier key in order to be a valid &lt;xref:System.Windows.Input.KeyGesture&gt;.","pos":[1002,1132],"source":"  Function keys and numeric keypad keys do not require a modifier key in order to be a valid <xref:System.Windows.Input.KeyGesture>."},{"content":"It is possible to specify an invalid &lt;xref:System.Windows.Input.KeyGesture&gt; and a KeyBinding with an invalid associated gesture, either through <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> or code.","pos":[1133,1351],"source":" It is possible to specify an invalid <xref:System.Windows.Input.KeyGesture> and a KeyBinding with an invalid associated gesture, either through [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] or code."},{"content":"For instance, there is no validation that prevents creating and binding a &lt;xref:System.Windows.Input.KeyGesture&gt; that contains only a nonfunction key, or only modifiers but no key.","pos":[1352,1532],"source":" For instance, there is no validation that prevents creating and binding a <xref:System.Windows.Input.KeyGesture> that contains only a nonfunction key, or only modifiers but no key."},{"content":"Such a KeyBinding will never attempt to invoke its associated command.","pos":[1533,1603]},{"content":"When defining a KeyBinding in <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the &lt;xref:System.Windows.Input.KeyGesture&gt;.","pos":[1610,1777],"source":"       When defining a KeyBinding in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>."},{"content":"The first way to establish a KeyBinding in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> is to define the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute of the KeyBinding element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\".","pos":[1778,2085],"source":" The first way to establish a KeyBinding in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the KeyBinding element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\"."},{"content":"The second way is to define the &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt; attribute and the &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt; attributes of the KeyBinding element.","pos":[2086,2271],"source":" The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the KeyBinding element."},{"content":"Both ways of setting the &lt;xref:System.Windows.Input.KeyGesture&gt; are equivalent and modify the same underlying object, but there will be a conflict if both are used.","pos":[2272,2436],"source":" Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used."},{"content":"In the case when the &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;, &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;, and the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attributes are all set, the attribute which is defined last will be used for the &lt;xref:System.Windows.Input.KeyGesture&gt;.","pos":[2438,2737],"source":"  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>."},{"content":"You can potentially have situations where for example a &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt; set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.","pos":[2738,2953],"source":" You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same."},{"content":"In general, it is recommended that you use only the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute from <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.","pos":[2954,3274],"source":" In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization."},{"content":"A KeyBinding can be defined on a specific object or at the class level by registering a &lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt; on the &lt;xref:System.Windows.Input.CommandManager&gt; class.","pos":[3281,3497],"source":"       A KeyBinding can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> on the <xref:System.Windows.Input.CommandManager> class."},{"content":"The most typical way to define a KeyBinding is within the control template, setting the &lt;xref:System.Windows.UIElement.InputBindings%2A&gt; property in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> by declaring one or more &lt;xref:System.Windows.Input.MouseBinding&gt; or KeyBinding elements.","pos":[3498,3802],"source":" The most typical way to define a KeyBinding is within the control template, setting the <xref:System.Windows.UIElement.InputBindings%2A> property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] by declaring one or more <xref:System.Windows.Input.MouseBinding> or KeyBinding elements."}]},{"pos":[9187,9280],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class."},{"pos":[9958,10165],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.Windows.Input.ICommand&gt; and <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class using the specified <xref:System.Windows.Input.ICommand> and <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"pos":[10384,10424],"content":"The command to associate with <ph id=\"ph1\">`gesture`</ph>.","needQuote":true,"needEscape":true,"source":"The command to associate with `gesture`."},{"pos":[10506,10554],"content":"The key combination to associate with <ph id=\"ph1\">`command`</ph>.","needQuote":true,"needEscape":true,"source":"The key combination to associate with `command`."},{"pos":[10722,10831],"content":"<ph id=\"ph1\">&lt;code&gt;command&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;gesture&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>command</code> or <code>gesture</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11449,11806],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.Windows.Input.ICommand&gt; and the specified <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> which will be converted into a <bpt id=\"p4\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class using the specified <xref:System.Windows.Input.ICommand> and the specified <xref href=\"System.Windows.Input.Key\"></xref> and <xref href=\"System.Windows.Input.ModifierKeys\"></xref> which will be converted into a <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"pos":[12059,12081],"content":"The command to invoke.","needQuote":true,"needEscape":true,"nodes":[{"content":"The command to invoke.","pos":[0,22]}]},{"pos":[12152,12192],"content":"The key to be associated with <ph id=\"ph1\">`command`</ph>.","needQuote":true,"needEscape":true,"source":"The key to be associated with `command`."},{"pos":[12278,12324],"content":"The modifiers to be associated with <ph id=\"ph1\">`command`</ph>.","needQuote":true,"needEscape":true,"source":"The modifiers to be associated with `command`."},{"pos":[12798,12876],"content":"Creates an instance of a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates an instance of a <xref href=\"System.Windows.Input.KeyBinding\"></xref>."},{"pos":[13054,13069],"content":"The new object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new object.","pos":[0,15]}]},{"pos":[13497,13596],"content":"Gets or sets the gesture associated with this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the gesture associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>."},{"pos":[13608,13822],"content":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.","needQuote":true,"needEscape":true,"nodes":[{"content":"With the exception of the function keys and the numeric keypad keys, a &lt;xref:System.Windows.Input.KeyGesture&gt; must contain a &lt;xref:System.Windows.Input.Key&gt; and one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.","pos":[0,214],"source":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>."}]},{"pos":[14750,14850],"content":"The key sequence. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key sequence.","pos":[0,17]},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[18,100],"source":" The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[15012,15121],"content":"the value <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">gesture</ph><ept id=\"p1\">&lt;/code&gt;</ept> is being set to is not a <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"the value <code>gesture</code> is being set to is not a <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"pos":[15448,15645],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.Key\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> associated with this <bpt id=\"p3\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Windows.Input.Key\"></xref> of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>."},{"pos":[15658,17533],"content":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.       When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\". The second way is to define the Key attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the Key, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a Key set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.","needQuote":false,"needEscape":true,"nodes":[{"content":"With the exception of the function keys and the numeric keypad keys, a &lt;xref:System.Windows.Input.KeyGesture&gt; must contain a &lt;xref:System.Windows.Input.Key&gt; and one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.","pos":[0,214],"source":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"When defining a &lt;xref:System.Windows.Input.KeyBinding&gt; in <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the &lt;xref:System.Windows.Input.KeyGesture&gt;.","pos":[221,416],"source":"       When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>."},{"content":"The first way to establish a &lt;xref:System.Windows.Input.KeyBinding&gt; in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> is to define the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute of the &lt;xref:System.Windows.Input.KeyBinding&gt; element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\".","pos":[417,780],"source":" The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\"."},{"content":"The second way is to define the Key attribute and the &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt; attributes of the &lt;xref:System.Windows.Input.KeyBinding&gt; element.","pos":[781,952],"source":" The second way is to define the Key attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element."},{"content":"Both ways of setting the &lt;xref:System.Windows.Input.KeyGesture&gt; are equivalent and modify the same underlying object, but there will be a conflict if both are used.","pos":[953,1117],"source":" Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used."},{"content":"In the case when the Key, &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;, and the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attributes are all set, the attribute which is defined last will be used for the &lt;xref:System.Windows.Input.KeyGesture&gt;.","pos":[1119,1376],"source":"  In the case when the Key, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>."},{"content":"You can potentially have situations where for example a Key set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.","pos":[1377,1550]},{"content":"In general, it is recommended that you use only the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute from <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.","pos":[1551,1871],"source":" In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization."}]},{"pos":[17676,17817],"content":"The key part of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>. The default value is <xref href=\"System.Windows.Input.Key\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key part of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,73],"source":"The key part of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.Key\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[74,141],"source":" The default value is <xref href=\"System.Windows.Input.Key\"></xref>."}]},{"pos":[18247,18326],"content":"Identifies the <xref:System.Windows.Input.KeyBinding.Key*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Input.KeyBinding.Key*&gt; dependency property.","pos":[0,79],"source":"Identifies the <xref:System.Windows.Input.KeyBinding.Key*> dependency property."}]},{"pos":[18497,18509],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18883,19089],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> associated with this <bpt id=\"p3\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Windows.Input.ModifierKeys\"></xref> of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>."},{"pos":[19102,21397],"content":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.       When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the Modifiers attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, Modifiers, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.      <a name=\"xamlAttributeUsage_Modifiers\"></a>    ## XAML Attribute Usage      ```   <object Modifiers=\"oneOrMoreModifierKeys\"/>      ```      <a name=\"xamlValues_Modifiers\"></a>    ## XAML Values    *oneOrMoreModifierKeys*    One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \"+\" character.","needQuote":false,"needEscape":true,"nodes":[{"content":"With the exception of the function keys and the numeric keypad keys, a &lt;xref:System.Windows.Input.KeyGesture&gt; must contain a &lt;xref:System.Windows.Input.Key&gt; and one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.","pos":[0,214],"source":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"When defining a &lt;xref:System.Windows.Input.KeyBinding&gt; in <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the &lt;xref:System.Windows.Input.KeyGesture&gt;.","pos":[221,416],"source":"       When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>."},{"content":"The first way to establish a &lt;xref:System.Windows.Input.KeyBinding&gt; in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> is to define the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute of the &lt;xref:System.Windows.Input.KeyBinding&gt; element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\".","pos":[417,780],"source":" The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\"."},{"content":"The second way is to define the &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt; attribute and the Modifiers attributes of the &lt;xref:System.Windows.Input.KeyBinding&gt; element.","pos":[781,952],"source":" The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the Modifiers attributes of the <xref:System.Windows.Input.KeyBinding> element."},{"content":"Both ways of setting the &lt;xref:System.Windows.Input.KeyGesture&gt; are equivalent and modify the same underlying object, but there will be a conflict if both are used.","pos":[953,1117],"source":" Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used."},{"content":"In the case when the &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;, Modifiers, and the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attributes are all set, the attribute which is defined last will be used for the &lt;xref:System.Windows.Input.KeyGesture&gt;.","pos":[1119,1376],"source":"  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, Modifiers, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>."},{"content":"You can potentially have situations where for example a &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt; set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.","pos":[1377,1592],"source":" You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same."},{"content":"In general, it is recommended that you use only the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute from <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.","pos":[1593,1913],"source":" In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Modifiers\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object Modifiers=\"oneOrMoreModifierKeys\"/&gt;      ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_Modifiers\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>oneOrMoreModifierKeys<ept id=\"p3\">*</ept>    One or more modifier keys, defined by the &lt;xref:System.Windows.Input.ModifierKeys&gt; enumeration, delimited with a \"+\" character.","pos":[1919,2270],"source":"<a name=\"xamlAttributeUsage_Modifiers\"></a>    ## XAML Attribute Usage      ```   <object Modifiers=\"oneOrMoreModifierKeys\"/>      ```      <a name=\"xamlValues_Modifiers\"></a>    ## XAML Values    *oneOrMoreModifierKeys*    One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \"+\" character."}]},{"pos":[21564,21720],"content":"The modifier keys of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>.  The default value is <xref href=\"System.Windows.Input.ModifierKeys\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The modifier keys of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,78],"source":"The modifier keys of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[80,156],"source":"  The default value is <xref href=\"System.Windows.Input.ModifierKeys\"></xref>."}]},{"pos":[22186,22271],"content":"Identifies the <xref:System.Windows.Input.KeyBinding.Modifiers*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Input.KeyBinding.Modifiers*&gt; dependency property.","pos":[0,85],"source":"Identifies the <xref:System.Windows.Input.KeyBinding.Modifiers*> dependency property."}]},{"pos":[22448,22460],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.KeyBinding\n  id: KeyBinding\n  children:\n  - System.Windows.Input.KeyBinding.#ctor\n  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)\n  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  - System.Windows.Input.KeyBinding.CreateInstanceCore\n  - System.Windows.Input.KeyBinding.Gesture\n  - System.Windows.Input.KeyBinding.Key\n  - System.Windows.Input.KeyBinding.KeyProperty\n  - System.Windows.Input.KeyBinding.Modifiers\n  - System.Windows.Input.KeyBinding.ModifiersProperty\n  langs:\n  - csharp\n  name: KeyBinding\n  nameWithType: KeyBinding\n  fullName: System.Windows.Input.KeyBinding\n  type: Class\n  summary: Binds a <xref href=\"System.Windows.Input.KeyGesture\"></xref> to a <xref href=\"System.Windows.Input.RoutedCommand\"></xref> (or another  <xref:System.Windows.Input.ICommand> implementation).\n  remarks: \"A KeyBinding associates a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>. <xref:System.Windows.Input.RoutedCommand> is the primary implementation of the <xref:System.Windows.Input.ICommand> interface for the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] commanding system .  In general, when the <xref:System.Windows.Input.KeyGesture> is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> value.  For more information on commanding, see the [Commanding Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n With the exception of the function keys and the numeric keypad keys, a valid <xref:System.Windows.Input.KeyGesture> must contain exactly one <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  Function keys and numeric keypad keys do not require a modifier key in order to be a valid <xref:System.Windows.Input.KeyGesture>. It is possible to specify an invalid <xref:System.Windows.Input.KeyGesture> and a KeyBinding with an invalid associated gesture, either through [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] or code. For instance, there is no validation that prevents creating and binding a <xref:System.Windows.Input.KeyGesture> that contains only a nonfunction key, or only modifiers but no key. Such a KeyBinding will never attempt to invoke its associated command.  \\n  \\n When defining a KeyBinding in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a KeyBinding in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the KeyBinding element, which enables a syntax to specify keys and modifiers as a single string, for example \\\"CTRL+P\\\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the KeyBinding element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.  \\n  \\n A KeyBinding can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> on the <xref:System.Windows.Input.CommandManager> class. The most typical way to define a KeyBinding is within the control template, setting the <xref:System.Windows.UIElement.InputBindings%2A> property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] by declaring one or more <xref:System.Windows.Input.MouseBinding> or KeyBinding elements.\"\n  example:\n  - \"The following example creates a KeyBinding and adds it to the <xref:System.Windows.Input.InputBindingCollection> of the root window.  \\n  \\n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \\n  \\n [!code-cs[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]\\n [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerkeybindingcodebehind)]\"\n  syntax:\n    content: 'public class KeyBinding : System.Windows.Input.InputBinding'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Freezable\n  - System.Windows.Input.InputBinding\n  implements: []\n  inheritedMembers:\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Freezable.CanFreeze\n  - System.Windows.Freezable.Changed\n  - System.Windows.Freezable.Clone\n  - System.Windows.Freezable.CloneCurrentValue\n  - System.Windows.Freezable.CreateInstance\n  - System.Windows.Freezable.Freeze\n  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  - System.Windows.Freezable.FreezeCore(System.Boolean)\n  - System.Windows.Freezable.GetAsFrozen\n  - System.Windows.Freezable.GetCurrentValueAsFrozen\n  - System.Windows.Freezable.IsFrozen\n  - System.Windows.Freezable.OnChanged\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.Freezable.ReadPreamble\n  - System.Windows.Freezable.WritePostscript\n  - System.Windows.Freezable.WritePreamble\n  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.Command\n  - System.Windows.Input.InputBinding.CommandParameter\n  - System.Windows.Input.InputBinding.CommandParameterProperty\n  - System.Windows.Input.InputBinding.CommandProperty\n  - System.Windows.Input.InputBinding.CommandTarget\n  - System.Windows.Input.InputBinding.CommandTargetProperty\n  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyBinding.#ctor\n  id: '#ctor'\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: KeyBinding()\n  nameWithType: KeyBinding.KeyBinding()\n  fullName: System.Windows.Input.KeyBinding.KeyBinding()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class.\n  syntax:\n    content: public KeyBinding ();\n    parameters: []\n  overload: System.Windows.Input.KeyBinding.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)\n  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)'\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: KeyBinding(ICommand,KeyGesture)\n  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)\n  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class using the specified <xref:System.Windows.Input.ICommand> and <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  syntax:\n    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to associate with `gesture`.\n    - id: gesture\n      type: System.Windows.Input.KeyGesture\n      description: The key combination to associate with `command`.\n  overload: System.Windows.Input.KeyBinding.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>command</code> or <code>gesture</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: KeyBinding(ICommand,Key,ModifierKeys)\n  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)\n  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class using the specified <xref:System.Windows.Input.ICommand> and the specified <xref href=\"System.Windows.Input.Key\"></xref> and <xref href=\"System.Windows.Input.ModifierKeys\"></xref> which will be converted into a <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  syntax:\n    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to invoke.\n    - id: key\n      type: System.Windows.Input.Key\n      description: The key to be associated with `command`.\n    - id: modifiers\n      type: System.Windows.Input.ModifierKeys\n      description: The modifiers to be associated with `command`.\n  overload: System.Windows.Input.KeyBinding.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyBinding.CreateInstanceCore\n  id: CreateInstanceCore\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: CreateInstanceCore()\n  nameWithType: KeyBinding.CreateInstanceCore()\n  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Creates an instance of a <xref href=\"System.Windows.Input.KeyBinding\"></xref>.\n  syntax:\n    content: protected override System.Windows.Freezable CreateInstanceCore ();\n    parameters: []\n    return:\n      type: System.Windows.Freezable\n      description: The new object.\n  overload: System.Windows.Input.KeyBinding.CreateInstanceCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyBinding.Gesture\n  id: Gesture\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: Gesture\n  nameWithType: KeyBinding.Gesture\n  fullName: System.Windows.Input.KeyBinding.Gesture\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the gesture associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>.\n  remarks: With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.\n  example:\n  - \"The following example shows how to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand> using a <xref:System.Windows.Input.KeyBinding> (the markup and code examples specify different keys but are otherwise equivalent).  \\n  \\n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \\n  \\n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]\"\n  syntax:\n    content: public override System.Windows.Input.InputGesture Gesture { get; set; }\n    return:\n      type: System.Windows.Input.InputGesture\n      description: The key sequence. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.Input.KeyBinding.Gesture*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: the value <code>gesture</code> is being set to is not a <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyBinding.Key\n  id: Key\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: Key\n  nameWithType: KeyBinding.Key\n  fullName: System.Windows.Input.KeyBinding.Key\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the <xref href=\"System.Windows.Input.Key\"></xref> of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>.\n  remarks: \"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  \\n  \\n When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \\\"CTRL+P\\\". The second way is to define the Key attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the Key, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a Key set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.\"\n  syntax:\n    content: public System.Windows.Input.Key Key { get; set; }\n    return:\n      type: System.Windows.Input.Key\n      description: The key part of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>. The default value is <xref href=\"System.Windows.Input.Key\"></xref>.\n  overload: System.Windows.Input.KeyBinding.Key*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyBinding.KeyProperty\n  id: KeyProperty\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: KeyProperty\n  nameWithType: KeyBinding.KeyProperty\n  fullName: System.Windows.Input.KeyBinding.KeyProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref:System.Windows.Input.KeyBinding.Key*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty KeyProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyBinding.Modifiers\n  id: Modifiers\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: Modifiers\n  nameWithType: KeyBinding.Modifiers\n  fullName: System.Windows.Input.KeyBinding.Modifiers\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the <xref href=\"System.Windows.Input.ModifierKeys\"></xref> of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>.\n  remarks: \"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  \\n  \\n When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \\\"CTRL+P\\\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the Modifiers attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, Modifiers, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.  \\n  \\n<a name=\\\"xamlAttributeUsage_Modifiers\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object Modifiers=\\\"oneOrMoreModifierKeys\\\"/>  \\n  \\n```  \\n  \\n<a name=\\\"xamlValues_Modifiers\\\"></a>   \\n## XAML Values  \\n *oneOrMoreModifierKeys*  \\n One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \\\"+\\\" character.\"\n  syntax:\n    content: public System.Windows.Input.ModifierKeys Modifiers { get; set; }\n    return:\n      type: System.Windows.Input.ModifierKeys\n      description: The modifier keys of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>.  The default value is <xref href=\"System.Windows.Input.ModifierKeys\"></xref>.\n  overload: System.Windows.Input.KeyBinding.Modifiers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyBinding.ModifiersProperty\n  id: ModifiersProperty\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: ModifiersProperty\n  nameWithType: KeyBinding.ModifiersProperty\n  fullName: System.Windows.Input.KeyBinding.ModifiersProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref:System.Windows.Input.KeyBinding.Modifiers*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ModifiersProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Input.InputBinding\n  isExternal: false\n  name: System.Windows.Input.InputBinding\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Windows.Input.KeyBinding.#ctor\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: KeyBinding()\n  nameWithType: KeyBinding.KeyBinding()\n  fullName: System.Windows.Input.KeyBinding.KeyBinding()\n- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: KeyBinding(ICommand,KeyGesture)\n  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)\n  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)\n- uid: System.Windows.Input.ICommand\n  parent: System.Windows.Input\n  isExternal: true\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n- uid: System.Windows.Input.KeyGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyGesture\n  nameWithType: KeyGesture\n  fullName: System.Windows.Input.KeyGesture\n- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: KeyBinding(ICommand,Key,ModifierKeys)\n  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)\n  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)\n- uid: System.Windows.Input.Key\n  parent: System.Windows.Input\n  isExternal: false\n  name: Key\n  nameWithType: Key\n  fullName: System.Windows.Input.Key\n- uid: System.Windows.Input.ModifierKeys\n  parent: System.Windows.Input\n  isExternal: false\n  name: ModifierKeys\n  nameWithType: ModifierKeys\n  fullName: System.Windows.Input.ModifierKeys\n- uid: System.Windows.Input.KeyBinding.CreateInstanceCore\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: CreateInstanceCore()\n  nameWithType: KeyBinding.CreateInstanceCore()\n  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: false\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.Windows.Input.KeyBinding.Gesture\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Gesture\n  nameWithType: KeyBinding.Gesture\n  fullName: System.Windows.Input.KeyBinding.Gesture\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture\n- uid: System.Windows.Input.KeyBinding.Key\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Key\n  nameWithType: KeyBinding.Key\n  fullName: System.Windows.Input.KeyBinding.Key\n- uid: System.Windows.Input.KeyBinding.KeyProperty\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: KeyProperty\n  nameWithType: KeyBinding.KeyProperty\n  fullName: System.Windows.Input.KeyBinding.KeyProperty\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.Input.KeyBinding.Modifiers\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Modifiers\n  nameWithType: KeyBinding.Modifiers\n  fullName: System.Windows.Input.KeyBinding.Modifiers\n- uid: System.Windows.Input.KeyBinding.ModifiersProperty\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: ModifiersProperty\n  nameWithType: KeyBinding.ModifiersProperty\n  fullName: System.Windows.Input.KeyBinding.ModifiersProperty\n- uid: System.Windows.Input.KeyBinding.#ctor*\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: KeyBinding\n  nameWithType: KeyBinding.KeyBinding\n- uid: System.Windows.Input.KeyBinding.CreateInstanceCore*\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: CreateInstanceCore\n  nameWithType: KeyBinding.CreateInstanceCore\n- uid: System.Windows.Input.KeyBinding.Gesture*\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Gesture\n  nameWithType: KeyBinding.Gesture\n- uid: System.Windows.Input.KeyBinding.Key*\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Key\n  nameWithType: KeyBinding.Key\n- uid: System.Windows.Input.KeyBinding.Modifiers*\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Modifiers\n  nameWithType: KeyBinding.Modifiers\n"}