{"nodes":[{"pos":[6502,6540],"content":"Represents an in-memory cache of data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an in-memory cache of data.","pos":[0,38]}]},{"pos":[6553,10134],"content":"The DataSet, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture. The DataSet consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects. You can also enforce data integrity in the DataSet by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects. For further details about working with DataSet objects, see [DataSets, DataTables, and DataViews](~/add/includes/ajax-current-ext-md.md).       Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy. The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property. When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive. For example, if one <xref:System.Data.DataTable> is named \"mydatatable\" and another is named \"Mydatatable\", a string used to search for one of the tables is regarded as case sensitive. However, if \"mydatatable\" exists and \"Mydatatable\" does not, the search string is regarded as case insensitive. For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](~/add/includes/ajax-current-ext-md.md).       A DataSet can read and write data and schema as XML documents. The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled. You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method. To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method.       In a typical multiple-tier implementation, the steps for creating and refreshing a DataSet, and in turn, updating the original data are to:      1.  Build and fill each <xref:System.Data.DataTable> in a DataSet with data from a data source using a <xref:System.Data.Common.DataAdapter>.      2.  Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects.      3.  Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second DataSet that features only the changes to the data.      4.  Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second DataSet as an argument.      5.  Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second DataSet into the first.      6.  Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the DataSet. Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes.      > [!NOTE] >  The DataSet and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting. These are the only ADO.NET objects that can be remoted.      > [!NOTE] >  Classes inherited from DataSet are not finalized by the garbage collector, because the finalizer has been suppressed in DataSet. The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector.","needQuote":false,"needEscape":true,"nodes":[{"content":"The DataSet, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture.","pos":[0,128]},{"content":"The DataSet consists of a collection of &lt;xref:System.Data.DataTable&gt; objects that you can relate to each other with &lt;xref:System.Data.DataRelation&gt; objects.","pos":[129,285],"source":" The DataSet consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects."},{"content":"You can also enforce data integrity in the DataSet by using the &lt;xref:System.Data.UniqueConstraint&gt; and &lt;xref:System.Data.ForeignKeyConstraint&gt; objects.","pos":[286,438],"source":" You can also enforce data integrity in the DataSet by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects."},{"content":"For further details about working with DataSet objects, see <bpt id=\"p1\">[</bpt>DataSets, DataTables, and DataViews<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[439,576],"source":" For further details about working with DataSet objects, see [DataSets, DataTables, and DataViews](~/add/includes/ajax-current-ext-md.md)."},{"content":"Whereas &lt;xref:System.Data.DataTable&gt; objects contain the data, the &lt;xref:System.Data.DataRelationCollection&gt; allows you to navigate though the table hierarchy.","pos":[583,742],"source":"       Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy."},{"content":"The tables are contained in a &lt;xref:System.Data.DataTableCollection&gt; accessed through the &lt;xref:System.Data.DataSet.Tables%2A&gt; property.","pos":[743,879],"source":" The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property."},{"content":"When accessing &lt;xref:System.Data.DataTable&gt; objects, note that they are conditionally case sensitive.","pos":[880,981],"source":" When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive."},{"content":"For example, if one &lt;xref:System.Data.DataTable&gt; is named \"mydatatable\" and another is named \"Mydatatable\", a string used to search for one of the tables is regarded as case sensitive.","pos":[982,1166],"source":" For example, if one <xref:System.Data.DataTable> is named \"mydatatable\" and another is named \"Mydatatable\", a string used to search for one of the tables is regarded as case sensitive."},{"content":"However, if \"mydatatable\" exists and \"Mydatatable\" does not, the search string is regarded as case insensitive.","pos":[1167,1278]},{"content":"For more information about working with &lt;xref:System.Data.DataTable&gt; objects, see <bpt id=\"p1\">[</bpt>Creating a DataTable<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1279,1423],"source":" For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](~/add/includes/ajax-current-ext-md.md)."},{"content":"A DataSet can read and write data and schema as XML documents.","pos":[1430,1492]},{"content":"The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled.","pos":[1493,1614]},{"content":"You can save the schema as an XML schema with the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method, and both schema and data can be saved using the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; method.","pos":[1615,1812],"source":" You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method."},{"content":"To read an XML document that includes both schema and data, use the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method.","pos":[1813,1926],"source":" To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method."},{"content":"In a typical multiple-tier implementation, the steps for creating and refreshing a DataSet, and in turn, updating the original data are to:      1.","pos":[1933,2080]},{"content":"Build and fill each &lt;xref:System.Data.DataTable&gt; in a DataSet with data from a data source using a &lt;xref:System.Data.Common.DataAdapter&gt;.","pos":[2082,2219],"source":"  Build and fill each <xref:System.Data.DataTable> in a DataSet with data from a data source using a <xref:System.Data.Common.DataAdapter>."},{"content":"2.","pos":[2225,2227]},{"content":"Change the data in individual &lt;xref:System.Data.DataTable&gt; objects by adding, updating, or deleting &lt;xref:System.Data.DataRow&gt; objects.","pos":[2229,2364],"source":"  Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects."},{"content":"3.","pos":[2370,2372]},{"content":"Invoke the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method to create a second DataSet that features only the changes to the data.","pos":[2374,2503],"source":"  Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second DataSet that features only the changes to the data."},{"content":"4.","pos":[2509,2511]},{"content":"Call the &lt;xref:System.Data.Common.DataAdapter.Update%2A&gt; method of the &lt;xref:System.Data.Common.DataAdapter&gt;, passing the second DataSet as an argument.","pos":[2513,2665],"source":"  Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second DataSet as an argument."},{"content":"5.","pos":[2671,2673]},{"content":"Invoke the &lt;xref:System.Data.DataSet.Merge%2A&gt; method to merge the changes from the second DataSet into the first.","pos":[2675,2789],"source":"  Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second DataSet into the first."},{"content":"6.","pos":[2795,2797]},{"content":"Invoke the &lt;xref:System.Data.DataSet.AcceptChanges%2A&gt; on the DataSet.","pos":[2799,2869],"source":"  Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the DataSet."},{"content":"Alternatively, invoke &lt;xref:System.Data.DataSet.RejectChanges%2A&gt; to cancel the changes.","pos":[2870,2958],"source":" Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The DataSet and &lt;xref:System.Data.DataTable&gt; objects inherit from &lt;xref:System.ComponentModel.MarshalByValueComponent&gt;, and support the &lt;xref:System.Runtime.Serialization.ISerializable&gt; interface for remoting.","pos":[2964,3186],"source":"      > [!NOTE] >  The DataSet and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting."},{"content":"These are the only ADO.NET objects that can be remoted.","pos":[3187,3242]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Classes inherited from DataSet are not finalized by the garbage collector, because the finalizer has been suppressed in DataSet.","pos":[3248,3389],"source":"      > [!NOTE] >  Classes inherited from DataSet are not finalized by the garbage collector, because the finalizer has been suppressed in DataSet."},{"content":"The derived class can call the &lt;xref:System.GC.ReRegisterForFinalize%2A&gt; method in its constructor to allow the class to be finalized by the garbage collector.","pos":[3390,3549],"source":" The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector."}]},{"pos":[12424,12505],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.DataSet\"></xref> class."},{"pos":[12518,12907],"content":"This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, \"NewDataSet,\" for the new instance.       A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition.","needQuote":false,"needEscape":true,"nodes":[{"content":"This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, \"NewDataSet,\" for the new instance.       A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition.","pos":[0,385],"nodes":[{"content":"This implementation of the &lt;xref:System.Data.DataSet&gt; constructor takes no parameters, and creates a default name, \"NewDataSet,\" for the new instance.","pos":[0,150],"source":"This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, \"NewDataSet,\" for the new instance."},{"content":"A name for the &lt;xref:System.Data.DataSet&gt; is required to ensure that the XML representation of the &lt;xref:System.Data.DataSet&gt; always has a name for the document element, which is the highest-level element in a schema definition.","pos":[157,385],"source":"       A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition."}]}]},{"pos":[13637,13736],"content":"Initializes a new instance of a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the given name.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of a <xref href=\"System.Data.DataSet\"></xref> class with the given name."},{"pos":[13748,13976],"content":"A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name for the &lt;xref:System.Data.DataSet&gt; is required to ensure that the XML representation of the &lt;xref:System.Data.DataSet&gt; always has a name for the document element, which is the highest level element in a schema definition.","pos":[0,228],"source":"A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition."}]},{"pos":[14388,14445],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[15092,15228],"content":"Initializes a new instance of a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that has the given serialization information and context.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of a <xref href=\"System.Data.DataSet\"></xref> class that has the given serialization information and context."},{"pos":[15489,15543],"content":"The data needed to serialize or deserialize an object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data needed to serialize or deserialize an object.","pos":[0,54]}]},{"pos":[15639,15695],"content":"The source and destination of a given serialized stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source and destination of a given serialized stream.","pos":[0,56]}]},{"pos":[16396,16477],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.DataSet\"></xref> class."},{"pos":[16760,16839],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object."},{"pos":[16935,16999],"content":"The <xref:System.Runtime.Serialization.StreamingContext> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; object.","pos":[0,64],"source":"The <xref:System.Runtime.Serialization.StreamingContext> object."}]},{"pos":[17072,17090],"content":"The boolean value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The boolean value.","pos":[0,18]}]},{"pos":[17474,17620],"content":"Commits all the changes made to this <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> since it was loaded or since the last time AcceptChanges was called.","needQuote":true,"needEscape":true,"source":"Commits all the changes made to this <xref href=\"System.Data.DataSet\"></xref> since it was loaded or since the last time AcceptChanges was called."},{"pos":[17633,19445],"content":"Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have AcceptChanges methods. Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called. Similarly, invoking AcceptChanges on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>. In this manner, you have multiple levels at which the method can be invoked. Calling the AcceptChanges of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.       When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully. The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.       If the `DataSet` contains <xref:System.Data.ForeignKeyConstraint> objects, invoking the `AcceptChanges` method also causes the <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> to be enforced.      > [!NOTE] >  `AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify). They are not applicable to schema or structural changes.   >    >  Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter. In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead. See [Updating Data Sources with DataAdapters](http://msdn.microsoft.com/library/33y2221y.aspx) for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"Both the &lt;xref:System.Data.DataRow&gt; and &lt;xref:System.Data.DataTable&gt; classes have AcceptChanges methods.","pos":[0,104],"source":"Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have AcceptChanges methods."},{"content":"Calling &lt;xref:System.Data.DataTable.AcceptChanges%2A&gt; at the &lt;xref:System.Data.DataTable&gt; level causes the &lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; method for each &lt;xref:System.Data.DataRow&gt; to be called.","pos":[105,312],"source":" Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called."},{"content":"Similarly, invoking AcceptChanges on the &lt;xref:System.Data.DataSet&gt; causes &lt;xref:System.Data.DataTable.AcceptChanges%2A&gt; to be called on each table within the &lt;xref:System.Data.DataSet&gt;.","pos":[313,499],"source":" Similarly, invoking AcceptChanges on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>."},{"content":"In this manner, you have multiple levels at which the method can be invoked.","pos":[500,576]},{"content":"Calling the AcceptChanges of the &lt;xref:System.Data.DataSet&gt; enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.","pos":[577,742],"source":" Calling the AcceptChanges of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call."},{"content":"When you call <ph id=\"ph1\">`AcceptChanges`</ph> on the <ph id=\"ph2\">`DataSet`</ph>, any &lt;xref:System.Data.DataRow&gt; objects still in edit-mode end their edits successfully.","pos":[749,884],"source":"       When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully."},{"content":"The &lt;xref:System.Data.DataRow.RowState%2A&gt; property of each &lt;xref:System.Data.DataRow&gt; also changes; <ph id=\"ph1\">`Added`</ph> and <ph id=\"ph2\">`Modified`</ph> rows become <ph id=\"ph3\">`Unchanged`</ph>, and <ph id=\"ph4\">`Deleted`</ph> rows are removed.","pos":[885,1065],"source":" The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed."},{"content":"If the <ph id=\"ph1\">`DataSet`</ph> contains &lt;xref:System.Data.ForeignKeyConstraint&gt; objects, invoking the <ph id=\"ph2\">`AcceptChanges`</ph> method also causes the &lt;xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A&gt; to be enforced.","pos":[1072,1274],"source":"       If the `DataSet` contains <xref:System.Data.ForeignKeyConstraint> objects, invoking the `AcceptChanges` method also causes the <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> to be enforced."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph><ph id=\"ph2\"> &gt;  </ph><ph id=\"ph3\">`AcceptChanges`</ph> and <ph id=\"ph4\">`RejectChanges`</ph> only apply to <ph id=\"ph5\">`DataRow`</ph> related changes (that is, Add, Remove, Delete, and Modify).","pos":[1280,1412],"source":"      > [!NOTE] >  `AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify)."},{"content":"They are not applicable to schema or structural changes.","pos":[1413,1469]},{"content":"&gt;    &gt;  Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter.","pos":[1472,1605],"source":"   >    >  Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter."},{"content":"In that situation, call &lt;xref:System.Data.Common.DataAdapter.Update%2A&gt; instead.","pos":[1606,1686],"source":" In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead."},{"content":"See <bpt id=\"p1\">[</bpt>Updating Data Sources with DataAdapters<ept id=\"p1\">](http://msdn.microsoft.com/library/33y2221y.aspx)</ept> for more information.","pos":[1687,1803],"source":" See [Updating Data Sources with DataAdapters](http://msdn.microsoft.com/library/33y2221y.aspx) for more information."}]},{"pos":[20413,20576],"content":"Begins the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component. The initialization occurs at run time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins the initialization of a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used on a form or used by another component.","pos":[0,124],"source":"Begins the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component."},{"content":"The initialization occurs at run time.","pos":[125,163]}]},{"pos":[20588,20955],"content":"The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization. Using the BeginInit and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization. Using the BeginInit and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.","pos":[0,367],"nodes":[{"content":"The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.","pos":[0,154]},{"content":"The &lt;xref:System.Data.DataSet.EndInit%2A&gt; method ends the initialization.","pos":[155,228],"source":" The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization."},{"content":"Using the BeginInit and &lt;xref:System.Data.DataSet.EndInit%2A&gt; methods prevents the control from being used before it is fully initialized.","pos":[229,367],"source":" Using the BeginInit and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized."}]}]},{"pos":[21407,21543],"content":"Gets or sets a value indicating whether string comparisons within <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects are case-sensitive.","needQuote":true,"needEscape":true,"source":"Gets or sets a value indicating whether string comparisons within <xref href=\"System.Data.DataTable\"></xref> objects are case-sensitive."},{"pos":[21556,22025],"content":"The CaseSensitive property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method.       By default, setting the CaseSensitive property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value.","needQuote":false,"needEscape":true,"nodes":[{"content":"The CaseSensitive property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method.       By default, setting the CaseSensitive property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value.","pos":[0,467],"nodes":[{"content":"The CaseSensitive property affects how sorting, searching, and filtering operations are performed on each &lt;xref:System.Data.DataTable&gt; object contained in a &lt;xref:System.Data.DataSet&gt; when using the &lt;xref:System.Data.DataTable.Select%2A&gt; method.","pos":[0,245],"source":"The CaseSensitive property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method."},{"content":"By default, setting the CaseSensitive property for a &lt;xref:System.Data.DataSet&gt; also sets the &lt;xref:System.Data.DataTable.CaseSensitive%2A&gt; property of each associated &lt;xref:System.Data.DataTable&gt; to the same value.","pos":[252,467],"source":"       By default, setting the CaseSensitive property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value."}]}]},{"pos":[22352,22607],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if string comparisons are case-sensitive; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if string comparisons are case-sensitive; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,176],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if string comparisons are case-sensitive; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[177,255],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[22959,23058],"content":"Clears the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of any data by removing all rows in all tables.","needQuote":true,"needEscape":true,"source":"Clears the <xref href=\"System.Data.DataSet\"></xref> of any data by removing all rows in all tables."},{"pos":[23070,23360],"content":"If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling Clear or <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> raises the <xref:System.NotSupportedException>. To avoid this situation, traverse each table, removing each row one at a time.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling Clear or <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> raises the <xref:System.NotSupportedException>. To avoid this situation, traverse each table, removing each row one at a time.","pos":[0,290],"nodes":[{"content":"If the &lt;xref:System.Data.DataSet&gt; is bound to an &lt;xref:System.Xml.XmlDataDocument&gt;, calling Clear or &lt;xref:System.Data.DataTable.Clear%2A?displayProperty=fullName&gt; raises the &lt;xref:System.NotSupportedException&gt;.","pos":[0,211],"source":"If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling Clear or <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> raises the <xref:System.NotSupportedException>."},{"content":"To avoid this situation, traverse each table, removing each row one at a time.","pos":[212,290]}]}]},{"pos":[24107,24294],"content":"Copies the structure of the <xref href=\"System.Data.DataSet\"></xref>, including all <xref href=\"System.Data.DataTable\"></xref> schemas, relations, and constraints. Does not copy any data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the structure of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, including all <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> schemas, relations, and constraints.","pos":[0,163],"source":"Copies the structure of the <xref href=\"System.Data.DataSet\"></xref>, including all <xref href=\"System.Data.DataTable\"></xref> schemas, relations, and constraints."},{"content":"Does not copy any data.","pos":[164,187]}]},{"pos":[24906,25052],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the same schema as the current <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, but none of the data.","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.Data.DataSet\"></xref> with the same schema as the current <xref href=\"System.Data.DataSet\"></xref>, but none of the data."},{"pos":[25391,25476],"content":"Copies both the structure and data for this <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Copies both the structure and data for this <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[25987,26302],"content":"A new <xref href=\"System.Data.DataSet\"></xref> with the same structure (table schemas, relations, and constraints) and data as this <xref href=\"System.Data.DataSet\"></xref>.       <div class=\"alert NOTE\">    If these classes have been subclassed, the copy will also be of the same subclasses.      </div>","needQuote":false,"needEscape":true,"nodes":[{"content":"A new <xref href=\"System.Data.DataSet\"></xref> with the same structure (table schemas, relations, and constraints) and data as this <xref href=\"System.Data.DataSet\"></xref>.       ","pos":[0,180],"nodes":[{"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the same structure (table schemas, relations, and constraints) and data as this <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,173],"source":"A new <xref href=\"System.Data.DataSet\"></xref> with the same structure (table schemas, relations, and constraints) and data as this <xref href=\"System.Data.DataSet\"></xref>."}]},{"content":"    If these classes have been subclassed, the copy will also be of the same subclasses.      ","pos":[204,298],"nodes":[{"content":"If these classes have been subclassed, the copy will also be of the same subclasses.","pos":[4,88]}]}]},{"pos":[26701,26923],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with one result set per <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, in the same sequence as the tables appear in the &lt;xref:System.Data.DataSet.Tables*&gt; collection.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Data.DataTableReader\"></xref> with one result set per <xref href=\"System.Data.DataTable\"></xref>, in the same sequence as the tables appear in the <xref:System.Data.DataSet.Tables*> collection."},{"pos":[26935,27200],"content":"In order to ensure the order of the result sets within the returned &lt;xref:System.Data.DataTableReader&gt;, if a &lt;xref:System.Data.DataTable&gt; within the &lt;xref:System.Data.DataSet&gt; is empty, it is represented by an empty result set within the returned <ph id=\"ph1\">`DataTableReader`</ph>.","needQuote":true,"needEscape":true,"source":"In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`."},{"pos":[28002,28232],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing one or more result sets, corresponding to the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instances contained within the source <bpt id=\"p3\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[28725,28851],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with one result set per <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Data.DataTableReader\"></xref> with one result set per <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[28863,29330],"content":"In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`. Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`.","needQuote":true,"needEscape":true,"nodes":[{"content":"In order to ensure that the order of the result sets within the returned &lt;xref:System.Data.DataTableReader&gt;, if a &lt;xref:System.Data.DataTable&gt; within the &lt;xref:System.Data.DataSet&gt; is empty, it is represented by an empty result set within the returned <ph id=\"ph1\">`DataTableReader`</ph>.","pos":[0,270],"source":"In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`."},{"content":"Because this overloaded version allows you to supply a list of <ph id=\"ph1\">`DataTable`</ph> instances as parameters, you can specify the order in which the result sets appear within the returned <ph id=\"ph2\">`DataTableReader`</ph>.","pos":[271,467],"source":" Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`."}]},{"pos":[30251,30384],"content":"An array of DataTables providing the order of the result sets to be returned in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of DataTables providing the order of the result sets to be returned in the <xref href=\"System.Data.DataTableReader\"></xref>."},{"pos":[30456,30780],"content":"A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>. The returned result sets are in the order specified by the <code>dataTables</code> parameter.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing one or more result sets, corresponding to the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instances contained within the source <bpt id=\"p3\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,230],"source":"A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>."},{"content":"The returned result sets are in the order specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dataTables</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","pos":[231,324],"source":" The returned result sets are in the order specified by the <code>dataTables</code> parameter."}]},{"pos":[31161,31239],"content":"Gets or sets the name of the current <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of the current <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[31725,31782],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[32193,32392],"content":"Gets a custom view of the data contained in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to allow filtering, searching, and navigating using a custom <bpt id=\"p2\">&lt;xref href=\"System.Data.DataViewManager\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a custom view of the data contained in the <xref href=\"System.Data.DataSet\"></xref> to allow filtering, searching, and navigating using a custom <xref href=\"System.Data.DataViewManager\"></xref>."},{"pos":[32405,32832],"content":"The <xref:System.Data.DataViewManager> returned by the DefaultViewManager property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>.       When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the DefaultViewManager property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Data.DataViewManager> returned by the DefaultViewManager property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>.       When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the DefaultViewManager property.","pos":[0,425],"nodes":[{"content":"The &lt;xref:System.Data.DataViewManager&gt; returned by the DefaultViewManager property allows you to create custom settings for each &lt;xref:System.Data.DataTable&gt; in the &lt;xref:System.Data.DataSet&gt;.","pos":[0,192],"source":"The <xref:System.Data.DataViewManager> returned by the DefaultViewManager property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>."},{"content":"When you obtain a &lt;xref:System.Data.DataView&gt; from a &lt;xref:System.Data.DataTable&gt;, the sort order, filtering, and &lt;xref:System.Data.DataViewRowState&gt; are configured according to the settings in the DefaultViewManager property.","pos":[199,425],"source":"       When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the DefaultViewManager property."}]}]},{"pos":[33337,33395],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataViewManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataViewManager\"></xref> object."},{"pos":[33958,34072],"content":"Determines the &lt;xref:System.Data.DataSet.SchemaSerializationMode*&gt; for a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines the <xref:System.Data.DataSet.SchemaSerializationMode*> for a <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[34084,34235],"content":"This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method can be called when deserializing a typed &lt;xref:System.Data.DataSet&gt; to determine its &lt;xref:System.Data.DataSet.SchemaSerializationMode%2A&gt;.","pos":[0,151],"source":"This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>."}]},{"pos":[34454,34581],"content":"The &lt;xref:System.Xml.XmlReader&gt; instance that is passed during deserialization of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Xml.XmlReader> instance that is passed during deserialization of the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[34661,34805],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaSerializationMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration indicating whether schema information has been omitted from the payload.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.SchemaSerializationMode\"></xref> enumeration indicating whether schema information has been omitted from the payload."},{"pos":[35601,35715],"content":"Determines the &lt;xref:System.Data.DataSet.SchemaSerializationMode*&gt; for a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines the <xref:System.Data.DataSet.SchemaSerializationMode*> for a <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[35727,35878],"content":"This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method can be called when deserializing a typed &lt;xref:System.Data.DataSet&gt; to determine its &lt;xref:System.Data.DataSet.SchemaSerializationMode%2A&gt;.","pos":[0,151],"source":"This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>."}]},{"pos":[36200,36475],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>’s protected constructor <ph id=\"ph1\">&amp;lt;</ph>xref:System.Data.DataSet.%23ctor%2A<ph id=\"ph2\">&amp;gt;</ph> is invoked with during deserialization in remoting scenarios.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that a <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>’s protected constructor &lt;xref:System.Data.DataSet.%23ctor%2A&gt; is invoked with during deserialization in remoting scenarios."},{"pos":[36571,36831],"content":"The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>’s protected constructor <ph id=\"ph1\">&amp;lt;</ph>xref:System.Data.DataSet.%23ctor%2A<ph id=\"ph2\">&amp;gt;</ph> is invoked with during deserialization in remoting scenarios.","needQuote":true,"needEscape":true,"source":"The <xref:System.Runtime.Serialization.StreamingContext> that a <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>’s protected constructor &lt;xref:System.Data.DataSet.%23ctor%2A&gt; is invoked with during deserialization in remoting scenarios."},{"pos":[36911,37055],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaSerializationMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration indicating whether schema information has been omitted from the payload.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.SchemaSerializationMode\"></xref> enumeration indicating whether schema information has been omitted from the payload."},{"pos":[37436,37597],"content":"Ends the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component. The initialization occurs at run time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends the initialization of a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used on a form or used by another component.","pos":[0,122],"source":"Ends the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component."},{"content":"The initialization occurs at run time.","pos":[123,161]}]},{"pos":[37609,37978],"content":"The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization. Using the <xref:System.Data.DataSet.BeginInit%2A> and EndInit methods prevents the control from being used before it is fully initialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization. Using the <xref:System.Data.DataSet.BeginInit%2A> and EndInit methods prevents the control from being used before it is fully initialized.","pos":[0,369],"nodes":[{"content":"The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.","pos":[0,152]},{"content":"The &lt;xref:System.Data.DataSet.BeginInit%2A&gt; method starts the initialization.","pos":[153,230],"source":" The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization."},{"content":"Using the &lt;xref:System.Data.DataSet.BeginInit%2A&gt; and EndInit methods prevents the control from being used before it is fully initialized.","pos":[231,369],"source":" Using the <xref:System.Data.DataSet.BeginInit%2A> and EndInit methods prevents the control from being used before it is fully initialized."}]}]},{"pos":[38451,38558],"content":"Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.","pos":[0,107]}]},{"pos":[38570,38804],"content":"Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property). For more information about creating constraints, see [DataTable Constraints](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"nodes":[{"content":"Constraints are set at the &lt;xref:System.Data.DataTable&gt; level (&lt;xref:System.Data.DataTable.Constraints%2A&gt; property).","pos":[0,117],"source":"Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property)."},{"content":"For more information about creating constraints, see <bpt id=\"p1\">[</bpt>DataTable Constraints<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[118,234],"source":" For more information about creating constraints, see [DataTable Constraints](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[39564,39798],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if rules are enforced; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if rules are enforced; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,157],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if rules are enforced; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[158,234],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[39973,40016],"content":"One or more constraints cannot be enforced.","needQuote":true,"needEscape":true,"nodes":[{"content":"One or more constraints cannot be enforced.","pos":[0,43]}]},{"pos":[40365,40503],"content":"Gets the collection of customized user information associated with the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the collection of customized user information associated with the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>."},{"pos":[40516,40825],"content":"The ExtendedProperties property enables you to store custom information with the `DataSet`. For example, you might store a time when the data should be refreshed.       Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ExtendedProperties property enables you to store custom information with the <ph id=\"ph1\">`DataSet`</ph>.","pos":[0,91],"source":"The ExtendedProperties property enables you to store custom information with the `DataSet`."},{"content":"For example, you might store a time when the data should be refreshed.","pos":[92,162]},{"content":"Extended properties must be of type &lt;xref:System.String&gt; if you want them persisted when the &lt;xref:System.Data.DataSet&gt; is written as XML.","pos":[169,307],"source":"       Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML."}]},{"pos":[41488,41575],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.PropertyCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with all custom user information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.PropertyCollection\"></xref> with all custom user information."},{"pos":[41957,42141],"content":"Gets a copy of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains all changes made to it since it was loaded or since &lt;xref:System.Data.DataSet.AcceptChanges*&gt; was last called.","needQuote":true,"needEscape":true,"source":"Gets a copy of the <xref href=\"System.Data.DataSet\"></xref> that contains all changes made to it since it was loaded or since <xref:System.Data.DataSet.AcceptChanges*> was last called."},{"pos":[42153,42618],"content":"Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes. Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows. The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new &lt;xref:System.Data.DataSet&gt; that contains a copy of all rows in the original &lt;xref:System.Data.DataSet&gt; that have pending changes.","pos":[0,143],"source":"Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes."},{"content":"Relationship constraints can cause additional unchanged rows to be added to the new &lt;xref:System.Data.DataSet&gt; if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.","pos":[144,348],"source":" Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows."},{"content":"The method returns <ph id=\"ph1\">`null`</ph> if there are no rows in the original &lt;xref:System.Data.DataSet&gt; that have pending changes.","pos":[349,465],"source":" The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes."}]},{"pos":[43547,43837],"content":"A copy of the changes from this <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it and later be merged back in using <xref:System.Data.DataSet.Merge*>. If no changed rows are found, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of the changes from this <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that can have actions performed on it and later be merged back in using &lt;xref:System.Data.DataSet.Merge*&gt;.","pos":[0,179],"source":"A copy of the changes from this <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it and later be merged back in using <xref:System.Data.DataSet.Merge*>."},{"content":"If no changed rows are found, the method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[180,290],"source":" If no changed rows are found, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[44299,44540],"content":"Gets a copy of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing all changes made to it since it was last loaded, or since &lt;xref:System.Data.DataSet.AcceptChanges*&gt; was called, filtered by <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRowState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a copy of the <xref href=\"System.Data.DataSet\"></xref> containing all changes made to it since it was last loaded, or since <xref:System.Data.DataSet.AcceptChanges*> was called, filtered by <xref href=\"System.Data.DataRowState\"></xref>."},{"pos":[44553,45142],"content":"The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original. Use the `rowStates` argument to specify the type of changes the new object should include.       This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>. Relationship constraints may cause parent rows marked `Unchanged` to be included. If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is used to produce a second &lt;xref:System.Data.DataSet&gt; object that contains only the changes introduced into the original.","pos":[0,174],"source":"The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original."},{"content":"Use the <ph id=\"ph1\">`rowStates`</ph> argument to specify the type of changes the new object should include.","pos":[175,265],"source":" Use the `rowStates` argument to specify the type of changes the new object should include."},{"content":"This returned copy is designed to be merged back in to this original &lt;xref:System.Data.DataSet&gt;.","pos":[272,368],"source":"       This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>."},{"content":"Relationship constraints may cause parent rows marked <ph id=\"ph1\">`Unchanged`</ph> to be included.","pos":[369,450],"source":" Relationship constraints may cause parent rows marked `Unchanged` to be included."},{"content":"If no rows of the desired &lt;xref:System.Data.DataRowState&gt; are found, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method returns <ph id=\"ph1\">`null`</ph>.","pos":[451,587],"source":" If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`."}]},{"pos":[45776,45840],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRowState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.DataRowState\"></xref> values."},{"pos":[45904,46246],"content":"A filtered copy of the <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it, and subsequently be merged back in using <xref:System.Data.DataSet.Merge*>. If no rows of the desired <xref href=\"System.Data.DataRowState\"></xref> are found, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A filtered copy of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that can have actions performed on it, and subsequently be merged back in using &lt;xref:System.Data.DataSet.Merge*&gt;.","pos":[0,178],"source":"A filtered copy of the <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it, and subsequently be merged back in using <xref:System.Data.DataSet.Merge*>."},{"content":"If no rows of the desired <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRowState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> are found, the method returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[179,342],"source":" If no rows of the desired <xref href=\"System.Data.DataRowState\"></xref> are found, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[46750,46833],"content":"Gets a copy of <bpt id=\"p1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the DataSet.","needQuote":true,"needEscape":true,"source":"Gets a copy of <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> for the DataSet."},{"pos":[47069,47094],"content":"The specified schema set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified schema set.","pos":[0,25]}]},{"pos":[47177,47239],"content":"A copy of <bpt id=\"p1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A copy of <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>."},{"pos":[47924,48048],"content":"Populates a serialization information object with the data needed to serialize the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Populates a serialization information object with the data needed to serialize the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[48325,48487],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that holds the serialized data associated with the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized data associated with the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[48583,48765],"content":"A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that contains the source and destination of the serialized stream associated with the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Runtime.Serialization.StreamingContext> that contains the source and destination of the serialized stream associated with the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[48929,49025],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">info</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>info</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[49393,49460],"content":"Returns a serializable <xref:System.Xml.Schema.XMLSchema> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a serializable &lt;xref:System.Xml.Schema.XMLSchema&gt; instance.","pos":[0,67],"source":"Returns a serializable <xref:System.Xml.Schema.XMLSchema> instance."}]},{"pos":[49646,49694],"content":"The <xref:System.Xml.Schema.XMLSchema> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.Schema.XMLSchema&gt; instance.","pos":[0,48],"source":"The <xref:System.Xml.Schema.XMLSchema> instance."}]},{"pos":[50419,50477],"content":"Deserializes the table data from the binary or XML stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Deserializes the table data from the binary or XML stream.","pos":[0,58]}]},{"pos":[50756,50837],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> instance."},{"pos":[50933,50955],"content":"The streaming context.","needQuote":true,"needEscape":true,"nodes":[{"content":"The streaming context.","pos":[0,22]}]},{"pos":[51319,51417],"content":"Returns the XML representation of the data stored in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[51430,51883],"content":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode>.       GetXml returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file.       If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.","needQuote":false,"needEscape":true,"nodes":[{"content":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode>.       GetXml returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file.       If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.","pos":[0,449],"nodes":[{"content":"Calling this method is identical to calling &lt;xref:System.Data.DataSet.WriteXml%2A&gt; with &lt;xref:System.Data.XmlWriteMode&gt; set to &lt;xref:System.Data.XmlWriteMode&gt;.","pos":[0,159],"source":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode>."},{"content":"GetXml returns XML as a string, and therefore requires more overhead than &lt;xref:System.Data.DataSet.WriteXml%2A&gt; to write XML to a file.","pos":[166,302],"source":"       GetXml returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file."},{"content":"If you build a &lt;xref:System.Data.DataSet&gt; using schema inference and serialize it using XML or Web services, the column ordering may change.","pos":[309,449],"source":"       If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change."}]}]},{"pos":[65793,65894],"content":"A string that is a representation of the data stored in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that is a representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[66274,66391],"content":"Returns the XML Schema for the XML representation of the data stored in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the XML Schema for the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[66404,66847],"content":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written.       GetXmlSchema returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file.       If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.","needQuote":false,"needEscape":true,"nodes":[{"content":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written.       GetXmlSchema returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file.       If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.","pos":[0,439],"nodes":[{"content":"Calling this method is identical to calling &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;, except that only the primary schema is written.","pos":[0,137],"source":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written."},{"content":"GetXmlSchema returns XML as a string, and therefore requires more overhead than &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; to write XML to a file.","pos":[144,292],"source":"       GetXmlSchema returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file."},{"content":"If you build a &lt;xref:System.Data.DataSet&gt; using schema inference and serialize it using XML or Web services, the column ordering may change.","pos":[299,439],"source":"       If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change."}]}]},{"pos":[67382,67506],"content":"String that is the XML Schema for the XML representation of the data stored in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"String that is the XML Schema for the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[67882,68013],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has changes, including new, deleted, or modified rows.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Data.DataSet\"></xref> has changes, including new, deleted, or modified rows."},{"pos":[68592,68787],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> has changes; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Data.DataSet\"></xref> has changes; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[69249,69439],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has changes, including new, deleted, or modified rows, filtered by <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRowState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Data.DataSet\"></xref> has changes, including new, deleted, or modified rows, filtered by <xref href=\"System.Data.DataRowState\"></xref>."},{"pos":[69451,69598],"content":"Examine the &lt;xref:System.Data.DataSet.HasChanges%2A&gt; property of the <ph id=\"ph1\">`DataSet`</ph> before invoking the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method.","needQuote":true,"needEscape":true,"source":"Examine the <xref:System.Data.DataSet.HasChanges%2A> property of the `DataSet` before invoking the <xref:System.Data.DataSet.GetChanges%2A> method."},{"pos":[70216,70280],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRowState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.DataRowState\"></xref> values."},{"pos":[70339,70534],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> has changes; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Data.DataSet\"></xref> has changes; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[70899,71066],"content":"Gets a value indicating whether there are errors in any of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects within this <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether there are errors in any of the <xref href=\"System.Data.DataTable\"></xref> objects within this <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[71078,71522],"content":"Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property. Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects. If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Each &lt;xref:System.Data.DataTable&gt; in a &lt;xref:System.Data.DataSet&gt; also has a &lt;xref:System.Data.DataTable.HasErrors%2A&gt; property.","pos":[0,128],"source":"Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property."},{"content":"Use the <ph id=\"ph1\">`HasErrors`</ph> property of the <ph id=\"ph2\">`DataSet`</ph> first, to determine if any table has errors, before checking individual &lt;xref:System.Data.DataTable&gt; objects.","pos":[129,284],"source":" Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects."},{"content":"If a <ph id=\"ph1\">`DataTable`</ph> has errors, the &lt;xref:System.Data.DataTable.GetErrors%2A&gt; method returns an array of &lt;xref:System.Data.DataRow&gt; objects containing the errors.","pos":[285,444],"source":" If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors."}]},{"pos":[72119,72284],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if any table contains an error;otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if any table contains an error;otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[72790,72904],"content":"Applies the XML schema from the specified &lt;xref:System.IO.Stream&gt; to the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Applies the XML schema from the specified <xref:System.IO.Stream> to the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[73081,73180],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Stream\" name=\"Stream\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from which to read the schema.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_Stream\" name=\"Stream\" href=\"\"></xref> from which to read the schema."},{"pos":[73246,73347],"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","pos":[0,101]}]},{"pos":[73878,73996],"content":"Applies the XML schema from the specified &lt;xref:System.IO.TextReader&gt; to the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Applies the XML schema from the specified <xref:System.IO.TextReader> to the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[74181,74288],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TextReader\" name=\"TextReader\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from which to read the schema.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_TextReader\" name=\"TextReader\" href=\"\"></xref> from which to read the schema."},{"pos":[74354,74455],"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","pos":[0,101]}]},{"pos":[74960,75055],"content":"Applies the XML schema from the specified file to the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Applies the XML schema from the specified file to the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[75223,75295],"content":"The name of the file (including the path) from which to read the schema.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the file (including the path) from which to read the schema.","pos":[0,72]}]},{"pos":[75361,75462],"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","pos":[0,101]}]},{"pos":[75637,75789],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is not set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[76252,76370],"content":"Applies the XML schema from the specified &lt;xref:System.Xml.XmlReader&gt; to the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Applies the XML schema from the specified <xref:System.Xml.XmlReader> to the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[76555,76660],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XMLReader\" name=\"XMLReader\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from which to read the schema.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_XMLReader\" name=\"XMLReader\" href=\"\"></xref> from which to read the schema."},{"pos":[76726,76827],"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","pos":[0,101]}]},{"pos":[77203,77276],"content":"Occurs after the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is initialized.","needQuote":true,"needEscape":true,"source":"Occurs after the <xref href=\"System.Data.DataSet\"></xref> is initialized."},{"pos":[77288,77358],"content":"For more information, see <xref:System.Data.DataSet.IsInitialized%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For more information, see &lt;xref:System.Data.DataSet.IsInitialized%2A&gt;.","pos":[0,70],"source":"For more information, see <xref:System.Data.DataSet.IsInitialized%2A>."}]},{"pos":[77484,77496],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[77896,77976],"content":"Deserialize all of the tables data of the DataSet from the binary or XML stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Deserialize all of the tables data of the DataSet from the binary or XML stream.","pos":[0,80]}]},{"pos":[78788,78915],"content":"Inspects the format of the serialized representation of the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Inspects the format of the serialized representation of the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>."},{"pos":[78927,79037],"content":"This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.","pos":[0,110]}]},{"pos":[79314,79393],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object."},{"pos":[79489,79553],"content":"The <xref:System.Runtime.Serialization.StreamingContext> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; object.","pos":[0,64],"source":"The <xref:System.Runtime.Serialization.StreamingContext> object."}]},{"pos":[79612,79944],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> represents a <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> serialized in its binary format, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> otherwise.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> represents a <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> serialized in its binary format, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise."},{"pos":[80337,80433],"content":"Gets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is initialized.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref href=\"System.Data.DataSet\"></xref> is initialized."},{"pos":[80445,80696],"content":"Returns the status of the <xref:System.Data.DataSet> while it’s being constructed, for instance by Visual Studio. The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the status of the &lt;xref:System.Data.DataSet&gt; while it’s being constructed, for instance by Visual Studio.","pos":[0,113],"source":"Returns the status of the <xref:System.Data.DataSet> while it’s being constructed, for instance by Visual Studio."},{"content":"The &lt;xref:System.Data.DataSet.BeginInit%2A&gt; method sets it to <ph id=\"ph1\">`false`</ph> and &lt;xref:System.Data.DataSet.EndInit%2A&gt; method sets it to <ph id=\"ph2\">`true`</ph>.","pos":[114,251],"source":" The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`."}]},{"pos":[80813,81003],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate the component has completed initialization; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the component has completed initialization; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[81596,81859],"content":"Fills a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with values from a data source using the supplied <bpt id=\"p2\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, using an array of <bpt id=\"p3\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> instances to supply the schema and namespace information.","needQuote":true,"needEscape":true,"source":"Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of <xref href=\"System.Data.DataTable\"></xref> instances to supply the schema and namespace information."},{"pos":[81872,83430],"content":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.      > [!NOTE] >  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.       The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.       The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The Loadmethod fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader. After each result set, the Loadmethod moves on to the next result set within the reader, until there are no more result sets.       The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataTable.Load%2A&gt; method provides a technique for filling a single &lt;xref:System.Data.DataTable&gt; with data, retrieved from an &lt;xref:System.Data.IDataReader&gt; instance.","pos":[0,188],"source":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance."},{"content":"This method provides the same functionality, but allows you to load multiple result sets from an &lt;xref:System.Data.IDataReader&gt; into multiple tables within a &lt;xref:System.Data.DataSet&gt;.","pos":[189,374],"source":" This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The load operation will fail with an &lt;xref:System.InvalidOperationException&gt; if any of the source data columns in the incoming <ph id=\"ph2\">`reader`</ph> are computed columns.","pos":[380,550],"source":"      > [!NOTE] >  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns."},{"content":"The <ph id=\"ph1\">`loadOption`</ph> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the &lt;xref:System.Data.LoadOption&gt; enumeration.","pos":[557,749],"source":"       The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration."},{"content":"See the documentation for the &lt;xref:System.Data.DataTable&gt;&lt;xref:System.Data.DataTable.Load%2A&gt; method for more information on using this parameter.","pos":[750,897],"source":" See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter."},{"content":"The <ph id=\"ph1\">`tables`</ph> parameter allows you to specify an array of &lt;xref:System.Data.DataTable&gt; instances, indicating the order of the tables corresponding to each result set loaded from the reader.","pos":[904,1092],"source":"       The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader."},{"content":"The Loadmethod fills each supplied &lt;xref:System.Data.DataTable&gt; instance with data from a single result set from the source data reader.","pos":[1093,1229],"source":" The Loadmethod fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader."},{"content":"After each result set, the Loadmethod moves on to the next result set within the reader, until there are no more result sets.","pos":[1230,1355]},{"content":"The name resolution scheme for this method is the same as that followed by the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method of the &lt;xref:System.Data.Common.DbDataAdapter&gt; class.","pos":[1362,1549],"source":"       The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class."}]},{"pos":[84276,84362],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides one or more result sets.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets."},{"pos":[84438,84723],"content":"A value from the <bpt id=\"p1\">&lt;xref href=\"System.Data.LoadOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that indicates how rows already in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instances within the <bpt id=\"p3\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> will be combined with incoming rows that share the same primary key.","needQuote":true,"needEscape":true,"source":"A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref href=\"System.Data.DataSet\"></xref> will be combined with incoming rows that share the same primary key."},{"pos":[84796,85088],"content":"An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the Load method retrieves name and namespace information. Each of these tables must be a member of the <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instances, from which the Load method retrieves name and namespace information.","pos":[0,134],"source":"An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the Load method retrieves name and namespace information."},{"content":"Each of these tables must be a member of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contained by this <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[135,292],"source":" Each of these tables must be a member of the <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>."}]},{"pos":[85647,85931],"content":"Fills a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with values from a data source using the supplied <bpt id=\"p2\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, using an array of strings to supply the names for the tables within the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of strings to supply the names for the tables within the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>."},{"pos":[85944,87772],"content":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.      > [!NOTE] >  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.       The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.       The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader. The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order. If a matching table is found, that table is loaded with the content of the current result set. If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set. After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets.       The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`. The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataTable.Load%2A&gt; method provides a technique for filling a single &lt;xref:System.Data.DataTable&gt; with data, retrieved from an &lt;xref:System.Data.IDataReader&gt; instance.","pos":[0,188],"source":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance."},{"content":"This method provides the same functionality, but allows you to load multiple result sets from an <ph id=\"ph1\">`IDataReader`</ph> into multiple tables within a <ph id=\"ph2\">`DataSet`</ph>.","pos":[189,340],"source":" This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The load operation will fail with an &lt;xref:System.InvalidOperationException&gt; if any of the source data columns in the incoming <ph id=\"ph2\">`reader`</ph> are computed columns.","pos":[346,516],"source":"      > [!NOTE] >  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns."},{"content":"The <ph id=\"ph1\">`loadOption`</ph> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the &lt;xref:System.Data.LoadOption&gt; enumeration.","pos":[523,715],"source":"       The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration."},{"content":"See the documentation for the &lt;xref:System.Data.DataTable.Load%2A&gt; method for more information on using this parameter.","pos":[716,835],"source":" See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter."},{"content":"The <ph id=\"ph1\">`tables`</ph> parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader.","pos":[842,1003],"source":"       The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader."},{"content":"The <ph id=\"ph1\">`Load`</ph> method attempts to find a table within the <ph id=\"ph2\">`DataSet`</ph> matching the name found in the array of table names, in order.","pos":[1004,1130],"source":" The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order."},{"content":"If a matching table is found, that table is loaded with the content of the current result set.","pos":[1131,1225]},{"content":"If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set.","pos":[1226,1388]},{"content":"After each result set, the <ph id=\"ph1\">`Load`</ph> method moves on to the next result set within the reader, until there are no more result sets.","pos":[1389,1517],"source":" After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets."},{"content":"The default namespace associated with <ph id=\"ph1\">`DataSet`</ph>, if any, is associated with each newly created <ph id=\"ph2\">`DataTable`</ph>.","pos":[1524,1631],"source":"       The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`."},{"content":"The name resolution scheme for this method is the same as that followed by the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method of the &lt;xref:System.Data.Common.DbDataAdapter&gt; class.","pos":[1632,1819],"source":" The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class."}]},{"pos":[88812,88898],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides one or more result sets.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets."},{"pos":[88974,89285],"content":"A value from the <bpt id=\"p1\">&lt;xref href=\"System.Data.LoadOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that indicates how rows already in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instances within the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> will be combined with incoming rows that share the same primary key.","needQuote":true,"needEscape":true,"source":"A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> will be combined with incoming rows that share the same primary key."},{"pos":[89350,89487],"content":"An array of strings, from which the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Load\" name=\"Load\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method retrieves table name information.","needQuote":true,"needEscape":true,"source":"An array of strings, from which the <xref uid=\"langword_csharp_Load\" name=\"Load\" href=\"\"></xref> method retrieves table name information."},{"pos":[90205,90468],"content":"Fills a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with values from a data source using the supplied <bpt id=\"p2\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, using an array of <bpt id=\"p3\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> instances to supply the schema and namespace information.","needQuote":true,"needEscape":true,"source":"Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of <xref href=\"System.Data.DataTable\"></xref> instances to supply the schema and namespace information."},{"pos":[90481,93034],"content":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.      > [!NOTE] >  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.       The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.       The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data. The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing. Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.       The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The Loadmethod fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader. After each result set, the Loadmethod moves on to the next result set within the reader, until there are no more result sets.       The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataTable.Load%2A&gt; method provides a technique for filling a single &lt;xref:System.Data.DataTable&gt; with data, retrieved from an &lt;xref:System.Data.IDataReader&gt; instance.","pos":[0,188],"source":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance."},{"content":"This method provides the same functionality, but allows you to load multiple result sets from an &lt;xref:System.Data.IDataReader&gt; into multiple tables within a &lt;xref:System.Data.DataSet&gt;.","pos":[189,374],"source":" This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The load operation will fail with an &lt;xref:System.InvalidOperationException&gt; if any of the source data columns in the incoming <ph id=\"ph2\">`reader`</ph> are computed columns.","pos":[380,550],"source":"      > [!NOTE] >  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns."},{"content":"The <ph id=\"ph1\">`loadOption`</ph> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the &lt;xref:System.Data.LoadOption&gt; enumeration.","pos":[557,749],"source":"       The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration."},{"content":"See the documentation for the &lt;xref:System.Data.DataTable&gt;&lt;xref:System.Data.DataTable.Load%2A&gt; method for more information on using this parameter.","pos":[750,897],"source":" See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter."},{"content":"The <ph id=\"ph1\">`errorHandler`</ph> parameter is a &lt;xref:System.Data.FillErrorEventHandler&gt; delegate that refers to a procedure that is called when an error occurs while loading data.","pos":[904,1070],"source":"       The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data."},{"content":"The &lt;xref:System.Data.FillErrorEventArgs&gt; parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the &lt;xref:System.Data.DataTable&gt; being filled.","pos":[1071,1312],"source":" The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled."},{"content":"Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like.","pos":[1313,1476]},{"content":"The &lt;xref:System.Data.FillErrorEventArgs&gt; parameter supplies a &lt;xref:System.Data.FillErrorEventArgs.Continue%2A&gt; property: set this property to <ph id=\"ph1\">`true`</ph> to indicate that you have handled the error and wish to continue processing; set the property to <ph id=\"ph2\">`false`</ph> to indicate that you wish to halt processing.","pos":[1477,1778],"source":" The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing."},{"content":"Be aware that setting the property to <ph id=\"ph1\">`false`</ph> causes the code that triggered the problem to throw an exception.","pos":[1779,1890],"source":" Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception."},{"content":"The <ph id=\"ph1\">`tables`</ph> parameter allows you to specify an array of &lt;xref:System.Data.DataTable&gt; instances, indicating the order of the tables corresponding to each result set loaded from the reader.","pos":[1897,2085],"source":"       The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader."},{"content":"The Loadmethod fills each supplied &lt;xref:System.Data.DataTable&gt; instance with data from a single result set from the source data reader.","pos":[2086,2222],"source":" The Loadmethod fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader."},{"content":"After each result set, the Loadmethod moves on to the next result set within the reader, until there are no more result sets.","pos":[2223,2348]},{"content":"The name resolution scheme for this method is the same as that followed by the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method of the &lt;xref:System.Data.Common.DbDataAdapter&gt; class.","pos":[2355,2542],"source":"       The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class."}]},{"pos":[93927,94013],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides one or more result sets.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets."},{"pos":[94089,94374],"content":"A value from the <bpt id=\"p1\">&lt;xref href=\"System.Data.LoadOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that indicates how rows already in the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instances within the <bpt id=\"p3\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> will be combined with incoming rows that share the same primary key.","needQuote":true,"needEscape":true,"source":"A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref href=\"System.Data.DataSet\"></xref> will be combined with incoming rows that share the same primary key."},{"pos":[94463,94577],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.FillErrorEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate to call when an error occurs while loading data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.FillErrorEventHandler\"></xref> delegate to call when an error occurs while loading data."},{"pos":[94650,94784],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instances, from which the Load method retrieves name and namespace information.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the Load method retrieves name and namespace information."},{"pos":[95128,95205],"content":"Gets or sets the locale information used to compare strings within the table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the locale information used to compare strings within the table.","pos":[0,77]}]},{"pos":[95218,95609],"content":"The Locale property specifies the locale for which sorting applies.       By default, setting the Locale for a <xref:System.Data.DataSet> also sets the Locale for each <xref:System.Data.DataTable> object in that `DataSet` to the same value.      > [!NOTE] >  In columns that contain expressions, the <xref:System.StringComparison> is used. The <xref:System.StringComparison> is ignored.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Locale property specifies the locale for which sorting applies.","pos":[0,67]},{"content":"By default, setting the Locale for a &lt;xref:System.Data.DataSet&gt; also sets the Locale for each &lt;xref:System.Data.DataTable&gt; object in that <ph id=\"ph1\">`DataSet`</ph> to the same value.","pos":[74,240],"source":"       By default, setting the Locale for a <xref:System.Data.DataSet> also sets the Locale for each <xref:System.Data.DataTable> object in that `DataSet` to the same value."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In columns that contain expressions, the &lt;xref:System.StringComparison&gt; is used.","pos":[246,339],"source":"      > [!NOTE] >  In columns that contain expressions, the <xref:System.StringComparison> is used."},{"content":"The &lt;xref:System.StringComparison&gt; is ignored.","pos":[340,386],"source":" The <xref:System.StringComparison> is ignored."}]},{"pos":[96155,96325],"content":"A <xref:System.Globalization.CultureInfo> that contains data about the user's machine locale. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Globalization.CultureInfo&gt; that contains data about the user's machine locale.","pos":[0,93],"source":"A <xref:System.Globalization.CultureInfo> that contains data about the user's machine locale."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[94,170],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[96743,96869],"content":"Merges an array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects into the current <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Merges an array of <xref href=\"System.Data.DataRow\"></xref> objects into the current <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[96882,100618],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.       In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.       After merging schemas, the data is merged.       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.       During a merge, constraints are disabled. If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."},{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.","pos":[417,680],"source":"       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."},{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[687,870]},{"content":"In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.","pos":[871,958],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.","pos":[959,1052],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.","pos":[1053,1269],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller and thus more efficiently passed back to a middle-tier component.","pos":[1270,1368]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[1369,1476]},{"content":"The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[1477,1755],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.","pos":[1756,2095],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."},{"content":"When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.","pos":[2102,2298],"source":"       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[2299,2421]},{"content":"If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph1\">`missingSchemaAction`</ph> argument to <ph id=\"ph2\">`MissingSchemaAction.Add`</ph>.","pos":[2422,2688],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.","pos":[2689,2776],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."},{"content":"After merging schemas, the data is merged.","pos":[2783,2825]},{"content":"When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Unchanged`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[2832,3064],"source":"       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[3065,3220],"source":" Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows."},{"content":"During a merge, constraints are disabled.","pos":[3227,3268]},{"content":"If any constraints cannot be enabled at the end of a merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.","pos":[3269,3450],"source":" If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id=\"ph1\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[3451,3596],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[3597,3724],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]},{"pos":[100775,100952],"content":"The array of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to be merged into the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The array of <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref> objects to be merged into the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>."},{"pos":[101359,101518],"content":"Merges a specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and its schema into the current <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema into the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>."},{"pos":[101531,105129],"content":"The Merge method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.       The Merge method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.       In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the Merge method.       When the Merge method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.       After merging schemas, the data is merged.       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.       During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Merge method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.","pos":[0,107],"source":"The Merge method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.","pos":[108,255],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.","pos":[256,380],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."},{"content":"The Merge method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.","pos":[387,620],"source":"       The Merge method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."},{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[627,810]},{"content":"In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.","pos":[811,898],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.","pos":[899,992],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.","pos":[993,1209],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[1210,1309]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[1310,1417]},{"content":"The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[1418,1696],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the Merge method.","pos":[1697,2006],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the Merge method."},{"content":"When the Merge method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.","pos":[2013,2179],"source":"       When the Merge method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[2180,2302]},{"content":"If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph1\">`missingSchemaAction`</ph> argument to <ph id=\"ph2\">`MissingSchemaAction.Add`</ph>.","pos":[2303,2569],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.","pos":[2570,2657],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."},{"content":"After merging schemas, the data is merged.","pos":[2664,2706]},{"content":"When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Unchanged`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[2713,2945],"source":"       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[2946,3084],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."},{"content":"During a merge, constraints are disabled.","pos":[3091,3132]},{"content":"If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.","pos":[3133,3312],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id=\"ph1\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[3313,3458],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[3459,3586],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]},{"pos":[105672,105780],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whose data and schema will be merged.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> whose data and schema will be merged."},{"pos":[105942,105984],"content":"One or more constraints cannot be enabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"One or more constraints cannot be enabled.","pos":[0,42]}]},{"pos":[106087,106176],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dataSet</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>dataSet</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[106537,106672],"content":"Merges a specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and its schema into the current <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Merges a specified <xref href=\"System.Data.DataTable\"></xref> and its schema into the current <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[106685,110403],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.       In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.       After merging schemas, the data is merged.       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.       During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."},{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.","pos":[417,680],"source":"       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."},{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[687,870]},{"content":"In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.","pos":[871,958],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.","pos":[959,1052],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.","pos":[1053,1269],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[1270,1369]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[1370,1477]},{"content":"The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[1478,1756],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.","pos":[1757,2096],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."},{"content":"When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.","pos":[2103,2299],"source":"       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[2300,2422]},{"content":"If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph1\">`missingSchemaAction`</ph> argument to <ph id=\"ph2\">`MissingSchemaAction.Add`</ph>.","pos":[2423,2689],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.","pos":[2690,2777],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."},{"content":"After merging schemas, the data is merged.","pos":[2784,2826]},{"content":"When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Unchanged`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[2833,3065],"source":"       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[3066,3204],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."},{"content":"During a merge, constraints are disabled.","pos":[3211,3252]},{"content":"If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.","pos":[3253,3432],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id=\"ph1\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[3433,3578],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[3579,3706],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]},{"pos":[111104,111188],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whose data and schema will be merged.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataTable\"></xref> whose data and schema will be merged."},{"pos":[111344,111431],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">table</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>table</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[111836,112140],"content":"Merges a specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and its schema into the current <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, preserving or discarding any changes in this <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> according to the given argument.","needQuote":true,"needEscape":true,"source":"Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema into the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>, preserving or discarding any changes in this <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> according to the given argument."},{"pos":[112153,115871],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.       In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.       After merging schemas, the data is merged.       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.       During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."},{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.","pos":[417,680],"source":"       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."},{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[687,870]},{"content":"In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.","pos":[871,958],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.","pos":[959,1052],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.","pos":[1053,1269],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[1270,1369]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[1370,1477]},{"content":"The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[1478,1756],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.","pos":[1757,2096],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."},{"content":"When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.","pos":[2103,2299],"source":"       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[2300,2422]},{"content":"If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph1\">`missingSchemaAction`</ph> argument to <ph id=\"ph2\">`MissingSchemaAction.Add`</ph>.","pos":[2423,2689],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.","pos":[2690,2777],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."},{"content":"After merging schemas, the data is merged.","pos":[2784,2826]},{"content":"When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Unchanged`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[2833,3065],"source":"       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[3066,3204],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."},{"content":"During a merge, constraints are disabled.","pos":[3211,3252]},{"content":"If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.","pos":[3253,3432],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id=\"ph1\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[3433,3578],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[3579,3706],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]},{"pos":[116689,116797],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whose data and schema will be merged.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> whose data and schema will be merged."},{"pos":[116870,117107],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve changes in the current <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve changes in the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[117702,118005],"content":"Merges an array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects into the current <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, preserving or discarding changes in the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> and handling an incompatible schema according to the given arguments.","needQuote":true,"needEscape":true,"source":"Merges an array of <xref href=\"System.Data.DataRow\"></xref> objects into the current <xref href=\"System.Data.DataSet\"></xref>, preserving or discarding changes in the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> and handling an incompatible schema according to the given arguments."},{"pos":[118018,122261],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.       In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.       To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.       After merging schemas, the data is merged.       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.       During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."},{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.","pos":[417,680],"source":"       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."},{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[687,870]},{"content":"In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.","pos":[871,958],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.","pos":[959,1052],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.","pos":[1053,1269],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[1270,1369]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[1370,1477]},{"content":"The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[1478,1756],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.","pos":[1757,2096],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."},{"content":"To facilitate explanation of the &lt;xref:System.Data.DataSet.Merge%2A&gt; method, we use \"target\" to signify the current &lt;xref:System.Data.DataSet&gt;, and \"source\" to name the second (parameter) &lt;xref:System.Data.DataSet&gt;.","pos":[2103,2318],"source":"       To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>."},{"content":"The target &lt;xref:System.Data.DataSet&gt; is so named because it is the object upon which an action (the merge) occurs.","pos":[2319,2434],"source":" The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs."},{"content":"The second &lt;xref:System.Data.DataSet&gt; is called a \"source\" because the information it contains does not change, but instead is merged into the current &lt;xref:System.Data.DataSet&gt;.","pos":[2435,2613],"source":" The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>."},{"content":"When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.","pos":[2620,2816],"source":"       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[2817,2939]},{"content":"If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph1\">`missingSchemaAction`</ph> argument to <ph id=\"ph2\">`MissingSchemaAction.Add`</ph>.","pos":[2940,3206],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.","pos":[3207,3294],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."},{"content":"After merging schemas, the data is merged.","pos":[3301,3343]},{"content":"When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Unchanged`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[3350,3582],"source":"       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[3583,3721],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."},{"content":"During a merge, constraints are disabled.","pos":[3728,3769]},{"content":"If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.","pos":[3770,3949],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id=\"ph1\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[3950,4095],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[4096,4223],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]},{"pos":[122493,122644],"content":"The array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to be merged into the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The array of <xref href=\"System.Data.DataRow\"></xref> objects to be merged into the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>."},{"pos":[122717,122946],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve changes in the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve changes in the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[123040,123111],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.MissingSchemaAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values."},{"pos":[123696,124040],"content":"Merges a specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and its schema with the current <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, preserving or discarding changes in the current <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> and handling an incompatible schema according to the given arguments.","needQuote":true,"needEscape":true,"source":"Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema with the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>, preserving or discarding changes in the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> and handling an incompatible schema according to the given arguments."},{"pos":[124053,128296],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.       In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.       To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.       After merging schemas, the data is merged.       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.       During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."},{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.","pos":[417,680],"source":"       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."},{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[687,870]},{"content":"In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.","pos":[871,958],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.","pos":[959,1052],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.","pos":[1053,1269],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[1270,1369]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[1370,1477]},{"content":"The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[1478,1756],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.","pos":[1757,2096],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."},{"content":"To facilitate explanation of the &lt;xref:System.Data.DataSet.Merge%2A&gt; method, we use \"target\" to signify the current &lt;xref:System.Data.DataSet&gt;, and \"source\" to name the second (parameter) &lt;xref:System.Data.DataSet&gt;.","pos":[2103,2318],"source":"       To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>."},{"content":"The target &lt;xref:System.Data.DataSet&gt; is so named because it is the object upon which an action (the merge) occurs.","pos":[2319,2434],"source":" The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs."},{"content":"The second &lt;xref:System.Data.DataSet&gt; is called a \"source\" because the information it contains does not change, but instead is merged into the current &lt;xref:System.Data.DataSet&gt;.","pos":[2435,2613],"source":" The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>."},{"content":"When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.","pos":[2620,2816],"source":"       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[2817,2939]},{"content":"If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph1\">`missingSchemaAction`</ph> argument to <ph id=\"ph2\">`MissingSchemaAction.Add`</ph>.","pos":[2940,3206],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.","pos":[3207,3294],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."},{"content":"After merging schemas, the data is merged.","pos":[3301,3343]},{"content":"When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Unchanged`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[3350,3582],"source":"       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[3583,3721],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."},{"content":"During a merge, constraints are disabled.","pos":[3728,3769]},{"content":"If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.","pos":[3770,3949],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id=\"ph1\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[3950,4095],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[4096,4223],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]},{"pos":[129329,129437],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whose data and schema will be merged.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> whose data and schema will be merged."},{"pos":[129510,129747],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve changes in the current <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve changes in the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[129841,129912],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.MissingSchemaAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values."},{"pos":[130068,130157],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dataSet</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>dataSet</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[130696,131034],"content":"Merges a specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and its schema into the current <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, preserving or discarding changes in the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> and handling an incompatible schema according to the given arguments.","needQuote":true,"needEscape":true,"source":"Merges a specified <xref href=\"System.Data.DataTable\"></xref> and its schema into the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>, preserving or discarding changes in the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> and handling an incompatible schema according to the given arguments."},{"pos":[131047,134766],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.       iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.       After merging schemas, the data is merged.       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.       During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."},{"content":"The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.","pos":[417,680],"source":"       The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."},{"content":"iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[687,871]},{"content":"In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.","pos":[872,959],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.","pos":[960,1053],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.","pos":[1054,1270],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[1271,1370]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[1371,1478]},{"content":"The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[1479,1757],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.","pos":[1758,2097],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."},{"content":"When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.","pos":[2104,2300],"source":"       When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[2301,2423]},{"content":"If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph1\">`missingSchemaAction`</ph> argument to <ph id=\"ph2\">`MissingSchemaAction.Add`</ph>.","pos":[2424,2690],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.","pos":[2691,2778],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."},{"content":"After merging schemas, the data is merged.","pos":[2785,2827]},{"content":"When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id=\"ph1\">`Unchanged`</ph>, <ph id=\"ph2\">`Modified`</ph>, or <ph id=\"ph3\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[2834,3066],"source":"       When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[3067,3205],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."},{"content":"During a merge, constraints are disabled.","pos":[3212,3253]},{"content":"If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.","pos":[3254,3433],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id=\"ph1\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[3434,3579],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[3580,3707],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]},{"pos":[135722,135834],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whose data and schema will be merged.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref> whose data and schema will be merged."},{"pos":[135907,135978],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.MissingSchemaAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values."},{"pos":[136072,136301],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve changes in the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve changes in the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[136457,136546],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dataSet</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>dataSet</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[136857,137029],"content":"Occurs when a target and source <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> have the same primary key value, and &lt;xref:System.Data.DataSet.EnforceConstraints*&gt; is set to true.","needQuote":true,"needEscape":true,"source":"Occurs when a target and source <xref href=\"System.Data.DataRow\"></xref> have the same primary key value, and <xref:System.Data.DataSet.EnforceConstraints*> is set to true."},{"pos":[137042,137184],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","needQuote":false,"needEscape":true,"source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."},{"pos":[137679,137691],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[138012,138087],"content":"Gets or sets the namespace of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the namespace of the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[138100,138810],"content":"The Namespace property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods.       The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>. For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace \"myCompany,\" and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Namespace property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods.       The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>. For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace \"myCompany,\" and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.","pos":[0,706],"nodes":[{"content":"The Namespace property is used when reading and writing an XML document into the &lt;xref:System.Data.DataSet&gt; using the &lt;xref:System.Data.DataSet.ReadXml%2A&gt;, &lt;xref:System.Data.DataSet.WriteXml%2A&gt;, &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;, or &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods.","pos":[0,298],"source":"The Namespace property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods."},{"content":"The namespace of an XML document is used to scope XML attributes and elements when read into a &lt;xref:System.Data.DataSet&gt;.","pos":[305,427],"source":"       The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>."},{"content":"For example, if a &lt;xref:System.Data.DataSet&gt; contains a schema that was read from a document with the namespace \"myCompany,\" and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.","pos":[428,706],"source":" For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace \"myCompany,\" and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored."}]}]},{"pos":[139319,139381],"content":"The namespace of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The namespace of the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[139533,139564],"content":"The namespace already has data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The namespace already has data.","pos":[0,31]}]},{"pos":[140085,140121],"content":"Raises the OnPropertyChanging event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Raises the OnPropertyChanging event.","pos":[0,36]}]},{"pos":[140134,140312],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[140549,140634],"content":"A <xref:System.ComponentModel.PropertyChangedEventArgs> that contains the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt; that contains the event data.","pos":[0,85],"source":"A <xref:System.ComponentModel.PropertyChangedEventArgs> that contains the event data."}]},{"pos":[141134,141262],"content":"Occurs when a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRelation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is removed from a <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Occurs when a <xref href=\"System.Data.DataRelation\"></xref> object is removed from a <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[141274,141353],"content":"This method should be overridden by subclasses to restrict tables being removed","needQuote":true,"needEscape":true,"nodes":[{"content":"This method should be overridden by subclasses to restrict tables being removed","pos":[0,79]}]},{"pos":[141545,141609],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRelation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> being removed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataRelation\"></xref> being removed."},{"pos":[142077,142193],"content":"Occurs when a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is removed from a <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Occurs when a <xref href=\"System.Data.DataTable\"></xref> is removed from a <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[142205,142287],"content":"This method can be overridden by subclasses to restrict tables from being removed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method can be overridden by subclasses to restrict tables from being removed.","pos":[0,82]}]},{"pos":[142850,142911],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> being removed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataTable\"></xref> being removed."},{"pos":[143264,143366],"content":"Gets or sets an XML prefix that aliases the namespace of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets an XML prefix that aliases the namespace of the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[143378,143590],"content":"The Prefix property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property).","needQuote":true,"needEscape":true,"nodes":[{"content":"The Prefix property is used throughout an XML document to identify elements which belong to the namespace of the &lt;xref:System.Data.DataSet&gt; object (as set by the &lt;xref:System.Data.DataSet.Namespace%2A&gt; property).","pos":[0,212],"source":"The Prefix property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property)."}]},{"pos":[144065,144139],"content":"The XML prefix for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> namespace.","needQuote":true,"needEscape":true,"source":"The XML prefix for the <xref href=\"System.Data.DataSet\"></xref> namespace."},{"pos":[144612,144721],"content":"Sends a notification that the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> property is about to change.","needQuote":true,"needEscape":true,"source":"Sends a notification that the specified <xref href=\"System.Data.DataSet\"></xref> property is about to change."},{"pos":[144873,144922],"content":"The name of the property that is about to change.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the property that is about to change.","pos":[0,49]}]},{"pos":[145346,145497],"content":"Reads XML schema and data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","needQuote":true,"needEscape":true,"source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt;."},{"pos":[145510,148600],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.       If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema, as the following example demonstrates.      ```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.","pos":[398,543],"source":"       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[544,633],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[634,692],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[698,965],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[972,1104]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1105,1238]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1245,1397]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1398,1501]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1507,1690],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1691,1805],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[1806,1901]},{"content":"If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes <ph id=\"ph1\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.","pos":[1908,2193],"source":"       If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema, as the following example demonstrates.","pos":[2194,2328],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema, as the following example demonstrates."},{"content":"<ph id=\"ph1\">```   &lt;xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[2334,2972],"source":"```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[2973,3047]}]},{"pos":[149439,149491],"content":"An object that derives from <xref:System.IO.Stream>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that derives from &lt;xref:System.IO.Stream&gt;.","pos":[0,52],"source":"An object that derives from <xref:System.IO.Stream>."}]},{"pos":[149559,149630],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data."},{"pos":[150060,150215],"content":"Reads XML schema and data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.IO.TextReader?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","needQuote":true,"needEscape":true,"source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.TextReader?displayProperty=fullName&gt;."},{"pos":[150228,153474],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.       If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.      ```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```       Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.","pos":[398,543],"source":"       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[544,633],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[634,692],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[698,965],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[972,1104]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1105,1238]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1245,1397]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1398,1501]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1507,1690],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1691,1805],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[1806,1901]},{"content":"If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes <ph id=\"ph1\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.","pos":[1908,2193],"source":"       If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[2194,2327],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."},{"content":"<ph id=\"ph1\">```   &lt;xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\"&gt;   &lt;/xsd:schema&gt;   ```</ph>       Classes that inherit from the &lt;xref:System.IO.TextReader&gt; class include the &lt;xref:System.IO.StreamReader&gt; and &lt;xref:System.IO.StringReader&gt; classes.","pos":[2333,2801],"source":"```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```       Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id=\"ph2\">`XmlReadMode.ReadSchema`</ph>.","pos":[2807,3126],"source":"      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[3127,3201]}]},{"pos":[154321,154437],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TextReader\" name=\"TextReader\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from which to read the schema and data.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_TextReader\" name=\"TextReader\" href=\"\"></xref> from which to read the schema and data."},{"pos":[154505,154576],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data."},{"pos":[154980,155081],"content":"Reads XML schema and data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified file.","needQuote":true,"needEscape":true,"source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified file."},{"pos":[155094,158185],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.       If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.      ```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.","pos":[398,543],"source":"       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[544,633],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[634,692],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[698,965],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[972,1104]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1105,1238]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1245,1397]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1398,1501]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1507,1690],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1691,1805],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[1806,1901]},{"content":"If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes a <ph id=\"ph1\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.","pos":[1908,2195],"source":"       If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[2196,2329],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."},{"content":"<ph id=\"ph1\">```   &lt;xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[2335,2973],"source":"```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[2974,3048]}]},{"pos":[159015,159068],"content":"The filename (including the path) from which to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The filename (including the path) from which to read.","pos":[0,53]}]},{"pos":[159136,159237],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data."},{"pos":[159405,159557],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is not set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[159926,160081],"content":"Reads XML schema and data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.Xml.XmlReader?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","needQuote":true,"needEscape":true,"source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt;."},{"pos":[160094,163203],"content":"The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.       If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling ReadXml to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.      ```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```       <xref:System.Xml.XmlTextReader?displayProperty=fullName> inherits from <xref:System.Xml.XmlReader>.      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with ReadXml by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ReadXml method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[0,225],"source":"The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[226,361],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.","pos":[368,513],"source":"       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[514,603],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[604,662],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[668,935],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[942,1074]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1075,1208]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1215,1367]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1368,1471]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1477,1660],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1661,1775],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[1776,1871]},{"content":"If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes a <ph id=\"ph1\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling ReadXml to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.","pos":[1878,2135],"source":"       If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling ReadXml to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[2136,2269],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."},{"content":"<ph id=\"ph1\">```   &lt;xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\"&gt;   &lt;/xsd:schema&gt;   ```</ph>       &lt;xref:System.Xml.XmlTextReader?displayProperty=fullName&gt; inherits from &lt;xref:System.Xml.XmlReader&gt;.","pos":[2275,2694],"source":"```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```       <xref:System.Xml.XmlTextReader?displayProperty=fullName> inherits from <xref:System.Xml.XmlReader>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with ReadXml by specifying <ph id=\"ph2\">`XmlReadMode.ReadSchema`</ph>.","pos":[2700,2989],"source":"      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with ReadXml by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[2990,3064]}]},{"pos":[164018,164069],"content":"The <xref:System.Xml.XmlReader> from which to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlReader&gt; from which to read.","pos":[0,51],"source":"The <xref:System.Xml.XmlReader> from which to read."}]},{"pos":[164137,164238],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data."},{"pos":[164732,164932],"content":"Reads XML schema and data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt; and <xref href=\"System.Data.XmlReadMode\"></xref>."},{"pos":[164945,168345],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.       The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  When you use ReadXml and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed. For more information on diffgrams, see [DiffGrams](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.       If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.      ```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."},{"content":"The same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.","pos":[398,533],"source":"       The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[534,623],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[624,682],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When you use ReadXml and you set &lt;xref:System.Data.XmlReadMode&gt; to <ph id=\"ph2\">`Diffgram`</ph>, the content of the target <ph id=\"ph3\">`DataSet`</ph> and the original <ph id=\"ph4\">`DataSet`</ph> may differ because of how the diffgram is generated and processed.","pos":[688,909],"source":"      > [!NOTE] >  When you use ReadXml and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed."},{"content":"For more information on diffgrams, see <bpt id=\"p1\">[</bpt>DiffGrams<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[910,1000],"source":" For more information on diffgrams, see [DiffGrams](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[1006,1273],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[1280,1412]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1413,1546]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1553,1705]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1706,1809]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1815,1998],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1999,2113],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[2114,2209]},{"content":"If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes <ph id=\"ph1\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.","pos":[2216,2501],"source":"       If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[2502,2635],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."},{"content":"<ph id=\"ph1\">```   &lt;xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[2641,3279],"source":"```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[3280,3354]}]},{"pos":[168547,168594],"content":"The <xref:System.IO.Stream> from which to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.Stream&gt; from which to read.","pos":[0,47],"source":"The <xref:System.IO.Stream> from which to read."}]},{"pos":[168665,168728],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values."},{"pos":[168796,168897],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data."},{"pos":[169411,169615],"content":"Reads XML schema and data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.IO.TextReader?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.TextReader?displayProperty=fullName&gt; and <xref href=\"System.Data.XmlReadMode\"></xref>."},{"pos":[169628,172717],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.       If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.      ```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.","pos":[398,543],"source":"       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[544,633],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[634,692],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[698,965],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[972,1104]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1105,1238]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1245,1397]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1398,1501]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1507,1690],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1691,1805],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[1806,1901]},{"content":"If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes <ph id=\"ph1\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.","pos":[1908,2193],"source":"       If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[2194,2327],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."},{"content":"<ph id=\"ph1\">```   &lt;xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[2333,2971],"source":"```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[2972,3046]}]},{"pos":[172927,172978],"content":"The <xref:System.IO.TextReader> from which to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextReader&gt; from which to read.","pos":[0,51],"source":"The <xref:System.IO.TextReader> from which to read."}]},{"pos":[173049,173112],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values."},{"pos":[173180,173281],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data."},{"pos":[173769,173919],"content":"Reads XML schema and data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified file and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified file and <xref href=\"System.Data.XmlReadMode\"></xref>."},{"pos":[173932,177023],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.       If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.      ```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.","pos":[398,543],"source":"       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[544,633],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[634,692],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[698,965],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[972,1104]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1105,1238]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1245,1397]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1398,1501]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1507,1690],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1691,1805],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[1806,1901]},{"content":"If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes a <ph id=\"ph1\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.","pos":[1908,2195],"source":"       If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[2196,2329],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."},{"content":"<ph id=\"ph1\">```   &lt;xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[2335,2973],"source":"```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[2974,3048]}]},{"pos":[177216,177269],"content":"The filename (including the path) from which to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The filename (including the path) from which to read.","pos":[0,53]}]},{"pos":[177340,177403],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values."},{"pos":[177471,177572],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data."},{"pos":[177740,177892],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is not set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[178345,178549],"content":"Reads XML schema and data into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.Xml.XmlReader?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt; and <xref href=\"System.Data.XmlReadMode\"></xref>."},{"pos":[178562,181653],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.       If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.      ```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.","pos":[398,543],"source":"       Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[544,633],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[634,692],"source":" To write just the schema, use the `WriteXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[698,965],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."},{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[972,1104]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[1105,1238]},{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[1245,1397]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[1398,1501]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph3\">`DataColumn`</ph> or <ph id=\"ph4\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1507,1690],"source":"      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[1691,1805],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[1806,1901]},{"content":"If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes a <ph id=\"ph1\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.","pos":[1908,2195],"source":"       If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[2196,2329],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."},{"content":"<ph id=\"ph1\">```   &lt;xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[2335,2973],"source":"```   <xsd:schema id=\"MyDataSet\"       elementFormDefault=\"qualified\"       targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"       xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">   </xsd:schema>   ```      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[2974,3048]}]},{"pos":[181863,181914],"content":"The <xref:System.Xml.XmlReader> from which to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlReader&gt; from which to read.","pos":[0,51],"source":"The <xref:System.Xml.XmlReader> from which to read."}]},{"pos":[181985,182048],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values."},{"pos":[182116,182217],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the data.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data."},{"pos":[182657,182771],"content":"Reads the XML schema from the specified &lt;xref:System.IO.Stream&gt; into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Reads the XML schema from the specified <xref:System.IO.Stream> into the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[182784,184043],"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.       The XML schema is written using the XSD standard.      > [!NOTE] >  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.       Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method to create the schema for a &lt;xref:System.Data.DataSet&gt;.","pos":[0,113],"source":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[114,178]},{"content":"To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.","pos":[179,277],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."},{"content":"The XML schema is written using the XSD standard.","pos":[284,333]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[339,436],"source":"      > [!NOTE] >  Data corruption can occur if the msdata:DataType and the xs:type types do not match."},{"content":"No exception will be thrown.","pos":[437,465]},{"content":"The &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method is generally invoked before invoking the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method which is used to fill the &lt;xref:System.Data.DataSet&gt;.","pos":[472,666],"source":"       The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>."},{"content":"Classes that derive from the &lt;xref:System.IO.Stream&gt; class include &lt;xref:System.IO.BufferedStream&gt;, &lt;xref:System.IO.FileStream&gt;, &lt;xref:System.IO.MemoryStream&gt;, and &lt;xref:System.Net.Sockets.NetworkStream&gt;.","pos":[673,877],"source":"       Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;.","pos":[883,1172],"source":"      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[1173,1247]}]},{"pos":[184651,184698],"content":"The <xref:System.IO.Stream> from which to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.Stream&gt; from which to read.","pos":[0,47],"source":"The <xref:System.IO.Stream> from which to read."}]},{"pos":[185164,185282],"content":"Reads the XML schema from the specified &lt;xref:System.IO.TextReader&gt; into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Reads the XML schema from the specified <xref:System.IO.TextReader> into the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[185295,186498],"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.       The XML schema is written using the XSD standard.      > [!NOTE] >  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.       Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method to create the schema for a &lt;xref:System.Data.DataSet&gt;.","pos":[0,113],"source":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[114,178]},{"content":"To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.","pos":[179,277],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."},{"content":"The XML schema is written using the XSD standard.","pos":[284,333]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[339,436],"source":"      > [!NOTE] >  Data corruption can occur if the msdata:DataType and the xs:type types do not match."},{"content":"No exception will be thrown.","pos":[437,465]},{"content":"The &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method is generally invoked before invoking the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method which is used to fill the &lt;xref:System.Data.DataSet&gt;.","pos":[472,666],"source":"       The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>."},{"content":"Classes that inherit from the &lt;xref:System.IO.TextReader&gt; class include the &lt;xref:System.IO.StreamReader&gt; and &lt;xref:System.IO.StringReader&gt; classes.","pos":[673,821],"source":"       Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;.","pos":[827,1116],"source":"      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[1117,1191]}]},{"pos":[187111,187162],"content":"The <xref:System.IO.TextReader> from which to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextReader&gt; from which to read.","pos":[0,51],"source":"The <xref:System.IO.TextReader> from which to read."}]},{"pos":[187602,187697],"content":"Reads the XML schema from the specified file into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Reads the XML schema from the specified file into the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[187710,188753],"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.       The XML schema is written using the XSD standard.      > [!NOTE] >  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method to create the schema for a &lt;xref:System.Data.DataSet&gt;.","pos":[0,113],"source":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[114,178]},{"content":"To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.","pos":[179,277],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."},{"content":"The XML schema is written using the XSD standard.","pos":[284,333]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[339,436],"source":"      > [!NOTE] >  Data corruption can occur if the msdata:DataType and the xs:type types do not match."},{"content":"No exception will be thrown.","pos":[437,465]},{"content":"The &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method is generally invoked before invoking the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method which is used to fill the &lt;xref:System.Data.DataSet&gt;.","pos":[472,666],"source":"       The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;.","pos":[672,958],"source":"      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[959,1033]}]},{"pos":[189173,189227],"content":"The file name (including the path) from which to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file name (including the path) from which to read.","pos":[0,54]}]},{"pos":[189401,189553],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is not set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[189952,190070],"content":"Reads the XML schema from the specified &lt;xref:System.Xml.XmlReader&gt; into the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Reads the XML schema from the specified <xref:System.Xml.XmlReader> into the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[190083,191138],"content":"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.      > [!NOTE] >  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The ReadXmlSchema method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.       The <xref:System.Xml.XmlReader?displayProperty=fullName> class is abstract. A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=fullName> class.      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with ReadXmlSchema. This exception does not occur if you are using .NET Framework version 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the ReadXmlSchema method to create the schema for a &lt;xref:System.Data.DataSet&gt;.","pos":[0,83],"source":"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataSet>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[84,148]},{"content":"The XML schema is written using the XSD standard.","pos":[155,204]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[210,307],"source":"      > [!NOTE] >  Data corruption can occur if the msdata:DataType and the xs:type types do not match."},{"content":"No exception will be thrown.","pos":[308,336]},{"content":"The ReadXmlSchema method is generally invoked before invoking the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method which is used to fill the &lt;xref:System.Data.DataSet&gt;.","pos":[343,507],"source":"       The ReadXmlSchema method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>."},{"content":"The &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt; class is abstract.","pos":[514,589],"source":"       The <xref:System.Xml.XmlReader?displayProperty=fullName> class is abstract."},{"content":"A class that inherits from the <ph id=\"ph1\">`XmlReader`</ph> is the &lt;xref:System.Xml.XmlTextReader?displayProperty=fullName&gt; class.","pos":[590,703],"source":" A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=fullName> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with ReadXmlSchema.","pos":[709,968],"source":"      > [!NOTE] >  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with ReadXmlSchema."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[969,1043]}]},{"pos":[191918,191969],"content":"The <xref:System.Xml.XmlReader> from which to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlReader&gt; from which to read.","pos":[0,51],"source":"The <xref:System.Xml.XmlReader> from which to read."}]},{"pos":[192462,192510],"content":"Ignores attributes and returns an empty DataSet.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ignores attributes and returns an empty DataSet.","pos":[0,48]}]},{"pos":[192693,192718],"content":"The specified XML reader.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified XML reader.","pos":[0,25]}]},{"pos":[193116,193327],"content":"Rolls back all the changes made to the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> since it was created, or since the last time <ph id=\"ph1\">&amp;lt;</ph>xref:System.Data.DataSet.AcceptChanges%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> was called.","needQuote":true,"needEscape":true,"source":"Rolls back all the changes made to the <xref href=\"System.Data.DataSet\"></xref> since it was created, or since the last time &lt;xref:System.Data.DataSet.AcceptChanges%2A?displayProperty=fullName&gt; was called."},{"pos":[193340,194514],"content":"Invoke the RejectChanges to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>.       <xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> method. After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong.       When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method is called, any rows still in edit-mode cancel their edits. New rows are removed. Modified and deleted rows return back to their original state (`DataRowState.Unchanged`).       AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`). They are not applicable to schema or structural changes.","needQuote":false,"needEscape":true,"nodes":[{"content":"Invoke the RejectChanges to call the &lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt; method on all &lt;xref:System.Data.DataTable&gt; objects contained by the &lt;xref:System.Data.DataSet&gt;.","pos":[0,203],"source":"Invoke the RejectChanges to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>."},{"content":"&lt;xref:System.Data.DataRow&gt; objects contained by the &lt;xref:System.Data.DataSet&gt; can each be set into edit mode by invoking the &lt;xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName&gt; method.","pos":[210,408],"source":"       <xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> method."},{"content":"After invoking the &lt;xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName&gt; method, changes can be rejected by calling the &lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt; on the &lt;xref:System.Data.DataTable&gt; to which the &lt;xref:System.Data.DataRow&gt; objects belong.","pos":[409,700],"source":" After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong."},{"content":"When the &lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt; method is called, any rows still in edit-mode cancel their edits.","pos":[707,852],"source":"       When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method is called, any rows still in edit-mode cancel their edits."},{"content":"New rows are removed.","pos":[853,874]},{"content":"Modified and deleted rows return back to their original state (<ph id=\"ph1\">`DataRowState.Unchanged`</ph>).","pos":[875,964],"source":" Modified and deleted rows return back to their original state (`DataRowState.Unchanged`)."},{"content":"AcceptChanges and RejectChanges only apply to &lt;xref:System.Data.DataRow&gt; related changes (that is, <ph id=\"ph1\">`Add`</ph>, <ph id=\"ph2\">`Remove`</ph>, <ph id=\"ph3\">`Delete`</ph>, and <ph id=\"ph4\">`Modify`</ph>).","pos":[971,1111],"source":"       AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`)."},{"content":"They are not applicable to schema or structural changes.","pos":[1112,1168]}]},{"pos":[195377,195482],"content":"Get the collection of relations that link tables and allow navigation from parent tables to child tables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Get the collection of relations that link tables and allow navigation from parent tables to child tables.","pos":[0,105]}]},{"pos":[195898,196139],"content":"A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains a collection of <xref href=\"System.Data.DataRelation\"></xref> objects. An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRelationCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains a collection of <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRelation\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","pos":[0,142],"source":"A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains a collection of <xref href=\"System.Data.DataRelation\"></xref> objects."},{"content":"An empty collection is returned if no <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRelation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects exist.","pos":[143,241],"source":" An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist."}]},{"pos":[196528,196666],"content":"Gets or sets a <bpt id=\"p1\">&lt;xref href=\"System.Data.SerializationFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> used during remoting.","needQuote":true,"needEscape":true,"source":"Gets or sets a <xref href=\"System.Data.SerializationFormat\"></xref> for the <xref href=\"System.Data.DataSet\"></xref> used during remoting."},{"pos":[196833,196895],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.SerializationFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.SerializationFormat\"></xref> object."},{"pos":[197248,197485],"content":"Clears all tables and removes all relations, foreign constraints, and tables from the <xref href=\"System.Data.DataSet\"></xref>. Subclasses should override Reset to restore a <xref href=\"System.Data.DataSet\"></xref> to its original state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clears all tables and removes all relations, foreign constraints, and tables from the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,127],"source":"Clears all tables and removes all relations, foreign constraints, and tables from the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"Subclasses should override Reset to restore a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to its original state.","pos":[128,237],"source":" Subclasses should override Reset to restore a <xref href=\"System.Data.DataSet\"></xref> to its original state."}]},{"pos":[197987,198106],"content":"Gets or sets a <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaSerializationMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for a <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a <xref href=\"System.Data.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[198119,199780],"content":"A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios. Setting the SchemaSerializationMode property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode> causes schema information to be excluded from the serialization payload.       <xref:System.Data.SchemaSerializationMode> is supported only for a typed `DataSet`. For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode>.       <xref:System.Data.SchemaSerializationMode> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified. If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode>.       <xref:System.Data.SchemaSerializationMode> is supported in version 2.0 of the .NET Framework or later.       When <xref:System.Data.SchemaSerializationMode> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized. In addition, they are serialized only if they happen to be different from the default values. None of the `Tables`, `Relations` or `Constraints` are serialized. The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>. These properties are serialized to make sure that overall runtime data integrity is preserved.","needQuote":false,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Data.DataSet&gt; serializes its schema and instance data by default in Web services and remoting scenarios.","pos":[0,119],"source":"A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios."},{"content":"Setting the SchemaSerializationMode property of a typed <ph id=\"ph1\">`DataSet`</ph> to &lt;xref:System.Data.SchemaSerializationMode&gt; causes schema information to be excluded from the serialization payload.","pos":[120,304],"source":" Setting the SchemaSerializationMode property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode> causes schema information to be excluded from the serialization payload."},{"content":"&lt;xref:System.Data.SchemaSerializationMode&gt; is supported only for a typed <ph id=\"ph1\">`DataSet`</ph>.","pos":[311,394],"source":"       <xref:System.Data.SchemaSerializationMode> is supported only for a typed `DataSet`."},{"content":"For an un-typed <ph id=\"ph1\">`DataSet`</ph> this property can only be set to &lt;xref:System.Data.SchemaSerializationMode&gt;.","pos":[395,497],"source":" For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode>."},{"content":"&lt;xref:System.Data.SchemaSerializationMode&gt; should only be used in cases where the schema information of the underlying typed <ph id=\"ph1\">`DataTables`</ph>, <ph id=\"ph2\">`DataRelations`</ph> and <ph id=\"ph3\">`Constraints`</ph> has not been modified.","pos":[504,699],"source":"       <xref:System.Data.SchemaSerializationMode> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified."},{"content":"If modifications have occurred, complete schema information should be serialized with &lt;xref:System.Data.SchemaSerializationMode&gt;.","pos":[700,829],"source":" If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode>."},{"content":"&lt;xref:System.Data.SchemaSerializationMode&gt; is supported in version 2.0 of the .NET Framework or later.","pos":[836,938],"source":"       <xref:System.Data.SchemaSerializationMode> is supported in version 2.0 of the .NET Framework or later."},{"content":"When &lt;xref:System.Data.SchemaSerializationMode&gt; is set, only the top level runtime properties present on the &lt;xref:System.Data.DataSet&gt; are serialized.","pos":[945,1096],"source":"       When <xref:System.Data.SchemaSerializationMode> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized."},{"content":"In addition, they are serialized only if they happen to be different from the default values.","pos":[1097,1190]},{"content":"None of the <ph id=\"ph1\">`Tables`</ph>, <ph id=\"ph2\">`Relations`</ph> or <ph id=\"ph3\">`Constraints`</ph> are serialized.","pos":[1191,1257],"source":" None of the `Tables`, `Relations` or `Constraints` are serialized."},{"content":"The serialized runtime properties include &lt;xref:System.Data.DataSet.DataSetName%2A&gt;, &lt;xref:System.Data.DataSet.Namespace%2A&gt;, &lt;xref:System.Data.DataSet.Prefix%2A&gt;, &lt;xref:System.Data.DataSet.Locale%2A&gt;, &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;, and &lt;xref:System.Data.DataSet.CaseSensitive%2A&gt;.","pos":[1258,1558],"source":" The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>."},{"content":"These properties are serialized to make sure that overall runtime data integrity is preserved.","pos":[1559,1653]}]},{"pos":[199973,200092],"content":"Gets or sets a <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaSerializationMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for a <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a <xref href=\"System.Data.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[200549,200648],"content":"Gets a value indicating whether <xref:System.Data.DataSet.Relations*> property should be persisted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether &lt;xref:System.Data.DataSet.Relations*&gt; property should be persisted.","pos":[0,99],"source":"Gets a value indicating whether <xref:System.Data.DataSet.Relations*> property should be persisted."}]},{"pos":[200660,200838],"content":"You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.","needQuote":true,"needEscape":true,"nodes":[{"content":"You typically use this method if you are either creating a designer for the &lt;xref:System.Data.DataSet&gt;, or creating your own control incorporating the &lt;xref:System.Data.DataSet&gt;.","pos":[0,178],"source":"You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>."}]},{"pos":[201501,201692],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the property value has been changed from its default; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property value has been changed from its default; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[202135,202231],"content":"Gets a value indicating whether <xref:System.Data.DataSet.Tables*> property should be persisted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether &lt;xref:System.Data.DataSet.Tables*&gt; property should be persisted.","pos":[0,96],"source":"Gets a value indicating whether <xref:System.Data.DataSet.Tables*> property should be persisted."}]},{"pos":[202243,202426],"content":"You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.","needQuote":true,"needEscape":true,"nodes":[{"content":"You typically use this method only if you are either creating a designer for the &lt;xref:System.Data.DataSet&gt;, or creating your own control incorporating the &lt;xref:System.Data.DataSet&gt;.","pos":[0,183],"source":"You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>."}]},{"pos":[203034,203225],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the property value has been changed from its default; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property value has been changed from its default; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[203576,203690],"content":"Gets or sets an <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ISite\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets an <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[203702,203905],"content":"Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sites bind a &lt;xref:System.ComponentModel.Component&gt; to a &lt;xref:System.ComponentModel.Container&gt; and enable communication between them, as well as provide a way for the container to manage its components.","pos":[0,203],"source":"Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components."}]},{"pos":[204063,204164],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ISite\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[204772,204908],"content":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,136],"source":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."}]},{"pos":[204920,205110],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","pos":[0,190],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.ComponentModel.IListSource&gt; interface.","pos":[60,190],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface."}]}]},{"pos":[205263,205399],"content":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,136],"source":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."}]},{"pos":[205988,206109],"content":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,121],"source":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."}]},{"pos":[206121,206311],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","pos":[0,190],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.ComponentModel.IListSource&gt; interface.","pos":[60,190],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface."}]}]},{"pos":[206471,206592],"content":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,121],"source":"For a description of this member, see &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."}]},{"pos":[207216,207347],"content":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,131],"source":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."}]},{"pos":[207359,207557],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.Xml.Serialization.IXmlSerializable&gt; interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."}]}]},{"pos":[207730,207861],"content":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,131],"source":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."}]},{"pos":[208556,208685],"content":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,129],"source":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;."}]},{"pos":[208697,208895],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.Xml.Serialization.IXmlSerializable&gt; interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."}]}]},{"pos":[209065,209095],"content":"A <xref:System.Xml.XmlReader>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Xml.XmlReader&gt;.","pos":[0,30],"source":"A <xref:System.Xml.XmlReader>."}]},{"pos":[209793,209923],"content":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"For a description of this member, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,130],"source":"For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;."}]},{"pos":[209935,210133],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.Xml.Serialization.IXmlSerializable&gt; interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."}]}]},{"pos":[210304,210334],"content":"A <xref:System.Xml.XmlWriter>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Xml.XmlWriter&gt;.","pos":[0,30],"source":"A <xref:System.Xml.XmlWriter>."}]},{"pos":[210724,210812],"content":"Gets the collection of tables contained in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the collection of tables contained in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[210824,211043],"content":"To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>. To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>. To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.","pos":[0,219],"nodes":[{"content":"To add tables to the collection, use &lt;xref:System.Data.DataTableCollection.Add%2A&gt; method of the &lt;xref:System.Data.DataTableCollection&gt;.","pos":[0,136],"source":"To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>."},{"content":"To remove tables, use the &lt;xref:System.Data.DataTableCollection.Remove%2A&gt; method.","pos":[137,219],"source":" To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method."}]}]},{"pos":[211604,211816],"content":"The <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>. An empty collection is returned if no <xref href=\"System.Data.DataTable\"></xref> objects exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTableCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contained by this <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,116],"source":"The <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>."},{"content":"An empty collection is returned if no <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects exist.","pos":[117,212],"source":" An empty collection is returned if no <xref href=\"System.Data.DataTable\"></xref> objects exist."}]},{"pos":[212230,212378],"content":"Writes the current data for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","needQuote":true,"needEscape":true,"source":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt;."},{"pos":[212391,213323],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the <ph id=\"ph1\">`mode`</ph> parameter, and set its value to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,359],"source":" To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.","pos":[366,509],"source":"       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[510,597],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[598,654],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[660,927],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[213903,213960],"content":"A <xref:System.IO.Stream> object used to write to a file.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; object used to write to a file.","pos":[0,57],"source":"A <xref:System.IO.Stream> object used to write to a file."}]},{"pos":[214396,214517],"content":"Writes the current data for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.IO.TextWriter&gt;.","needQuote":true,"needEscape":true,"source":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref:System.IO.TextWriter>."},{"pos":[214530,215462],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the <ph id=\"ph1\">`mode`</ph> parameter, and set its value to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,359],"source":" To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.","pos":[366,509],"source":"       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[510,597],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[598,654],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[660,927],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[215624,215683],"content":"The <xref:System.IO.TextWriter> object with which to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; object with which to write.","pos":[0,59],"source":"The <xref:System.IO.TextWriter> object with which to write."}]},{"pos":[216093,216188],"content":"Writes the current data for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified file.","needQuote":true,"needEscape":true,"source":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> to the specified file."},{"pos":[216201,217133],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the <ph id=\"ph1\">`mode`</ph> parameter, and set its value to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,359],"source":" To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.","pos":[366,509],"source":"       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[510,597],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[598,654],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[660,927],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[217278,217331],"content":"The file name (including the path) to which to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file name (including the path) to which to write.","pos":[0,53]}]},{"pos":[217500,217652],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is not set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[218026,218144],"content":"Writes the current data for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified &lt;xref:System.Xml.XmlWriter&gt;.","needQuote":true,"needEscape":true,"source":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> to the specified <xref:System.Xml.XmlWriter>."},{"pos":[218157,219089],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the <ph id=\"ph1\">`mode`</ph> parameter, and set its value to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,359],"source":" To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.","pos":[366,509],"source":"       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[510,597],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[598,654],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[660,927],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[219251,219303],"content":"The <xref:System.Xml.XmlWriter> with which to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlWriter&gt; with which to write.","pos":[0,52],"source":"The <xref:System.Xml.XmlWriter> with which to write."}]},{"pos":[219808,220184],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt; and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,226],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt; and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[227,376],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."}]},{"pos":[220197,221075],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, set the <ph id=\"ph1\">`mode`</ph> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,305],"source":" To write both data and schema, set the `mode` parameter to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.","pos":[312,455],"source":"       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[456,543],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[544,600],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[606,873],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[221260,221317],"content":"A <xref:System.IO.Stream> object used to write to a file.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; object used to write to a file.","pos":[0,57],"source":"A <xref:System.IO.Stream> object used to write to a file."}]},{"pos":[221389,221453],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[221978,222327],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref:System.IO.TextWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.IO.TextWriter&gt; and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,199],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref:System.IO.TextWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[200,349],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."}]},{"pos":[222340,223218],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, set the <ph id=\"ph1\">`mode`</ph> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,305],"source":" To write both data and schema, set the `mode` parameter to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.","pos":[312,455],"source":"       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[456,543],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[544,600],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[606,873],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[224078,224173],"content":"A &lt;xref:System.IO.TextWriter?displayProperty=fullName&gt; object used to write the document.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <ph id=\"ph1\">&amp;lt;</ph>xref:System.IO.TextWriter?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> object used to write the document.","pos":[0,95],"source":"A &lt;xref:System.IO.TextWriter?displayProperty=fullName&gt; object used to write the document."}]},{"pos":[224245,224309],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[224808,225147],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified file using the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,189],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[190,339],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."}]},{"pos":[225160,226038],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, set the <ph id=\"ph1\">`mode`</ph> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,305],"source":" To write both data and schema, set the `mode` parameter to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.","pos":[312,455],"source":"       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[456,543],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[544,600],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[606,873],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[226577,226630],"content":"The file name (including the path) to which to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file name (including the path) to which to write.","pos":[0,53]}]},{"pos":[226702,226766],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[226935,227087],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is not set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[227550,227899],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref:System.Xml.XmlWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current data, and optionally the schema, for the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified &lt;xref:System.Xml.XmlWriter&gt; and <bpt id=\"p2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,199],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref:System.Xml.XmlWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[200,349],"source":" To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>."}]},{"pos":[227912,228790],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, set the <ph id=\"ph1\">`mode`</ph> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,305],"source":" To write both data and schema, set the `mode` parameter to `WriteSchema`."},{"content":"Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.","pos":[312,455],"source":"       Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[456,543],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[544,600],"source":" To read just the schema, use the `ReadXmlSchema` method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.","pos":[606,873],"source":"      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[229554,229606],"content":"The <xref:System.Xml.XmlWriter> with which to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlWriter&gt; with which to write.","pos":[0,52],"source":"The <xref:System.Xml.XmlWriter> with which to write."}]},{"pos":[229678,229742],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."},{"pos":[230188,230346],"content":"Writes the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure as an XML schema to the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> object.","needQuote":true,"needEscape":true,"source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt; object."},{"pos":[230359,230967],"content":"Use the WriteXmlSchema method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the WriteXmlSchema method.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.       Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the WriteXmlSchema method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the WriteXmlSchema method.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.       Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.","pos":[0,602],"nodes":[{"content":"Use the WriteXmlSchema method to write the schema for a &lt;xref:System.Data.DataSet&gt; to an XML document.","pos":[0,102],"source":"Use the WriteXmlSchema method to write the schema for a <xref:System.Data.DataSet> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[103,167]},{"content":"To write a schema to an XML document, use the WriteXmlSchema method.","pos":[168,236]},{"content":"The XML schema is written using the XSD standard.","pos":[243,292]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; method.","pos":[299,391],"source":"       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method."},{"content":"Classes that derive from the &lt;xref:System.IO.Stream&gt; class include &lt;xref:System.IO.BufferedStream&gt;, &lt;xref:System.IO.FileStream&gt;, &lt;xref:System.IO.MemoryStream&gt;, and &lt;xref:System.Net.Sockets.NetworkStream&gt;.","pos":[398,602],"source":"       Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>."}]}]},{"pos":[231541,231598],"content":"A <xref:System.IO.Stream> object used to write to a file.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; object used to write to a file.","pos":[0,57],"source":"A <xref:System.IO.Stream> object used to write to a file."}]},{"pos":[232070,232201],"content":"Writes the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure as an XML schema to the specified &lt;xref:System.IO.TextWriter&gt; object.","needQuote":true,"needEscape":true,"source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref:System.IO.TextWriter> object."},{"pos":[232214,233085],"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.       Classes the derive from the <xref:System.IO.TextWriter?displayProperty=fullName> class include the <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>, and <xref:System.IO.StringWriter?displayProperty=fullName>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.       Classes the derive from the <xref:System.IO.TextWriter?displayProperty=fullName> class include the <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>, and <xref:System.IO.StringWriter?displayProperty=fullName>.","pos":[0,865],"nodes":[{"content":"Use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataSet&gt; to an XML document.","pos":[0,132],"source":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[133,197]},{"content":"To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.","pos":[198,296],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."},{"content":"The XML schema is written using the XSD standard.","pos":[303,352]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; method.","pos":[359,451],"source":"       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method."},{"content":"Classes the derive from the &lt;xref:System.IO.TextWriter?displayProperty=fullName&gt; class include the &lt;xref:System.Web.HttpWriter?displayProperty=fullName&gt;, &lt;xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName&gt;, &lt;xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName&gt;, &lt;xref:System.IO.StreamWriter?displayProperty=fullName&gt;, and &lt;xref:System.IO.StringWriter?displayProperty=fullName&gt;.","pos":[458,865],"source":"       Classes the derive from the <xref:System.IO.TextWriter?displayProperty=fullName> class include the <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>, and <xref:System.IO.StringWriter?displayProperty=fullName>."}]}]},{"pos":[233873,233932],"content":"The <xref:System.IO.TextWriter> object with which to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; object with which to write.","pos":[0,59],"source":"The <xref:System.IO.TextWriter> object with which to write."}]},{"pos":[234378,234467],"content":"Writes the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure as an XML schema to a file.","needQuote":true,"needEscape":true,"source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to a file."},{"pos":[234480,234935],"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.","pos":[0,451],"nodes":[{"content":"Use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataSet&gt; to an XML document.","pos":[0,132],"source":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[133,197]},{"content":"To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.","pos":[198,296],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."},{"content":"The XML schema is written using the XSD standard.","pos":[303,352]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; method.","pos":[359,451],"source":"       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method."}]}]},{"pos":[235358,235411],"content":"The file name (including the path) to which to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file name (including the path) to which to write.","pos":[0,53]}]},{"pos":[235586,235738],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is not set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[236142,236262],"content":"Writes the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure as an XML schema to an &lt;xref:System.Xml.XmlWriter&gt; object.","needQuote":true,"needEscape":true,"source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to an <xref:System.Xml.XmlWriter> object."},{"pos":[236275,236901],"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.       One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=fullName> class is the <xref:System.Xml.XmlTextWriter?displayProperty=fullName> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.       One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=fullName> class is the <xref:System.Xml.XmlTextWriter?displayProperty=fullName> class.","pos":[0,620],"nodes":[{"content":"Use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataSet&gt; to an XML document.","pos":[0,132],"source":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[133,197]},{"content":"To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.","pos":[198,296],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."},{"content":"The XML schema is written using the XSD standard.","pos":[303,352]},{"content":"To write the data to an XML document, use the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; method.","pos":[359,451],"source":"       To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method."},{"content":"One class that inherits from the &lt;xref:System.Xml.XmlWriter?displayProperty=fullName&gt; class is the &lt;xref:System.Xml.XmlTextWriter?displayProperty=fullName&gt; class.","pos":[458,620],"source":"       One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=fullName> class is the <xref:System.Xml.XmlTextWriter?displayProperty=fullName> class."}]}]},{"pos":[237740,237784],"content":"The <xref:System.Xml.XmlWriter> to write to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Xml.XmlWriter&gt; to write to.","pos":[0,44],"source":"The <xref:System.Xml.XmlWriter> to write to."}]},{"pos":[238393,238551],"content":"Writes the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure as an XML schema to the specified <ph id=\"ph1\">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> object.","needQuote":true,"needEscape":true,"source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt; object."},{"pos":[238758,238834],"content":"A &lt;xref:System.IO.Stream?displayProperty=fullName&gt; object to write to.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <ph id=\"ph1\">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> object to write to.","pos":[0,76],"source":"A &lt;xref:System.IO.Stream?displayProperty=fullName&gt; object to write to."}]},{"pos":[238944,239000],"content":"A delegate used to convert <xref:System.Type> to string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A delegate used to convert &lt;xref:System.Type&gt; to string.","pos":[0,56],"source":"A delegate used to convert <xref:System.Type> to string."}]},{"pos":[239629,239753],"content":"Writes the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure as an XML schema to the specified &lt;xref:System.IO.TextWriter&gt;.","needQuote":true,"needEscape":true,"source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref:System.IO.TextWriter>."},{"pos":[239968,240017],"content":"A <xref:System.IO.TextWriter> object to write to.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.TextWriter&gt; object to write to.","pos":[0,49],"source":"A <xref:System.IO.TextWriter> object to write to."}]},{"pos":[240127,240183],"content":"A delegate used to convert <xref:System.Type> to string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A delegate used to convert &lt;xref:System.Type&gt; to string.","pos":[0,56],"source":"A delegate used to convert <xref:System.Type> to string."}]},{"pos":[240786,240875],"content":"Writes the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure as an XML schema to a file.","needQuote":true,"needEscape":true,"source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to a file."},{"pos":[241073,241106],"content":"The name of the file to write to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the file to write to.","pos":[0,33]}]},{"pos":[241216,241272],"content":"A delegate used to convert <xref:System.Type> to string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A delegate used to convert &lt;xref:System.Type&gt; to string.","pos":[0,56],"source":"A delegate used to convert <xref:System.Type> to string."}]},{"pos":[241898,242022],"content":"Writes the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure as an XML schema to the specified &lt;xref:System.Xml.XmlWriter&gt;.","needQuote":true,"needEscape":true,"source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref:System.Xml.XmlWriter>."},{"pos":[242237,242286],"content":"A <xref:System.Xml.XmlWriter> object to write to.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Xml.XmlWriter&gt; object to write to.","pos":[0,49],"source":"A <xref:System.Xml.XmlWriter> object to write to."}]},{"pos":[242396,242452],"content":"A delegate used to convert <xref:System.Type> to string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A delegate used to convert &lt;xref:System.Type&gt; to string.","pos":[0,56],"source":"A delegate used to convert <xref:System.Type> to string."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.DataSet\n  id: DataSet\n  children:\n  - System.Data.DataSet.#ctor\n  - System.Data.DataSet.#ctor(System.String)\n  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)\n  - System.Data.DataSet.AcceptChanges\n  - System.Data.DataSet.BeginInit\n  - System.Data.DataSet.CaseSensitive\n  - System.Data.DataSet.Clear\n  - System.Data.DataSet.Clone\n  - System.Data.DataSet.Copy\n  - System.Data.DataSet.CreateDataReader\n  - System.Data.DataSet.CreateDataReader(System.Data.DataTable[])\n  - System.Data.DataSet.DataSetName\n  - System.Data.DataSet.DefaultViewManager\n  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)\n  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataSet.EndInit\n  - System.Data.DataSet.EnforceConstraints\n  - System.Data.DataSet.ExtendedProperties\n  - System.Data.DataSet.GetChanges\n  - System.Data.DataSet.GetChanges(System.Data.DataRowState)\n  - System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)\n  - System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataSet.GetSchemaSerializable\n  - System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataSet.GetXml\n  - System.Data.DataSet.GetXmlSchema\n  - System.Data.DataSet.HasChanges\n  - System.Data.DataSet.HasChanges(System.Data.DataRowState)\n  - System.Data.DataSet.HasErrors\n  - System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])\n  - System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])\n  - System.Data.DataSet.InferXmlSchema(System.String,System.String[])\n  - System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])\n  - System.Data.DataSet.Initialized\n  - System.Data.DataSet.InitializeDerivedDataSet\n  - System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataSet.IsInitialized\n  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\n  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])\n  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\n  - System.Data.DataSet.Locale\n  - System.Data.DataSet.Merge(System.Data.DataRow[])\n  - System.Data.DataSet.Merge(System.Data.DataSet)\n  - System.Data.DataSet.Merge(System.Data.DataTable)\n  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)\n  - System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)\n  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)\n  - System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  - System.Data.DataSet.MergeFailed\n  - System.Data.DataSet.Namespace\n  - System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  - System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)\n  - System.Data.DataSet.OnRemoveTable(System.Data.DataTable)\n  - System.Data.DataSet.Prefix\n  - System.Data.DataSet.RaisePropertyChanging(System.String)\n  - System.Data.DataSet.ReadXml(System.IO.Stream)\n  - System.Data.DataSet.ReadXml(System.IO.TextReader)\n  - System.Data.DataSet.ReadXml(System.String)\n  - System.Data.DataSet.ReadXml(System.Xml.XmlReader)\n  - System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)\n  - System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)\n  - System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)\n  - System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)\n  - System.Data.DataSet.ReadXmlSchema(System.IO.Stream)\n  - System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)\n  - System.Data.DataSet.ReadXmlSchema(System.String)\n  - System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)\n  - System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)\n  - System.Data.DataSet.RejectChanges\n  - System.Data.DataSet.Relations\n  - System.Data.DataSet.RemotingFormat\n  - System.Data.DataSet.Reset\n  - System.Data.DataSet.SchemaSerializationMode\n  - System.Data.DataSet.ShouldSerializeRelations\n  - System.Data.DataSet.ShouldSerializeTables\n  - System.Data.DataSet.Site\n  - System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection\n  - System.Data.DataSet.System#ComponentModel#IListSource#GetList\n  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema\n  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  - System.Data.DataSet.Tables\n  - System.Data.DataSet.WriteXml(System.IO.Stream)\n  - System.Data.DataSet.WriteXml(System.IO.TextWriter)\n  - System.Data.DataSet.WriteXml(System.String)\n  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter)\n  - System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  - System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  - System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)\n  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream)\n  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)\n  - System.Data.DataSet.WriteXmlSchema(System.String)\n  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)\n  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})\n  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})\n  - System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})\n  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})\n  langs:\n  - csharp\n  name: DataSet\n  nameWithType: DataSet\n  fullName: System.Data.DataSet\n  type: Class\n  summary: Represents an in-memory cache of data.\n  remarks: \"The DataSet, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture. The DataSet consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects. You can also enforce data integrity in the DataSet by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects. For further details about working with DataSet objects, see [DataSets, DataTables, and DataViews](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy. The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property. When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive. For example, if one <xref:System.Data.DataTable> is named \\\"mydatatable\\\" and another is named \\\"Mydatatable\\\", a string used to search for one of the tables is regarded as case sensitive. However, if \\\"mydatatable\\\" exists and \\\"Mydatatable\\\" does not, the search string is regarded as case insensitive. For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](~/add/includes/ajax-current-ext-md.md).  \\n  \\n A DataSet can read and write data and schema as XML documents. The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled. You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method. To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method.  \\n  \\n In a typical multiple-tier implementation, the steps for creating and refreshing a DataSet, and in turn, updating the original data are to:  \\n  \\n1.  Build and fill each <xref:System.Data.DataTable> in a DataSet with data from a data source using a <xref:System.Data.Common.DataAdapter>.  \\n  \\n2.  Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects.  \\n  \\n3.  Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second DataSet that features only the changes to the data.  \\n  \\n4.  Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second DataSet as an argument.  \\n  \\n5.  Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second DataSet into the first.  \\n  \\n6.  Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the DataSet. Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes.  \\n  \\n> [!NOTE]\\n>  The DataSet and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting. These are the only ADO.NET objects that can be remoted.  \\n  \\n> [!NOTE]\\n>  Classes inherited from DataSet are not finalized by the garbage collector, because the finalizer has been suppressed in DataSet. The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector.\"\n  example:\n  - \"The following example consists of several methods that, combined, create and fill a DataSet from the **Northwind** database.  \\n  \\n [!code-cs[Classic WebData DataSet Example#1](~/add/codesnippet/csharp/t-system.data.dataset_1.cs)]\\n [!code-vb[Classic WebData DataSet Example#1](~/add/codesnippet/visualbasic/t-system.data.dataset_1.vb)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultProperty(\"DataSetName\")]\n\n      [System.ComponentModel.Designer(\"Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.ComponentModel.ToolboxItem(\"Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.Xml.Serialization.XmlRoot(\"DataSet\")]\n\n      [System.Xml.Serialization.XmlSchemaProvider(\"GetDataSetSchema\")]\n\n      public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable\n  inheritance:\n  - System.Object\n  - System.ComponentModel.MarshalByValueComponent\n  implements:\n  - System.ComponentModel.IListSource\n  - System.ComponentModel.ISupportInitializeNotification\n  - System.Runtime.Serialization.ISerializable\n  - System.Xml.Serialization.IXmlSerializable\n  inheritedMembers:\n  - System.ComponentModel.MarshalByValueComponent.Container\n  - System.ComponentModel.MarshalByValueComponent.DesignMode\n  - System.ComponentModel.MarshalByValueComponent.Dispose\n  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)\n  - System.ComponentModel.MarshalByValueComponent.Disposed\n  - System.ComponentModel.MarshalByValueComponent.Events\n  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)\n  - System.ComponentModel.MarshalByValueComponent.ToString\n  platform:\n  - net462\n- uid: System.Data.DataSet.#ctor\n  id: '#ctor'\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DataSet()\n  nameWithType: DataSet.DataSet()\n  fullName: System.Data.DataSet.DataSet()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DataSet\"></xref> class.\n  remarks: \"This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, \\\"NewDataSet,\\\" for the new instance.  \\n  \\n A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition.\"\n  example:\n  - \"The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.  \\n  \\n [!code-vb[Classic WebData DataSet.DataSet Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_1_1.vb)]\"\n  syntax:\n    content: public DataSet ();\n    parameters: []\n  overload: System.Data.DataSet.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DataSet(String)\n  nameWithType: DataSet.DataSet(String)\n  fullName: System.Data.DataSet.DataSet(String)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of a <xref href=\"System.Data.DataSet\"></xref> class with the given name.\n  remarks: A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition.\n  example:\n  - \"The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.  \\n  \\n [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_0_1.vb)]\"\n  syntax:\n    content: public DataSet (string dataSetName);\n    parameters:\n    - id: dataSetName\n      type: System.String\n      description: The name of the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DataSet(SerializationInfo,StreamingContext)\n  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of a <xref href=\"System.Data.DataSet\"></xref> class that has the given serialization information and context.\n  syntax:\n    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The data needed to serialize or deserialize an object.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The source and destination of a given serialized stream.\n  overload: System.Data.DataSet.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)'\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DataSet(SerializationInfo,StreamingContext,Boolean)\n  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)\n  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DataSet\"></xref> class.\n  syntax:\n    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref:System.Runtime.Serialization.StreamingContext> object.\n    - id: ConstructSchema\n      type: System.Boolean\n      description: The boolean value.\n  overload: System.Data.DataSet.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.AcceptChanges\n  id: AcceptChanges\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: AcceptChanges()\n  nameWithType: DataSet.AcceptChanges()\n  fullName: System.Data.DataSet.AcceptChanges()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Commits all the changes made to this <xref href=\"System.Data.DataSet\"></xref> since it was loaded or since the last time AcceptChanges was called.\n  remarks: \"Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have AcceptChanges methods. Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called. Similarly, invoking AcceptChanges on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>. In this manner, you have multiple levels at which the method can be invoked. Calling the AcceptChanges of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.  \\n  \\n When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully. The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.  \\n  \\n If the `DataSet` contains <xref:System.Data.ForeignKeyConstraint> objects, invoking the `AcceptChanges` method also causes the <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> to be enforced.  \\n  \\n> [!NOTE]\\n>  `AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify). They are not applicable to schema or structural changes.  \\n>   \\n>  Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter. In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead. See [Updating Data Sources with DataAdapters](http://msdn.microsoft.com/library/33y2221y.aspx) for more information.\"\n  example:\n  - \"The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>. The AcceptChanges method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.  \\n  \\n [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ac_1.vb)]\\n [!code-cs[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/csharp/m-system.data.dataset.ac_1.cs)]\"\n  syntax:\n    content: public void AcceptChanges ();\n    parameters: []\n  overload: System.Data.DataSet.AcceptChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.BeginInit\n  id: BeginInit\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: BeginInit()\n  nameWithType: DataSet.BeginInit()\n  fullName: System.Data.DataSet.BeginInit()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Begins the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component. The initialization occurs at run time.\n  remarks: The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization. Using the BeginInit and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.\n  syntax:\n    content: public void BeginInit ();\n    parameters: []\n  overload: System.Data.DataSet.BeginInit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.CaseSensitive\n  id: CaseSensitive\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: CaseSensitive\n  nameWithType: DataSet.CaseSensitive\n  fullName: System.Data.DataSet.CaseSensitive\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets a value indicating whether string comparisons within <xref href=\"System.Data.DataTable\"></xref> objects are case-sensitive.\n  remarks: \"The CaseSensitive property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method.  \\n  \\n By default, setting the CaseSensitive property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value.\"\n  example:\n  - \"The following example toggles the CaseSensitive property.  \\n  \\n [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ca_1.vb)]\"\n  syntax:\n    content: public bool CaseSensitive { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if string comparisons are case-sensitive; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataSet.CaseSensitive*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Clear\n  id: Clear\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: DataSet.Clear()\n  fullName: System.Data.DataSet.Clear()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Clears the <xref href=\"System.Data.DataSet\"></xref> of any data by removing all rows in all tables.\n  remarks: If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling Clear or <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> raises the <xref:System.NotSupportedException>. To avoid this situation, traverse each table, removing each row one at a time.\n  example:\n  - \"The following example clears the <xref:System.Data.DataSet> of all rows in all tables.  \\n  \\n [!code-vb[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_1_1.vb)]\\n [!code-cs[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_1_1.cs)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Data.DataSet.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Clone\n  id: Clone\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: DataSet.Clone()\n  fullName: System.Data.DataSet.Clone()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Copies the structure of the <xref href=\"System.Data.DataSet\"></xref>, including all <xref href=\"System.Data.DataTable\"></xref> schemas, relations, and constraints. Does not copy any data.\n  remarks: >-\n    > [!NOTE]\n\n    >  If these classes have been subclassed, the clone will also be of the same subclasses.\n  example:\n  - \"The following example creates a clone of a <xref:System.Data.DataSet> object's schema.  \\n  \\n [!code-cs[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_0_1.cs)]\\n [!code-vb[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_0_1.vb)]\"\n  syntax:\n    content: public virtual System.Data.DataSet Clone ();\n    parameters: []\n    return:\n      type: System.Data.DataSet\n      description: A new <xref href=\"System.Data.DataSet\"></xref> with the same schema as the current <xref href=\"System.Data.DataSet\"></xref>, but none of the data.\n  overload: System.Data.DataSet.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Copy\n  id: Copy\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: DataSet.Copy()\n  fullName: System.Data.DataSet.Copy()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Copies both the structure and data for this <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example uses the Copy method to create a copy of the original <xref:System.Data.DataSet>.  \\n  \\n [!code-cs[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/csharp/m-system.data.dataset.copy_1.cs)]\\n [!code-vb[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.copy_1.vb)]\"\n  syntax:\n    content: public System.Data.DataSet Copy ();\n    parameters: []\n    return:\n      type: System.Data.DataSet\n      description: \"A new <xref href=\\\"System.Data.DataSet\\\"></xref> with the same structure (table schemas, relations, and constraints) and data as this <xref href=\\\"System.Data.DataSet\\\"></xref>.  \\n  \\n <div class=\\\"alert NOTE\\\">  \\n If these classes have been subclassed, the copy will also be of the same subclasses.  \\n  \\n</div>\"\n  overload: System.Data.DataSet.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.CreateDataReader\n  id: CreateDataReader\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: CreateDataReader()\n  nameWithType: DataSet.CreateDataReader()\n  fullName: System.Data.DataSet.CreateDataReader()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Returns a <xref href=\"System.Data.DataTableReader\"></xref> with one result set per <xref href=\"System.Data.DataTable\"></xref>, in the same sequence as the tables appear in the <xref:System.Data.DataSet.Tables*> collection.\n  remarks: In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.\n  example:\n  - \"The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>. The example then passes the filled `DataSet` to a procedure that calls the CreateDataReader method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>. The example displays the results in the Console window.  \\n  \\n [!code-vb[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_0_1.vb)]\\n [!code-cs[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_0_1.cs)]\"\n  syntax:\n    content: public System.Data.DataTableReader CreateDataReader ();\n    parameters: []\n    return:\n      type: System.Data.DataTableReader\n      description: A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.CreateDataReader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])\n  id: CreateDataReader(System.Data.DataTable[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: CreateDataReader(DataTable[])\n  nameWithType: DataSet.CreateDataReader(DataTable[])\n  fullName: System.Data.DataSet.CreateDataReader(DataTable[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Returns a <xref href=\"System.Data.DataTableReader\"></xref> with one result set per <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`. Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`.\n  example:\n  - \"This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>. The example calls the CreateDataReader method and displays the contents of the returned <xref:System.Data.DataTableReader>. Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters. The example displays the results in the Console window.  \\n  \\n [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_1_1.vb)]\\n [!code-cs[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_1_1.cs)]\"\n  syntax:\n    content: public System.Data.DataTableReader CreateDataReader (System.Data.DataTable[] dataTables);\n    parameters:\n    - id: dataTables\n      type: System.Data.DataTable[]\n      description: An array of DataTables providing the order of the result sets to be returned in the <xref href=\"System.Data.DataTableReader\"></xref>.\n    return:\n      type: System.Data.DataTableReader\n      description: A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>. The returned result sets are in the order specified by the <code>dataTables</code> parameter.\n  overload: System.Data.DataSet.CreateDataReader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.DataSetName\n  id: DataSetName\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DataSetName\n  nameWithType: DataSet.DataSetName\n  fullName: System.Data.DataSet.DataSetName\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the name of the current <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates a new <xref:System.Data.DataSet> with the given DataSetName.  \\n  \\n [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.da_1.vb)]\\n [!code-cs[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/csharp/p-system.data.dataset.da_1.cs)]\"\n  syntax:\n    content: public string DataSetName { get; set; }\n    return:\n      type: System.String\n      description: The name of the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.DataSetName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.DefaultViewManager\n  id: DefaultViewManager\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DefaultViewManager\n  nameWithType: DataSet.DefaultViewManager\n  fullName: System.Data.DataSet.DefaultViewManager\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a custom view of the data contained in the <xref href=\"System.Data.DataSet\"></xref> to allow filtering, searching, and navigating using a custom <xref href=\"System.Data.DataViewManager\"></xref>.\n  remarks: \"The <xref:System.Data.DataViewManager> returned by the DefaultViewManager property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>.  \\n  \\n When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the DefaultViewManager property.\"\n  example:\n  - \"The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.  \\n  \\n [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.de_1.vb)]\"\n  syntax:\n    content: public System.Data.DataViewManager DefaultViewManager { get; }\n    return:\n      type: System.Data.DataViewManager\n      description: A <xref href=\"System.Data.DataViewManager\"></xref> object.\n  overload: System.Data.DataSet.DefaultViewManager*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)\n  id: DetermineSchemaSerializationMode(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DetermineSchemaSerializationMode(XmlReader)\n  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)\n  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Determines the <xref:System.Data.DataSet.SchemaSerializationMode*> for a <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.\n  syntax:\n    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref:System.Xml.XmlReader> instance that is passed during deserialization of the <xref href=\"System.Data.DataSet\"></xref>.\n    return:\n      type: System.Data.SchemaSerializationMode\n      description: An <xref href=\"System.Data.SchemaSerializationMode\"></xref> enumeration indicating whether schema information has been omitted from the payload.\n  overload: System.Data.DataSet.DetermineSchemaSerializationMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)\n  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Determines the <xref:System.Data.DataSet.SchemaSerializationMode*> for a <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.\n  syntax:\n    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that a <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>’s protected constructor &lt;xref:System.Data.DataSet.%23ctor%2A&gt; is invoked with during deserialization in remoting scenarios.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref:System.Runtime.Serialization.StreamingContext> that a <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>’s protected constructor &lt;xref:System.Data.DataSet.%23ctor%2A&gt; is invoked with during deserialization in remoting scenarios.\n    return:\n      type: System.Data.SchemaSerializationMode\n      description: An <xref href=\"System.Data.SchemaSerializationMode\"></xref> enumeration indicating whether schema information has been omitted from the payload.\n  overload: System.Data.DataSet.DetermineSchemaSerializationMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.EndInit\n  id: EndInit\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: EndInit()\n  nameWithType: DataSet.EndInit()\n  fullName: System.Data.DataSet.EndInit()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Ends the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component. The initialization occurs at run time.\n  remarks: The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization. Using the <xref:System.Data.DataSet.BeginInit%2A> and EndInit methods prevents the control from being used before it is fully initialized.\n  syntax:\n    content: public void EndInit ();\n    parameters: []\n  overload: System.Data.DataSet.EndInit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.EnforceConstraints\n  id: EnforceConstraints\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: EnforceConstraints\n  nameWithType: DataSet.EnforceConstraints\n  fullName: System.Data.DataSet.EnforceConstraints\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.\n  remarks: Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property). For more information about creating constraints, see [DataTable Constraints](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - \"The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>. The EnforceConstraints property is set to `false` and the values of each row are set to the same value. When the EnforceConstraints property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.  \\n  \\n [!code-cs[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/csharp/p-system.data.dataset.en_1.cs)]\\n [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.en_1.vb)]\"\n  syntax:\n    content: public bool EnforceConstraints { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if rules are enforced; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Data.DataSet.EnforceConstraints*\n  exceptions:\n  - type: System.Data.ConstraintException\n    commentId: T:System.Data.ConstraintException\n    description: One or more constraints cannot be enforced.\n  platform:\n  - net462\n- uid: System.Data.DataSet.ExtendedProperties\n  id: ExtendedProperties\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ExtendedProperties\n  nameWithType: DataSet.ExtendedProperties\n  fullName: System.Data.DataSet.ExtendedProperties\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the collection of customized user information associated with the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>.\n  remarks: \"The ExtendedProperties property enables you to store custom information with the `DataSet`. For example, you might store a time when the data should be refreshed.  \\n  \\n Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML.\"\n  example:\n  - \"The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property. The second example retrieves the custom property.  \\n  \\n [!code-cs[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ex_1.cs)]\\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ex_1.vb)]\"\n  syntax:\n    content: public System.Data.PropertyCollection ExtendedProperties { get; }\n    return:\n      type: System.Data.PropertyCollection\n      description: A <xref href=\"System.Data.PropertyCollection\"></xref> with all custom user information.\n  overload: System.Data.DataSet.ExtendedProperties*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.GetChanges\n  id: GetChanges\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetChanges()\n  nameWithType: DataSet.GetChanges()\n  fullName: System.Data.DataSet.GetChanges()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a copy of the <xref href=\"System.Data.DataSet\"></xref> that contains all changes made to it since it was loaded or since <xref:System.Data.DataSet.AcceptChanges*> was last called.\n  remarks: Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes. Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows. The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes.\n  example:\n  - \"The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the GetChanges method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \\n  \\n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_0_1.cs)]\\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_0_1.vb)]\"\n  syntax:\n    content: public System.Data.DataSet GetChanges ();\n    parameters: []\n    return:\n      type: System.Data.DataSet\n      description: A copy of the changes from this <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it and later be merged back in using <xref:System.Data.DataSet.Merge*>. If no changed rows are found, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Data.DataSet.GetChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)\n  id: GetChanges(System.Data.DataRowState)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetChanges(DataRowState)\n  nameWithType: DataSet.GetChanges(DataRowState)\n  fullName: System.Data.DataSet.GetChanges(DataRowState)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a copy of the <xref href=\"System.Data.DataSet\"></xref> containing all changes made to it since it was last loaded, or since <xref:System.Data.DataSet.AcceptChanges*> was called, filtered by <xref href=\"System.Data.DataRowState\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original. Use the `rowStates` argument to specify the type of changes the new object should include.  \\n  \\n This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>. Relationship constraints may cause parent rows marked `Unchanged` to be included. If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`.\"\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \\n  \\n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_2_1.vb)]\\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_2_1.cs)]\"\n  syntax:\n    content: public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);\n    parameters:\n    - id: rowStates\n      type: System.Data.DataRowState\n      description: One of the <xref href=\"System.Data.DataRowState\"></xref> values.\n    return:\n      type: System.Data.DataSet\n      description: A filtered copy of the <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it, and subsequently be merged back in using <xref:System.Data.DataSet.Merge*>. If no rows of the desired <xref href=\"System.Data.DataRowState\"></xref> are found, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Data.DataSet.GetChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)\n  id: GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetDataSetSchema(XmlSchemaSet)\n  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)\n  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a copy of <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> for the DataSet.\n  syntax:\n    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);\n    parameters:\n    - id: schemaSet\n      type: System.Xml.Schema.XmlSchemaSet\n      description: The specified schema set.\n    return:\n      type: System.Xml.Schema.XmlSchemaComplexType\n      description: A copy of <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>.\n  overload: System.Data.DataSet.GetDataSetSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Populates a serialization information object with the data needed to serialize the <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized data associated with the <xref href=\"System.Data.DataSet\"></xref>.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: A <xref:System.Runtime.Serialization.StreamingContext> that contains the source and destination of the serialized stream associated with the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>info</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.GetSchemaSerializable\n  id: GetSchemaSerializable\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetSchemaSerializable()\n  nameWithType: DataSet.GetSchemaSerializable()\n  fullName: System.Data.DataSet.GetSchemaSerializable()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Returns a serializable <xref:System.Xml.Schema.XMLSchema> instance.\n  syntax:\n    content: protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();\n    parameters: []\n    return:\n      type: System.Xml.Schema.XmlSchema\n      description: The <xref:System.Xml.Schema.XMLSchema> instance.\n  overload: System.Data.DataSet.GetSchemaSerializable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetSerializationData(SerializationInfo,StreamingContext)\n  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Deserializes the table data from the binary or XML stream.\n  syntax:\n    content: protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> instance.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The streaming context.\n  overload: System.Data.DataSet.GetSerializationData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.GetXml\n  id: GetXml\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetXml()\n  nameWithType: DataSet.GetXml()\n  fullName: System.Data.DataSet.GetXml()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Returns the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode>.  \\n  \\n GetXml returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file.  \\n  \\n If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.\"\n  example:\n  - \"The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.  \\n  \\n [!code-cs[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_1_1.cs)]\\n [!code-vb[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_1_1.vb)]  \\n  \\n This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML. This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.  \\n  \\n Before you compile and run the sample, you need to create four XML files in the sample directory. First, create ElementsWithAttributes.xml:  \\n  \\n```  \\n<MySchool>  \\n  <Course CourseID=\\\"C1045\\\" Year=\\\"2012\\\"  Title=\\\"Calculus\\\" Credits=\\\"4\\\" DepartmentID=\\\"7\\\">New</Course>  \\n  <Course CourseID=\\\"C1061\\\" Year=\\\"2012\\\"  Title=\\\"Physics\\\" Credits=\\\"4\\\" DepartmentID=\\\"1\\\" />  \\n  <Department DepartmentID=\\\"1\\\" Name=\\\"Engineering\\\" Budget=\\\"350000\\\" StartDate=\\\"2007-09-01T00:00:00+08:00\\\" Administrator=\\\"2\\\" />  \\n  <Department DepartmentID=\\\"7\\\" Name=\\\"Mathematics\\\" Budget=\\\"250024\\\" StartDate=\\\"2007-09-01T00:00:00+08:00\\\" Administrator=\\\"3\\\">Cancelled</Department>  \\n</MySchool>  \\n```  \\n  \\n Next, create ElementsWithChildElementsxml.xml:  \\n  \\n```  \\n<MySchool>  \\n  <Course>  \\n    <CourseID>C1045</CourseID>  \\n    <Year>2012</Year>  \\n    <Title>Calculus</Title>  \\n    <Credits>4</Credits>  \\n    <DepartmentID>7</DepartmentID>  \\n  </Course>  \\n  <Course>  \\n    <CourseID>C1061</CourseID>  \\n    <Year>2012</Year>  \\n    <Title>Physics</Title>  \\n    <Credits>4</Credits>  \\n    <DepartmentID>1</DepartmentID>  \\n  </Course>  \\n  <Course>  \\n    <CourseID>C2021</CourseID>  \\n    <Year>2012</Year>  \\n    <Title>Composition</Title>  \\n    <Credits>3</Credits>  \\n    <DepartmentID>2</DepartmentID>  \\n  </Course>  \\n  <Course>  \\n    <CourseID>C2042</CourseID>  \\n    <Year>2012</Year>  \\n    <Title>Literature</Title>  \\n    <Credits>4</Credits>  \\n    <DepartmentID>2</DepartmentID>  \\n  </Course>  \\n  <Department>  \\n    <DepartmentID>1</DepartmentID>  \\n    <Name>Engineering</Name>  \\n    <Budget>350000</Budget>  \\n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \\n    <Administrator>2</Administrator>  \\n  </Department>  \\n  <Department>  \\n    <DepartmentID>2</DepartmentID>  \\n    <Name>English</Name>  \\n    <Budget>120000</Budget>  \\n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \\n    <Administrator>6</Administrator>  \\n  </Department>  \\n  <Department>  \\n    <DepartmentID>4</DepartmentID>  \\n    <Name>Economics</Name>  \\n    <Budget>200000</Budget>  \\n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \\n    <Administrator>4</Administrator>  \\n  </Department>  \\n  <Department>  \\n    <DepartmentID>7</DepartmentID>  \\n    <Name>Mathematics</Name>  \\n    <Budget>250024</Budget>  \\n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \\n    <Administrator>3</Administrator>  \\n  </Department>  \\n</MySchool>  \\n```  \\n  \\n Now create ElementsWithOnlyAttributes.xml:  \\n  \\n```  \\n<MySchool>  \\n  <Course CourseID=\\\"C1045\\\" Year=\\\"2012\\\"  Title=\\\"Calculus\\\" Credits=\\\"4\\\" DepartmentID=\\\"7\\\" />  \\n  <Course CourseID=\\\"C1061\\\" Year=\\\"2012\\\"  Title=\\\"Physics\\\" Credits=\\\"4\\\" DepartmentID=\\\"1\\\" />  \\n  <Department DepartmentID=\\\"1\\\" Name=\\\"Engineering\\\" Budget=\\\"350000\\\" StartDate=\\\"2007-09-01T00:00:00+08:00\\\" Administrator=\\\"2\\\" />  \\n  <Department DepartmentID=\\\"7\\\" Name=\\\"Mathematics\\\" Budget=\\\"250024\\\" StartDate=\\\"2007-09-01T00:00:00+08:00\\\" Administrator=\\\"3\\\" />  \\n</MySchool>  \\n```  \\n  \\n And finally, create RepeatingElements.xml:  \\n  \\n```  \\n<MySchool>  \\n  <Course>C1045</Course>  \\n  <Course>C1061</Course>  \\n  <Department>Engineering</Department>   \\n  <Department>Mathematics</Department>  \\n</MySchool>  \\n```  \\n  \\n Now you can compile and run the following source code.  [How to Store Data of DataSet into XML File](http://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.  \\n  \\n```  \\nusing System;  \\nusing System.Data;  \\nusing System.IO;  \\nusing System.Text;  \\nusing System.Xml;  \\n  \\n// Use WriteXml method to export the dataset.  \\nstatic class DataTableHelper {  \\n   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  \\n      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  \\n         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  \\n            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  \\n            Console.WriteLine(\\\"Write {0} to the File {1}.\\\", dataset.DataSetName, xmlFileName);  \\n            Console.WriteLine();  \\n         }  \\n      }  \\n   }  \\n  \\n   // Use GetXml method to get the XML data of the dataset and then export to the file.  \\n   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  \\n      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  \\n         writer.WriteLine(dataset.GetXml());  \\n         Console.WriteLine(\\\"Get Xml data from {0} and write to the File {1}.\\\", dataset.DataSetName, xmlFileName);  \\n         Console.WriteLine();  \\n      }  \\n   }  \\n  \\n   // Use ReadXml method to import the dataset from the dataset.  \\n   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  \\n      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  \\n         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  \\n            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  \\n         }  \\n      }  \\n   }  \\n  \\n   // Display the columns and value of DataSet.  \\n   public static void ShowDataSet(DataSet dataset) {  \\n      foreach (DataTable table in dataset.Tables) {  \\n         Console.WriteLine(\\\"Table {0}:\\\", table.TableName);  \\n         ShowDataTable(table);  \\n      }  \\n   }  \\n  \\n   // Display the columns and value of DataTable.  \\n   private static void ShowDataTable(DataTable table) {  \\n      foreach (DataColumn col in table.Columns) {  \\n         Console.Write(\\\"{0,-14}\\\", col.ColumnName);  \\n      }  \\n      Console.WriteLine(\\\"{0,-14}\\\", \\\"\\\");  \\n  \\n      foreach (DataRow row in table.Rows) {  \\n         if (row.RowState == DataRowState.Deleted) {  \\n            foreach (DataColumn col in table.Columns) {  \\n               if (col.DataType.Equals(typeof(DateTime))) {  \\n                  Console.Write(\\\"{0,-14:d}\\\", row[col, DataRowVersion.Original]);  \\n               }  \\n               else if (col.DataType.Equals(typeof(Decimal))) {  \\n                  Console.Write(\\\"{0,-14:C}\\\", row[col, DataRowVersion.Original]);  \\n               }  \\n               else {  \\n                  Console.Write(\\\"{0,-14}\\\", row[col, DataRowVersion.Original]);  \\n               }  \\n            }  \\n         }  \\n         else {  \\n            foreach (DataColumn col in table.Columns) {  \\n               if (col.DataType.Equals(typeof(DateTime))) {  \\n                  Console.Write(\\\"{0,-14:d}\\\", row[col]);  \\n               }  \\n               else if (col.DataType.Equals(typeof(Decimal))) {  \\n                  Console.Write(\\\"{0,-14:C}\\\", row[col]);  \\n               }  \\n               else {  \\n                  Console.Write(\\\"{0,-14}\\\", row[col]);  \\n               }  \\n            }  \\n         }  \\n         Console.WriteLine(\\\"{0,-14}\\\", \\\"\\\");  \\n      }  \\n   }  \\n  \\n   // Display the columns of DataSet.  \\n   public static void ShowDataSetSchema(DataSet dataSet) {  \\n      Console.WriteLine(\\\"{0} contains the following tables:\\\", dataSet.DataSetName);  \\n      foreach (DataTable table in dataSet.Tables) {  \\n         Console.WriteLine(\\\"   Table {0} contains the following columns:\\\", table.TableName);  \\n         ShowDataTableSchema(table);  \\n      }  \\n   }  \\n  \\n   // Display the columns of DataTable  \\n   private static void ShowDataTableSchema(DataTable table) {  \\n      String columnString = \\\"\\\";  \\n      foreach (DataColumn col in table.Columns) {  \\n         columnString += col.ColumnName + \\\"   \\\";  \\n      }  \\n      Console.WriteLine(columnString);  \\n   }  \\n}  \\n  \\nclass Program {  \\n   static void Main(string[] args) {  \\n      // Create the DataSet  \\n      DataSet school = new DataSet(\\\"MySchool\\\");  \\n      DataTable course = CreateCourse();  \\n      DataTable department = CreateDepartment();  \\n      school.Tables.Add(course);  \\n      school.Tables.Add(department);  \\n  \\n      // Define the constraint between the tables.  \\n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\\\"CourseDepartFK\\\", department.Columns[\\\"DepartmentID\\\"], course.Columns[\\\"DepartmentID\\\"]);  \\n      courseDepartFK.DeleteRule = Rule.Cascade;  \\n      courseDepartFK.UpdateRule = Rule.Cascade;  \\n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \\n      course.Constraints.Add(courseDepartFK);  \\n  \\n      InsertDepartments(department);  \\n      InsertCourses(course);  \\n  \\n      // Export the dataset to the XML file.  \\n      Console.WriteLine(\\\"Data of the whole DataSet {0}\\\", school.DataSetName);  \\n      DataTableHelper.ShowDataSet(school);  \\n  \\n      String xmlWithSchemaFileName = \\\"WriterXMLWithSchema.xml\\\";  \\n      String xmlGetDataFileName = \\\"GetXML.xml\\\";  \\n  \\n      // Use two ways to export the dataset to the Xml file.  \\n      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  \\n      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  \\n  \\n      // Import the dataset from the XML file.  \\n      // Use two ways to import the dataset from the Xml file.  \\n      Console.WriteLine(\\\"Read Xml document into a new DataSet:\\\");  \\n      DataSet newSchool = new DataSet(\\\"NewSchool\\\");  \\n      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  \\n      DataTableHelper.ShowDataSetSchema(newSchool);  \\n      Console.WriteLine();  \\n  \\n      Console.WriteLine(\\\"Infer a schema for a DataSet from an XML document:\\\");  \\n      InferDataSetSchemaFromXml();  \\n  \\n      Console.WriteLine(\\\"Press any key to exit.\\\");  \\n      Console.ReadKey();  \\n   }  \\n  \\n   static DataTable CreateCourse() {  \\n      DataTable course = new DataTable(\\\"Course\\\");  \\n      DataColumn[] cols ={  \\n                              new DataColumn(\\\"CourseID\\\",typeof(String)),  \\n                              new DataColumn(\\\"Year\\\",typeof(Int32)),  \\n                              new DataColumn(\\\"Title\\\",typeof(String)),  \\n                              new DataColumn(\\\"Credits\\\",typeof(Int32)),  \\n                              new DataColumn(\\\"DepartmentID\\\",typeof(Int32))};  \\n      course.Columns.AddRange(cols);  \\n  \\n      course.PrimaryKey = new DataColumn[] { course.Columns[\\\"CourseID\\\"], course.Columns[\\\"Year\\\"] };  \\n  \\n      return course;  \\n   }  \\n  \\n   static DataTable CreateDepartment() {  \\n      DataTable department = new DataTable(\\\"Department\\\");  \\n      DataColumn[] cols = {   \\n                                new DataColumn(\\\"DepartmentID\\\", typeof(Int32)),  \\n                                new DataColumn(\\\"Name\\\",typeof(String)),  \\n                                new DataColumn(\\\"Budget\\\",typeof(Decimal)),  \\n                                new DataColumn(\\\"StartDate\\\",typeof(DateTime)),  \\n                                new DataColumn(\\\"Administrator\\\",typeof(Int32))};  \\n      department.Columns.AddRange(cols);  \\n  \\n      department.PrimaryKey = new DataColumn[] { department.Columns[\\\"DepartmentID\\\"] };  \\n  \\n      return department;  \\n   }  \\n  \\n   static void InsertDepartments(DataTable department) {  \\n      Object[] rows = {   \\n                            new Object[]{1,\\\"Engineering\\\",350000.00,new DateTime(2007,9,1),2},  \\n                            new Object[]{2,\\\"English\\\",120000.00,new DateTime(2007,9,1),6},  \\n                            new Object[]{4,\\\"Economics\\\",200000.00,new DateTime(2007,9,1),4},  \\n                            new Object[]{7,\\\"Mathematics\\\",250024.00,new DateTime(2007,9,1),3}};  \\n  \\n      foreach (Object[] row in rows) {  \\n         department.Rows.Add(row);  \\n      }  \\n   }  \\n  \\n   static void InsertCourses(DataTable course) {  \\n      Object[] rows ={  \\n                               new Object[]{\\\"C1045\\\",2012,\\\"Calculus\\\",4,7},  \\n                               new Object[]{\\\"C1061\\\",2012,\\\"Physics\\\",4,1},  \\n                               new Object[]{\\\"C2021\\\",2012,\\\"Composition\\\",3,2},  \\n                               new Object[]{\\\"C2042\\\",2012,\\\"Literature\\\",4,2}};  \\n  \\n      foreach (Object[] row in rows) {  \\n         course.Rows.Add(row);  \\n      }  \\n   }  \\n  \\n   // Display the results of inferring schema from four types of XML structures  \\n   private static void InferDataSetSchemaFromXml() {  \\n      String[] xmlFileNames = {   \\n  \\n                                    @\\\"ElementsWithOnlyAttributes.xml\\\",   \\n                                    @\\\"ElementsWithAttributes.xml\\\",  \\n                                    @\\\"RepeatingElements.xml\\\",   \\n                                    @\\\"ElementsWithChildElements.xml\\\" };  \\n  \\n      foreach (String xmlFileName in xmlFileNames) {  \\n         Console.WriteLine(\\\"Result of {0}\\\", Path.GetFileNameWithoutExtension(xmlFileName));  \\n         DataSet newSchool = new DataSet();  \\n         newSchool.InferXmlSchema(xmlFileName, null);  \\n         DataTableHelper.ShowDataSetSchema(newSchool);  \\n         Console.WriteLine();  \\n      }  \\n   }  \\n}  \\n```\"\n  syntax:\n    content: public string GetXml ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that is a representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.GetXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.GetXmlSchema\n  id: GetXmlSchema\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetXmlSchema()\n  nameWithType: DataSet.GetXmlSchema()\n  fullName: System.Data.DataSet.GetXmlSchema()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Returns the XML Schema for the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written.  \\n  \\n GetXmlSchema returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file.  \\n  \\n If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.\"\n  example:\n  - \"The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.  \\n  \\n [!code-cs[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_3_1.cs)]\\n [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_3_1.vb)]\"\n  syntax:\n    content: public string GetXmlSchema ();\n    parameters: []\n    return:\n      type: System.String\n      description: String that is the XML Schema for the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.GetXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.HasChanges\n  id: HasChanges\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: HasChanges()\n  nameWithType: DataSet.HasChanges()\n  fullName: System.Data.DataSet.HasChanges()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a value indicating whether the <xref href=\"System.Data.DataSet\"></xref> has changes, including new, deleted, or modified rows.\n  remarks: ''\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.  \\n  \\n [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_0_1.vb)]\\n [!code-cs[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_0_1.cs)]\"\n  syntax:\n    content: public bool HasChanges ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Data.DataSet\"></xref> has changes; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataSet.HasChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)\n  id: HasChanges(System.Data.DataRowState)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: HasChanges(DataRowState)\n  nameWithType: DataSet.HasChanges(DataRowState)\n  fullName: System.Data.DataSet.HasChanges(DataRowState)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a value indicating whether the <xref href=\"System.Data.DataSet\"></xref> has changes, including new, deleted, or modified rows, filtered by <xref href=\"System.Data.DataRowState\"></xref>.\n  remarks: Examine the <xref:System.Data.DataSet.HasChanges%2A> property of the `DataSet` before invoking the <xref:System.Data.DataSet.GetChanges%2A> method.\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \\n  \\n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_1_1.vb)]\\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_1_1.cs)]\"\n  syntax:\n    content: public bool HasChanges (System.Data.DataRowState rowStates);\n    parameters:\n    - id: rowStates\n      type: System.Data.DataRowState\n      description: One of the <xref href=\"System.Data.DataRowState\"></xref> values.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Data.DataSet\"></xref> has changes; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataSet.HasChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.HasErrors\n  id: HasErrors\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: HasErrors\n  nameWithType: DataSet.HasErrors\n  fullName: System.Data.DataSet.HasErrors\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a value indicating whether there are errors in any of the <xref href=\"System.Data.DataTable\"></xref> objects within this <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property. Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects. If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors.\n  example:\n  - \"The following example uses the HasErrors property to determine whether a <xref:System.Data.DataSet> object contains errors. If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.  \\n  \\n [!code-cs[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ha_1.cs)]\\n [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ha_1.vb)]\"\n  syntax:\n    content: public bool HasErrors { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if any table contains an error;otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataSet.HasErrors*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])\n  id: InferXmlSchema(System.IO.Stream,System.String[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: InferXmlSchema(Stream,String[])\n  nameWithType: DataSet.InferXmlSchema(Stream,String[])\n  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Applies the XML schema from the specified <xref:System.IO.Stream> to the <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The <xref uid=\"langword_csharp_Stream\" name=\"Stream\" href=\"\"></xref> from which to read the schema.\n    - id: nsArray\n      type: System.String[]\n      description: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.\n  overload: System.Data.DataSet.InferXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])\n  id: InferXmlSchema(System.IO.TextReader,System.String[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: InferXmlSchema(TextReader,String[])\n  nameWithType: DataSet.InferXmlSchema(TextReader,String[])\n  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Applies the XML schema from the specified <xref:System.IO.TextReader> to the <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);\n    parameters:\n    - id: reader\n      type: System.IO.TextReader\n      description: The <xref uid=\"langword_csharp_TextReader\" name=\"TextReader\" href=\"\"></xref> from which to read the schema.\n    - id: nsArray\n      type: System.String[]\n      description: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.\n  overload: System.Data.DataSet.InferXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])\n  id: InferXmlSchema(System.String,System.String[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: InferXmlSchema(String,String[])\n  nameWithType: DataSet.InferXmlSchema(String,String[])\n  fullName: System.Data.DataSet.InferXmlSchema(String,String[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Applies the XML schema from the specified file to the <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: public void InferXmlSchema (string fileName, string[] nsArray);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file (including the path) from which to read the schema.\n    - id: nsArray\n      type: System.String[]\n      description: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.\n  overload: System.Data.DataSet.InferXmlSchema*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])\n  id: InferXmlSchema(System.Xml.XmlReader,System.String[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: InferXmlSchema(XmlReader,String[])\n  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])\n  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Applies the XML schema from the specified <xref:System.Xml.XmlReader> to the <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref uid=\"langword_csharp_XMLReader\" name=\"XMLReader\" href=\"\"></xref> from which to read the schema.\n    - id: nsArray\n      type: System.String[]\n      description: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.\n  overload: System.Data.DataSet.InferXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Initialized\n  id: Initialized\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Initialized\n  nameWithType: DataSet.Initialized\n  fullName: System.Data.DataSet.Initialized\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs after the <xref href=\"System.Data.DataSet\"></xref> is initialized.\n  remarks: For more information, see <xref:System.Data.DataSet.IsInitialized%2A>.\n  syntax:\n    content: public event EventHandler Initialized;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.InitializeDerivedDataSet\n  id: InitializeDerivedDataSet\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: InitializeDerivedDataSet()\n  nameWithType: DataSet.InitializeDerivedDataSet()\n  fullName: System.Data.DataSet.InitializeDerivedDataSet()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Deserialize all of the tables data of the DataSet from the binary or XML stream.\n  syntax:\n    content: protected virtual void InitializeDerivedDataSet ();\n    parameters: []\n  overload: System.Data.DataSet.InitializeDerivedDataSet*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: IsBinarySerialized(SerializationInfo,StreamingContext)\n  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Inspects the format of the serialized representation of the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>.\n  remarks: This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.\n  syntax:\n    content: protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref:System.Runtime.Serialization.StreamingContext> object.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> represents a <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> serialized in its binary format, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise.\n  overload: System.Data.DataSet.IsBinarySerialized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.IsInitialized\n  id: IsInitialized\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: IsInitialized\n  nameWithType: DataSet.IsInitialized\n  fullName: System.Data.DataSet.IsInitialized\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a value that indicates whether the <xref href=\"System.Data.DataSet\"></xref> is initialized.\n  remarks: Returns the status of the <xref:System.Data.DataSet> while it’s being constructed, for instance by Visual Studio. The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`.\n  syntax:\n    content: public bool IsInitialized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the component has completed initialization; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataSet.IsInitialized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\n  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Load(IDataReader,LoadOption,DataTable[])\n  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])\n  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of <xref href=\"System.Data.DataTable\"></xref> instances to supply the schema and namespace information.\n  remarks: \"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.  \\n  \\n> [!NOTE]\\n>  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.  \\n  \\n The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.  \\n  \\n The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The Loadmethod fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader. After each result set, the Loadmethod moves on to the next result set within the reader, until there are no more result sets.  \\n  \\n The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.\"\n  example:\n  - \"The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the Load method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets. Finally, the example displays the contents of the tables in the console window.  \\n  \\n [!code-vb[DataWorks DataSet.LoadTables#1](~/add/codesnippet/visualbasic/54dbea54-b320-4c41-9f97-_1.vb)]\\n [!code-cs[DataWorks DataSet.LoadTables#1](~/add/codesnippet/csharp/54dbea54-b320-4c41-9f97-_1.cs)]\"\n  syntax:\n    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.DataTable[] tables);\n    parameters:\n    - id: reader\n      type: System.Data.IDataReader\n      description: An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets.\n    - id: loadOption\n      type: System.Data.LoadOption\n      description: A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref href=\"System.Data.DataSet\"></xref> will be combined with incoming rows that share the same primary key.\n    - id: tables\n      type: System.Data.DataTable[]\n      description: An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the Load method retrieves name and namespace information. Each of these tables must be a member of the <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.Load*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])\n  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Load(IDataReader,LoadOption,String[])\n  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])\n  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of strings to supply the names for the tables within the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>.\n  remarks: \"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.  \\n  \\n> [!NOTE]\\n>  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.  \\n  \\n The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.  \\n  \\n The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader. The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order. If a matching table is found, that table is loaded with the content of the current result set. If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set. After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets.  \\n  \\n The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`. The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.\"\n  example:\n  - \"The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method. The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>. In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter. Once the data has been loaded, the example displays the contents of all its tables in the Console window.  \\n  \\n [!code-vb[DataWorks DataSet.LoadString#1](~/add/codesnippet/visualbasic/f903cc41-1885-430a-b43a-_1.vb)]\\n [!code-cs[DataWorks DataSet.LoadString#1](~/add/codesnippet/csharp/f903cc41-1885-430a-b43a-_1.cs)]\"\n  syntax:\n    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, string[] tables);\n    parameters:\n    - id: reader\n      type: System.Data.IDataReader\n      description: An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets.\n    - id: loadOption\n      type: System.Data.LoadOption\n      description: A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> will be combined with incoming rows that share the same primary key.\n    - id: tables\n      type: System.String[]\n      description: An array of strings, from which the <xref uid=\"langword_csharp_Load\" name=\"Load\" href=\"\"></xref> method retrieves table name information.\n  overload: System.Data.DataSet.Load*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\n  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])\n  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])\n  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of <xref href=\"System.Data.DataTable\"></xref> instances to supply the schema and namespace information.\n  remarks: \"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.  \\n  \\n> [!NOTE]\\n>  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.  \\n  \\n The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.  \\n  \\n The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data. The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing. Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.  \\n  \\n The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The Loadmethod fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader. After each result set, the Loadmethod moves on to the next result set within the reader, until there are no more result sets.  \\n  \\n The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.\"\n  example:\n  - \"The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the Load method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema. Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error. The output is displayed in the console window.  \\n  \\n [!code-vb[DataWorks DataSet.Load#1](~/add/codesnippet/visualbasic/a22aaabc-2cbb-4c1f-aa4e-_1.vb)]\\n [!code-cs[DataWorks DataSet.Load#1](~/add/codesnippet/csharp/a22aaabc-2cbb-4c1f-aa4e-_1.cs)]\"\n  syntax:\n    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, System.Data.DataTable[] tables);\n    parameters:\n    - id: reader\n      type: System.Data.IDataReader\n      description: An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets.\n    - id: loadOption\n      type: System.Data.LoadOption\n      description: A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref href=\"System.Data.DataSet\"></xref> will be combined with incoming rows that share the same primary key.\n    - id: errorHandler\n      type: System.Data.FillErrorEventHandler\n      description: A <xref href=\"System.Data.FillErrorEventHandler\"></xref> delegate to call when an error occurs while loading data.\n    - id: tables\n      type: System.Data.DataTable[]\n      description: An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the Load method retrieves name and namespace information.\n  overload: System.Data.DataSet.Load*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Locale\n  id: Locale\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Locale\n  nameWithType: DataSet.Locale\n  fullName: System.Data.DataSet.Locale\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the locale information used to compare strings within the table.\n  remarks: \"The Locale property specifies the locale for which sorting applies.  \\n  \\n By default, setting the Locale for a <xref:System.Data.DataSet> also sets the Locale for each <xref:System.Data.DataTable> object in that `DataSet` to the same value.  \\n  \\n> [!NOTE]\\n>  In columns that contain expressions, the <xref:System.StringComparison> is used. The <xref:System.StringComparison> is ignored.\"\n  example:\n  - \"The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.  \\n  \\n [!code-vb[Classic WebData DataSet.Locale Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.lo_1.vb)]\"\n  syntax:\n    content: public System.Globalization.CultureInfo Locale { get; set; }\n    return:\n      type: System.Globalization.CultureInfo\n      description: A <xref:System.Globalization.CultureInfo> that contains data about the user's machine locale. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Data.DataSet.Locale*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Merge(System.Data.DataRow[])\n  id: Merge(System.Data.DataRow[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataRow[])\n  nameWithType: DataSet.Merge(DataRow[])\n  fullName: System.Data.DataSet.Merge(DataRow[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Merges an array of <xref href=\"System.Data.DataRow\"></xref> objects into the current <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  syntax:\n    content: public void Merge (System.Data.DataRow[] rows);\n    parameters:\n    - id: rows\n      type: System.Data.DataRow[]\n      description: The array of <xref uid=\"langword_csharp_DataRow\" name=\"DataRow\" href=\"\"></xref> objects to be merged into the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>.\n  overload: System.Data.DataSet.Merge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Merge(System.Data.DataSet)\n  id: Merge(System.Data.DataSet)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataSet)\n  nameWithType: DataSet.Merge(DataSet)\n  fullName: System.Data.DataSet.Merge(DataSet)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema into the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>.\n  remarks: \"The Merge method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The Merge method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the Merge method.  \\n  \\n When the Merge method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and Merge methods on a <xref:System.Data.DataSet>.  \\n  \\n [!code-vb[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_2_1.vb)]\\n [!code-cs[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_2_1.cs)]\"\n  syntax:\n    content: public void Merge (System.Data.DataSet dataSet);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> whose data and schema will be merged.\n  overload: System.Data.DataSet.Merge*\n  exceptions:\n  - type: System.Data.ConstraintException\n    commentId: T:System.Data.ConstraintException\n    description: One or more constraints cannot be enabled.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>dataSet</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.Merge(System.Data.DataTable)\n  id: Merge(System.Data.DataTable)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataTable)\n  nameWithType: DataSet.Merge(DataTable)\n  fullName: System.Data.DataSet.Merge(DataTable)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Merges a specified <xref href=\"System.Data.DataTable\"></xref> and its schema into the current <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  example:\n  - \"The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is identical to the first. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.  \\n  \\n [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_1_1.vb)]\\n [!code-cs[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_1_1.cs)]\"\n  syntax:\n    content: public void Merge (System.Data.DataTable table);\n    parameters:\n    - id: table\n      type: System.Data.DataTable\n      description: The <xref href=\"System.Data.DataTable\"></xref> whose data and schema will be merged.\n  overload: System.Data.DataSet.Merge*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>table</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)\n  id: Merge(System.Data.DataSet,System.Boolean)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataSet,Boolean)\n  nameWithType: DataSet.Merge(DataSet,Boolean)\n  fullName: System.Data.DataSet.Merge(DataSet,Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema into the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>, preserving or discarding any changes in this <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> according to the given argument.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  example:\n  - \"The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. After adding ten rows, two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.  \\n  \\n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_0_1.cs)]\\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_0_1.vb)]\"\n  syntax:\n    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> whose data and schema will be merged.\n    - id: preserveChanges\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve changes in the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataSet.Merge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)\n  id: Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataRow[],Boolean,MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)\n  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Merges an array of <xref href=\"System.Data.DataRow\"></xref> objects into the current <xref href=\"System.Data.DataSet\"></xref>, preserving or discarding changes in the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> and handling an incompatible schema according to the given arguments.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \\\"target\\\" to signify the current <xref:System.Data.DataSet>, and \\\"source\\\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \\\"source\\\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  syntax:\n    content: public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);\n    parameters:\n    - id: rows\n      type: System.Data.DataRow[]\n      description: The array of <xref href=\"System.Data.DataRow\"></xref> objects to be merged into the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>.\n    - id: preserveChanges\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve changes in the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: missingSchemaAction\n      type: System.Data.MissingSchemaAction\n      description: One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values.\n  overload: System.Data.DataSet.Merge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)\n  id: Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataSet,Boolean,MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)\n  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema with the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>, preserving or discarding changes in the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> and handling an incompatible schema according to the given arguments.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \\\"target\\\" to signify the current <xref:System.Data.DataSet>, and \\\"source\\\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \\\"source\\\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  example:\n  - \"The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \\n  \\n [!code-cs[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/csharp/e5f91548-401c-49b5-ab4b-_1.cs)]\\n [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/visualbasic/e5f91548-401c-49b5-ab4b-_1.vb)]\"\n  syntax:\n    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> whose data and schema will be merged.\n    - id: preserveChanges\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve changes in the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: missingSchemaAction\n      type: System.Data.MissingSchemaAction\n      description: One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values.\n  overload: System.Data.DataSet.Merge*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>dataSet</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataTable,Boolean,MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)\n  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Merges a specified <xref href=\"System.Data.DataTable\"></xref> and its schema into the current <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>, preserving or discarding changes in the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref> and handling an incompatible schema according to the given arguments.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  example:\n  - \"The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.  \\n  \\n [!code-cs[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/csharp/a63745f5-1a9e-4fc7-9c61-_1.cs)]\\n [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/visualbasic/a63745f5-1a9e-4fc7-9c61-_1.vb)]\"\n  syntax:\n    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);\n    parameters:\n    - id: table\n      type: System.Data.DataTable\n      description: The <xref uid=\"langword_csharp_DataTable\" name=\"DataTable\" href=\"\"></xref> whose data and schema will be merged.\n    - id: preserveChanges\n      type: System.Boolean\n      description: One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values.\n    - id: missingSchemaAction\n      type: System.Data.MissingSchemaAction\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve changes in the <xref uid=\"langword_csharp_DataSet\" name=\"DataSet\" href=\"\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataSet.Merge*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>dataSet</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.MergeFailed\n  id: MergeFailed\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: MergeFailed\n  nameWithType: DataSet.MergeFailed\n  fullName: System.Data.DataSet.MergeFailed\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs when a target and source <xref href=\"System.Data.DataRow\"></xref> have the same primary key value, and <xref:System.Data.DataSet.EnforceConstraints*> is set to true.\n  remarks: 'For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'\n  example:\n  - \"The following example demonstrates the use of the MergeFailed event.  \\n  \\n [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/visualbasic/e-system.data.dataset.me_1.vb)]\\n [!code-cs[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/csharp/e-system.data.dataset.me_1.cs)]\"\n  syntax:\n    content: public event System.Data.MergeFailedEventHandler MergeFailed;\n    return:\n      type: System.Data.MergeFailedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Namespace\n  id: Namespace\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Namespace\n  nameWithType: DataSet.Namespace\n  fullName: System.Data.DataSet.Namespace\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the namespace of the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"The Namespace property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods.  \\n  \\n The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>. For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace \\\"myCompany,\\\" and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.\"\n  example:\n  - \"The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \\n  \\n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.na_1.vb)]\\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.na_1.cs)]\"\n  syntax:\n    content: public string Namespace { get; set; }\n    return:\n      type: System.String\n      description: The namespace of the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.Namespace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The namespace already has data.\n  platform:\n  - net462\n- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: OnPropertyChanging(PropertyChangedEventArgs)\n  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)\n  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Raises the OnPropertyChanging event.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);\n    parameters:\n    - id: pcevent\n      type: System.ComponentModel.PropertyChangedEventArgs\n      description: A <xref:System.ComponentModel.PropertyChangedEventArgs> that contains the event data.\n  overload: System.Data.DataSet.OnPropertyChanging*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)\n  id: OnRemoveRelation(System.Data.DataRelation)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: OnRemoveRelation(DataRelation)\n  nameWithType: DataSet.OnRemoveRelation(DataRelation)\n  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs when a <xref href=\"System.Data.DataRelation\"></xref> object is removed from a <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: This method should be overridden by subclasses to restrict tables being removed\n  syntax:\n    content: protected virtual void OnRemoveRelation (System.Data.DataRelation relation);\n    parameters:\n    - id: relation\n      type: System.Data.DataRelation\n      description: The <xref href=\"System.Data.DataRelation\"></xref> being removed.\n  overload: System.Data.DataSet.OnRemoveRelation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)\n  id: OnRemoveTable(System.Data.DataTable)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: OnRemoveTable(DataTable)\n  nameWithType: DataSet.OnRemoveTable(DataTable)\n  fullName: System.Data.DataSet.OnRemoveTable(DataTable)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Occurs when a <xref href=\"System.Data.DataTable\"></xref> is removed from a <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: This method can be overridden by subclasses to restrict tables from being removed.\n  example:\n  - \"The following example shows a class derived from the <xref:System.Data.DataSet> with the OnRemoveTable method overridden.  \\n  \\n [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.on_1.vb)]\\n [!code-cs[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/csharp/m-system.data.dataset.on_1.cs)]\"\n  syntax:\n    content: protected virtual void OnRemoveTable (System.Data.DataTable table);\n    parameters:\n    - id: table\n      type: System.Data.DataTable\n      description: The <xref href=\"System.Data.DataTable\"></xref> being removed.\n  overload: System.Data.DataSet.OnRemoveTable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Prefix\n  id: Prefix\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Prefix\n  nameWithType: DataSet.Prefix\n  fullName: System.Data.DataSet.Prefix\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets an XML prefix that aliases the namespace of the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: The Prefix property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property).\n  example:\n  - \"The following example sets the Prefix before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \\n  \\n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.pr_1.vb)]\\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.pr_1.cs)]\"\n  syntax:\n    content: public string Prefix { get; set; }\n    return:\n      type: System.String\n      description: The XML prefix for the <xref href=\"System.Data.DataSet\"></xref> namespace.\n  overload: System.Data.DataSet.Prefix*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.RaisePropertyChanging(System.String)\n  id: RaisePropertyChanging(System.String)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: RaisePropertyChanging(String)\n  nameWithType: DataSet.RaisePropertyChanging(String)\n  fullName: System.Data.DataSet.RaisePropertyChanging(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Sends a notification that the specified <xref href=\"System.Data.DataSet\"></xref> property is about to change.\n  syntax:\n    content: protected void RaisePropertyChanging (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the property that is about to change.\n  overload: System.Data.DataSet.RaisePropertyChanging*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXml(System.IO.Stream)\n  id: ReadXml(System.IO.Stream)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(Stream)\n  nameWithType: DataSet.ReadXml(Stream)\n  fullName: System.Data.DataSet.ReadXml(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt;.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema, as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \\n  \\n [!code-cs[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_7_1.cs)]\\n [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_7_1.vb)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: An object that derives from <xref:System.IO.Stream>.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)\n  id: ReadXml(System.IO.TextReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(TextReader)\n  nameWithType: DataSet.ReadXml(TextReader)\n  fullName: System.Data.DataSet.ReadXml(TextReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.TextReader?displayProperty=fullName&gt;.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \\n  \\n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_3_1.vb)]\\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_3_1.cs)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);\n    parameters:\n    - id: reader\n      type: System.IO.TextReader\n      description: The <xref uid=\"langword_csharp_TextReader\" name=\"TextReader\" href=\"\"></xref> from which to read the schema and data.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXml(System.String)\n  id: ReadXml(System.String)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(String)\n  nameWithType: DataSet.ReadXml(String)\n  fullName: System.Data.DataSet.ReadXml(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified file.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \\n  \\n [!code-cs[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_1_1.cs)]\\n [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_1_1.vb)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The filename (including the path) from which to read.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)\n  id: ReadXml(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(XmlReader)\n  nameWithType: DataSet.ReadXml(XmlReader)\n  fullName: System.Data.DataSet.ReadXml(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt;.\n  remarks: \"The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling ReadXml to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n <xref:System.Xml.XmlTextReader?displayProperty=fullName> inherits from <xref:System.Xml.XmlReader>.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with ReadXml by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the ReadXml method is used to fill it with schema and data.  \\n  \\n [!code-cs[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_2_1.cs)]\\n [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_2_1.vb)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref:System.Xml.XmlReader> from which to read.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)\n  id: ReadXml(System.IO.Stream,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(Stream,XmlReadMode)\n  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)\n  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt; and <xref href=\"System.Data.XmlReadMode\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  When you use ReadXml and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed. For more information on diffgrams, see [DiffGrams](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The <xref:System.IO.Stream> from which to read.\n    - id: mode\n      type: System.Data.XmlReadMode\n      description: One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)\n  id: ReadXml(System.IO.TextReader,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(TextReader,XmlReadMode)\n  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)\n  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.TextReader?displayProperty=fullName&gt; and <xref href=\"System.Data.XmlReadMode\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);\n    parameters:\n    - id: reader\n      type: System.IO.TextReader\n      description: The <xref:System.IO.TextReader> from which to read.\n    - id: mode\n      type: System.Data.XmlReadMode\n      description: One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)\n  id: ReadXml(System.String,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(String,XmlReadMode)\n  nameWithType: DataSet.ReadXml(String,XmlReadMode)\n  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified file and <xref href=\"System.Data.XmlReadMode\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The filename (including the path) from which to read.\n    - id: mode\n      type: System.Data.XmlReadMode\n      description: One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)\n  id: ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(XmlReader,XmlReadMode)\n  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)\n  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt; and <xref href=\"System.Data.XmlReadMode\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref:System.Xml.XmlReader> from which to read.\n    - id: mode\n      type: System.Data.XmlReadMode\n      description: One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref uid=\"langword_csharp_XmlReadMode\" name=\"XmlReadMode\" href=\"\"></xref> used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)\n  id: ReadXmlSchema(System.IO.Stream)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXmlSchema(Stream)\n  nameWithType: DataSet.ReadXmlSchema(Stream)\n  fullName: System.Data.DataSet.ReadXmlSchema(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads the XML schema from the specified <xref:System.IO.Stream> into the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n> [!NOTE]\\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \\n  \\n Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \\n  \\n [!code-cs[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_5_1.cs)]\\n [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_5_1.vb)]\"\n  syntax:\n    content: public void ReadXmlSchema (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The <xref:System.IO.Stream> from which to read.\n  overload: System.Data.DataSet.ReadXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)\n  id: ReadXmlSchema(System.IO.TextReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXmlSchema(TextReader)\n  nameWithType: DataSet.ReadXmlSchema(TextReader)\n  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads the XML schema from the specified <xref:System.IO.TextReader> into the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n> [!NOTE]\\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \\n  \\n Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \\n  \\n [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_8_1.vb)]\\n [!code-cs[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_8_1.cs)]\"\n  syntax:\n    content: public void ReadXmlSchema (System.IO.TextReader reader);\n    parameters:\n    - id: reader\n      type: System.IO.TextReader\n      description: The <xref:System.IO.TextReader> from which to read.\n  overload: System.Data.DataSet.ReadXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXmlSchema(System.String)\n  id: ReadXmlSchema(System.String)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXmlSchema(String)\n  nameWithType: DataSet.ReadXmlSchema(String)\n  fullName: System.Data.DataSet.ReadXmlSchema(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads the XML schema from the specified file into the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n> [!NOTE]\\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - >-\n    [!code-cs[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_0_1.cs)]\n     [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_0_1.vb)]\n  syntax:\n    content: public void ReadXmlSchema (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The file name (including the path) from which to read.\n  overload: System.Data.DataSet.ReadXmlSchema*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)\n  id: ReadXmlSchema(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXmlSchema(XmlReader)\n  nameWithType: DataSet.ReadXmlSchema(XmlReader)\n  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads the XML schema from the specified <xref:System.Xml.XmlReader> into the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n> [!NOTE]\\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The ReadXmlSchema method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \\n  \\n The <xref:System.Xml.XmlReader?displayProperty=fullName> class is abstract. A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=fullName> class.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with ReadXmlSchema. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=fullName> object. The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=fullName> that is passed as an argument to the ReadXmlSchema method.  \\n  \\n [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_4_1.vb)]\\n [!code-cs[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_4_1.cs)]\"\n  syntax:\n    content: public void ReadXmlSchema (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref:System.Xml.XmlReader> from which to read.\n  overload: System.Data.DataSet.ReadXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)\n  id: ReadXmlSerializable(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXmlSerializable(XmlReader)\n  nameWithType: DataSet.ReadXmlSerializable(XmlReader)\n  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Ignores attributes and returns an empty DataSet.\n  syntax:\n    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The specified XML reader.\n  overload: System.Data.DataSet.ReadXmlSerializable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.RejectChanges\n  id: RejectChanges\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: RejectChanges()\n  nameWithType: DataSet.RejectChanges()\n  fullName: System.Data.DataSet.RejectChanges()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Rolls back all the changes made to the <xref href=\"System.Data.DataSet\"></xref> since it was created, or since the last time &lt;xref:System.Data.DataSet.AcceptChanges%2A?displayProperty=fullName&gt; was called.\n  remarks: \"Invoke the RejectChanges to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>.  \\n  \\n <xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> method. After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong.  \\n  \\n When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method is called, any rows still in edit-mode cancel their edits. New rows are removed. Modified and deleted rows return back to their original state (`DataRowState.Unchanged`).  \\n  \\n AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`). They are not applicable to schema or structural changes.\"\n  example:\n  - \"The following example shows a class derived from the <xref:System.Data.DataSet> class. The RejectChanges event is invoked from within a function.  \\n  \\n [!code-cs[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_6_1.cs)]\\n [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_6_1.vb)]\"\n  syntax:\n    content: public virtual void RejectChanges ();\n    parameters: []\n  overload: System.Data.DataSet.RejectChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Relations\n  id: Relations\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Relations\n  nameWithType: DataSet.Relations\n  fullName: System.Data.DataSet.Relations\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Get the collection of relations that link tables and allow navigation from parent tables to child tables.\n  remarks: ''\n  example:\n  - \"The following example prints the column name of all child tables through the Relations property.  \\n  \\n [!code-vb[Classic WebData DataSet.Relations Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.re_1.vb)]\"\n  syntax:\n    content: public System.Data.DataRelationCollection Relations { get; }\n    return:\n      type: System.Data.DataRelationCollection\n      description: A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains a collection of <xref href=\"System.Data.DataRelation\"></xref> objects. An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist.\n  overload: System.Data.DataSet.Relations*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.RemotingFormat\n  id: RemotingFormat\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: RemotingFormat\n  nameWithType: DataSet.RemotingFormat\n  fullName: System.Data.DataSet.RemotingFormat\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets a <xref href=\"System.Data.SerializationFormat\"></xref> for the <xref href=\"System.Data.DataSet\"></xref> used during remoting.\n  syntax:\n    content: public System.Data.SerializationFormat RemotingFormat { get; set; }\n    return:\n      type: System.Data.SerializationFormat\n      description: A <xref href=\"System.Data.SerializationFormat\"></xref> object.\n  overload: System.Data.DataSet.RemotingFormat*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Reset\n  id: Reset\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: DataSet.Reset()\n  fullName: System.Data.DataSet.Reset()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Clears all tables and removes all relations, foreign constraints, and tables from the <xref href=\"System.Data.DataSet\"></xref>. Subclasses should override Reset to restore a <xref href=\"System.Data.DataSet\"></xref> to its original state.\n  syntax:\n    content: public virtual void Reset ();\n    parameters: []\n  overload: System.Data.DataSet.Reset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.SchemaSerializationMode\n  id: SchemaSerializationMode\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: SchemaSerializationMode\n  nameWithType: DataSet.SchemaSerializationMode\n  fullName: System.Data.DataSet.SchemaSerializationMode\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets a <xref href=\"System.Data.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios. Setting the SchemaSerializationMode property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode> causes schema information to be excluded from the serialization payload.  \\n  \\n <xref:System.Data.SchemaSerializationMode> is supported only for a typed `DataSet`. For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode>.  \\n  \\n <xref:System.Data.SchemaSerializationMode> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified. If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode>.  \\n  \\n <xref:System.Data.SchemaSerializationMode> is supported in version 2.0 of the .NET Framework or later.  \\n  \\n When <xref:System.Data.SchemaSerializationMode> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized. In addition, they are serialized only if they happen to be different from the default values. None of the `Tables`, `Relations` or `Constraints` are serialized. The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>. These properties are serialized to make sure that overall runtime data integrity is preserved.\"\n  syntax:\n    content: public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }\n    return:\n      type: System.Data.SchemaSerializationMode\n      description: Gets or sets a <xref href=\"System.Data.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.SchemaSerializationMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ShouldSerializeRelations\n  id: ShouldSerializeRelations\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ShouldSerializeRelations()\n  nameWithType: DataSet.ShouldSerializeRelations()\n  fullName: System.Data.DataSet.ShouldSerializeRelations()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a value indicating whether <xref:System.Data.DataSet.Relations*> property should be persisted.\n  remarks: You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.\n  example:\n  - \"The following examples show a class derived from the <xref:System.Data.DataSet> class. The <xref:System.Data.DataSet.Reset%2A> and ShouldSerializeRelations methods are invoked from within functions in the derived class.  \\n  \\n [!code-cs[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_3_1.cs)]\\n [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_3_1.vb)]\"\n  syntax:\n    content: protected virtual bool ShouldSerializeRelations ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property value has been changed from its default; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataSet.ShouldSerializeRelations*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.ShouldSerializeTables\n  id: ShouldSerializeTables\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ShouldSerializeTables()\n  nameWithType: DataSet.ShouldSerializeTables()\n  fullName: System.Data.DataSet.ShouldSerializeTables()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets a value indicating whether <xref:System.Data.DataSet.Tables*> property should be persisted.\n  remarks: You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.\n  example:\n  - \"The following example shows a class derived from the <xref:System.Data.DataSet> class. The ShouldSerializeTables method is called from within functions in the derived class.  \\n  \\n [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_2_1.vb)]\\n [!code-cs[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_2_1.cs)]\"\n  syntax:\n    content: protected virtual bool ShouldSerializeTables ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property value has been changed from its default; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.DataSet.ShouldSerializeTables*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Site\n  id: Site\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Site\n  nameWithType: DataSet.Site\n  fullName: System.Data.DataSet.Site\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets an <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.\n  syntax:\n    content: public override System.ComponentModel.ISite Site { get; set; }\n    return:\n      type: System.ComponentModel.ISite\n      description: An <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.Site*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection\n  id: System#ComponentModel#IListSource#ContainsListCollection\n  isEii: true\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: System.ComponentModel.IListSource.ContainsListCollection\n  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection\n  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: For a description of this member, see &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.\n  syntax:\n    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;.\n  overload: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList\n  id: System#ComponentModel#IListSource#GetList\n  isEii: true\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: System.ComponentModel.IListSource.GetList()\n  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()\n  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: For a description of this member, see &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.\n  syntax:\n    content: System.Collections.IList IListSource.GetList ();\n    parameters: []\n    return:\n      type: System.Collections.IList\n      description: For a description of this member, see &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;.\n  overload: System.Data.DataSet.System#ComponentModel#IListSource#GetList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema\n  id: System#Xml#Serialization#IXmlSerializable#GetSchema\n  isEii: true\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: System.Xml.Serialization.IXmlSerializable.GetSchema()\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()\n  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.\n  syntax:\n    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();\n    parameters: []\n    return:\n      type: System.Xml.Schema.XmlSchema\n      description: For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;.\n  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  isEii: true\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.\n  syntax:\n    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: A <xref:System.Xml.XmlReader>.\n  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  isEii: true\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.\n  syntax:\n    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: A <xref:System.Xml.XmlWriter>.\n  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.Tables\n  id: Tables\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Tables\n  nameWithType: DataSet.Tables\n  fullName: System.Data.DataSet.Tables\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the collection of tables contained in the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>. To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.\n  example:\n  - \"The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.  \\n  \\n [!code-vb[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ta_1.vb)]\\n [!code-cs[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ta_1.cs)]\"\n  syntax:\n    content: public System.Data.DataTableCollection Tables { get; }\n    return:\n      type: System.Data.DataTableCollection\n      description: The <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>. An empty collection is returned if no <xref href=\"System.Data.DataTable\"></xref> objects exist.\n  overload: System.Data.DataSet.Tables*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXml(System.IO.Stream)\n  id: WriteXml(System.IO.Stream)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(Stream)\n  nameWithType: DataSet.WriteXml(Stream)\n  fullName: System.Data.DataSet.WriteXml(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt;.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  example:\n  - \"The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object. The object is then used with the WriteXml method to write an XML document.  \\n  \\n [!code-cs[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_2_1.cs)]\\n [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_2_1.vb)]\"\n  syntax:\n    content: public void WriteXml (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object used to write to a file.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)\n  id: WriteXml(System.IO.TextWriter)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(TextWriter)\n  nameWithType: DataSet.WriteXml(TextWriter)\n  fullName: System.Data.DataSet.WriteXml(TextWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref:System.IO.TextWriter>.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.IO.TextWriter writer);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> object with which to write.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXml(System.String)\n  id: WriteXml(System.String)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(String)\n  nameWithType: DataSet.WriteXml(String)\n  fullName: System.Data.DataSet.WriteXml(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> to the specified file.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The file name (including the path) to which to write.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)\n  id: WriteXml(System.Xml.XmlWriter)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(XmlWriter)\n  nameWithType: DataSet.WriteXml(XmlWriter)\n  fullName: System.Data.DataSet.WriteXml(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> to the specified <xref:System.Xml.XmlWriter>.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> with which to write.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(Stream,XmlWriteMode)\n  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)\n  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt; and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object used to write to a file.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(TextWriter,XmlWriteMode)\n  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)\n  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref:System.IO.TextWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  example:\n  - \"The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \\n  \\n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_7_1.vb)]\\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_7_1.cs)]\"\n  syntax:\n    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: A &lt;xref:System.IO.TextWriter?displayProperty=fullName&gt; object used to write the document.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)\n  id: WriteXml(System.String,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(String,XmlWriteMode)\n  nameWithType: DataSet.WriteXml(String,XmlWriteMode)\n  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \\n  \\n [!code-cs[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_3_1.cs)]\\n [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_3_1.vb)]\"\n  syntax:\n    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The file name (including the path) to which to write.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(XmlWriter,XmlWriteMode)\n  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)\n  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref:System.Xml.XmlWriter> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=\"langword_csharp_WriteSchema\" name=\"WriteSchema\" href=\"\"></xref>.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  example:\n  - \"The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object that is used to create a new <xref:System.Xml.XmlTextWriter?displayProperty=fullName>. The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \\n  \\n [!code-cs[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_1_1.cs)]\\n [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_1_1.vb)]\"\n  syntax:\n    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> with which to write.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)\n  id: WriteXmlSchema(System.IO.Stream)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(Stream)\n  nameWithType: DataSet.WriteXmlSchema(Stream)\n  fullName: System.Data.DataSet.WriteXmlSchema(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt; object.\n  remarks: \"Use the WriteXmlSchema method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the WriteXmlSchema method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.  \\n  \\n Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.\"\n  example:\n  - \"The following example creates a new <xref:System.IO.FileStream> object that is passed to the WriteXmlSchema method to write the schema to disk.  \\n  \\n [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_6_1.vb)]\\n [!code-cs[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_6_1.cs)]\"\n  syntax:\n    content: public void WriteXmlSchema (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object used to write to a file.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)\n  id: WriteXmlSchema(System.IO.TextWriter)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(TextWriter)\n  nameWithType: DataSet.WriteXmlSchema(TextWriter)\n  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref:System.IO.TextWriter> object.\n  remarks: \"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.  \\n  \\n Classes the derive from the <xref:System.IO.TextWriter?displayProperty=fullName> class include the <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>, and <xref:System.IO.StringWriter?displayProperty=fullName>.\"\n  example:\n  - \"The following example creates a <xref:System.Text.StringBuilder?displayProperty=fullName> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=fullName>. The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.  \\n  \\n [!code-cs[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_0_1.cs)]\\n [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_0_1.vb)]\"\n  syntax:\n    content: public void WriteXmlSchema (System.IO.TextWriter writer);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> object with which to write.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXmlSchema(System.String)\n  id: WriteXmlSchema(System.String)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(String)\n  nameWithType: DataSet.WriteXmlSchema(String)\n  fullName: System.Data.DataSet.WriteXmlSchema(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to a file.\n  remarks: \"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.\"\n  example:\n  - >-\n    [!code-cs[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_4_1.cs)]\n     [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_4_1.vb)]\n  syntax:\n    content: public void WriteXmlSchema (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The file name (including the path) to which to write.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)\n  id: WriteXmlSchema(System.Xml.XmlWriter)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(XmlWriter)\n  nameWithType: DataSet.WriteXmlSchema(XmlWriter)\n  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to an <xref:System.Xml.XmlWriter> object.\n  remarks: \"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.  \\n  \\n One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=fullName> class is the <xref:System.Xml.XmlTextWriter?displayProperty=fullName> class.\"\n  example:\n  - \"The following example creates a new <xref:System.IO.FileStream?displayProperty=fullName> object with the specified path. The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XMLTextWriter?displayProperty=fullName> object. The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.  \\n  \\n [!code-cs[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_5_1.cs)]\\n [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_5_1.vb)]\"\n  syntax:\n    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref:System.Xml.XmlWriter> to write to.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})\n  id: WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(Stream,Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)\n  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified &lt;xref:System.IO.Stream?displayProperty=fullName&gt; object.\n  syntax:\n    content: public void WriteXmlSchema (System.IO.Stream stream, Converter<Type,string> multipleTargetConverter);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: A &lt;xref:System.IO.Stream?displayProperty=fullName&gt; object to write to.\n    - id: multipleTargetConverter\n      type: System.Converter{System.Type,System.String}\n      description: A delegate used to convert <xref:System.Type> to string.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})\n  id: WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(TextWriter,Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)\n  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref:System.IO.TextWriter>.\n  syntax:\n    content: public void WriteXmlSchema (System.IO.TextWriter writer, Converter<Type,string> multipleTargetConverter);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: A <xref:System.IO.TextWriter> object to write to.\n    - id: multipleTargetConverter\n      type: System.Converter{System.Type,System.String}\n      description: A delegate used to convert <xref:System.Type> to string.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})\n  id: WriteXmlSchema(System.String,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(String,Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)\n  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to a file.\n  syntax:\n    content: public void WriteXmlSchema (string fileName, Converter<Type,string> multipleTargetConverter);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file to write to.\n    - id: multipleTargetConverter\n      type: System.Converter{System.Type,System.String}\n      description: A delegate used to convert <xref:System.Type> to string.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})\n  id: WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)\n  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref:System.Xml.XmlWriter>.\n  syntax:\n    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter<Type,string> multipleTargetConverter);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: A <xref:System.Xml.XmlWriter> object to write to.\n    - id: multipleTargetConverter\n      type: System.Converter{System.Type,System.String}\n      description: A delegate used to convert <xref:System.Type> to string.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.MarshalByValueComponent\n  isExternal: false\n  name: System.ComponentModel.MarshalByValueComponent\n- uid: System.Data.ConstraintException\n  parent: System.Data\n  isExternal: false\n  name: ConstraintException\n  nameWithType: ConstraintException\n  fullName: System.Data.ConstraintException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Data.DataSet.#ctor\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSet()\n  nameWithType: DataSet.DataSet()\n  fullName: System.Data.DataSet.DataSet()\n- uid: System.Data.DataSet.#ctor(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSet(String)\n  nameWithType: DataSet.DataSet(String)\n  fullName: System.Data.DataSet.DataSet(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSet(SerializationInfo,StreamingContext)\n  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSet(SerializationInfo,StreamingContext,Boolean)\n  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)\n  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.DataSet.AcceptChanges\n  parent: System.Data.DataSet\n  isExternal: false\n  name: AcceptChanges()\n  nameWithType: DataSet.AcceptChanges()\n  fullName: System.Data.DataSet.AcceptChanges()\n- uid: System.Data.DataSet.BeginInit\n  parent: System.Data.DataSet\n  isExternal: false\n  name: BeginInit()\n  nameWithType: DataSet.BeginInit()\n  fullName: System.Data.DataSet.BeginInit()\n- uid: System.Data.DataSet.CaseSensitive\n  parent: System.Data.DataSet\n  isExternal: false\n  name: CaseSensitive\n  nameWithType: DataSet.CaseSensitive\n  fullName: System.Data.DataSet.CaseSensitive\n- uid: System.Data.DataSet.Clear\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Clear()\n  nameWithType: DataSet.Clear()\n  fullName: System.Data.DataSet.Clear()\n- uid: System.Data.DataSet.Clone\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Clone()\n  nameWithType: DataSet.Clone()\n  fullName: System.Data.DataSet.Clone()\n- uid: System.Data.DataSet\n  parent: System.Data\n  isExternal: false\n  name: DataSet\n  nameWithType: DataSet\n  fullName: System.Data.DataSet\n- uid: System.Data.DataSet.Copy\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Copy()\n  nameWithType: DataSet.Copy()\n  fullName: System.Data.DataSet.Copy()\n- uid: System.Data.DataSet.CreateDataReader\n  parent: System.Data.DataSet\n  isExternal: false\n  name: CreateDataReader()\n  nameWithType: DataSet.CreateDataReader()\n  fullName: System.Data.DataSet.CreateDataReader()\n- uid: System.Data.DataTableReader\n  parent: System.Data\n  isExternal: false\n  name: DataTableReader\n  nameWithType: DataTableReader\n  fullName: System.Data.DataTableReader\n- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: CreateDataReader(DataTable[])\n  nameWithType: DataSet.CreateDataReader(DataTable[])\n  fullName: System.Data.DataSet.CreateDataReader(DataTable[])\n- uid: System.Data.DataTable[]\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable[]\n  spec.csharp:\n  - uid: System.Data.DataTable\n    name: DataTable\n    nameWithType: DataTable\n    fullName: DataTable[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.DataSet.DataSetName\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSetName\n  nameWithType: DataSet.DataSetName\n  fullName: System.Data.DataSet.DataSetName\n- uid: System.Data.DataSet.DefaultViewManager\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DefaultViewManager\n  nameWithType: DataSet.DefaultViewManager\n  fullName: System.Data.DataSet.DefaultViewManager\n- uid: System.Data.DataViewManager\n  parent: System.Data\n  isExternal: false\n  name: DataViewManager\n  nameWithType: DataViewManager\n  fullName: System.Data.DataViewManager\n- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DetermineSchemaSerializationMode(XmlReader)\n  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)\n  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)\n- uid: System.Data.SchemaSerializationMode\n  parent: System.Data\n  isExternal: false\n  name: SchemaSerializationMode\n  nameWithType: SchemaSerializationMode\n  fullName: System.Data.SchemaSerializationMode\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: true\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)\n  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)\n- uid: System.Data.DataSet.EndInit\n  parent: System.Data.DataSet\n  isExternal: false\n  name: EndInit()\n  nameWithType: DataSet.EndInit()\n  fullName: System.Data.DataSet.EndInit()\n- uid: System.Data.DataSet.EnforceConstraints\n  parent: System.Data.DataSet\n  isExternal: false\n  name: EnforceConstraints\n  nameWithType: DataSet.EnforceConstraints\n  fullName: System.Data.DataSet.EnforceConstraints\n- uid: System.Data.DataSet.ExtendedProperties\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ExtendedProperties\n  nameWithType: DataSet.ExtendedProperties\n  fullName: System.Data.DataSet.ExtendedProperties\n- uid: System.Data.PropertyCollection\n  parent: System.Data\n  isExternal: false\n  name: PropertyCollection\n  nameWithType: PropertyCollection\n  fullName: System.Data.PropertyCollection\n- uid: System.Data.DataSet.GetChanges\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetChanges()\n  nameWithType: DataSet.GetChanges()\n  fullName: System.Data.DataSet.GetChanges()\n- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetChanges(DataRowState)\n  nameWithType: DataSet.GetChanges(DataRowState)\n  fullName: System.Data.DataSet.GetChanges(DataRowState)\n- uid: System.Data.DataRowState\n  parent: System.Data\n  isExternal: false\n  name: DataRowState\n  nameWithType: DataRowState\n  fullName: System.Data.DataRowState\n- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetDataSetSchema(XmlSchemaSet)\n  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)\n  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)\n- uid: System.Xml.Schema.XmlSchemaComplexType\n  parent: System.Xml.Schema\n  isExternal: false\n  name: XmlSchemaComplexType\n  nameWithType: XmlSchemaComplexType\n  fullName: System.Xml.Schema.XmlSchemaComplexType\n- uid: System.Xml.Schema.XmlSchemaSet\n  parent: System.Xml.Schema\n  isExternal: false\n  name: XmlSchemaSet\n  nameWithType: XmlSchemaSet\n  fullName: System.Xml.Schema.XmlSchemaSet\n- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Data.DataSet.GetSchemaSerializable\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetSchemaSerializable()\n  nameWithType: DataSet.GetSchemaSerializable()\n  fullName: System.Data.DataSet.GetSchemaSerializable()\n- uid: System.Xml.Schema.XmlSchema\n  parent: System.Xml.Schema\n  isExternal: true\n  name: XmlSchema\n  nameWithType: XmlSchema\n  fullName: System.Xml.Schema.XmlSchema\n- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetSerializationData(SerializationInfo,StreamingContext)\n  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)\n- uid: System.Data.DataSet.GetXml\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetXml()\n  nameWithType: DataSet.GetXml()\n  fullName: System.Data.DataSet.GetXml()\n- uid: System.Data.DataSet.GetXmlSchema\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetXmlSchema()\n  nameWithType: DataSet.GetXmlSchema()\n  fullName: System.Data.DataSet.GetXmlSchema()\n- uid: System.Data.DataSet.HasChanges\n  parent: System.Data.DataSet\n  isExternal: false\n  name: HasChanges()\n  nameWithType: DataSet.HasChanges()\n  fullName: System.Data.DataSet.HasChanges()\n- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: HasChanges(DataRowState)\n  nameWithType: DataSet.HasChanges(DataRowState)\n  fullName: System.Data.DataSet.HasChanges(DataRowState)\n- uid: System.Data.DataSet.HasErrors\n  parent: System.Data.DataSet\n  isExternal: false\n  name: HasErrors\n  nameWithType: DataSet.HasErrors\n  fullName: System.Data.DataSet.HasErrors\n- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InferXmlSchema(Stream,String[])\n  nameWithType: DataSet.InferXmlSchema(Stream,String[])\n  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InferXmlSchema(TextReader,String[])\n  nameWithType: DataSet.InferXmlSchema(TextReader,String[])\n  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: true\n  name: TextReader\n  nameWithType: TextReader\n  fullName: System.IO.TextReader\n- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InferXmlSchema(String,String[])\n  nameWithType: DataSet.InferXmlSchema(String,String[])\n  fullName: System.Data.DataSet.InferXmlSchema(String,String[])\n- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InferXmlSchema(XmlReader,String[])\n  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])\n  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])\n- uid: System.Data.DataSet.Initialized\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Initialized\n  nameWithType: DataSet.Initialized\n  fullName: System.Data.DataSet.Initialized\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Data.DataSet.InitializeDerivedDataSet\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InitializeDerivedDataSet()\n  nameWithType: DataSet.InitializeDerivedDataSet()\n  fullName: System.Data.DataSet.InitializeDerivedDataSet()\n- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IsBinarySerialized(SerializationInfo,StreamingContext)\n  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)\n  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)\n- uid: System.Data.DataSet.IsInitialized\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IsInitialized\n  nameWithType: DataSet.IsInitialized\n  fullName: System.Data.DataSet.IsInitialized\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Load(IDataReader,LoadOption,DataTable[])\n  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])\n  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])\n- uid: System.Data.IDataReader\n  parent: System.Data\n  isExternal: false\n  name: IDataReader\n  nameWithType: IDataReader\n  fullName: System.Data.IDataReader\n- uid: System.Data.LoadOption\n  parent: System.Data\n  isExternal: false\n  name: LoadOption\n  nameWithType: LoadOption\n  fullName: System.Data.LoadOption\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Load(IDataReader,LoadOption,String[])\n  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])\n  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])\n  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])\n  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])\n- uid: System.Data.FillErrorEventHandler\n  parent: System.Data\n  isExternal: false\n  name: FillErrorEventHandler\n  nameWithType: FillErrorEventHandler\n  fullName: System.Data.FillErrorEventHandler\n- uid: System.Data.DataSet.Locale\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Locale\n  nameWithType: DataSet.Locale\n  fullName: System.Data.DataSet.Locale\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: true\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Data.DataSet.Merge(System.Data.DataRow[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataRow[])\n  nameWithType: DataSet.Merge(DataRow[])\n  fullName: System.Data.DataSet.Merge(DataRow[])\n- uid: System.Data.DataRow[]\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow[]\n  spec.csharp:\n  - uid: System.Data.DataRow\n    name: DataRow\n    nameWithType: DataRow\n    fullName: DataRow[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.DataSet.Merge(System.Data.DataSet)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataSet)\n  nameWithType: DataSet.Merge(DataSet)\n  fullName: System.Data.DataSet.Merge(DataSet)\n- uid: System.Data.DataSet.Merge(System.Data.DataTable)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataTable)\n  nameWithType: DataSet.Merge(DataTable)\n  fullName: System.Data.DataSet.Merge(DataTable)\n- uid: System.Data.DataTable\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataSet,Boolean)\n  nameWithType: DataSet.Merge(DataSet,Boolean)\n  fullName: System.Data.DataSet.Merge(DataSet,Boolean)\n- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataRow[],Boolean,MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)\n  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)\n- uid: System.Data.MissingSchemaAction\n  parent: System.Data\n  isExternal: false\n  name: MissingSchemaAction\n  nameWithType: MissingSchemaAction\n  fullName: System.Data.MissingSchemaAction\n- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataSet,Boolean,MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)\n  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)\n- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataTable,Boolean,MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)\n  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)\n- uid: System.Data.DataSet.MergeFailed\n  parent: System.Data.DataSet\n  isExternal: false\n  name: MergeFailed\n  nameWithType: DataSet.MergeFailed\n  fullName: System.Data.DataSet.MergeFailed\n- uid: System.Data.MergeFailedEventHandler\n  parent: System.Data\n  isExternal: false\n  name: MergeFailedEventHandler\n  nameWithType: MergeFailedEventHandler\n  fullName: System.Data.MergeFailedEventHandler\n- uid: System.Data.DataSet.Namespace\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Namespace\n  nameWithType: DataSet.Namespace\n  fullName: System.Data.DataSet.Namespace\n- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnPropertyChanging(PropertyChangedEventArgs)\n  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)\n  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)\n- uid: System.ComponentModel.PropertyChangedEventArgs\n  parent: System.ComponentModel\n  isExternal: true\n  name: PropertyChangedEventArgs\n  nameWithType: PropertyChangedEventArgs\n  fullName: System.ComponentModel.PropertyChangedEventArgs\n- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnRemoveRelation(DataRelation)\n  nameWithType: DataSet.OnRemoveRelation(DataRelation)\n  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)\n- uid: System.Data.DataRelation\n  parent: System.Data\n  isExternal: false\n  name: DataRelation\n  nameWithType: DataRelation\n  fullName: System.Data.DataRelation\n- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnRemoveTable(DataTable)\n  nameWithType: DataSet.OnRemoveTable(DataTable)\n  fullName: System.Data.DataSet.OnRemoveTable(DataTable)\n- uid: System.Data.DataSet.Prefix\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Prefix\n  nameWithType: DataSet.Prefix\n  fullName: System.Data.DataSet.Prefix\n- uid: System.Data.DataSet.RaisePropertyChanging(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RaisePropertyChanging(String)\n  nameWithType: DataSet.RaisePropertyChanging(String)\n  fullName: System.Data.DataSet.RaisePropertyChanging(String)\n- uid: System.Data.DataSet.ReadXml(System.IO.Stream)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(Stream)\n  nameWithType: DataSet.ReadXml(Stream)\n  fullName: System.Data.DataSet.ReadXml(Stream)\n- uid: System.Data.XmlReadMode\n  parent: System.Data\n  isExternal: false\n  name: XmlReadMode\n  nameWithType: XmlReadMode\n  fullName: System.Data.XmlReadMode\n- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(TextReader)\n  nameWithType: DataSet.ReadXml(TextReader)\n  fullName: System.Data.DataSet.ReadXml(TextReader)\n- uid: System.Data.DataSet.ReadXml(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(String)\n  nameWithType: DataSet.ReadXml(String)\n  fullName: System.Data.DataSet.ReadXml(String)\n- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(XmlReader)\n  nameWithType: DataSet.ReadXml(XmlReader)\n  fullName: System.Data.DataSet.ReadXml(XmlReader)\n- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(Stream,XmlReadMode)\n  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)\n  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)\n- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(TextReader,XmlReadMode)\n  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)\n  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)\n- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(String,XmlReadMode)\n  nameWithType: DataSet.ReadXml(String,XmlReadMode)\n  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)\n- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(XmlReader,XmlReadMode)\n  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)\n  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)\n- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSchema(Stream)\n  nameWithType: DataSet.ReadXmlSchema(Stream)\n  fullName: System.Data.DataSet.ReadXmlSchema(Stream)\n- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSchema(TextReader)\n  nameWithType: DataSet.ReadXmlSchema(TextReader)\n  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)\n- uid: System.Data.DataSet.ReadXmlSchema(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSchema(String)\n  nameWithType: DataSet.ReadXmlSchema(String)\n  fullName: System.Data.DataSet.ReadXmlSchema(String)\n- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSchema(XmlReader)\n  nameWithType: DataSet.ReadXmlSchema(XmlReader)\n  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)\n- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSerializable(XmlReader)\n  nameWithType: DataSet.ReadXmlSerializable(XmlReader)\n  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)\n- uid: System.Data.DataSet.RejectChanges\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RejectChanges()\n  nameWithType: DataSet.RejectChanges()\n  fullName: System.Data.DataSet.RejectChanges()\n- uid: System.Data.DataSet.Relations\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Relations\n  nameWithType: DataSet.Relations\n  fullName: System.Data.DataSet.Relations\n- uid: System.Data.DataRelationCollection\n  parent: System.Data\n  isExternal: false\n  name: DataRelationCollection\n  nameWithType: DataRelationCollection\n  fullName: System.Data.DataRelationCollection\n- uid: System.Data.DataSet.RemotingFormat\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RemotingFormat\n  nameWithType: DataSet.RemotingFormat\n  fullName: System.Data.DataSet.RemotingFormat\n- uid: System.Data.SerializationFormat\n  parent: System.Data\n  isExternal: false\n  name: SerializationFormat\n  nameWithType: SerializationFormat\n  fullName: System.Data.SerializationFormat\n- uid: System.Data.DataSet.Reset\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Reset()\n  nameWithType: DataSet.Reset()\n  fullName: System.Data.DataSet.Reset()\n- uid: System.Data.DataSet.SchemaSerializationMode\n  parent: System.Data.DataSet\n  isExternal: false\n  name: SchemaSerializationMode\n  nameWithType: DataSet.SchemaSerializationMode\n  fullName: System.Data.DataSet.SchemaSerializationMode\n- uid: System.Data.DataSet.ShouldSerializeRelations\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ShouldSerializeRelations()\n  nameWithType: DataSet.ShouldSerializeRelations()\n  fullName: System.Data.DataSet.ShouldSerializeRelations()\n- uid: System.Data.DataSet.ShouldSerializeTables\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ShouldSerializeTables()\n  nameWithType: DataSet.ShouldSerializeTables()\n  fullName: System.Data.DataSet.ShouldSerializeTables()\n- uid: System.Data.DataSet.Site\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Site\n  nameWithType: DataSet.Site\n  fullName: System.Data.DataSet.Site\n- uid: System.ComponentModel.ISite\n  parent: System.ComponentModel\n  isExternal: false\n  name: ISite\n  nameWithType: ISite\n  fullName: System.ComponentModel.ISite\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.ComponentModel.IListSource.ContainsListCollection\n  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection\n  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.ComponentModel.IListSource.GetList()\n  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()\n  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: true\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.GetSchema()\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()\n  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: true\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.Data.DataSet.Tables\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Tables\n  nameWithType: DataSet.Tables\n  fullName: System.Data.DataSet.Tables\n- uid: System.Data.DataTableCollection\n  parent: System.Data\n  isExternal: false\n  name: DataTableCollection\n  nameWithType: DataTableCollection\n  fullName: System.Data.DataTableCollection\n- uid: System.Data.DataSet.WriteXml(System.IO.Stream)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(Stream)\n  nameWithType: DataSet.WriteXml(Stream)\n  fullName: System.Data.DataSet.WriteXml(Stream)\n- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(TextWriter)\n  nameWithType: DataSet.WriteXml(TextWriter)\n  fullName: System.Data.DataSet.WriteXml(TextWriter)\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: true\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.Data.DataSet.WriteXml(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(String)\n  nameWithType: DataSet.WriteXml(String)\n  fullName: System.Data.DataSet.WriteXml(String)\n- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(XmlWriter)\n  nameWithType: DataSet.WriteXml(XmlWriter)\n  fullName: System.Data.DataSet.WriteXml(XmlWriter)\n- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(Stream,XmlWriteMode)\n  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)\n  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)\n- uid: System.Data.XmlWriteMode\n  parent: System.Data\n  isExternal: false\n  name: XmlWriteMode\n  nameWithType: XmlWriteMode\n  fullName: System.Data.XmlWriteMode\n- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(TextWriter,XmlWriteMode)\n  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)\n  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)\n- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(String,XmlWriteMode)\n  nameWithType: DataSet.WriteXml(String,XmlWriteMode)\n  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)\n- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(XmlWriter,XmlWriteMode)\n  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)\n  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(Stream)\n  nameWithType: DataSet.WriteXmlSchema(Stream)\n  fullName: System.Data.DataSet.WriteXmlSchema(Stream)\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(TextWriter)\n  nameWithType: DataSet.WriteXmlSchema(TextWriter)\n  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)\n- uid: System.Data.DataSet.WriteXmlSchema(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(String)\n  nameWithType: DataSet.WriteXmlSchema(String)\n  fullName: System.Data.DataSet.WriteXmlSchema(String)\n- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(XmlWriter)\n  nameWithType: DataSet.WriteXmlSchema(XmlWriter)\n  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(Stream,Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)\n  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)\n- uid: System.Converter{System.Type,System.String}\n  parent: System\n  isExternal: false\n  name: Converter<Type,String>\n  nameWithType: Converter<Type,String>\n  fullName: System.Converter<System.Type,System.String>\n  spec.csharp:\n  - uid: System.Converter`2\n    name: Converter\n    nameWithType: Converter\n    fullName: Converter<System.Type,System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: Type\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(TextWriter,Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)\n  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)\n- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(String,Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)\n  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)\n- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)\n  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)\n- uid: System.Data.DataSet.#ctor*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSet\n  nameWithType: DataSet.DataSet\n- uid: System.Data.DataSet.AcceptChanges*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: AcceptChanges\n  nameWithType: DataSet.AcceptChanges\n- uid: System.Data.DataSet.BeginInit*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: BeginInit\n  nameWithType: DataSet.BeginInit\n- uid: System.Data.DataSet.CaseSensitive*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: CaseSensitive\n  nameWithType: DataSet.CaseSensitive\n- uid: System.Data.DataSet.Clear*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Clear\n  nameWithType: DataSet.Clear\n- uid: System.Data.DataSet.Clone*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Clone\n  nameWithType: DataSet.Clone\n- uid: System.Data.DataSet.Copy*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Copy\n  nameWithType: DataSet.Copy\n- uid: System.Data.DataSet.CreateDataReader*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: CreateDataReader\n  nameWithType: DataSet.CreateDataReader\n- uid: System.Data.DataSet.DataSetName*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSetName\n  nameWithType: DataSet.DataSetName\n- uid: System.Data.DataSet.DefaultViewManager*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DefaultViewManager\n  nameWithType: DataSet.DefaultViewManager\n- uid: System.Data.DataSet.DetermineSchemaSerializationMode*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DetermineSchemaSerializationMode\n  nameWithType: DataSet.DetermineSchemaSerializationMode\n- uid: System.Data.DataSet.EndInit*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: EndInit\n  nameWithType: DataSet.EndInit\n- uid: System.Data.DataSet.EnforceConstraints*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: EnforceConstraints\n  nameWithType: DataSet.EnforceConstraints\n- uid: System.Data.DataSet.ExtendedProperties*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ExtendedProperties\n  nameWithType: DataSet.ExtendedProperties\n- uid: System.Data.DataSet.GetChanges*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetChanges\n  nameWithType: DataSet.GetChanges\n- uid: System.Data.DataSet.GetDataSetSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetDataSetSchema\n  nameWithType: DataSet.GetDataSetSchema\n- uid: System.Data.DataSet.GetObjectData*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetObjectData\n  nameWithType: DataSet.GetObjectData\n- uid: System.Data.DataSet.GetSchemaSerializable*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetSchemaSerializable\n  nameWithType: DataSet.GetSchemaSerializable\n- uid: System.Data.DataSet.GetSerializationData*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetSerializationData\n  nameWithType: DataSet.GetSerializationData\n- uid: System.Data.DataSet.GetXml*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetXml\n  nameWithType: DataSet.GetXml\n- uid: System.Data.DataSet.GetXmlSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetXmlSchema\n  nameWithType: DataSet.GetXmlSchema\n- uid: System.Data.DataSet.HasChanges*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: HasChanges\n  nameWithType: DataSet.HasChanges\n- uid: System.Data.DataSet.HasErrors*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: HasErrors\n  nameWithType: DataSet.HasErrors\n- uid: System.Data.DataSet.InferXmlSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InferXmlSchema\n  nameWithType: DataSet.InferXmlSchema\n- uid: System.Data.DataSet.InitializeDerivedDataSet*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InitializeDerivedDataSet\n  nameWithType: DataSet.InitializeDerivedDataSet\n- uid: System.Data.DataSet.IsBinarySerialized*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IsBinarySerialized\n  nameWithType: DataSet.IsBinarySerialized\n- uid: System.Data.DataSet.IsInitialized*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IsInitialized\n  nameWithType: DataSet.IsInitialized\n- uid: System.Data.DataSet.Load*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Load\n  nameWithType: DataSet.Load\n- uid: System.Data.DataSet.Locale*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Locale\n  nameWithType: DataSet.Locale\n- uid: System.Data.DataSet.Merge*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge\n  nameWithType: DataSet.Merge\n- uid: System.Data.DataSet.Namespace*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Namespace\n  nameWithType: DataSet.Namespace\n- uid: System.Data.DataSet.OnPropertyChanging*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnPropertyChanging\n  nameWithType: DataSet.OnPropertyChanging\n- uid: System.Data.DataSet.OnRemoveRelation*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnRemoveRelation\n  nameWithType: DataSet.OnRemoveRelation\n- uid: System.Data.DataSet.OnRemoveTable*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnRemoveTable\n  nameWithType: DataSet.OnRemoveTable\n- uid: System.Data.DataSet.Prefix*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Prefix\n  nameWithType: DataSet.Prefix\n- uid: System.Data.DataSet.RaisePropertyChanging*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RaisePropertyChanging\n  nameWithType: DataSet.RaisePropertyChanging\n- uid: System.Data.DataSet.ReadXml*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml\n  nameWithType: DataSet.ReadXml\n- uid: System.Data.DataSet.ReadXmlSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSchema\n  nameWithType: DataSet.ReadXmlSchema\n- uid: System.Data.DataSet.ReadXmlSerializable*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSerializable\n  nameWithType: DataSet.ReadXmlSerializable\n- uid: System.Data.DataSet.RejectChanges*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RejectChanges\n  nameWithType: DataSet.RejectChanges\n- uid: System.Data.DataSet.Relations*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Relations\n  nameWithType: DataSet.Relations\n- uid: System.Data.DataSet.RemotingFormat*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RemotingFormat\n  nameWithType: DataSet.RemotingFormat\n- uid: System.Data.DataSet.Reset*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Reset\n  nameWithType: DataSet.Reset\n- uid: System.Data.DataSet.SchemaSerializationMode*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: SchemaSerializationMode\n  nameWithType: DataSet.SchemaSerializationMode\n- uid: System.Data.DataSet.ShouldSerializeRelations*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ShouldSerializeRelations\n  nameWithType: DataSet.ShouldSerializeRelations\n- uid: System.Data.DataSet.ShouldSerializeTables*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ShouldSerializeTables\n  nameWithType: DataSet.ShouldSerializeTables\n- uid: System.Data.DataSet.Site*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Site\n  nameWithType: DataSet.Site\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.ComponentModel.IListSource.ContainsListCollection\n  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.ComponentModel.IListSource.GetList\n  nameWithType: DataSet.System.ComponentModel.IListSource.GetList\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.GetSchema\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.ReadXml\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.WriteXml\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml\n- uid: System.Data.DataSet.Tables*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Tables\n  nameWithType: DataSet.Tables\n- uid: System.Data.DataSet.WriteXml*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml\n  nameWithType: DataSet.WriteXml\n- uid: System.Data.DataSet.WriteXmlSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema\n  nameWithType: DataSet.WriteXmlSchema\n"}