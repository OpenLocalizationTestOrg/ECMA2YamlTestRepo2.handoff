{"nodes":[{"pos":[562,667],"content":"Returns data from the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Returns data from the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress\"></xref> event."},{"pos":[680,1562],"content":"An instance of SpeakProgressEventArgs is created when the <xref:System.Speech.Synthesis.SpeechSynthesizer> object raises the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event. The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event for each new word that it speaks in a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.       The returned data is based on the Speech Synthesis Markup Language (SSML) that the code generates. The values returned for <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> include spaces and the characters and contents of the SSML tags generated by the code.","needQuote":false,"needEscape":true,"nodes":[{"content":"An instance of SpeakProgressEventArgs is created when the <xref:System.Speech.Synthesis.SpeechSynthesizer> object raises the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event. The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event for each new word that it speaks in a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.       The returned data is based on the Speech Synthesis Markup Language (SSML) that the code generates. The values returned for <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> include spaces and the characters and contents of the SSML tags generated by the code.","pos":[0,880],"nodes":[{"content":"An instance of SpeakProgressEventArgs is created when the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; object raises the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress&gt; event.","pos":[0,194],"source":"An instance of SpeakProgressEventArgs is created when the <xref:System.Speech.Synthesis.SpeechSynthesizer> object raises the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; raises this event for each new word that it speaks in a prompt using any of the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A&gt;, or &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A&gt; methods.","pos":[195,592],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event for each new word that it speaks in a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods."},{"content":"The returned data is based on the Speech Synthesis Markup Language (SSML) that the code generates.","pos":[599,697]},{"content":"The values returned for &lt;xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A&gt; include spaces and the characters and contents of the SSML tags generated by the code.","pos":[698,880],"source":" The values returned for <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> include spaces and the characters and contents of the SSML tags generated by the code."}]}]},{"pos":[5497,5534],"content":"Gets the audio position of the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the audio position of the event.","pos":[0,37]}]},{"pos":[5546,5916],"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken. For example, the synthesizer speaks the number “4003” as “four thousand three”. It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words, and returns the AudioPosition for each word.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken. For example, the synthesizer speaks the number “4003” as “four thousand three”. It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words, and returns the AudioPosition for each word.","pos":[0,370],"nodes":[{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; normalizes numbers to the words that correspond to how the number will be spoken.","pos":[0,134],"source":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken."},{"content":"For example, the synthesizer speaks the number “4003” as “four thousand three”.","pos":[135,214]},{"content":"It raises a &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress&gt; event for each of the spoken words, and returns the AudioPosition for each word.","pos":[215,370],"source":" It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words, and returns the AudioPosition for each word."}]}]},{"pos":[6038,6099],"content":"Returns the position of the event in the audio output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the position of the event in the audio output stream.","pos":[0,61]}]},{"pos":[6629,6720],"content":"Gets the number of characters in the word that was spoken just before the event was raised.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of characters in the word that was spoken just before the event was raised.","pos":[0,91]}]},{"pos":[6732,7237],"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken. For example, the synthesizer speaks the number “4003” as “four thousand three”. It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words. However, the CharacterCount property for each of the three words is the same. It is the count of the characters in the number “4003” in the text of the prompt, in this case, four.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken. For example, the synthesizer speaks the number “4003” as “four thousand three”. It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words. However, the CharacterCount property for each of the three words is the same. It is the count of the characters in the number “4003” in the text of the prompt, in this case, four.","pos":[0,505],"nodes":[{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; normalizes numbers to the words that correspond to how the number will be spoken.","pos":[0,134],"source":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken."},{"content":"For example, the synthesizer speaks the number “4003” as “four thousand three”.","pos":[135,214]},{"content":"It raises a &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress&gt; event for each of the spoken words.","pos":[215,325],"source":" It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words."},{"content":"However, the CharacterCount property for each of the three words is the same.","pos":[326,403]},{"content":"It is the count of the characters in the number “4003” in the text of the prompt, in this case, four.","pos":[404,505]}]}]},{"pos":[7352,7446],"content":"Returns the number of characters in the word that was spoken just before the event was raised.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of characters in the word that was spoken just before the event was raised.","pos":[0,94]}]},{"pos":[7992,8139],"content":"Gets the number of characters and spaces from the beginning of the prompt to the position before the first letter of the word that was just spoken.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of characters and spaces from the beginning of the prompt to the position before the first letter of the word that was just spoken.","pos":[0,147]}]},{"pos":[13461,13611],"content":"Returns the number of characters and spaces from the beginning of the prompt to the position before the first letter of the word that was just spoken.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of characters and spaces from the beginning of the prompt to the position before the first letter of the word that was just spoken.","pos":[0,150]}]},{"pos":[14095,14151],"content":"The text that was just spoken when the event was raised.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text that was just spoken when the event was raised.","pos":[0,56]}]},{"pos":[14163,14595],"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken. For example, the synthesizer speaks the number “4003” as “four thousand three”. It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words. However, the Text property for each of the three words is the same. It is the text “4003” from the prompt.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken. For example, the synthesizer speaks the number “4003” as “four thousand three”. It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words. However, the Text property for each of the three words is the same. It is the text “4003” from the prompt.","pos":[0,432],"nodes":[{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; normalizes numbers to the words that correspond to how the number will be spoken.","pos":[0,134],"source":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken."},{"content":"For example, the synthesizer speaks the number “4003” as “four thousand three”.","pos":[135,214]},{"content":"It raises a &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress&gt; event for each of the spoken words.","pos":[215,325],"source":" It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words."},{"content":"However, the Text property for each of the three words is the same.","pos":[326,393]},{"content":"It is the text “4003” from the prompt.","pos":[394,432]}]}]},{"pos":[16384,16448],"content":"Returns the text that was just spoken when the event was raised.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the text that was just spoken when the event was raised.","pos":[0,64]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs\n  id: SpeakProgressEventArgs\n  children:\n  - System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition\n  - System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount\n  - System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition\n  - System.Speech.Synthesis.SpeakProgressEventArgs.Text\n  langs:\n  - csharp\n  name: SpeakProgressEventArgs\n  nameWithType: SpeakProgressEventArgs\n  fullName: System.Speech.Synthesis.SpeakProgressEventArgs\n  type: Class\n  summary: Returns data from the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress\"></xref> event.\n  remarks: \"An instance of SpeakProgressEventArgs is created when the <xref:System.Speech.Synthesis.SpeechSynthesizer> object raises the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event. The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event for each new word that it speaks in a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.  \\n  \\n The returned data is based on the Speech Synthesis Markup Language (SSML) that the code generates. The values returned for <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> include spaces and the characters and contents of the SSML tags generated by the code.\"\n  example:\n  - \"The following example demonstrates the information that is available from SpeakProgressEventArgs. Note how the <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A> methods affect the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> by their addition of **\\\\<p>**, **\\\\</p>**, **\\\\<s>**, and **\\\\</s>** tags to the generated SSML. Also, there are two entries in the output for \\\"30%\\\", one for each word to speak this number string (thirty percent). The <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> and <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> are the same for each entry and represent the characters \\\"30%. However, the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> changes to reflect the speaking of the words \\\"thirty\\\" and \\\"percent\\\" by the <xref:System.Speech.Synthesis.SpeechSynthesizer>.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToWaveFile(@\\\"C:\\\\test\\\\weather.wav\\\");  \\n  \\n        // Create a SoundPlayer instance to play the output audio file.  \\n        System.Media.SoundPlayer m_SoundPlayer =  \\n          new System.Media.SoundPlayer(@\\\"C:\\\\test\\\\weather.wav\\\");  \\n  \\n        // Build a prompt containing a paragraph and two sentences.  \\n        PromptBuilder builder = new PromptBuilder(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\"));  \\n        builder.StartParagraph();  \\n        builder.StartSentence();  \\n        builder.AppendText(  \\n          \\\"The weather forecast for today is partly cloudy with some sun breaks.\\\");  \\n        builder.EndSentence();  \\n        builder.StartSentence();  \\n        builder.AppendText(  \\n          \\\"Tonight's weather will be cloudy with a 30% chance of showers.\\\");  \\n        builder.EndSentence();  \\n        builder.EndParagraph();  \\n  \\n        // Add a handler for the SpeakProgress event.  \\n        synth.SpeakProgress +=  \\n          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \\n  \\n        // Speak the prompt and play back the output file.  \\n        synth.Speak(builder);  \\n        m_SoundPlayer.Play();  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Write each word and its character postion to the console.  \\n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"CharPos: {0}   CharCount: {1}   AudioPos: {2}    \\\\\\\"{3}\\\\\\\"\\\",  \\n        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: 'public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs'\n  inheritance:\n  - System.ComponentModel.AsyncCompletedEventArgs\n  - System.Speech.Synthesis.PromptEventArgs\n  implements: []\n  inheritedMembers:\n  - System.Speech.Synthesis.PromptEventArgs.Prompt\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition\n  id: AudioPosition\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  langs:\n  - csharp\n  name: AudioPosition\n  nameWithType: SpeakProgressEventArgs.AudioPosition\n  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the audio position of the event.\n  remarks: The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken. For example, the synthesizer speaks the number “4003” as “four thousand three”. It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words, and returns the AudioPosition for each word.\n  syntax:\n    content: public TimeSpan AudioPosition { get; }\n    return:\n      type: System.TimeSpan\n      description: Returns the position of the event in the audio output stream.\n  overload: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount\n  id: CharacterCount\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  langs:\n  - csharp\n  name: CharacterCount\n  nameWithType: SpeakProgressEventArgs.CharacterCount\n  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the number of characters in the word that was spoken just before the event was raised.\n  remarks: The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken. For example, the synthesizer speaks the number “4003” as “four thousand three”. It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words. However, the CharacterCount property for each of the three words is the same. It is the count of the characters in the number “4003” in the text of the prompt, in this case, four.\n  syntax:\n    content: public int CharacterCount { get; }\n    return:\n      type: System.Int32\n      description: Returns the number of characters in the word that was spoken just before the event was raised.\n  overload: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition\n  id: CharacterPosition\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  langs:\n  - csharp\n  name: CharacterPosition\n  nameWithType: SpeakProgressEventArgs.CharacterPosition\n  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the number of characters and spaces from the beginning of the prompt to the position before the first letter of the word that was just spoken.\n  remarks: \"The CharacterPosition includes the count for characters in XML tags, including their enclosing brackets. When using any of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods, the contents are added to an SSML prompt that includes the opening and closing `speak` elements. The opening `speak` element adds an offset of 82 characters and spaces to the CharacterPosition of the all the words and letters in the prompt. For example, in the following snippet, the CharacterPosition of the first word, “this”, is 82.  \\n  \\n```c#  \\nbuilder.AppendText(\\\"This is a test\\\");  \\nSynthesizer.Speak(builder);  \\n```  \\n  \\n In the above example the CharacterPosition of the word “test” is 92. In the following snippet the CharacterPosition of the word “test” is 23 characters higher (115) because the opening **\\\\<prosody pitch=\\\"high\\\">**  tag that precedes it contains 23 characters and spaces (the two escape characters \\\"\\\\\\\\\\\" are not counted).  \\n  \\n```c#  \\nbuilder.AppendSsmlMarkup(\\\"This is a <prosody pitch=\\\\\\\"high\\\\\\\"> test </prosody>.\\\");   \\nSynthesizer.Speak(builder);  \\n```  \\n  \\n If you use the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods to add content to a prompt by specifying a file, the opening `xml` declaration and `speak` elements in the file are not used or counted. The first character in the file after the opening `speak` tag will be at position 82 if it is the first content in the prompt.  \\n  \\n By contrast, the string parameter of a <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method does not get added to an SSML prompt before being spoken. Therefore, the CharacterPosition of the first word, “this”, in the following snippet is zero.  \\n  \\n```c#  \\nSynthesizer.Speak(“This is a test.”);  \\n```  \\n  \\n The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken. For example, the synthesizer speaks the number “4003” as “four thousand three”. It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the three spoken words. However, the CharacterPosition property for each of the three words is the same. It is the position before the first character of the number “4003” in the text of the prompt.\"\n  example:\n  - \"The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> and appends the SSML contents of an XML file using <xref:System.Xml.XmlReader>. The example outputs speech to a WAV file for playback. The contents of the XML file containing the SSML appear below the code example.  \\n  \\n```c#  \\nusing System;  \\nusing System.Xml;  \\nusing System.IO;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a path to the file that contains SSML.  \\n        string weatherFile = Path.GetFullPath(\\\"c:\\\\\\\\test\\\\\\\\Weather.ssml\\\");  \\n  \\n        // Create an XML Reader from the file, create a PromptBuilder and   \\n        // append the XmlReader.  \\n        PromptBuilder builder = new PromptBuilder();  \\n  \\n        if (File.Exists(weatherFile))  \\n        {  \\n          XmlReader reader = XmlReader.Create(weatherFile);  \\n          builder.AppendSsml(reader);  \\n          reader.Close();  \\n        }  \\n  \\n        // Add a handler for the SpeakProgress event.  \\n        synth.SpeakProgress +=  \\n          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \\n  \\n        // Speak the prompt and play back the output file.  \\n        synth.Speak(builder);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Write each word and its character position to the console.  \\n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Speak progress: {0} {1}\\\",  \\n        e.CharacterPosition, e.Text);  \\n    }  \\n  }  \\n}  \\n  \\n```  \\n  \\n```xml  \\n<!-- The following are the contents of the file Weather.ssml.   \\nNote that because of the <p> tag and the space that follows it,   \\nthat the character position of the first word \\\"The\\\" will be 86. -->  \\n  \\n<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>  \\n<speak version=\\\"1.0\\\"  \\n xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\"  \\n xml:lang=\\\"en-US\\\">  \\n  \\n  <p> The weather forecast for today is partly cloudy with   \\nsome sun breaks. </p>  \\n  \\n  <break strength=\\\"medium\\\" />  \\n  \\n  <p> Tonight's weather will be cloudy with a 30% chance of   \\nshowers. </p>  \\n  \\n</speak>  \\n  \\n```\"\n  syntax:\n    content: public int CharacterPosition { get; }\n    return:\n      type: System.Int32\n      description: Returns the number of characters and spaces from the beginning of the prompt to the position before the first letter of the word that was just spoken.\n  overload: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.Text\n  id: Text\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  langs:\n  - csharp\n  name: Text\n  nameWithType: SpeakProgressEventArgs.Text\n  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.Text\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: The text that was just spoken when the event was raised.\n  remarks: The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken. For example, the synthesizer speaks the number “4003” as “four thousand three”. It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the spoken words. However, the Text property for each of the three words is the same. It is the text “4003” from the prompt.\n  example:\n  - \"The following example illustrates the how the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event reports the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> and Text properties for strings that contain numbers.  \\n  \\n```c#  \\nusing System;  \\nusing System.Xml;  \\nusing System.IO;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create an XML Reader from the file, create a PromptBuilder and   \\n        // append the XmlReader.  \\n        PromptBuilder builder = new PromptBuilder();  \\n        builder.AppendText(\\\"4003\\\");  \\n  \\n        // Add a handler for the SpeakProgress event.  \\n        synth.SpeakProgress +=  \\n          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \\n  \\n        // Speak the prompt and play back the output file.  \\n        synth.Speak(builder);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Write each word and its character position to the console.  \\n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Speak progress -    Character position:  {0}    Text:  {1}\\\",  \\n        e.CharacterPosition, e.Text);  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public string Text { get; }\n    return:\n      type: System.String\n      description: Returns the text that was just spoken when the event was raised.\n  overload: System.Speech.Synthesis.SpeakProgressEventArgs.Text*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Speech.Synthesis.PromptEventArgs\n  isExternal: false\n  name: System.Speech.Synthesis.PromptEventArgs\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  isExternal: false\n  name: AudioPosition\n  nameWithType: SpeakProgressEventArgs.AudioPosition\n  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  isExternal: false\n  name: CharacterCount\n  nameWithType: SpeakProgressEventArgs.CharacterCount\n  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  isExternal: false\n  name: CharacterPosition\n  nameWithType: SpeakProgressEventArgs.CharacterPosition\n  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.Text\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  isExternal: false\n  name: Text\n  nameWithType: SpeakProgressEventArgs.Text\n  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.Text\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition*\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  isExternal: false\n  name: AudioPosition\n  nameWithType: SpeakProgressEventArgs.AudioPosition\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount*\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  isExternal: false\n  name: CharacterCount\n  nameWithType: SpeakProgressEventArgs.CharacterCount\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition*\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  isExternal: false\n  name: CharacterPosition\n  nameWithType: SpeakProgressEventArgs.CharacterPosition\n- uid: System.Speech.Synthesis.SpeakProgressEventArgs.Text*\n  parent: System.Speech.Synthesis.SpeakProgressEventArgs\n  isExternal: false\n  name: Text\n  nameWithType: SpeakProgressEventArgs.Text\n"}