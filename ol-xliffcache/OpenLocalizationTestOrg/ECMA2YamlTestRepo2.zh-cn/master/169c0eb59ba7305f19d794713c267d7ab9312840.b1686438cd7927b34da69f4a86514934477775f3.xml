{"nodes":[{"pos":[1934,2053],"content":"The PropertyCollection class contains the properties of a <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The PropertyCollection class contains the properties of a <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref>."},{"pos":[2708,2772],"content":"Determines whether the specified property is in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified property is in this collection.","pos":[0,64]}]},{"pos":[2924,2957],"content":"The name of the property to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the property to find.","pos":[0,33]}]},{"pos":[3016,3225],"content":"The return value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified property belongs to this collection; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The return value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified property belongs to this collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3933,4040],"content":"Copies the all objects in this collection to an array, starting at the specified index in the target array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the all objects in this collection to an array, starting at the specified index in the target array.","pos":[0,107]}]},{"pos":[4268,4405],"content":"The array of <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.PropertyValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that receives the elements of this collection.","needQuote":true,"needEscape":true,"source":"The array of <xref href=\"System.DirectoryServices.PropertyValueCollection\"></xref> objects that receives the elements of this collection."},{"pos":[4466,4547],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> where this method starts copying this collection.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` where this method starts copying this collection."},{"pos":[4758,4820],"content":"An error occurred during the call to the underlying interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred during the call to the underlying interface.","pos":[0,62]}]},{"pos":[5213,5262],"content":"Gets the number of properties in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of properties in this collection.","pos":[0,49]}]},{"pos":[5274,5424],"content":"The Internet Information Services (IIS), and WinNT providers do not currently support Count, so each will throw a <xref:System.NotSupportedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Internet Information Services (IIS), and WinNT providers do not currently support Count, so each will throw a &lt;xref:System.NotSupportedException&gt;.","pos":[0,150],"source":"The Internet Information Services (IIS), and WinNT providers do not currently support Count, so each will throw a <xref:System.NotSupportedException>."}]},{"pos":[5530,5574],"content":"The number of properties in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of properties in this collection.","pos":[0,44]}]},{"pos":[5784,5846],"content":"An error occurred during the call to the underlying interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred during the call to the underlying interface.","pos":[0,62]}]},{"pos":[5949,6002],"content":"The directory cannot report the number of properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"The directory cannot report the number of properties.","pos":[0,53]}]},{"pos":[6439,6513],"content":"Returns an enumerator that you can use to iterate through this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator that you can use to iterate through this collection.","pos":[0,74]}]},{"pos":[6706,6809],"content":"An <xref:System.Collections.IDictionaryEnumerator> that you can use to iterate through this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IDictionaryEnumerator&gt; that you can use to iterate through this collection.","pos":[0,103],"source":"An <xref:System.Collections.IDictionaryEnumerator> that you can use to iterate through this collection."}]},{"pos":[7027,7089],"content":"An error occurred during the call to the underlying interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred during the call to the underlying interface.","pos":[0,62]}]},{"pos":[7531,7559],"content":"Gets the specified property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the specified property.","pos":[0,28]}]},{"pos":[7572,7966],"content":"In C#, this property is the indexer for the <xref:System.DirectoryServices.PropertyCollection> class.       In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property with a type of Object and an index type of <xref:System.String>.","needQuote":false,"needEscape":true,"nodes":[{"content":"In C#, this property is the indexer for the <xref:System.DirectoryServices.PropertyCollection> class.       In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property with a type of Object and an index type of <xref:System.String>.","pos":[0,392],"nodes":[{"content":"In C#, this property is the indexer for the &lt;xref:System.DirectoryServices.PropertyCollection&gt; class.","pos":[0,101],"source":"In C#, this property is the indexer for the <xref:System.DirectoryServices.PropertyCollection> class."},{"content":"In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own.","pos":[108,224]},{"content":"However, specifying the expando attribute on a class automatically provides a default indexed property with a type of Object and an index type of &lt;xref:System.String&gt;.","pos":[225,392],"source":" However, specifying the expando attribute on a class automatically provides a default indexed property with a type of Object and an index type of <xref:System.String>."}]}]},{"pos":[8166,8203],"content":"The name of the property to retrieve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the property to retrieve.","pos":[0,37]}]},{"pos":[8296,8332],"content":"The value of the specified property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the specified property.","pos":[0,36]}]},{"pos":[8844,8896],"content":"Gets the names of the properties in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the names of the properties in this collection.","pos":[0,52]}]},{"pos":[8908,9088],"content":"When accessing members of the PropertyNames property, a <xref:System.Runtime.InteropServices.COMException> might be thrown due to an error while accessing the underlying interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"When accessing members of the PropertyNames property, a &lt;xref:System.Runtime.InteropServices.COMException&gt; might be thrown due to an error while accessing the underlying interface.","pos":[0,180],"source":"When accessing members of the PropertyNames property, a <xref:System.Runtime.InteropServices.COMException> might be thrown due to an error while accessing the underlying interface."}]},{"pos":[9247,9356],"content":"An <xref:System.Collections.ICollection> object that contains the names of the properties in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.ICollection&gt; object that contains the names of the properties in this collection.","pos":[0,109],"source":"An <xref:System.Collections.ICollection> object that contains the names of the properties in this collection."}]},{"pos":[10102,10245],"content":"Copies the elements of the <xref:System.Collections.ICollection> to an <xref:System.Array>, starting at a particular <xref:System.Array> index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the elements of the &lt;xref:System.Collections.ICollection&gt; to an &lt;xref:System.Array&gt;, starting at a particular &lt;xref:System.Array&gt; index.","pos":[0,143],"source":"Copies the elements of the <xref:System.Collections.ICollection> to an <xref:System.Array>, starting at a particular <xref:System.Array> index."}]},{"pos":[10395,10580],"content":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref:System.Collections.ICollection>. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref:System.Collections.ICollection>. The <xref:System.Array> must have zero-based indexing.","pos":[0,185],"nodes":[{"content":"The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from &lt;xref:System.Collections.ICollection&gt;.","pos":[0,130],"source":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref:System.Collections.ICollection>."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[131,185],"source":" The <xref:System.Array> must have zero-based indexing."}]}]},{"pos":[10641,10697],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[10909,10992],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11107,11144],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero."},{"pos":[11240,11485],"content":"<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref:System.Collections.ICollection> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","pos":[0,39],"source":"<code>array</code> is multidimensional."},{"content":"-or-       The number of elements in the source <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> is greater than the available space from <ph id=\"ph2\">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id=\"ph3\">&lt;code&gt;array&lt;/code&gt;</ph>.","pos":[46,241],"source":"       -or-       The number of elements in the source <xref:System.Collections.ICollection> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}]},{"pos":[11587,11727],"content":"The type of the source &lt;xref:System.Collections.ICollection&gt; cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination <code>array</code>."},{"pos":[12334,12448],"content":"Gets a value indicating whether access to the <xref:System.Collections.ICollection> is synchronized (thread safe).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether access to the &lt;xref:System.Collections.ICollection&gt; is synchronized (thread safe).","pos":[0,114],"source":"Gets a value indicating whether access to the <xref:System.Collections.ICollection> is synchronized (thread safe)."}]},{"pos":[12461,13825],"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.       [Visual Basic, C#]       The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:      ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```      ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; returns an object, which can be used to synchronize access to the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,154],"source":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>."},{"content":"Most collection classes in the &lt;xref:System.Collections?displayProperty=fullName&gt; namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.","pos":[161,362],"source":"       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection."},{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[369,447]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[448,585]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.","pos":[586,769]},{"content":"[Visual Basic, C#]       The following example shows how to lock the collection using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; during the entire enumeration:      <ph id=\"ph1\">```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```</ph>      <ph id=\"ph2\">```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```</ph>","pos":[776,1337],"source":"       [Visual Basic, C#]       The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:      ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```      ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```"}]},{"pos":[13968,14189],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access to the &lt;xref:System.Collections.ICollection&gt; is synchronized (thread safe); otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref:System.Collections.ICollection> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14886,14985],"content":"Gets an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that can be used to synchronize access to the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,99],"source":"Gets an object that can be used to synchronize access to the <xref:System.Collections.ICollection>."}]},{"pos":[14998,17543],"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's SyncRoot property.       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.       In the absence of a Synchronized method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:      ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ```      ```vb#   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     ' Some operation on the collection, which is now thread safe.    End SyncLock   ```       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       [Visual Basic, C#]       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:      ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```      ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance.","pos":[0,128]},{"content":"Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's SyncRoot property.","pos":[129,310]},{"content":"Most collection classes in the &lt;xref:System.Collections?displayProperty=fullName&gt; namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.","pos":[317,518],"source":"       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection."},{"content":"However, derived classes can provide their own synchronized version of the collection using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; property.","pos":[519,674],"source":" However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; of the collection, not directly on the collection.","pos":[675,829],"source":" The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[830,911]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","pos":[912,1044]},{"content":"In the absence of a Synchronized method on a collection, the expected usage for &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; looks like this:      <ph id=\"ph1\">```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ```</ph>      <ph id=\"ph2\">```vb#   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     ' Some operation on the collection, which is now thread safe.    End SyncLock   ```</ph>       Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[1051,1610],"source":"       In the absence of a Synchronized method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:      ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ```      ```vb#   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     ' Some operation on the collection, which is now thread safe.    End SyncLock   ```       Enumerating through a collection is intrinsically not a thread safe procedure."},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[1611,1748]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[1749,1930]},{"content":"[Visual Basic, C#]       The following code example shows how to lock the collection using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; during the entire enumeration:      <ph id=\"ph1\">```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```</ph>      <ph id=\"ph2\">```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```</ph>","pos":[1937,2502],"source":"       [Visual Basic, C#]       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:      ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```      ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```"}]},{"pos":[17681,17775],"content":"An object that can be used to synchronize access to the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that can be used to synchronize access to the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,94],"source":"An object that can be used to synchronize access to the <xref:System.Collections.ICollection>."}]},{"pos":[18542,18642],"content":"Adds an element with the provided key and value to the <xref:System.Collections.IDictionary> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an element with the provided key and value to the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[0,100],"source":"Adds an element with the provided key and value to the <xref:System.Collections.IDictionary> object."}]},{"pos":[18654,19139],"content":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can also use the &lt;xref:System.Collections.IDictionary.Item%2A&gt; property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <ph id=\"ph1\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>).","pos":[0,224],"source":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`)."},{"content":"However, if the specified key already exists in the dictionary, setting the &lt;xref:System.Collections.IDictionary.Item%2A&gt; property overwrites the old value.","pos":[225,381],"source":" However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value."},{"content":"In contrast, the &lt;xref:System.Collections.IDictionary.Add%2A&gt; method does not modify existing elements.","pos":[382,485],"source":" In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements."}]},{"pos":[19773,19838],"content":"The <xref:System.Object> to use as the key of the element to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to use as the key of the element to add.","pos":[0,65],"source":"The <xref:System.Object> to use as the key of the element to add."}]},{"pos":[19900,19967],"content":"The <xref:System.Object> to use as the value of the element to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to use as the value of the element to add.","pos":[0,67],"source":"The <xref:System.Object> to use as the value of the element to add."}]},{"pos":[20176,20257],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[20352,20448],"content":"An element with the same key already exists in the <xref:System.Collections.IDictionary> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"An element with the same key already exists in the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[0,96],"source":"An element with the same key already exists in the <xref:System.Collections.IDictionary> object."}]},{"pos":[20552,20688],"content":"The <xref:System.Collections.IDictionary> is read-only.       -or-       The <xref:System.Collections.IDictionary> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Collections.IDictionary> is read-only.       -or-       The <xref:System.Collections.IDictionary> has a fixed size.","pos":[0,132],"nodes":[{"content":"The &lt;xref:System.Collections.IDictionary&gt; is read-only.","pos":[0,55],"source":"The <xref:System.Collections.IDictionary> is read-only."},{"content":"-or-       The &lt;xref:System.Collections.IDictionary&gt; has a fixed size.","pos":[62,132],"source":"       -or-       The <xref:System.Collections.IDictionary> has a fixed size."}]}]},{"pos":[21255,21330],"content":"Removes all elements from the <xref:System.Collections.IDictionary> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes all elements from the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[0,75],"source":"Removes all elements from the <xref:System.Collections.IDictionary> object."}]},{"pos":[22114,22176],"content":"The <xref:System.Collections.IDictionary> object is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IDictionary&gt; object is read-only.","pos":[0,62],"source":"The <xref:System.Collections.IDictionary> object is read-only."}]},{"pos":[22805,22916],"content":"Determines whether the <xref:System.Collections.IDictionary> object contains an element with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the &lt;xref:System.Collections.IDictionary&gt; object contains an element with the specified key.","pos":[0,111],"source":"Determines whether the <xref:System.Collections.IDictionary> object contains an element with the specified key."}]},{"pos":[23566,23636],"content":"The key to locate in the <xref:System.Collections.IDictionary> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key to locate in the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[0,70],"source":"The key to locate in the <xref:System.Collections.IDictionary> object."}]},{"pos":[23695,23909],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Collections.IDictionary&gt; contains an element with the key; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> contains an element with the key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24123,24204],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[24796,24894],"content":"Gets a value indicating whether the <xref:System.Collections.IDictionary> object has a fixed size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the &lt;xref:System.Collections.IDictionary&gt; object has a fixed size.","pos":[0,98],"source":"Gets a value indicating whether the <xref:System.Collections.IDictionary> object has a fixed size."}]},{"pos":[24907,25354],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","needQuote":false,"needEscape":true,"nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[0,445],"nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.","pos":[0,168]},{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[175,445]}]}]},{"pos":[25997,26202],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Collections.IDictionary&gt; object has a fixed size; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> object has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[26906,27000],"content":"Gets a value indicating whether the <xref:System.Collections.IDictionary> object is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the &lt;xref:System.Collections.IDictionary&gt; object is read-only.","pos":[0,94],"source":"Gets a value indicating whether the <xref:System.Collections.IDictionary> object is read-only."}]},{"pos":[27012,27141],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]}]},{"pos":[27774,27975],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Collections.IDictionary&gt; object is read-only; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> object is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[28702,28750],"content":"Gets or sets the element with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the element with the specified key.","pos":[0,48]}]},{"pos":[28763,29392],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.       You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[key]`</ph>.","pos":[0,133],"source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`."},{"content":"You can also use the &lt;xref:System.Collections.IDictionary.Item%2A&gt; property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <ph id=\"ph1\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>).","pos":[140,364],"source":"       You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`)."},{"content":"However, if the specified key already exists in the dictionary, setting the &lt;xref:System.Collections.IDictionary.Item%2A&gt; property overwrites the old value.","pos":[365,521],"source":" However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value."},{"content":"In contrast, the &lt;xref:System.Collections.IDictionary.Add%2A&gt; method does not modify existing elements.","pos":[522,625],"source":" In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements."}]},{"pos":[30053,30090],"content":"The key of the element to get or set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the element to get or set.","pos":[0,37]}]},{"pos":[30148,30183],"content":"The element with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element with the specified key.","pos":[0,35]}]},{"pos":[30393,30474],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[30578,30821],"content":"The property is set and the <xref:System.Collections.IDictionary> object is read-only.       -or-       The property is set, <code>key</code> does not exist in the collection, and the <xref:System.Collections.IDictionary> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The property is set and the &lt;xref:System.Collections.IDictionary&gt; object is read-only.","pos":[0,86],"source":"The property is set and the <xref:System.Collections.IDictionary> object is read-only."},{"content":"-or-       The property is set, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the collection, and the &lt;xref:System.Collections.IDictionary&gt; has a fixed size.","pos":[93,239],"source":"       -or-       The property is set, <code>key</code> does not exist in the collection, and the <xref:System.Collections.IDictionary> has a fixed size."}]},{"pos":[31379,31504],"content":"Gets an <xref:System.Collections.ICollection> object containing the keys of the <xref:System.Collections.IDictionary> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an &lt;xref:System.Collections.ICollection&gt; object containing the keys of the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[0,125],"source":"Gets an <xref:System.Collections.ICollection> object containing the keys of the <xref:System.Collections.IDictionary> object."}]},{"pos":[31516,31800],"content":"The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The order of the keys in the returned &lt;xref:System.Collections.ICollection&gt; object is unspecified, but is guaranteed to be the same order as the corresponding values in the &lt;xref:System.Collections.ICollection&gt; returned by the &lt;xref:System.Collections.IDictionary.Values%2A&gt; property.","pos":[0,284],"source":"The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property."}]},{"pos":[32466,32586],"content":"An <xref:System.Collections.ICollection> object containing the keys of the <xref:System.Collections.IDictionary> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.ICollection&gt; object containing the keys of the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[0,120],"source":"An <xref:System.Collections.ICollection> object containing the keys of the <xref:System.Collections.IDictionary> object."}]},{"pos":[33315,33412],"content":"Removes the element with the specified key from the <xref:System.Collections.IDictionary> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the element with the specified key from the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[0,97],"source":"Removes the element with the specified key from the <xref:System.Collections.IDictionary> object."}]},{"pos":[34052,34085],"content":"The key of the element to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the element to remove.","pos":[0,33]}]},{"pos":[34297,34378],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[34482,34625],"content":"The <xref:System.Collections.IDictionary> object is read-only.       -or-       The <xref:System.Collections.IDictionary> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Collections.IDictionary> object is read-only.       -or-       The <xref:System.Collections.IDictionary> has a fixed size.","pos":[0,139],"nodes":[{"content":"The &lt;xref:System.Collections.IDictionary&gt; object is read-only.","pos":[0,62],"source":"The <xref:System.Collections.IDictionary> object is read-only."},{"content":"-or-       The &lt;xref:System.Collections.IDictionary&gt; has a fixed size.","pos":[69,139],"source":"       -or-       The <xref:System.Collections.IDictionary> has a fixed size."}]}]},{"pos":[35232,35288],"content":"Returns an <xref:System.Collections.IEnumerable> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an &lt;xref:System.Collections.IEnumerable&gt; object.","pos":[0,56],"source":"Returns an <xref:System.Collections.IEnumerable> object."}]},{"pos":[35301,37881],"content":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Visual Basic, C#]       The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,137],"source":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended instead of directly manipulating the enumerator.","pos":[139,229],"source":"  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[236,356]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[363,446]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[447,543],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, the &lt;xref:System.Collections.IEnumerator.Current%2A&gt; property is undefined.","pos":[545,638],"source":"  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[639,856],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[863,1059],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1060,1184],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1191,1418],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1419,1550],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[1551,1701],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1702,1926],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1933,2005]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[2006,2168]},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[2175,2329]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[2331,2436]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[2438,2566]}]},{"pos":[38060,38108],"content":"An <xref:System.Collections.IEnumerable>.object.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerable&gt;.object.","pos":[0,48],"source":"An <xref:System.Collections.IEnumerable>.object."}]},{"pos":[38625,38678],"content":"Gets the values of the properties in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the values of the properties in this collection.","pos":[0,53]}]},{"pos":[38690,38873],"content":"When accessing members of the Values property, a <xref:System.Runtime.InteropServices.COMException> exception might be thrown due to an error while accessing the underlying interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"When accessing members of the Values property, a &lt;xref:System.Runtime.InteropServices.COMException&gt; exception might be thrown due to an error while accessing the underlying interface.","pos":[0,183],"source":"When accessing members of the Values property, a <xref:System.Runtime.InteropServices.COMException> exception might be thrown due to an error while accessing the underlying interface."}]},{"pos":[39025,39128],"content":"An <xref:System.Collections.ICollection> that contains the values of the properties in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.ICollection&gt; that contains the values of the properties in this collection.","pos":[0,103],"source":"An <xref:System.Collections.ICollection> that contains the values of the properties in this collection."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.DirectoryServices.PropertyCollection\n  id: PropertyCollection\n  children:\n  - System.DirectoryServices.PropertyCollection.Contains(System.String)\n  - System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)\n  - System.DirectoryServices.PropertyCollection.Count\n  - System.DirectoryServices.PropertyCollection.GetEnumerator\n  - System.DirectoryServices.PropertyCollection.Item(System.String)\n  - System.DirectoryServices.PropertyCollection.PropertyNames\n  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized\n  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)\n  - System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator\n  - System.DirectoryServices.PropertyCollection.Values\n  langs:\n  - csharp\n  name: PropertyCollection\n  nameWithType: PropertyCollection\n  fullName: System.DirectoryServices.PropertyCollection\n  type: Class\n  summary: The PropertyCollection class contains the properties of a <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref>.\n  syntax:\n    content: 'public class PropertyCollection : System.Collections.IDictionary'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)\n  id: Contains(System.String)\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: Contains(String)\n  nameWithType: PropertyCollection.Contains(String)\n  fullName: System.DirectoryServices.PropertyCollection.Contains(String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Determines whether the specified property is in this collection.\n  syntax:\n    content: public bool Contains (string propertyName);\n    parameters:\n    - id: propertyName\n      type: System.String\n      description: The name of the property to find.\n    return:\n      type: System.Boolean\n      description: The return value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified property belongs to this collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.PropertyCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)\n  id: CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: CopyTo(PropertyValueCollection[],Int32)\n  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[],Int32)\n  fullName: System.DirectoryServices.PropertyCollection.CopyTo(PropertyValueCollection[],Int32)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Copies the all objects in this collection to an array, starting at the specified index in the target array.\n  syntax:\n    content: public void CopyTo (System.DirectoryServices.PropertyValueCollection[] array, int index);\n    parameters:\n    - id: array\n      type: System.DirectoryServices.PropertyValueCollection[]\n      description: The array of <xref href=\"System.DirectoryServices.PropertyValueCollection\"></xref> objects that receives the elements of this collection.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` where this method starts copying this collection.\n  overload: System.DirectoryServices.PropertyCollection.CopyTo*\n  exceptions:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An error occurred during the call to the underlying interface.\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.Count\n  id: Count\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: PropertyCollection.Count\n  fullName: System.DirectoryServices.PropertyCollection.Count\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the number of properties in this collection.\n  remarks: The Internet Information Services (IIS), and WinNT providers do not currently support Count, so each will throw a <xref:System.NotSupportedException>.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of properties in this collection.\n  overload: System.DirectoryServices.PropertyCollection.Count*\n  exceptions:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An error occurred during the call to the underlying interface.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The directory cannot report the number of properties.\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: PropertyCollection.GetEnumerator()\n  fullName: System.DirectoryServices.PropertyCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns an enumerator that you can use to iterate through this collection.\n  syntax:\n    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An <xref:System.Collections.IDictionaryEnumerator> that you can use to iterate through this collection.\n  overload: System.DirectoryServices.PropertyCollection.GetEnumerator*\n  exceptions:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An error occurred during the call to the underlying interface.\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: PropertyCollection.Item(String)\n  fullName: System.DirectoryServices.PropertyCollection.Item(String)\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the specified property.\n  remarks: \"In C#, this property is the indexer for the <xref:System.DirectoryServices.PropertyCollection> class.  \\n  \\n In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property with a type of Object and an index type of <xref:System.String>.\"\n  syntax:\n    content: public System.DirectoryServices.PropertyValueCollection this[string propertyName] { get; }\n    parameters:\n    - id: propertyName\n      type: System.String\n      description: The name of the property to retrieve.\n    return:\n      type: System.DirectoryServices.PropertyValueCollection\n      description: The value of the specified property.\n  overload: System.DirectoryServices.PropertyCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.PropertyNames\n  id: PropertyNames\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: PropertyNames\n  nameWithType: PropertyCollection.PropertyNames\n  fullName: System.DirectoryServices.PropertyCollection.PropertyNames\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the names of the properties in this collection.\n  remarks: When accessing members of the PropertyNames property, a <xref:System.Runtime.InteropServices.COMException> might be thrown due to an error while accessing the underlying interface.\n  syntax:\n    content: public System.Collections.ICollection PropertyNames { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref:System.Collections.ICollection> object that contains the names of the properties in this collection.\n  overload: System.DirectoryServices.PropertyCollection.PropertyNames*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Copies the elements of the <xref:System.Collections.ICollection> to an <xref:System.Array>, starting at a particular <xref:System.Array> index.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref:System.Collections.ICollection>. The <xref:System.Array> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref:System.Collections.ICollection> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination <code>array</code>.\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a value indicating whether access to the <xref:System.Collections.ICollection> is synchronized (thread safe).\n  remarks: \"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.  \\n  \\n [Visual Basic, C#]  \\n  \\n The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n```c#  \\nICollection myCollection = new ICollection();  \\n  lock(myCollection.SyncRoot) {  \\n  foreach (Object item in myCollection) {  \\n  // Insert your code here.  \\n  }  \\n }  \\n```  \\n  \\n```vb#  \\nDim myCollection As New ICollection()  \\n Dim item As Object  \\n SyncLock myCollection.SyncRoot  \\n  For Each item In myCollection  \\n  ' Insert your code here.  \\n  Next item  \\n End SyncLock  \\n```\"\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref:System.Collections.ICollection> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.\n  remarks: \"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's SyncRoot property.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.  \\n  \\n In the absence of a Synchronized method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:  \\n  \\n```c#  \\nICollection MyCollection =...  \\n lock(MyCollection.SyncRoot) {  \\n  // Some operation on the collection, which is now thread safe.  \\n }  \\n```  \\n  \\n```vb#  \\nDim myCollection as New ICollection()  \\n SyncLock myCollection.SyncRoot  \\n  ' Some operation on the collection, which is now thread safe.  \\n End SyncLock  \\n```  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n [Visual Basic, C#]  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n```c#  \\nICollection myCollection = new ICollection();  \\n lock(myCollection.SyncRoot) {  \\n  foreach (Object item in myCollection) {  \\n  // Insert your code here.  \\n  }  \\n }  \\n```  \\n  \\n```vb#  \\nDim myCollection As New ICollection()  \\n Dim item As Object  \\n SyncLock myCollection.SyncRoot  \\n  For Each item In myCollection  \\n  ' Insert your code here.  \\n  Next item  \\n End SyncLock  \\n```\"\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref:System.Collections.ICollection>.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  id: System#Collections#IDictionary#Add(System.Object,System.Object)\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Add(Object,Object)\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Add(Object,Object)\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Add(Object,Object)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Adds an element with the provided key and value to the <xref:System.Collections.IDictionary> object.\n  remarks: You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.\n  example:\n  - \"The following example shows how to implement the <xref:System.Collections.IDictionary.Add%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#9](~/add/codesnippet/cpp/1a38ef09-e972-4d5a-adef-_1.cpp)]\\n [!code-cs[Dictionary#9](~/add/codesnippet/csharp/1a38ef09-e972-4d5a-adef-_1.cs)]\\n [!code-vb[Dictionary#9](~/add/codesnippet/visualbasic/1a38ef09-e972-4d5a-adef-_1.vb)]\"\n  syntax:\n    content: void IDictionary.Add (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The <xref:System.Object> to use as the key of the element to add.\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to use as the value of the element to add.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An element with the same key already exists in the <xref:System.Collections.IDictionary> object.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref:System.Collections.IDictionary> is read-only.  \\n  \\n -or-  \\n  \\n The <xref:System.Collections.IDictionary> has a fixed size.\"\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear\n  id: System#Collections#IDictionary#Clear\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Clear()\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear()\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Clear()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Removes all elements from the <xref:System.Collections.IDictionary> object.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Clear%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#8](~/add/codesnippet/cpp/473cc76e-c5f1-4b76-bd2d-_1.cpp)]\\n [!code-cs[Dictionary#8](~/add/codesnippet/csharp/473cc76e-c5f1-4b76-bd2d-_1.cs)]\\n [!code-vb[Dictionary#8](~/add/codesnippet/visualbasic/473cc76e-c5f1-4b76-bd2d-_1.vb)]\"\n  syntax:\n    content: void IDictionary.Clear ();\n    parameters: []\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref:System.Collections.IDictionary> object is read-only.\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)\n  id: System#Collections#IDictionary#Contains(System.Object)\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Contains(Object)\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains(Object)\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Contains(Object)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Determines whether the <xref:System.Collections.IDictionary> object contains an element with the specified key.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Contains%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#5](~/add/codesnippet/cpp/37011492-a9b1-4bd3-bee4-_1.cpp)]\\n [!code-cs[Dictionary#5](~/add/codesnippet/csharp/37011492-a9b1-4bd3-bee4-_1.cs)]\\n [!code-vb[Dictionary#5](~/add/codesnippet/visualbasic/37011492-a9b1-4bd3-bee4-_1.vb)]\"\n  syntax:\n    content: bool IDictionary.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The key to locate in the <xref:System.Collections.IDictionary> object.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> contains an element with the key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize\n  id: System#Collections#IDictionary#IsFixedSize\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.IsFixedSize\n  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsFixedSize\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a value indicating whether the <xref:System.Collections.IDictionary> object has a fixed size.\n  remarks: \"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.\"\n  example:\n  - \"The following example demonstrates how to implement the <xref:System.Collections.IDictionary.IsFixedSize%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#6](~/add/codesnippet/cpp/9254691a-4dee-480c-bf03-_1.cpp)]\\n [!code-cs[Dictionary#6](~/add/codesnippet/csharp/9254691a-4dee-480c-bf03-_1.cs)]\\n [!code-vb[Dictionary#6](~/add/codesnippet/visualbasic/9254691a-4dee-480c-bf03-_1.vb)]\"\n  syntax:\n    content: bool System.Collections.IDictionary.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> object has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly\n  id: System#Collections#IDictionary#IsReadOnly\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.IsReadOnly\n  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsReadOnly\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a value indicating whether the <xref:System.Collections.IDictionary> object is read-only.\n  remarks: A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.\n  example:\n  - \"The following example shows how to implement the <xref:System.Collections.IDictionary.IsReadOnly%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#4](~/add/codesnippet/cpp/758e339d-f700-4387-ac5f-_1.cpp)]\\n [!code-cs[Dictionary#4](~/add/codesnippet/csharp/758e339d-f700-4387-ac5f-_1.cs)]\\n [!code-vb[Dictionary#4](~/add/codesnippet/visualbasic/758e339d-f700-4387-ac5f-_1.vb)]\"\n  syntax:\n    content: bool System.Collections.IDictionary.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> object is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)\n  id: System#Collections#IDictionary#Item(System.Object)\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Item(Object)\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Item(Object)\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Item(Object)\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets or sets the element with the specified key.\n  remarks: \"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \\n  \\n You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.\"\n  example:\n  - \"The following example shows how to implement the <xref:System.Collections.IDictionary.Item%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#13](~/add/codesnippet/cpp/f4830ad8-862c-4ae4-a8e0-_1.cpp)]\\n [!code-cs[Dictionary#13](~/add/codesnippet/csharp/f4830ad8-862c-4ae4-a8e0-_1.cs)]\\n [!code-vb[Dictionary#13](~/add/codesnippet/visualbasic/f4830ad8-862c-4ae4-a8e0-_1.vb)]\"\n  syntax:\n    content: object System.Collections.IDictionary.Item[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to get or set.\n    return:\n      type: System.Object\n      description: The element with the specified key.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The property is set and the <xref:System.Collections.IDictionary> object is read-only.  \\n  \\n -or-  \\n  \\n The property is set, <code>key</code> does not exist in the collection, and the <xref:System.Collections.IDictionary> has a fixed size.\"\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys\n  id: System#Collections#IDictionary#Keys\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Keys\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Keys\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets an <xref:System.Collections.ICollection> object containing the keys of the <xref:System.Collections.IDictionary> object.\n  remarks: The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.\n  example:\n  - \"The following example shows how to implement the <xref:System.Collections.IDictionary.Keys%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#10](~/add/codesnippet/cpp/66b18c51-f730-4ac9-89c7-_1.cpp)]\\n [!code-cs[Dictionary#10](~/add/codesnippet/csharp/66b18c51-f730-4ac9-89c7-_1.cs)]\\n [!code-vb[Dictionary#10](~/add/codesnippet/visualbasic/66b18c51-f730-4ac9-89c7-_1.vb)]\"\n  syntax:\n    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref:System.Collections.ICollection> object containing the keys of the <xref:System.Collections.IDictionary> object.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)\n  id: System#Collections#IDictionary#Remove(System.Object)\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Remove(Object)\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove(Object)\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Remove(Object)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Removes the element with the specified key from the <xref:System.Collections.IDictionary> object.\n  remarks: ''\n  example:\n  - \"The following example shows how to implement the <xref:System.Collections.IDictionary.Remove%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#7](~/add/codesnippet/cpp/0e5c3e14-6952-45d5-9f38-_1.cpp)]\\n [!code-cs[Dictionary#7](~/add/codesnippet/csharp/0e5c3e14-6952-45d5-9f38-_1.cs)]\\n [!code-vb[Dictionary#7](~/add/codesnippet/visualbasic/0e5c3e14-6952-45d5-9f38-_1.vb)]\"\n  syntax:\n    content: void IDictionary.Remove (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to remove.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref:System.Collections.IDictionary> object is read-only.  \\n  \\n -or-  \\n  \\n The <xref:System.Collections.IDictionary> has a fixed size.\"\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns an <xref:System.Collections.IEnumerable> object.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerable>.object.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.PropertyCollection.Values\n  id: Values\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: Values\n  nameWithType: PropertyCollection.Values\n  fullName: System.DirectoryServices.PropertyCollection.Values\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the values of the properties in this collection.\n  remarks: When accessing members of the Values property, a <xref:System.Runtime.InteropServices.COMException> exception might be thrown due to an error while accessing the underlying interface.\n  syntax:\n    content: public System.Collections.ICollection Values { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref:System.Collections.ICollection> that contains the values of the properties in this collection.\n  overload: System.DirectoryServices.PropertyCollection.Values*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Runtime.InteropServices.COMException\n  isExternal: true\n  name: System.Runtime.InteropServices.COMException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Contains(String)\n  nameWithType: PropertyCollection.Contains(String)\n  fullName: System.DirectoryServices.PropertyCollection.Contains(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: CopyTo(PropertyValueCollection[],Int32)\n  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[],Int32)\n  fullName: System.DirectoryServices.PropertyCollection.CopyTo(PropertyValueCollection[],Int32)\n- uid: System.DirectoryServices.PropertyValueCollection[]\n  parent: System.DirectoryServices\n  isExternal: false\n  name: PropertyValueCollection\n  nameWithType: PropertyValueCollection\n  fullName: System.DirectoryServices.PropertyValueCollection[]\n  spec.csharp:\n  - uid: System.DirectoryServices.PropertyValueCollection\n    name: PropertyValueCollection\n    nameWithType: PropertyValueCollection\n    fullName: PropertyValueCollection[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.DirectoryServices.PropertyCollection.Count\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Count\n  nameWithType: PropertyCollection.Count\n  fullName: System.DirectoryServices.PropertyCollection.Count\n- uid: System.DirectoryServices.PropertyCollection.GetEnumerator\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: PropertyCollection.GetEnumerator()\n  fullName: System.DirectoryServices.PropertyCollection.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.DirectoryServices.PropertyCollection.Item(System.String)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Item(String)\n  nameWithType: PropertyCollection.Item(String)\n  fullName: System.DirectoryServices.PropertyCollection.Item(String)\n- uid: System.DirectoryServices.PropertyValueCollection\n  parent: System.DirectoryServices\n  isExternal: false\n  name: PropertyValueCollection\n  nameWithType: PropertyValueCollection\n  fullName: System.DirectoryServices.PropertyValueCollection\n- uid: System.DirectoryServices.PropertyCollection.PropertyNames\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: PropertyNames\n  nameWithType: PropertyCollection.PropertyNames\n  fullName: System.DirectoryServices.PropertyCollection.PropertyNames\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: true\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.SyncRoot\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Add(Object,Object)\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Add(Object,Object)\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Add(Object,Object)\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Clear()\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear()\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Clear()\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Contains(Object)\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains(Object)\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Contains(Object)\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.IsFixedSize\n  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsFixedSize\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.IsReadOnly\n  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsReadOnly\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Item(Object)\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Item(Object)\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Item(Object)\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Keys\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Keys\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Remove(Object)\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove(Object)\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Remove(Object)\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.DirectoryServices.PropertyCollection.Values\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Values\n  nameWithType: PropertyCollection.Values\n  fullName: System.DirectoryServices.PropertyCollection.Values\n- uid: System.DirectoryServices.PropertyCollection.Contains*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Contains\n  nameWithType: PropertyCollection.Contains\n- uid: System.DirectoryServices.PropertyCollection.CopyTo*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: PropertyCollection.CopyTo\n- uid: System.DirectoryServices.PropertyCollection.Count*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Count\n  nameWithType: PropertyCollection.Count\n- uid: System.DirectoryServices.PropertyCollection.GetEnumerator*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: PropertyCollection.GetEnumerator\n- uid: System.DirectoryServices.PropertyCollection.Item*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Item\n  nameWithType: PropertyCollection.Item\n- uid: System.DirectoryServices.PropertyCollection.PropertyNames*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: PropertyNames\n  nameWithType: PropertyCollection.PropertyNames\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Add\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Add\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Clear\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Contains\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.IsFixedSize\n  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.IsReadOnly\n  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Item\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Item\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Keys\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Remove\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator\n- uid: System.DirectoryServices.PropertyCollection.Values*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Values\n  nameWithType: PropertyCollection.Values\n"}