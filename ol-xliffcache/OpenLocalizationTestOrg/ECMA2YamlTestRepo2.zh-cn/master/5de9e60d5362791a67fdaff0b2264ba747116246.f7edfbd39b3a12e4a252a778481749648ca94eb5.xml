{"nodes":[{"pos":[462,590],"content":"Provides a way to choose a <bpt id=\"p1\">&lt;xref href=\"System.Windows.DataTemplate\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> based on the data object and the data-bound element.","needQuote":true,"needEscape":true,"source":"Provides a way to choose a <xref href=\"System.Windows.DataTemplate\"></xref> based on the data object and the data-bound element."},{"pos":[603,1679],"content":"Typically, you create a DataTemplateSelector when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object. Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>. If you do that then there is no need to create a DataTemplateSelector. Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter. For more information, see [Data Templating Overview](~/add/includes/ajax-current-ext-md.md).       To create a template selector, create a class that inherits from DataTemplateSelector and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. Once your class is defined you can assign an instance of the class to the template selector property of your element.","needQuote":false,"needEscape":true,"nodes":[{"content":"Typically, you create a DataTemplateSelector when you have more than one &lt;xref:System.Windows.DataTemplate&gt; for the same type of objects and you want to supply your own logic to choose a &lt;xref:System.Windows.DataTemplate&gt; to apply based on the properties of each data object.","pos":[0,275],"source":"Typically, you create a DataTemplateSelector when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object."},{"content":"Note that if you have objects of different types you can set the &lt;xref:System.Windows.DataTemplate.DataType%2A&gt; property on the &lt;xref:System.Windows.DataTemplate&gt;.","pos":[276,439],"source":" Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>."},{"content":"If you do that then there is no need to create a DataTemplateSelector.","pos":[440,510]},{"content":"Furthermore, if you have objects of the same type but with different properties, you can also consider using a &lt;xref:System.Windows.DataTrigger&gt; or a data converter.","pos":[511,676],"source":" Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Templating Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[677,769],"source":" For more information, see [Data Templating Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"To create a template selector, create a class that inherits from DataTemplateSelector and override the &lt;xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A&gt; method.","pos":[776,956],"source":"       To create a template selector, create a class that inherits from DataTemplateSelector and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method."},{"content":"Once your class is defined you can assign an instance of the class to the template selector property of your element.","pos":[957,1074]}]},{"pos":[4585,4691],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.DataTemplateSelector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Controls.DataTemplateSelector\"></xref> class."},{"pos":[5452,5569],"content":"When overridden in a derived class, returns a <bpt id=\"p1\">&lt;xref href=\"System.Windows.DataTemplate\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> based on custom logic.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, returns a <xref href=\"System.Windows.DataTemplate\"></xref> based on custom logic."},{"pos":[5581,6107],"content":"Typically, you use a template selector when you have more than one data template defined for the same type of objects. For example, if your binding source is list a list of student objects and you want to apply a particular template to the part-time students. You can do this by creating a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and overriding the SelectTemplate method. Once your class is defined you can assign an instance of the class to the template selector property of your element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Typically, you use a template selector when you have more than one data template defined for the same type of objects. For example, if your binding source is list a list of student objects and you want to apply a particular template to the part-time students. You can do this by creating a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and overriding the SelectTemplate method. Once your class is defined you can assign an instance of the class to the template selector property of your element.","pos":[0,526],"nodes":[{"content":"Typically, you use a template selector when you have more than one data template defined for the same type of objects.","pos":[0,118]},{"content":"For example, if your binding source is list a list of student objects and you want to apply a particular template to the part-time students.","pos":[119,259]},{"content":"You can do this by creating a class that inherits from &lt;xref:System.Windows.Controls.DataTemplateSelector&gt; and overriding the SelectTemplate method.","pos":[260,408],"source":" You can do this by creating a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and overriding the SelectTemplate method."},{"content":"Once your class is defined you can assign an instance of the class to the template selector property of your element.","pos":[409,526]}]}]},{"pos":[8514,8563],"content":"The data object for which to select the template.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data object for which to select the template.","pos":[0,49]}]},{"pos":[8647,8669],"content":"The data-bound object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data-bound object.","pos":[0,22]}]},{"pos":[8741,8947],"content":"Returns a <xref href=\"System.Windows.DataTemplate\"></xref> or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Windows.DataTemplate\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,123],"source":"Returns a <xref href=\"System.Windows.DataTemplate\"></xref> or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[124,206],"source":" The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Controls.DataTemplateSelector\n  id: DataTemplateSelector\n  children:\n  - System.Windows.Controls.DataTemplateSelector.#ctor\n  - System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)\n  langs:\n  - csharp\n  name: DataTemplateSelector\n  nameWithType: DataTemplateSelector\n  fullName: System.Windows.Controls.DataTemplateSelector\n  type: Class\n  summary: Provides a way to choose a <xref href=\"System.Windows.DataTemplate\"></xref> based on the data object and the data-bound element.\n  remarks: \"Typically, you create a DataTemplateSelector when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object. Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>. If you do that then there is no need to create a DataTemplateSelector. Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter. For more information, see [Data Templating Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n To create a template selector, create a class that inherits from DataTemplateSelector and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. Once your class is defined you can assign an instance of the class to the template selector property of your element.\"\n  example:\n  - \"In this example, the binding source is a list of `Task` objects. One of the properties of a `Task` object is `Priority`. There are two data templates defined, `myTaskTemplate` and `importantTaskTemplate`.  \\n  \\n To supply logic to choose which <xref:System.Windows.DataTemplate> to use based on the `Priority` value of the data object, create a subclass of DataTemplateSelector and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. In the following example, the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method provides logic to return the appropriate template based on the value of the `Priority` property. The template to return is found in the resources of the enveloping <xref:System.Windows.Window> element.  \\n  \\n [!code-cs[DataTemplatingIntro_snip#DTSClass](~/add/codesnippet/csharp/DataTemplatingSample/TaskListDataTemplateSelector.cs#dtsclass)]\\n [!code-vb[DataTemplatingIntro_snip#DTSClass](~/add/codesnippet/visualbasic/datatemplatingsample/tasklistdatatemplateselector.vb#dtsclass)]  \\n  \\n We can then declare the `TaskListDataTemplateSelector` as a resource:  \\n  \\n [!code-xml[DataTemplatingIntro_snip#R1](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r1)]  \\n[!code-xml[DataTemplatingIntro_snip#DTS](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#dts)]  \\n[!code-xml[DataTemplatingIntro_snip#R2](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r2)]  \\n  \\n To use the template selector resource, assign it to the <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> property of the <xref:System.Windows.Controls.ListBox>. The <xref:System.Windows.Controls.ListBox> calls the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method of the `TaskListDataTemplateSelector` for each of the items in the underlying collection. The call passes the data object as the item parameter. The <xref:System.Windows.DataTemplate> that is returned by the method is then applied to that data object.  \\n  \\n [!code-xml[DataTemplatingIntro_snip#ItemTemplateSelector](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#itemtemplateselector)]  \\n  \\n For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009).\"\n  syntax:\n    content: public class DataTemplateSelector\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.DataTemplateSelector.#ctor\n  id: '#ctor'\n  parent: System.Windows.Controls.DataTemplateSelector\n  langs:\n  - csharp\n  name: DataTemplateSelector()\n  nameWithType: DataTemplateSelector.DataTemplateSelector()\n  fullName: System.Windows.Controls.DataTemplateSelector.DataTemplateSelector()\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Controls.DataTemplateSelector\"></xref> class.\n  syntax:\n    content: public DataTemplateSelector ();\n    parameters: []\n  overload: System.Windows.Controls.DataTemplateSelector.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)\n  id: SelectTemplate(System.Object,System.Windows.DependencyObject)\n  parent: System.Windows.Controls.DataTemplateSelector\n  langs:\n  - csharp\n  name: SelectTemplate(Object,DependencyObject)\n  nameWithType: DataTemplateSelector.SelectTemplate(Object,DependencyObject)\n  fullName: System.Windows.Controls.DataTemplateSelector.SelectTemplate(Object,DependencyObject)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: When overridden in a derived class, returns a <xref href=\"System.Windows.DataTemplate\"></xref> based on custom logic.\n  remarks: Typically, you use a template selector when you have more than one data template defined for the same type of objects. For example, if your binding source is list a list of student objects and you want to apply a particular template to the part-time students. You can do this by creating a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and overriding the SelectTemplate method. Once your class is defined you can assign an instance of the class to the template selector property of your element.\n  example:\n  - \"In this example, the binding source is a list of `Task` objects. One of the properties of a `Task` object is `Priority`. There are two data templates defined, `myTaskTemplate` and `importantTaskTemplate`.  \\n  \\n To supply logic to choose which <xref:System.Windows.DataTemplate> to use based on the `Priority` value of the data object, create a subclass of <xref:System.Windows.Controls.DataTemplateSelector> and override the SelectTemplate method. In the following example, the SelectTemplate method provides logic to return the appropriate template based on the value of the `Priority` property. The template to return is found in the resources of the enveloping <xref:System.Windows.Window> element.  \\n  \\n [!code-cs[DataTemplatingIntro_snip#DTSClass](~/add/codesnippet/csharp/DataTemplatingSample/TaskListDataTemplateSelector.cs#dtsclass)]\\n [!code-vb[DataTemplatingIntro_snip#DTSClass](~/add/codesnippet/visualbasic/datatemplatingsample/tasklistdatatemplateselector.vb#dtsclass)]  \\n  \\n We can then declare the `TaskListDataTemplateSelector` as a resource:  \\n  \\n [!code-xml[DataTemplatingIntro_snip#R1](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r1)]  \\n[!code-xml[DataTemplatingIntro_snip#DTS](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#dts)]  \\n[!code-xml[DataTemplatingIntro_snip#R2](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r2)]  \\n  \\n To use the template selector resource, assign it to the <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> property of the <xref:System.Windows.Controls.ListBox>. The <xref:System.Windows.Controls.ListBox> calls the SelectTemplate method of the `TaskListDataTemplateSelector` for each of the items in the underlying collection. The call passes the data object as the item parameter. The <xref:System.Windows.DataTemplate> that is returned by the method is then applied to that data object.  \\n  \\n [!code-xml[DataTemplatingIntro_snip#ItemTemplateSelector](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#itemtemplateselector)]  \\n  \\n For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009).\"\n  syntax:\n    content: public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);\n    parameters:\n    - id: item\n      type: System.Object\n      description: The data object for which to select the template.\n    - id: container\n      type: System.Windows.DependencyObject\n      description: The data-bound object.\n    return:\n      type: System.Windows.DataTemplate\n      description: Returns a <xref href=\"System.Windows.DataTemplate\"></xref> or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.Controls.DataTemplateSelector.SelectTemplate*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.Controls.DataTemplateSelector.#ctor\n  parent: System.Windows.Controls.DataTemplateSelector\n  isExternal: false\n  name: DataTemplateSelector()\n  nameWithType: DataTemplateSelector.DataTemplateSelector()\n  fullName: System.Windows.Controls.DataTemplateSelector.DataTemplateSelector()\n- uid: System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)\n  parent: System.Windows.Controls.DataTemplateSelector\n  isExternal: false\n  name: SelectTemplate(Object,DependencyObject)\n  nameWithType: DataTemplateSelector.SelectTemplate(Object,DependencyObject)\n  fullName: System.Windows.Controls.DataTemplateSelector.SelectTemplate(Object,DependencyObject)\n- uid: System.Windows.DataTemplate\n  parent: System.Windows\n  isExternal: false\n  name: DataTemplate\n  nameWithType: DataTemplate\n  fullName: System.Windows.DataTemplate\n- uid: System.Windows.DependencyObject\n  parent: System.Windows\n  isExternal: false\n  name: DependencyObject\n  nameWithType: DependencyObject\n  fullName: System.Windows.DependencyObject\n- uid: System.Windows.Controls.DataTemplateSelector.#ctor*\n  parent: System.Windows.Controls.DataTemplateSelector\n  isExternal: false\n  name: DataTemplateSelector\n  nameWithType: DataTemplateSelector.DataTemplateSelector\n- uid: System.Windows.Controls.DataTemplateSelector.SelectTemplate*\n  parent: System.Windows.Controls.DataTemplateSelector\n  isExternal: false\n  name: SelectTemplate\n  nameWithType: DataTemplateSelector.SelectTemplate\n"}