{"nodes":[{"pos":[2527,2552],"content":"Represents a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a transaction.","pos":[0,25]}]},{"pos":[2565,3633],"content":"The <xref:System.Transactions> namespace provides both an explicit programming model based on the Transaction class, as well as an implicit programming model using the <xref:System.Transactions.TransactionScope> class, in which transactions are automatically managed by the infrastructure. It is highly recommended that you use the easier implicit model for development. To get started, please see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic. For more information on writing a transactional application, see [Writing A Transactional Application](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8).       The Transaction class contains methods used by developers implementing resource managers for enlistment. It also provides functionalities for cloning a transaction and controlling the current transaction context. You can obtain the current transaction, if one is set, using the static <xref:System.Transactions.Transaction.Current%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Transactions&gt; namespace provides both an explicit programming model based on the Transaction class, as well as an implicit programming model using the &lt;xref:System.Transactions.TransactionScope&gt; class, in which transactions are automatically managed by the infrastructure.","pos":[0,289],"source":"The <xref:System.Transactions> namespace provides both an explicit programming model based on the Transaction class, as well as an implicit programming model using the <xref:System.Transactions.TransactionScope> class, in which transactions are automatically managed by the infrastructure."},{"content":"It is highly recommended that you use the easier implicit model for development.","pos":[290,370]},{"content":"To get started, please see the <bpt id=\"p1\">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id=\"p1\">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.","pos":[371,541],"source":" To get started, please see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic."},{"content":"For more information on writing a transactional application, see <bpt id=\"p1\">[</bpt>Writing A Transactional Application<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)</ept>.","pos":[542,715],"source":" For more information on writing a transactional application, see [Writing A Transactional Application](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)."},{"content":"The Transaction class contains methods used by developers implementing resource managers for enlistment.","pos":[722,826]},{"content":"It also provides functionalities for cloning a transaction and controlling the current transaction context.","pos":[827,934]},{"content":"You can obtain the current transaction, if one is set, using the static &lt;xref:System.Transactions.Transaction.Current%2A&gt; property.","pos":[935,1066],"source":" You can obtain the current transaction, if one is set, using the static <xref:System.Transactions.Transaction.Current%2A> property."}]},{"pos":[4226,4261],"content":"Creates a clone of the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a clone of the transaction.","pos":[0,35]}]},{"pos":[4273,4581],"content":"Clones are created to pass transactions.  For example, you might not want to pass a <xref:System.Transactions.CommittableTransaction> to other applications, because you do not want others to commit your transaction.  If you try to marshal or serialize a transaction, a clone is created for you automatically.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clones are created to pass transactions.  For example, you might not want to pass a <xref:System.Transactions.CommittableTransaction> to other applications, because you do not want others to commit your transaction.  If you try to marshal or serialize a transaction, a clone is created for you automatically.","pos":[0,308],"nodes":[{"content":"Clones are created to pass transactions.","pos":[0,40]},{"content":"For example, you might not want to pass a &lt;xref:System.Transactions.CommittableTransaction&gt; to other applications, because you do not want others to commit your transaction.","pos":[42,215],"source":"  For example, you might not want to pass a <xref:System.Transactions.CommittableTransaction> to other applications, because you do not want others to commit your transaction."},{"content":"If you try to marshal or serialize a transaction, a clone is created for you automatically.","pos":[217,308]}]}]},{"pos":[4748,4852],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is a copy of the current transaction object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Transactions.Transaction\"></xref> that is a copy of the current transaction object."},{"pos":[5270,5307],"content":"Gets or sets the ambient transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the ambient transaction.","pos":[0,37]}]},{"pos":[5320,6095],"content":"For more information on ambient transactions, please see the \"Managing transaction flow using TransactionScopeOption\" section of the [Implementing an Implicit Transaction using Transaction Scope](~/add/includes/ajax-current-ext-md.md) topic.       Although you can set the ambient transaction using this property, you should use the <xref:System.Transactions.TransactionScope> object to manipulate the ambient transaction whenever possible.       This property is thread static. If you change the ambient transaction using this property inside a <xref:System.Transactions.TransactionScope> an <xref:System.InvalidOperationException> is thrown when <xref:System.Transactions.TransactionScope.Dispose%2A> is called, and the previous ambient transaction value is restored.","needQuote":false,"needEscape":true,"nodes":[{"content":"For more information on ambient transactions, please see the \"Managing transaction flow using TransactionScopeOption\" section of the <bpt id=\"p1\">[</bpt>Implementing an Implicit Transaction using Transaction Scope<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> topic.","pos":[0,241],"source":"For more information on ambient transactions, please see the \"Managing transaction flow using TransactionScopeOption\" section of the [Implementing an Implicit Transaction using Transaction Scope](~/add/includes/ajax-current-ext-md.md) topic."},{"content":"Although you can set the ambient transaction using this property, you should use the &lt;xref:System.Transactions.TransactionScope&gt; object to manipulate the ambient transaction whenever possible.","pos":[248,440],"source":"       Although you can set the ambient transaction using this property, you should use the <xref:System.Transactions.TransactionScope> object to manipulate the ambient transaction whenever possible."},{"content":"This property is thread static.","pos":[447,478]},{"content":"If you change the ambient transaction using this property inside a &lt;xref:System.Transactions.TransactionScope&gt; an &lt;xref:System.InvalidOperationException&gt; is thrown when &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt; is called, and the previous ambient transaction value is restored.","pos":[479,769],"source":" If you change the ambient transaction using this property inside a <xref:System.Transactions.TransactionScope> an <xref:System.InvalidOperationException> is thrown when <xref:System.Transactions.TransactionScope.Dispose%2A> is called, and the previous ambient transaction value is restored."}]},{"pos":[6263,6357],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that describes the current transaction.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Transactions.Transaction\"></xref> that describes the current transaction."},{"pos":[6960,7005],"content":"Creates a dependent clone of the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a dependent clone of the transaction.","pos":[0,45]}]},{"pos":[7018,7850],"content":"A dependent transaction is a transaction whose outcome depends on the outcome of the transaction from which it was cloned.       The `cloneoption` parameter controls what kind of dependent transaction to create. If a dependent transaction is created with <xref:System.Transactions.DependentCloneOption>, it blocks the commit process of the transaction until the transaction times out, or <xref:System.Transactions.DependentTransaction.Complete%2A> is called on the <xref:System.Transactions.DependentTransaction>. If it is created with <xref:System.Transactions.DependentCloneOption>, it automatically aborts the transaction if <xref:System.Transactions.CommittableTransaction.Commit%2A> is called before <xref:System.Transactions.DependentTransaction.Complete%2A> is called on the <xref:System.Transactions.DependentTransaction>.","needQuote":false,"needEscape":true,"nodes":[{"content":"A dependent transaction is a transaction whose outcome depends on the outcome of the transaction from which it was cloned.","pos":[0,122]},{"content":"The <ph id=\"ph1\">`cloneoption`</ph> parameter controls what kind of dependent transaction to create.","pos":[129,211],"source":"       The `cloneoption` parameter controls what kind of dependent transaction to create."},{"content":"If a dependent transaction is created with &lt;xref:System.Transactions.DependentCloneOption&gt;, it blocks the commit process of the transaction until the transaction times out, or &lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt; is called on the &lt;xref:System.Transactions.DependentTransaction&gt;.","pos":[212,513],"source":" If a dependent transaction is created with <xref:System.Transactions.DependentCloneOption>, it blocks the commit process of the transaction until the transaction times out, or <xref:System.Transactions.DependentTransaction.Complete%2A> is called on the <xref:System.Transactions.DependentTransaction>."},{"content":"If it is created with &lt;xref:System.Transactions.DependentCloneOption&gt;, it automatically aborts the transaction if &lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt; is called before &lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt; is called on the &lt;xref:System.Transactions.DependentTransaction&gt;.","pos":[514,830],"source":" If it is created with <xref:System.Transactions.DependentCloneOption>, it automatically aborts the transaction if <xref:System.Transactions.CommittableTransaction.Commit%2A> is called before <xref:System.Transactions.DependentTransaction.Complete%2A> is called on the <xref:System.Transactions.DependentTransaction>."}]},{"pos":[8377,8500],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.DependentCloneOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that controls what kind of dependent transaction to create.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Transactions.DependentCloneOption\"></xref> that controls what kind of dependent transaction to create."},{"pos":[8585,8685],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.DependentTransaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the dependent clone.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Transactions.DependentTransaction\"></xref> that represents the dependent clone."},{"pos":[9116,9167],"content":"Releases the resources that are held by the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases the resources that are held by the object.","pos":[0,51]}]},{"pos":[9179,9510],"content":"If you change the ambient transaction by setting <xref:System.Transactions.Transaction.Current%2A> inside a <xref:System.Transactions.TransactionScope> an <xref:System.InvalidOperationException> is thrown when <xref:System.Transactions.TransactionScope.Dispose%2A> is called, and the previous ambient transaction value is restored.","needQuote":true,"needEscape":true,"nodes":[{"content":"If you change the ambient transaction by setting &lt;xref:System.Transactions.Transaction.Current%2A&gt; inside a &lt;xref:System.Transactions.TransactionScope&gt; an &lt;xref:System.InvalidOperationException&gt; is thrown when &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt; is called, and the previous ambient transaction value is restored.","pos":[0,331],"source":"If you change the ambient transaction by setting <xref:System.Transactions.Transaction.Current%2A> inside a <xref:System.Transactions.TransactionScope> an <xref:System.InvalidOperationException> is thrown when <xref:System.Transactions.TransactionScope.Dispose%2A> is called, and the previous ambient transaction value is restored."}]},{"pos":[10358,10456],"content":"Enlists a durable resource manager that supports two phase commit to participate in a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enlists a durable resource manager that supports two phase commit to participate in a transaction.","pos":[0,98]}]},{"pos":[10469,11403],"content":"Resource managers with a durable enlistment must be able to perform recovery if they experience a failure. For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691). For more information on volatile and durable resources, as well as how to enlist a resource, see [Implementing A Resource Manager](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e).  For more information on how a resource manager responds to commit notification and prepare the commit in two-phase commit, see [Committing A Transaction In Single-Phase and Multi-Phase](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d).       Resource managers enlisted for participation in a transaction through this method receive two phase commit notifications that correspond to the methods defined on the <xref:System.Transactions.IEnlistmentNotification> interface.","needQuote":false,"needEscape":true,"nodes":[{"content":"Resource managers with a durable enlistment must be able to perform recovery if they experience a failure.","pos":[0,106]},{"content":"For more information on recovery, see <bpt id=\"p1\">[</bpt>Performing Recovery<ept id=\"p1\">](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)</ept>.","pos":[107,237],"source":" For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)."},{"content":"For more information on volatile and durable resources, as well as how to enlist a resource, see <bpt id=\"p1\">[</bpt>Implementing A Resource Manager<ept id=\"p1\">](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)</ept>.","pos":[238,439],"source":" For more information on volatile and durable resources, as well as how to enlist a resource, see [Implementing A Resource Manager](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)."},{"content":"For more information on how a resource manager responds to commit notification and prepare the commit in two-phase commit, see <bpt id=\"p1\">[</bpt>Committing A Transaction In Single-Phase and Multi-Phase<ept id=\"p1\">](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)</ept>.","pos":[441,697],"source":"  For more information on how a resource manager responds to commit notification and prepare the commit in two-phase commit, see [Committing A Transaction In Single-Phase and Multi-Phase](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)."},{"content":"Resource managers enlisted for participation in a transaction through this method receive two phase commit notifications that correspond to the methods defined on the &lt;xref:System.Transactions.IEnlistmentNotification&gt; interface.","pos":[704,932],"source":"       Resource managers enlisted for participation in a transaction through this method receive two phase commit notifications that correspond to the methods defined on the <xref:System.Transactions.IEnlistmentNotification> interface."}]},{"pos":[11734,11841],"content":"A unique identifier for a resource manager, which should persist across resource manager failure or reboot.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique identifier for a resource manager, which should persist across resource manager failure or reboot.","pos":[0,107]}]},{"pos":[11950,12097],"content":"An object that implements the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.IEnlistmentNotification\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface to receive two phase commit notifications.","needQuote":true,"needEscape":true,"source":"An object that implements the <xref href=\"System.Transactions.IEnlistmentNotification\"></xref> interface to receive two phase commit notifications."},{"pos":[12195,12336],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Transactions.EnlistmentOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the resource manager wants to perform additional work during the prepare phase.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Transactions.EnlistmentOptions\"></xref> if the resource manager wants to perform additional work during the prepare phase."},{"pos":[12411,12503],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Enlistment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that describes the enlistment.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Transactions.Enlistment\"></xref> object that describes the enlistment."},{"pos":[13296,13410],"content":"Enlists a durable resource manager that supports single phase commit optimization to participate in a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enlists a durable resource manager that supports single phase commit optimization to participate in a transaction.","pos":[0,114]}]},{"pos":[13423,14323],"content":"Resource managers with a durable enlistment must be able to perform recovery if they experience a failure. For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691). For more information on volatile and durable resources, as well as how to enlist a resource, see [Implementing A Resource Manager](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e).       You should note that even when your resource manager implementation enlists with this method, it is not guaranteed that it receives a single phase commit. The transaction manager can still send two phase commit notifications instead. For more information on the single phase commit optimization, see [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb).","needQuote":false,"needEscape":true,"nodes":[{"content":"Resource managers with a durable enlistment must be able to perform recovery if they experience a failure.","pos":[0,106]},{"content":"For more information on recovery, see <bpt id=\"p1\">[</bpt>Performing Recovery<ept id=\"p1\">](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)</ept>.","pos":[107,237],"source":" For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)."},{"content":"For more information on volatile and durable resources, as well as how to enlist a resource, see <bpt id=\"p1\">[</bpt>Implementing A Resource Manager<ept id=\"p1\">](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)</ept>.","pos":[238,439],"source":" For more information on volatile and durable resources, as well as how to enlist a resource, see [Implementing A Resource Manager](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)."},{"content":"You should note that even when your resource manager implementation enlists with this method, it is not guaranteed that it receives a single phase commit.","pos":[446,600]},{"content":"The transaction manager can still send two phase commit notifications instead.","pos":[601,679]},{"content":"For more information on the single phase commit optimization, see <bpt id=\"p1\">[</bpt>Optimization Using Single Phase Commit and Promotable Single Phase Notification<ept id=\"p1\">](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)</ept>.","pos":[680,898],"source":" For more information on the single phase commit optimization, see [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)."}]},{"pos":[14656,14763],"content":"A unique identifier for a resource manager, which should persist across resource manager failure or reboot.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique identifier for a resource manager, which should persist across resource manager failure or reboot.","pos":[0,107]}]},{"pos":[14874,15064],"content":"An object that implements the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.ISinglePhaseNotification\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface that must be able to receive single phase commit and two phase commit notifications.","needQuote":true,"needEscape":true,"source":"An object that implements the <xref href=\"System.Transactions.ISinglePhaseNotification\"></xref> interface that must be able to receive single phase commit and two phase commit notifications."},{"pos":[15162,15303],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Transactions.EnlistmentOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the resource manager wants to perform additional work during the prepare phase.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Transactions.EnlistmentOptions\"></xref> if the resource manager wants to perform additional work during the prepare phase."},{"pos":[15378,15470],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Enlistment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that describes the enlistment.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Transactions.Enlistment\"></xref> object that describes the enlistment."},{"pos":[16214,16324],"content":"Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).","needQuote":true,"needEscape":true,"nodes":[{"content":"Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).","pos":[0,110]}]},{"pos":[16337,17726],"content":"Enlistments in a transaction are volatile; that is, they do not survive the failure of the participant. In addition, this method only suggests the transaction manager to escalate control, but the escalation itself is not guaranteed. If escalation fails, the user is not notified and the transaction is rolled back.       The parameter `promotableSinglePhaseNotification` is used to communicate to the transaction manager the outcome of attempting to commit the resource manager's internal transaction.  If inconsistent data is reported, the transaction manager throws an exception. If an <xref:System.Transactions.TransactionStatus> outcome is reported, the transaction manager looks for the outcome notification in its own internal enlistment and ignores the reported response.       For more information on enlistments and escalation of a transaction, please see [Transaction Management Escalation](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7). For more information on PSPE, see [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb).       **Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.","needQuote":false,"needEscape":true,"nodes":[{"content":"Enlistments in a transaction are volatile; that is, they do not survive the failure of the participant.","pos":[0,103]},{"content":"In addition, this method only suggests the transaction manager to escalate control, but the escalation itself is not guaranteed.","pos":[104,232]},{"content":"If escalation fails, the user is not notified and the transaction is rolled back.","pos":[233,314]},{"content":"The parameter <ph id=\"ph1\">`promotableSinglePhaseNotification`</ph> is used to communicate to the transaction manager the outcome of attempting to commit the resource manager's internal transaction.","pos":[321,501],"source":"       The parameter `promotableSinglePhaseNotification` is used to communicate to the transaction manager the outcome of attempting to commit the resource manager's internal transaction."},{"content":"If inconsistent data is reported, the transaction manager throws an exception.","pos":[503,581]},{"content":"If an &lt;xref:System.Transactions.TransactionStatus&gt; outcome is reported, the transaction manager looks for the outcome notification in its own internal enlistment and ignores the reported response.","pos":[582,778],"source":" If an <xref:System.Transactions.TransactionStatus> outcome is reported, the transaction manager looks for the outcome notification in its own internal enlistment and ignores the reported response."},{"content":"For more information on enlistments and escalation of a transaction, please see <bpt id=\"p1\">[</bpt>Transaction Management Escalation<ept id=\"p1\">](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7)</ept>.","pos":[785,971],"source":"       For more information on enlistments and escalation of a transaction, please see [Transaction Management Escalation](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7)."},{"content":"For more information on PSPE, see <bpt id=\"p1\">[</bpt>Optimization Using Single Phase Commit and Promotable Single Phase Notification<ept id=\"p1\">](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)</ept>.","pos":[972,1158],"source":" For more information on PSPE, see [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method uses &lt;xref:System.Security.Permissions.SecurityAction&gt; to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <ph id=\"ph1\">`FullTrust`</ph> permission set.","pos":[1165,1383],"source":"**Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set."}]},{"pos":[18029,18148],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.IPromotableSinglePhaseNotification\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface implemented by the participant.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Transactions.IPromotableSinglePhaseNotification\"></xref> interface implemented by the participant."},{"pos":[18207,18327],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.SinglePhaseEnlistment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface implementation that describes the enlistment.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Transactions.SinglePhaseEnlistment\"></xref> interface implementation that describes the enlistment."},{"pos":[19124,19234],"content":"Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).","needQuote":true,"needEscape":true,"nodes":[{"content":"Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).","pos":[0,110]}]},{"pos":[19247,20179],"content":"If the value specified for the `promoterType` parameter is `TransactionInterop.PromoterTypeDtc`, the transaction **must** be promoted by MSDTC and the `byte[]` returned from the `IPromotableSinglePhaseNotification.Promote` method **must** be an MSDTC transaction propagation token.       If the value specified for the `promoterType` parameter is **not**`TransactionInterop.PromoterTypeDTC`, the transaction will not be promoted by MSDTC, but rather by the caller’s implementation of `IPromotableSinglePhaseNotification`. If this call is successful, there is a set of subsequent operations on the transaction that will return a `TransactionPromotionException`. These operations are:      -   `Transaction.EnlistDurable`      -   `TransactionInterop.GetDtcTransaction`      -   `TransactionInterop.GetExportCookie`      -   `TransctionInterop.GetTransmitterPropagationToken`      -   Serialization of a Transaction object","needQuote":false,"needEscape":true,"nodes":[{"content":"If the value specified for the <ph id=\"ph1\">`promoterType`</ph> parameter is <ph id=\"ph2\">`TransactionInterop.PromoterTypeDtc`</ph>, the transaction <bpt id=\"p1\">**</bpt>must<ept id=\"p1\">**</ept> be promoted by MSDTC and the <ph id=\"ph3\">`byte[]`</ph> returned from the <ph id=\"ph4\">`IPromotableSinglePhaseNotification.Promote`</ph> method <bpt id=\"p2\">**</bpt>must<ept id=\"p2\">**</ept> be an MSDTC transaction propagation token.","pos":[0,281],"source":"If the value specified for the `promoterType` parameter is `TransactionInterop.PromoterTypeDtc`, the transaction **must** be promoted by MSDTC and the `byte[]` returned from the `IPromotableSinglePhaseNotification.Promote` method **must** be an MSDTC transaction propagation token."},{"content":"If the value specified for the <ph id=\"ph1\">`promoterType`</ph> parameter is <bpt id=\"p1\">**</bpt>not<ept id=\"p1\">**</ept><ph id=\"ph2\">`TransactionInterop.PromoterTypeDTC`</ph>, the transaction will not be promoted by MSDTC, but rather by the caller’s implementation of <ph id=\"ph3\">`IPromotableSinglePhaseNotification`</ph>.","pos":[288,521],"source":"       If the value specified for the `promoterType` parameter is **not**`TransactionInterop.PromoterTypeDTC`, the transaction will not be promoted by MSDTC, but rather by the caller’s implementation of `IPromotableSinglePhaseNotification`."},{"content":"If this call is successful, there is a set of subsequent operations on the transaction that will return a <ph id=\"ph1\">`TransactionPromotionException`</ph>.","pos":[522,660],"source":" If this call is successful, there is a set of subsequent operations on the transaction that will return a `TransactionPromotionException`."},{"content":"These operations are:      -   <ph id=\"ph1\">`Transaction.EnlistDurable`</ph><ph id=\"ph2\">      -   </ph><ph id=\"ph3\">`TransactionInterop.GetDtcTransaction`</ph><ph id=\"ph4\">      -   </ph><ph id=\"ph5\">`TransactionInterop.GetExportCookie`</ph><ph id=\"ph6\">      -   </ph><ph id=\"ph7\">`TransctionInterop.GetTransmitterPropagationToken`</ph>      -   Serialization of a Transaction object","pos":[661,920],"source":" These operations are:      -   `Transaction.EnlistDurable`      -   `TransactionInterop.GetDtcTransaction`      -   `TransactionInterop.GetExportCookie`      -   `TransctionInterop.GetTransmitterPropagationToken`      -   Serialization of a Transaction object"}]},{"pos":[20501,20620],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.IPromotableSinglePhaseNotification\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface implemented by the participant.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Transactions.IPromotableSinglePhaseNotification\"></xref> interface implemented by the participant."},{"pos":[20687,20737],"content":"The type of the distributed transaction processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the distributed transaction processor.","pos":[0,50]}]},{"pos":[20796,20916],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.SinglePhaseEnlistment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface implementation that describes the enlistment.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Transactions.SinglePhaseEnlistment\"></xref> interface implementation that describes the enlistment."},{"pos":[21684,21783],"content":"Enlists a volatile resource manager that supports two phase commit to participate in a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enlists a volatile resource manager that supports two phase commit to participate in a transaction.","pos":[0,99]}]},{"pos":[21796,22269],"content":"Volatile resource managers cannot recovery from failure to complete a transaction in which they were participating. To obtain a durable enlistment in a transaction, use the <xref:System.Transactions.Transaction.EnlistDurable%2A> method.       Resource managers enlisted for participation in a transaction through this method receive two phase commit notifications that correspond to the methods defined on the <xref:System.Transactions.IEnlistmentNotification> interface.","needQuote":false,"needEscape":true,"nodes":[{"content":"Volatile resource managers cannot recovery from failure to complete a transaction in which they were participating. To obtain a durable enlistment in a transaction, use the <xref:System.Transactions.Transaction.EnlistDurable%2A> method.       Resource managers enlisted for participation in a transaction through this method receive two phase commit notifications that correspond to the methods defined on the <xref:System.Transactions.IEnlistmentNotification> interface.","pos":[0,471],"nodes":[{"content":"Volatile resource managers cannot recovery from failure to complete a transaction in which they were participating.","pos":[0,115]},{"content":"To obtain a durable enlistment in a transaction, use the &lt;xref:System.Transactions.Transaction.EnlistDurable%2A&gt; method.","pos":[116,236],"source":" To obtain a durable enlistment in a transaction, use the <xref:System.Transactions.Transaction.EnlistDurable%2A> method."},{"content":"Resource managers enlisted for participation in a transaction through this method receive two phase commit notifications that correspond to the methods defined on the &lt;xref:System.Transactions.IEnlistmentNotification&gt; interface.","pos":[243,471],"source":"       Resource managers enlisted for participation in a transaction through this method receive two phase commit notifications that correspond to the methods defined on the <xref:System.Transactions.IEnlistmentNotification> interface."}]}]},{"pos":[23042,23189],"content":"An object that implements the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.IEnlistmentNotification\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface to receive two-phase commit notifications.","needQuote":true,"needEscape":true,"source":"An object that implements the <xref href=\"System.Transactions.IEnlistmentNotification\"></xref> interface to receive two-phase commit notifications."},{"pos":[23287,23428],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Transactions.EnlistmentOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the resource manager wants to perform additional work during the prepare phase.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Transactions.EnlistmentOptions\"></xref> if the resource manager wants to perform additional work during the prepare phase."},{"pos":[23503,23595],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Enlistment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that describes the enlistment.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Transactions.Enlistment\"></xref> object that describes the enlistment."},{"pos":[24355,24470],"content":"Enlists a volatile resource manager that supports single phase commit optimization to participate in a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enlists a volatile resource manager that supports single phase commit optimization to participate in a transaction.","pos":[0,115]}]},{"pos":[24483,25619],"content":"Volatile resource managers cannot recovery from failure to complete a transaction in which they were participating. To obtain a durable enlistment in a transaction, use the <xref:System.Transactions.Transaction.EnlistDurable%2A> method. For more information on volatile and durable resources, as well as how to enlist a resource, see [Implementing A Resource Manager](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e). For more information on how a resource manager responds to commit notification and prepare the commit, see [Committing A Transaction In Single-Phase and Multi-Phase](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d).       You should note that even when your resource manager implementation enlists with this method, it is not guaranteed that it receives a single phase commit. The transaction manager can still send two phase commit notifications instead. For more information on the single phase commit optimization, see [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb).","needQuote":false,"needEscape":true,"nodes":[{"content":"Volatile resource managers cannot recovery from failure to complete a transaction in which they were participating.","pos":[0,115]},{"content":"To obtain a durable enlistment in a transaction, use the &lt;xref:System.Transactions.Transaction.EnlistDurable%2A&gt; method.","pos":[116,236],"source":" To obtain a durable enlistment in a transaction, use the <xref:System.Transactions.Transaction.EnlistDurable%2A> method."},{"content":"For more information on volatile and durable resources, as well as how to enlist a resource, see <bpt id=\"p1\">[</bpt>Implementing A Resource Manager<ept id=\"p1\">](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)</ept>.","pos":[237,438],"source":" For more information on volatile and durable resources, as well as how to enlist a resource, see [Implementing A Resource Manager](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)."},{"content":"For more information on how a resource manager responds to commit notification and prepare the commit, see <bpt id=\"p1\">[</bpt>Committing A Transaction In Single-Phase and Multi-Phase<ept id=\"p1\">](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)</ept>.","pos":[439,675],"source":" For more information on how a resource manager responds to commit notification and prepare the commit, see [Committing A Transaction In Single-Phase and Multi-Phase](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)."},{"content":"You should note that even when your resource manager implementation enlists with this method, it is not guaranteed that it receives a single phase commit.","pos":[682,836]},{"content":"The transaction manager can still send two phase commit notifications instead.","pos":[837,915]},{"content":"For more information on the single phase commit optimization, see <bpt id=\"p1\">[</bpt>Optimization Using Single Phase Commit and Promotable Single Phase Notification<ept id=\"p1\">](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)</ept>.","pos":[916,1134],"source":" For more information on the single phase commit optimization, see [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)."}]},{"pos":[25952,26142],"content":"An object that implements the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.ISinglePhaseNotification\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface that must be able to receive single phase commit and two phase commit notifications.","needQuote":true,"needEscape":true,"source":"An object that implements the <xref href=\"System.Transactions.ISinglePhaseNotification\"></xref> interface that must be able to receive single phase commit and two phase commit notifications."},{"pos":[26240,26381],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Transactions.EnlistmentOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the resource manager wants to perform additional work during the prepare phase.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Transactions.EnlistmentOptions\"></xref> if the resource manager wants to perform additional work during the prepare phase."},{"pos":[26456,26548],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Enlistment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that describes the enlistment.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Transactions.Enlistment\"></xref> object that describes the enlistment."},{"pos":[27022,27093],"content":"Determines whether this transaction and the specified object are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether this transaction and the specified object are equal.","pos":[0,71]}]},{"pos":[27234,27275],"content":"The object to compare with this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare with this instance.","pos":[0,41]}]},{"pos":[27334,27525],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> and this transaction are identical; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> and this transaction are identical; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[27968,28008],"content":"Returns the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]},{"pos":[28143,28177],"content":"A 32-bit signed integer hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]},{"pos":[28650,28735],"content":"Gets the  <ph id=\"ph1\">`byte[]`</ph> returned by the <ph id=\"ph2\">`Promote`</ph> method when the transaction is promoted.","needQuote":true,"needEscape":true,"source":"Gets the  `byte[]` returned by the `Promote` method when the transaction is promoted."},{"pos":[28748,29521],"content":"This method has the side effect of causing promotion of the transaction if it is not already promoted.       The format of the returned `byte[]` is defined by the value of the `Transation.PromoterType` property. If the value of the `Transaction.PromoterType` property is `TransactionInterop.PromoterTypeDtc` or `Guid.Empty`, then the `byte[]` returned by this method is an MSDTC transmitter propagation token. Any other value for the `Transaction.PromoterType` property specifies a format that is defined by the caller of `Transaction.EnlistPromotableSinglePhase` that specified the property type value. In order to interpret the promoted token in this latter case, you will need to consult the documentation for the code that made the `EnlistPromotableSinglePhase` call.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method has the side effect of causing promotion of the transaction if it is not already promoted.","pos":[0,102]},{"content":"The format of the returned <ph id=\"ph1\">`byte[]`</ph> is defined by the value of the <ph id=\"ph2\">`Transation.PromoterType`</ph> property.","pos":[109,211],"source":"       The format of the returned `byte[]` is defined by the value of the `Transation.PromoterType` property."},{"content":"If the value of the <ph id=\"ph1\">`Transaction.PromoterType`</ph> property is <ph id=\"ph2\">`TransactionInterop.PromoterTypeDtc`</ph> or <ph id=\"ph3\">`Guid.Empty`</ph>, then the <ph id=\"ph4\">`byte[]`</ph> returned by this method is an MSDTC transmitter propagation token.","pos":[212,409],"source":" If the value of the `Transaction.PromoterType` property is `TransactionInterop.PromoterTypeDtc` or `Guid.Empty`, then the `byte[]` returned by this method is an MSDTC transmitter propagation token."},{"content":"Any other value for the <ph id=\"ph1\">`Transaction.PromoterType`</ph> property specifies a format that is defined by the caller of <ph id=\"ph2\">`Transaction.EnlistPromotableSinglePhase`</ph> that specified the property type value.","pos":[410,603],"source":" Any other value for the `Transaction.PromoterType` property specifies a format that is defined by the caller of `Transaction.EnlistPromotableSinglePhase` that specified the property type value."},{"content":"In order to interpret the promoted token in this latter case, you will need to consult the documentation for the code that made the <ph id=\"ph1\">`EnlistPromotableSinglePhase`</ph> call.","pos":[604,771],"source":" In order to interpret the promoted token in this latter case, you will need to consult the documentation for the code that made the `EnlistPromotableSinglePhase` call."}]},{"pos":[29657,29737],"content":"The  <ph id=\"ph1\">`byte[]`</ph> returned by the <ph id=\"ph2\">`Promote`</ph> method when the transaction is promoted.","needQuote":true,"needEscape":true,"source":"The  `byte[]` returned by the `Promote` method when the transaction is promoted."},{"pos":[30201,30245],"content":"Gets the isolation level of the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the isolation level of the transaction.","pos":[0,44]}]},{"pos":[30257,30528],"content":"The isolation level of a transaction determines what level of access other transactions have to volatile data before a transaction completes. For more information about isolation levels, see the documentation for the <xref:System.Transactions.IsolationLevel> enumeration.","needQuote":true,"needEscape":true,"nodes":[{"content":"The isolation level of a transaction determines what level of access other transactions have to volatile data before a transaction completes. For more information about isolation levels, see the documentation for the <xref:System.Transactions.IsolationLevel> enumeration.","pos":[0,271],"nodes":[{"content":"The isolation level of a transaction determines what level of access other transactions have to volatile data before a transaction completes.","pos":[0,141]},{"content":"For more information about isolation levels, see the documentation for the &lt;xref:System.Transactions.IsolationLevel&gt; enumeration.","pos":[142,271],"source":" For more information about isolation levels, see the documentation for the <xref:System.Transactions.IsolationLevel> enumeration."}]}]},{"pos":[30696,30824],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.IsolationLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that indicates the isolation level of the transaction.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Transactions.IsolationLevel\"></xref> values that indicates the isolation level of the transaction."},{"pos":[31476,31582],"content":"Tests whether two specified <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instances are equivalent.","needQuote":true,"needEscape":true,"source":"Tests whether two specified <xref href=\"System.Transactions.Transaction\"></xref> instances are equivalent."},{"pos":[31800,31911],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that is to the left of the equality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Transactions.Transaction\"></xref> instance that is to the left of the equality operator."},{"pos":[31987,32099],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that is to the right of the equality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Transactions.Transaction\"></xref> instance that is to the right of the equality operator."},{"pos":[32158,32341],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p3\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>x</code> and <code>y</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[33000,33120],"content":"Returns a value that indicates whether two <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instances are not equal.","needQuote":true,"needEscape":true,"source":"Returns a value that indicates whether two <xref href=\"System.Transactions.Transaction\"></xref> instances are not equal."},{"pos":[33340,33453],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that is to the left of the inequality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Transactions.Transaction\"></xref> instance that is to the left of the inequality operator."},{"pos":[33529,33643],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that is to the right of the inequality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Transactions.Transaction\"></xref> instance that is to the right of the inequality operator."},{"pos":[33702,33889],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p3\">&lt;/code&gt;</ept> are not equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>x</code> and <code>y</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[34948,35126],"content":"[Supported in the .NET Framework 4.5.2 and later versions]       Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Supported in the .NET Framework 4.5.2 and later versions]       Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.","pos":[0,176]}]},{"pos":[35547,35654],"content":"A unique identifier for a resource manager, which should persist across resource manager failure or reboot.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique identifier for a resource manager, which should persist across resource manager failure or reboot.","pos":[0,107]}]},{"pos":[35774,35880],"content":"An object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.","pos":[0,106]}]},{"pos":[35990,36137],"content":"An object that implements the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.IEnlistmentNotification\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface to receive two phase commit notifications.","needQuote":true,"needEscape":true,"source":"An object that implements the <xref href=\"System.Transactions.IEnlistmentNotification\"></xref> interface to receive two phase commit notifications."},{"pos":[36235,36376],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Transactions.EnlistmentOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the resource manager wants to perform additional work during the prepare phase.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Transactions.EnlistmentOptions\"></xref> if the resource manager wants to perform additional work during the prepare phase."},{"pos":[36452,36630],"content":"[Supported in the .NET Framework 4.5.2 and later versions]       Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Supported in the .NET Framework 4.5.2 and later versions]       Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.","pos":[0,176]}]},{"pos":[37092,37203],"content":"Uniquely identifies the format of the <ph id=\"ph1\">`byte[]`</ph> returned by the Promote method when the transaction is promoted.","needQuote":true,"needEscape":true,"source":"Uniquely identifies the format of the `byte[]` returned by the Promote method when the transaction is promoted."},{"pos":[37215,37697],"content":"If the transaction has not yet been promoted and does not yet have a promotable single phase enlistment, the value of this property will be `Guid.Empty`. If the transaction has been or will be promoted to MSDTC, then the value of this property will be `TransactionInterop.PromoterTypeDtc`. If the transaction has been or will be promoted by a non-MSDTC promoter, the value of this property will be the value specified to an earlier call to `Transaction.EnlistPromotableSinglePhase`.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the transaction has not yet been promoted and does not yet have a promotable single phase enlistment, the value of this property will be <ph id=\"ph1\">`Guid.Empty`</ph>.","pos":[0,153],"source":"If the transaction has not yet been promoted and does not yet have a promotable single phase enlistment, the value of this property will be `Guid.Empty`."},{"content":"If the transaction has been or will be promoted to MSDTC, then the value of this property will be <ph id=\"ph1\">`TransactionInterop.PromoterTypeDtc`</ph>.","pos":[154,289],"source":" If the transaction has been or will be promoted to MSDTC, then the value of this property will be `TransactionInterop.PromoterTypeDtc`."},{"content":"If the transaction has been or will be promoted by a non-MSDTC promoter, the value of this property will be the value specified to an earlier call to <ph id=\"ph1\">`Transaction.EnlistPromotableSinglePhase`</ph>.","pos":[290,482],"source":" If the transaction has been or will be promoted by a non-MSDTC promoter, the value of this property will be the value specified to an earlier call to `Transaction.EnlistPromotableSinglePhase`."}]},{"pos":[37810,37933],"content":"A guid that uniquely identifies the format of the <ph id=\"ph1\">`byte[]`</ph> returned by the Promote method when the transaction is promoted.","needQuote":true,"needEscape":true,"source":"A guid that uniquely identifies the format of the `byte[]` returned by the Promote method when the transaction is promoted."},{"pos":[38367,38403],"content":"Rolls back (aborts) the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Rolls back (aborts) the transaction.","pos":[0,36]}]},{"pos":[38415,38801],"content":"Any copy of a transaction object can initiate the rollback of the transaction by calling this method. Only the original transaction object, which is a <xref:System.Transactions.CommittableTransaction> object, can be used to initiate an attempt to commit the transaction. An exception is thrown when this method is called after the outcome of the transaction has already been determined.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any copy of a transaction object can initiate the rollback of the transaction by calling this method. Only the original transaction object, which is a <xref:System.Transactions.CommittableTransaction> object, can be used to initiate an attempt to commit the transaction. An exception is thrown when this method is called after the outcome of the transaction has already been determined.","pos":[0,386],"nodes":[{"content":"Any copy of a transaction object can initiate the rollback of the transaction by calling this method.","pos":[0,101]},{"content":"Only the original transaction object, which is a &lt;xref:System.Transactions.CommittableTransaction&gt; object, can be used to initiate an attempt to commit the transaction.","pos":[102,270],"source":" Only the original transaction object, which is a <xref:System.Transactions.CommittableTransaction> object, can be used to initiate an attempt to commit the transaction."},{"content":"An exception is thrown when this method is called after the outcome of the transaction has already been determined.","pos":[271,386]}]}]},{"pos":[39361,39397],"content":"Rolls back (aborts) the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Rolls back (aborts) the transaction.","pos":[0,36]}]},{"pos":[39533,39575],"content":"An explanation of why a rollback occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An explanation of why a rollback occurred.","pos":[0,42]}]},{"pos":[40393,40473],"content":"Sets the distributed transaction identifier generated by the non-MSDTC promoter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the distributed transaction identifier generated by the non-MSDTC promoter.","pos":[0,80]}]},{"pos":[40486,40948],"content":"This method can only be called successfully while the `IPromotableSinglePhaseNotification.Promote` method is being processed. If this method is called at any other time, a `TransactionException` is thrown.       The specified value of the `promotableNotification` parameter must be the same object that was originally specified to the `Transaction.EnlistPromotableSinglePhase` invocation. If this is not the case, then an `InvalidOperationException` is thrown.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method can only be called successfully while the <ph id=\"ph1\">`IPromotableSinglePhaseNotification.Promote`</ph> method is being processed.","pos":[0,125],"source":"This method can only be called successfully while the `IPromotableSinglePhaseNotification.Promote` method is being processed."},{"content":"If this method is called at any other time, a <ph id=\"ph1\">`TransactionException`</ph> is thrown.","pos":[126,205],"source":" If this method is called at any other time, a `TransactionException` is thrown."},{"content":"The specified value of the <ph id=\"ph1\">`promotableNotification`</ph> parameter must be the same object that was originally specified to the <ph id=\"ph2\">`Transaction.EnlistPromotableSinglePhase`</ph> invocation.","pos":[212,388],"source":"       The specified value of the `promotableNotification` parameter must be the same object that was originally specified to the `Transaction.EnlistPromotableSinglePhase` invocation."},{"content":"If this is not the case, then an <ph id=\"ph1\">`InvalidOperationException`</ph> is thrown.","pos":[389,460],"source":" If this is not the case, then an `InvalidOperationException` is thrown."}]},{"pos":[41276,41395],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.IPromotableSinglePhaseNotification\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface implemented by the participant.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Transactions.IPromotableSinglePhaseNotification\"></xref> interface implemented by the participant."},{"pos":[41482,41561],"content":"The identifier for the transaction used by the distributed transaction manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identifier for the transaction used by the distributed transaction manager.","pos":[0,79]}]},{"pos":[42562,42690],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the data required to serialize this transaction.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with the data required to serialize this transaction."},{"pos":[42992,43086],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to populate with data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to populate with data."},{"pos":[43182,43281],"content":"The destination (see <xref:System.Runtime.Serialization.StreamingContext> ) for this serialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination (see &lt;xref:System.Runtime.Serialization.StreamingContext&gt; ) for this serialization.","pos":[0,99],"source":"The destination (see <xref:System.Runtime.Serialization.StreamingContext> ) for this serialization."}]},{"pos":[43812,43856],"content":"Indicates that the transaction is completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates that the transaction is completed.","pos":[0,44]}]},{"pos":[43869,44677],"content":"You can register for this event instead of using a volatile enlistment to get outcome information for transactions. The parameter passed to the <xref:System.Transactions.TransactionCompletedEventHandler> delegate is a <xref:System.Transactions.Transaction> instance. You can then query the <xref:System.Transactions.Transaction.TransactionInformation%2A> property of the specific instance to get an instance of <xref:System.Transactions.TransactionInformation>, whose <xref:System.Transactions.TransactionInformation.Status%2A> property contains the status of a transaction with either the <xref:System.Transactions.TransactionStatus> or <xref:System.Transactions.TransactionStatus> value.       **Caution** Signing up for this event negatively affects the performance of the transaction it is attached to.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can register for this event instead of using a volatile enlistment to get outcome information for transactions.","pos":[0,115]},{"content":"The parameter passed to the &lt;xref:System.Transactions.TransactionCompletedEventHandler&gt; delegate is a &lt;xref:System.Transactions.Transaction&gt; instance.","pos":[116,266],"source":" The parameter passed to the <xref:System.Transactions.TransactionCompletedEventHandler> delegate is a <xref:System.Transactions.Transaction> instance."},{"content":"You can then query the &lt;xref:System.Transactions.Transaction.TransactionInformation%2A&gt; property of the specific instance to get an instance of &lt;xref:System.Transactions.TransactionInformation&gt;, whose &lt;xref:System.Transactions.TransactionInformation.Status%2A&gt; property contains the status of a transaction with either the &lt;xref:System.Transactions.TransactionStatus&gt; or &lt;xref:System.Transactions.TransactionStatus&gt; value.","pos":[267,689],"source":" You can then query the <xref:System.Transactions.Transaction.TransactionInformation%2A> property of the specific instance to get an instance of <xref:System.Transactions.TransactionInformation>, whose <xref:System.Transactions.TransactionInformation.Status%2A> property contains the status of a transaction with either the <xref:System.Transactions.TransactionStatus> or <xref:System.Transactions.TransactionStatus> value."},{"content":"<bpt id=\"p1\">**</bpt>Caution<ept id=\"p1\">**</ept> Signing up for this event negatively affects the performance of the transaction it is attached to.","pos":[696,806],"source":"**Caution** Signing up for this event negatively affects the performance of the transaction it is attached to."}]},{"pos":[45216,45228],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[45349,45424],"content":"An attempt to subscribe this event on a transaction that has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt to subscribe this event on a transaction that has been disposed.","pos":[0,75]}]},{"pos":[45849,45902],"content":"Retrieves additional information about a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves additional information about a transaction.","pos":[0,53]}]},{"pos":[46094,46219],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains additional information about the transaction.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Transactions.TransactionInformation\"></xref> that contains additional information about the transaction."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Transactions.Transaction\n  id: Transaction\n  children:\n  - System.Transactions.Transaction.Clone\n  - System.Transactions.Transaction.Current\n  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\n  - System.Transactions.Transaction.Dispose\n  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)\n  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.Equals(System.Object)\n  - System.Transactions.Transaction.GetHashCode\n  - System.Transactions.Transaction.GetPromotedToken\n  - System.Transactions.Transaction.IsolationLevel\n  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)\n  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)\n  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.PromoterType\n  - System.Transactions.Transaction.Rollback\n  - System.Transactions.Transaction.Rollback(System.Exception)\n  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Transactions.Transaction.TransactionCompleted\n  - System.Transactions.Transaction.TransactionInformation\n  langs:\n  - csharp\n  name: Transaction\n  nameWithType: Transaction\n  fullName: System.Transactions.Transaction\n  type: Class\n  summary: Represents a transaction.\n  remarks: \"The <xref:System.Transactions> namespace provides both an explicit programming model based on the Transaction class, as well as an implicit programming model using the <xref:System.Transactions.TransactionScope> class, in which transactions are automatically managed by the infrastructure. It is highly recommended that you use the easier implicit model for development. To get started, please see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic. For more information on writing a transactional application, see [Writing A Transactional Application](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8).  \\n  \\n The Transaction class contains methods used by developers implementing resource managers for enlistment. It also provides functionalities for cloning a transaction and controlling the current transaction context. You can obtain the current transaction, if one is set, using the static <xref:System.Transactions.Transaction.Current%2A> property.\"\n  syntax:\n    content: 'public class Transaction : IDisposable, System.Runtime.Serialization.ISerializable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.Clone\n  id: Clone\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: Transaction.Clone()\n  fullName: System.Transactions.Transaction.Clone()\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Creates a clone of the transaction.\n  remarks: Clones are created to pass transactions.  For example, you might not want to pass a <xref:System.Transactions.CommittableTransaction> to other applications, because you do not want others to commit your transaction.  If you try to marshal or serialize a transaction, a clone is created for you automatically.\n  syntax:\n    content: public System.Transactions.Transaction Clone ();\n    parameters: []\n    return:\n      type: System.Transactions.Transaction\n      description: A <xref href=\"System.Transactions.Transaction\"></xref> that is a copy of the current transaction object.\n  overload: System.Transactions.Transaction.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.Current\n  id: Current\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: Current\n  nameWithType: Transaction.Current\n  fullName: System.Transactions.Transaction.Current\n  type: Property\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Gets or sets the ambient transaction.\n  remarks: \"For more information on ambient transactions, please see the \\\"Managing transaction flow using TransactionScopeOption\\\" section of the [Implementing an Implicit Transaction using Transaction Scope](~/add/includes/ajax-current-ext-md.md) topic.  \\n  \\n Although you can set the ambient transaction using this property, you should use the <xref:System.Transactions.TransactionScope> object to manipulate the ambient transaction whenever possible.  \\n  \\n This property is thread static. If you change the ambient transaction using this property inside a <xref:System.Transactions.TransactionScope> an <xref:System.InvalidOperationException> is thrown when <xref:System.Transactions.TransactionScope.Dispose%2A> is called, and the previous ambient transaction value is restored.\"\n  syntax:\n    content: public static System.Transactions.Transaction Current { get; set; }\n    return:\n      type: System.Transactions.Transaction\n      description: A <xref href=\"System.Transactions.Transaction\"></xref> that describes the current transaction.\n  overload: System.Transactions.Transaction.Current*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\n  id: DependentClone(System.Transactions.DependentCloneOption)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: DependentClone(DependentCloneOption)\n  nameWithType: Transaction.DependentClone(DependentCloneOption)\n  fullName: System.Transactions.Transaction.DependentClone(DependentCloneOption)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Creates a dependent clone of the transaction.\n  remarks: \"A dependent transaction is a transaction whose outcome depends on the outcome of the transaction from which it was cloned.  \\n  \\n The `cloneoption` parameter controls what kind of dependent transaction to create. If a dependent transaction is created with <xref:System.Transactions.DependentCloneOption>, it blocks the commit process of the transaction until the transaction times out, or <xref:System.Transactions.DependentTransaction.Complete%2A> is called on the <xref:System.Transactions.DependentTransaction>. If it is created with <xref:System.Transactions.DependentCloneOption>, it automatically aborts the transaction if <xref:System.Transactions.CommittableTransaction.Commit%2A> is called before <xref:System.Transactions.DependentTransaction.Complete%2A> is called on the <xref:System.Transactions.DependentTransaction>.\"\n  example:\n  - \"The following example shows you how to create a dependent transaction.  \\n  \\n [!code-vb[Tx_DependentTx#1](~/add/codesnippet/visualbasic/a081f0f4-5473-43fc-b7fe-_1.vb)]\\n [!code-cs[Tx_DependentTx#1](~/add/codesnippet/csharp/a081f0f4-5473-43fc-b7fe-_1.cs)]\"\n  syntax:\n    content: public System.Transactions.DependentTransaction DependentClone (System.Transactions.DependentCloneOption cloneOption);\n    parameters:\n    - id: cloneOption\n      type: System.Transactions.DependentCloneOption\n      description: A <xref href=\"System.Transactions.DependentCloneOption\"></xref> that controls what kind of dependent transaction to create.\n    return:\n      type: System.Transactions.DependentTransaction\n      description: A <xref href=\"System.Transactions.DependentTransaction\"></xref> that represents the dependent clone.\n  overload: System.Transactions.Transaction.DependentClone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.Dispose\n  id: Dispose\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: Transaction.Dispose()\n  fullName: System.Transactions.Transaction.Dispose()\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Releases the resources that are held by the object.\n  remarks: If you change the ambient transaction by setting <xref:System.Transactions.Transaction.Current%2A> inside a <xref:System.Transactions.TransactionScope> an <xref:System.InvalidOperationException> is thrown when <xref:System.Transactions.TransactionScope.Dispose%2A> is called, and the previous ambient transaction value is restored.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Transactions.Transaction.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  id: EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)\n  nameWithType: Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)\n  fullName: System.Transactions.Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Enlists a durable resource manager that supports two phase commit to participate in a transaction.\n  remarks: \"Resource managers with a durable enlistment must be able to perform recovery if they experience a failure. For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691). For more information on volatile and durable resources, as well as how to enlist a resource, see [Implementing A Resource Manager](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e).  For more information on how a resource manager responds to commit notification and prepare the commit in two-phase commit, see [Committing A Transaction In Single-Phase and Multi-Phase](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d).  \\n  \\n Resource managers enlisted for participation in a transaction through this method receive two phase commit notifications that correspond to the methods defined on the <xref:System.Transactions.IEnlistmentNotification> interface.\"\n  syntax:\n    content: public System.Transactions.Enlistment EnlistDurable (Guid resourceManagerIdentifier, System.Transactions.IEnlistmentNotification enlistmentNotification, System.Transactions.EnlistmentOptions enlistmentOptions);\n    parameters:\n    - id: resourceManagerIdentifier\n      type: System.Guid\n      description: A unique identifier for a resource manager, which should persist across resource manager failure or reboot.\n    - id: enlistmentNotification\n      type: System.Transactions.IEnlistmentNotification\n      description: An object that implements the <xref href=\"System.Transactions.IEnlistmentNotification\"></xref> interface to receive two phase commit notifications.\n    - id: enlistmentOptions\n      type: System.Transactions.EnlistmentOptions\n      description: <xref href=\"System.Transactions.EnlistmentOptions\"></xref> if the resource manager wants to perform additional work during the prepare phase.\n    return:\n      type: System.Transactions.Enlistment\n      description: An <xref href=\"System.Transactions.Enlistment\"></xref> object that describes the enlistment.\n  overload: System.Transactions.Transaction.EnlistDurable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  id: EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)\n  nameWithType: Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)\n  fullName: System.Transactions.Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Enlists a durable resource manager that supports single phase commit optimization to participate in a transaction.\n  remarks: \"Resource managers with a durable enlistment must be able to perform recovery if they experience a failure. For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691). For more information on volatile and durable resources, as well as how to enlist a resource, see [Implementing A Resource Manager](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e).  \\n  \\n You should note that even when your resource manager implementation enlists with this method, it is not guaranteed that it receives a single phase commit. The transaction manager can still send two phase commit notifications instead. For more information on the single phase commit optimization, see [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb).\"\n  syntax:\n    content: public System.Transactions.Enlistment EnlistDurable (Guid resourceManagerIdentifier, System.Transactions.ISinglePhaseNotification singlePhaseNotification, System.Transactions.EnlistmentOptions enlistmentOptions);\n    parameters:\n    - id: resourceManagerIdentifier\n      type: System.Guid\n      description: A unique identifier for a resource manager, which should persist across resource manager failure or reboot.\n    - id: singlePhaseNotification\n      type: System.Transactions.ISinglePhaseNotification\n      description: An object that implements the <xref href=\"System.Transactions.ISinglePhaseNotification\"></xref> interface that must be able to receive single phase commit and two phase commit notifications.\n    - id: enlistmentOptions\n      type: System.Transactions.EnlistmentOptions\n      description: <xref href=\"System.Transactions.EnlistmentOptions\"></xref> if the resource manager wants to perform additional work during the prepare phase.\n    return:\n      type: System.Transactions.Enlistment\n      description: An <xref href=\"System.Transactions.Enlistment\"></xref> object that describes the enlistment.\n  overload: System.Transactions.Transaction.EnlistDurable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)\n  id: EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).\n  remarks: \"Enlistments in a transaction are volatile; that is, they do not survive the failure of the participant. In addition, this method only suggests the transaction manager to escalate control, but the escalation itself is not guaranteed. If escalation fails, the user is not notified and the transaction is rolled back.  \\n  \\n The parameter `promotableSinglePhaseNotification` is used to communicate to the transaction manager the outcome of attempting to commit the resource manager's internal transaction.  If inconsistent data is reported, the transaction manager throws an exception. If an <xref:System.Transactions.TransactionStatus> outcome is reported, the transaction manager looks for the outcome notification in its own internal enlistment and ignores the reported response.  \\n  \\n For more information on enlistments and escalation of a transaction, please see [Transaction Management Escalation](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7). For more information on PSPE, see [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb).  \\n  \\n **Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.\"\n  syntax:\n    content: public bool EnlistPromotableSinglePhase (System.Transactions.IPromotableSinglePhaseNotification promotableSinglePhaseNotification);\n    parameters:\n    - id: promotableSinglePhaseNotification\n      type: System.Transactions.IPromotableSinglePhaseNotification\n      description: A <xref href=\"System.Transactions.IPromotableSinglePhaseNotification\"></xref> interface implemented by the participant.\n    return:\n      type: System.Boolean\n      description: A <xref href=\"System.Transactions.SinglePhaseEnlistment\"></xref> interface implementation that describes the enlistment.\n  overload: System.Transactions.Transaction.EnlistPromotableSinglePhase*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  id: EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)\n  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)\n  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).\n  remarks: \"If the value specified for the `promoterType` parameter is `TransactionInterop.PromoterTypeDtc`, the transaction **must** be promoted by MSDTC and the `byte[]` returned from the `IPromotableSinglePhaseNotification.Promote` method **must** be an MSDTC transaction propagation token.  \\n  \\n If the value specified for the `promoterType` parameter is **not**`TransactionInterop.PromoterTypeDTC`, the transaction will not be promoted by MSDTC, but rather by the caller’s implementation of `IPromotableSinglePhaseNotification`. If this call is successful, there is a set of subsequent operations on the transaction that will return a `TransactionPromotionException`. These operations are:  \\n  \\n-   `Transaction.EnlistDurable`  \\n  \\n-   `TransactionInterop.GetDtcTransaction`  \\n  \\n-   `TransactionInterop.GetExportCookie`  \\n  \\n-   `TransctionInterop.GetTransmitterPropagationToken`  \\n  \\n-   Serialization of a Transaction object\"\n  syntax:\n    content: public bool EnlistPromotableSinglePhase (System.Transactions.IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Guid promoterType);\n    parameters:\n    - id: promotableSinglePhaseNotification\n      type: System.Transactions.IPromotableSinglePhaseNotification\n      description: A <xref href=\"System.Transactions.IPromotableSinglePhaseNotification\"></xref> interface implemented by the participant.\n    - id: promoterType\n      type: System.Guid\n      description: The type of the distributed transaction processor.\n    return:\n      type: System.Boolean\n      description: A <xref href=\"System.Transactions.SinglePhaseEnlistment\"></xref> interface implementation that describes the enlistment.\n  overload: System.Transactions.Transaction.EnlistPromotableSinglePhase*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  id: EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)\n  nameWithType: Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)\n  fullName: System.Transactions.Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Enlists a volatile resource manager that supports two phase commit to participate in a transaction.\n  remarks: \"Volatile resource managers cannot recovery from failure to complete a transaction in which they were participating. To obtain a durable enlistment in a transaction, use the <xref:System.Transactions.Transaction.EnlistDurable%2A> method.  \\n  \\n Resource managers enlisted for participation in a transaction through this method receive two phase commit notifications that correspond to the methods defined on the <xref:System.Transactions.IEnlistmentNotification> interface.\"\n  example:\n  - \"The following example shows an implementation of <xref:System.Transactions.IEnlistmentNotification> interface, as well as enlisting the object as a participant in a transaction using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method.  \\n  \\n [!code-cs[Tx_Enlist#1](~/add/codesnippet/csharp/1d69bab4-4268-46d9-8f3f-_1.cs)]\\n [!code-vb[Tx_Enlist#1](~/add/codesnippet/visualbasic/1d69bab4-4268-46d9-8f3f-_1.vb)]\"\n  syntax:\n    content: public System.Transactions.Enlistment EnlistVolatile (System.Transactions.IEnlistmentNotification enlistmentNotification, System.Transactions.EnlistmentOptions enlistmentOptions);\n    parameters:\n    - id: enlistmentNotification\n      type: System.Transactions.IEnlistmentNotification\n      description: An object that implements the <xref href=\"System.Transactions.IEnlistmentNotification\"></xref> interface to receive two-phase commit notifications.\n    - id: enlistmentOptions\n      type: System.Transactions.EnlistmentOptions\n      description: <xref href=\"System.Transactions.EnlistmentOptions\"></xref> if the resource manager wants to perform additional work during the prepare phase.\n    return:\n      type: System.Transactions.Enlistment\n      description: An <xref href=\"System.Transactions.Enlistment\"></xref> object that describes the enlistment.\n  overload: System.Transactions.Transaction.EnlistVolatile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  id: EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)\n  nameWithType: Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)\n  fullName: System.Transactions.Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Enlists a volatile resource manager that supports single phase commit optimization to participate in a transaction.\n  remarks: \"Volatile resource managers cannot recovery from failure to complete a transaction in which they were participating. To obtain a durable enlistment in a transaction, use the <xref:System.Transactions.Transaction.EnlistDurable%2A> method. For more information on volatile and durable resources, as well as how to enlist a resource, see [Implementing A Resource Manager](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e). For more information on how a resource manager responds to commit notification and prepare the commit, see [Committing A Transaction In Single-Phase and Multi-Phase](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d).  \\n  \\n You should note that even when your resource manager implementation enlists with this method, it is not guaranteed that it receives a single phase commit. The transaction manager can still send two phase commit notifications instead. For more information on the single phase commit optimization, see [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb).\"\n  syntax:\n    content: public System.Transactions.Enlistment EnlistVolatile (System.Transactions.ISinglePhaseNotification singlePhaseNotification, System.Transactions.EnlistmentOptions enlistmentOptions);\n    parameters:\n    - id: singlePhaseNotification\n      type: System.Transactions.ISinglePhaseNotification\n      description: An object that implements the <xref href=\"System.Transactions.ISinglePhaseNotification\"></xref> interface that must be able to receive single phase commit and two phase commit notifications.\n    - id: enlistmentOptions\n      type: System.Transactions.EnlistmentOptions\n      description: <xref href=\"System.Transactions.EnlistmentOptions\"></xref> if the resource manager wants to perform additional work during the prepare phase.\n    return:\n      type: System.Transactions.Enlistment\n      description: An <xref href=\"System.Transactions.Enlistment\"></xref> object that describes the enlistment.\n  overload: System.Transactions.Transaction.EnlistVolatile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Transaction.Equals(Object)\n  fullName: System.Transactions.Transaction.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Determines whether this transaction and the specified object are equal.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare with this instance.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> and this transaction are identical; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Transactions.Transaction.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.GetHashCode\n  id: GetHashCode\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Transaction.GetHashCode()\n  fullName: System.Transactions.Transaction.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.Transactions.Transaction.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.GetPromotedToken\n  id: GetPromotedToken\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: GetPromotedToken()\n  nameWithType: Transaction.GetPromotedToken()\n  fullName: System.Transactions.Transaction.GetPromotedToken()\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Gets the  `byte[]` returned by the `Promote` method when the transaction is promoted.\n  remarks: \"This method has the side effect of causing promotion of the transaction if it is not already promoted.  \\n  \\n The format of the returned `byte[]` is defined by the value of the `Transation.PromoterType` property. If the value of the `Transaction.PromoterType` property is `TransactionInterop.PromoterTypeDtc` or `Guid.Empty`, then the `byte[]` returned by this method is an MSDTC transmitter propagation token. Any other value for the `Transaction.PromoterType` property specifies a format that is defined by the caller of `Transaction.EnlistPromotableSinglePhase` that specified the property type value. In order to interpret the promoted token in this latter case, you will need to consult the documentation for the code that made the `EnlistPromotableSinglePhase` call.\"\n  syntax:\n    content: public byte[] GetPromotedToken ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: The  `byte[]` returned by the `Promote` method when the transaction is promoted.\n  overload: System.Transactions.Transaction.GetPromotedToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.IsolationLevel\n  id: IsolationLevel\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: IsolationLevel\n  nameWithType: Transaction.IsolationLevel\n  fullName: System.Transactions.Transaction.IsolationLevel\n  type: Property\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Gets the isolation level of the transaction.\n  remarks: The isolation level of a transaction determines what level of access other transactions have to volatile data before a transaction completes. For more information about isolation levels, see the documentation for the <xref:System.Transactions.IsolationLevel> enumeration.\n  syntax:\n    content: public System.Transactions.IsolationLevel IsolationLevel { get; }\n    return:\n      type: System.Transactions.IsolationLevel\n      description: One of the <xref href=\"System.Transactions.IsolationLevel\"></xref> values that indicates the isolation level of the transaction.\n  overload: System.Transactions.Transaction.IsolationLevel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)\n  id: op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: op_Equality(Transaction,Transaction)\n  nameWithType: Transaction.op_Equality(Transaction,Transaction)\n  fullName: System.Transactions.Transaction.op_Equality(Transaction,Transaction)\n  type: Operator\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Tests whether two specified <xref href=\"System.Transactions.Transaction\"></xref> instances are equivalent.\n  syntax:\n    content: public static bool op_Equality (System.Transactions.Transaction x, System.Transactions.Transaction y);\n    parameters:\n    - id: x\n      type: System.Transactions.Transaction\n      description: The <xref href=\"System.Transactions.Transaction\"></xref> instance that is to the left of the equality operator.\n    - id: y\n      type: System.Transactions.Transaction\n      description: The <xref href=\"System.Transactions.Transaction\"></xref> instance that is to the right of the equality operator.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>x</code> and <code>y</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Transactions.Transaction.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)\n  id: op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: op_Inequality(Transaction,Transaction)\n  nameWithType: Transaction.op_Inequality(Transaction,Transaction)\n  fullName: System.Transactions.Transaction.op_Inequality(Transaction,Transaction)\n  type: Operator\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Returns a value that indicates whether two <xref href=\"System.Transactions.Transaction\"></xref> instances are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Transactions.Transaction x, System.Transactions.Transaction y);\n    parameters:\n    - id: x\n      type: System.Transactions.Transaction\n      description: The <xref href=\"System.Transactions.Transaction\"></xref> instance that is to the left of the inequality operator.\n    - id: y\n      type: System.Transactions.Transaction\n      description: The <xref href=\"System.Transactions.Transaction\"></xref> instance that is to the right of the inequality operator.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>x</code> and <code>y</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Transactions.Transaction.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  id: PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)\n  nameWithType: Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)\n  fullName: System.Transactions.Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: \"[Supported in the .NET Framework 4.5.2 and later versions]  \\n  \\n Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.\"\n  syntax:\n    content: public System.Transactions.Enlistment PromoteAndEnlistDurable (Guid resourceManagerIdentifier, System.Transactions.IPromotableSinglePhaseNotification promotableNotification, System.Transactions.ISinglePhaseNotification enlistmentNotification, System.Transactions.EnlistmentOptions enlistmentOptions);\n    parameters:\n    - id: resourceManagerIdentifier\n      type: System.Guid\n      description: A unique identifier for a resource manager, which should persist across resource manager failure or reboot.\n    - id: promotableNotification\n      type: System.Transactions.IPromotableSinglePhaseNotification\n      description: An object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.\n    - id: enlistmentNotification\n      type: System.Transactions.ISinglePhaseNotification\n      description: An object that implements the <xref href=\"System.Transactions.IEnlistmentNotification\"></xref> interface to receive two phase commit notifications.\n    - id: enlistmentOptions\n      type: System.Transactions.EnlistmentOptions\n      description: <xref href=\"System.Transactions.EnlistmentOptions\"></xref> if the resource manager wants to perform additional work during the prepare phase.\n    return:\n      type: System.Transactions.Enlistment\n      description: \"[Supported in the .NET Framework 4.5.2 and later versions]  \\n  \\n Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.\"\n  overload: System.Transactions.Transaction.PromoteAndEnlistDurable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.PromoterType\n  id: PromoterType\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: PromoterType\n  nameWithType: Transaction.PromoterType\n  fullName: System.Transactions.Transaction.PromoterType\n  type: Property\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Uniquely identifies the format of the `byte[]` returned by the Promote method when the transaction is promoted.\n  remarks: If the transaction has not yet been promoted and does not yet have a promotable single phase enlistment, the value of this property will be `Guid.Empty`. If the transaction has been or will be promoted to MSDTC, then the value of this property will be `TransactionInterop.PromoterTypeDtc`. If the transaction has been or will be promoted by a non-MSDTC promoter, the value of this property will be the value specified to an earlier call to `Transaction.EnlistPromotableSinglePhase`.\n  syntax:\n    content: public Guid PromoterType { get; }\n    return:\n      type: System.Guid\n      description: A guid that uniquely identifies the format of the `byte[]` returned by the Promote method when the transaction is promoted.\n  overload: System.Transactions.Transaction.PromoterType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.Rollback\n  id: Rollback\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: Rollback()\n  nameWithType: Transaction.Rollback()\n  fullName: System.Transactions.Transaction.Rollback()\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Rolls back (aborts) the transaction.\n  remarks: Any copy of a transaction object can initiate the rollback of the transaction by calling this method. Only the original transaction object, which is a <xref:System.Transactions.CommittableTransaction> object, can be used to initiate an attempt to commit the transaction. An exception is thrown when this method is called after the outcome of the transaction has already been determined.\n  syntax:\n    content: public void Rollback ();\n    parameters: []\n  overload: System.Transactions.Transaction.Rollback*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.Rollback(System.Exception)\n  id: Rollback(System.Exception)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: Rollback(Exception)\n  nameWithType: Transaction.Rollback(Exception)\n  fullName: System.Transactions.Transaction.Rollback(Exception)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Rolls back (aborts) the transaction.\n  syntax:\n    content: public void Rollback (Exception e);\n    parameters:\n    - id: e\n      type: System.Exception\n      description: An explanation of why a rollback occurred.\n  overload: System.Transactions.Transaction.Rollback*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  id: SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)\n  nameWithType: Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)\n  fullName: System.Transactions.Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Sets the distributed transaction identifier generated by the non-MSDTC promoter.\n  remarks: \"This method can only be called successfully while the `IPromotableSinglePhaseNotification.Promote` method is being processed. If this method is called at any other time, a `TransactionException` is thrown.  \\n  \\n The specified value of the `promotableNotification` parameter must be the same object that was originally specified to the `Transaction.EnlistPromotableSinglePhase` invocation. If this is not the case, then an `InvalidOperationException` is thrown.\"\n  syntax:\n    content: public void SetDistributedTransactionIdentifier (System.Transactions.IPromotableSinglePhaseNotification promotableNotification, Guid distributedTransactionIdentifier);\n    parameters:\n    - id: promotableNotification\n      type: System.Transactions.IPromotableSinglePhaseNotification\n      description: A <xref href=\"System.Transactions.IPromotableSinglePhaseNotification\"></xref> interface implemented by the participant.\n    - id: distributedTransactionIdentifier\n      type: System.Guid\n      description: The identifier for the transaction used by the distributed transaction manager.\n  overload: System.Transactions.Transaction.SetDistributedTransactionIdentifier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Transactions.Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Gets a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with the data required to serialize this transaction.\n  syntax:\n    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: serializationInfo\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to populate with data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The destination (see <xref:System.Runtime.Serialization.StreamingContext> ) for this serialization.\n  overload: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.TransactionCompleted\n  id: TransactionCompleted\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: TransactionCompleted\n  nameWithType: Transaction.TransactionCompleted\n  fullName: System.Transactions.Transaction.TransactionCompleted\n  type: Event\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Indicates that the transaction is completed.\n  remarks: \"You can register for this event instead of using a volatile enlistment to get outcome information for transactions. The parameter passed to the <xref:System.Transactions.TransactionCompletedEventHandler> delegate is a <xref:System.Transactions.Transaction> instance. You can then query the <xref:System.Transactions.Transaction.TransactionInformation%2A> property of the specific instance to get an instance of <xref:System.Transactions.TransactionInformation>, whose <xref:System.Transactions.TransactionInformation.Status%2A> property contains the status of a transaction with either the <xref:System.Transactions.TransactionStatus> or <xref:System.Transactions.TransactionStatus> value.  \\n  \\n **Caution** Signing up for this event negatively affects the performance of the transaction it is attached to.\"\n  example:\n  - \"The following sample shows how an application can obtain the outcome of a transaction by subscribing to the TransactionCompleted event.  \\n  \\n [!code-cs[Tx_Outcome#1](~/add/codesnippet/csharp/e-system.transactions.tr_1.cs)]\\n [!code-vb[Tx_Outcome#1](~/add/codesnippet/visualbasic/e-system.transactions.tr_1.vb)]\"\n  syntax:\n    content: public event System.Transactions.TransactionCompletedEventHandler TransactionCompleted;\n    return:\n      type: System.Transactions.TransactionCompletedEventHandler\n      description: To be added.\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An attempt to subscribe this event on a transaction that has been disposed.\n  platform:\n  - net462\n- uid: System.Transactions.Transaction.TransactionInformation\n  id: TransactionInformation\n  parent: System.Transactions.Transaction\n  langs:\n  - csharp\n  name: TransactionInformation\n  nameWithType: Transaction.TransactionInformation\n  fullName: System.Transactions.Transaction.TransactionInformation\n  type: Property\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Retrieves additional information about a transaction.\n  syntax:\n    content: public System.Transactions.TransactionInformation TransactionInformation { get; }\n    return:\n      type: System.Transactions.TransactionInformation\n      description: A <xref href=\"System.Transactions.TransactionInformation\"></xref> that contains additional information about the transaction.\n  overload: System.Transactions.Transaction.TransactionInformation*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.Transactions.Transaction.Clone\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Clone()\n  nameWithType: Transaction.Clone()\n  fullName: System.Transactions.Transaction.Clone()\n- uid: System.Transactions.Transaction\n  parent: System.Transactions\n  isExternal: false\n  name: Transaction\n  nameWithType: Transaction\n  fullName: System.Transactions.Transaction\n- uid: System.Transactions.Transaction.Current\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Current\n  nameWithType: Transaction.Current\n  fullName: System.Transactions.Transaction.Current\n- uid: System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: DependentClone(DependentCloneOption)\n  nameWithType: Transaction.DependentClone(DependentCloneOption)\n  fullName: System.Transactions.Transaction.DependentClone(DependentCloneOption)\n- uid: System.Transactions.DependentTransaction\n  parent: System.Transactions\n  isExternal: false\n  name: DependentTransaction\n  nameWithType: DependentTransaction\n  fullName: System.Transactions.DependentTransaction\n- uid: System.Transactions.DependentCloneOption\n  parent: System.Transactions\n  isExternal: false\n  name: DependentCloneOption\n  nameWithType: DependentCloneOption\n  fullName: System.Transactions.DependentCloneOption\n- uid: System.Transactions.Transaction.Dispose\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Dispose()\n  nameWithType: Transaction.Dispose()\n  fullName: System.Transactions.Transaction.Dispose()\n- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)\n  nameWithType: Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)\n  fullName: System.Transactions.Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)\n- uid: System.Transactions.Enlistment\n  parent: System.Transactions\n  isExternal: false\n  name: Enlistment\n  nameWithType: Enlistment\n  fullName: System.Transactions.Enlistment\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Transactions.IEnlistmentNotification\n  parent: System.Transactions\n  isExternal: false\n  name: IEnlistmentNotification\n  nameWithType: IEnlistmentNotification\n  fullName: System.Transactions.IEnlistmentNotification\n- uid: System.Transactions.EnlistmentOptions\n  parent: System.Transactions\n  isExternal: false\n  name: EnlistmentOptions\n  nameWithType: EnlistmentOptions\n  fullName: System.Transactions.EnlistmentOptions\n- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)\n  nameWithType: Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)\n  fullName: System.Transactions.Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)\n- uid: System.Transactions.ISinglePhaseNotification\n  parent: System.Transactions\n  isExternal: false\n  name: ISinglePhaseNotification\n  nameWithType: ISinglePhaseNotification\n  fullName: System.Transactions.ISinglePhaseNotification\n- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Transactions.IPromotableSinglePhaseNotification\n  parent: System.Transactions\n  isExternal: false\n  name: IPromotableSinglePhaseNotification\n  nameWithType: IPromotableSinglePhaseNotification\n  fullName: System.Transactions.IPromotableSinglePhaseNotification\n- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)\n  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)\n  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)\n- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)\n  nameWithType: Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)\n  fullName: System.Transactions.Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)\n- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)\n  nameWithType: Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)\n  fullName: System.Transactions.Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)\n- uid: System.Transactions.Transaction.Equals(System.Object)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Transaction.Equals(Object)\n  fullName: System.Transactions.Transaction.Equals(Object)\n- uid: System.Transactions.Transaction.GetHashCode\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Transaction.GetHashCode()\n  fullName: System.Transactions.Transaction.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Transactions.Transaction.GetPromotedToken\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: GetPromotedToken()\n  nameWithType: Transaction.GetPromotedToken()\n  fullName: System.Transactions.Transaction.GetPromotedToken()\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Transactions.Transaction.IsolationLevel\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: Transaction.IsolationLevel\n  fullName: System.Transactions.Transaction.IsolationLevel\n- uid: System.Transactions.IsolationLevel\n  parent: System.Transactions\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: IsolationLevel\n  fullName: System.Transactions.IsolationLevel\n- uid: System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: op_Equality(Transaction,Transaction)\n  nameWithType: Transaction.op_Equality(Transaction,Transaction)\n  fullName: System.Transactions.Transaction.op_Equality(Transaction,Transaction)\n- uid: System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: op_Inequality(Transaction,Transaction)\n  nameWithType: Transaction.op_Inequality(Transaction,Transaction)\n  fullName: System.Transactions.Transaction.op_Inequality(Transaction,Transaction)\n- uid: System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)\n  nameWithType: Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)\n  fullName: System.Transactions.Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)\n- uid: System.Transactions.Transaction.PromoterType\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: PromoterType\n  nameWithType: Transaction.PromoterType\n  fullName: System.Transactions.Transaction.PromoterType\n- uid: System.Transactions.Transaction.Rollback\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Rollback()\n  nameWithType: Transaction.Rollback()\n  fullName: System.Transactions.Transaction.Rollback()\n- uid: System.Transactions.Transaction.Rollback(System.Exception)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Rollback(Exception)\n  nameWithType: Transaction.Rollback(Exception)\n  fullName: System.Transactions.Transaction.Rollback(Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)\n  nameWithType: Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)\n  fullName: System.Transactions.Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)\n- uid: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Transactions.Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Transactions.Transaction.TransactionCompleted\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: TransactionCompleted\n  nameWithType: Transaction.TransactionCompleted\n  fullName: System.Transactions.Transaction.TransactionCompleted\n- uid: System.Transactions.TransactionCompletedEventHandler\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionCompletedEventHandler\n  nameWithType: TransactionCompletedEventHandler\n  fullName: System.Transactions.TransactionCompletedEventHandler\n- uid: System.Transactions.Transaction.TransactionInformation\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: TransactionInformation\n  nameWithType: Transaction.TransactionInformation\n  fullName: System.Transactions.Transaction.TransactionInformation\n- uid: System.Transactions.TransactionInformation\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionInformation\n  nameWithType: TransactionInformation\n  fullName: System.Transactions.TransactionInformation\n- uid: System.Transactions.Transaction.Clone*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Clone\n  nameWithType: Transaction.Clone\n- uid: System.Transactions.Transaction.Current*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Current\n  nameWithType: Transaction.Current\n- uid: System.Transactions.Transaction.DependentClone*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: DependentClone\n  nameWithType: Transaction.DependentClone\n- uid: System.Transactions.Transaction.Dispose*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Dispose\n  nameWithType: Transaction.Dispose\n- uid: System.Transactions.Transaction.EnlistDurable*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistDurable\n  nameWithType: Transaction.EnlistDurable\n- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistPromotableSinglePhase\n  nameWithType: Transaction.EnlistPromotableSinglePhase\n- uid: System.Transactions.Transaction.EnlistVolatile*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistVolatile\n  nameWithType: Transaction.EnlistVolatile\n- uid: System.Transactions.Transaction.Equals*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Equals\n  nameWithType: Transaction.Equals\n- uid: System.Transactions.Transaction.GetHashCode*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Transaction.GetHashCode\n- uid: System.Transactions.Transaction.GetPromotedToken*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: GetPromotedToken\n  nameWithType: Transaction.GetPromotedToken\n- uid: System.Transactions.Transaction.IsolationLevel*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: Transaction.IsolationLevel\n- uid: System.Transactions.Transaction.op_Equality*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: op_Equality\n  nameWithType: Transaction.op_Equality\n- uid: System.Transactions.Transaction.op_Inequality*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Transaction.op_Inequality\n- uid: System.Transactions.Transaction.PromoteAndEnlistDurable*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: PromoteAndEnlistDurable\n  nameWithType: Transaction.PromoteAndEnlistDurable\n- uid: System.Transactions.Transaction.PromoterType*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: PromoterType\n  nameWithType: Transaction.PromoterType\n- uid: System.Transactions.Transaction.Rollback*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Rollback\n  nameWithType: Transaction.Rollback\n- uid: System.Transactions.Transaction.SetDistributedTransactionIdentifier*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: SetDistributedTransactionIdentifier\n  nameWithType: Transaction.SetDistributedTransactionIdentifier\n- uid: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: Transaction.System.Runtime.Serialization.ISerializable.GetObjectData\n- uid: System.Transactions.Transaction.TransactionInformation*\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: TransactionInformation\n  nameWithType: Transaction.TransactionInformation\n"}