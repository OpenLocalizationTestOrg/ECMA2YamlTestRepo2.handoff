{"nodes":[{"pos":[563,686],"content":"Computes the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RIPEMD160\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> hash for the input data using the managed library.","needQuote":true,"needEscape":true,"source":"Computes the <xref href=\"System.Security.Cryptography.RIPEMD160\"></xref> hash for the input data using the managed library."},{"pos":[699,1342],"content":"RIPEMD-160 is a 160-bit cryptographic hash function. It is intended for use as a secure replacement for the 128-bit hash functions MD4, MD5, and RIPEMD. RIPEMD was developed in the framework of the EU project RIPE (RACE Integrity Primitives Evaluation, 1988-1992).      > [!NOTE] >  RIPEMD160Managed has been superseded by the Secure Hash Algorithms SHA-256 and SHA-512 and their derived classes. <xref:System.Security.Cryptography.SHA256Managed> and <xref:System.Security.Cryptography.SHA512Managed> offer better security and performance than RIPEMD160Managed. Use RIPEMD160Managed only for compatibility with legacy applications and data.","needQuote":false,"needEscape":true,"nodes":[{"content":"RIPEMD-160 is a 160-bit cryptographic hash function.","pos":[0,52]},{"content":"It is intended for use as a secure replacement for the 128-bit hash functions MD4, MD5, and RIPEMD.","pos":[53,152]},{"content":"RIPEMD was developed in the framework of the EU project RIPE (RACE Integrity Primitives Evaluation, 1988-1992).","pos":[153,264]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  RIPEMD160Managed has been superseded by the Secure Hash Algorithms SHA-256 and SHA-512 and their derived classes.","pos":[270,396],"source":"      > [!NOTE] >  RIPEMD160Managed has been superseded by the Secure Hash Algorithms SHA-256 and SHA-512 and their derived classes."},{"content":"&lt;xref:System.Security.Cryptography.SHA256Managed&gt; and &lt;xref:System.Security.Cryptography.SHA512Managed&gt; offer better security and performance than RIPEMD160Managed.","pos":[397,561],"source":" <xref:System.Security.Cryptography.SHA256Managed> and <xref:System.Security.Cryptography.SHA512Managed> offer better security and performance than RIPEMD160Managed."},{"content":"Use RIPEMD160Managed only for compatibility with legacy applications and data.","pos":[562,640]}]},{"pos":[3820,3920],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RIPEMD160\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RIPEMD160\"></xref> class."},{"pos":[3933,4286],"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.       The hash size for the <xref:System.Security.Cryptography.RIPEMD160> algorithm is 160 bits.","needQuote":false,"needEscape":true,"nodes":[{"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.       The hash size for the <xref:System.Security.Cryptography.RIPEMD160> algorithm is 160 bits.","pos":[0,351],"nodes":[{"content":"The hash is used as a unique value of fixed size representing a large amount of data.","pos":[0,85]},{"content":"Hashes of two sets of data should match if and only if the corresponding data also matches.","pos":[86,177]},{"content":"Small changes to the data result in large unpredictable changes in the hash.","pos":[178,254]},{"content":"The hash size for the &lt;xref:System.Security.Cryptography.RIPEMD160&gt; algorithm is 160 bits.","pos":[261,351],"source":"       The hash size for the <xref:System.Security.Cryptography.RIPEMD160> algorithm is 160 bits."}]}]},{"pos":[4963,5015],"content":"The policy is not compliant with the FIPS algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The policy is not compliant with the FIPS algorithm.","pos":[0,52]}]},{"pos":[5555,5732],"content":"When overridden in a derived class, routes data written to the object into the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RIPEMD160\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> hash algorithm for computing the hash.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, routes data written to the object into the <xref href=\"System.Security.Cryptography.RIPEMD160\"></xref> hash algorithm for computing the hash."},{"pos":[5745,6075],"content":"This method is not called by application code.       This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is not called by application code.       This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.","pos":[0,328],"nodes":[{"content":"This method is not called by application code.","pos":[0,46]},{"content":"This abstract method performs the hash computation.","pos":[53,104]},{"content":"Every write to the cryptographic stream object passes the data through this method.","pos":[105,188]},{"content":"For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.","pos":[189,328]}]}]},{"pos":[6247,6262],"content":"The input data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input data.","pos":[0,15]}]},{"pos":[6325,6387],"content":"The offset into the byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]},{"pos":[6449,6497],"content":"The number of bytes in the array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]},{"pos":[6991,7126],"content":"When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.","pos":[0,135]}]},{"pos":[7138,7285],"content":"This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.","pos":[0,147],"nodes":[{"content":"This method is not called by application code.","pos":[0,46]},{"content":"This method finalizes any partial computation and returns the correct hash value of the data stream.","pos":[47,147]}]}]},{"pos":[7425,7464],"content":"The computed hash code in a byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed hash code in a byte array.","pos":[0,39]}]},{"pos":[7964,8094],"content":"Initializes an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RIPEMD160Managed\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the managed library.","needQuote":true,"needEscape":true,"source":"Initializes an instance of the <xref href=\"System.Security.Cryptography.RIPEMD160Managed\"></xref> class using the managed library."},{"pos":[8106,8370],"content":"RIPEMD-160 is a 160-bit cryptographic hash function. It is intended for use as a secure replacement for the 128-bit hash functions MD4, MD5, and RIPEMD. RIPEMD was developed in the framework of the EU project RIPE (RACE Integrity Primitives Evaluation, 1988-1992).","needQuote":true,"needEscape":true,"nodes":[{"content":"RIPEMD-160 is a 160-bit cryptographic hash function. It is intended for use as a secure replacement for the 128-bit hash functions MD4, MD5, and RIPEMD. RIPEMD was developed in the framework of the EU project RIPE (RACE Integrity Primitives Evaluation, 1988-1992).","pos":[0,264],"nodes":[{"content":"RIPEMD-160 is a 160-bit cryptographic hash function.","pos":[0,52]},{"content":"It is intended for use as a secure replacement for the 128-bit hash functions MD4, MD5, and RIPEMD.","pos":[53,152]},{"content":"RIPEMD was developed in the framework of the EU project RIPE (RACE Integrity Primitives Evaluation, 1988-1992).","pos":[153,264]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.RIPEMD160Managed\n  id: RIPEMD160Managed\n  children:\n  - System.Security.Cryptography.RIPEMD160Managed.#ctor\n  - System.Security.Cryptography.RIPEMD160Managed.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.RIPEMD160Managed.HashFinal\n  - System.Security.Cryptography.RIPEMD160Managed.Initialize\n  langs:\n  - csharp\n  name: RIPEMD160Managed\n  nameWithType: RIPEMD160Managed\n  fullName: System.Security.Cryptography.RIPEMD160Managed\n  type: Class\n  summary: Computes the <xref href=\"System.Security.Cryptography.RIPEMD160\"></xref> hash for the input data using the managed library.\n  remarks: \"RIPEMD-160 is a 160-bit cryptographic hash function. It is intended for use as a secure replacement for the 128-bit hash functions MD4, MD5, and RIPEMD. RIPEMD was developed in the framework of the EU project RIPE (RACE Integrity Primitives Evaluation, 1988-1992).  \\n  \\n> [!NOTE]\\n>  RIPEMD160Managed has been superseded by the Secure Hash Algorithms SHA-256 and SHA-512 and their derived classes. <xref:System.Security.Cryptography.SHA256Managed> and <xref:System.Security.Cryptography.SHA512Managed> offer better security and performance than RIPEMD160Managed. Use RIPEMD160Managed only for compatibility with legacy applications and data.\"\n  example:\n  - \"The following code example shows how to encode a file using the RIPEMD160Managed class and then how to decode the file.  \\n  \\n [!code-cpp[RIPEMD160#1](~/add/codesnippet/cpp/t-system.security.crypto_87_1.cpp)]\\n [!code-vb[RIPEMD160#1](~/add/codesnippet/visualbasic/t-system.security.crypto_87_1.vb)]\\n [!code-cs[RIPEMD160#1](~/add/codesnippet/csharp/t-system.security.crypto_87_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class RIPEMD160Managed : System.Security.Cryptography.RIPEMD160\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.RIPEMD160\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.RIPEMD160.Create\n  - System.Security.Cryptography.RIPEMD160.Create(System.String)\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RIPEMD160Managed.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  langs:\n  - csharp\n  name: RIPEMD160Managed()\n  nameWithType: RIPEMD160Managed.RIPEMD160Managed()\n  fullName: System.Security.Cryptography.RIPEMD160Managed.RIPEMD160Managed()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RIPEMD160\"></xref> class.\n  remarks: \"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.  \\n  \\n The hash size for the <xref:System.Security.Cryptography.RIPEMD160> algorithm is 160 bits.\"\n  example:\n  - \"The following code example computes the <xref:System.Security.Cryptography.RIPEMD160Managed> class hash for all files in a directory.  \\n  \\n [!code-cpp[RIPEMD160#1](~/add/codesnippet/cpp/m-system.security.crypto_65_1.cpp)]\\n [!code-vb[RIPEMD160#1](~/add/codesnippet/visualbasic/m-system.security.crypto_65_1.vb)]\\n [!code-cs[RIPEMD160#1](~/add/codesnippet/csharp/m-system.security.crypto_65_1.cs)]\"\n  syntax:\n    content: public RIPEMD160Managed ();\n    parameters: []\n  overload: System.Security.Cryptography.RIPEMD160Managed.#ctor*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The policy is not compliant with the FIPS algorithm.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RIPEMD160Managed.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  langs:\n  - csharp\n  name: HashCore(Byte[],Int32,Int32)\n  nameWithType: RIPEMD160Managed.HashCore(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.RIPEMD160Managed.HashCore(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, routes data written to the object into the <xref href=\"System.Security.Cryptography.RIPEMD160\"></xref> hash algorithm for computing the hash.\n  remarks: \"This method is not called by application code.  \\n  \\n This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.\"\n  syntax:\n    content: protected override void HashCore (byte[] rgb, int ibStart, int cbSize);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: The input data.\n    - id: ibStart\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: cbSize\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n  overload: System.Security.Cryptography.RIPEMD160Managed.HashCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RIPEMD160Managed.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  langs:\n  - csharp\n  name: HashFinal()\n  nameWithType: RIPEMD160Managed.HashFinal()\n  fullName: System.Security.Cryptography.RIPEMD160Managed.HashFinal()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.\n  remarks: This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.\n  syntax:\n    content: protected override byte[] HashFinal ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: The computed hash code in a byte array.\n  overload: System.Security.Cryptography.RIPEMD160Managed.HashFinal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RIPEMD160Managed.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: RIPEMD160Managed.Initialize()\n  fullName: System.Security.Cryptography.RIPEMD160Managed.Initialize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes an instance of the <xref href=\"System.Security.Cryptography.RIPEMD160Managed\"></xref> class using the managed library.\n  remarks: RIPEMD-160 is a 160-bit cryptographic hash function. It is intended for use as a secure replacement for the 128-bit hash functions MD4, MD5, and RIPEMD. RIPEMD was developed in the framework of the EU project RIPE (RACE Integrity Primitives Evaluation, 1988-1992).\n  syntax:\n    content: public override void Initialize ();\n    parameters: []\n  overload: System.Security.Cryptography.RIPEMD160Managed.Initialize*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.RIPEMD160\n  isExternal: false\n  name: System.Security.Cryptography.RIPEMD160\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Security.Cryptography.RIPEMD160Managed.#ctor\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  isExternal: false\n  name: RIPEMD160Managed()\n  nameWithType: RIPEMD160Managed.RIPEMD160Managed()\n  fullName: System.Security.Cryptography.RIPEMD160Managed.RIPEMD160Managed()\n- uid: System.Security.Cryptography.RIPEMD160Managed.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  isExternal: false\n  name: HashCore(Byte[],Int32,Int32)\n  nameWithType: RIPEMD160Managed.HashCore(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.RIPEMD160Managed.HashCore(Byte[],Int32,Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.RIPEMD160Managed.HashFinal\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  isExternal: false\n  name: HashFinal()\n  nameWithType: RIPEMD160Managed.HashFinal()\n  fullName: System.Security.Cryptography.RIPEMD160Managed.HashFinal()\n- uid: System.Security.Cryptography.RIPEMD160Managed.Initialize\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  isExternal: false\n  name: Initialize()\n  nameWithType: RIPEMD160Managed.Initialize()\n  fullName: System.Security.Cryptography.RIPEMD160Managed.Initialize()\n- uid: System.Security.Cryptography.RIPEMD160Managed.#ctor*\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  isExternal: false\n  name: RIPEMD160Managed\n  nameWithType: RIPEMD160Managed.RIPEMD160Managed\n- uid: System.Security.Cryptography.RIPEMD160Managed.HashCore*\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  isExternal: false\n  name: HashCore\n  nameWithType: RIPEMD160Managed.HashCore\n- uid: System.Security.Cryptography.RIPEMD160Managed.HashFinal*\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  isExternal: false\n  name: HashFinal\n  nameWithType: RIPEMD160Managed.HashFinal\n- uid: System.Security.Cryptography.RIPEMD160Managed.Initialize*\n  parent: System.Security.Cryptography.RIPEMD160Managed\n  isExternal: false\n  name: Initialize\n  nameWithType: RIPEMD160Managed.Initialize\n"}