{"nodes":[{"pos":[826,857],"content":"Base class for asymmetric keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Base class for asymmetric keys.","pos":[0,31]}]},{"pos":[869,983],"content":"You cannot use this class when <ph id=\"ph1\">[!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)]</ph> is running under partial trust.","needQuote":true,"needEscape":true,"source":"You cannot use this class when [!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)] is running under partial trust."},{"pos":[2141,2252],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.AsymmetricSecurityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.AsymmetricSecurityKey\"></xref> class."},{"pos":[3020,3110],"content":"When overridden in a derived class, gets the specified asymmetric cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets the specified asymmetric cryptographic algorithm.","pos":[0,90]}]},{"pos":[3122,3236],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the static fields of the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[3466,3501],"content":"The asymmetric algorithm to create.","needQuote":true,"needEscape":true,"nodes":[{"content":"The asymmetric algorithm to create.","pos":[0,35]}]},{"pos":[3569,3760],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when a private key is required to create the algorithm; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when a private key is required to create the algorithm; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3854,4189],"content":"An <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> that represents the specified asymmetric cryptographic algorithm.       Typically, <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> is passed into the <code>privateKey</code> parameter, as a private key is typically required for decryption.","needQuote":false,"needEscape":true,"nodes":[{"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the specified asymmetric cryptographic algorithm.","pos":[0,138],"source":"An <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> that represents the specified asymmetric cryptographic algorithm."},{"content":"Typically, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is passed into the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">privateKey</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter, as a private key is typically required for decryption.","pos":[145,325],"source":"       Typically, <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> is passed into the <code>privateKey</code> parameter, as a private key is typically required for decryption."}]},{"pos":[4873,4986],"content":"When overridden in a derived class, gets a cryptographic algorithm that generates a hash for a digital signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a cryptographic algorithm that generates a hash for a digital signature.","pos":[0,113]}]},{"pos":[4998,5112],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the static fields of the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[5325,5344],"content":"The hash algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm.","pos":[0,19]}]},{"pos":[5431,5542],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that generates hashes for digital signatures.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> that generates hashes for digital signatures."},{"pos":[6206,6299],"content":"When overridden in a derived class, gets the deformatter algorithm for the digital signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets the deformatter algorithm for the digital signature.","pos":[0,93]}]},{"pos":[6312,6507],"content":"A signature deformatter is typically used to verify a digital signature.       Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":false,"needEscape":true,"nodes":[{"content":"A signature deformatter is typically used to verify a digital signature.       Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","pos":[0,193],"nodes":[{"content":"A signature deformatter is typically used to verify a digital signature.","pos":[0,72]},{"content":"Use the static fields of the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[79,193],"source":"       Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}]},{"pos":[6733,6785],"content":"The deformatter algorithm for the digital signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"The deformatter algorithm for the digital signature.","pos":[0,52]}]},{"pos":[6889,7041],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the deformatter algorithm for the digital signature.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref> that represents the deformatter algorithm for the digital signature."},{"pos":[7690,7781],"content":"When overridden in a derived class, gets the formatter algorithm for the digital signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets the formatter algorithm for the digital signature.","pos":[0,91]}]},{"pos":[7794,7990],"content":"Typically, a signature formatter is used to generate a digital signature.       Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":false,"needEscape":true,"nodes":[{"content":"Typically, a signature formatter is used to generate a digital signature.       Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","pos":[0,194],"nodes":[{"content":"Typically, a signature formatter is used to generate a digital signature.","pos":[0,73]},{"content":"Use the static fields of the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[80,194],"source":"       Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}]},{"pos":[8212,8262],"content":"The formatter algorithm for the digital signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"The formatter algorithm for the digital signature.","pos":[0,50]}]},{"pos":[8364,8512],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the formatter algorithm for the digital signature.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"></xref> that represents the formatter algorithm for the digital signature."},{"pos":[9071,9172],"content":"When overridden in a derived class, gets a value that indicates whether the private key is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a value that indicates whether the private key is available.","pos":[0,101]}]},{"pos":[9312,9482],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the private key is available; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the private key is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  id: AsymmetricSecurityKey\n  children:\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey\n  langs:\n  - csharp\n  name: AsymmetricSecurityKey\n  nameWithType: AsymmetricSecurityKey\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  type: Class\n  summary: Base class for asymmetric keys.\n  remarks: You cannot use this class when [!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)] is running under partial trust.\n  syntax:\n    content: 'public abstract class AsymmetricSecurityKey : System.IdentityModel.Tokens.SecurityKey'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.SecurityKey\n  implements: []\n  inheritedMembers:\n  - System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.KeySize\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor\n  id: '#ctor'\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: AsymmetricSecurityKey()\n  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey()\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.AsymmetricSecurityKey()\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.AsymmetricSecurityKey\"></xref> class.\n  syntax:\n    content: protected AsymmetricSecurityKey ();\n    parameters: []\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)\n  id: GetAsymmetricAlgorithm(System.String,System.Boolean)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetAsymmetricAlgorithm(String,Boolean)\n  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the specified asymmetric cryptographic algorithm.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.AsymmetricAlgorithm GetAsymmetricAlgorithm (string algorithm, bool privateKey);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The asymmetric algorithm to create.\n    - id: privateKey\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when a private key is required to create the algorithm; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: \"An <xref href=\\\"System.Security.Cryptography.AsymmetricAlgorithm\\\"></xref> that represents the specified asymmetric cryptographic algorithm.  \\n  \\n Typically, <xref uid=\\\"langword_csharp_true\\\" name=\\\"true\\\" href=\\\"\\\"></xref> is passed into the <code>privateKey</code> parameter, as a private key is typically required for decryption.\"\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)\n  id: GetHashAlgorithmForSignature(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetHashAlgorithmForSignature(String)\n  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a cryptographic algorithm that generates a hash for a digital signature.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.HashAlgorithm GetHashAlgorithmForSignature (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The hash algorithm.\n    return:\n      type: System.Security.Cryptography.HashAlgorithm\n      description: A <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> that generates hashes for digital signatures.\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)\n  id: GetSignatureDeformatter(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSignatureDeformatter(String)\n  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter(String)\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the deformatter algorithm for the digital signature.\n  remarks: \"A signature deformatter is typically used to verify a digital signature.  \\n  \\n Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\"\n  syntax:\n    content: public abstract System.Security.Cryptography.AsymmetricSignatureDeformatter GetSignatureDeformatter (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The deformatter algorithm for the digital signature.\n    return:\n      type: System.Security.Cryptography.AsymmetricSignatureDeformatter\n      description: An <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref> that represents the deformatter algorithm for the digital signature.\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)\n  id: GetSignatureFormatter(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSignatureFormatter(String)\n  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter(String)\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the formatter algorithm for the digital signature.\n  remarks: \"Typically, a signature formatter is used to generate a digital signature.  \\n  \\n Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\"\n  syntax:\n    content: public abstract System.Security.Cryptography.AsymmetricSignatureFormatter GetSignatureFormatter (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The formatter algorithm for the digital signature.\n    return:\n      type: System.Security.Cryptography.AsymmetricSignatureFormatter\n      description: An <xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"></xref> that represents the formatter algorithm for the digital signature.\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey\n  id: HasPrivateKey\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  langs:\n  - csharp\n  name: HasPrivateKey()\n  nameWithType: AsymmetricSecurityKey.HasPrivateKey()\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a value that indicates whether the private key is available.\n  syntax:\n    content: public abstract bool HasPrivateKey ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the private key is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: System.IdentityModel.Tokens.SecurityKey\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: AsymmetricSecurityKey()\n  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey()\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.AsymmetricSecurityKey()\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetAsymmetricAlgorithm(String,Boolean)\n  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetHashAlgorithmForSignature(String)\n  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetSignatureDeformatter(String)\n  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter(String)\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(String)\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricSignatureDeformatter\n  nameWithType: AsymmetricSignatureDeformatter\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetSignatureFormatter(String)\n  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter(String)\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(String)\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricSignatureFormatter\n  nameWithType: AsymmetricSignatureFormatter\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: HasPrivateKey()\n  nameWithType: AsymmetricSecurityKey.HasPrivateKey()\n  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey()\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: AsymmetricSecurityKey\n  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetAsymmetricAlgorithm\n  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetHashAlgorithmForSignature\n  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetSignatureDeformatter\n  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: GetSignatureFormatter\n  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter\n- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey*\n  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey\n  isExternal: false\n  name: HasPrivateKey\n  nameWithType: AsymmetricSecurityKey.HasPrivateKey\n"}