{"nodes":[{"pos":[792,928],"content":"Encapsulates and propagates all security-related data for execution contexts transferred across threads. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encapsulates and propagates all security-related data for execution contexts transferred across threads. This class cannot be inherited.","pos":[0,136],"nodes":[{"content":"Encapsulates and propagates all security-related data for execution contexts transferred across threads.","pos":[0,104]},{"content":"This class cannot be inherited.","pos":[105,136]}]}]},{"pos":[3505,3558],"content":"Captures the security context for the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Captures the security context for the current thread.","pos":[0,53]}]},{"pos":[3570,3815],"content":"The captured security context can be applied to another thread. The <xref:System.Security.SecurityContext> consists of the <xref:System.Threading.CompressedStack> and the <xref:System.Security.Principal.WindowsIdentity> for the executing thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"The captured security context can be applied to another thread. The <xref:System.Security.SecurityContext> consists of the <xref:System.Threading.CompressedStack> and the <xref:System.Security.Principal.WindowsIdentity> for the executing thread.","pos":[0,245],"nodes":[{"content":"The captured security context can be applied to another thread.","pos":[0,63]},{"content":"The &lt;xref:System.Security.SecurityContext&gt; consists of the &lt;xref:System.Threading.CompressedStack&gt; and the &lt;xref:System.Security.Principal.WindowsIdentity&gt; for the executing thread.","pos":[64,245],"source":" The <xref:System.Security.SecurityContext> consists of the <xref:System.Threading.CompressedStack> and the <xref:System.Security.Principal.WindowsIdentity> for the executing thread."}]}]},{"pos":[3991,4035],"content":"The security context for the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security context for the current thread.","pos":[0,44]}]},{"pos":[4463,4510],"content":"Creates a copy of the current security context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a copy of the current security context.","pos":[0,47]}]},{"pos":[4522,4710],"content":"The current context must have been acquired through a capture or a copy operation. This method is useful for applying a captured <xref:System.Security.SecurityContext> to multiple threads.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current context must have been acquired through a capture or a copy operation. This method is useful for applying a captured <xref:System.Security.SecurityContext> to multiple threads.","pos":[0,188],"nodes":[{"content":"The current context must have been acquired through a capture or a copy operation.","pos":[0,82]},{"content":"This method is useful for applying a captured &lt;xref:System.Security.SecurityContext&gt; to multiple threads.","pos":[83,188],"source":" This method is useful for applying a captured <xref:System.Security.SecurityContext> to multiple threads."}]}]},{"pos":[4882,4926],"content":"The security context for the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security context for the current thread.","pos":[0,44]}]},{"pos":[5107,5291],"content":"The current security context has been previously used, was marshaled across application domains, or was not acquired through the <xref:System.Security.SecurityContext.Capture*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current security context has been previously used, was marshaled across application domains, or was not acquired through the &lt;xref:System.Security.SecurityContext.Capture*&gt; method.","pos":[0,184],"source":"The current security context has been previously used, was marshaled across application domains, or was not acquired through the <xref:System.Security.SecurityContext.Capture*> method."}]},{"pos":[5634,5752],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Security.SecurityContext\"></xref> class."},{"pos":[5765,6630],"content":"Call `Dispose` when you are finished using the <xref:System.Security.SecurityContext>. The `Dispose` method leaves the <xref:System.Security.SecurityContext> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.SecurityContext> so the garbage collector can reclaim the memory that the <xref:System.Security.SecurityContext> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.SecurityContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.SecurityContext> object's `Finalize` method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the &lt;xref:System.Security.SecurityContext&gt;.","pos":[0,86],"source":"Call `Dispose` when you are finished using the <xref:System.Security.SecurityContext>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the &lt;xref:System.Security.SecurityContext&gt; in an unusable state.","pos":[87,179],"source":" The `Dispose` method leaves the <xref:System.Security.SecurityContext> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the &lt;xref:System.Security.SecurityContext&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.SecurityContext&gt; was occupying.","pos":[180,393],"source":" After calling `Dispose`, you must release all references to the <xref:System.Security.SecurityContext> so the garbage collector can reclaim the memory that the <xref:System.Security.SecurityContext> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[400,574],"source":"       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call <ph id=\"ph2\">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Security.SecurityContext&gt;.","pos":[580,700],"source":"      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.SecurityContext>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.SecurityContext&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[701,860],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.SecurityContext> object's `Finalize` method."}]},{"pos":[7155,7227],"content":"Determines whether the flow of the security context has been suppressed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the flow of the security context has been suppressed.","pos":[0,72]}]},{"pos":[7239,7423],"content":"The IsFlowSuppressed method is used by infrastructure components to determine whether to transfer the <xref:System.Security.SecurityContext> information during asynchronous operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"The IsFlowSuppressed method is used by infrastructure components to determine whether to transfer the &lt;xref:System.Security.SecurityContext&gt; information during asynchronous operations.","pos":[0,184],"source":"The IsFlowSuppressed method is used by infrastructure components to determine whether to transfer the <xref:System.Security.SecurityContext> information during asynchronous operations."}]},{"pos":[7564,7732],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the flow has been suppressed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the flow has been suppressed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8274,8386],"content":"Determines whether the flow of the Windows identity portion of the current security context has been suppressed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the flow of the Windows identity portion of the current security context has been suppressed.","pos":[0,112]}]},{"pos":[8398,8632],"content":"The IsWindowsIdentityFlowSuppressed method is used by infrastructure components to determine whether to transfer the Windows identity information when the <xref:System.Security.SecurityContext> migrates during asynchronous operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"The IsWindowsIdentityFlowSuppressed method is used by infrastructure components to determine whether to transfer the Windows identity information when the &lt;xref:System.Security.SecurityContext&gt; migrates during asynchronous operations.","pos":[0,234],"source":"The IsWindowsIdentityFlowSuppressed method is used by infrastructure components to determine whether to transfer the Windows identity information when the <xref:System.Security.SecurityContext> migrates during asynchronous operations."}]},{"pos":[8788,8956],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the flow has been suppressed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the flow has been suppressed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9413,9483],"content":"Restores the flow of the security context across asynchronous threads.","needQuote":true,"needEscape":true,"nodes":[{"content":"Restores the flow of the security context across asynchronous threads.","pos":[0,70]}]},{"pos":[9495,9716],"content":"The RestoreFlow method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName> method to reverse the effect of a prior <xref:System.Security.SecurityContext.SuppressFlow%2A> method call.","needQuote":true,"needEscape":true,"nodes":[{"content":"The RestoreFlow method is called by the &lt;xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName&gt; method to reverse the effect of a prior &lt;xref:System.Security.SecurityContext.SuppressFlow%2A&gt; method call.","pos":[0,221],"source":"The RestoreFlow method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName> method to reverse the effect of a prior <xref:System.Security.SecurityContext.SuppressFlow%2A> method call."}]},{"pos":[9975,10079],"content":"The security context is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or an empty string.","needQuote":true,"needEscape":true,"source":"The security context is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string."},{"pos":[10676,10758],"content":"Runs the specified method in the specified security context on the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Runs the specified method in the specified security context on the current thread.","pos":[0,82]}]},{"pos":[10770,10881],"content":"The security context for the current thread is returned to its previous state when the method call is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security context for the current thread is returned to its previous state when the method call is complete.","pos":[0,111]}]},{"pos":[11497,11525],"content":"The security context to set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security context to set.","pos":[0,28]}]},{"pos":[11609,11690],"content":"The delegate that represents the method to run in the specified security context.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate that represents the method to run in the specified security context.","pos":[0,81]}]},{"pos":[11752,11794],"content":"The object to pass to the callback method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to pass to the callback method.","pos":[0,42]}]},{"pos":[11969,12274],"content":"<code>securityContext</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>securityContext</code> was not acquired through a capture operation.       -or-       <code>securityContext</code> has already been used as the argument to a Run method call.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;securityContext&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,93],"source":"<code>securityContext</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;securityContext&lt;/code&gt;</ph> was not acquired through a capture operation.","pos":[100,185],"source":"       -or-       <code>securityContext</code> was not acquired through a capture operation."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;securityContext&lt;/code&gt;</ph> has already been used as the argument to a Run method call.","pos":[192,291],"source":"       -or-       <code>securityContext</code> has already been used as the argument to a Run method call."}]},{"pos":[12643,12715],"content":"Suppresses the flow of the security context across asynchronous threads.","needQuote":true,"needEscape":true,"nodes":[{"content":"Suppresses the flow of the security context across asynchronous threads.","pos":[0,72]}]},{"pos":[12728,14060],"content":"Use this method to suppress the flow of <xref:System.Security.SecurityContext> information on the current thread for asynchronous operations.       The common language runtime (CLR) is only aware of the impersonation operations performed using managed code. The CLR has no knowledge of impersonation performed outside of managed code, such as platform invokes to unmanaged code that does the impersonation, or through calls to Win32 functions. To flow identity across asynchronous points you must use the managed <xref:System.Security.Principal.WindowsIdentity> and <xref:System.Security.Principal.WindowsImpersonationContext> methods.       Use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to return the <xref:System.Security.SecurityContext> object to its previous state.       This method is protected with a <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> for <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> permission. A fully trusted component can call this method to suppress the flow of the <xref:System.Security.SecurityContext> information during asynchronous calls. When the flow is suppressed, the <xref:System.Security.SecurityContext.Capture%2A> method returns `null`.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this method to suppress the flow of &lt;xref:System.Security.SecurityContext&gt; information on the current thread for asynchronous operations.","pos":[0,141],"source":"Use this method to suppress the flow of <xref:System.Security.SecurityContext> information on the current thread for asynchronous operations."},{"content":"The common language runtime (CLR) is only aware of the impersonation operations performed using managed code.","pos":[148,257]},{"content":"The CLR has no knowledge of impersonation performed outside of managed code, such as platform invokes to unmanaged code that does the impersonation, or through calls to Win32 functions.","pos":[258,443]},{"content":"To flow identity across asynchronous points you must use the managed &lt;xref:System.Security.Principal.WindowsIdentity&gt; and &lt;xref:System.Security.Principal.WindowsImpersonationContext&gt; methods.","pos":[444,635],"source":" To flow identity across asynchronous points you must use the managed <xref:System.Security.Principal.WindowsIdentity> and <xref:System.Security.Principal.WindowsImpersonationContext> methods."},{"content":"Use the &lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt; method on the returned &lt;xref:System.Threading.AsyncFlowControl&gt; structure to return the &lt;xref:System.Security.SecurityContext&gt; object to its previous state.","pos":[642,855],"source":"       Use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to return the <xref:System.Security.SecurityContext> object to its previous state."},{"content":"This method is protected with a &lt;xref:System.Security.Permissions.SecurityAction?displayProperty=fullName&gt; for &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; permission.","pos":[862,1067],"source":"       This method is protected with a <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> for <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> permission."},{"content":"A fully trusted component can call this method to suppress the flow of the &lt;xref:System.Security.SecurityContext&gt; information during asynchronous calls.","pos":[1068,1220],"source":" A fully trusted component can call this method to suppress the flow of the <xref:System.Security.SecurityContext> information during asynchronous calls."},{"content":"When the flow is suppressed, the &lt;xref:System.Security.SecurityContext.Capture%2A&gt; method returns <ph id=\"ph1\">`null`</ph>.","pos":[1221,1326],"source":" When the flow is suppressed, the <xref:System.Security.SecurityContext.Capture%2A> method returns `null`."}]},{"pos":[14246,14337],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure for restoring the flow.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure for restoring the flow."},{"pos":[14855,14967],"content":"Suppresses the flow of the Windows identity portion of the current security context across asynchronous threads.","needQuote":true,"needEscape":true,"nodes":[{"content":"Suppresses the flow of the Windows identity portion of the current security context across asynchronous threads.","pos":[0,112]}]},{"pos":[16443,16478],"content":"A structure for restoring the flow.","needQuote":true,"needEscape":true,"nodes":[{"content":"A structure for restoring the flow.","pos":[0,35]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.SecurityContext\n  id: SecurityContext\n  children:\n  - System.Security.SecurityContext.Capture\n  - System.Security.SecurityContext.CreateCopy\n  - System.Security.SecurityContext.Dispose\n  - System.Security.SecurityContext.IsFlowSuppressed\n  - System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed\n  - System.Security.SecurityContext.RestoreFlow\n  - System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)\n  - System.Security.SecurityContext.SuppressFlow\n  - System.Security.SecurityContext.SuppressFlowWindowsIdentity\n  langs:\n  - csharp\n  name: SecurityContext\n  nameWithType: SecurityContext\n  fullName: System.Security.SecurityContext\n  type: Class\n  summary: Encapsulates and propagates all security-related data for execution contexts transferred across threads. This class cannot be inherited.\n  remarks: \"A SecurityContext object captures all security-related information for a logical thread, including the information contained in the <xref:System.Security.Principal.WindowsIdentity> and <xref:System.Threading.CompressedStack> objects.  This configuration allows the Windows identity and the security elements on the stack to be propagated automatically when the SecurityContext is copied and transferred across asynchronous threads.  \\n  \\n> [!NOTE]\\n>  The common language runtime (CLR) is aware of impersonation operations performed using only managed code, not of impersonation performed outside of managed code, such as through platform invoke to unmanaged code or through direct calls to Win32 functions. Only managed <xref:System.Security.Principal.WindowsIdentity> objects can flow across asynchronous points, unless the `alwaysFlowImpersonationPolicy` element has been set to `true` (`<alwaysFlowImpersonationPolicy enabled=\\\"true\\\"/>`). Setting the `alwaysFlowImpersonationPolicy` element to `true` specifies that the Windows identity always flows across asynchronous points, regardless of how impersonation was performed. For more information about flowing unmanaged impersonation across asynchronous points, see [\\\\&lt;alwaysFlowImpersonationPolicy\\\\&gt; Element](../Topic/%3CalwaysFlowImpersonationPolicy%3E%20Element.md).  \\n  \\n The SecurityContext is part of the larger <xref:System.Threading.ExecutionContext> and flows or migrates when the <xref:System.Threading.ExecutionContext> flows or migrates.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\"\n  syntax:\n    content: 'public sealed class SecurityContext : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.SecurityContext.Capture\n  id: Capture\n  parent: System.Security.SecurityContext\n  langs:\n  - csharp\n  name: Capture()\n  nameWithType: SecurityContext.Capture()\n  fullName: System.Security.SecurityContext.Capture()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Captures the security context for the current thread.\n  remarks: The captured security context can be applied to another thread. The <xref:System.Security.SecurityContext> consists of the <xref:System.Threading.CompressedStack> and the <xref:System.Security.Principal.WindowsIdentity> for the executing thread.\n  syntax:\n    content: public static System.Security.SecurityContext Capture ();\n    parameters: []\n    return:\n      type: System.Security.SecurityContext\n      description: The security context for the current thread.\n  overload: System.Security.SecurityContext.Capture*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityContext.CreateCopy\n  id: CreateCopy\n  parent: System.Security.SecurityContext\n  langs:\n  - csharp\n  name: CreateCopy()\n  nameWithType: SecurityContext.CreateCopy()\n  fullName: System.Security.SecurityContext.CreateCopy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Creates a copy of the current security context.\n  remarks: The current context must have been acquired through a capture or a copy operation. This method is useful for applying a captured <xref:System.Security.SecurityContext> to multiple threads.\n  syntax:\n    content: public System.Security.SecurityContext CreateCopy ();\n    parameters: []\n    return:\n      type: System.Security.SecurityContext\n      description: The security context for the current thread.\n  overload: System.Security.SecurityContext.CreateCopy*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current security context has been previously used, was marshaled across application domains, or was not acquired through the <xref:System.Security.SecurityContext.Capture*> method.\n  platform:\n  - net462\n- uid: System.Security.SecurityContext.Dispose\n  id: Dispose\n  parent: System.Security.SecurityContext\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SecurityContext.Dispose()\n  fullName: System.Security.SecurityContext.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Security.SecurityContext\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Security.SecurityContext>. The `Dispose` method leaves the <xref:System.Security.SecurityContext> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.SecurityContext> so the garbage collector can reclaim the memory that the <xref:System.Security.SecurityContext> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.SecurityContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.SecurityContext> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.SecurityContext.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityContext.IsFlowSuppressed\n  id: IsFlowSuppressed\n  parent: System.Security.SecurityContext\n  langs:\n  - csharp\n  name: IsFlowSuppressed()\n  nameWithType: SecurityContext.IsFlowSuppressed()\n  fullName: System.Security.SecurityContext.IsFlowSuppressed()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Determines whether the flow of the security context has been suppressed.\n  remarks: The IsFlowSuppressed method is used by infrastructure components to determine whether to transfer the <xref:System.Security.SecurityContext> information during asynchronous operations.\n  syntax:\n    content: public static bool IsFlowSuppressed ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the flow has been suppressed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.SecurityContext.IsFlowSuppressed*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed\n  id: IsWindowsIdentityFlowSuppressed\n  parent: System.Security.SecurityContext\n  langs:\n  - csharp\n  name: IsWindowsIdentityFlowSuppressed()\n  nameWithType: SecurityContext.IsWindowsIdentityFlowSuppressed()\n  fullName: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Determines whether the flow of the Windows identity portion of the current security context has been suppressed.\n  remarks: The IsWindowsIdentityFlowSuppressed method is used by infrastructure components to determine whether to transfer the Windows identity information when the <xref:System.Security.SecurityContext> migrates during asynchronous operations.\n  syntax:\n    content: public static bool IsWindowsIdentityFlowSuppressed ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the flow has been suppressed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityContext.RestoreFlow\n  id: RestoreFlow\n  parent: System.Security.SecurityContext\n  langs:\n  - csharp\n  name: RestoreFlow()\n  nameWithType: SecurityContext.RestoreFlow()\n  fullName: System.Security.SecurityContext.RestoreFlow()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Restores the flow of the security context across asynchronous threads.\n  remarks: The RestoreFlow method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName> method to reverse the effect of a prior <xref:System.Security.SecurityContext.SuppressFlow%2A> method call.\n  syntax:\n    content: public static void RestoreFlow ();\n    parameters: []\n  overload: System.Security.SecurityContext.RestoreFlow*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The security context is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string.\n  platform:\n  - net462\n- uid: System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)\n  id: Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)\n  parent: System.Security.SecurityContext\n  langs:\n  - csharp\n  name: Run(SecurityContext,ContextCallback,Object)\n  nameWithType: SecurityContext.Run(SecurityContext,ContextCallback,Object)\n  fullName: System.Security.SecurityContext.Run(SecurityContext,ContextCallback,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Runs the specified method in the specified security context on the current thread.\n  remarks: The security context for the current thread is returned to its previous state when the method call is complete.\n  example:\n  - \"The following code example shows how to use the Run method to execute a method in a specified security context.  \\n  \\n [!code-cs[System.Security.SecurityContext.Run#1](~/add/codesnippet/csharp/f32751be-87d3-46b4-a1da-_1.cs)]\\n [!code-vb[System.Security.SecurityContext.Run#1](~/add/codesnippet/visualbasic/f32751be-87d3-46b4-a1da-_1.vb)]\"\n  syntax:\n    content: public static void Run (System.Security.SecurityContext securityContext, System.Threading.ContextCallback callback, object state);\n    parameters:\n    - id: securityContext\n      type: System.Security.SecurityContext\n      description: The security context to set.\n    - id: callback\n      type: System.Threading.ContextCallback\n      description: The delegate that represents the method to run in the specified security context.\n    - id: state\n      type: System.Object\n      description: The object to pass to the callback method.\n  overload: System.Security.SecurityContext.Run*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>securityContext</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>securityContext</code> was not acquired through a capture operation.  \\n  \\n -or-  \\n  \\n <code>securityContext</code> has already been used as the argument to a Run method call.\"\n  platform:\n  - net462\n- uid: System.Security.SecurityContext.SuppressFlow\n  id: SuppressFlow\n  parent: System.Security.SecurityContext\n  langs:\n  - csharp\n  name: SuppressFlow()\n  nameWithType: SecurityContext.SuppressFlow()\n  fullName: System.Security.SecurityContext.SuppressFlow()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Suppresses the flow of the security context across asynchronous threads.\n  remarks: \"Use this method to suppress the flow of <xref:System.Security.SecurityContext> information on the current thread for asynchronous operations.  \\n  \\n The common language runtime (CLR) is only aware of the impersonation operations performed using managed code. The CLR has no knowledge of impersonation performed outside of managed code, such as platform invokes to unmanaged code that does the impersonation, or through calls to Win32 functions. To flow identity across asynchronous points you must use the managed <xref:System.Security.Principal.WindowsIdentity> and <xref:System.Security.Principal.WindowsImpersonationContext> methods.  \\n  \\n Use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to return the <xref:System.Security.SecurityContext> object to its previous state.  \\n  \\n This method is protected with a <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> for <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> permission. A fully trusted component can call this method to suppress the flow of the <xref:System.Security.SecurityContext> information during asynchronous calls. When the flow is suppressed, the <xref:System.Security.SecurityContext.Capture%2A> method returns `null`.\"\n  syntax:\n    content: public static System.Threading.AsyncFlowControl SuppressFlow ();\n    parameters: []\n    return:\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure for restoring the flow.\n  overload: System.Security.SecurityContext.SuppressFlow*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityContext.SuppressFlowWindowsIdentity\n  id: SuppressFlowWindowsIdentity\n  parent: System.Security.SecurityContext\n  langs:\n  - csharp\n  name: SuppressFlowWindowsIdentity()\n  nameWithType: SecurityContext.SuppressFlowWindowsIdentity()\n  fullName: System.Security.SecurityContext.SuppressFlowWindowsIdentity()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Suppresses the flow of the Windows identity portion of the current security context across asynchronous threads.\n  remarks: \"Use this method to suppress the flow of the Windows identity when the <xref:System.Security.SecurityContext> migrates across asynchronous threads.  \\n  \\n Use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to return the <xref:System.Security.SecurityContext> object to its previous state.  \\n  \\n> [!NOTE]\\n>  The common language runtime (CLR) is aware of impersonation operations performed using only managed code, not of impersonation performed outside of managed code, such as through platform invoke to unmanaged code or through direct calls to Win32 functions. Only managed <xref:System.Security.Principal.WindowsIdentity> objects can flow across asynchronous points, unless the `alwaysFlowImpersonationPolicy` element has been set to `true` (`<alwaysFlowImpersonationPolicy enabled=\\\"true\\\"/>`). Setting the `alwaysFlowImpersonationPolicy` element to `true` specifies that the Windows identity always flows across asynchronous points, regardless of how impersonation was performed. For more information about flowing unmanaged impersonation across asynchronous points, see [\\\\<alwaysFlowImpersonationPolicy> Element](../Topic/%3CalwaysFlowImpersonationPolicy%3E%20Element.md).\"\n  syntax:\n    content: public static System.Threading.AsyncFlowControl SuppressFlowWindowsIdentity ();\n    parameters: []\n    return:\n      type: System.Threading.AsyncFlowControl\n      description: A structure for restoring the flow.\n  overload: System.Security.SecurityContext.SuppressFlowWindowsIdentity*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Security.SecurityContext.Capture\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: Capture()\n  nameWithType: SecurityContext.Capture()\n  fullName: System.Security.SecurityContext.Capture()\n- uid: System.Security.SecurityContext\n  parent: System.Security\n  isExternal: false\n  name: SecurityContext\n  nameWithType: SecurityContext\n  fullName: System.Security.SecurityContext\n- uid: System.Security.SecurityContext.CreateCopy\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: CreateCopy()\n  nameWithType: SecurityContext.CreateCopy()\n  fullName: System.Security.SecurityContext.CreateCopy()\n- uid: System.Security.SecurityContext.Dispose\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: Dispose()\n  nameWithType: SecurityContext.Dispose()\n  fullName: System.Security.SecurityContext.Dispose()\n- uid: System.Security.SecurityContext.IsFlowSuppressed\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: IsFlowSuppressed()\n  nameWithType: SecurityContext.IsFlowSuppressed()\n  fullName: System.Security.SecurityContext.IsFlowSuppressed()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: IsWindowsIdentityFlowSuppressed()\n  nameWithType: SecurityContext.IsWindowsIdentityFlowSuppressed()\n  fullName: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed()\n- uid: System.Security.SecurityContext.RestoreFlow\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: RestoreFlow()\n  nameWithType: SecurityContext.RestoreFlow()\n  fullName: System.Security.SecurityContext.RestoreFlow()\n- uid: System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: Run(SecurityContext,ContextCallback,Object)\n  nameWithType: SecurityContext.Run(SecurityContext,ContextCallback,Object)\n  fullName: System.Security.SecurityContext.Run(SecurityContext,ContextCallback,Object)\n- uid: System.Threading.ContextCallback\n  parent: System.Threading\n  isExternal: true\n  name: ContextCallback\n  nameWithType: ContextCallback\n  fullName: System.Threading.ContextCallback\n- uid: System.Security.SecurityContext.SuppressFlow\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: SuppressFlow()\n  nameWithType: SecurityContext.SuppressFlow()\n  fullName: System.Security.SecurityContext.SuppressFlow()\n- uid: System.Threading.AsyncFlowControl\n  parent: System.Threading\n  isExternal: false\n  name: AsyncFlowControl\n  nameWithType: AsyncFlowControl\n  fullName: System.Threading.AsyncFlowControl\n- uid: System.Security.SecurityContext.SuppressFlowWindowsIdentity\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: SuppressFlowWindowsIdentity()\n  nameWithType: SecurityContext.SuppressFlowWindowsIdentity()\n  fullName: System.Security.SecurityContext.SuppressFlowWindowsIdentity()\n- uid: System.Security.SecurityContext.Capture*\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: Capture\n  nameWithType: SecurityContext.Capture\n- uid: System.Security.SecurityContext.CreateCopy*\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: CreateCopy\n  nameWithType: SecurityContext.CreateCopy\n- uid: System.Security.SecurityContext.Dispose*\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: Dispose\n  nameWithType: SecurityContext.Dispose\n- uid: System.Security.SecurityContext.IsFlowSuppressed*\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: IsFlowSuppressed\n  nameWithType: SecurityContext.IsFlowSuppressed\n- uid: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed*\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: IsWindowsIdentityFlowSuppressed\n  nameWithType: SecurityContext.IsWindowsIdentityFlowSuppressed\n- uid: System.Security.SecurityContext.RestoreFlow*\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: RestoreFlow\n  nameWithType: SecurityContext.RestoreFlow\n- uid: System.Security.SecurityContext.Run*\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: Run\n  nameWithType: SecurityContext.Run\n- uid: System.Security.SecurityContext.SuppressFlow*\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: SuppressFlow\n  nameWithType: SecurityContext.SuppressFlow\n- uid: System.Security.SecurityContext.SuppressFlowWindowsIdentity*\n  parent: System.Security.SecurityContext\n  isExternal: false\n  name: SuppressFlowWindowsIdentity\n  nameWithType: SecurityContext.SuppressFlowWindowsIdentity\n"}