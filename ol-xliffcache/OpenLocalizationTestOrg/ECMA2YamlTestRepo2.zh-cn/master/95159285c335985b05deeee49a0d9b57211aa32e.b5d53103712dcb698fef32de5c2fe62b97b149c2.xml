{"nodes":[{"pos":[4660,4757],"content":"Represents a collection of <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Represents a collection of <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects."},{"pos":[7523,7635],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptorCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> class."},{"pos":[7863,7991],"content":"An array of type <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides the properties for this collection.","needQuote":true,"needEscape":true,"source":"An array of type <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> that provides the properties for this collection."},{"pos":[8763,8906],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptorCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, which is optionally read-only.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> class, which is optionally read-only."},{"pos":[9149,9277],"content":"An array of type <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides the properties for this collection.","needQuote":true,"needEscape":true,"source":"An array of type <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> that provides the properties for this collection."},{"pos":[9343,9457],"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, specifies that the collection cannot be modified.","needQuote":true,"needEscape":true,"source":"If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, specifies that the collection cannot be modified."},{"pos":[10079,10178],"content":"Adds the specified <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the collection.","needQuote":true,"needEscape":true,"source":"Adds the specified <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to the collection."},{"pos":[10371,10462],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to add to the collection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to add to the collection."},{"pos":[10519,10631],"content":"The index of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that was added to the collection.","needQuote":true,"needEscape":true,"source":"The index of the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> that was added to the collection."},{"pos":[10816,10844],"content":"The collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection is read-only.","pos":[0,28]}]},{"pos":[11251,11353],"content":"Removes all <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects from the collection.","needQuote":true,"needEscape":true,"source":"Removes all <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects from the collection."},{"pos":[11604,11632],"content":"The collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection is read-only.","pos":[0,28]}]},{"pos":[12192,12304],"content":"Returns whether the collection contains the given <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns whether the collection contains the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>."},{"pos":[12503,12595],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to find in the collection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to find in the collection."},{"pos":[12654,12889],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the collection contains the given <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection contains the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13478,13559],"content":"Copies the entire collection to an array, starting at the specified index number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the entire collection to an array, starting at the specified index number.","pos":[0,81]}]},{"pos":[13704,13824],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to copy elements of the collection to.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects to copy elements of the collection to."},{"pos":[13885,13944],"content":"The index of the <ph id=\"ph1\">`array`</ph> parameter at which copying begins.","needQuote":true,"needEscape":true,"source":"The index of the `array` parameter at which copying begins."},{"pos":[14435,14493],"content":"Gets the number of property descriptors in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of property descriptors in the collection.","pos":[0,58]}]},{"pos":[14505,14710],"content":"You can use the Count property to set the limits of a loop that iterates through a collection of objects. Because the collection is zero-based, be sure to use `Count - 1` as the upper boundary of the loop.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can use the Count property to set the limits of a loop that iterates through a collection of objects.","pos":[0,105]},{"content":"Because the collection is zero-based, be sure to use <ph id=\"ph1\">`Count - 1`</ph> as the upper boundary of the loop.","pos":[106,205],"source":" Because the collection is zero-based, be sure to use `Count - 1` as the upper boundary of the loop."}]},{"pos":[15396,15449],"content":"The number of property descriptors in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of property descriptors in the collection.","pos":[0,53]}]},{"pos":[15936,16117],"content":"Specifies an empty collection that you can use instead of creating a new one with no items. This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies an empty collection that you can use instead of creating a new one with no items.","pos":[0,91]},{"content":"This <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> field is read-only.","pos":[92,181],"source":" This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only."}]},{"pos":[16316,16328],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16849,16999],"content":"Returns the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified name, using a Boolean to indicate whether to ignore case.","needQuote":true,"needEscape":true,"source":"Returns the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> with the specified name, using a Boolean to indicate whether to ignore case."},{"pos":[17872,17980],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to return from the collection.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to return from the collection."},{"pos":[18048,18236],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if you want to ignore the case of the property name; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if you want to ignore the case of the property name; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18321,18505],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified name, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the property does not exist.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> with the specified name, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the property does not exist."},{"pos":[19038,19075],"content":"Returns an enumerator for this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator for this class.","pos":[0,37]}]},{"pos":[19933,19993],"content":"An enumerator of type <xref:System.Collections.IEnumerator>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator of type &lt;xref:System.Collections.IEnumerator&gt;.","pos":[0,60],"source":"An enumerator of type <xref:System.Collections.IEnumerator>."}]},{"pos":[20643,20736],"content":"Returns the index of the given <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the index of the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>."},{"pos":[20933,21022],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to return the index of.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to return the index of."},{"pos":[21079,21164],"content":"The index of the given <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The index of the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>."},{"pos":[21847,21966],"content":"Adds the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the collection at the specified index number.","needQuote":true,"needEscape":true,"source":"Adds the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to the collection at the specified index number."},{"pos":[22146,22212],"content":"The index at which to add the <ph id=\"ph1\">`value`</ph> parameter to the collection.","needQuote":true,"needEscape":true,"source":"The index at which to add the `value` parameter to the collection."},{"pos":[22301,22392],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to add to the collection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to add to the collection."},{"pos":[22580,22608],"content":"The collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection is read-only.","pos":[0,28]}]},{"pos":[23137,23231],"content":"Sorts the members of this collection, using the specified <xref:System.Collections.IComparer>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sorts the members of this collection, using the specified &lt;xref:System.Collections.IComparer&gt;.","pos":[0,94],"source":"Sorts the members of this collection, using the specified <xref:System.Collections.IComparer>."}]},{"pos":[23415,23534],"content":"A comparer to use to sort the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects in this collection.","needQuote":true,"needEscape":true,"source":"A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection."},{"pos":[24128,24284],"content":"Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.","pos":[0,156],"nodes":[{"content":"Sorts the members of this collection.","pos":[0,37]},{"content":"The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.","pos":[38,156]}]}]},{"pos":[25191,25342],"content":"An array of strings describing the order in which to sort the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects in this collection.","needQuote":true,"needEscape":true,"source":"An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection."},{"pos":[25883,25992],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index number.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> at the specified index number."},{"pos":[26004,26334],"content":"The index number is zero-based. Therefore, you must subtract 1 from the numerical position of a particular <xref:System.ComponentModel.PropertyDescriptor> to access that <xref:System.ComponentModel.PropertyDescriptor>. For example, to get the third <xref:System.ComponentModel.PropertyDescriptor>, you need to specify `myColl[2]`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index number is zero-based.","pos":[0,31]},{"content":"Therefore, you must subtract 1 from the numerical position of a particular &lt;xref:System.ComponentModel.PropertyDescriptor&gt; to access that &lt;xref:System.ComponentModel.PropertyDescriptor&gt;.","pos":[32,218],"source":" Therefore, you must subtract 1 from the numerical position of a particular <xref:System.ComponentModel.PropertyDescriptor> to access that <xref:System.ComponentModel.PropertyDescriptor>."},{"content":"For example, to get the third &lt;xref:System.ComponentModel.PropertyDescriptor&gt;, you need to specify <ph id=\"ph1\">`myColl[2]`</ph>.","pos":[219,330],"source":" For example, to get the third <xref:System.ComponentModel.PropertyDescriptor>, you need to specify `myColl[2]`."}]},{"pos":[27277,27381],"content":"The zero-based index of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to get or set.","needQuote":true,"needEscape":true,"source":"The zero-based index of the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to get or set."},{"pos":[27466,27564],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified index number.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> with the specified index number."},{"pos":[27756,27819],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid index for Item.","needQuote":true,"needEscape":true,"source":"The <code>index</code> parameter is not a valid index for Item."},{"pos":[28271,28374],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified name.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> with the specified name."},{"pos":[28386,28594],"content":"The <xref:System.ComponentModel.PropertyDescriptorCollection.Item%2A> property is case-sensitive when searching for names. That is, the names \"Pname\" and \"pname\" are considered to be two different properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.ComponentModel.PropertyDescriptorCollection.Item%2A> property is case-sensitive when searching for names. That is, the names \"Pname\" and \"pname\" are considered to be two different properties.","pos":[0,208],"nodes":[{"content":"The &lt;xref:System.ComponentModel.PropertyDescriptorCollection.Item%2A&gt; property is case-sensitive when searching for names.","pos":[0,122],"source":"The <xref:System.ComponentModel.PropertyDescriptorCollection.Item%2A> property is case-sensitive when searching for names."},{"content":"That is, the names \"Pname\" and \"pname\" are considered to be two different properties.","pos":[123,208]}]}]},{"pos":[29480,29585],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to get from the collection.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to get from the collection."},{"pos":[29670,29856],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified name, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the property does not exist.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> with the specified name, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the property does not exist."},{"pos":[30492,30596],"content":"Removes the specified <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the collection.","needQuote":true,"needEscape":true,"source":"Removes the specified <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> from the collection."},{"pos":[30793,30889],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to remove from the collection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to remove from the collection."},{"pos":[31077,31105],"content":"The collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection is read-only.","pos":[0,28]}]},{"pos":[31570,31687],"content":"Removes the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index from the collection.","needQuote":true,"needEscape":true,"source":"Removes the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> at the specified index from the collection."},{"pos":[31821,31930],"content":"The index of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to remove from the collection.","needQuote":true,"needEscape":true,"source":"The index of the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to remove from the collection."},{"pos":[32120,32148],"content":"The collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection is read-only.","pos":[0,28]}]},{"pos":[32550,32662],"content":"Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.","pos":[0,112]}]},{"pos":[32874,33047],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptorCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the sorted <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects."},{"pos":[33622,33716],"content":"Sorts the members of this collection, using the specified <xref:System.Collections.IComparer>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sorts the members of this collection, using the specified &lt;xref:System.Collections.IComparer&gt;.","pos":[0,94],"source":"Sorts the members of this collection, using the specified <xref:System.Collections.IComparer>."}]},{"pos":[33947,34066],"content":"A comparer to use to sort the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects in this collection.","needQuote":true,"needEscape":true,"source":"A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection."},{"pos":[34161,34334],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptorCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the sorted <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects."},{"pos":[34880,35036],"content":"Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.","pos":[0,156],"nodes":[{"content":"Sorts the members of this collection.","pos":[0,37]},{"content":"The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.","pos":[38,156]}]}]},{"pos":[35960,36111],"content":"An array of strings describing the order in which to sort the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects in this collection.","needQuote":true,"needEscape":true,"source":"An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection."},{"pos":[36206,36379],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptorCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the sorted <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects."},{"pos":[37013,37166],"content":"Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified <xref:System.Collections.IComparer>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified <xref:System.Collections.IComparer>.","pos":[0,153],"nodes":[{"content":"Sorts the members of this collection.","pos":[0,37]},{"content":"The specified order is applied first, followed by the sort using the specified &lt;xref:System.Collections.IComparer&gt;.","pos":[38,153],"source":" The specified order is applied first, followed by the sort using the specified <xref:System.Collections.IComparer>."}]}]},{"pos":[38123,38274],"content":"An array of strings describing the order in which to sort the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects in this collection.","needQuote":true,"needEscape":true,"source":"An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection."},{"pos":[38354,38473],"content":"A comparer to use to sort the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects in this collection.","needQuote":true,"needEscape":true,"source":"A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection."},{"pos":[38568,38741],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptorCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the sorted <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects."},{"pos":[39399,39455],"content":"Gets the number of elements contained in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of elements contained in the collection.","pos":[0,56]}]},{"pos":[39585,39636],"content":"The number of elements contained in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of elements contained in the collection.","pos":[0,51]}]},{"pos":[40371,40458],"content":"Gets a value indicating whether access to the collection is synchronized (thread safe).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether access to the collection is synchronized (thread safe).","pos":[0,87]}]},{"pos":[40600,40794],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access to the collection is synchronized (thread safe); otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the collection is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[41508,41580],"content":"Gets an object that can be used to synchronize access to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that can be used to synchronize access to the collection.","pos":[0,72]}]},{"pos":[41717,41784],"content":"An object that can be used to synchronize access to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that can be used to synchronize access to the collection.","pos":[0,67]}]},{"pos":[42568,42661],"content":"Adds an element with the provided key and value to the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an element with the provided key and value to the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,93],"source":"Adds an element with the provided key and value to the <xref:System.Collections.IDictionary>."}]},{"pos":[42809,42874],"content":"The <xref:System.Object> to use as the key of the element to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to use as the key of the element to add.","pos":[0,65],"source":"The <xref:System.Object> to use as the key of the element to add."}]},{"pos":[42936,43003],"content":"The <xref:System.Object> to use as the value of the element to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to use as the value of the element to add.","pos":[0,67],"source":"The <xref:System.Object> to use as the value of the element to add."}]},{"pos":[43219,43247],"content":"The collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection is read-only.","pos":[0,28]}]},{"pos":[43342,43425],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[44001,44069],"content":"Removes all elements from the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes all elements from the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,68],"source":"Removes all elements from the <xref:System.Collections.IDictionary>."}]},{"pos":[44895,44999],"content":"Determines whether the <xref:System.Collections.IDictionary> contains an element with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the &lt;xref:System.Collections.IDictionary&gt; contains an element with the specified key.","pos":[0,104],"source":"Determines whether the <xref:System.Collections.IDictionary> contains an element with the specified key."}]},{"pos":[45138,45201],"content":"The key to locate in the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key to locate in the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,63],"source":"The key to locate in the <xref:System.Collections.IDictionary>."}]},{"pos":[45260,45474],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Collections.IDictionary&gt; contains an element with the key; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> contains an element with the key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[46211,46248],"content":"Returns an enumerator for this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator for this class.","pos":[0,37]}]},{"pos":[47114,47174],"content":"An enumerator of type <xref:System.Collections.IEnumerator>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator of type &lt;xref:System.Collections.IEnumerator&gt;.","pos":[0,60],"source":"An enumerator of type <xref:System.Collections.IEnumerator>."}]},{"pos":[47902,47993],"content":"Gets a value indicating whether the <xref:System.Collections.IDictionary> has a fixed size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the &lt;xref:System.Collections.IDictionary&gt; has a fixed size.","pos":[0,91],"source":"Gets a value indicating whether the <xref:System.Collections.IDictionary> has a fixed size."}]},{"pos":[48132,48330],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Collections.IDictionary&gt; has a fixed size; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[49051,49138],"content":"Gets a value indicating whether the <xref:System.Collections.IDictionary> is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the &lt;xref:System.Collections.IDictionary&gt; is read-only.","pos":[0,87],"source":"Gets a value indicating whether the <xref:System.Collections.IDictionary> is read-only."}]},{"pos":[49276,49470],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Collections.IDictionary&gt; is read-only; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[50214,50262],"content":"Gets or sets the element with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the element with the specified key.","pos":[0,48]}]},{"pos":[50430,50467],"content":"The key of the element to get or set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the element to get or set.","pos":[0,37]}]},{"pos":[50525,50560],"content":"The element with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element with the specified key.","pos":[0,35]}]},{"pos":[51244,51355],"content":"Gets an <xref:System.Collections.ICollection> containing the keys of the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an &lt;xref:System.Collections.ICollection&gt; containing the keys of the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,111],"source":"Gets an <xref:System.Collections.ICollection> containing the keys of the <xref:System.Collections.IDictionary>."}]},{"pos":[51529,51635],"content":"An <xref:System.Collections.ICollection> containing the keys of the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.ICollection&gt; containing the keys of the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,106],"source":"An <xref:System.Collections.ICollection> containing the keys of the <xref:System.Collections.IDictionary>."}]},{"pos":[52381,52471],"content":"Removes the element with the specified key from the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the element with the specified key from the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,90],"source":"Removes the element with the specified key from the <xref:System.Collections.IDictionary>."}]},{"pos":[52608,52641],"content":"The key of the element to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the element to remove.","pos":[0,33]}]},{"pos":[53337,53450],"content":"Gets an <xref:System.Collections.ICollection> containing the values in the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an &lt;xref:System.Collections.ICollection&gt; containing the values in the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,113],"source":"Gets an <xref:System.Collections.ICollection> containing the values in the <xref:System.Collections.IDictionary>."}]},{"pos":[53626,53734],"content":"An <xref:System.Collections.ICollection> containing the values in the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.ICollection&gt; containing the values in the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,108],"source":"An <xref:System.Collections.ICollection> containing the values in the <xref:System.Collections.IDictionary>."}]},{"pos":[54469,54564],"content":"Returns an <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an &lt;xref:System.Collections.IEnumerator&gt; for the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,95],"source":"Returns an <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>."}]},{"pos":[54742,54829],"content":"An <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerator&gt; for the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,87],"source":"An <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>."}]},{"pos":[55539,55591],"content":"Adds an item to the <xref:System.Collections.IList>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an item to the &lt;xref:System.Collections.IList&gt;.","pos":[0,52],"source":"Adds an item to the <xref:System.Collections.IList>."}]},{"pos":[55722,55756],"content":"The item to add to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The item to add to the collection.","pos":[0,34]}]},{"pos":[55813,55866],"content":"The position into which the new element was inserted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position into which the new element was inserted.","pos":[0,53]}]},{"pos":[56522,56560],"content":"Removes all items from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes all items from the collection.","pos":[0,38]}]},{"pos":[56835,56863],"content":"The collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection is read-only.","pos":[0,28]}]},{"pos":[57472,57532],"content":"Determines whether the collection contains a specific value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the collection contains a specific value.","pos":[0,60]}]},{"pos":[57669,57706],"content":"The item to locate in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The item to locate in the collection.","pos":[0,37]}]},{"pos":[57765,57940],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the item is found in the collection; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the item is found in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[58659,58718],"content":"Determines the index of a specified item in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines the index of a specified item in the collection.","pos":[0,59]}]},{"pos":[58853,58890],"content":"The item to locate in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The item to locate in the collection.","pos":[0,37]}]},{"pos":[58947,59014],"content":"The index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if found in the list, otherwise -1.","needQuote":true,"needEscape":true,"source":"The index of <code>value</code> if found in the list, otherwise -1."},{"pos":[59771,59828],"content":"Inserts an item into the collection at a specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Inserts an item into the collection at a specified index.","pos":[0,57]}]},{"pos":[59973,60030],"content":"The zero-based index at which <ph id=\"ph1\">`value`</ph> should be inserted.","needQuote":true,"needEscape":true,"source":"The zero-based index at which `value` should be inserted."},{"pos":[60092,60131],"content":"The item to insert into the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The item to insert into the collection.","pos":[0,39]}]},{"pos":[60344,60372],"content":"The collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection is read-only.","pos":[0,28]}]},{"pos":[60944,61008],"content":"Gets a value indicating whether the collection has a fixed size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the collection has a fixed size.","pos":[0,64]}]},{"pos":[61141,61312],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the collection has a fixed size; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[61997,62057],"content":"Gets a value indicating whether the collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the collection is read-only.","pos":[0,60]}]},{"pos":[62189,62356],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the collection is read-only; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[63059,63121],"content":"Gets or sets an item from the collection at a specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an item from the collection at a specified index.","pos":[0,62]}]},{"pos":[63283,63330],"content":"The zero-based index of the item to get or set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the item to get or set.","pos":[0,47]}]},{"pos":[63388,63423],"content":"The element at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element at the specified index.","pos":[0,35]}]},{"pos":[63634,63662],"content":"The collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection is read-only.","pos":[0,28]}]},{"pos":[63757,63847],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>value</code> is not a <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>."},{"pos":[63957,64122],"content":"<code>index</code> is less than 0.       -or-       <code>index</code> is equal to or greater than <xref:System.ComponentModel.EventDescriptorCollection.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","pos":[0,34],"source":"<code>index</code> is less than 0."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref:System.ComponentModel.EventDescriptorCollection.Count*&gt;</ph>.","pos":[41,161],"source":"       -or-       <code>index</code> is equal to or greater than <xref:System.ComponentModel.EventDescriptorCollection.Count*>."}]},{"pos":[64722,64792],"content":"Removes the first occurrence of a specified value from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the first occurrence of a specified value from the collection.","pos":[0,70]}]},{"pos":[64927,64966],"content":"The item to remove from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The item to remove from the collection.","pos":[0,39]}]},{"pos":[65179,65207],"content":"The collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection is read-only.","pos":[0,28]}]},{"pos":[65811,65851],"content":"Removes the item at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the item at the specified index.","pos":[0,40]}]},{"pos":[65984,66027],"content":"The zero-based index of the item to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the item to remove.","pos":[0,43]}]},{"pos":[66242,66270],"content":"The collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection is read-only.","pos":[0,28]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.PropertyDescriptorCollection\n  id: PropertyDescriptorCollection\n  children:\n  - System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])\n  - System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)\n  - System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.PropertyDescriptorCollection.Clear\n  - System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)\n  - System.ComponentModel.PropertyDescriptorCollection.Count\n  - System.ComponentModel.PropertyDescriptorCollection.Empty\n  - System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)\n  - System.ComponentModel.PropertyDescriptorCollection.GetEnumerator\n  - System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)\n  - System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])\n  - System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\n  - System.ComponentModel.PropertyDescriptorCollection.Item(System.String)\n  - System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)\n  - System.ComponentModel.PropertyDescriptorCollection.Sort\n  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)\n  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])\n  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)\n  langs:\n  - csharp\n  name: PropertyDescriptorCollection\n  nameWithType: PropertyDescriptorCollection\n  fullName: System.ComponentModel.PropertyDescriptorCollection\n  type: Class\n  summary: Represents a collection of <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects.\n  remarks: \"PropertyDescriptorCollection is read-only; it does not implement methods that add or remove properties. You must inherit from this class to implement these methods.  \\n  \\n Using the properties available in the PropertyDescriptorCollection class, you can query the collection about its contents. Use the <xref:System.ComponentModel.PropertyDescriptorCollection.Count%2A> property to determine the number of elements in the collection. Use the [Item\\\\<xref:System.ComponentModel.PropertyDescriptorCollection.Item%2A> property to get a specific property by index number or by name.  \\n  \\n In addition to properties, you can use the <xref:System.ComponentModel.PropertyDescriptorCollection.Find%2A> method to get a description of the property with the specified name from the collection.\"\n  example:\n  - \"The following code example creates a new PropertyDescriptorCollection using the properties on `button1`. It requires that `button1` has been instantiated on a form.  \\n  \\n [!code-cs[Classic PropertyDescriptorCollection Example#1](~/add/codesnippet/csharp/t-system.componentmodel._39_1.cs)]\\n [!code-cpp[Classic PropertyDescriptorCollection Example#1](~/add/codesnippet/cpp/t-system.componentmodel._39_1.cpp)]\\n [!code-vb[Classic PropertyDescriptorCollection Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._39_1.vb)]  \\n  \\n The next example prints all the properties on a button in a text box. It requires that `button1` and `textBox1` have been instantiated on a form.  \\n  \\n [!code-cs[Classic PropertyDescriptorCollection Example#2](~/add/codesnippet/csharp/t-system.componentmodel._39_2.cs)]\\n [!code-cpp[Classic PropertyDescriptorCollection Example#2](~/add/codesnippet/cpp/t-system.componentmodel._39_2.cpp)]\\n [!code-vb[Classic PropertyDescriptorCollection Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._39_2.vb)]\"\n  syntax:\n    content: 'public class PropertyDescriptorCollection : System.Collections.IDictionary, System.Collections.IList'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  - System.Collections.IList\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])\n  id: '#ctor(System.ComponentModel.PropertyDescriptor[])'\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: PropertyDescriptorCollection(PropertyDescriptor[])\n  nameWithType: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[])\n  fullName: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[])\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> class.\n  syntax:\n    content: public PropertyDescriptorCollection (System.ComponentModel.PropertyDescriptor[] properties);\n    parameters:\n    - id: properties\n      type: System.ComponentModel.PropertyDescriptor[]\n      description: An array of type <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> that provides the properties for this collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)\n  id: '#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)'\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: PropertyDescriptorCollection(PropertyDescriptor[],Boolean)\n  nameWithType: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[],Boolean)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[],Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> class, which is optionally read-only.\n  syntax:\n    content: public PropertyDescriptorCollection (System.ComponentModel.PropertyDescriptor[] properties, bool readOnly);\n    parameters:\n    - id: properties\n      type: System.ComponentModel.PropertyDescriptor[]\n      description: An array of type <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> that provides the properties for this collection.\n    - id: readOnly\n      type: System.Boolean\n      description: If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, specifies that the collection cannot be modified.\n  overload: System.ComponentModel.PropertyDescriptorCollection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)\n  id: Add(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Add(PropertyDescriptor)\n  nameWithType: PropertyDescriptorCollection.Add(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Add(PropertyDescriptor)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Adds the specified <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to the collection.\n  syntax:\n    content: public int Add (System.ComponentModel.PropertyDescriptor value);\n    parameters:\n    - id: value\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to add to the collection.\n    return:\n      type: System.Int32\n      description: The index of the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> that was added to the collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Add*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection is read-only.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Clear\n  id: Clear\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: PropertyDescriptorCollection.Clear()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Clear()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Removes all <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects from the collection.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.ComponentModel.PropertyDescriptorCollection.Clear*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection is read-only.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)\n  id: Contains(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Contains(PropertyDescriptor)\n  nameWithType: PropertyDescriptorCollection.Contains(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Contains(PropertyDescriptor)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns whether the collection contains the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>.\n  syntax:\n    content: public bool Contains (System.ComponentModel.PropertyDescriptor value);\n    parameters:\n    - id: value\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to find in the collection.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection contains the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: PropertyDescriptorCollection.CopyTo(Array,Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Copies the entire collection to an array, starting at the specified index number.\n  syntax:\n    content: public void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: An array of <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects to copy elements of the collection to.\n    - id: index\n      type: System.Int32\n      description: The index of the `array` parameter at which copying begins.\n  overload: System.ComponentModel.PropertyDescriptorCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Count\n  id: Count\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: PropertyDescriptorCollection.Count\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Count\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the number of property descriptors in the collection.\n  remarks: You can use the Count property to set the limits of a loop that iterates through a collection of objects. Because the collection is zero-based, be sure to use `Count - 1` as the upper boundary of the loop.\n  example:\n  - \"The following code example uses the Count property to print the number of properties on `button1`. It requires that `button1` and `textBox1` have been instantiated on a form.  \\n  \\n [!code-vb[Classic PropertyDescriptorCollection.Count Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._29_1.vb)]\\n [!code-cpp[Classic PropertyDescriptorCollection.Count Example#1](~/add/codesnippet/cpp/p-system.componentmodel._29_1.cpp)]\\n [!code-cs[Classic PropertyDescriptorCollection.Count Example#1](~/add/codesnippet/csharp/p-system.componentmodel._29_1.cs)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of property descriptors in the collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Empty\n  id: Empty\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Empty\n  nameWithType: PropertyDescriptorCollection.Empty\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Empty\n  type: Field\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Specifies an empty collection that you can use instead of creating a new one with no items. This <xref uid=\"langword_csharp_static\" name=\"static\" href=\"\"></xref> field is read-only.\n  syntax:\n    content: public static readonly System.ComponentModel.PropertyDescriptorCollection Empty;\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)\n  id: Find(System.String,System.Boolean)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Find(String,Boolean)\n  nameWithType: PropertyDescriptorCollection.Find(String,Boolean)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Find(String,Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> with the specified name, using a Boolean to indicate whether to ignore case.\n  remarks: ''\n  example:\n  - \"The following code example finds a specific <xref:System.ComponentModel.PropertyDescriptor>. It prints the type of component for this <xref:System.ComponentModel.PropertyDescriptor> in a text box. It requires that `button1` and `textBox1` have been instantiated on a form.  \\n  \\n [!code-cs[Classic PropertyDescriptorCollection.Find Example#1](~/add/codesnippet/csharp/9cbbd46a-64d4-4a04-8109-_1.cs)]\\n [!code-cpp[Classic PropertyDescriptorCollection.Find Example#1](~/add/codesnippet/cpp/9cbbd46a-64d4-4a04-8109-_1.cpp)]\\n [!code-vb[Classic PropertyDescriptorCollection.Find Example#1](~/add/codesnippet/visualbasic/9cbbd46a-64d4-4a04-8109-_1.vb)]\"\n  syntax:\n    content: public virtual System.ComponentModel.PropertyDescriptor Find (string name, bool ignoreCase);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to return from the collection.\n    - id: ignoreCase\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if you want to ignore the case of the property name; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.ComponentModel.PropertyDescriptor\n      description: A <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> with the specified name, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the property does not exist.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Find*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: PropertyDescriptorCollection.GetEnumerator()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns an enumerator for this class.\n  remarks: ''\n  example:\n  - \"The following code example gets an enumerator for the properties on `button1`. It uses the enumerator to print the names of the properties in the collection. It requires that `button1` and `textBox1` have been instantiated on a form.  \\n  \\n [!code-cpp[Classic PropertyDescriptorCollection.GetEnumerator Example#1](~/add/codesnippet/cpp/m-system.componentmodel._32_1.cpp)]\\n [!code-cs[Classic PropertyDescriptorCollection.GetEnumerator Example#1](~/add/codesnippet/csharp/m-system.componentmodel._32_1.cs)]\\n [!code-vb[Classic PropertyDescriptorCollection.GetEnumerator Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._32_1.vb)]\"\n  syntax:\n    content: public virtual System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator of type <xref:System.Collections.IEnumerator>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)\n  id: IndexOf(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: IndexOf(PropertyDescriptor)\n  nameWithType: PropertyDescriptorCollection.IndexOf(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.IndexOf(PropertyDescriptor)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns the index of the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>.\n  syntax:\n    content: public int IndexOf (System.ComponentModel.PropertyDescriptor value);\n    parameters:\n    - id: value\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to return the index of.\n    return:\n      type: System.Int32\n      description: The index of the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)\n  id: Insert(System.Int32,System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Insert(Int32,PropertyDescriptor)\n  nameWithType: PropertyDescriptorCollection.Insert(Int32,PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Insert(Int32,PropertyDescriptor)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Adds the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to the collection at the specified index number.\n  syntax:\n    content: public void Insert (int index, System.ComponentModel.PropertyDescriptor value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The index at which to add the `value` parameter to the collection.\n    - id: value\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to add to the collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Insert*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection is read-only.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)\n  id: InternalSort(System.Collections.IComparer)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: InternalSort(IComparer)\n  nameWithType: PropertyDescriptorCollection.InternalSort(IComparer)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.InternalSort(IComparer)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Sorts the members of this collection, using the specified <xref:System.Collections.IComparer>.\n  syntax:\n    content: protected void InternalSort (System.Collections.IComparer sorter);\n    parameters:\n    - id: sorter\n      type: System.Collections.IComparer\n      description: A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.InternalSort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])\n  id: InternalSort(System.String[])\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: InternalSort(String[])\n  nameWithType: PropertyDescriptorCollection.InternalSort(String[])\n  fullName: System.ComponentModel.PropertyDescriptorCollection.InternalSort(String[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.\n  remarks: ''\n  example:\n  - \"The following code example defines the sort order for the InternalSort method. If the <xref:System.ComponentModel.PropertyDescriptorCollection> contains four <xref:System.ComponentModel.PropertyDescriptor> objects with the names `A`, `B`, `C`, and `D`, the properties of `myNewColl` would be sorted in the order `D`, `B`, `A`, and `C`.  \\n  \\n [!code-cs[Classic EventDescriptorCollection.InternalSort Example#1](~/add/codesnippet/csharp/362da624-49d1-447a-bc3b-_1.cs)]\\n [!code-cpp[Classic EventDescriptorCollection.InternalSort Example#1](~/add/codesnippet/cpp/362da624-49d1-447a-bc3b-_1.cpp)]\\n [!code-vb[Classic EventDescriptorCollection.InternalSort Example#1](~/add/codesnippet/visualbasic/362da624-49d1-447a-bc3b-_1.vb)]\"\n  syntax:\n    content: protected void InternalSort (string[] names);\n    parameters:\n    - id: names\n      type: System.String[]\n      description: An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.InternalSort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: PropertyDescriptorCollection.Item(Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets or sets the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> at the specified index number.\n  remarks: The index number is zero-based. Therefore, you must subtract 1 from the numerical position of a particular <xref:System.ComponentModel.PropertyDescriptor> to access that <xref:System.ComponentModel.PropertyDescriptor>. For example, to get the third <xref:System.ComponentModel.PropertyDescriptor>, you need to specify `myColl[2]`.\n  example:\n  - \"The following code example uses the Item property to print the name of the <xref:System.ComponentModel.PropertyDescriptor> specified by the index number in a text box. Because the index number is zero-based, this example prints the name of the second <xref:System.ComponentModel.PropertyDescriptor>. It requires that `button1` has been instantiated on a form.  \\n  \\n [!code-cpp[Classic PropertyDescriptorCollection.this Example#1](~/add/codesnippet/cpp/p-system.componentmodel._18_1.cpp)]\\n [!code-cs[Classic PropertyDescriptorCollection.this Example#1](~/add/codesnippet/csharp/p-system.componentmodel._18_1.cs)]\\n [!code-vb[Classic PropertyDescriptorCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._18_1.vb)]\"\n  syntax:\n    content: public virtual System.ComponentModel.PropertyDescriptor this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to get or set.\n    return:\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> with the specified index number.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Item*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The <code>index</code> parameter is not a valid index for Item.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: PropertyDescriptorCollection.Item(String)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Item(String)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets or sets the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> with the specified name.\n  remarks: The <xref:System.ComponentModel.PropertyDescriptorCollection.Item%2A> property is case-sensitive when searching for names. That is, the names \"Pname\" and \"pname\" are considered to be two different properties.\n  example:\n  - \"The following code example uses the <xref:System.ComponentModel.PropertyDescriptorCollection.Item%2A> property to print the type of component for the <xref:System.ComponentModel.PropertyDescriptor> specified by the index. It requires that `button1` and `textBox1` have been instantiated on a form.  \\n  \\n [!code-cpp[Classic PropertyDescriptorCollection.this1 Example#1](~/add/codesnippet/cpp/p-system.componentmodel._19_1.cpp)]\\n [!code-vb[Classic PropertyDescriptorCollection.this1 Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._19_1.vb)]\\n [!code-cs[Classic PropertyDescriptorCollection.this1 Example#1](~/add/codesnippet/csharp/p-system.componentmodel._19_1.cs)]\"\n  syntax:\n    content: public virtual System.ComponentModel.PropertyDescriptor this[string name] { get; }\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to get from the collection.\n    return:\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> with the specified name, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the property does not exist.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)\n  id: Remove(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Remove(PropertyDescriptor)\n  nameWithType: PropertyDescriptorCollection.Remove(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Remove(PropertyDescriptor)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Removes the specified <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> from the collection.\n  syntax:\n    content: public void Remove (System.ComponentModel.PropertyDescriptor value);\n    parameters:\n    - id: value\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to remove from the collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Remove*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection is read-only.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: PropertyDescriptorCollection.RemoveAt(Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Removes the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> at the specified index from the collection.\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The index of the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to remove from the collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.RemoveAt*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection is read-only.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort\n  id: Sort\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Sort()\n  nameWithType: PropertyDescriptorCollection.Sort()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.\n  syntax:\n    content: public virtual System.ComponentModel.PropertyDescriptorCollection Sort ();\n    parameters: []\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Sort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)\n  id: Sort(System.Collections.IComparer)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Sort(IComparer)\n  nameWithType: PropertyDescriptorCollection.Sort(IComparer)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(IComparer)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Sorts the members of this collection, using the specified <xref:System.Collections.IComparer>.\n  syntax:\n    content: public virtual System.ComponentModel.PropertyDescriptorCollection Sort (System.Collections.IComparer comparer);\n    parameters:\n    - id: comparer\n      type: System.Collections.IComparer\n      description: A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection.\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Sort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])\n  id: Sort(System.String[])\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Sort(String[])\n  nameWithType: PropertyDescriptorCollection.Sort(String[])\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(String[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.\n  remarks: ''\n  example:\n  - \"The following code example defines the sort order for the Sort method. If the <xref:System.ComponentModel.PropertyDescriptorCollection> contains four <xref:System.ComponentModel.PropertyDescriptor> objects with the names `A`, `B`, `C`, and `D`, the properties of `myNewColl` would be sorted in the order `D`, `B`, `A`, and `C`.  \\n  \\n [!code-cs[classic eventdescriptorcollection.sort example#1](~/add/codesnippet/csharp/m-system.componentmodel._8_1.cs)]\\n [!code-vb[classic eventdescriptorcollection.sort example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._8_1.vb)]\\n [!code-cpp[classic eventdescriptorcollection.sort example#1](~/add/codesnippet/cpp/m-system.componentmodel._8_1.cpp)]\"\n  syntax:\n    content: public virtual System.ComponentModel.PropertyDescriptorCollection Sort (string[] names);\n    parameters:\n    - id: names\n      type: System.String[]\n      description: An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection.\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Sort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)\n  id: Sort(System.String[],System.Collections.IComparer)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: Sort(String[],IComparer)\n  nameWithType: PropertyDescriptorCollection.Sort(String[],IComparer)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(String[],IComparer)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified <xref:System.Collections.IComparer>.\n  remarks: ''\n  example:\n  - \"The following code example defines the sort order for the Sort method. If the <xref:System.ComponentModel.PropertyDescriptorCollection> contains four <xref:System.ComponentModel.PropertyDescriptor> objects with the names `A`, `B`, `C`, and `D`, the properties of `myNewColl` would be sorted in the order `D`, `B`, `A`, and `C`.  \\n  \\n [!code-cs[classic eventdescriptorcollection.sort example#1](~/add/codesnippet/csharp/647021c9-86bc-46f3-95f4-_1.cs)]\\n [!code-vb[classic eventdescriptorcollection.sort example#1](~/add/codesnippet/visualbasic/647021c9-86bc-46f3-95f4-_1.vb)]\\n [!code-cpp[classic eventdescriptorcollection.sort example#1](~/add/codesnippet/cpp/647021c9-86bc-46f3-95f4-_1.cpp)]\"\n  syntax:\n    content: public virtual System.ComponentModel.PropertyDescriptorCollection Sort (string[] names, System.Collections.IComparer comparer);\n    parameters:\n    - id: names\n      type: System.String[]\n      description: An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection.\n    - id: comparer\n      type: System.Collections.IComparer\n      description: A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects in this collection.\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects.\n  overload: System.ComponentModel.PropertyDescriptorCollection.Sort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count\n  id: System#Collections#ICollection#Count\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.Count\n  nameWithType: PropertyDescriptorCollection.System.Collections.ICollection.Count\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.ICollection.Count\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the number of elements contained in the collection.\n  syntax:\n    content: int System.Collections.ICollection.Count { get; }\n    return:\n      type: System.Int32\n      description: The number of elements contained in the collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: PropertyDescriptorCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether access to the collection is synchronized (thread safe).\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the collection is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: PropertyDescriptorCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets an object that can be used to synchronize access to the collection.\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  id: System#Collections#IDictionary#Add(System.Object,System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Add(Object,Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Add(Object,Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Add(Object,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Adds an element with the provided key and value to the <xref:System.Collections.IDictionary>.\n  syntax:\n    content: void IDictionary.Add (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The <xref:System.Object> to use as the key of the element to add.\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to use as the value of the element to add.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection is read-only.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear\n  id: System#Collections#IDictionary#Clear\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Clear()\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Clear()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Clear()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Removes all elements from the <xref:System.Collections.IDictionary>.\n  syntax:\n    content: void IDictionary.Clear ();\n    parameters: []\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)\n  id: System#Collections#IDictionary#Contains(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Contains(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Contains(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Contains(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines whether the <xref:System.Collections.IDictionary> contains an element with the specified key.\n  syntax:\n    content: bool IDictionary.Contains (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to locate in the <xref:System.Collections.IDictionary>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> contains an element with the key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator\n  id: System#Collections#IDictionary#GetEnumerator\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.GetEnumerator()\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.GetEnumerator()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns an enumerator for this class.\n  remarks: ''\n  example:\n  - \"The following code example gets an enumerator for the properties on `button1`. It uses the enumerator to print the names of the properties in the collection. It requires that `button1` and `textBox1` have been instantiated on a form.  \\n  \\n [!code-cpp[Classic PropertyDescriptorCollection.GetEnumerator Example#1](~/add/codesnippet/cpp/3bd980e1-aa61-4b0a-875e-_1.cpp)]\\n [!code-cs[Classic PropertyDescriptorCollection.GetEnumerator Example#1](~/add/codesnippet/csharp/3bd980e1-aa61-4b0a-875e-_1.cs)]\\n [!code-vb[Classic PropertyDescriptorCollection.GetEnumerator Example#1](~/add/codesnippet/visualbasic/3bd980e1-aa61-4b0a-875e-_1.vb)]\"\n  syntax:\n    content: System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An enumerator of type <xref:System.Collections.IEnumerator>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize\n  id: System#Collections#IDictionary#IsFixedSize\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.IsFixedSize\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.IsFixedSize\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.IsFixedSize\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether the <xref:System.Collections.IDictionary> has a fixed size.\n  syntax:\n    content: bool System.Collections.IDictionary.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly\n  id: System#Collections#IDictionary#IsReadOnly\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.IsReadOnly\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.IsReadOnly\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.IsReadOnly\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether the <xref:System.Collections.IDictionary> is read-only.\n  syntax:\n    content: bool System.Collections.IDictionary.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Collections.IDictionary> is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)\n  id: System#Collections#IDictionary#Item(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Item(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Item(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Item(Object)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets or sets the element with the specified key.\n  syntax:\n    content: object System.Collections.IDictionary.Item[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to get or set.\n    return:\n      type: System.Object\n      description: The element with the specified key.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys\n  id: System#Collections#IDictionary#Keys\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Keys\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Keys\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Keys\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets an <xref:System.Collections.ICollection> containing the keys of the <xref:System.Collections.IDictionary>.\n  syntax:\n    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref:System.Collections.ICollection> containing the keys of the <xref:System.Collections.IDictionary>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)\n  id: System#Collections#IDictionary#Remove(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Remove(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Remove(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Remove(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Removes the element with the specified key from the <xref:System.Collections.IDictionary>.\n  syntax:\n    content: void IDictionary.Remove (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to remove.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values\n  id: System#Collections#IDictionary#Values\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Values\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Values\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Values\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets an <xref:System.Collections.ICollection> containing the values in the <xref:System.Collections.IDictionary>.\n  syntax:\n    content: System.Collections.ICollection System.Collections.IDictionary.Values { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref:System.Collections.ICollection> containing the values in the <xref:System.Collections.IDictionary>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: PropertyDescriptorCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns an <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Add(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Adds an item to the <xref:System.Collections.IList>.\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The item to add to the collection.\n    return:\n      type: System.Int32\n      description: The position into which the new element was inserted.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear\n  id: System#Collections#IList#Clear\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Clear()\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Clear()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Clear()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Removes all items from the collection.\n  syntax:\n    content: void IList.Clear ();\n    parameters: []\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection is read-only.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Contains(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines whether the collection contains a specific value.\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The item to locate in the collection.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the item is found in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines the index of a specified item in the collection.\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The item to locate in the collection.\n    return:\n      type: System.Int32\n      description: The index of <code>value</code> if found in the list, otherwise -1.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Inserts an item into the collection at a specified index.\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which `value` should be inserted.\n    - id: value\n      type: System.Object\n      description: The item to insert into the collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection is read-only.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.IsFixedSize\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether the collection has a fixed size.\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.IsReadOnly\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether the collection is read-only.\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Item(Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets or sets an item from the collection at a specified index.\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the item to get or set.\n    return:\n      type: System.Object\n      description: The element at the specified index.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection is read-only.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> is not a <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>.\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref:System.ComponentModel.EventDescriptorCollection.Count*>.\"\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Remove(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Removes the first occurrence of a specified value from the collection.\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The item to remove from the collection.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection is read-only.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)\n  id: System#Collections#IList#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.RemoveAt(Int32)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.RemoveAt(Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Removes the item at the specified index.\n  syntax:\n    content: void IList.RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the item to remove.\n  overload: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection is read-only.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.IndexOutOfRangeException\n  isExternal: true\n  name: System.IndexOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: PropertyDescriptorCollection(PropertyDescriptor[])\n  nameWithType: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[])\n  fullName: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[])\n- uid: System.ComponentModel.PropertyDescriptor[]\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptor\n  nameWithType: PropertyDescriptor\n  fullName: System.ComponentModel.PropertyDescriptor[]\n  spec.csharp:\n  - uid: System.ComponentModel.PropertyDescriptor\n    name: PropertyDescriptor\n    nameWithType: PropertyDescriptor\n    fullName: PropertyDescriptor[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: PropertyDescriptorCollection(PropertyDescriptor[],Boolean)\n  nameWithType: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[],Boolean)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[],Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Add(PropertyDescriptor)\n  nameWithType: PropertyDescriptorCollection.Add(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Add(PropertyDescriptor)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ComponentModel.PropertyDescriptor\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptor\n  nameWithType: PropertyDescriptor\n  fullName: System.ComponentModel.PropertyDescriptor\n- uid: System.ComponentModel.PropertyDescriptorCollection.Clear\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: PropertyDescriptorCollection.Clear()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Clear()\n- uid: System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Contains(PropertyDescriptor)\n  nameWithType: PropertyDescriptorCollection.Contains(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Contains(PropertyDescriptor)\n- uid: System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: PropertyDescriptorCollection.CopyTo(Array,Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.ComponentModel.PropertyDescriptorCollection.Count\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Count\n  nameWithType: PropertyDescriptorCollection.Count\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Count\n- uid: System.ComponentModel.PropertyDescriptorCollection.Empty\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Empty\n  nameWithType: PropertyDescriptorCollection.Empty\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Empty\n- uid: System.ComponentModel.PropertyDescriptorCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptorCollection\n  nameWithType: PropertyDescriptorCollection\n  fullName: System.ComponentModel.PropertyDescriptorCollection\n- uid: System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Find(String,Boolean)\n  nameWithType: PropertyDescriptorCollection.Find(String,Boolean)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Find(String,Boolean)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: PropertyDescriptorCollection.GetEnumerator()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: IndexOf(PropertyDescriptor)\n  nameWithType: PropertyDescriptorCollection.IndexOf(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.IndexOf(PropertyDescriptor)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Insert(Int32,PropertyDescriptor)\n  nameWithType: PropertyDescriptorCollection.Insert(Int32,PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Insert(Int32,PropertyDescriptor)\n- uid: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: InternalSort(IComparer)\n  nameWithType: PropertyDescriptorCollection.InternalSort(IComparer)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.InternalSort(IComparer)\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: true\n  name: IComparer\n  nameWithType: IComparer\n  fullName: System.Collections.IComparer\n- uid: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: InternalSort(String[])\n  nameWithType: PropertyDescriptorCollection.InternalSort(String[])\n  fullName: System.ComponentModel.PropertyDescriptorCollection.InternalSort(String[])\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: PropertyDescriptorCollection.Item(Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Item(Int32)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Item(System.String)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Item(String)\n  nameWithType: PropertyDescriptorCollection.Item(String)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Item(String)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Remove(PropertyDescriptor)\n  nameWithType: PropertyDescriptorCollection.Remove(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Remove(PropertyDescriptor)\n- uid: System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: PropertyDescriptorCollection.RemoveAt(Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.RemoveAt(Int32)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Sort()\n  nameWithType: PropertyDescriptorCollection.Sort()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort()\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Sort(IComparer)\n  nameWithType: PropertyDescriptorCollection.Sort(IComparer)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(IComparer)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Sort(String[])\n  nameWithType: PropertyDescriptorCollection.Sort(String[])\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(String[])\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Sort(String[],IComparer)\n  nameWithType: PropertyDescriptorCollection.Sort(String[],IComparer)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(String[],IComparer)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.ICollection.Count\n  nameWithType: PropertyDescriptorCollection.System.Collections.ICollection.Count\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.ICollection.Count\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: PropertyDescriptorCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: PropertyDescriptorCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.ICollection.SyncRoot\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Add(Object,Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Add(Object,Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Add(Object,Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Clear()\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Clear()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Clear()\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Contains(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Contains(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Contains(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.GetEnumerator()\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.GetEnumerator()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.IsFixedSize\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.IsFixedSize\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.IsFixedSize\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.IsReadOnly\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.IsReadOnly\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.IsReadOnly\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Item(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Item(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Item(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Keys\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Keys\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Keys\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: true\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Remove(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Remove(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Remove(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Values\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Values\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Values\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: PropertyDescriptorCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Add(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Add(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Clear()\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Clear()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Clear()\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Contains(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Contains(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IndexOf(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Insert(Int32,Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.IsFixedSize\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IsFixedSize\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.IsReadOnly\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IsReadOnly\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Item(Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Item(Int32)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Remove(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Remove(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.RemoveAt(Int32)\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.RemoveAt(Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.RemoveAt(Int32)\n- uid: System.ComponentModel.PropertyDescriptorCollection.#ctor*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: PropertyDescriptorCollection\n  nameWithType: PropertyDescriptorCollection.PropertyDescriptorCollection\n- uid: System.ComponentModel.PropertyDescriptorCollection.Add*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Add\n  nameWithType: PropertyDescriptorCollection.Add\n- uid: System.ComponentModel.PropertyDescriptorCollection.Clear*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Clear\n  nameWithType: PropertyDescriptorCollection.Clear\n- uid: System.ComponentModel.PropertyDescriptorCollection.Contains*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Contains\n  nameWithType: PropertyDescriptorCollection.Contains\n- uid: System.ComponentModel.PropertyDescriptorCollection.CopyTo*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: PropertyDescriptorCollection.CopyTo\n- uid: System.ComponentModel.PropertyDescriptorCollection.Count*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Count\n  nameWithType: PropertyDescriptorCollection.Count\n- uid: System.ComponentModel.PropertyDescriptorCollection.Find*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Find\n  nameWithType: PropertyDescriptorCollection.Find\n- uid: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: PropertyDescriptorCollection.GetEnumerator\n- uid: System.ComponentModel.PropertyDescriptorCollection.IndexOf*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: IndexOf\n  nameWithType: PropertyDescriptorCollection.IndexOf\n- uid: System.ComponentModel.PropertyDescriptorCollection.Insert*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Insert\n  nameWithType: PropertyDescriptorCollection.Insert\n- uid: System.ComponentModel.PropertyDescriptorCollection.InternalSort*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: InternalSort\n  nameWithType: PropertyDescriptorCollection.InternalSort\n- uid: System.ComponentModel.PropertyDescriptorCollection.Item*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Item\n  nameWithType: PropertyDescriptorCollection.Item\n- uid: System.ComponentModel.PropertyDescriptorCollection.Remove*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Remove\n  nameWithType: PropertyDescriptorCollection.Remove\n- uid: System.ComponentModel.PropertyDescriptorCollection.RemoveAt*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: RemoveAt\n  nameWithType: PropertyDescriptorCollection.RemoveAt\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: Sort\n  nameWithType: PropertyDescriptorCollection.Sort\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.ICollection.Count\n  nameWithType: PropertyDescriptorCollection.System.Collections.ICollection.Count\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: PropertyDescriptorCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: PropertyDescriptorCollection.System.Collections.ICollection.SyncRoot\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Add\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Add\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Clear\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Clear\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Contains\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Contains\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.GetEnumerator\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.GetEnumerator\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.IsFixedSize\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.IsFixedSize\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.IsReadOnly\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.IsReadOnly\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Item\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Item\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Keys\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Keys\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Remove\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Remove\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Values\n  nameWithType: PropertyDescriptorCollection.System.Collections.IDictionary.Values\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: PropertyDescriptorCollection.System.Collections.IEnumerable.GetEnumerator\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Add\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Clear\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Clear\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Contains\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.IndexOf\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Insert\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.IsFixedSize\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.IsReadOnly\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Item\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.Remove\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt*\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  isExternal: false\n  name: System.Collections.IList.RemoveAt\n  nameWithType: PropertyDescriptorCollection.System.Collections.IList.RemoveAt\n"}