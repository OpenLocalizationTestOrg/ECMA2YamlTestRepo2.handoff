{"nodes":[{"pos":[1687,1725],"content":"Represents a collection of attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a collection of attributes.","pos":[0,38]}]},{"pos":[1738,2945],"content":"The AttributeCollection class is read-only; it does not implement methods to add or remove attributes. You must inherit from this class to implement these methods.       Use the <xref:System.ComponentModel.AttributeCollection.Count%2A> property to find the number of attributes that exist in the collection.       You can also use the methods of this class to query the collection about its contents. Call the <xref:System.ComponentModel.AttributeCollection.Contains%2A> method to verify that a specified attribute or attribute array exists in the collection. Call the <xref:System.ComponentModel.AttributeCollection.Matches%2A> method to verify that a specified attribute or array of attributes exists in the collection, and that the values of the specified attributes are the same as the values in the collection.       While most attributes have default values, default values are not required. If an attribute has no default value, `null` is returned from the indexed property that takes a type. When defining your own attributes, you can declare a default value by either providing a constructor that takes no arguments, or defining a public static field of your attribute type named \"Default\".","needQuote":false,"needEscape":true,"nodes":[{"content":"The AttributeCollection class is read-only; it does not implement methods to add or remove attributes.","pos":[0,102]},{"content":"You must inherit from this class to implement these methods.","pos":[103,163]},{"content":"Use the &lt;xref:System.ComponentModel.AttributeCollection.Count%2A&gt; property to find the number of attributes that exist in the collection.","pos":[170,307],"source":"       Use the <xref:System.ComponentModel.AttributeCollection.Count%2A> property to find the number of attributes that exist in the collection."},{"content":"You can also use the methods of this class to query the collection about its contents.","pos":[314,400]},{"content":"Call the &lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt; method to verify that a specified attribute or attribute array exists in the collection.","pos":[401,559],"source":" Call the <xref:System.ComponentModel.AttributeCollection.Contains%2A> method to verify that a specified attribute or attribute array exists in the collection."},{"content":"Call the &lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt; method to verify that a specified attribute or array of attributes exists in the collection, and that the values of the specified attributes are the same as the values in the collection.","pos":[560,815],"source":" Call the <xref:System.ComponentModel.AttributeCollection.Matches%2A> method to verify that a specified attribute or array of attributes exists in the collection, and that the values of the specified attributes are the same as the values in the collection."},{"content":"While most attributes have default values, default values are not required.","pos":[822,897]},{"content":"If an attribute has no default value, <ph id=\"ph1\">`null`</ph> is returned from the indexed property that takes a type.","pos":[898,999],"source":" If an attribute has no default value, `null` is returned from the indexed property that takes a type."},{"content":"When defining your own attributes, you can declare a default value by either providing a constructor that takes no arguments, or defining a public static field of your attribute type named \"Default\".","pos":[1000,1199]}]},{"pos":[4746,4849],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.AttributeCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.AttributeCollection\"></xref> class."},{"pos":[5496,5599],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.AttributeCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.AttributeCollection\"></xref> class."},{"pos":[6376,6466],"content":"An array of type <xref:System.Attribute> that provides the attributes for this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Attribute&gt; that provides the attributes for this collection.","pos":[0,90],"source":"An array of type <xref:System.Attribute> that provides the attributes for this collection."}]},{"pos":[6644,6732],"content":"<ph id=\"ph1\">&lt;code&gt;attributes&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7124,7154],"content":"Gets the attribute collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the attribute collection.","pos":[0,30]}]},{"pos":[7290,7315],"content":"The attribute collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attribute collection.","pos":[0,25]}]},{"pos":[7847,7924],"content":"Determines whether this collection of attributes has the specified attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether this collection of attributes has the specified attribute.","pos":[0,77]}]},{"pos":[7937,9196],"content":"This collection has the specified attribute if the specified type of attribute exists in the collection, and if the value of the specified attribute is the same as the value of the instance of the attribute in the collection.       The difference between the <xref:System.ComponentModel.AttributeCollection.Matches%2A> and Contains methods is that <xref:System.ComponentModel.AttributeCollection.Matches%2A> calls the <xref:System.Attribute.Match%2A> method on an attribute, and Contains calls the <xref:System.Object.Equals%2A> method.       For most attributes, these methods do the same thing. For attributes that may have multiple flags, however, <xref:System.Attribute.Match%2A> is typically implemented so that it returns `true` if any of the flags are satisfied. For example, consider a data binding attribute with the Boolean flags \"SupportsSql\", \"SupportsOleDb\", and \"SupportsXml\". This attribute may be present on a property that supports all three data-binding approaches. It will often be the case that a programmer needs to know only if a particular approach is available, not all three. Therefore, a programmer could use <xref:System.Attribute.Match%2A> with an instance of the attribute containing only the flags the programmer needs.","needQuote":false,"needEscape":true,"nodes":[{"content":"This collection has the specified attribute if the specified type of attribute exists in the collection, and if the value of the specified attribute is the same as the value of the instance of the attribute in the collection.","pos":[0,225]},{"content":"The difference between the &lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt; and Contains methods is that &lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt; calls the &lt;xref:System.Attribute.Match%2A&gt; method on an attribute, and Contains calls the &lt;xref:System.Object.Equals%2A&gt; method.","pos":[232,536],"source":"       The difference between the <xref:System.ComponentModel.AttributeCollection.Matches%2A> and Contains methods is that <xref:System.ComponentModel.AttributeCollection.Matches%2A> calls the <xref:System.Attribute.Match%2A> method on an attribute, and Contains calls the <xref:System.Object.Equals%2A> method."},{"content":"For most attributes, these methods do the same thing.","pos":[543,596]},{"content":"For attributes that may have multiple flags, however, &lt;xref:System.Attribute.Match%2A&gt; is typically implemented so that it returns <ph id=\"ph1\">`true`</ph> if any of the flags are satisfied.","pos":[597,769],"source":" For attributes that may have multiple flags, however, <xref:System.Attribute.Match%2A> is typically implemented so that it returns `true` if any of the flags are satisfied."},{"content":"For example, consider a data binding attribute with the Boolean flags \"SupportsSql\", \"SupportsOleDb\", and \"SupportsXml\".","pos":[770,890]},{"content":"This attribute may be present on a property that supports all three data-binding approaches.","pos":[891,983]},{"content":"It will often be the case that a programmer needs to know only if a particular approach is available, not all three.","pos":[984,1100]},{"content":"Therefore, a programmer could use &lt;xref:System.Attribute.Match%2A&gt; with an instance of the attribute containing only the flags the programmer needs.","pos":[1101,1249],"source":" Therefore, a programmer could use <xref:System.Attribute.Match%2A> with an instance of the attribute containing only the flags the programmer needs."}]},{"pos":[9939,9992],"content":"An <xref:System.Attribute> to find in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Attribute&gt; to find in the collection.","pos":[0,53],"source":"An <xref:System.Attribute> to find in the collection."}]},{"pos":[10051,10282],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10822,10928],"content":"Determines whether this attribute collection contains all the specified attributes in the attribute array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether this attribute collection contains all the specified attributes in the attribute array.","pos":[0,106]}]},{"pos":[10940,11146],"content":"This collection has the specified array of attributes if all the specified attribute types exist in the collection and if each attribute in the specified array is the same as an attribute in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"This collection has the specified array of attributes if all the specified attribute types exist in the collection and if each attribute in the specified array is the same as an attribute in the collection.","pos":[0,206]}]},{"pos":[11943,12010],"content":"An array of type <xref:System.Attribute> to find in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Attribute&gt; to find in the collection.","pos":[0,67],"source":"An array of type <xref:System.Attribute> to find in the collection."}]},{"pos":[12069,12251],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the collection contains all the attributes; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection contains all the attributes; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12795,12862],"content":"Copies the collection to an array, starting at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the collection to an array, starting at the specified index.","pos":[0,67]}]},{"pos":[13007,13057],"content":"The <xref:System.Array> to copy the collection to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Array&gt; to copy the collection to.","pos":[0,50],"source":"The <xref:System.Array> to copy the collection to."}]},{"pos":[13118,13142],"content":"The index to start from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index to start from.","pos":[0,24]}]},{"pos":[13588,13618],"content":"Gets the number of attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of attributes.","pos":[0,30]}]},{"pos":[13630,13830],"content":"You can use the Count property to set the limits of a loop that iterates through a collection of objects. If the collection is zero-based, be sure to use `Count - 1` as the upper boundary of the loop.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can use the Count property to set the limits of a loop that iterates through a collection of objects.","pos":[0,105]},{"content":"If the collection is zero-based, be sure to use <ph id=\"ph1\">`Count - 1`</ph> as the upper boundary of the loop.","pos":[106,200],"source":" If the collection is zero-based, be sure to use `Count - 1` as the upper boundary of the loop."}]},{"pos":[14497,14522],"content":"The number of attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of attributes.","pos":[0,25]}]},{"pos":[14964,15068],"content":"Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.","pos":[0,104],"nodes":[{"content":"Specifies an empty collection that you can use, rather than creating a new one.","pos":[0,79]},{"content":"This field is read-only.","pos":[80,104]}]}]},{"pos":[15249,15261],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15901,16058],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.AttributeCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from an existing <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.AttributeCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.ComponentModel.AttributeCollection\"></xref> from an existing <xref href=\"System.ComponentModel.AttributeCollection\"></xref>."},{"pos":[16070,16202],"content":"If the <ph id=\"ph1\">`newAttributes`</ph> parameter is provided, its &lt;xref:System.Attribute&gt; entries are merged with those of the <ph id=\"ph2\">`existing`</ph> parameter.","needQuote":true,"needEscape":true,"source":"If the `newAttributes` parameter is provided, its <xref:System.Attribute> entries are merged with those of the `existing` parameter."},{"pos":[16484,16580],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.AttributeCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from which to create the copy.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.ComponentModel.AttributeCollection\"></xref> from which to create the copy."},{"pos":[16655,16814],"content":"An array of type <xref:System.Attribute> that provides the attributes for this collection. Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Attribute&gt; that provides the attributes for this collection.","pos":[0,90],"source":"An array of type <xref:System.Attribute> that provides the attributes for this collection."},{"content":"Can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[91,159],"source":" Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[16900,17009],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.AttributeCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is a copy of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">existing</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.ComponentModel.AttributeCollection\"></xref> that is a copy of <code>existing</code>."},{"pos":[17194,17280],"content":"<ph id=\"ph1\">&lt;code&gt;existing&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>existing</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[17759,17833],"content":"Returns the default <xref:System.Attribute> of a given <xref:System.Type>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the default &lt;xref:System.Attribute&gt; of a given &lt;xref:System.Type&gt;.","pos":[0,74],"source":"Returns the default <xref:System.Attribute> of a given <xref:System.Type>."}]},{"pos":[18002,18054],"content":"The <xref:System.Type> of the attribute to retrieve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Type&gt; of the attribute to retrieve.","pos":[0,52],"source":"The <xref:System.Type> of the attribute to retrieve."}]},{"pos":[18115,18189],"content":"The default &lt;xref:System.Attribute&gt; of a given <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The default <xref:System.Attribute> of a given <code>attributeType</code>."},{"pos":[18692,18731],"content":"Gets an enumerator for this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an enumerator for this collection.","pos":[0,39]}]},{"pos":[19548,19608],"content":"An enumerator of type <xref:System.Collections.IEnumerator>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator of type &lt;xref:System.Collections.IEnumerator&gt;.","pos":[0,60],"source":"An enumerator of type <xref:System.Collections.IEnumerator>."}]},{"pos":[20105,20156],"content":"Gets the attribute with the specified index number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the attribute with the specified index number.","pos":[0,51]}]},{"pos":[20168,20426],"content":"The index number is zero-based. Therefore, you must subtract 1 from the numerical position of a particular <xref:System.Attribute> to access that <xref:System.Attribute>. For example, to get the third <xref:System.Attribute>, you need to specify `myColl[2]`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index number is zero-based.","pos":[0,31]},{"content":"Therefore, you must subtract 1 from the numerical position of a particular &lt;xref:System.Attribute&gt; to access that &lt;xref:System.Attribute&gt;.","pos":[32,170],"source":" Therefore, you must subtract 1 from the numerical position of a particular <xref:System.Attribute> to access that <xref:System.Attribute>."},{"content":"For example, to get the third &lt;xref:System.Attribute&gt;, you need to specify <ph id=\"ph1\">`myColl[2]`</ph>.","pos":[171,258],"source":" For example, to get the third <xref:System.Attribute>, you need to specify `myColl[2]`."}]},{"pos":[21284,21371],"content":"The zero-based index of <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.AttributeCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The zero-based index of <xref href=\"System.ComponentModel.AttributeCollection\"></xref>."},{"pos":[21432,21492],"content":"The <xref:System.Attribute> with the specified index number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Attribute&gt; with the specified index number.","pos":[0,60],"source":"The <xref:System.Attribute> with the specified index number."}]},{"pos":[21975,22018],"content":"Gets the attribute with the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the attribute with the specified type.","pos":[0,43]}]},{"pos":[22030,22144],"content":"If the attribute does not exist in the collection, this property returns the default value for the attribute type.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the attribute does not exist in the collection, this property returns the default value for the attribute type.","pos":[0,114]}]},{"pos":[23102,23183],"content":"The <xref:System.Type> of the <xref:System.Attribute> to get from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Type&gt; of the &lt;xref:System.Attribute&gt; to get from the collection.","pos":[0,81],"source":"The <xref:System.Type> of the <xref:System.Attribute> to get from the collection."}]},{"pos":[23244,23374],"content":"The <xref:System.Attribute> with the specified type or, if the attribute does not exist, the default value for the attribute type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Attribute&gt; with the specified type or, if the attribute does not exist, the default value for the attribute type.","pos":[0,130],"source":"The <xref:System.Attribute> with the specified type or, if the attribute does not exist, the default value for the attribute type."}]},{"pos":[23895,23982],"content":"Determines whether a specified attribute is the same as an attribute in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a specified attribute is the same as an attribute in the collection.","pos":[0,87]}]},{"pos":[23995,25075],"content":"An attribute can provide support for matching.       The difference between the Matches and <xref:System.ComponentModel.AttributeCollection.Contains%2A> methods is that Matches calls the <xref:System.Attribute.Match%2A> method on an attribute, and <xref:System.ComponentModel.AttributeCollection.Contains%2A> calls the <xref:System.Object.Equals%2A> method.       For most attributes, these methods do the same thing. For attributes that may have multiple flags, however, <xref:System.Attribute.Match%2A> is typically implemented so that it returns `true` if any of the flags are satisfied. For example, consider a data binding attribute with the Boolean flags \"SupportsSql\", \"SupportsOleDb\", and \"SupportsXml\". This attribute may be present on a property that supports all three data binding approaches. It will often be the case that a programmer needs to know only if a particular approach is available, not all three. Therefore, a programmer could use <xref:System.Attribute.Match%2A> with an instance of the attribute containing only the flags the programmer needs.","needQuote":false,"needEscape":true,"nodes":[{"content":"An attribute can provide support for matching.","pos":[0,46]},{"content":"The difference between the Matches and &lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt; methods is that Matches calls the &lt;xref:System.Attribute.Match%2A&gt; method on an attribute, and &lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt; calls the &lt;xref:System.Object.Equals%2A&gt; method.","pos":[53,357],"source":"       The difference between the Matches and <xref:System.ComponentModel.AttributeCollection.Contains%2A> methods is that Matches calls the <xref:System.Attribute.Match%2A> method on an attribute, and <xref:System.ComponentModel.AttributeCollection.Contains%2A> calls the <xref:System.Object.Equals%2A> method."},{"content":"For most attributes, these methods do the same thing.","pos":[364,417]},{"content":"For attributes that may have multiple flags, however, &lt;xref:System.Attribute.Match%2A&gt; is typically implemented so that it returns <ph id=\"ph1\">`true`</ph> if any of the flags are satisfied.","pos":[418,590],"source":" For attributes that may have multiple flags, however, <xref:System.Attribute.Match%2A> is typically implemented so that it returns `true` if any of the flags are satisfied."},{"content":"For example, consider a data binding attribute with the Boolean flags \"SupportsSql\", \"SupportsOleDb\", and \"SupportsXml\".","pos":[591,711]},{"content":"This attribute may be present on a property that supports all three data binding approaches.","pos":[712,804]},{"content":"It will often be the case that a programmer needs to know only if a particular approach is available, not all three.","pos":[805,921]},{"content":"Therefore, a programmer could use &lt;xref:System.Attribute.Match%2A&gt; with an instance of the attribute containing only the flags the programmer needs.","pos":[922,1070],"source":" Therefore, a programmer could use <xref:System.Attribute.Match%2A> with an instance of the attribute containing only the flags the programmer needs."}]},{"pos":[25840,25929],"content":"An instance of <xref:System.Attribute> to compare with the attributes in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An instance of &lt;xref:System.Attribute&gt; to compare with the attributes in this collection.","pos":[0,89],"source":"An instance of <xref:System.Attribute> to compare with the attributes in this collection."}]},{"pos":[25988,26234],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[26768,26874],"content":"Determines whether the attributes in the specified array are the same as the attributes in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the attributes in the specified array are the same as the attributes in the collection.","pos":[0,106]}]},{"pos":[26886,26932],"content":"An attribute can provide support for matching.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attribute can provide support for matching.","pos":[0,46]}]},{"pos":[27651,27766],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.MemberAttributes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare with the attributes in this collection.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.CodeDom.MemberAttributes\"></xref> to compare with the attributes in this collection."},{"pos":[27825,28089],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[28705,28761],"content":"Gets the number of elements contained in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of elements contained in the collection.","pos":[0,56]}]},{"pos":[28891,28942],"content":"The number of elements contained in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of elements contained in the collection.","pos":[0,51]}]},{"pos":[29632,29719],"content":"Gets a value indicating whether access to the collection is synchronized (thread-safe).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether access to the collection is synchronized (thread-safe).","pos":[0,87]}]},{"pos":[29861,30055],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access to the collection is synchronized (thread-safe); otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the collection is synchronized (thread-safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[30724,30796],"content":"Gets an object that can be used to synchronize access to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that can be used to synchronize access to the collection.","pos":[0,72]}]},{"pos":[30933,31000],"content":"An object that can be used to synchronize access to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that can be used to synchronize access to the collection.","pos":[0,67]}]},{"pos":[31692,31787],"content":"Returns an <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an &lt;xref:System.Collections.IEnumerator&gt; for the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,95],"source":"Returns an <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>."}]},{"pos":[31965,32052],"content":"An <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerator&gt; for the &lt;xref:System.Collections.IDictionary&gt;.","pos":[0,87],"source":"An <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.AttributeCollection\n  id: AttributeCollection\n  children:\n  - System.ComponentModel.AttributeCollection.#ctor\n  - System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])\n  - System.ComponentModel.AttributeCollection.Attributes\n  - System.ComponentModel.AttributeCollection.Contains(System.Attribute)\n  - System.ComponentModel.AttributeCollection.Contains(System.Attribute[])\n  - System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)\n  - System.ComponentModel.AttributeCollection.Count\n  - System.ComponentModel.AttributeCollection.Empty\n  - System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])\n  - System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)\n  - System.ComponentModel.AttributeCollection.GetEnumerator\n  - System.ComponentModel.AttributeCollection.Item(System.Int32)\n  - System.ComponentModel.AttributeCollection.Item(System.Type)\n  - System.ComponentModel.AttributeCollection.Matches(System.Attribute)\n  - System.ComponentModel.AttributeCollection.Matches(System.Attribute[])\n  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count\n  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized\n  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot\n  - System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: AttributeCollection\n  nameWithType: AttributeCollection\n  fullName: System.ComponentModel.AttributeCollection\n  type: Class\n  summary: Represents a collection of attributes.\n  remarks: \"The AttributeCollection class is read-only; it does not implement methods to add or remove attributes. You must inherit from this class to implement these methods.  \\n  \\n Use the <xref:System.ComponentModel.AttributeCollection.Count%2A> property to find the number of attributes that exist in the collection.  \\n  \\n You can also use the methods of this class to query the collection about its contents. Call the <xref:System.ComponentModel.AttributeCollection.Contains%2A> method to verify that a specified attribute or attribute array exists in the collection. Call the <xref:System.ComponentModel.AttributeCollection.Matches%2A> method to verify that a specified attribute or array of attributes exists in the collection, and that the values of the specified attributes are the same as the values in the collection.  \\n  \\n While most attributes have default values, default values are not required. If an attribute has no default value, `null` is returned from the indexed property that takes a type. When defining your own attributes, you can declare a default value by either providing a constructor that takes no arguments, or defining a public static field of your attribute type named \\\"Default\\\".\"\n  example:\n  - \"The first code example checks to see whether the <xref:System.ComponentModel.BrowsableAttribute> has been set in this collection. The second code example gets the actual value of the <xref:System.ComponentModel.DescriptionAttribute> for a button. Both examples require that `button1` and `textBox1` have been created on a form. When using attributes, verify that an attribute has been set, or access its value.  \\n  \\n [!code-cpp[Classic AttributeCollection Example#1](~/add/codesnippet/cpp/t-system.componentmodel._150_1.cpp)]\\n [!code-cs[Classic AttributeCollection Example#1](~/add/codesnippet/csharp/t-system.componentmodel._150_1.cs)]\\n [!code-vb[Classic AttributeCollection Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._150_1.vb)]  \\n  \\n [!code-cpp[Classic AttributeCollection Example#2](~/add/codesnippet/cpp/t-system.componentmodel._150_2.cpp)]\\n [!code-cs[Classic AttributeCollection Example#2](~/add/codesnippet/csharp/t-system.componentmodel._150_2.cs)]\\n [!code-vb[Classic AttributeCollection Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._150_2.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class AttributeCollection : System.Collections.ICollection\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: AttributeCollection()\n  nameWithType: AttributeCollection.AttributeCollection()\n  fullName: System.ComponentModel.AttributeCollection.AttributeCollection()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.AttributeCollection\"></xref> class.\n  syntax:\n    content: protected AttributeCollection ();\n    parameters: []\n  overload: System.ComponentModel.AttributeCollection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])\n  id: '#ctor(System.Attribute[])'\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: AttributeCollection(Attribute[])\n  nameWithType: AttributeCollection.AttributeCollection(Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.AttributeCollection(Attribute[])\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.AttributeCollection\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example creates a new <xref:System.ComponentModel.AttributeCollection> using the attributes on `button1`. It assumes that `button1` has been created on a form.  \\n  \\n [!code-cpp[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/cpp/m-system.componentmodel._17_1.cpp)]\\n [!code-cs[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/csharp/m-system.componentmodel._17_1.cs)]\\n [!code-vb[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._17_1.vb)]\"\n  syntax:\n    content: public AttributeCollection (Attribute[] attributes);\n    parameters:\n    - id: attributes\n      type: System.Attribute[]\n      description: An array of type <xref:System.Attribute> that provides the attributes for this collection.\n  overload: System.ComponentModel.AttributeCollection.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>attributes</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.Attributes\n  id: Attributes\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: AttributeCollection.Attributes\n  fullName: System.ComponentModel.AttributeCollection.Attributes\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the attribute collection.\n  syntax:\n    content: protected virtual Attribute[] Attributes { get; }\n    return:\n      type: System.Attribute[]\n      description: The attribute collection.\n  overload: System.ComponentModel.AttributeCollection.Attributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute)\n  id: Contains(System.Attribute)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: Contains(Attribute)\n  nameWithType: AttributeCollection.Contains(Attribute)\n  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines whether this collection of attributes has the specified attribute.\n  remarks: \"This collection has the specified attribute if the specified type of attribute exists in the collection, and if the value of the specified attribute is the same as the value of the instance of the attribute in the collection.  \\n  \\n The difference between the <xref:System.ComponentModel.AttributeCollection.Matches%2A> and Contains methods is that <xref:System.ComponentModel.AttributeCollection.Matches%2A> calls the <xref:System.Attribute.Match%2A> method on an attribute, and Contains calls the <xref:System.Object.Equals%2A> method.  \\n  \\n For most attributes, these methods do the same thing. For attributes that may have multiple flags, however, <xref:System.Attribute.Match%2A> is typically implemented so that it returns `true` if any of the flags are satisfied. For example, consider a data binding attribute with the Boolean flags \\\"SupportsSql\\\", \\\"SupportsOleDb\\\", and \\\"SupportsXml\\\". This attribute may be present on a property that supports all three data-binding approaches. It will often be the case that a programmer needs to know only if a particular approach is available, not all three. Therefore, a programmer could use <xref:System.Attribute.Match%2A> with an instance of the attribute containing only the flags the programmer needs.\"\n  example:\n  - \"The following code example checks to see whether the collection has a <xref:System.ComponentModel.BrowsableAttribute> set to `true`. It assumes that `button1` and `textBox1` have been created on a form.  \\n  \\n [!code-vb[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._16_1.vb)]\\n [!code-cs[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/csharp/m-system.componentmodel._16_1.cs)]\\n [!code-cpp[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/cpp/m-system.componentmodel._16_1.cpp)]\"\n  syntax:\n    content: public bool Contains (Attribute attribute);\n    parameters:\n    - id: attribute\n      type: System.Attribute\n      description: An <xref:System.Attribute> to find in the collection.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.AttributeCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute[])\n  id: Contains(System.Attribute[])\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: Contains(Attribute[])\n  nameWithType: AttributeCollection.Contains(Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines whether this attribute collection contains all the specified attributes in the attribute array.\n  remarks: This collection has the specified array of attributes if all the specified attribute types exist in the collection and if each attribute in the specified array is the same as an attribute in the collection.\n  example:\n  - \"The following code example compares the attributes in `button1` and `textBox1` to see whether the attributes for the button are contained in the attributes for the text box. It assumes that both `button1` and `textBox1` have been created on a form.  \\n  \\n [!code-cs[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/csharp/m-system.componentmodel._42_1.cs)]\\n [!code-vb[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._42_1.vb)]\\n [!code-cpp[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/cpp/m-system.componentmodel._42_1.cpp)]\"\n  syntax:\n    content: public bool Contains (Attribute[] attributes);\n    parameters:\n    - id: attributes\n      type: System.Attribute[]\n      description: An array of type <xref:System.Attribute> to find in the collection.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the collection contains all the attributes; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.AttributeCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: AttributeCollection.CopyTo(Array,Int32)\n  fullName: System.ComponentModel.AttributeCollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Copies the collection to an array, starting at the specified index.\n  syntax:\n    content: public void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The <xref:System.Array> to copy the collection to.\n    - id: index\n      type: System.Int32\n      description: The index to start from.\n  overload: System.ComponentModel.AttributeCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.Count\n  id: Count\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: AttributeCollection.Count\n  fullName: System.ComponentModel.AttributeCollection.Count\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the number of attributes.\n  remarks: You can use the Count property to set the limits of a loop that iterates through a collection of objects. If the collection is zero-based, be sure to use `Count - 1` as the upper boundary of the loop.\n  example:\n  - \"The following code example uses the Count property to print the number of properties on `button1` in a text box. It assumes that `button1` and `textBox1` have been created on a form.  \\n  \\n [!code-cs[Classic AttributeCollection.Count Example#1](~/add/codesnippet/csharp/p-system.componentmodel._11_1.cs)]\\n [!code-vb[Classic AttributeCollection.Count Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._11_1.vb)]\\n [!code-cpp[Classic AttributeCollection.Count Example#1](~/add/codesnippet/cpp/p-system.componentmodel._11_1.cpp)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of attributes.\n  overload: System.ComponentModel.AttributeCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.Empty\n  id: Empty\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: Empty\n  nameWithType: AttributeCollection.Empty\n  fullName: System.ComponentModel.AttributeCollection.Empty\n  type: Field\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.\n  syntax:\n    content: public static readonly System.ComponentModel.AttributeCollection Empty;\n    return:\n      type: System.ComponentModel.AttributeCollection\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])\n  id: FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: FromExisting(AttributeCollection,Attribute[])\n  nameWithType: AttributeCollection.FromExisting(AttributeCollection,Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.FromExisting(AttributeCollection,Attribute[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Creates a new <xref href=\"System.ComponentModel.AttributeCollection\"></xref> from an existing <xref href=\"System.ComponentModel.AttributeCollection\"></xref>.\n  remarks: If the `newAttributes` parameter is provided, its <xref:System.Attribute> entries are merged with those of the `existing` parameter.\n  syntax:\n    content: public static System.ComponentModel.AttributeCollection FromExisting (System.ComponentModel.AttributeCollection existing, Attribute[] newAttributes);\n    parameters:\n    - id: existing\n      type: System.ComponentModel.AttributeCollection\n      description: An <xref href=\"System.ComponentModel.AttributeCollection\"></xref> from which to create the copy.\n    - id: newAttributes\n      type: System.Attribute[]\n      description: An array of type <xref:System.Attribute> that provides the attributes for this collection. Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.ComponentModel.AttributeCollection\n      description: A new <xref href=\"System.ComponentModel.AttributeCollection\"></xref> that is a copy of <code>existing</code>.\n  overload: System.ComponentModel.AttributeCollection.FromExisting*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>existing</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)\n  id: GetDefaultAttribute(System.Type)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: GetDefaultAttribute(Type)\n  nameWithType: AttributeCollection.GetDefaultAttribute(Type)\n  fullName: System.ComponentModel.AttributeCollection.GetDefaultAttribute(Type)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns the default <xref:System.Attribute> of a given <xref:System.Type>.\n  syntax:\n    content: protected Attribute GetDefaultAttribute (Type attributeType);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The <xref:System.Type> of the attribute to retrieve.\n    return:\n      type: System.Attribute\n      description: The default <xref:System.Attribute> of a given <code>attributeType</code>.\n  overload: System.ComponentModel.AttributeCollection.GetDefaultAttribute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: AttributeCollection.GetEnumerator()\n  fullName: System.ComponentModel.AttributeCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets an enumerator for this collection.\n  remarks: ''\n  example:\n  - \"The following code example gets an enumerator for the attributes on `button1`. It uses the enumerator to print the names of the attributes in the collection. It assumes that `button1` and `textBox1` have been created on a form.  \\n  \\n [!code-cpp[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/cpp/m-system.componentmodel._31_1.cpp)]\\n [!code-cs[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/csharp/m-system.componentmodel._31_1.cs)]\\n [!code-vb[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._31_1.vb)]\"\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator of type <xref:System.Collections.IEnumerator>.\n  overload: System.ComponentModel.AttributeCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: AttributeCollection.Item(Int32)\n  fullName: System.ComponentModel.AttributeCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the attribute with the specified index number.\n  remarks: The index number is zero-based. Therefore, you must subtract 1 from the numerical position of a particular <xref:System.Attribute> to access that <xref:System.Attribute>. For example, to get the third <xref:System.Attribute>, you need to specify `myColl[2]`.\n  example:\n  - \"The following code example uses the Item property to print the name of the <xref:System.Attribute> specified by the index number in a text box. Because the index number is zero-based, this code example prints the name of the second <xref:System.Attribute> in a text box. It assumes `button1` and `textBox1` have been created on a form.  \\n  \\n [!code-cs[Classic AttributeCollection.this Example#1](~/add/codesnippet/csharp/p-system.componentmodel._5_1.cs)]\\n [!code-vb[Classic AttributeCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._5_1.vb)]\\n [!code-cpp[Classic AttributeCollection.this Example#1](~/add/codesnippet/cpp/p-system.componentmodel._5_1.cpp)]\"\n  syntax:\n    content: public virtual Attribute this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of <xref href=\"System.ComponentModel.AttributeCollection\"></xref>.\n    return:\n      type: System.Attribute\n      description: The <xref:System.Attribute> with the specified index number.\n  overload: System.ComponentModel.AttributeCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.Item(System.Type)\n  id: Item(System.Type)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: Item(Type)\n  nameWithType: AttributeCollection.Item(Type)\n  fullName: System.ComponentModel.AttributeCollection.Item(Type)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the attribute with the specified type.\n  remarks: If the attribute does not exist in the collection, this property returns the default value for the attribute type.\n  example:\n  - \"The following code example gets the <xref:System.ComponentModel.DesignerAttribute> from the collection and prints its value. It assumes that `button1` and `textBox1` have been created on a form.  \\n  \\n For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/csharp/p-system.componentmodel._9_1.cs)]\\n [!code-cpp[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/cpp/p-system.componentmodel._9_1.cpp)]\\n [!code-vb[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._9_1.vb)]\"\n  syntax:\n    content: public virtual Attribute this[Type attributeType] { get; }\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The <xref:System.Type> of the <xref:System.Attribute> to get from the collection.\n    return:\n      type: System.Attribute\n      description: The <xref:System.Attribute> with the specified type or, if the attribute does not exist, the default value for the attribute type.\n  overload: System.ComponentModel.AttributeCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute)\n  id: Matches(System.Attribute)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: Matches(Attribute)\n  nameWithType: AttributeCollection.Matches(Attribute)\n  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines whether a specified attribute is the same as an attribute in the collection.\n  remarks: \"An attribute can provide support for matching.  \\n  \\n The difference between the Matches and <xref:System.ComponentModel.AttributeCollection.Contains%2A> methods is that Matches calls the <xref:System.Attribute.Match%2A> method on an attribute, and <xref:System.ComponentModel.AttributeCollection.Contains%2A> calls the <xref:System.Object.Equals%2A> method.  \\n  \\n For most attributes, these methods do the same thing. For attributes that may have multiple flags, however, <xref:System.Attribute.Match%2A> is typically implemented so that it returns `true` if any of the flags are satisfied. For example, consider a data binding attribute with the Boolean flags \\\"SupportsSql\\\", \\\"SupportsOleDb\\\", and \\\"SupportsXml\\\". This attribute may be present on a property that supports all three data binding approaches. It will often be the case that a programmer needs to know only if a particular approach is available, not all three. Therefore, a programmer could use <xref:System.Attribute.Match%2A> with an instance of the attribute containing only the flags the programmer needs.\"\n  example:\n  - \"The following code example verifies that the <xref:System.ComponentModel.BrowsableAttribute> is a member of the collection and that it has been set to `true`. It assumes that `button1` and `textBox1` have been created on a form.  \\n  \\n [!code-cpp[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/cpp/m-system.componentmodel._11_1.cpp)]\\n [!code-vb[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._11_1.vb)]\\n [!code-cs[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/csharp/m-system.componentmodel._11_1.cs)]\"\n  syntax:\n    content: public bool Matches (Attribute attribute);\n    parameters:\n    - id: attribute\n      type: System.Attribute\n      description: An instance of <xref:System.Attribute> to compare with the attributes in this collection.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.AttributeCollection.Matches*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute[])\n  id: Matches(System.Attribute[])\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: Matches(Attribute[])\n  nameWithType: AttributeCollection.Matches(Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Determines whether the attributes in the specified array are the same as the attributes in the collection.\n  remarks: An attribute can provide support for matching.\n  example:\n  - \"The following code example compares the attributes in a button and a text box to see whether they match. It assumes that `button1` and `textBox1` have been created on a form.  \\n  \\n [!code-cpp[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/cpp/m-system.componentmodel._40_1.cpp)]\\n [!code-cs[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/csharp/m-system.componentmodel._40_1.cs)]\\n [!code-vb[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._40_1.vb)]\"\n  syntax:\n    content: public bool Matches (Attribute[] attributes);\n    parameters:\n    - id: attributes\n      type: System.Attribute[]\n      description: An array of <xref href=\"System.CodeDom.MemberAttributes\"></xref> to compare with the attributes in this collection.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.AttributeCollection.Matches*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count\n  id: System#Collections#ICollection#Count\n  isEii: true\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.Count\n  nameWithType: AttributeCollection.System.Collections.ICollection.Count\n  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.Count\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the number of elements contained in the collection.\n  syntax:\n    content: int System.Collections.ICollection.Count { get; }\n    return:\n      type: System.Int32\n      description: The number of elements contained in the collection.\n  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether access to the collection is synchronized (thread-safe).\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the collection is synchronized (thread-safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets an object that can be used to synchronize access to the collection.\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the collection.\n  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.ComponentModel.AttributeCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns an <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> for the <xref:System.Collections.IDictionary>.\n  overload: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ComponentModel.AttributeCollection.#ctor\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: AttributeCollection()\n  nameWithType: AttributeCollection.AttributeCollection()\n  fullName: System.ComponentModel.AttributeCollection.AttributeCollection()\n- uid: System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: AttributeCollection(Attribute[])\n  nameWithType: AttributeCollection.AttributeCollection(Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.AttributeCollection(Attribute[])\n- uid: System.Attribute[]\n  parent: System\n  isExternal: true\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute[]\n  spec.csharp:\n  - uid: System.Attribute\n    name: Attribute\n    nameWithType: Attribute\n    fullName: Attribute[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ComponentModel.AttributeCollection.Attributes\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Attributes\n  nameWithType: AttributeCollection.Attributes\n  fullName: System.ComponentModel.AttributeCollection.Attributes\n- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute)\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Contains(Attribute)\n  nameWithType: AttributeCollection.Contains(Attribute)\n  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Attribute\n  parent: System\n  isExternal: true\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute[])\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Contains(Attribute[])\n  nameWithType: AttributeCollection.Contains(Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute[])\n- uid: System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: AttributeCollection.CopyTo(Array,Int32)\n  fullName: System.ComponentModel.AttributeCollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ComponentModel.AttributeCollection.Count\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Count\n  nameWithType: AttributeCollection.Count\n  fullName: System.ComponentModel.AttributeCollection.Count\n- uid: System.ComponentModel.AttributeCollection.Empty\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Empty\n  nameWithType: AttributeCollection.Empty\n  fullName: System.ComponentModel.AttributeCollection.Empty\n- uid: System.ComponentModel.AttributeCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: AttributeCollection\n  nameWithType: AttributeCollection\n  fullName: System.ComponentModel.AttributeCollection\n- uid: System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: FromExisting(AttributeCollection,Attribute[])\n  nameWithType: AttributeCollection.FromExisting(AttributeCollection,Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.FromExisting(AttributeCollection,Attribute[])\n- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: GetDefaultAttribute(Type)\n  nameWithType: AttributeCollection.GetDefaultAttribute(Type)\n  fullName: System.ComponentModel.AttributeCollection.GetDefaultAttribute(Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.AttributeCollection.GetEnumerator\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: AttributeCollection.GetEnumerator()\n  fullName: System.ComponentModel.AttributeCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.ComponentModel.AttributeCollection.Item(System.Int32)\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: AttributeCollection.Item(Int32)\n  fullName: System.ComponentModel.AttributeCollection.Item(Int32)\n- uid: System.ComponentModel.AttributeCollection.Item(System.Type)\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Item(Type)\n  nameWithType: AttributeCollection.Item(Type)\n  fullName: System.ComponentModel.AttributeCollection.Item(Type)\n- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute)\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Matches(Attribute)\n  nameWithType: AttributeCollection.Matches(Attribute)\n  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute)\n- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute[])\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Matches(Attribute[])\n  nameWithType: AttributeCollection.Matches(Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute[])\n- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: System.Collections.ICollection.Count\n  nameWithType: AttributeCollection.System.Collections.ICollection.Count\n  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.Count\n- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.SyncRoot\n- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.ComponentModel.AttributeCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.ComponentModel.AttributeCollection.#ctor*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: AttributeCollection\n  nameWithType: AttributeCollection.AttributeCollection\n- uid: System.ComponentModel.AttributeCollection.Attributes*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Attributes\n  nameWithType: AttributeCollection.Attributes\n- uid: System.ComponentModel.AttributeCollection.Contains*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Contains\n  nameWithType: AttributeCollection.Contains\n- uid: System.ComponentModel.AttributeCollection.CopyTo*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: AttributeCollection.CopyTo\n- uid: System.ComponentModel.AttributeCollection.Count*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Count\n  nameWithType: AttributeCollection.Count\n- uid: System.ComponentModel.AttributeCollection.FromExisting*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: FromExisting\n  nameWithType: AttributeCollection.FromExisting\n- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: GetDefaultAttribute\n  nameWithType: AttributeCollection.GetDefaultAttribute\n- uid: System.ComponentModel.AttributeCollection.GetEnumerator*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: AttributeCollection.GetEnumerator\n- uid: System.ComponentModel.AttributeCollection.Item*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Item\n  nameWithType: AttributeCollection.Item\n- uid: System.ComponentModel.AttributeCollection.Matches*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: Matches\n  nameWithType: AttributeCollection.Matches\n- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: System.Collections.ICollection.Count\n  nameWithType: AttributeCollection.System.Collections.ICollection.Count\n- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot\n- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.ComponentModel.AttributeCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator\n"}