{"nodes":[{"pos":[770,857],"content":"Enforces and catches exceptions that are thrown in a data model and displays the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enforces and catches exceptions that are thrown in a data model and displays the error.","pos":[0,87]}]},{"pos":[870,2008],"content":"The DynamicValidator control can be used with data fields or data entities. It catches exceptions that are thrown in LINQ-to-SQL classes or entity in extensibility methods in the data model. The DynamicValidator control is associated with the controls that accept user input. For example, a DynamicValidator control that is associated with a text box that accepts user input for a UnitsInStock field in a Products table catches and displays the exception that is thrown if the input is greater or less than the allowable units in the data model.       By default, ASP.NET Dynamic Data does not display all exceptions from the data model in the page, because some database exceptions might contain confidential information. Dynamic Data displays <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A> values only. If you want your application to display other exceptions, you can create a DynamicValidator control, provide the exceptions that you want to display, and attach the exceptions to the DynamicValidator control. The exceptions that are thrown in the data model will be displayed in all pages in the application.","needQuote":false,"needEscape":true,"nodes":[{"content":"The DynamicValidator control can be used with data fields or data entities. It catches exceptions that are thrown in LINQ-to-SQL classes or entity in extensibility methods in the data model. The DynamicValidator control is associated with the controls that accept user input. For example, a DynamicValidator control that is associated with a text box that accepts user input for a UnitsInStock field in a Products table catches and displays the exception that is thrown if the input is greater or less than the allowable units in the data model.       By default, ASP.NET Dynamic Data does not display all exceptions from the data model in the page, because some database exceptions might contain confidential information. Dynamic Data displays <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A> values only. If you want your application to display other exceptions, you can create a DynamicValidator control, provide the exceptions that you want to display, and attach the exceptions to the DynamicValidator control. The exceptions that are thrown in the data model will be displayed in all pages in the application.","pos":[0,1136],"nodes":[{"content":"The DynamicValidator control can be used with data fields or data entities.","pos":[0,75]},{"content":"It catches exceptions that are thrown in LINQ-to-SQL classes or entity in extensibility methods in the data model.","pos":[76,190]},{"content":"The DynamicValidator control is associated with the controls that accept user input.","pos":[191,275]},{"content":"For example, a DynamicValidator control that is associated with a text box that accepts user input for a UnitsInStock field in a Products table catches and displays the exception that is thrown if the input is greater or less than the allowable units in the data model.","pos":[276,545]},{"content":"By default, ASP.NET Dynamic Data does not display all exceptions from the data model in the page, because some database exceptions might contain confidential information.","pos":[552,722]},{"content":"Dynamic Data displays &lt;xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A&gt; values only.","pos":[723,827],"source":" Dynamic Data displays <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A> values only."},{"content":"If you want your application to display other exceptions, you can create a DynamicValidator control, provide the exceptions that you want to display, and attach the exceptions to the DynamicValidator control.","pos":[828,1036]},{"content":"The exceptions that are thrown in the data model will be displayed in all pages in the application.","pos":[1037,1136]}]}]},{"pos":[15257,15358],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.DynamicData.DynamicValidator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.DynamicData.DynamicValidator\"></xref> class."},{"pos":[15884,15920],"content":"Gets or sets the column to validate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the column to validate.","pos":[0,36]}]},{"pos":[16083,16201],"content":"The column to validate, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a data entity is validated.","needQuote":true,"needEscape":true,"source":"The column to validate, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if a data entity is validated."},{"pos":[16678,16718],"content":"Gets the name of the column to validate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the column to validate.","pos":[0,40]}]},{"pos":[16833,16963],"content":"The name of the column to validate, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a data entity is validated.","needQuote":true,"needEscape":true,"source":"The name of the column to validate, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if a data entity is validated."},{"pos":[17508,17637],"content":"Indicates whether the properties of the specified <bpt id=\"p1\">&lt;xref href=\"System.Web.DynamicData.DynamicValidator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control are valid.","needQuote":true,"needEscape":true,"source":"Indicates whether the properties of the specified <xref href=\"System.Web.DynamicData.DynamicValidator\"></xref> control are valid."},{"pos":[17649,17901],"content":"This method is overridden from the base class. The call to the base class fails if the control you try to validate does not have a validation property. For example if the control is a <xref:System.Web.UI.WebControls.GridView>, the base class will fail.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is overridden from the base class. The call to the base class fails if the control you try to validate does not have a validation property. For example if the control is a <xref:System.Web.UI.WebControls.GridView>, the base class will fail.","pos":[0,252],"nodes":[{"content":"This method is overridden from the base class.","pos":[0,46]},{"content":"The call to the base class fails if the control you try to validate does not have a validation property.","pos":[47,151]},{"content":"For example if the control is a &lt;xref:System.Web.UI.WebControls.GridView&gt;, the base class will fail.","pos":[152,252],"source":" For example if the control is a <xref:System.Web.UI.WebControls.GridView>, the base class will fail."}]}]},{"pos":[18053,18254],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if the properties of the specified validation control are valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if the properties of the specified validation control are valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18776,18847],"content":"Determines whether the value in the input control to validate is valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the value in the input control to validate is valid.","pos":[0,71]}]},{"pos":[18992,19181],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the validation control that is evaluated is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the validation control that is evaluated is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19714,19879],"content":"Raises the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Init\" name=\"Init\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event to initialize the <bpt id=\"p2\">&lt;xref href=\"System.Web.DynamicData.DynamicValidator\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Raises the <xref uid=\"langword_csharp_Init\" name=\"Init\" href=\"\"></xref> event to initialize the <xref href=\"System.Web.DynamicData.DynamicValidator\"></xref> control."},{"pos":[20025,20040],"content":"The event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event data.","pos":[0,15]}]},{"pos":[20619,20691],"content":"Sets up a validation exception if an exception occurs in the data model.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets up a validation exception if an exception occurs in the data model.","pos":[0,72]}]},{"pos":[20704,21164],"content":"This method is called when an exception is thrown. A column-specific validator fails when a validation exception contains an associated inner exception, but a global validator fail when a non-validation exception occurs.      > [!NOTE] >  Only use this method if the exception is a <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A>. If the exception is caused by a database error, using this method can display a sensitive database error","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called when an exception is thrown.","pos":[0,50]},{"content":"A column-specific validator fails when a validation exception contains an associated inner exception, but a global validator fail when a non-validation exception occurs.","pos":[51,220]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Only use this method if the exception is a &lt;xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A&gt;.","pos":[226,352],"source":"      > [!NOTE] >  Only use this method if the exception is a <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A>."},{"content":"If the exception is caused by a database error, using this method can display a sensitive database error","pos":[353,457]}]},{"pos":[21337,21366],"content":"The exception that is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception that is thrown.","pos":[0,29]}]},{"pos":[21899,21963],"content":"Gets or sets validation exception that occurs during validation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets validation exception that occurs during validation.","pos":[0,64]}]},{"pos":[21975,22134],"content":"This property represents the validation exception that is thrown if an error occurs when a value is edited or when a new value is inserted into the data model.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property represents the validation exception that is thrown if an error occurs when a value is edited or when a new value is inserted into the data model.","pos":[0,159]}]},{"pos":[22280,22320],"content":"The validation exception that is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The validation exception that is thrown.","pos":[0,40]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.DynamicData.DynamicValidator\n  id: DynamicValidator\n  children:\n  - System.Web.DynamicData.DynamicValidator.#ctor\n  - System.Web.DynamicData.DynamicValidator.Column\n  - System.Web.DynamicData.DynamicValidator.ColumnName\n  - System.Web.DynamicData.DynamicValidator.ControlPropertiesValid\n  - System.Web.DynamicData.DynamicValidator.EvaluateIsValid\n  - System.Web.DynamicData.DynamicValidator.OnInit(System.EventArgs)\n  - System.Web.DynamicData.DynamicValidator.ValidateException(System.Exception)\n  - System.Web.DynamicData.DynamicValidator.ValidationException\n  langs:\n  - csharp\n  name: DynamicValidator\n  nameWithType: DynamicValidator\n  fullName: System.Web.DynamicData.DynamicValidator\n  type: Class\n  summary: Enforces and catches exceptions that are thrown in a data model and displays the error.\n  remarks: \"The DynamicValidator control can be used with data fields or data entities. It catches exceptions that are thrown in LINQ-to-SQL classes or entity in extensibility methods in the data model. The DynamicValidator control is associated with the controls that accept user input. For example, a DynamicValidator control that is associated with a text box that accepts user input for a UnitsInStock field in a Products table catches and displays the exception that is thrown if the input is greater or less than the allowable units in the data model.  \\n  \\n By default, ASP.NET Dynamic Data does not display all exceptions from the data model in the page, because some database exceptions might contain confidential information. Dynamic Data displays <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A> values only. If you want your application to display other exceptions, you can create a DynamicValidator control, provide the exceptions that you want to display, and attach the exceptions to the DynamicValidator control. The exceptions that are thrown in the data model will be displayed in all pages in the application.\"\n  example:\n  - \"The following example shows how to create a DynamicValidator control class that displays other exceptions in all pages.  \\n  \\n [Visual Basic]  \\n  \\n```  \\n''' <summary>   \\n''' Display other exceptions in all pages.   \\n''' </summary>   \\nPublic Class MyDynamicValidator   \\n    Inherits DynamicValidator   \\n  \\n    Protected Overloads Overrides Sub ValidateException(ByVal exception As Exception)   \\n        ' If it's not an exception that DynamicValidator displays find   \\n        ' the innermost exception.   \\n        If Not (TypeOf exception Is IDynamicValidatorException) AndAlso _  \\n                Not (TypeOf exception Is ValidationException) Then   \\n            While exception.InnerException IsNot Nothing   \\n                exception = exception.InnerException   \\n            End While   \\n  \\n            ' Wrap it in a ValidationException so that the base code   \\n            ' does not ignore it.   \\n            If ExceptionShouldBeDisplayedInPage(exception) Then   \\n                exception = New ValidationException(Nothing, exception)   \\n            End If   \\n        End If   \\n  \\n        ' Call the base class for the exception that is modified.  \\n        MyBase.ValidateException(exception)   \\n    End Sub   \\n  \\n    Private Function ExceptionShouldBeDisplayedInPage(ByVal e As Exception) _  \\n            As Boolean   \\n        ' Add code to find the exception and   \\n        ' decide whether it should be shown in the page.  \\n  \\n        Return True   \\n    End Function   \\nEnd Class  \\n```  \\n  \\n [C#]  \\n  \\n```  \\n/// <summary>  \\n/// Display other exceptions in all pages.   \\n/// </summary>  \\npublic class MyDynamicValidator : DynamicValidator {  \\n  \\n    protected override void ValidateException(Exception exception) {  \\n        // If it's not an exception that DynamicValidator displays find   \\n        // the innermost exception.  \\n        if (!(exception is IDynamicValidatorException) && !(exception   \\n              is ValidationException)) {  \\n            while (exception.InnerException != null) {  \\n                exception = exception.InnerException;  \\n            }  \\n  \\n            // Wrap it in a ValidationException so that the base code   \\n            // does not ignore it.  \\n            if (ExceptionShouldBeDisplayedInPage(exception)) {  \\n                exception = new ValidationException(null, exception);  \\n            }  \\n        }  \\n  \\n        // Call the base class on the exception that is modified.  \\n        base.ValidateException(exception);  \\n    }  \\n  \\n    private bool ExceptionShouldBeDisplayedInPage(Exception e) {  \\n        // Add your code to find the exception and  \\n        // decides whether it should be shown in the page.  \\n  \\n           return true;  \\n    }  \\n}  \\n```  \\n  \\n The following example shows how to use tag remapping in the web.config file to display the exception in all the Web pages.  \\n  \\n```  \\n<pages>  \\n  <tagMapping>  \\n    <add tagType=\\\"System.Web.DynamicData.DynamicValidator\\\"   \\n        mappedTagType=\\\"MyDynamicValidator\\\"/>  \\n  </tagMapping>  \\n</pages>  \\n```\"\n  syntax:\n    content: >-\n      [System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicValidator), \"DynamicValidator.bmp\")]\n\n      public class DynamicValidator : System.Web.UI.WebControls.BaseValidator\n  inheritance:\n  - System.Object\n  - System.Web.UI.Control\n  - System.Web.UI.WebControls.WebControl\n  - System.Web.UI.WebControls.Label\n  - System.Web.UI.WebControls.BaseValidator\n  implements: []\n  inheritedMembers:\n  - System.Web.UI.Control.Adapter\n  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)\n  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)\n  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory\n  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)\n  - System.Web.UI.Control.BindingContainer\n  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)\n  - System.Web.UI.Control.ChildControlsCreated\n  - System.Web.UI.Control.ClearCachedClientID\n  - System.Web.UI.Control.ClearChildControlState\n  - System.Web.UI.Control.ClearChildState\n  - System.Web.UI.Control.ClearChildViewState\n  - System.Web.UI.Control.ClearEffectiveClientIDMode\n  - System.Web.UI.Control.ClientID\n  - System.Web.UI.Control.ClientIDMode\n  - System.Web.UI.Control.ClientIDSeparator\n  - System.Web.UI.Control.Context\n  - System.Web.UI.Control.Controls\n  - System.Web.UI.Control.CreateChildControls\n  - System.Web.UI.Control.CreateControlCollection\n  - System.Web.UI.Control.DataBind\n  - System.Web.UI.Control.DataBind(System.Boolean)\n  - System.Web.UI.Control.DataBindChildren\n  - System.Web.UI.Control.DataBinding\n  - System.Web.UI.Control.DataItemContainer\n  - System.Web.UI.Control.DataKeysContainer\n  - System.Web.UI.Control.DesignMode\n  - System.Web.UI.Control.Dispose\n  - System.Web.UI.Control.Disposed\n  - System.Web.UI.Control.EnableViewState\n  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)\n  - System.Web.UI.Control.EnsureChildControls\n  - System.Web.UI.Control.EnsureID\n  - System.Web.UI.Control.Events\n  - System.Web.UI.Control.FindControl(System.String)\n  - System.Web.UI.Control.FindControl(System.String,System.Int32)\n  - System.Web.UI.Control.Focus\n  - System.Web.UI.Control.GetDesignModeState\n  - System.Web.UI.Control.GetRouteUrl(System.Object)\n  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)\n  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)\n  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)\n  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)\n  - System.Web.UI.Control.HasChildViewState\n  - System.Web.UI.Control.HasControls\n  - System.Web.UI.Control.HasEvents\n  - System.Web.UI.Control.ID\n  - System.Web.UI.Control.IdSeparator\n  - System.Web.UI.Control.Init\n  - System.Web.UI.Control.IsChildControlStateCleared\n  - System.Web.UI.Control.IsLiteralContent\n  - System.Web.UI.Control.IsTrackingViewState\n  - System.Web.UI.Control.IsViewStateEnabled\n  - System.Web.UI.Control.Load\n  - System.Web.UI.Control.LoadControlState(System.Object)\n  - System.Web.UI.Control.LoadViewStateByID\n  - System.Web.UI.Control.MapPathSecure(System.String)\n  - System.Web.UI.Control.NamingContainer\n  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)\n  - System.Web.UI.Control.OnDataBinding(System.EventArgs)\n  - System.Web.UI.Control.OnLoad(System.EventArgs)\n  - System.Web.UI.Control.OpenFile(System.String)\n  - System.Web.UI.Control.Page\n  - System.Web.UI.Control.Parent\n  - System.Web.UI.Control.PreRender\n  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)\n  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)\n  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)\n  - System.Web.UI.Control.RenderingCompatibility\n  - System.Web.UI.Control.ResolveAdapter\n  - System.Web.UI.Control.ResolveClientUrl(System.String)\n  - System.Web.UI.Control.ResolveUrl(System.String)\n  - System.Web.UI.Control.SaveControlState\n  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)\n  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)\n  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)\n  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)\n  - System.Web.UI.Control.Site\n  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData\n  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings\n  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings\n  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions\n  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions\n  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)\n  - System.Web.UI.Control.TemplateControl\n  - System.Web.UI.Control.TemplateSourceDirectory\n  - System.Web.UI.Control.UniqueID\n  - System.Web.UI.Control.Unload\n  - System.Web.UI.Control.ValidateRequestMode\n  - System.Web.UI.Control.ViewState\n  - System.Web.UI.Control.ViewStateIgnoresCase\n  - System.Web.UI.Control.ViewStateMode\n  - System.Web.UI.Control.Visible\n  - System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.BaseValidator.AssociatedControlID\n  - System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)\n  - System.Web.UI.WebControls.BaseValidator.ControlToValidate\n  - System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel\n  - System.Web.UI.WebControls.BaseValidator.Display\n  - System.Web.UI.WebControls.BaseValidator.EnableClientScript\n  - System.Web.UI.WebControls.BaseValidator.Enabled\n  - System.Web.UI.WebControls.BaseValidator.ErrorMessage\n  - System.Web.UI.WebControls.BaseValidator.ForeColor\n  - System.Web.UI.WebControls.BaseValidator.GetControlRenderID(System.String)\n  - System.Web.UI.WebControls.BaseValidator.GetControlValidationValue(System.String)\n  - System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)\n  - System.Web.UI.WebControls.BaseValidator.IsUnobtrusive\n  - System.Web.UI.WebControls.BaseValidator.IsValid\n  - System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)\n  - System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)\n  - System.Web.UI.WebControls.BaseValidator.PropertiesValid\n  - System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript\n  - System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration\n  - System.Web.UI.WebControls.BaseValidator.Render(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.BaseValidator.RenderUplevel\n  - System.Web.UI.WebControls.BaseValidator.SetFocusOnError\n  - System.Web.UI.WebControls.BaseValidator.Text\n  - System.Web.UI.WebControls.BaseValidator.Validate\n  - System.Web.UI.WebControls.BaseValidator.ValidationGroup\n  - System.Web.UI.WebControls.Label.AddParsedSubObject(System.Object)\n  - System.Web.UI.WebControls.Label.LoadViewState(System.Object)\n  - System.Web.UI.WebControls.Label.RenderContents(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.Label.SupportsDisabledAttribute\n  - System.Web.UI.WebControls.Label.TagKey\n  - System.Web.UI.WebControls.WebControl.AccessKey\n  - System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)\n  - System.Web.UI.WebControls.WebControl.Attributes\n  - System.Web.UI.WebControls.WebControl.BackColor\n  - System.Web.UI.WebControls.WebControl.BorderColor\n  - System.Web.UI.WebControls.WebControl.BorderStyle\n  - System.Web.UI.WebControls.WebControl.BorderWidth\n  - System.Web.UI.WebControls.WebControl.ControlStyle\n  - System.Web.UI.WebControls.WebControl.ControlStyleCreated\n  - System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)\n  - System.Web.UI.WebControls.WebControl.CreateControlStyle\n  - System.Web.UI.WebControls.WebControl.CssClass\n  - System.Web.UI.WebControls.WebControl.DisabledCssClass\n  - System.Web.UI.WebControls.WebControl.EnableTheming\n  - System.Web.UI.WebControls.WebControl.Font\n  - System.Web.UI.WebControls.WebControl.HasAttributes\n  - System.Web.UI.WebControls.WebControl.Height\n  - System.Web.UI.WebControls.WebControl.IsEnabled\n  - System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)\n  - System.Web.UI.WebControls.WebControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.WebControl.RenderEndTag(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.WebControl.SaveViewState\n  - System.Web.UI.WebControls.WebControl.SkinID\n  - System.Web.UI.WebControls.WebControl.Style\n  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)\n  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)\n  - System.Web.UI.WebControls.WebControl.TabIndex\n  - System.Web.UI.WebControls.WebControl.TagName\n  - System.Web.UI.WebControls.WebControl.ToolTip\n  - System.Web.UI.WebControls.WebControl.TrackViewState\n  - System.Web.UI.WebControls.WebControl.Width\n  platform:\n  - net462\n- uid: System.Web.DynamicData.DynamicValidator.#ctor\n  id: '#ctor'\n  parent: System.Web.DynamicData.DynamicValidator\n  langs:\n  - csharp\n  name: DynamicValidator()\n  nameWithType: DynamicValidator.DynamicValidator()\n  fullName: System.Web.DynamicData.DynamicValidator.DynamicValidator()\n  type: Constructor\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Initializes a new instance of the <xref href=\"System.Web.DynamicData.DynamicValidator\"></xref> class.\n  syntax:\n    content: public DynamicValidator ();\n    parameters: []\n  overload: System.Web.DynamicData.DynamicValidator.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.DynamicValidator.Column\n  id: Column\n  parent: System.Web.DynamicData.DynamicValidator\n  langs:\n  - csharp\n  name: Column\n  nameWithType: DynamicValidator.Column\n  fullName: System.Web.DynamicData.DynamicValidator.Column\n  type: Property\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Gets or sets the column to validate.\n  syntax:\n    content: public System.Web.DynamicData.MetaColumn Column { get; set; }\n    return:\n      type: System.Web.DynamicData.MetaColumn\n      description: The column to validate, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if a data entity is validated.\n  overload: System.Web.DynamicData.DynamicValidator.Column*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.DynamicValidator.ColumnName\n  id: ColumnName\n  parent: System.Web.DynamicData.DynamicValidator\n  langs:\n  - csharp\n  name: ColumnName\n  nameWithType: DynamicValidator.ColumnName\n  fullName: System.Web.DynamicData.DynamicValidator.ColumnName\n  type: Property\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Gets the name of the column to validate.\n  syntax:\n    content: public string ColumnName { get; }\n    return:\n      type: System.String\n      description: The name of the column to validate, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if a data entity is validated.\n  overload: System.Web.DynamicData.DynamicValidator.ColumnName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.DynamicValidator.ControlPropertiesValid\n  id: ControlPropertiesValid\n  parent: System.Web.DynamicData.DynamicValidator\n  langs:\n  - csharp\n  name: ControlPropertiesValid()\n  nameWithType: DynamicValidator.ControlPropertiesValid()\n  fullName: System.Web.DynamicData.DynamicValidator.ControlPropertiesValid()\n  type: Method\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Indicates whether the properties of the specified <xref href=\"System.Web.DynamicData.DynamicValidator\"></xref> control are valid.\n  remarks: This method is overridden from the base class. The call to the base class fails if the control you try to validate does not have a validation property. For example if the control is a <xref:System.Web.UI.WebControls.GridView>, the base class will fail.\n  syntax:\n    content: protected override bool ControlPropertiesValid ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if the properties of the specified validation control are valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.DynamicData.DynamicValidator.ControlPropertiesValid*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.DynamicValidator.EvaluateIsValid\n  id: EvaluateIsValid\n  parent: System.Web.DynamicData.DynamicValidator\n  langs:\n  - csharp\n  name: EvaluateIsValid()\n  nameWithType: DynamicValidator.EvaluateIsValid()\n  fullName: System.Web.DynamicData.DynamicValidator.EvaluateIsValid()\n  type: Method\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Determines whether the value in the input control to validate is valid.\n  syntax:\n    content: protected override bool EvaluateIsValid ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the validation control that is evaluated is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.DynamicData.DynamicValidator.EvaluateIsValid*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.DynamicValidator.OnInit(System.EventArgs)\n  id: OnInit(System.EventArgs)\n  parent: System.Web.DynamicData.DynamicValidator\n  langs:\n  - csharp\n  name: OnInit(EventArgs)\n  nameWithType: DynamicValidator.OnInit(EventArgs)\n  fullName: System.Web.DynamicData.DynamicValidator.OnInit(EventArgs)\n  type: Method\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Raises the <xref uid=\"langword_csharp_Init\" name=\"Init\" href=\"\"></xref> event to initialize the <xref href=\"System.Web.DynamicData.DynamicValidator\"></xref> control.\n  syntax:\n    content: protected override void OnInit (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: The event data.\n  overload: System.Web.DynamicData.DynamicValidator.OnInit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.DynamicValidator.ValidateException(System.Exception)\n  id: ValidateException(System.Exception)\n  parent: System.Web.DynamicData.DynamicValidator\n  langs:\n  - csharp\n  name: ValidateException(Exception)\n  nameWithType: DynamicValidator.ValidateException(Exception)\n  fullName: System.Web.DynamicData.DynamicValidator.ValidateException(Exception)\n  type: Method\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Sets up a validation exception if an exception occurs in the data model.\n  remarks: \"This method is called when an exception is thrown. A column-specific validator fails when a validation exception contains an associated inner exception, but a global validator fail when a non-validation exception occurs.  \\n  \\n> [!NOTE]\\n>  Only use this method if the exception is a <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A>. If the exception is caused by a database error, using this method can display a sensitive database error\"\n  syntax:\n    content: protected virtual void ValidateException (Exception exception);\n    parameters:\n    - id: exception\n      type: System.Exception\n      description: The exception that is thrown.\n  overload: System.Web.DynamicData.DynamicValidator.ValidateException*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.DynamicValidator.ValidationException\n  id: ValidationException\n  parent: System.Web.DynamicData.DynamicValidator\n  langs:\n  - csharp\n  name: ValidationException\n  nameWithType: DynamicValidator.ValidationException\n  fullName: System.Web.DynamicData.DynamicValidator.ValidationException\n  type: Property\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Gets or sets validation exception that occurs during validation.\n  remarks: This property represents the validation exception that is thrown if an error occurs when a value is edited or when a new value is inserted into the data model.\n  syntax:\n    content: protected virtual Exception ValidationException { get; set; }\n    return:\n      type: System.Exception\n      description: The validation exception that is thrown.\n  overload: System.Web.DynamicData.DynamicValidator.ValidationException*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.UI.WebControls.BaseValidator\n  isExternal: false\n  name: System.Web.UI.WebControls.BaseValidator\n- uid: System.Web.DynamicData.DynamicValidator.#ctor\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: DynamicValidator()\n  nameWithType: DynamicValidator.DynamicValidator()\n  fullName: System.Web.DynamicData.DynamicValidator.DynamicValidator()\n- uid: System.Web.DynamicData.DynamicValidator.Column\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: Column\n  nameWithType: DynamicValidator.Column\n  fullName: System.Web.DynamicData.DynamicValidator.Column\n- uid: System.Web.DynamicData.MetaColumn\n  parent: System.Web.DynamicData\n  isExternal: false\n  name: MetaColumn\n  nameWithType: MetaColumn\n  fullName: System.Web.DynamicData.MetaColumn\n- uid: System.Web.DynamicData.DynamicValidator.ColumnName\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: ColumnName\n  nameWithType: DynamicValidator.ColumnName\n  fullName: System.Web.DynamicData.DynamicValidator.ColumnName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.DynamicData.DynamicValidator.ControlPropertiesValid\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: ControlPropertiesValid()\n  nameWithType: DynamicValidator.ControlPropertiesValid()\n  fullName: System.Web.DynamicData.DynamicValidator.ControlPropertiesValid()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.DynamicData.DynamicValidator.EvaluateIsValid\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: EvaluateIsValid()\n  nameWithType: DynamicValidator.EvaluateIsValid()\n  fullName: System.Web.DynamicData.DynamicValidator.EvaluateIsValid()\n- uid: System.Web.DynamicData.DynamicValidator.OnInit(System.EventArgs)\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: OnInit(EventArgs)\n  nameWithType: DynamicValidator.OnInit(EventArgs)\n  fullName: System.Web.DynamicData.DynamicValidator.OnInit(EventArgs)\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Web.DynamicData.DynamicValidator.ValidateException(System.Exception)\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: ValidateException(Exception)\n  nameWithType: DynamicValidator.ValidateException(Exception)\n  fullName: System.Web.DynamicData.DynamicValidator.ValidateException(Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Web.DynamicData.DynamicValidator.ValidationException\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: ValidationException\n  nameWithType: DynamicValidator.ValidationException\n  fullName: System.Web.DynamicData.DynamicValidator.ValidationException\n- uid: System.Web.DynamicData.DynamicValidator.#ctor*\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: DynamicValidator\n  nameWithType: DynamicValidator.DynamicValidator\n- uid: System.Web.DynamicData.DynamicValidator.Column*\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: Column\n  nameWithType: DynamicValidator.Column\n- uid: System.Web.DynamicData.DynamicValidator.ColumnName*\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: ColumnName\n  nameWithType: DynamicValidator.ColumnName\n- uid: System.Web.DynamicData.DynamicValidator.ControlPropertiesValid*\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: ControlPropertiesValid\n  nameWithType: DynamicValidator.ControlPropertiesValid\n- uid: System.Web.DynamicData.DynamicValidator.EvaluateIsValid*\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: EvaluateIsValid\n  nameWithType: DynamicValidator.EvaluateIsValid\n- uid: System.Web.DynamicData.DynamicValidator.OnInit*\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: OnInit\n  nameWithType: DynamicValidator.OnInit\n- uid: System.Web.DynamicData.DynamicValidator.ValidateException*\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: ValidateException\n  nameWithType: DynamicValidator.ValidateException\n- uid: System.Web.DynamicData.DynamicValidator.ValidationException*\n  parent: System.Web.DynamicData.DynamicValidator\n  isExternal: false\n  name: ValidationException\n  nameWithType: DynamicValidator.ValidationException\n"}