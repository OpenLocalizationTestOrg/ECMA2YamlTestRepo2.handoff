{"nodes":[{"pos":[1380,1615],"content":"Provides a <bpt id=\"p1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> implementation so that you can use the \"weak event listener\" pattern to attach listeners for the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event.","needQuote":true,"needEscape":true,"source":"Provides a <xref href=\"System.Windows.WeakEventManager\"></xref> implementation so that you can use the \"weak event listener\" pattern to attach listeners for the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event."},{"pos":[1627,1864],"content":"In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>. You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events.","needQuote":true,"needEscape":true,"nodes":[{"content":"In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>. You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events.","pos":[0,237],"nodes":[{"content":"In order to be listeners in this pattern, your listener objects must implement &lt;xref:System.Windows.IWeakEventListener&gt;.","pos":[0,120],"source":"In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>."},{"content":"You do not need to implement &lt;xref:System.Windows.IWeakEventListener&gt; on the class that is the source of the events.","pos":[121,237],"source":" You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events."}]}]},{"pos":[4211,4395],"content":"Adds the specified event handler, which is called when specified source raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event for the specified property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the specified event handler, which is called when specified source raises the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event for the specified property.","pos":[0,184],"source":"Adds the specified event handler, which is called when specified source raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event for the specified property."}]},{"pos":[4407,4694],"content":"Use this method to specify the event handler you want to use to subscribe to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event..  When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this method to specify the event handler you want to use to subscribe to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event..  When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface.","pos":[0,287],"nodes":[{"content":"Use this method to specify the event handler you want to use to subscribe to the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event..","pos":[0,156],"source":"Use this method to specify the event handler you want to use to subscribe to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.."},{"content":"When you use this method, your listener object does not need to implement the &lt;xref:System.Windows.IWeakEventListener&gt; interface.","pos":[158,287],"source":"  When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface."}]}]},{"pos":[5003,5115],"content":"The source object that the raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source object that the raises the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event.","pos":[0,112],"source":"The source object that the raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event."}]},{"pos":[5233,5337],"content":"The delegate that handles the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate that handles the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event.","pos":[0,104],"source":"The delegate that handles the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event."}]},{"pos":[5406,5544],"content":"The name of the property that exists on `source` upon which to listen for changes. Set to <xref:System.String> to indicate \"any property\".","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the property that exists on <ph id=\"ph1\">`source`</ph> upon which to listen for changes.","pos":[0,82],"source":"The name of the property that exists on `source` upon which to listen for changes."},{"content":"Set to &lt;xref:System.String&gt; to indicate \"any property\".","pos":[83,138],"source":" Set to <xref:System.String> to indicate \"any property\"."}]},{"pos":[5735,5820],"content":"<ph id=\"ph1\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5923,5984],"content":"More than one method is associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handler</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"More than one method is associated with <code>handler</code>."},{"pos":[6754,6831],"content":"Adds the specified listener to the list of listeners on the specified source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the specified listener to the list of listeners on the specified source.","pos":[0,77]}]},{"pos":[7115,7141],"content":"The object with the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object with the event.","pos":[0,26]}]},{"pos":[7226,7258],"content":"The object to add as a listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to add as a listener.","pos":[0,32]}]},{"pos":[7327,7465],"content":"The name of the property that exists on `source` upon which to listen for changes. Set to <xref:System.String> to indicate \"any property\".","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the property that exists on <ph id=\"ph1\">`source`</ph> upon which to listen for changes.","pos":[0,82],"source":"The name of the property that exists on `source` upon which to listen for changes."},{"content":"Set to &lt;xref:System.String&gt; to indicate \"any property\".","pos":[83,138],"source":" Set to <xref:System.String> to indicate \"any property\"."}]},{"pos":[8015,8138],"content":"Returns a new object to contain listeners to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a new object to contain listeners to the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event.","pos":[0,123],"source":"Returns a new object to contain listeners to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event."}]},{"pos":[8353,8468],"content":"A new object to contain listeners to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new object to contain listeners to the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event.","pos":[0,115],"source":"A new object to contain listeners to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event."}]},{"pos":[9123,9205],"content":"Removes listeners that are no longer active from the data for the provided source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes listeners that are no longer active from the data for the provided source.","pos":[0,82]}]},{"pos":[9382,9425],"content":"Source object to remove all listeners from.","needQuote":true,"needEscape":true,"nodes":[{"content":"Source object to remove all listeners from.","pos":[0,43]}]},{"pos":[9486,9599],"content":"The data to purge. This is expected to be a <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data to purge.","pos":[0,18]},{"content":"This is expected to be a <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[19,113],"source":" This is expected to be a <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."}]},{"pos":[9665,9785],"content":"Set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to stop listening and to completely remove all data.","needQuote":true,"needEscape":true,"source":"Set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to stop listening and to completely remove all data."},{"pos":[9844,10009],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if some entries were removed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if some entries were removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11003,11065],"content":"Removes the specified event handler from the specified source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the specified event handler from the specified source.","pos":[0,62]}]},{"pos":[11377,11489],"content":"The source object that the raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source object that the raises the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event.","pos":[0,112],"source":"The source object that the raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event."}]},{"pos":[11607,11711],"content":"The delegate that handles the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate that handles the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event.","pos":[0,104],"source":"The delegate that handles the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event."}]},{"pos":[11780,11926],"content":"The name of the property that exists on `source` upon which to stop listening for changes. Set to <xref:System.String> to indicate \"any property\".","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the property that exists on <ph id=\"ph1\">`source`</ph> upon which to stop listening for changes.","pos":[0,90],"source":"The name of the property that exists on `source` upon which to stop listening for changes."},{"content":"Set to &lt;xref:System.String&gt; to indicate \"any property\".","pos":[91,146],"source":" Set to <xref:System.String> to indicate \"any property\"."}]},{"pos":[12120,12205],"content":"<ph id=\"ph1\">&lt;code&gt;handler&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12308,12369],"content":"More than one method is associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handler</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"More than one method is associated with <code>handler</code>."},{"pos":[13154,13235],"content":"Removes the specified listener from the list of listeners on the provided source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the specified listener from the list of listeners on the provided source.","pos":[0,81]}]},{"pos":[13522,13561],"content":"The object to remove the listener from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to remove the listener from.","pos":[0,39]}]},{"pos":[13646,13669],"content":"The listener to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The listener to remove.","pos":[0,23]}]},{"pos":[13738,13884],"content":"The name of the property that exists on `source` upon which to stop listening for changes. Set to <xref:System.String> to indicate \"any property\".","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the property that exists on <ph id=\"ph1\">`source`</ph> upon which to stop listening for changes.","pos":[0,90],"source":"The name of the property that exists on `source` upon which to stop listening for changes."},{"content":"Set to &lt;xref:System.String&gt; to indicate \"any property\".","pos":[91,146],"source":" Set to <xref:System.String> to indicate \"any property\"."}]},{"pos":[14480,14602],"content":"Begins listening for the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event on the provided source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins listening for the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event on the provided source.","pos":[0,122],"source":"Begins listening for the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event on the provided source."}]},{"pos":[14614,14811],"content":"This does not specify a property; once the event manager is started, all properties on the source will have <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> notification enabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"This does not specify a property; once the event manager is started, all properties on the source will have &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; notification enabled.","pos":[0,197],"source":"This does not specify a property; once the event manager is started, all properties on the source will have <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> notification enabled."}]},{"pos":[14969,15080],"content":"The object on which to start listening for <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object on which to start listening for &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;.","pos":[0,111],"source":"The object on which to start listening for <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>."}]},{"pos":[15671,15792],"content":"Stops listening for the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event on the provided source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stops listening for the &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt; event on the provided source.","pos":[0,121],"source":"Stops listening for the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event on the provided source."}]},{"pos":[15949,16066],"content":"The source object on which to stop listening for <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source object on which to stop listening for &lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;.","pos":[0,117],"source":"The source object on which to stop listening for <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.PropertyChangedEventManager\n  id: PropertyChangedEventManager\n  children:\n  - System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  - System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  - System.ComponentModel.PropertyChangedEventManager.NewListenerList\n  - System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)\n  - System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  - System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  - System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)\n  - System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)\n  langs:\n  - csharp\n  name: PropertyChangedEventManager\n  nameWithType: PropertyChangedEventManager\n  fullName: System.ComponentModel.PropertyChangedEventManager\n  type: Class\n  summary: Provides a <xref href=\"System.Windows.WeakEventManager\"></xref> implementation so that you can use the \"weak event listener\" pattern to attach listeners for the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.\n  remarks: In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>. You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events.\n  syntax:\n    content: 'public class PropertyChangedEventManager : System.Windows.WeakEventManager'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.WeakEventManager\n  implements: []\n  inheritedMembers:\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)\n  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)\n  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)\n  - System.Windows.WeakEventManager.Item(System.Object)\n  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)\n  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)\n  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ReadLock\n  - System.Windows.WeakEventManager.Remove(System.Object)\n  - System.Windows.WeakEventManager.ScheduleCleanup\n  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)\n  - System.Windows.WeakEventManager.WriteLock\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  id: AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: AddHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n  nameWithType: PropertyChangedEventManager.AddHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n  fullName: System.ComponentModel.PropertyChangedEventManager.AddHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Adds the specified event handler, which is called when specified source raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event for the specified property.\n  remarks: Use this method to specify the event handler you want to use to subscribe to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event..  When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface.\n  syntax:\n    content: public static void AddHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler<System.ComponentModel.PropertyChangedEventArgs> handler, string propertyName);\n    parameters:\n    - id: source\n      type: System.ComponentModel.INotifyPropertyChanged\n      description: The source object that the raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.\n    - id: handler\n      type: System.EventHandler{System.ComponentModel.PropertyChangedEventArgs}\n      description: The delegate that handles the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.\n    - id: propertyName\n      type: System.String\n      description: The name of the property that exists on `source` upon which to listen for changes. Set to <xref:System.String> to indicate \"any property\".\n  overload: System.ComponentModel.PropertyChangedEventManager.AddHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: More than one method is associated with <code>handler</code>.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  id: AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: AddListener(INotifyPropertyChanged,IWeakEventListener,String)\n  nameWithType: PropertyChangedEventManager.AddListener(INotifyPropertyChanged,IWeakEventListener,String)\n  fullName: System.ComponentModel.PropertyChangedEventManager.AddListener(INotifyPropertyChanged,IWeakEventListener,String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Adds the specified listener to the list of listeners on the specified source.\n  syntax:\n    content: public static void AddListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);\n    parameters:\n    - id: source\n      type: System.ComponentModel.INotifyPropertyChanged\n      description: The object with the event.\n    - id: listener\n      type: System.Windows.IWeakEventListener\n      description: The object to add as a listener.\n    - id: propertyName\n      type: System.String\n      description: The name of the property that exists on `source` upon which to listen for changes. Set to <xref:System.String> to indicate \"any property\".\n  overload: System.ComponentModel.PropertyChangedEventManager.AddListener*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyChangedEventManager.NewListenerList\n  id: NewListenerList\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: NewListenerList()\n  nameWithType: PropertyChangedEventManager.NewListenerList()\n  fullName: System.ComponentModel.PropertyChangedEventManager.NewListenerList()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Returns a new object to contain listeners to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.\n  syntax:\n    content: protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();\n    parameters: []\n    return:\n      type: System.Windows.WeakEventManager.ListenerList\n      description: A new object to contain listeners to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.\n  overload: System.ComponentModel.PropertyChangedEventManager.NewListenerList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)\n  id: Purge(System.Object,System.Object,System.Boolean)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: Purge(Object,Object,Boolean)\n  nameWithType: PropertyChangedEventManager.Purge(Object,Object,Boolean)\n  fullName: System.ComponentModel.PropertyChangedEventManager.Purge(Object,Object,Boolean)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Removes listeners that are no longer active from the data for the provided source.\n  syntax:\n    content: protected override bool Purge (object source, object data, bool purgeAll);\n    parameters:\n    - id: source\n      type: System.Object\n      description: Source object to remove all listeners from.\n    - id: data\n      type: System.Object\n      description: The data to purge. This is expected to be a <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n    - id: purgeAll\n      type: System.Boolean\n      description: Set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to stop listening and to completely remove all data.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if some entries were removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.PropertyChangedEventManager.Purge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  id: RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: RemoveHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n  nameWithType: PropertyChangedEventManager.RemoveHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n  fullName: System.ComponentModel.PropertyChangedEventManager.RemoveHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Removes the specified event handler from the specified source.\n  syntax:\n    content: public static void RemoveHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler<System.ComponentModel.PropertyChangedEventArgs> handler, string propertyName);\n    parameters:\n    - id: source\n      type: System.ComponentModel.INotifyPropertyChanged\n      description: The source object that the raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.\n    - id: handler\n      type: System.EventHandler{System.ComponentModel.PropertyChangedEventArgs}\n      description: The delegate that handles the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.\n    - id: propertyName\n      type: System.String\n      description: The name of the property that exists on `source` upon which to stop listening for changes. Set to <xref:System.String> to indicate \"any property\".\n  overload: System.ComponentModel.PropertyChangedEventManager.RemoveHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>handler</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: More than one method is associated with <code>handler</code>.\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  id: RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: RemoveListener(INotifyPropertyChanged,IWeakEventListener,String)\n  nameWithType: PropertyChangedEventManager.RemoveListener(INotifyPropertyChanged,IWeakEventListener,String)\n  fullName: System.ComponentModel.PropertyChangedEventManager.RemoveListener(INotifyPropertyChanged,IWeakEventListener,String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Removes the specified listener from the list of listeners on the provided source.\n  syntax:\n    content: public static void RemoveListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);\n    parameters:\n    - id: source\n      type: System.ComponentModel.INotifyPropertyChanged\n      description: The object to remove the listener from.\n    - id: listener\n      type: System.Windows.IWeakEventListener\n      description: The listener to remove.\n    - id: propertyName\n      type: System.String\n      description: The name of the property that exists on `source` upon which to stop listening for changes. Set to <xref:System.String> to indicate \"any property\".\n  overload: System.ComponentModel.PropertyChangedEventManager.RemoveListener*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)\n  id: StartListening(System.Object)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: StartListening(Object)\n  nameWithType: PropertyChangedEventManager.StartListening(Object)\n  fullName: System.ComponentModel.PropertyChangedEventManager.StartListening(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Begins listening for the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event on the provided source.\n  remarks: This does not specify a property; once the event manager is started, all properties on the source will have <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> notification enabled.\n  syntax:\n    content: protected override void StartListening (object source);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The object on which to start listening for <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>.\n  overload: System.ComponentModel.PropertyChangedEventManager.StartListening*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)\n  id: StopListening(System.Object)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: StopListening(Object)\n  nameWithType: PropertyChangedEventManager.StopListening(Object)\n  fullName: System.ComponentModel.PropertyChangedEventManager.StopListening(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Stops listening for the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event on the provided source.\n  syntax:\n    content: protected override void StopListening (object source);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source object on which to stop listening for <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>.\n  overload: System.ComponentModel.PropertyChangedEventManager.StopListening*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.WeakEventManager\n  isExternal: false\n  name: System.Windows.WeakEventManager\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: AddHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n  nameWithType: PropertyChangedEventManager.AddHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n  fullName: System.ComponentModel.PropertyChangedEventManager.AddHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n- uid: System.ComponentModel.INotifyPropertyChanged\n  parent: System.ComponentModel\n  isExternal: true\n  name: INotifyPropertyChanged\n  nameWithType: INotifyPropertyChanged\n  fullName: System.ComponentModel.INotifyPropertyChanged\n- uid: System.EventHandler{System.ComponentModel.PropertyChangedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<PropertyChangedEventArgs>\n  nameWithType: EventHandler<PropertyChangedEventArgs>\n  fullName: System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.ComponentModel.PropertyChangedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ComponentModel.PropertyChangedEventArgs\n    name: PropertyChangedEventArgs\n    nameWithType: PropertyChangedEventArgs\n    fullName: PropertyChangedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: AddListener(INotifyPropertyChanged,IWeakEventListener,String)\n  nameWithType: PropertyChangedEventManager.AddListener(INotifyPropertyChanged,IWeakEventListener,String)\n  fullName: System.ComponentModel.PropertyChangedEventManager.AddListener(INotifyPropertyChanged,IWeakEventListener,String)\n- uid: System.Windows.IWeakEventListener\n  parent: System.Windows\n  isExternal: false\n  name: IWeakEventListener\n  nameWithType: IWeakEventListener\n  fullName: System.Windows.IWeakEventListener\n- uid: System.ComponentModel.PropertyChangedEventManager.NewListenerList\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: NewListenerList()\n  nameWithType: PropertyChangedEventManager.NewListenerList()\n  fullName: System.ComponentModel.PropertyChangedEventManager.NewListenerList()\n- uid: System.Windows.WeakEventManager.ListenerList\n  parent: System.Windows\n  isExternal: false\n  name: WeakEventManager+ListenerList\n  nameWithType: WeakEventManager+ListenerList\n  fullName: System.Windows.WeakEventManager+ListenerList\n- uid: System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: Purge(Object,Object,Boolean)\n  nameWithType: PropertyChangedEventManager.Purge(Object,Object,Boolean)\n  fullName: System.ComponentModel.PropertyChangedEventManager.Purge(Object,Object,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: RemoveHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n  nameWithType: PropertyChangedEventManager.RemoveHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n  fullName: System.ComponentModel.PropertyChangedEventManager.RemoveHandler(INotifyPropertyChanged,EventHandler<PropertyChangedEventArgs>,String)\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: RemoveListener(INotifyPropertyChanged,IWeakEventListener,String)\n  nameWithType: PropertyChangedEventManager.RemoveListener(INotifyPropertyChanged,IWeakEventListener,String)\n  fullName: System.ComponentModel.PropertyChangedEventManager.RemoveListener(INotifyPropertyChanged,IWeakEventListener,String)\n- uid: System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: StartListening(Object)\n  nameWithType: PropertyChangedEventManager.StartListening(Object)\n  fullName: System.ComponentModel.PropertyChangedEventManager.StartListening(Object)\n- uid: System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: StopListening(Object)\n  nameWithType: PropertyChangedEventManager.StopListening(Object)\n  fullName: System.ComponentModel.PropertyChangedEventManager.StopListening(Object)\n- uid: System.ComponentModel.PropertyChangedEventManager.AddHandler*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: AddHandler\n  nameWithType: PropertyChangedEventManager.AddHandler\n- uid: System.ComponentModel.PropertyChangedEventManager.AddListener*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: AddListener\n  nameWithType: PropertyChangedEventManager.AddListener\n- uid: System.ComponentModel.PropertyChangedEventManager.NewListenerList*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: NewListenerList\n  nameWithType: PropertyChangedEventManager.NewListenerList\n- uid: System.ComponentModel.PropertyChangedEventManager.Purge*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: Purge\n  nameWithType: PropertyChangedEventManager.Purge\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveHandler*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: RemoveHandler\n  nameWithType: PropertyChangedEventManager.RemoveHandler\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveListener*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: RemoveListener\n  nameWithType: PropertyChangedEventManager.RemoveListener\n- uid: System.ComponentModel.PropertyChangedEventManager.StartListening*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: StartListening\n  nameWithType: PropertyChangedEventManager.StartListening\n- uid: System.ComponentModel.PropertyChangedEventManager.StopListening*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: StopListening\n  nameWithType: PropertyChangedEventManager.StopListening\n"}