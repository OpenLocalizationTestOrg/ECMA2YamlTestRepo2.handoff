{"nodes":[{"pos":[1076,1177],"content":"Represents a state in a <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Represents a state in a <xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"></xref>."},{"pos":[1190,3139],"content":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       The StateActivity represents a State in a <xref:System.Workflow.Activities.StateMachineWorkflowActivity>. State activities could contain one or more <xref:System.Workflow.Activities.EventDrivenActivity>, or StateActivity classes, one <xref:System.Workflow.Activities.StateInitializationActivity> class, and one <xref:System.Workflow.Activities.StateFinalizationActivity> class.  SetState activities are used inside an <xref:System.Workflow.Activities.EventHandlersActivity> and <xref:System.Workflow.Activities.StateInitializationActivity> to move the state of the workflow.       When a StateActivity is executing, the only events that can be received are the events that can be handled by the <xref:System.Workflow.Activities.EventDrivenActivity> activities in the StateActivity and also the <xref:System.Workflow.Activities.EventDrivenActivity> activities attached to the enclosing StateActivity activities and the root <xref:System.Workflow.ComponentModel.Activity>.       When the StateActivity starts running, the StateActivity will check to see whether a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present or not. The StateActivity can have zero or one <xref:System.Workflow.Activities.StateInitializationActivity> activity. If a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present the <xref:System.Workflow.Activities.StateInitializationActivity> will be executed. As soon as the <xref:System.Workflow.Activities.StateInitializationActivity> activity finishes, the StateActivity blocks events so that the StateActivity only receives events that can be handled by its <xref:System.Workflow.Activities.EventDrivenActivity> activities.       The StateActivity is a <xref:System.Workflow.ComponentModel.CompositeActivity>, meaning the StateActivity activity can contain other activities.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph><ph id=\"ph2\"> &gt;  </ph><ph id=\"ph3\">[!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]</ph>       The StateActivity represents a State in a &lt;xref:System.Workflow.Activities.StateMachineWorkflowActivity&gt;.","pos":[0,193],"source":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       The StateActivity represents a State in a <xref:System.Workflow.Activities.StateMachineWorkflowActivity>."},{"content":"State activities could contain one or more &lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;, or StateActivity classes, one &lt;xref:System.Workflow.Activities.StateInitializationActivity&gt; class, and one &lt;xref:System.Workflow.Activities.StateFinalizationActivity&gt; class.","pos":[194,465],"source":" State activities could contain one or more <xref:System.Workflow.Activities.EventDrivenActivity>, or StateActivity classes, one <xref:System.Workflow.Activities.StateInitializationActivity> class, and one <xref:System.Workflow.Activities.StateFinalizationActivity> class."},{"content":"SetState activities are used inside an &lt;xref:System.Workflow.Activities.EventHandlersActivity&gt; and &lt;xref:System.Workflow.Activities.StateInitializationActivity&gt; to move the state of the workflow.","pos":[467,662],"source":"  SetState activities are used inside an <xref:System.Workflow.Activities.EventHandlersActivity> and <xref:System.Workflow.Activities.StateInitializationActivity> to move the state of the workflow."},{"content":"When a StateActivity is executing, the only events that can be received are the events that can be handled by the &lt;xref:System.Workflow.Activities.EventDrivenActivity&gt; activities in the StateActivity and also the &lt;xref:System.Workflow.Activities.EventDrivenActivity&gt; activities attached to the enclosing StateActivity activities and the root &lt;xref:System.Workflow.ComponentModel.Activity&gt;.","pos":[669,1058],"source":"       When a StateActivity is executing, the only events that can be received are the events that can be handled by the <xref:System.Workflow.Activities.EventDrivenActivity> activities in the StateActivity and also the <xref:System.Workflow.Activities.EventDrivenActivity> activities attached to the enclosing StateActivity activities and the root <xref:System.Workflow.ComponentModel.Activity>."},{"content":"When the StateActivity starts running, the StateActivity will check to see whether a &lt;xref:System.Workflow.Activities.StateInitializationActivity&gt; activity is present or not.","pos":[1065,1239],"source":"       When the StateActivity starts running, the StateActivity will check to see whether a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present or not."},{"content":"The StateActivity can have zero or one &lt;xref:System.Workflow.Activities.StateInitializationActivity&gt; activity.","pos":[1240,1350],"source":" The StateActivity can have zero or one <xref:System.Workflow.Activities.StateInitializationActivity> activity."},{"content":"If a &lt;xref:System.Workflow.Activities.StateInitializationActivity&gt; activity is present the &lt;xref:System.Workflow.Activities.StateInitializationActivity&gt; will be executed.","pos":[1351,1521],"source":" If a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present the <xref:System.Workflow.Activities.StateInitializationActivity> will be executed."},{"content":"As soon as the &lt;xref:System.Workflow.Activities.StateInitializationActivity&gt; activity finishes, the StateActivity blocks events so that the StateActivity only receives events that can be handled by its &lt;xref:System.Workflow.Activities.EventDrivenActivity&gt; activities.","pos":[1522,1789],"source":" As soon as the <xref:System.Workflow.Activities.StateInitializationActivity> activity finishes, the StateActivity blocks events so that the StateActivity only receives events that can be handled by its <xref:System.Workflow.Activities.EventDrivenActivity> activities."},{"content":"The StateActivity is a &lt;xref:System.Workflow.ComponentModel.CompositeActivity&gt;, meaning the StateActivity activity can contain other activities.","pos":[1796,1940],"source":"       The StateActivity is a <xref:System.Workflow.ComponentModel.CompositeActivity>, meaning the StateActivity activity can contain other activities."}]},{"pos":[12057,12159],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> class."},{"pos":[13336,13469],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the name of the activity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> class using the name of the activity."},{"pos":[13605,13643],"content":"The user-defined name of the activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user-defined name of the activity.","pos":[0,38]}]},{"pos":[14298,14389],"content":"Cancels the execution of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Cancels the execution of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>."},{"pos":[14700,14739],"content":"The execution context for the activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The execution context for the activity.","pos":[0,39]}]},{"pos":[14838,14958],"content":"The current status of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the running workflow instance.","needQuote":true,"needEscape":true,"source":"The current status of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the running workflow instance."},{"pos":[15619,15694],"content":"Executes the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Executes the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>."},{"pos":[16006,16045],"content":"The execution context for the activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The execution context for the activity.","pos":[0,39]}]},{"pos":[16144,16264],"content":"The current status of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the running workflow instance.","needQuote":true,"needEscape":true,"source":"The current status of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the running workflow instance."},{"pos":[16843,16993],"content":"Gets the executing instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that corresponds to the specified child activity name.","needQuote":true,"needEscape":true,"source":"Gets the executing instance of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that corresponds to the specified child activity name."},{"pos":[17200,17219],"content":"The child activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The child activity.","pos":[0,19]}]},{"pos":[17303,17332],"content":"The dynamic child activities.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dynamic child activities.","pos":[0,29]}]},{"pos":[17514,17590],"content":"The executable activities do not contain the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">childActivityName</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The executable activities do not contain the <code>childActivityName</code>."},{"pos":[18100,18205],"content":"Initializes the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the service provider.","needQuote":true,"needEscape":true,"source":"Initializes the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> using the service provider."},{"pos":[18383,18434],"content":"The service provider from which to obtain services.","needQuote":true,"needEscape":true,"nodes":[{"content":"The service provider from which to obtain services.","pos":[0,51]}]},{"pos":[19266,19459],"content":"Determines if the activity being added is an <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.EventDrivenActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and if so, verifies whether the newly added event driven needs to be subscribed.","needQuote":true,"needEscape":true,"source":"Determines if the activity being added is an <xref href=\"System.Workflow.Activities.EventDrivenActivity\"></xref> and if so, verifies whether the newly added event driven needs to be subscribed."},{"pos":[19471,19887],"content":"This is method is called whenever a user adds a child to a <xref:System.Workflow.ComponentModel.CompositeActivity> through workflow changes. Note that this method is defined in CompositeActivity and overridden by the StateActivity, where it checks whether the activity being added is an <xref:System.Workflow.Activities.EventDrivenActivity> and if so, verifies if the newly added event driven needs to be subscribed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This is method is called whenever a user adds a child to a <xref:System.Workflow.ComponentModel.CompositeActivity> through workflow changes. Note that this method is defined in CompositeActivity and overridden by the StateActivity, where it checks whether the activity being added is an <xref:System.Workflow.Activities.EventDrivenActivity> and if so, verifies if the newly added event driven needs to be subscribed.","pos":[0,416],"nodes":[{"content":"This is method is called whenever a user adds a child to a &lt;xref:System.Workflow.ComponentModel.CompositeActivity&gt; through workflow changes.","pos":[0,140],"source":"This is method is called whenever a user adds a child to a <xref:System.Workflow.ComponentModel.CompositeActivity> through workflow changes."},{"content":"Note that this method is defined in CompositeActivity and overridden by the StateActivity, where it checks whether the activity being added is an &lt;xref:System.Workflow.Activities.EventDrivenActivity&gt; and if so, verifies if the newly added event driven needs to be subscribed.","pos":[141,416],"source":" Note that this method is defined in CompositeActivity and overridden by the StateActivity, where it checks whether the activity being added is an <xref:System.Workflow.Activities.EventDrivenActivity> and if so, verifies if the newly added event driven needs to be subscribed."}]}]},{"pos":[20216,20255],"content":"The execution context for the activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The execution context for the activity.","pos":[0,39]}]},{"pos":[20351,20439],"content":"The activity added to the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The activity added to the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>."},{"pos":[21030,21194],"content":"Called by the workflow runtime engine as part of the activity's transition to the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.ActivityExecutionStatus\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> state.","needQuote":true,"needEscape":true,"source":"Called by the workflow runtime engine as part of the activity's transition to the <xref href=\"System.Workflow.ComponentModel.ActivityExecutionStatus\"></xref> state."},{"pos":[21370,21421],"content":"The service provider from which to obtain services.","needQuote":true,"needEscape":true,"nodes":[{"content":"The service provider from which to obtain services.","pos":[0,51]}]},{"pos":[21986,22096],"content":"Holds the string value of the change tracking data key; \"StateActivity.StateChange\". This field is a constant.","needQuote":true,"needEscape":true,"nodes":[{"content":"Holds the string value of the change tracking data key; \"StateActivity.StateChange\". This field is a constant.","pos":[0,110],"nodes":[{"content":"Holds the string value of the change tracking data key; \"StateActivity.StateChange\".","pos":[0,84]},{"content":"This field is a constant.","pos":[85,110]}]}]},{"pos":[22225,22237],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Activities.StateActivity\n  id: StateActivity\n  children:\n  - System.Workflow.Activities.StateActivity.#ctor\n  - System.Workflow.Activities.StateActivity.#ctor(System.String)\n  - System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)\n  - System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)\n  - System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)\n  - System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey\n  langs:\n  - csharp\n  name: StateActivity\n  nameWithType: StateActivity\n  fullName: System.Workflow.Activities.StateActivity\n  type: Class\n  summary: Represents a state in a <xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"></xref>.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n The StateActivity represents a State in a <xref:System.Workflow.Activities.StateMachineWorkflowActivity>. State activities could contain one or more <xref:System.Workflow.Activities.EventDrivenActivity>, or StateActivity classes, one <xref:System.Workflow.Activities.StateInitializationActivity> class, and one <xref:System.Workflow.Activities.StateFinalizationActivity> class.  SetState activities are used inside an <xref:System.Workflow.Activities.EventHandlersActivity> and <xref:System.Workflow.Activities.StateInitializationActivity> to move the state of the workflow.  \\n  \\n When a StateActivity is executing, the only events that can be received are the events that can be handled by the <xref:System.Workflow.Activities.EventDrivenActivity> activities in the StateActivity and also the <xref:System.Workflow.Activities.EventDrivenActivity> activities attached to the enclosing StateActivity activities and the root <xref:System.Workflow.ComponentModel.Activity>.  \\n  \\n When the StateActivity starts running, the StateActivity will check to see whether a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present or not. The StateActivity can have zero or one <xref:System.Workflow.Activities.StateInitializationActivity> activity. If a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present the <xref:System.Workflow.Activities.StateInitializationActivity> will be executed. As soon as the <xref:System.Workflow.Activities.StateInitializationActivity> activity finishes, the StateActivity blocks events so that the StateActivity only receives events that can be handled by its <xref:System.Workflow.Activities.EventDrivenActivity> activities.  \\n  \\n The StateActivity is a <xref:System.Workflow.ComponentModel.CompositeActivity>, meaning the StateActivity activity can contain other activities.\"\n  example:\n  - \"The following code example shows how to create a new instance of the StateActivity class and use it implement a simple state machine to transition between 3 states. This code example is part of the SimpleStateMachineWorkflow SDK sample from the StateMachineWorkflow.cs file. For more information, see [Simple State Machine](http://msdn.microsoft.com/en-us/1974edbd-253d-4e01-9095-38ff9c3e749e).  \\n  \\n [!code-cs[wf_samples#181](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#181)]\\n [!code-vb[wf_samples#181](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#181)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Designer(typeof(System.Workflow.Activities.StateDesigner), typeof(System.ComponentModel.Design.IDesigner))]\n\n      [System.ComponentModel.ToolboxItem(typeof(System.Workflow.ComponentModel.Design.ActivityToolboxItem))]\n\n      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.StateActivity), \"Resources.StateActivity.png\")]\n\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.StateActivityValidator))]\n\n      public class StateActivity : System.Workflow.ComponentModel.CompositeActivity\n  inheritance:\n  - System.Object\n  - System.Workflow.ComponentModel.DependencyObject\n  - System.Workflow.ComponentModel.Activity\n  - System.Workflow.ComponentModel.CompositeActivity\n  implements: []\n  inheritedMembers:\n  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty\n  - System.Workflow.ComponentModel.Activity.Canceling\n  - System.Workflow.ComponentModel.Activity.CancelingEvent\n  - System.Workflow.ComponentModel.Activity.Clone\n  - System.Workflow.ComponentModel.Activity.Closed\n  - System.Workflow.ComponentModel.Activity.ClosedEvent\n  - System.Workflow.ComponentModel.Activity.Compensating\n  - System.Workflow.ComponentModel.Activity.CompensatingEvent\n  - System.Workflow.ComponentModel.Activity.Description\n  - System.Workflow.ComponentModel.Activity.Enabled\n  - System.Workflow.ComponentModel.Activity.Executing\n  - System.Workflow.ComponentModel.Activity.ExecutingEvent\n  - System.Workflow.ComponentModel.Activity.ExecutionResult\n  - System.Workflow.ComponentModel.Activity.ExecutionStatus\n  - System.Workflow.ComponentModel.Activity.Faulting\n  - System.Workflow.ComponentModel.Activity.FaultingEvent\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)\n  - System.Workflow.ComponentModel.Activity.IsDynamicActivity\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.Name\n  - System.Workflow.ComponentModel.Activity.Parent\n  - System.Workflow.ComponentModel.Activity.QualifiedName\n  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)\n  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)\n  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.StatusChanged\n  - System.Workflow.ComponentModel.Activity.StatusChangedEvent\n  - System.Workflow.ComponentModel.Activity.ToString\n  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)\n  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)\n  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId\n  - System.Workflow.ComponentModel.CompositeActivity.Activities\n  - System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)\n  - System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities\n  - System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)\n  - System.Workflow.ComponentModel.CompositeActivity.EnabledActivities\n  - System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  - System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  - System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.DesignMode\n  - System.Workflow.ComponentModel.DependencyObject.Dispose\n  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)\n  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties\n  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)\n  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject\n  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)\n  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.Site\n  - System.Workflow.ComponentModel.DependencyObject.UserData\n  platform:\n  - net462\n- uid: System.Workflow.Activities.StateActivity.#ctor\n  id: '#ctor'\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: StateActivity()\n  nameWithType: StateActivity.StateActivity()\n  fullName: System.Workflow.Activities.StateActivity.StateActivity()\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create a new instance of the <xref:System.Workflow.Activities.StateActivity> class.  This code example is part of the SimpleStateMachineWorkflow SDK Sample from the StateMachineWorkflow.cs file. For more information, see [Simple State Machine](http://msdn.microsoft.com/en-us/1974edbd-253d-4e01-9095-38ff9c3e749e).  \\n  \\n [!code-cs[WF_Samples#188](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#188)]\\n [!code-vb[WF_Samples#188](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#188)]\"\n  syntax:\n    content: public StateActivity ();\n    parameters: []\n  overload: System.Workflow.Activities.StateActivity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.StateActivity.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: StateActivity(String)\n  nameWithType: StateActivity.StateActivity(String)\n  fullName: System.Workflow.Activities.StateActivity.StateActivity(String)\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> class using the name of the activity.\n  syntax:\n    content: public StateActivity (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The user-defined name of the activity.\n  overload: System.Workflow.Activities.StateActivity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: Cancel(ActivityExecutionContext)\n  nameWithType: StateActivity.Cancel(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.StateActivity.Cancel(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Cancels the execution of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>.\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: The execution context for the activity.\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: The current status of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the running workflow instance.\n  overload: System.Workflow.Activities.StateActivity.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: Execute(ActivityExecutionContext)\n  nameWithType: StateActivity.Execute(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.StateActivity.Execute(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Executes the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>.\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: The execution context for the activity.\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: The current status of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the running workflow instance.\n  overload: System.Workflow.Activities.StateActivity.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)\n  id: GetDynamicActivity(System.String)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: GetDynamicActivity(String)\n  nameWithType: StateActivity.GetDynamicActivity(String)\n  fullName: System.Workflow.Activities.StateActivity.GetDynamicActivity(String)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Gets the executing instance of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that corresponds to the specified child activity name.\n  syntax:\n    content: public System.Workflow.ComponentModel.Activity GetDynamicActivity (string childActivityName);\n    parameters:\n    - id: childActivityName\n      type: System.String\n      description: The child activity.\n    return:\n      type: System.Workflow.ComponentModel.Activity\n      description: The dynamic child activities.\n  overload: System.Workflow.Activities.StateActivity.GetDynamicActivity*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The executable activities do not contain the <code>childActivityName</code>.\n  platform:\n  - net462\n- uid: System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)\n  id: Initialize(System.IServiceProvider)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: Initialize(IServiceProvider)\n  nameWithType: StateActivity.Initialize(IServiceProvider)\n  fullName: System.Workflow.Activities.StateActivity.Initialize(IServiceProvider)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> using the service provider.\n  syntax:\n    content: protected override void Initialize (IServiceProvider provider);\n    parameters:\n    - id: provider\n      type: System.IServiceProvider\n      description: The service provider from which to obtain services.\n  overload: System.Workflow.Activities.StateActivity.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  id: OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: OnActivityChangeAdd(ActivityExecutionContext,Activity)\n  nameWithType: StateActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)\n  fullName: System.Workflow.Activities.StateActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Determines if the activity being added is an <xref href=\"System.Workflow.Activities.EventDrivenActivity\"></xref> and if so, verifies whether the newly added event driven needs to be subscribed.\n  remarks: This is method is called whenever a user adds a child to a <xref:System.Workflow.ComponentModel.CompositeActivity> through workflow changes. Note that this method is defined in CompositeActivity and overridden by the StateActivity, where it checks whether the activity being added is an <xref:System.Workflow.Activities.EventDrivenActivity> and if so, verifies if the newly added event driven needs to be subscribed.\n  syntax:\n    content: protected override void OnActivityChangeAdd (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, System.Workflow.ComponentModel.Activity addedActivity);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: The execution context for the activity.\n    - id: addedActivity\n      type: System.Workflow.ComponentModel.Activity\n      description: The activity added to the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>.\n  overload: System.Workflow.Activities.StateActivity.OnActivityChangeAdd*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)\n  id: OnClosed(System.IServiceProvider)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: OnClosed(IServiceProvider)\n  nameWithType: StateActivity.OnClosed(IServiceProvider)\n  fullName: System.Workflow.Activities.StateActivity.OnClosed(IServiceProvider)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Called by the workflow runtime engine as part of the activity's transition to the <xref href=\"System.Workflow.ComponentModel.ActivityExecutionStatus\"></xref> state.\n  syntax:\n    content: protected override void OnClosed (IServiceProvider provider);\n    parameters:\n    - id: provider\n      type: System.IServiceProvider\n      description: The service provider from which to obtain services.\n  overload: System.Workflow.Activities.StateActivity.OnClosed*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey\n  id: StateChangeTrackingDataKey\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: StateChangeTrackingDataKey\n  nameWithType: StateActivity.StateChangeTrackingDataKey\n  fullName: System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey\n  type: Field\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Holds the string value of the change tracking data key; \"StateActivity.StateChange\". This field is a constant.\n  syntax:\n    content: public const string StateChangeTrackingDataKey;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.CompositeActivity\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Workflow.Activities.StateActivity.#ctor\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: StateActivity()\n  nameWithType: StateActivity.StateActivity()\n  fullName: System.Workflow.Activities.StateActivity.StateActivity()\n- uid: System.Workflow.Activities.StateActivity.#ctor(System.String)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: StateActivity(String)\n  nameWithType: StateActivity.StateActivity(String)\n  fullName: System.Workflow.Activities.StateActivity.StateActivity(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Cancel(ActivityExecutionContext)\n  nameWithType: StateActivity.Cancel(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.StateActivity.Cancel(ActivityExecutionContext)\n- uid: System.Workflow.ComponentModel.ActivityExecutionStatus\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionStatus\n  nameWithType: ActivityExecutionStatus\n  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus\n- uid: System.Workflow.ComponentModel.ActivityExecutionContext\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionContext\n  nameWithType: ActivityExecutionContext\n  fullName: System.Workflow.ComponentModel.ActivityExecutionContext\n- uid: System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Execute(ActivityExecutionContext)\n  nameWithType: StateActivity.Execute(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.StateActivity.Execute(ActivityExecutionContext)\n- uid: System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: GetDynamicActivity(String)\n  nameWithType: StateActivity.GetDynamicActivity(String)\n  fullName: System.Workflow.Activities.StateActivity.GetDynamicActivity(String)\n- uid: System.Workflow.ComponentModel.Activity\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Workflow.ComponentModel.Activity\n- uid: System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Initialize(IServiceProvider)\n  nameWithType: StateActivity.Initialize(IServiceProvider)\n  fullName: System.Workflow.Activities.StateActivity.Initialize(IServiceProvider)\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: true\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n- uid: System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: OnActivityChangeAdd(ActivityExecutionContext,Activity)\n  nameWithType: StateActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)\n  fullName: System.Workflow.Activities.StateActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)\n- uid: System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: OnClosed(IServiceProvider)\n  nameWithType: StateActivity.OnClosed(IServiceProvider)\n  fullName: System.Workflow.Activities.StateActivity.OnClosed(IServiceProvider)\n- uid: System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: StateChangeTrackingDataKey\n  nameWithType: StateActivity.StateChangeTrackingDataKey\n  fullName: System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey\n- uid: System.Workflow.Activities.StateActivity.#ctor*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: StateActivity\n  nameWithType: StateActivity.StateActivity\n- uid: System.Workflow.Activities.StateActivity.Cancel*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Cancel\n  nameWithType: StateActivity.Cancel\n- uid: System.Workflow.Activities.StateActivity.Execute*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Execute\n  nameWithType: StateActivity.Execute\n- uid: System.Workflow.Activities.StateActivity.GetDynamicActivity*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: GetDynamicActivity\n  nameWithType: StateActivity.GetDynamicActivity\n- uid: System.Workflow.Activities.StateActivity.Initialize*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Initialize\n  nameWithType: StateActivity.Initialize\n- uid: System.Workflow.Activities.StateActivity.OnActivityChangeAdd*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: OnActivityChangeAdd\n  nameWithType: StateActivity.OnActivityChangeAdd\n- uid: System.Workflow.Activities.StateActivity.OnClosed*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: OnClosed\n  nameWithType: StateActivity.OnClosed\n"}