{"nodes":[{"pos":[749,879],"content":"Represents a situation in which an attempted update fails because member values have been updated since the client last read them.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a situation in which an attempted update fails because member values have been updated since the client last read them.","pos":[0,130]}]},{"pos":[891,973],"content":"The following example shows how to retrieve information about members in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"The following example shows how to retrieve information about members in conflict.","pos":[0,82]}]},{"pos":[1744,1793],"content":"Gets the current value of the member in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current value of the member in conflict.","pos":[0,49]}]},{"pos":[1910,1933],"content":"The object in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object in conflict.","pos":[0,23]}]},{"pos":[2415,2465],"content":"Gets the database value of the member in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the database value of the member in conflict.","pos":[0,50]}]},{"pos":[2583,2619],"content":"The value of the object in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the object in conflict.","pos":[0,36]}]},{"pos":[3087,3196],"content":"Gets a value that indicates whether the member data has been changed since the last database read or refresh.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the member data has been changed since the last database read or refresh.","pos":[0,109]}]},{"pos":[3208,3281],"content":"Use the property to merge new values without overwriting pending updates.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the property to merge new values without overwriting pending updates.","pos":[0,73]}]},{"pos":[3395,3492],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the member data has been changed.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the member data has been changed."},{"pos":[3957,4024],"content":"Gets a value that indicates whether the conflict has been resolved.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the conflict has been resolved.","pos":[0,67]}]},{"pos":[4036,4118],"content":"This property is read-only and is automatically updated as conflicts are resolved.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is read-only and is automatically updated as conflicts are resolved.","pos":[0,82]}]},{"pos":[4232,4327],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the conflict has been resolved.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the conflict has been resolved."},{"pos":[4772,4827],"content":"Gets metadata information about the member in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets metadata information about the member in conflict.","pos":[0,55]}]},{"pos":[4975,5016],"content":"Information about the member in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"Information about the member in conflict.","pos":[0,41]}]},{"pos":[5492,5542],"content":"Gets the original value of the member in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the original value of the member in conflict.","pos":[0,50]}]},{"pos":[5660,5705],"content":"The original value of the member in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"The original value of the member in conflict.","pos":[0,45]}]},{"pos":[6255,6412],"content":"Uses a <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.RefreshMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> parameter to automatically specify the value to set as the current value for the member in conflict.","needQuote":true,"needEscape":true,"source":"Uses a <xref href=\"System.Data.Linq.RefreshMode\"></xref> parameter to automatically specify the value to set as the current value for the member in conflict."},{"pos":[6424,6546],"content":"The following examples show what results are produced by using the various values for <xref:System.Data.Linq.RefreshMode>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The following examples show what results are produced by using the various values for &lt;xref:System.Data.Linq.RefreshMode&gt;.","pos":[0,122],"source":"The following examples show what results are produced by using the various values for <xref:System.Data.Linq.RefreshMode>."}]},{"pos":[7709,7763],"content":"See <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.RefreshMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"See <xref href=\"System.Data.Linq.RefreshMode\"></xref>."},{"pos":[8262,8337],"content":"Specifies the value to set as the current value for the member in conflict.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the value to set as the current value for the member in conflict.","pos":[0,75]}]},{"pos":[8349,8471],"content":"The value set here is the value to be used in a subsequent <xref:System.Data.Linq.DataContext.SubmitChanges%2A> operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value set here is the value to be used in a subsequent &lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt; operation.","pos":[0,122],"source":"The value set here is the value to be used in a subsequent <xref:System.Data.Linq.DataContext.SubmitChanges%2A> operation."}]},{"pos":[8608,8646],"content":"The value to set as the current value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to set as the current value.","pos":[0,38]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Linq.MemberChangeConflict\n  id: MemberChangeConflict\n  children:\n  - System.Data.Linq.MemberChangeConflict.CurrentValue\n  - System.Data.Linq.MemberChangeConflict.DatabaseValue\n  - System.Data.Linq.MemberChangeConflict.IsModified\n  - System.Data.Linq.MemberChangeConflict.IsResolved\n  - System.Data.Linq.MemberChangeConflict.Member\n  - System.Data.Linq.MemberChangeConflict.OriginalValue\n  - System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)\n  - System.Data.Linq.MemberChangeConflict.Resolve(System.Object)\n  langs:\n  - csharp\n  name: MemberChangeConflict\n  nameWithType: MemberChangeConflict\n  fullName: System.Data.Linq.MemberChangeConflict\n  type: Class\n  summary: Represents a situation in which an attempted update fails because member values have been updated since the client last read them.\n  remarks: The following example shows how to retrieve information about members in conflict.\n  example:\n  - >-\n    [!code-cs[System.Data.Linq.MemberChangeConflict#1](~/add/codesnippet/csharp/memconflict/program.cs#1)]\n     [!code-vb[System.Data.Linq.MemberChangeConflict#1](~/add/codesnippet/visualbasic/memconflict/module1.vb#1)]\n  syntax:\n    content: public sealed class MemberChangeConflict\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Linq.MemberChangeConflict.CurrentValue\n  id: CurrentValue\n  parent: System.Data.Linq.MemberChangeConflict\n  langs:\n  - csharp\n  name: CurrentValue\n  nameWithType: MemberChangeConflict.CurrentValue\n  fullName: System.Data.Linq.MemberChangeConflict.CurrentValue\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets the current value of the member in conflict.\n  syntax:\n    content: public object CurrentValue { get; }\n    return:\n      type: System.Object\n      description: The object in conflict.\n  overload: System.Data.Linq.MemberChangeConflict.CurrentValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.MemberChangeConflict.DatabaseValue\n  id: DatabaseValue\n  parent: System.Data.Linq.MemberChangeConflict\n  langs:\n  - csharp\n  name: DatabaseValue\n  nameWithType: MemberChangeConflict.DatabaseValue\n  fullName: System.Data.Linq.MemberChangeConflict.DatabaseValue\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets the database value of the member in conflict.\n  syntax:\n    content: public object DatabaseValue { get; }\n    return:\n      type: System.Object\n      description: The value of the object in conflict.\n  overload: System.Data.Linq.MemberChangeConflict.DatabaseValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.MemberChangeConflict.IsModified\n  id: IsModified\n  parent: System.Data.Linq.MemberChangeConflict\n  langs:\n  - csharp\n  name: IsModified\n  nameWithType: MemberChangeConflict.IsModified\n  fullName: System.Data.Linq.MemberChangeConflict.IsModified\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets a value that indicates whether the member data has been changed since the last database read or refresh.\n  remarks: Use the property to merge new values without overwriting pending updates.\n  syntax:\n    content: public bool IsModified { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the member data has been changed.\n  overload: System.Data.Linq.MemberChangeConflict.IsModified*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.MemberChangeConflict.IsResolved\n  id: IsResolved\n  parent: System.Data.Linq.MemberChangeConflict\n  langs:\n  - csharp\n  name: IsResolved\n  nameWithType: MemberChangeConflict.IsResolved\n  fullName: System.Data.Linq.MemberChangeConflict.IsResolved\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets a value that indicates whether the conflict has been resolved.\n  remarks: This property is read-only and is automatically updated as conflicts are resolved.\n  syntax:\n    content: public bool IsResolved { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the conflict has been resolved.\n  overload: System.Data.Linq.MemberChangeConflict.IsResolved*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.MemberChangeConflict.Member\n  id: Member\n  parent: System.Data.Linq.MemberChangeConflict\n  langs:\n  - csharp\n  name: Member\n  nameWithType: MemberChangeConflict.Member\n  fullName: System.Data.Linq.MemberChangeConflict.Member\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets metadata information about the member in conflict.\n  syntax:\n    content: public System.Reflection.MemberInfo Member { get; }\n    return:\n      type: System.Reflection.MemberInfo\n      description: Information about the member in conflict.\n  overload: System.Data.Linq.MemberChangeConflict.Member*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.MemberChangeConflict.OriginalValue\n  id: OriginalValue\n  parent: System.Data.Linq.MemberChangeConflict\n  langs:\n  - csharp\n  name: OriginalValue\n  nameWithType: MemberChangeConflict.OriginalValue\n  fullName: System.Data.Linq.MemberChangeConflict.OriginalValue\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets the original value of the member in conflict.\n  syntax:\n    content: public object OriginalValue { get; }\n    return:\n      type: System.Object\n      description: The original value of the member in conflict.\n  overload: System.Data.Linq.MemberChangeConflict.OriginalValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)\n  id: Resolve(System.Data.Linq.RefreshMode)\n  parent: System.Data.Linq.MemberChangeConflict\n  langs:\n  - csharp\n  name: Resolve(RefreshMode)\n  nameWithType: MemberChangeConflict.Resolve(RefreshMode)\n  fullName: System.Data.Linq.MemberChangeConflict.Resolve(RefreshMode)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Uses a <xref href=\"System.Data.Linq.RefreshMode\"></xref> parameter to automatically specify the value to set as the current value for the member in conflict.\n  remarks: The following examples show what results are produced by using the various values for <xref:System.Data.Linq.RefreshMode>.\n  example:\n  - \"The following example overwrites current values with values from the database.  \\n  \\n [!code-cs[System.Data.Linq.RefreshMode#1](~/add/codesnippet/csharp/refreshmode/program.cs#1)]\\n [!code-vb[System.Data.Linq.RefreshMode#1](~/add/codesnippet/visualbasic/refreshmode/module1.vb#1)]  \\n  \\n The following example shows how to swap the original value with the values retrieved from the database. No current value is modified.  \\n  \\n [!code-cs[System.Data.Linq.RefreshMode#2](~/add/codesnippet/csharp/refreshmode/program.cs#2)]\\n [!code-vb[System.Data.Linq.RefreshMode#2](~/add/codesnippet/visualbasic/refreshmode/module1.vb#2)]  \\n  \\n The following example keeps the current values that have been changed, but updates the other values with database values.  \\n  \\n [!code-cs[System.Data.Linq.RefreshMode#3](~/add/codesnippet/csharp/refreshmode/program.cs#3)]\\n [!code-vb[System.Data.Linq.RefreshMode#3](~/add/codesnippet/visualbasic/refreshmode/module1.vb#3)]\"\n  syntax:\n    content: public void Resolve (System.Data.Linq.RefreshMode refreshMode);\n    parameters:\n    - id: refreshMode\n      type: System.Data.Linq.RefreshMode\n      description: See <xref href=\"System.Data.Linq.RefreshMode\"></xref>.\n  overload: System.Data.Linq.MemberChangeConflict.Resolve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.MemberChangeConflict.Resolve(System.Object)\n  id: Resolve(System.Object)\n  parent: System.Data.Linq.MemberChangeConflict\n  langs:\n  - csharp\n  name: Resolve(Object)\n  nameWithType: MemberChangeConflict.Resolve(Object)\n  fullName: System.Data.Linq.MemberChangeConflict.Resolve(Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Specifies the value to set as the current value for the member in conflict.\n  remarks: The value set here is the value to be used in a subsequent <xref:System.Data.Linq.DataContext.SubmitChanges%2A> operation.\n  syntax:\n    content: public void Resolve (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The value to set as the current value.\n  overload: System.Data.Linq.MemberChangeConflict.Resolve*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Data.Linq.MemberChangeConflict.CurrentValue\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: CurrentValue\n  nameWithType: MemberChangeConflict.CurrentValue\n  fullName: System.Data.Linq.MemberChangeConflict.CurrentValue\n- uid: System.Data.Linq.MemberChangeConflict.DatabaseValue\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: DatabaseValue\n  nameWithType: MemberChangeConflict.DatabaseValue\n  fullName: System.Data.Linq.MemberChangeConflict.DatabaseValue\n- uid: System.Data.Linq.MemberChangeConflict.IsModified\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: IsModified\n  nameWithType: MemberChangeConflict.IsModified\n  fullName: System.Data.Linq.MemberChangeConflict.IsModified\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.Linq.MemberChangeConflict.IsResolved\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: IsResolved\n  nameWithType: MemberChangeConflict.IsResolved\n  fullName: System.Data.Linq.MemberChangeConflict.IsResolved\n- uid: System.Data.Linq.MemberChangeConflict.Member\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: Member\n  nameWithType: MemberChangeConflict.Member\n  fullName: System.Data.Linq.MemberChangeConflict.Member\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: true\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Data.Linq.MemberChangeConflict.OriginalValue\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: OriginalValue\n  nameWithType: MemberChangeConflict.OriginalValue\n  fullName: System.Data.Linq.MemberChangeConflict.OriginalValue\n- uid: System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: Resolve(RefreshMode)\n  nameWithType: MemberChangeConflict.Resolve(RefreshMode)\n  fullName: System.Data.Linq.MemberChangeConflict.Resolve(RefreshMode)\n- uid: System.Data.Linq.RefreshMode\n  parent: System.Data.Linq\n  isExternal: false\n  name: RefreshMode\n  nameWithType: RefreshMode\n  fullName: System.Data.Linq.RefreshMode\n- uid: System.Data.Linq.MemberChangeConflict.Resolve(System.Object)\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: Resolve(Object)\n  nameWithType: MemberChangeConflict.Resolve(Object)\n  fullName: System.Data.Linq.MemberChangeConflict.Resolve(Object)\n- uid: System.Data.Linq.MemberChangeConflict.CurrentValue*\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: CurrentValue\n  nameWithType: MemberChangeConflict.CurrentValue\n- uid: System.Data.Linq.MemberChangeConflict.DatabaseValue*\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: DatabaseValue\n  nameWithType: MemberChangeConflict.DatabaseValue\n- uid: System.Data.Linq.MemberChangeConflict.IsModified*\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: IsModified\n  nameWithType: MemberChangeConflict.IsModified\n- uid: System.Data.Linq.MemberChangeConflict.IsResolved*\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: IsResolved\n  nameWithType: MemberChangeConflict.IsResolved\n- uid: System.Data.Linq.MemberChangeConflict.Member*\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: Member\n  nameWithType: MemberChangeConflict.Member\n- uid: System.Data.Linq.MemberChangeConflict.OriginalValue*\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: OriginalValue\n  nameWithType: MemberChangeConflict.OriginalValue\n- uid: System.Data.Linq.MemberChangeConflict.Resolve*\n  parent: System.Data.Linq.MemberChangeConflict\n  isExternal: false\n  name: Resolve\n  nameWithType: MemberChangeConflict.Resolve\n"}