{"nodes":[{"pos":[433,527],"content":"Wraps marshal-by-value object references, allowing them to be returned through an indirection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Wraps marshal-by-value object references, allowing them to be returned through an indirection.","pos":[0,94]}]},{"pos":[539,900],"content":"The ObjectHandle class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the ObjectHandle travels. Thus, the ObjectHandle class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ObjectHandle class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the ObjectHandle travels. Thus, the ObjectHandle class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain.","pos":[0,361],"nodes":[{"content":"The ObjectHandle class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each &lt;xref:System.AppDomain&gt; through which the ObjectHandle travels.","pos":[0,230],"source":"The ObjectHandle class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the ObjectHandle travels."},{"content":"Thus, the ObjectHandle class gives the caller control of when the &lt;xref:System.Type&gt; of the remote object is loaded into a domain.","pos":[231,361],"source":" Thus, the ObjectHandle class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain."}]}]},{"pos":[2495,2632],"content":"Initializes an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.ObjectHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, wrapping the given object <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">o</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes an instance of the <xref href=\"System.Runtime.Remoting.ObjectHandle\"></xref> class, wrapping the given object <code>o</code>."},{"pos":[2761,2857],"content":"The object that is wrapped by the new <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.ObjectHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object that is wrapped by the new <xref href=\"System.Runtime.Remoting.ObjectHandle\"></xref>."},{"pos":[3383,3436],"content":"Initializes the lifetime lease of the wrapped object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes the lifetime lease of the wrapped object.","pos":[0,53]}]},{"pos":[3589,3727],"content":"An initialized <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Lifetime.ILease\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that allows you to control the lifetime of the wrapped object.","needQuote":true,"needEscape":true,"source":"An initialized <xref href=\"System.Runtime.Remoting.Lifetime.ILease\"></xref> that allows you to control the lifetime of the wrapped object."},{"pos":[4178,4205],"content":"Returns the wrapped object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the wrapped object.","pos":[0,27]}]},{"pos":[4831,4850],"content":"The wrapped object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The wrapped object.","pos":[0,19]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.ObjectHandle\n  id: ObjectHandle\n  children:\n  - System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)\n  - System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService\n  - System.Runtime.Remoting.ObjectHandle.Unwrap\n  langs:\n  - csharp\n  name: ObjectHandle\n  nameWithType: ObjectHandle\n  fullName: System.Runtime.Remoting.ObjectHandle\n  type: Class\n  summary: Wraps marshal-by-value object references, allowing them to be returned through an indirection.\n  remarks: The ObjectHandle class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the ObjectHandle travels. Thus, the ObjectHandle class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain.\n  example:\n  - \"The following code example shows how to create an object in another <xref:System.AppDomain>, and retrieve a proxy to the object from a ObjectHandle. In this example, you can assume that the code of the `MyType` class is compiled into an assembly called \\\"ObjectHandleAssembly\\\".  \\n  \\n [!code-cpp[ObjectHandle#1](~/add/codesnippet/cpp/t-system.runtime.remotin_58_1.cpp)]\\n [!code-vb[ObjectHandle#1](~/add/codesnippet/visualbasic/t-system.runtime.remotin_58_1.vb)]\\n [!code-cs[ObjectHandle#1](~/add/codesnippet/csharp/t-system.runtime.remotin_58_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class ObjectHandle : MarshalByRefObject, System.Runtime.Remoting.IObjectHandle\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.Runtime.Remoting.IObjectHandle\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Runtime.Remoting.ObjectHandle\n  langs:\n  - csharp\n  name: ObjectHandle(Object)\n  nameWithType: ObjectHandle.ObjectHandle(Object)\n  fullName: System.Runtime.Remoting.ObjectHandle.ObjectHandle(Object)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Initializes an instance of the <xref href=\"System.Runtime.Remoting.ObjectHandle\"></xref> class, wrapping the given object <code>o</code>.\n  syntax:\n    content: public ObjectHandle (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object that is wrapped by the new <xref href=\"System.Runtime.Remoting.ObjectHandle\"></xref>.\n  overload: System.Runtime.Remoting.ObjectHandle.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService\n  id: InitializeLifetimeService\n  parent: System.Runtime.Remoting.ObjectHandle\n  langs:\n  - csharp\n  name: InitializeLifetimeService()\n  nameWithType: ObjectHandle.InitializeLifetimeService()\n  fullName: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Initializes the lifetime lease of the wrapped object.\n  syntax:\n    content: public override object InitializeLifetimeService ();\n    parameters: []\n    return:\n      type: System.Object\n      description: An initialized <xref href=\"System.Runtime.Remoting.Lifetime.ILease\"></xref> that allows you to control the lifetime of the wrapped object.\n  overload: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.ObjectHandle.Unwrap\n  id: Unwrap\n  parent: System.Runtime.Remoting.ObjectHandle\n  langs:\n  - csharp\n  name: Unwrap()\n  nameWithType: ObjectHandle.Unwrap()\n  fullName: System.Runtime.Remoting.ObjectHandle.Unwrap()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Returns the wrapped object.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to activate an object in another <xref:System.AppDomain>, retrieve a proxy to it with the Unwrap method, and use the proxy to access the remote object.  \\n  \\n [!code-cpp[ObjectHandle#2](~/add/codesnippet/cpp/m-system.runtime.remotin_83_1.cpp)]\\n [!code-vb[ObjectHandle#2](~/add/codesnippet/visualbasic/m-system.runtime.remotin_83_1.vb)]\\n [!code-cs[ObjectHandle#2](~/add/codesnippet/csharp/m-system.runtime.remotin_83_1.cs)]\"\n  syntax:\n    content: public object Unwrap ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The wrapped object.\n  overload: System.Runtime.Remoting.ObjectHandle.Unwrap*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: ObjectHandle(Object)\n  nameWithType: ObjectHandle.ObjectHandle(Object)\n  fullName: System.Runtime.Remoting.ObjectHandle.ObjectHandle(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: ObjectHandle.InitializeLifetimeService()\n  fullName: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService()\n- uid: System.Runtime.Remoting.ObjectHandle.Unwrap\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: Unwrap()\n  nameWithType: ObjectHandle.Unwrap()\n  fullName: System.Runtime.Remoting.ObjectHandle.Unwrap()\n- uid: System.Runtime.Remoting.ObjectHandle.#ctor*\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: ObjectHandle\n  nameWithType: ObjectHandle.ObjectHandle\n- uid: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService*\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: InitializeLifetimeService\n  nameWithType: ObjectHandle.InitializeLifetimeService\n- uid: System.Runtime.Remoting.ObjectHandle.Unwrap*\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: Unwrap\n  nameWithType: ObjectHandle.Unwrap\n"}