{"nodes":[{"pos":[701,761],"content":"Provides information about successful authentication events.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides information about successful authentication events.","pos":[0,60]}]},{"pos":[774,3304],"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.       The following list describes the features for which ASP.NET raises events of type WebAuthenticationSuccessAuditEvent.      > [!NOTE] >  By default ASP.NET is configured to log audit failure conditions only, as logging success conditions can severely strain system resources.  You can always configure the system to log the success conditions.      -   Forms Authentication. Successful conditions are audited. Success audits include the user name that was authenticated. Instead, failure audits do not include the user name, since they typically result from a ticket that failed decryption or validation. Both contain the client IP address. The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationSuccess>.      -   Membership. Successful conditions are audited. Both success and failure audits contain the username that was attempted. Neither form of audit will contain the password that was attempted, because that would risk persisting a valid password in the log. The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationSuccess>.       When a WebAuthenticationSuccessAuditEvent is raised, by default it updates the Authentication Success Events Raised performance counter. To view this performance counter in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** in the **Performance object** drop-down list, select the Authentication Success Events Raised performance counter, and click the **Add** button. For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882&clcid=0x409) on MSDN.      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the <xref:System.Web.Management.WebBaseEvent> class, see the example provided in this topic.","needQuote":false,"needEscape":true,"nodes":[{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications.","pos":[0,101]},{"content":"The &lt;xref:System.Web.Management&gt; namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data.","pos":[102,294],"source":" The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data."},{"content":"It also contains supporting types that help during the management of health events.","pos":[295,378]},{"content":"The following list describes the features for which ASP.NET raises events of type WebAuthenticationSuccessAuditEvent.","pos":[385,502]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  By default ASP.NET is configured to log audit failure conditions only, as logging success conditions can severely strain system resources.","pos":[508,659],"source":"      > [!NOTE] >  By default ASP.NET is configured to log audit failure conditions only, as logging success conditions can severely strain system resources."},{"content":"You can always configure the system to log the success conditions.","pos":[661,727]},{"content":"-   Forms Authentication.","pos":[733,758]},{"content":"Successful conditions are audited.","pos":[759,793]},{"content":"Success audits include the user name that was authenticated.","pos":[794,854]},{"content":"Instead, failure audits do not include the user name, since they typically result from a ticket that failed decryption or validation.","pos":[855,988]},{"content":"Both contain the client IP address.","pos":[989,1024]},{"content":"The related event audit code is &lt;xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationSuccess&gt;.","pos":[1025,1132],"source":" The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationSuccess>."},{"content":"-   Membership.","pos":[1138,1153]},{"content":"Successful conditions are audited.","pos":[1154,1188]},{"content":"Both success and failure audits contain the username that was attempted.","pos":[1189,1261]},{"content":"Neither form of audit will contain the password that was attempted, because that would risk persisting a valid password in the log.","pos":[1262,1393]},{"content":"The related event audit code is &lt;xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationSuccess&gt;.","pos":[1394,1506],"source":" The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationSuccess>."},{"content":"When a WebAuthenticationSuccessAuditEvent is raised, by default it updates the Authentication Success Events Raised performance counter.","pos":[1513,1649]},{"content":"To view this performance counter in System Monitor (PerfMon), in the <bpt id=\"p1\">**</bpt>Add Counters<ept id=\"p1\">**</ept> window select <bpt id=\"p2\">**</bpt>ASP.NET<ept id=\"p2\">**</ept> in the <bpt id=\"p3\">**</bpt>Performance object<ept id=\"p3\">**</ept> drop-down list, select the Authentication Success Events Raised performance counter, and click the <bpt id=\"p4\">**</bpt>Add<ept id=\"p4\">**</ept> button.","pos":[1650,1906],"source":" To view this performance counter in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** in the **Performance object** drop-down list, select the Authentication Success Events Raised performance counter, and click the **Add** button."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using the System Monitor (PerfMon) with ASP.NET Applications<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=36882&amp;clcid=0x409)</ept> on MSDN.","pos":[1907,2062],"source":" For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882&clcid=0x409) on MSDN."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <ph id=\"ph2\">`healthMonitoring`</ph> configuration section.","pos":[2068,2290],"source":"      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section."},{"content":"You can also derive from the health-monitoring types to create your own custom events and providers.","pos":[2291,2391]},{"content":"For an example of deriving from the &lt;xref:System.Web.Management.WebBaseEvent&gt; class, see the example provided in this topic.","pos":[2392,2516],"source":" For an example of deriving from the <xref:System.Web.Management.WebBaseEvent> class, see the example provided in this topic."}]},{"pos":[7521,7651],"content":"Initializes the <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebAuthenticationSuccessAuditEvent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the supplied parameters.","needQuote":true,"needEscape":true,"source":"Initializes the <xref href=\"System.Web.Management.WebAuthenticationSuccessAuditEvent\"></xref> class using the supplied parameters."},{"pos":[7664,8261],"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to instantiate a <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class.      > [!NOTE] >  The WebAuthenticationSuccessAuditEvent constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the WebAuthenticationSuccessAuditEvent constructor when deriving from the <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system.","pos":[0,76]},{"content":"You will never use it to instantiate a &lt;xref:System.Web.Management.WebAuthenticationSuccessAuditEvent&gt; object, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[77,290],"source":" You will never use it to instantiate a <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The WebAuthenticationSuccessAuditEvent constructor is not intended to be used directly from your code.","pos":[296,411],"source":"      > [!NOTE] >  The WebAuthenticationSuccessAuditEvent constructor is not intended to be used directly from your code."},{"content":"It is called by ASP.NET.","pos":[412,436]},{"content":"You can call the WebAuthenticationSuccessAuditEvent constructor when deriving from the &lt;xref:System.Web.Management.WebAuthenticationSuccessAuditEvent&gt; class.","pos":[437,594],"source":" You can call the WebAuthenticationSuccessAuditEvent constructor when deriving from the <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> class."}]},{"pos":[8844,8866],"content":"The event description.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event description.","pos":[0,22]}]},{"pos":[8934,8977],"content":"The object that is the source of the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that is the source of the event.","pos":[0,43]}]},{"pos":[9042,9222],"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code associated with the event.","pos":[0,35]},{"content":"When you implement a custom event, the event code must be greater than <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[36,180],"source":" When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>."}]},{"pos":[9297,9332],"content":"The name of the authenticated user.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the authenticated user.","pos":[0,35]}]},{"pos":[10188,10304],"content":"Initializes the <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebSuccessAuditEvent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the supplied parameters.","needQuote":true,"needEscape":true,"source":"Initializes the <xref href=\"System.Web.Management.WebSuccessAuditEvent\"></xref> class using the supplied parameters."},{"pos":[10317,10914],"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to instantiate a <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class.      > [!NOTE] >  The WebAuthenticationSuccessAuditEvent constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the WebAuthenticationSuccessAuditEvent constructor when deriving from the <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system.","pos":[0,76]},{"content":"You will never use it to instantiate a &lt;xref:System.Web.Management.WebAuthenticationSuccessAuditEvent&gt; object, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[77,290],"source":" You will never use it to instantiate a <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The WebAuthenticationSuccessAuditEvent constructor is not intended to be used directly from your code.","pos":[296,411],"source":"      > [!NOTE] >  The WebAuthenticationSuccessAuditEvent constructor is not intended to be used directly from your code."},{"content":"It is called by ASP.NET.","pos":[412,436]},{"content":"You can call the WebAuthenticationSuccessAuditEvent constructor when deriving from the &lt;xref:System.Web.Management.WebAuthenticationSuccessAuditEvent&gt; class.","pos":[437,594],"source":" You can call the WebAuthenticationSuccessAuditEvent constructor when deriving from the <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> class."}]},{"pos":[11518,11540],"content":"The event description.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event description.","pos":[0,22]}]},{"pos":[11608,11651],"content":"The object that is the source of the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that is the source of the event.","pos":[0,43]}]},{"pos":[11716,11896],"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code associated with the event.","pos":[0,35]},{"content":"When you implement a custom event, the event code must be greater than <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[36,180],"source":" When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>."}]},{"pos":[11967,12087],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventCodes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that specifies the detailed identifier for the event.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.Management.WebEventCodes\"></xref> value that specifies the detailed identifier for the event."},{"pos":[12162,12197],"content":"The name of the authenticated user.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the authenticated user.","pos":[0,35]}]},{"pos":[12786,12826],"content":"Gets the name of the authenticated user.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the authenticated user.","pos":[0,40]}]},{"pos":[12838,13020],"content":"Only the success audits include the name of the authenticated user. The failure audits do not include the user name, since they typically result from failed decryption or validation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Only the success audits include the name of the authenticated user. The failure audits do not include the user name, since they typically result from failed decryption or validation.","pos":[0,182],"nodes":[{"content":"Only the success audits include the name of the authenticated user.","pos":[0,67]},{"content":"The failure audits do not include the user name, since they typically result from failed decryption or validation.","pos":[68,182]}]}]},{"pos":[13512,13547],"content":"The name of the authenticated user.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the authenticated user.","pos":[0,35]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Management.WebAuthenticationSuccessAuditEvent\n  id: WebAuthenticationSuccessAuditEvent\n  children:\n  - System.Web.Management.WebAuthenticationSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.String)\n  - System.Web.Management.WebAuthenticationSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32,System.String)\n  - System.Web.Management.WebAuthenticationSuccessAuditEvent.NameToAuthenticate\n  langs:\n  - csharp\n  name: WebAuthenticationSuccessAuditEvent\n  nameWithType: WebAuthenticationSuccessAuditEvent\n  fullName: System.Web.Management.WebAuthenticationSuccessAuditEvent\n  type: Class\n  summary: Provides information about successful authentication events.\n  remarks: \"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  \\n  \\n The following list describes the features for which ASP.NET raises events of type WebAuthenticationSuccessAuditEvent.  \\n  \\n> [!NOTE]\\n>  By default ASP.NET is configured to log audit failure conditions only, as logging success conditions can severely strain system resources.  You can always configure the system to log the success conditions.  \\n  \\n-   Forms Authentication. Successful conditions are audited. Success audits include the user name that was authenticated. Instead, failure audits do not include the user name, since they typically result from a ticket that failed decryption or validation. Both contain the client IP address. The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationSuccess>.  \\n  \\n-   Membership. Successful conditions are audited. Both success and failure audits contain the username that was attempted. Neither form of audit will contain the password that was attempted, because that would risk persisting a valid password in the log. The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationSuccess>.  \\n  \\n When a WebAuthenticationSuccessAuditEvent is raised, by default it updates the Authentication Success Events Raised performance counter. To view this performance counter in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** in the **Performance object** drop-down list, select the Authentication Success Events Raised performance counter, and click the **Add** button. For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882&clcid=0x409) on MSDN.  \\n  \\n> [!NOTE]\\n>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the <xref:System.Web.Management.WebBaseEvent> class, see the example provided in this topic.\"\n  example:\n  - \"This code example has two parts: a configuration-file excerpt, followed by code that shows how to customize the WebAuthenticationSuccessAuditEvent event.  \\n  \\n This following is an excerpt of the configuration file's `provider` and `eventMappings` sections. They are already set by default. The only thing you need to do is to provide the setup for the `rules` element in the `healthMonitoring` section.  \\n  \\n```  \\n<healthMonitoring  \\n  enabled=\\\"true\\\"  \\n  heartBeatInterval=\\\"0\\\">  \\n  \\n    <providers>  \\n      // Configure the provider to process   \\n      // the health events.  \\n      <add name=\\\"EventLogProvider\\\"  \\n         type=\\\"System.Web.Management.EventLogWebEventProvider,  \\n         System.Web,Version=2.0.3600.0,Culture=neutral,  \\n         PublicKeyToken=b03f5f7f11d50a3a\\\"/>  \\n    </providers>  \\n  \\n    <eventMappings>  \\n       <clear />  \\n       // Configure the custom event   \\n       // to handle the audit events.   \\n        <add name=\\\"SampleWebAuthenticationSuccessAuditEvent\\\"   \\n          type=\\\"SamplesAspNet.SampleWebAuthenticationSuccessAuditEvent,  \\n          webauthsuccessaudit, Version=1.0.1735.23144, Culture=neutral,   \\n          PublicKeyToken=dd969eda3f3f6ae1, processorArchitecture=MSIL\\\" />  \\n  \\n     </eventMappings>  \\n     <rules>  \\n       <clear/>  \\n       // Establish the connection between custom event   \\n       // and the provider that must process it.  \\n      <add name=\\\"Log Authentication Success Audits\\\"   \\n        eventName=\\\"SampleWebAuthenticationFailureAuditEvent\\\"  \\n        provider=\\\"EventLogProvider\\\"   \\n        profile=\\\"Custom\\\" />\\\\  \\n     </rules>  \\n  \\n</healthMonitoring>  \\n```  \\n  \\n The following code shows how to customize the WebAuthenticationSuccessAuditEvent event.  \\n  \\n [!code-vb[System.Web.Management.WebAuthenticationSuccessAuditEvent#1](~/add/codesnippet/visualbasic/t-system.web.management._10_1.vb)]\\n [!code-cs[System.Web.Management.WebAuthenticationSuccessAuditEvent#1](~/add/codesnippet/csharp/t-system.web.management._10_1.cs)]\"\n  syntax:\n    content: 'public class WebAuthenticationSuccessAuditEvent : System.Web.Management.WebSuccessAuditEvent'\n  inheritance:\n  - System.Object\n  - System.Web.Management.WebBaseEvent\n  - System.Web.Management.WebManagementEvent\n  - System.Web.Management.WebAuditEvent\n  - System.Web.Management.WebSuccessAuditEvent\n  implements: []\n  inheritedMembers:\n  - System.Web.Management.WebAuditEvent.RequestInformation\n  - System.Web.Management.WebBaseEvent.ApplicationInformation\n  - System.Web.Management.WebBaseEvent.EventCode\n  - System.Web.Management.WebBaseEvent.EventDetailCode\n  - System.Web.Management.WebBaseEvent.EventID\n  - System.Web.Management.WebBaseEvent.EventOccurrence\n  - System.Web.Management.WebBaseEvent.EventSequence\n  - System.Web.Management.WebBaseEvent.EventSource\n  - System.Web.Management.WebBaseEvent.EventTime\n  - System.Web.Management.WebBaseEvent.EventTimeUtc\n  - System.Web.Management.WebBaseEvent.FormatCustomEventDetails(System.Web.Management.WebEventFormatter)\n  - System.Web.Management.WebBaseEvent.Message\n  - System.Web.Management.WebBaseEvent.Raise\n  - System.Web.Management.WebBaseEvent.Raise(System.Web.Management.WebBaseEvent)\n  - System.Web.Management.WebBaseEvent.ToString\n  - System.Web.Management.WebBaseEvent.ToString(System.Boolean,System.Boolean)\n  - System.Web.Management.WebManagementEvent.ProcessInformation\n  - System.Web.Management.WebSuccessAuditEvent.IncrementPerfCounters\n  platform:\n  - net462\n- uid: System.Web.Management.WebAuthenticationSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.String)\n  id: '#ctor(System.String,System.Object,System.Int32,System.String)'\n  parent: System.Web.Management.WebAuthenticationSuccessAuditEvent\n  langs:\n  - csharp\n  name: WebAuthenticationSuccessAuditEvent(String,Object,Int32,String)\n  nameWithType: WebAuthenticationSuccessAuditEvent.WebAuthenticationSuccessAuditEvent(String,Object,Int32,String)\n  fullName: System.Web.Management.WebAuthenticationSuccessAuditEvent.WebAuthenticationSuccessAuditEvent(String,Object,Int32,String)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Initializes the <xref href=\"System.Web.Management.WebAuthenticationSuccessAuditEvent\"></xref> class using the supplied parameters.\n  remarks: \"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to instantiate a <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class.  \\n  \\n> [!NOTE]\\n>  The WebAuthenticationSuccessAuditEvent constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the WebAuthenticationSuccessAuditEvent constructor when deriving from the <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> class.\"\n  example:\n  - \"The following code example shows how to customize this constructor.  \\n  \\n [!code-vb[System.Web.Management.WebAuthenticationSuccessAuditEvent#2](~/add/codesnippet/visualbasic/f06e0196-5c99-4ca7-a77b-_1.vb)]\\n [!code-cs[System.Web.Management.WebAuthenticationSuccessAuditEvent#2](~/add/codesnippet/csharp/f06e0196-5c99-4ca7-a77b-_1.cs)]\"\n  syntax:\n    content: protected WebAuthenticationSuccessAuditEvent (string message, object eventSource, int eventCode, string nameToAuthenticate);\n    parameters:\n    - id: message\n      type: System.String\n      description: The event description.\n    - id: eventSource\n      type: System.Object\n      description: The object that is the source of the event.\n    - id: eventCode\n      type: System.Int32\n      description: The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.\n    - id: nameToAuthenticate\n      type: System.String\n      description: The name of the authenticated user.\n  overload: System.Web.Management.WebAuthenticationSuccessAuditEvent.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebAuthenticationSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32,System.String)\n  id: '#ctor(System.String,System.Object,System.Int32,System.Int32,System.String)'\n  parent: System.Web.Management.WebAuthenticationSuccessAuditEvent\n  langs:\n  - csharp\n  name: WebAuthenticationSuccessAuditEvent(String,Object,Int32,Int32,String)\n  nameWithType: WebAuthenticationSuccessAuditEvent.WebAuthenticationSuccessAuditEvent(String,Object,Int32,Int32,String)\n  fullName: System.Web.Management.WebAuthenticationSuccessAuditEvent.WebAuthenticationSuccessAuditEvent(String,Object,Int32,Int32,String)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Initializes the <xref href=\"System.Web.Management.WebSuccessAuditEvent\"></xref> class using the supplied parameters.\n  remarks: \"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to instantiate a <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class.  \\n  \\n> [!NOTE]\\n>  The WebAuthenticationSuccessAuditEvent constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the WebAuthenticationSuccessAuditEvent constructor when deriving from the <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> class.\"\n  example:\n  - \"The following code example shows how to customize this constructor.  \\n  \\n [!code-vb[System.Web.Management.WebAuthenticationSuccessAuditEvent#3](~/add/codesnippet/visualbasic/afac7708-6243-4126-b8c9-_1.vb)]\\n [!code-cs[System.Web.Management.WebAuthenticationSuccessAuditEvent#3](~/add/codesnippet/csharp/afac7708-6243-4126-b8c9-_1.cs)]\"\n  syntax:\n    content: protected WebAuthenticationSuccessAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode, string nameToAuthenticate);\n    parameters:\n    - id: message\n      type: System.String\n      description: The event description.\n    - id: eventSource\n      type: System.Object\n      description: The object that is the source of the event.\n    - id: eventCode\n      type: System.Int32\n      description: The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.\n    - id: eventDetailCode\n      type: System.Int32\n      description: The <xref href=\"System.Web.Management.WebEventCodes\"></xref> value that specifies the detailed identifier for the event.\n    - id: nameToAuthenticate\n      type: System.String\n      description: The name of the authenticated user.\n  overload: System.Web.Management.WebAuthenticationSuccessAuditEvent.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebAuthenticationSuccessAuditEvent.NameToAuthenticate\n  id: NameToAuthenticate\n  parent: System.Web.Management.WebAuthenticationSuccessAuditEvent\n  langs:\n  - csharp\n  name: NameToAuthenticate\n  nameWithType: WebAuthenticationSuccessAuditEvent.NameToAuthenticate\n  fullName: System.Web.Management.WebAuthenticationSuccessAuditEvent.NameToAuthenticate\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the name of the authenticated user.\n  remarks: Only the success audits include the name of the authenticated user. The failure audits do not include the user name, since they typically result from failed decryption or validation.\n  example:\n  - \"The following code example shows how to use the NameToAuthenticate property.  \\n  \\n [!code-vb[System.Web.Management.WebAuthenticationSuccessAuditEvent#3](~/add/codesnippet/visualbasic/p-system.web.management._21_1.vb)]\\n [!code-cs[System.Web.Management.WebAuthenticationSuccessAuditEvent#3](~/add/codesnippet/csharp/p-system.web.management._21_1.cs)]\"\n  syntax:\n    content: public string NameToAuthenticate { get; }\n    return:\n      type: System.String\n      description: The name of the authenticated user.\n  overload: System.Web.Management.WebAuthenticationSuccessAuditEvent.NameToAuthenticate*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.Management.WebSuccessAuditEvent\n  isExternal: false\n  name: System.Web.Management.WebSuccessAuditEvent\n- uid: System.Web.Management.WebAuthenticationSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.String)\n  parent: System.Web.Management.WebAuthenticationSuccessAuditEvent\n  isExternal: false\n  name: WebAuthenticationSuccessAuditEvent(String,Object,Int32,String)\n  nameWithType: WebAuthenticationSuccessAuditEvent.WebAuthenticationSuccessAuditEvent(String,Object,Int32,String)\n  fullName: System.Web.Management.WebAuthenticationSuccessAuditEvent.WebAuthenticationSuccessAuditEvent(String,Object,Int32,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.Management.WebAuthenticationSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32,System.String)\n  parent: System.Web.Management.WebAuthenticationSuccessAuditEvent\n  isExternal: false\n  name: WebAuthenticationSuccessAuditEvent(String,Object,Int32,Int32,String)\n  nameWithType: WebAuthenticationSuccessAuditEvent.WebAuthenticationSuccessAuditEvent(String,Object,Int32,Int32,String)\n  fullName: System.Web.Management.WebAuthenticationSuccessAuditEvent.WebAuthenticationSuccessAuditEvent(String,Object,Int32,Int32,String)\n- uid: System.Web.Management.WebAuthenticationSuccessAuditEvent.NameToAuthenticate\n  parent: System.Web.Management.WebAuthenticationSuccessAuditEvent\n  isExternal: false\n  name: NameToAuthenticate\n  nameWithType: WebAuthenticationSuccessAuditEvent.NameToAuthenticate\n  fullName: System.Web.Management.WebAuthenticationSuccessAuditEvent.NameToAuthenticate\n- uid: System.Web.Management.WebAuthenticationSuccessAuditEvent.#ctor*\n  parent: System.Web.Management.WebAuthenticationSuccessAuditEvent\n  isExternal: false\n  name: WebAuthenticationSuccessAuditEvent\n  nameWithType: WebAuthenticationSuccessAuditEvent.WebAuthenticationSuccessAuditEvent\n- uid: System.Web.Management.WebAuthenticationSuccessAuditEvent.NameToAuthenticate*\n  parent: System.Web.Management.WebAuthenticationSuccessAuditEvent\n  isExternal: false\n  name: NameToAuthenticate\n  nameWithType: WebAuthenticationSuccessAuditEvent.NameToAuthenticate\n"}