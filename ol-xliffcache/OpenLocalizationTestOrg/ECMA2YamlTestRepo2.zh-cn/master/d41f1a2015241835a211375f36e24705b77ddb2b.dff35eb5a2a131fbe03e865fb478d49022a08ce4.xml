{"nodes":[{"pos":[418,463],"content":"Represents a wrapper class for a file handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a wrapper class for a file handle.","pos":[0,45]}]},{"pos":[476,1155],"content":"This class is derived from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>. A value of 0 or -1 is an invalid file handle.      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.","needQuote":false,"needEscape":true,"nodes":[{"content":"This class is derived from &lt;xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid&gt;.","pos":[0,96],"source":"This class is derived from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>."},{"content":"A value of 0 or -1 is an invalid file handle.","pos":[97,142]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.","pos":[148,227],"source":"      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[228,322]},{"content":"To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block.","pos":[323,434],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[435,542],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.","pos":[543,676],"source":" For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."}]},{"pos":[2471,2575],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeFileHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeFileHandle\"></xref> class."},{"pos":[3201,3279],"content":"An <xref:System.IntPtr> object that represents the pre-existing handle to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IntPtr&gt; object that represents the pre-existing handle to use.","pos":[0,78],"source":"An <xref:System.IntPtr> object that represents the pre-existing handle to use."}]},{"pos":[3347,3579],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to reliably release the handle during the finalization phase; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to prevent reliable release (not recommended).","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to reliably release the handle during the finalization phase; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to prevent reliable release (not recommended)."},{"pos":[4206,4218],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeFileHandle\n  id: SafeFileHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeFileHandle.#ctor(System.IntPtr,System.Boolean)\n  - Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle\n  langs:\n  - csharp\n  name: SafeFileHandle\n  nameWithType: SafeFileHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle\n  type: Class\n  summary: Represents a wrapper class for a file handle.\n  remarks: \"This class is derived from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>. A value of 0 or -1 is an invalid file handle.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\"\n  example:\n  - \"The following code example demonstrates how to open a file using the SafeFileHandle class and the unmanaged `CreateFile` function.  \\n  \\n [!code-vb[Microsoft.Win32.SafeHandles.SafeFileHandle#1](~/add/codesnippet/visualbasic/t-microsoft.win32.safeha_1.vb)]\\n [!code-cs[Microsoft.Win32.SafeHandles.SafeFileHandle#1](~/add/codesnippet/csharp/t-microsoft.win32.safeha_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public sealed class SafeFileHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  inheritance:\n  - System.Runtime.InteropServices.SafeHandle\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  implements: []\n  inheritedMembers:\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeFileHandle.#ctor(System.IntPtr,System.Boolean)\n  id: '#ctor(System.IntPtr,System.Boolean)'\n  parent: Microsoft.Win32.SafeHandles.SafeFileHandle\n  langs:\n  - csharp\n  name: SafeFileHandle(IntPtr,Boolean)\n  nameWithType: SafeFileHandle.SafeFileHandle(IntPtr,Boolean)\n  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle.SafeFileHandle(IntPtr,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeFileHandle\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to open a file by using the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class and the unmanaged `CreateFile` function.  \\n  \\n [!code-cs[Microsoft.Win32.SafeHandles.SafeFileHandle.ctor#1](~/add/codesnippet/csharp/7f421180-5aa6-451b-bfbd-_1.cs)]\\n [!code-vb[Microsoft.Win32.SafeHandles.SafeFileHandle.ctor#1](~/add/codesnippet/visualbasic/7f421180-5aa6-451b-bfbd-_1.vb)]\"\n  syntax:\n    content: public SafeFileHandle (IntPtr preexistingHandle, bool ownsHandle);\n    parameters:\n    - id: preexistingHandle\n      type: System.IntPtr\n      description: An <xref:System.IntPtr> object that represents the pre-existing handle to use.\n    - id: ownsHandle\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to reliably release the handle during the finalization phase; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to prevent reliable release (not recommended).\n  overload: Microsoft.Win32.SafeHandles.SafeFileHandle.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeFileHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeFileHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: protected override bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeFileHandle.#ctor(System.IntPtr,System.Boolean)\n  parent: Microsoft.Win32.SafeHandles.SafeFileHandle\n  isExternal: false\n  name: SafeFileHandle(IntPtr,Boolean)\n  nameWithType: SafeFileHandle.SafeFileHandle(IntPtr,Boolean)\n  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle.SafeFileHandle(IntPtr,Boolean)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeFileHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeFileHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeFileHandle.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeFileHandle\n  isExternal: false\n  name: SafeFileHandle\n  nameWithType: SafeFileHandle.SafeFileHandle\n- uid: Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeFileHandle\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: SafeFileHandle.ReleaseHandle\n"}