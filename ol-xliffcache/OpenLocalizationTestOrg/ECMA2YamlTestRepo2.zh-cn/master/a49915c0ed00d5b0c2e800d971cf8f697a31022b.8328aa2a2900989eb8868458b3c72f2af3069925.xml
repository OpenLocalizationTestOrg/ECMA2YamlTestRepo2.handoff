{"nodes":[{"pos":[412,556],"content":"Represents a transaction to be performed at a data source, and is implemented by .NET Framework data providers that access relational databases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a transaction to be performed at a data source, and is implemented by .NET Framework data providers that access relational databases.","pos":[0,144]}]},{"pos":[569,1439],"content":"The IDbTransaction interface allows an inheriting class to implement a Transaction class, which represents the transaction to be performed at a data source. For more information about Transaction classes, see [Transactions and Concurrency](~/add/includes/ajax-current-ext-md.md).       An application does not create an instance of the IDbTransaction interface directly, but creates an instance of a class that inherits IDbTransaction.       Classes that inherit IDbTransaction must implement the inherited members, and typically define additional members to add provider-specific functionality. For example, the IDbTransaction interface defines the <xref:System.Data.IDbTransaction.Commit%2A> method. In turn, the <xref:System.Data.OleDb.OleDbTransaction> class inherits this property, and also defines the <xref:System.Data.OleDb.OleDbTransaction.Begin%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The IDbTransaction interface allows an inheriting class to implement a Transaction class, which represents the transaction to be performed at a data source.","pos":[0,156]},{"content":"For more information about Transaction classes, see <bpt id=\"p1\">[</bpt>Transactions and Concurrency<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[157,279],"source":" For more information about Transaction classes, see [Transactions and Concurrency](~/add/includes/ajax-current-ext-md.md)."},{"content":"An application does not create an instance of the IDbTransaction interface directly, but creates an instance of a class that inherits IDbTransaction.","pos":[286,435]},{"content":"Classes that inherit IDbTransaction must implement the inherited members, and typically define additional members to add provider-specific functionality.","pos":[442,595]},{"content":"For example, the IDbTransaction interface defines the &lt;xref:System.Data.IDbTransaction.Commit%2A&gt; method.","pos":[596,701],"source":" For example, the IDbTransaction interface defines the <xref:System.Data.IDbTransaction.Commit%2A> method."},{"content":"In turn, the &lt;xref:System.Data.OleDb.OleDbTransaction&gt; class inherits this property, and also defines the &lt;xref:System.Data.OleDb.OleDbTransaction.Begin%2A&gt; method.","pos":[702,866],"source":" In turn, the <xref:System.Data.OleDb.OleDbTransaction> class inherits this property, and also defines the <xref:System.Data.OleDb.OleDbTransaction.Begin%2A> method."}]},{"pos":[2531,2564],"content":"Commits the database transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Commits the database transaction.","pos":[0,33]}]},{"pos":[3451,3508],"content":"An error occurred while trying to commit the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred while trying to commit the transaction.","pos":[0,57]}]},{"pos":[3620,3725],"content":"The transaction has already been committed or rolled back.       -or-       The connection is broken.","needQuote":false,"needEscape":true,"nodes":[{"content":"The transaction has already been committed or rolled back.       -or-       The connection is broken.","pos":[0,101],"nodes":[{"content":"The transaction has already been committed or rolled back.","pos":[0,58]},{"content":"-or-       The connection is broken.","pos":[65,101]}]}]},{"pos":[4063,4129],"content":"Specifies the Connection object to associate with the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the Connection object to associate with the transaction.","pos":[0,66]}]},{"pos":[4141,4341],"content":"A single application may have multiple database connections, each with zero or more transactions. This property enables you to determine the connection object associated with a particular transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"A single application may have multiple database connections, each with zero or more transactions. This property enables you to determine the connection object associated with a particular transaction.","pos":[0,200],"nodes":[{"content":"A single application may have multiple database connections, each with zero or more transactions.","pos":[0,97]},{"content":"This property enables you to determine the connection object associated with a particular transaction.","pos":[98,200]}]}]},{"pos":[4487,4543],"content":"The Connection object to associate with the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Connection object to associate with the transaction.","pos":[0,56]}]},{"pos":[4968,5051],"content":"Specifies the <bpt id=\"p1\">&lt;xref href=\"System.Data.IsolationLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for this transaction.","needQuote":true,"needEscape":true,"source":"Specifies the <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction."},{"pos":[5063,5187],"content":"Parallel transactions are not supported. Therefore, the <xref:System.Data.IsolationLevel> applies to the entire transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Parallel transactions are not supported. Therefore, the <xref:System.Data.IsolationLevel> applies to the entire transaction.","pos":[0,124],"nodes":[{"content":"Parallel transactions are not supported.","pos":[0,40]},{"content":"Therefore, the &lt;xref:System.Data.IsolationLevel&gt; applies to the entire transaction.","pos":[41,124],"source":" Therefore, the <xref:System.Data.IsolationLevel> applies to the entire transaction."}]}]},{"pos":[5339,5507],"content":"The <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction. The default is <xref uid=\"langword_csharp_ReadCommitted\" name=\"ReadCommitted\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.IsolationLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for this transaction.","pos":[0,73],"source":"The <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_ReadCommitted\" name=\"ReadCommitted\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[74,168],"source":" The default is <xref uid=\"langword_csharp_ReadCommitted\" name=\"ReadCommitted\" href=\"\"></xref>."}]},{"pos":[5910,5956],"content":"Rolls back a transaction from a pending state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Rolls back a transaction from a pending state.","pos":[0,46]}]},{"pos":[5968,6172],"content":"The transaction can only be rolled back from a pending state (after <xref:System.Data.IDbConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.IDbTransaction.Commit%2A> is called).","needQuote":true,"needEscape":true,"nodes":[{"content":"The transaction can only be rolled back from a pending state (after &lt;xref:System.Data.IDbConnection.BeginTransaction%2A&gt; has been called, but before &lt;xref:System.Data.IDbTransaction.Commit%2A&gt; is called).","pos":[0,204],"source":"The transaction can only be rolled back from a pending state (after <xref:System.Data.IDbConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.IDbTransaction.Commit%2A> is called)."}]},{"pos":[7049,7106],"content":"An error occurred while trying to commit the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred while trying to commit the transaction.","pos":[0,57]}]},{"pos":[7218,7323],"content":"The transaction has already been committed or rolled back.       -or-       The connection is broken.","needQuote":false,"needEscape":true,"nodes":[{"content":"The transaction has already been committed or rolled back.       -or-       The connection is broken.","pos":[0,101],"nodes":[{"content":"The transaction has already been committed or rolled back.","pos":[0,58]},{"content":"-or-       The connection is broken.","pos":[65,101]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.IDbTransaction\n  id: IDbTransaction\n  children:\n  - System.Data.IDbTransaction.Commit\n  - System.Data.IDbTransaction.Connection\n  - System.Data.IDbTransaction.IsolationLevel\n  - System.Data.IDbTransaction.Rollback\n  langs:\n  - csharp\n  name: IDbTransaction\n  nameWithType: IDbTransaction\n  fullName: System.Data.IDbTransaction\n  type: Interface\n  summary: Represents a transaction to be performed at a data source, and is implemented by .NET Framework data providers that access relational databases.\n  remarks: \"The IDbTransaction interface allows an inheriting class to implement a Transaction class, which represents the transaction to be performed at a data source. For more information about Transaction classes, see [Transactions and Concurrency](~/add/includes/ajax-current-ext-md.md).  \\n  \\n An application does not create an instance of the IDbTransaction interface directly, but creates an instance of a class that inherits IDbTransaction.  \\n  \\n Classes that inherit IDbTransaction must implement the inherited members, and typically define additional members to add provider-specific functionality. For example, the IDbTransaction interface defines the <xref:System.Data.IDbTransaction.Commit%2A> method. In turn, the <xref:System.Data.OleDb.OleDbTransaction> class inherits this property, and also defines the <xref:System.Data.OleDb.OleDbTransaction.Begin%2A> method.\"\n  example:\n  - \"The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection> and <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \\n  \\n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/t-system.data.idbtransac_1.cs)]\\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/t-system.data.idbtransac_1.vb)]\"\n  syntax:\n    content: 'public interface IDbTransaction : IDisposable'\n  implements:\n  - System.IDisposable\n  platform:\n  - net462\n- uid: System.Data.IDbTransaction.Commit\n  id: Commit\n  parent: System.Data.IDbTransaction\n  langs:\n  - csharp\n  name: Commit()\n  nameWithType: IDbTransaction.Commit()\n  fullName: System.Data.IDbTransaction.Commit()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Commits the database transaction.\n  remarks: ''\n  example:\n  - \"The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \\n  \\n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.idbtransac_0_1.cs)]\\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.idbtransac_0_1.vb)]\"\n  syntax:\n    content: public void Commit ();\n    parameters: []\n  overload: System.Data.IDbTransaction.Commit*\n  exceptions:\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: An error occurred while trying to commit the transaction.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The transaction has already been committed or rolled back.  \\n  \\n -or-  \\n  \\n The connection is broken.\"\n  platform:\n  - net462\n- uid: System.Data.IDbTransaction.Connection\n  id: Connection\n  parent: System.Data.IDbTransaction\n  langs:\n  - csharp\n  name: Connection\n  nameWithType: IDbTransaction.Connection\n  fullName: System.Data.IDbTransaction.Connection\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Specifies the Connection object to associate with the transaction.\n  remarks: A single application may have multiple database connections, each with zero or more transactions. This property enables you to determine the connection object associated with a particular transaction.\n  syntax:\n    content: public System.Data.IDbConnection Connection { get; }\n    return:\n      type: System.Data.IDbConnection\n      description: The Connection object to associate with the transaction.\n  overload: System.Data.IDbTransaction.Connection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbTransaction.IsolationLevel\n  id: IsolationLevel\n  parent: System.Data.IDbTransaction\n  langs:\n  - csharp\n  name: IsolationLevel\n  nameWithType: IDbTransaction.IsolationLevel\n  fullName: System.Data.IDbTransaction.IsolationLevel\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Specifies the <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction.\n  remarks: Parallel transactions are not supported. Therefore, the <xref:System.Data.IsolationLevel> applies to the entire transaction.\n  syntax:\n    content: public System.Data.IsolationLevel IsolationLevel { get; }\n    return:\n      type: System.Data.IsolationLevel\n      description: The <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction. The default is <xref uid=\"langword_csharp_ReadCommitted\" name=\"ReadCommitted\" href=\"\"></xref>.\n  overload: System.Data.IDbTransaction.IsolationLevel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbTransaction.Rollback\n  id: Rollback\n  parent: System.Data.IDbTransaction\n  langs:\n  - csharp\n  name: Rollback()\n  nameWithType: IDbTransaction.Rollback()\n  fullName: System.Data.IDbTransaction.Rollback()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Rolls back a transaction from a pending state.\n  remarks: The transaction can only be rolled back from a pending state (after <xref:System.Data.IDbConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.IDbTransaction.Commit%2A> is called).\n  example:\n  - \"The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \\n  \\n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.idbtransac_1_1.cs)]\\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.idbtransac_1_1.vb)]\"\n  syntax:\n    content: public void Rollback ();\n    parameters: []\n  overload: System.Data.IDbTransaction.Rollback*\n  exceptions:\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: An error occurred while trying to commit the transaction.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The transaction has already been committed or rolled back.  \\n  \\n -or-  \\n  \\n The connection is broken.\"\n  platform:\n  - net462\nreferences:\n- uid: System.Exception\n  isExternal: true\n  name: System.Exception\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Data.IDbTransaction.Commit\n  parent: System.Data.IDbTransaction\n  isExternal: false\n  name: Commit()\n  nameWithType: IDbTransaction.Commit()\n  fullName: System.Data.IDbTransaction.Commit()\n- uid: System.Data.IDbTransaction.Connection\n  parent: System.Data.IDbTransaction\n  isExternal: false\n  name: Connection\n  nameWithType: IDbTransaction.Connection\n  fullName: System.Data.IDbTransaction.Connection\n- uid: System.Data.IDbConnection\n  parent: System.Data\n  isExternal: false\n  name: IDbConnection\n  nameWithType: IDbConnection\n  fullName: System.Data.IDbConnection\n- uid: System.Data.IDbTransaction.IsolationLevel\n  parent: System.Data.IDbTransaction\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: IDbTransaction.IsolationLevel\n  fullName: System.Data.IDbTransaction.IsolationLevel\n- uid: System.Data.IsolationLevel\n  parent: System.Data\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: IsolationLevel\n  fullName: System.Data.IsolationLevel\n- uid: System.Data.IDbTransaction.Rollback\n  parent: System.Data.IDbTransaction\n  isExternal: false\n  name: Rollback()\n  nameWithType: IDbTransaction.Rollback()\n  fullName: System.Data.IDbTransaction.Rollback()\n- uid: System.Data.IDbTransaction.Commit*\n  parent: System.Data.IDbTransaction\n  isExternal: false\n  name: Commit\n  nameWithType: IDbTransaction.Commit\n- uid: System.Data.IDbTransaction.Connection*\n  parent: System.Data.IDbTransaction\n  isExternal: false\n  name: Connection\n  nameWithType: IDbTransaction.Connection\n- uid: System.Data.IDbTransaction.IsolationLevel*\n  parent: System.Data.IDbTransaction\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: IDbTransaction.IsolationLevel\n- uid: System.Data.IDbTransaction.Rollback*\n  parent: System.Data.IDbTransaction\n  isExternal: false\n  name: Rollback\n  nameWithType: IDbTransaction.Rollback\n"}