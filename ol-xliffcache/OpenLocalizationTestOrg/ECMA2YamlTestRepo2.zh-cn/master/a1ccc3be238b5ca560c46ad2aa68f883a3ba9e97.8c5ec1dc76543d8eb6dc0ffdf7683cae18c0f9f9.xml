{"nodes":[{"pos":[534,616],"content":"Enables managed code to handle exceptions that indicate a corrupted process state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enables managed code to handle exceptions that indicate a corrupted process state.","pos":[0,82]}]},{"pos":[629,2532],"content":"Corrupted process state exceptions are exceptions that indicate that the state of a process has been corrupted. We do not recommend executing your application in this state.       By default, the common language runtime (CLR) does not deliver these exceptions to managed code, and the `try`/`catch` blocks (and other exception-handling clauses) are not invoked for them. If you are absolutely sure that you want to maintain your handling of these exceptions, you must apply the HandleProcessCorruptedStateExceptionsAttribute attribute to the method whose exception-handling clauses you want to execute. The CLR delivers the corrupted process state exception to applicable exception clauses only in methods that have both the HandleProcessCorruptedStateExceptionsAttribute and <xref:System.Security.SecurityCriticalAttribute> attributes.       You can also add the  to your application's configuration file. This will ensure that corrupted state exceptions are delivered to your exception handlers without the HandleProcessCorruptedStateExceptionsAttribute or <xref:System.Security.SecurityCriticalAttribute> attribute. This configuration element has no effect on applications that were compiled in versions previous to the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)] but are running in the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] or later; corrupted state exceptions will continue to be delivered for those applications. The HandleProcessCorruptedStateExceptionsAttribute attribute is ignored when it is encountered in partially trusted or transparent code, because a trusted host should not allow an untrusted add-in to catch and ignore these serious exceptions.       For more information about corrupted process state exceptions, see the entry [Handling Corrupted State Exceptions](http://go.microsoft.com/fwlink/?LinkID=179681) in the CLR Inside Out blog.","needQuote":false,"needEscape":true,"nodes":[{"content":"Corrupted process state exceptions are exceptions that indicate that the state of a process has been corrupted.","pos":[0,111]},{"content":"We do not recommend executing your application in this state.","pos":[112,173]},{"content":"By default, the common language runtime (CLR) does not deliver these exceptions to managed code, and the <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> blocks (and other exception-handling clauses) are not invoked for them.","pos":[180,370],"source":"       By default, the common language runtime (CLR) does not deliver these exceptions to managed code, and the `try`/`catch` blocks (and other exception-handling clauses) are not invoked for them."},{"content":"If you are absolutely sure that you want to maintain your handling of these exceptions, you must apply the HandleProcessCorruptedStateExceptionsAttribute attribute to the method whose exception-handling clauses you want to execute.","pos":[371,602]},{"content":"The CLR delivers the corrupted process state exception to applicable exception clauses only in methods that have both the HandleProcessCorruptedStateExceptionsAttribute and &lt;xref:System.Security.SecurityCriticalAttribute&gt; attributes.","pos":[603,836],"source":" The CLR delivers the corrupted process state exception to applicable exception clauses only in methods that have both the HandleProcessCorruptedStateExceptionsAttribute and <xref:System.Security.SecurityCriticalAttribute> attributes."},{"content":"You can also add the  to your application's configuration file.","pos":[843,906]},{"content":"This will ensure that corrupted state exceptions are delivered to your exception handlers without the HandleProcessCorruptedStateExceptionsAttribute or &lt;xref:System.Security.SecurityCriticalAttribute&gt; attribute.","pos":[907,1118],"source":" This will ensure that corrupted state exceptions are delivered to your exception handlers without the HandleProcessCorruptedStateExceptionsAttribute or <xref:System.Security.SecurityCriticalAttribute> attribute."},{"content":"This configuration element has no effect on applications that were compiled in versions previous to the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph> but are running in the <ph id=\"ph2\">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph> or later; corrupted state exceptions will continue to be delivered for those applications.","pos":[1119,1458],"source":" This configuration element has no effect on applications that were compiled in versions previous to the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)] but are running in the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] or later; corrupted state exceptions will continue to be delivered for those applications."},{"content":"The HandleProcessCorruptedStateExceptionsAttribute attribute is ignored when it is encountered in partially trusted or transparent code, because a trusted host should not allow an untrusted add-in to catch and ignore these serious exceptions.","pos":[1459,1701]},{"content":"For more information about corrupted process state exceptions, see the entry <bpt id=\"p1\">[</bpt>Handling Corrupted State Exceptions<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=179681)</ept> in the CLR Inside Out blog.","pos":[1708,1897],"source":"       For more information about corrupted process state exceptions, see the entry [Handling Corrupted State Exceptions](http://go.microsoft.com/fwlink/?LinkID=179681) in the CLR Inside Out blog."}]},{"pos":[3476,3617],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\"></xref> class."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\n  id: HandleProcessCorruptedStateExceptionsAttribute\n  children:\n  - System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.#ctor\n  langs:\n  - csharp\n  name: HandleProcessCorruptedStateExceptionsAttribute\n  nameWithType: HandleProcessCorruptedStateExceptionsAttribute\n  fullName: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\n  type: Class\n  summary: Enables managed code to handle exceptions that indicate a corrupted process state.\n  remarks: \"Corrupted process state exceptions are exceptions that indicate that the state of a process has been corrupted. We do not recommend executing your application in this state.  \\n  \\n By default, the common language runtime (CLR) does not deliver these exceptions to managed code, and the `try`/`catch` blocks (and other exception-handling clauses) are not invoked for them. If you are absolutely sure that you want to maintain your handling of these exceptions, you must apply the HandleProcessCorruptedStateExceptionsAttribute attribute to the method whose exception-handling clauses you want to execute. The CLR delivers the corrupted process state exception to applicable exception clauses only in methods that have both the HandleProcessCorruptedStateExceptionsAttribute and <xref:System.Security.SecurityCriticalAttribute> attributes.  \\n  \\n You can also add the  to your application's configuration file. This will ensure that corrupted state exceptions are delivered to your exception handlers without the HandleProcessCorruptedStateExceptionsAttribute or <xref:System.Security.SecurityCriticalAttribute> attribute. This configuration element has no effect on applications that were compiled in versions previous to the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)] but are running in the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] or later; corrupted state exceptions will continue to be delivered for those applications. The HandleProcessCorruptedStateExceptionsAttribute attribute is ignored when it is encountered in partially trusted or transparent code, because a trusted host should not allow an untrusted add-in to catch and ignore these serious exceptions.  \\n  \\n For more information about corrupted process state exceptions, see the entry [Handling Corrupted State Exceptions](http://go.microsoft.com/fwlink/?LinkID=179681) in the CLR Inside Out blog.\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false, Inherited=false)]\n\n      public sealed class HandleProcessCorruptedStateExceptionsAttribute : Attribute\n  inheritance:\n  - System.Attribute\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.#ctor\n  id: '#ctor'\n  parent: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\n  langs:\n  - csharp\n  name: HandleProcessCorruptedStateExceptionsAttribute()\n  nameWithType: HandleProcessCorruptedStateExceptionsAttribute.HandleProcessCorruptedStateExceptionsAttribute()\n  fullName: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.HandleProcessCorruptedStateExceptionsAttribute()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.ExceptionServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\"></xref> class.\n  syntax:\n    content: public HandleProcessCorruptedStateExceptionsAttribute ();\n    parameters: []\n  overload: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Attribute\n  isExternal: false\n  name: System.Attribute\n- uid: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.#ctor\n  parent: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\n  isExternal: false\n  name: HandleProcessCorruptedStateExceptionsAttribute()\n  nameWithType: HandleProcessCorruptedStateExceptionsAttribute.HandleProcessCorruptedStateExceptionsAttribute()\n  fullName: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.HandleProcessCorruptedStateExceptionsAttribute()\n- uid: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.#ctor*\n  parent: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\n  isExternal: false\n  name: HandleProcessCorruptedStateExceptionsAttribute\n  nameWithType: HandleProcessCorruptedStateExceptionsAttribute.HandleProcessCorruptedStateExceptionsAttribute\n"}