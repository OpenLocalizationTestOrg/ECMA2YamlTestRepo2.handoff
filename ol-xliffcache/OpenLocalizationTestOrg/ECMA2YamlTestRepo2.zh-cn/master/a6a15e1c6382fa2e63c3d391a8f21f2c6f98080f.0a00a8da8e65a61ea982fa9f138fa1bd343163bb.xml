{"nodes":[{"pos":[500,556],"content":"Represents a literal code fragment that can be compiled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a literal code fragment that can be compiled.","pos":[0,56]}]},{"pos":[569,1328],"content":"CodeSnippetCompileUnit can represent a literal block of code that is included directly in the source without modification.       A CodeSnippetCompileUnit stores a section of code, exactly in its original format, as a string. The CodeDOM does not translate literal code fragments. Literal code fragments are stored and output in their original format. CodeDOM objects that contain literal code are provided so developers can encapsulate code that is already in the target language.       The <xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> property contains the literal code fragment as a string. The <xref:System.CodeDom.CodeSnippetCompileUnit.LinePragma%2A> property is optional and specifies the position of the code within a source code document.","needQuote":false,"needEscape":true,"nodes":[{"content":"CodeSnippetCompileUnit can represent a literal block of code that is included directly in the source without modification.       A CodeSnippetCompileUnit stores a section of code, exactly in its original format, as a string. The CodeDOM does not translate literal code fragments. Literal code fragments are stored and output in their original format. CodeDOM objects that contain literal code are provided so developers can encapsulate code that is already in the target language.       The <xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> property contains the literal code fragment as a string. The <xref:System.CodeDom.CodeSnippetCompileUnit.LinePragma%2A> property is optional and specifies the position of the code within a source code document.","pos":[0,755],"nodes":[{"content":"CodeSnippetCompileUnit can represent a literal block of code that is included directly in the source without modification.","pos":[0,122]},{"content":"A CodeSnippetCompileUnit stores a section of code, exactly in its original format, as a string.","pos":[129,224]},{"content":"The CodeDOM does not translate literal code fragments.","pos":[225,279]},{"content":"Literal code fragments are stored and output in their original format.","pos":[280,350]},{"content":"CodeDOM objects that contain literal code are provided so developers can encapsulate code that is already in the target language.","pos":[351,480]},{"content":"The &lt;xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A&gt; property contains the literal code fragment as a string.","pos":[487,601],"source":"       The <xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> property contains the literal code fragment as a string."},{"content":"The &lt;xref:System.CodeDom.CodeSnippetCompileUnit.LinePragma%2A&gt; property is optional and specifies the position of the code within a source code document.","pos":[602,755],"source":" The <xref:System.CodeDom.CodeSnippetCompileUnit.LinePragma%2A> property is optional and specifies the position of the code within a source code document."}]}]},{"pos":[2914,3013],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeSnippetCompileUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeSnippetCompileUnit\"></xref> class."},{"pos":[3025,3140],"content":"If you use this constructor you should also set the <xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"If you use this constructor you should also set the &lt;xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A&gt; property.","pos":[0,115],"source":"If you use this constructor you should also set the <xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> property."}]},{"pos":[3751,3850],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeSnippetCompileUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeSnippetCompileUnit\"></xref> class."},{"pos":[4492,4531],"content":"The literal code fragment to represent.","needQuote":true,"needEscape":true,"nodes":[{"content":"The literal code fragment to represent.","pos":[0,39]}]},{"pos":[4981,5082],"content":"Gets or sets the line and file information about where the code is located in a source code document.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the line and file information about where the code is located in a source code document.","pos":[0,101]}]},{"pos":[5241,5343],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeLinePragma\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the position of the code fragment.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeLinePragma\"></xref> that indicates the position of the code fragment."},{"pos":[5773,5825],"content":"Gets or sets the literal code fragment to represent.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the literal code fragment to represent.","pos":[0,52]}]},{"pos":[5940,5966],"content":"The literal code fragment.","needQuote":true,"needEscape":true,"nodes":[{"content":"The literal code fragment.","pos":[0,26]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.CodeDom.CodeSnippetCompileUnit\n  id: CodeSnippetCompileUnit\n  children:\n  - System.CodeDom.CodeSnippetCompileUnit.#ctor\n  - System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)\n  - System.CodeDom.CodeSnippetCompileUnit.LinePragma\n  - System.CodeDom.CodeSnippetCompileUnit.Value\n  langs:\n  - csharp\n  name: CodeSnippetCompileUnit\n  nameWithType: CodeSnippetCompileUnit\n  fullName: System.CodeDom.CodeSnippetCompileUnit\n  type: Class\n  summary: Represents a literal code fragment that can be compiled.\n  remarks: \"CodeSnippetCompileUnit can represent a literal block of code that is included directly in the source without modification.  \\n  \\n A CodeSnippetCompileUnit stores a section of code, exactly in its original format, as a string. The CodeDOM does not translate literal code fragments. Literal code fragments are stored and output in their original format. CodeDOM objects that contain literal code are provided so developers can encapsulate code that is already in the target language.  \\n  \\n The <xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> property contains the literal code fragment as a string. The <xref:System.CodeDom.CodeSnippetCompileUnit.LinePragma%2A> property is optional and specifies the position of the code within a source code document.\"\n  example:\n  - \"The following code example demonstrates how to create a new instance of the CodeSnippetCompileUnit class by using a string that represents literal code.  \\n  \\n [!code-cpp[CodeDomSampleBatch#8](~/add/codesnippet/cpp/t-system.codedom.codesni_0_1.cpp)]\\n [!code-vb[CodeDomSampleBatch#8](~/add/codesnippet/visualbasic/t-system.codedom.codesni_0_1.vb)]\\n [!code-cs[CodeDomSampleBatch#8](~/add/codesnippet/csharp/t-system.codedom.codesni_0_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class CodeSnippetCompileUnit : System.CodeDom.CodeCompileUnit\n  inheritance:\n  - System.Object\n  - System.CodeDom.CodeObject\n  - System.CodeDom.CodeCompileUnit\n  implements: []\n  inheritedMembers:\n  - System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes\n  - System.CodeDom.CodeCompileUnit.EndDirectives\n  - System.CodeDom.CodeCompileUnit.Namespaces\n  - System.CodeDom.CodeCompileUnit.ReferencedAssemblies\n  - System.CodeDom.CodeCompileUnit.StartDirectives\n  - System.CodeDom.CodeObject.UserData\n  platform:\n  - net462\n- uid: System.CodeDom.CodeSnippetCompileUnit.#ctor\n  id: '#ctor'\n  parent: System.CodeDom.CodeSnippetCompileUnit\n  langs:\n  - csharp\n  name: CodeSnippetCompileUnit()\n  nameWithType: CodeSnippetCompileUnit.CodeSnippetCompileUnit()\n  fullName: System.CodeDom.CodeSnippetCompileUnit.CodeSnippetCompileUnit()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeSnippetCompileUnit\"></xref> class.\n  remarks: If you use this constructor you should also set the <xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> property.\n  syntax:\n    content: public CodeSnippetCompileUnit ();\n    parameters: []\n  overload: System.CodeDom.CodeSnippetCompileUnit.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.CodeDom.CodeSnippetCompileUnit\n  langs:\n  - csharp\n  name: CodeSnippetCompileUnit(String)\n  nameWithType: CodeSnippetCompileUnit.CodeSnippetCompileUnit(String)\n  fullName: System.CodeDom.CodeSnippetCompileUnit.CodeSnippetCompileUnit(String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeSnippetCompileUnit\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to create a new instance of the <xref:System.CodeDom.CodeSnippetCompileUnit> class by using a string that represents literal code.  \\n  \\n [!code-cpp[CodeDomSampleBatch#8](~/add/codesnippet/cpp/m-system.codedom.codesni_1_1.cpp)]\\n [!code-vb[CodeDomSampleBatch#8](~/add/codesnippet/visualbasic/m-system.codedom.codesni_1_1.vb)]\\n [!code-cs[CodeDomSampleBatch#8](~/add/codesnippet/csharp/m-system.codedom.codesni_1_1.cs)]\"\n  syntax:\n    content: public CodeSnippetCompileUnit (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The literal code fragment to represent.\n  overload: System.CodeDom.CodeSnippetCompileUnit.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeSnippetCompileUnit.LinePragma\n  id: LinePragma\n  parent: System.CodeDom.CodeSnippetCompileUnit\n  langs:\n  - csharp\n  name: LinePragma\n  nameWithType: CodeSnippetCompileUnit.LinePragma\n  fullName: System.CodeDom.CodeSnippetCompileUnit.LinePragma\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the line and file information about where the code is located in a source code document.\n  syntax:\n    content: public System.CodeDom.CodeLinePragma LinePragma { get; set; }\n    return:\n      type: System.CodeDom.CodeLinePragma\n      description: A <xref href=\"System.CodeDom.CodeLinePragma\"></xref> that indicates the position of the code fragment.\n  overload: System.CodeDom.CodeSnippetCompileUnit.LinePragma*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeSnippetCompileUnit.Value\n  id: Value\n  parent: System.CodeDom.CodeSnippetCompileUnit\n  langs:\n  - csharp\n  name: Value\n  nameWithType: CodeSnippetCompileUnit.Value\n  fullName: System.CodeDom.CodeSnippetCompileUnit.Value\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the literal code fragment to represent.\n  syntax:\n    content: public string Value { get; set; }\n    return:\n      type: System.String\n      description: The literal code fragment.\n  overload: System.CodeDom.CodeSnippetCompileUnit.Value*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.CodeDom.CodeCompileUnit\n  isExternal: false\n  name: System.CodeDom.CodeCompileUnit\n- uid: System.CodeDom.CodeSnippetCompileUnit.#ctor\n  parent: System.CodeDom.CodeSnippetCompileUnit\n  isExternal: false\n  name: CodeSnippetCompileUnit()\n  nameWithType: CodeSnippetCompileUnit.CodeSnippetCompileUnit()\n  fullName: System.CodeDom.CodeSnippetCompileUnit.CodeSnippetCompileUnit()\n- uid: System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)\n  parent: System.CodeDom.CodeSnippetCompileUnit\n  isExternal: false\n  name: CodeSnippetCompileUnit(String)\n  nameWithType: CodeSnippetCompileUnit.CodeSnippetCompileUnit(String)\n  fullName: System.CodeDom.CodeSnippetCompileUnit.CodeSnippetCompileUnit(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.CodeDom.CodeSnippetCompileUnit.LinePragma\n  parent: System.CodeDom.CodeSnippetCompileUnit\n  isExternal: false\n  name: LinePragma\n  nameWithType: CodeSnippetCompileUnit.LinePragma\n  fullName: System.CodeDom.CodeSnippetCompileUnit.LinePragma\n- uid: System.CodeDom.CodeLinePragma\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeLinePragma\n  nameWithType: CodeLinePragma\n  fullName: System.CodeDom.CodeLinePragma\n- uid: System.CodeDom.CodeSnippetCompileUnit.Value\n  parent: System.CodeDom.CodeSnippetCompileUnit\n  isExternal: false\n  name: Value\n  nameWithType: CodeSnippetCompileUnit.Value\n  fullName: System.CodeDom.CodeSnippetCompileUnit.Value\n- uid: System.CodeDom.CodeSnippetCompileUnit.#ctor*\n  parent: System.CodeDom.CodeSnippetCompileUnit\n  isExternal: false\n  name: CodeSnippetCompileUnit\n  nameWithType: CodeSnippetCompileUnit.CodeSnippetCompileUnit\n- uid: System.CodeDom.CodeSnippetCompileUnit.LinePragma*\n  parent: System.CodeDom.CodeSnippetCompileUnit\n  isExternal: false\n  name: LinePragma\n  nameWithType: CodeSnippetCompileUnit.LinePragma\n- uid: System.CodeDom.CodeSnippetCompileUnit.Value*\n  parent: System.CodeDom.CodeSnippetCompileUnit\n  isExternal: false\n  name: Value\n  nameWithType: CodeSnippetCompileUnit.Value\n"}