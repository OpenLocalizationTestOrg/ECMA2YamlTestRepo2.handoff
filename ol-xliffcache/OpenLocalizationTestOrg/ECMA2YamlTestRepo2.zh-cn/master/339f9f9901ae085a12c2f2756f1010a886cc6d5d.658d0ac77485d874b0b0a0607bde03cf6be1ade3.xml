{"nodes":[{"pos":[1331,1503],"content":"Represents the query parameters as <bpt id=\"p1\">&lt;xref href=\"System.Data.Objects.ObjectParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that are defined in an <ph id=\"ph1\">&amp;lt;</ph>xref:System.Data.Objects.ObjectQuery%601<ph id=\"ph2\">&amp;gt;</ph>.","needQuote":true,"needEscape":true,"source":"Represents the query parameters as <xref href=\"System.Data.Objects.ObjectParameter\"></xref> objects that are defined in an &lt;xref:System.Data.Objects.ObjectQuery%601&gt;."},{"pos":[1516,2888],"content":"Represents the query parameters as <xref:System.Data.Objects.ObjectParameter> objects defined in an <xref:System.Data.Objects.ObjectQuery%601>.       This class cannot be inherited.       The parameters that are passed to query builder methods are aggregated by successive instances of an <xref:System.Data.Objects.ObjectQuery%601> in the sequence. They can be accessed by using the <xref:System.Data.Objects.ObjectQuery.Parameters%2A> property, which returns the ObjectParameterCollection. After parameters have been added, they can be removed from the collection and the collection can be cleared, as long as the query has not been compiled or executed. Parameter names cannot be changed, but values can be changed at any time.       Parameters must be unique in the ObjectParameterCollection. There cannot be two parameters in the collection with the same name.       When using composition methods, such as <xref:System.Data.Objects.ObjectQuery%601.Union%2A>, <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>, <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> and <xref:System.Data.Objects.ObjectQuery%601.Except%2A>, the parameters are merged. An exception is thrown when the sets of parameters are incompatible or incomplete. For more information, see [Query Builder Methods](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0).","needQuote":false,"needEscape":true,"nodes":[{"content":"Represents the query parameters as &lt;xref:System.Data.Objects.ObjectParameter&gt; objects defined in an &lt;xref:System.Data.Objects.ObjectQuery%601&gt;.","pos":[0,143],"source":"Represents the query parameters as <xref:System.Data.Objects.ObjectParameter> objects defined in an <xref:System.Data.Objects.ObjectQuery%601>."},{"content":"This class cannot be inherited.","pos":[150,181]},{"content":"The parameters that are passed to query builder methods are aggregated by successive instances of an &lt;xref:System.Data.Objects.ObjectQuery%601&gt; in the sequence.","pos":[188,348],"source":"       The parameters that are passed to query builder methods are aggregated by successive instances of an <xref:System.Data.Objects.ObjectQuery%601> in the sequence."},{"content":"They can be accessed by using the &lt;xref:System.Data.Objects.ObjectQuery.Parameters%2A&gt; property, which returns the ObjectParameterCollection.","pos":[349,490],"source":" They can be accessed by using the <xref:System.Data.Objects.ObjectQuery.Parameters%2A> property, which returns the ObjectParameterCollection."},{"content":"After parameters have been added, they can be removed from the collection and the collection can be cleared, as long as the query has not been compiled or executed.","pos":[491,655]},{"content":"Parameter names cannot be changed, but values can be changed at any time.","pos":[656,729]},{"content":"Parameters must be unique in the ObjectParameterCollection.","pos":[736,795]},{"content":"There cannot be two parameters in the collection with the same name.","pos":[796,864]},{"content":"When using composition methods, such as &lt;xref:System.Data.Objects.ObjectQuery%601.Union%2A&gt;, &lt;xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A&gt;, &lt;xref:System.Data.Objects.ObjectQuery%601.Intersect%2A&gt; and &lt;xref:System.Data.Objects.ObjectQuery%601.Except%2A&gt;, the parameters are merged.","pos":[871,1160],"source":"       When using composition methods, such as <xref:System.Data.Objects.ObjectQuery%601.Union%2A>, <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>, <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> and <xref:System.Data.Objects.ObjectQuery%601.Except%2A>, the parameters are merged."},{"content":"An exception is thrown when the sets of parameters are incompatible or incomplete.","pos":[1161,1243]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Query Builder Methods<ept id=\"p1\">](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0)</ept>.","pos":[1244,1364],"source":" For more information, see [Query Builder Methods](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0)."}]},{"pos":[4640,4734],"content":"Adds the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.Objects.ObjectParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the collection.","needQuote":true,"needEscape":true,"source":"Adds the specified <xref href=\"System.Data.Objects.ObjectParameter\"></xref> to the collection."},{"pos":[4747,5270],"content":"After parameters have been added, they can be removed from the collection and the collection can be cleared, as long as the query has not been compiled or executed. Parameter names cannot be changed, but values can be changed at any time.       Parameters must be unique in the <xref:System.Data.Objects.ObjectParameterCollection>. There cannot be two parameters in the collection with the same name. For more information, see [Query Builder Methods](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0).","needQuote":false,"needEscape":true,"nodes":[{"content":"After parameters have been added, they can be removed from the collection and the collection can be cleared, as long as the query has not been compiled or executed.","pos":[0,164]},{"content":"Parameter names cannot be changed, but values can be changed at any time.","pos":[165,238]},{"content":"Parameters must be unique in the &lt;xref:System.Data.Objects.ObjectParameterCollection&gt;.","pos":[245,331],"source":"       Parameters must be unique in the <xref:System.Data.Objects.ObjectParameterCollection>."},{"content":"There cannot be two parameters in the collection with the same name.","pos":[332,400]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Query Builder Methods<ept id=\"p1\">](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0)</ept>.","pos":[401,521],"source":" For more information, see [Query Builder Methods](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0)."}]},{"pos":[6217,6256],"content":"The parameter to add to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameter to add to the collection.","pos":[0,39]}]},{"pos":[6436,6536],"content":"The<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\"> parameter</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The<code> parameter</code> argument is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6632,7082],"content":"The <code>parameter</code> argument already exists in the collection. This behavior differs from that of most collections that allow duplicate entries.       -or-       Another parameter with the same name as the <code>parameter</code> argument already exists in the collection. Note that the lookup is case-insensitive. This behavior differs from that of most collections, and is more like that of a <xref:System.Collections.Generic.Dictionary>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameter</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument already exists in the collection.","pos":[0,69],"source":"The <code>parameter</code> argument already exists in the collection."},{"content":"This behavior differs from that of most collections that allow duplicate entries.","pos":[70,151]},{"content":"-or-       Another parameter with the same name as the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameter</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument already exists in the collection.","pos":[158,278],"source":"       -or-       Another parameter with the same name as the <code>parameter</code> argument already exists in the collection."},{"content":"Note that the lookup is case-insensitive.","pos":[279,320]},{"content":"This behavior differs from that of most collections, and is more like that of a &lt;xref:System.Collections.Generic.Dictionary&gt;.","pos":[321,446],"source":" This behavior differs from that of most collections, and is more like that of a <xref:System.Collections.Generic.Dictionary>."}]},{"pos":[7198,7250],"content":"The type of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameter</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not valid.","needQuote":true,"needEscape":true,"source":"The type of the <code>parameter</code> is not valid."},{"pos":[7649,7748],"content":"Deletes all <bpt id=\"p1\">&lt;xref href=\"System.Data.Objects.ObjectParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instances from the collection.","needQuote":true,"needEscape":true,"source":"Deletes all <xref href=\"System.Data.Objects.ObjectParameter\"></xref> instances from the collection."},{"pos":[8427,8555],"content":"Checks for the existence of a specified <bpt id=\"p1\">&lt;xref href=\"System.Data.Objects.ObjectParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the collection by reference.","needQuote":true,"needEscape":true,"source":"Checks for the existence of a specified <xref href=\"System.Data.Objects.ObjectParameter\"></xref> in the collection by reference."},{"pos":[8567,8801],"content":"This is a reference-based check. That is, if an <xref:System.Data.Objects.ObjectParameter> is specified that contains the same name as a parameter object in the collection, this method will only return `true` if it is the same object.","needQuote":true,"needEscape":true,"nodes":[{"content":"This is a reference-based check.","pos":[0,32]},{"content":"That is, if an &lt;xref:System.Data.Objects.ObjectParameter&gt; is specified that contains the same name as a parameter object in the collection, this method will only return <ph id=\"ph1\">`true`</ph> if it is the same object.","pos":[33,234],"source":" That is, if an <xref:System.Data.Objects.ObjectParameter> is specified that contains the same name as a parameter object in the collection, this method will only return `true` if it is the same object."}]},{"pos":[8998,9085],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.Objects.ObjectParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to find in the collection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.Objects.ObjectParameter\"></xref> to find in the collection."},{"pos":[9144,9340],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the parameter object was found in the collection; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the parameter object was found in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9525,9625],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameter</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>parameter</code> argument is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[10087,10211],"content":"Determines whether an <bpt id=\"p1\">&lt;xref href=\"System.Data.Objects.ObjectParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified name is in the collection.","needQuote":true,"needEscape":true,"source":"Determines whether an <xref href=\"System.Data.Objects.ObjectParameter\"></xref> with the specified name is in the collection."},{"pos":[11039,11259],"content":"The name of the parameter to look for in the collection. This name should not include the \"@\" parameter marker that is used in the [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] statements, only the actual name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the parameter to look for in the collection.","pos":[0,56]},{"content":"This name should not include the \"@\" parameter marker that is used in the <ph id=\"ph1\">[!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)]</ph> statements, only the actual name.","pos":[57,220],"source":" This name should not include the \"@\" parameter marker that is used in the [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] statements, only the actual name."}]},{"pos":[11318,11529],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a parameter with the specified name was found in the collection; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a parameter with the specified name was found in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11714,11810],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12387,12511],"content":"Allows the parameters in the collection to be copied into a supplied array, starting with the object at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows the parameters in the collection to be copied into a supplied array, starting with the object at the specified index.","pos":[0,124]}]},{"pos":[13293,13337],"content":"The array into which to copy the parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array into which to copy the parameters.","pos":[0,44]}]},{"pos":[13398,13462],"content":"The index in the array at which to start copying the parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index in the array at which to start copying the parameters.","pos":[0,64]}]},{"pos":[13940,13998],"content":"Gets the number of parameters currently in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of parameters currently in the collection.","pos":[0,58]}]},{"pos":[14932,15048],"content":"The number of <bpt id=\"p1\">&lt;xref href=\"System.Data.Objects.ObjectParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that are currently in the collection.","needQuote":true,"needEscape":true,"source":"The number of <xref href=\"System.Data.Objects.ObjectParameter\"></xref> objects that are currently in the collection."},{"pos":[15574,15645],"content":"Provides an indexer that allows callers to retrieve parameters by name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an indexer that allows callers to retrieve parameters by name.","pos":[0,71]}]},{"pos":[15815,16013],"content":"The name of the parameter to find. This name should not include the \"@\" parameter marker that is used in the [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] statements, only the actual name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the parameter to find.","pos":[0,34]},{"content":"This name should not include the \"@\" parameter marker that is used in the <ph id=\"ph1\">[!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)]</ph> statements, only the actual name.","pos":[35,198],"source":" This name should not include the \"@\" parameter marker that is used in the [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] statements, only the actual name."}]},{"pos":[16093,16163],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.Objects.ObjectParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.Objects.ObjectParameter\"></xref> instance."},{"pos":[16356,16420],"content":"No parameter with the specified name is found in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"No parameter with the specified name is found in the collection.","pos":[0,64]}]},{"pos":[16943,17090],"content":"Removes an instance of an <bpt id=\"p1\">&lt;xref href=\"System.Data.Objects.ObjectParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the collection by reference if it exists in the collection.","needQuote":true,"needEscape":true,"source":"Removes an instance of an <xref href=\"System.Data.Objects.ObjectParameter\"></xref> from the collection by reference if it exists in the collection."},{"pos":[17102,17461],"content":"This is a reference-based comparison. That is, if a query parameter object is specified that contains the same name as a parameter object in the collection, the parameter in the collection will only be removed if it is the same object. To remove an object by name, first use the indexer to retrieve the parameter instance, then remove it by using this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"This is a reference-based comparison. That is, if a query parameter object is specified that contains the same name as a parameter object in the collection, the parameter in the collection will only be removed if it is the same object. To remove an object by name, first use the indexer to retrieve the parameter instance, then remove it by using this method.","pos":[0,359],"nodes":[{"content":"This is a reference-based comparison.","pos":[0,37]},{"content":"That is, if a query parameter object is specified that contains the same name as a parameter object in the collection, the parameter in the collection will only be removed if it is the same object.","pos":[38,235]},{"content":"To remove an object by name, first use the indexer to retrieve the parameter instance, then remove it by using this method.","pos":[236,359]}]}]},{"pos":[18245,18285],"content":"An object to remove from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object to remove from the collection.","pos":[0,40]}]},{"pos":[18344,18554],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the parameter object was found and removed from the collection; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the parameter object was found and removed from the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18737,18837],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameter</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>parameter</code> argument is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19678,19690],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20806,20818],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21592,21642],"content":"Returns an untyped enumerator over the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an untyped enumerator over the collection.","pos":[0,50]}]},{"pos":[21654,21769],"content":"Returns an untyped enumerator over the collection. This allows the collection to be iterated through and traversed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an untyped enumerator over the collection. This allows the collection to be iterated through and traversed.","pos":[0,115],"nodes":[{"content":"Returns an untyped enumerator over the collection.","pos":[0,50]},{"content":"This allows the collection to be iterated through and traversed.","pos":[51,115]}]}]},{"pos":[21947,21997],"content":"An <xref:System.Collections.IEnumerator> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerator&gt; instance.","pos":[0,50],"source":"An <xref:System.Collections.IEnumerator> instance."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Objects.ObjectParameterCollection\n  id: ObjectParameterCollection\n  children:\n  - System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)\n  - System.Data.Objects.ObjectParameterCollection.Clear\n  - System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)\n  - System.Data.Objects.ObjectParameterCollection.Contains(System.String)\n  - System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)\n  - System.Data.Objects.ObjectParameterCollection.Count\n  - System.Data.Objects.ObjectParameterCollection.Item(System.String)\n  - System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)\n  - System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{System#Data#Objects#ObjectParameter}#IsReadOnly\n  - System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable{System#Data#Objects#ObjectParameter}#GetEnumerator\n  - System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: ObjectParameterCollection\n  nameWithType: ObjectParameterCollection\n  fullName: System.Data.Objects.ObjectParameterCollection\n  type: Class\n  summary: Represents the query parameters as <xref href=\"System.Data.Objects.ObjectParameter\"></xref> objects that are defined in an &lt;xref:System.Data.Objects.ObjectQuery%601&gt;.\n  remarks: \"Represents the query parameters as <xref:System.Data.Objects.ObjectParameter> objects defined in an <xref:System.Data.Objects.ObjectQuery%601>.  \\n  \\n This class cannot be inherited.  \\n  \\n The parameters that are passed to query builder methods are aggregated by successive instances of an <xref:System.Data.Objects.ObjectQuery%601> in the sequence. They can be accessed by using the <xref:System.Data.Objects.ObjectQuery.Parameters%2A> property, which returns the ObjectParameterCollection. After parameters have been added, they can be removed from the collection and the collection can be cleared, as long as the query has not been compiled or executed. Parameter names cannot be changed, but values can be changed at any time.  \\n  \\n Parameters must be unique in the ObjectParameterCollection. There cannot be two parameters in the collection with the same name.  \\n  \\n When using composition methods, such as <xref:System.Data.Objects.ObjectQuery%601.Union%2A>, <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>, <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> and <xref:System.Data.Objects.ObjectQuery%601.Except%2A>, the parameters are merged. An exception is thrown when the sets of parameters are incompatible or incomplete. For more information, see [Query Builder Methods](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0).\"\n  example:\n  - \"The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example adds new parameters to the collection and gets the count of the parameters in the collection. Then it iterates through the ObjectParameterCollection and displays the name, type, and value of each parameter in the collection.  \\n  \\n [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectparametercollection_count_add_indexer)]\\n [!code-cs[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectparametercollection_count_add_indexer)]\"\n  syntax:\n    content: 'public sealed class ObjectParameterCollection : System.Collections.Generic.ICollection<System.Data.Objects.ObjectParameter>, System.Collections.Generic.IEnumerable<System.Data.Objects.ObjectParameter>'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<System.Data.Objects.ObjectParameter>\n  - System.Collections.Generic.IEnumerable<System.Data.Objects.ObjectParameter>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)\n  id: Add(System.Data.Objects.ObjectParameter)\n  parent: System.Data.Objects.ObjectParameterCollection\n  langs:\n  - csharp\n  name: Add(ObjectParameter)\n  nameWithType: ObjectParameterCollection.Add(ObjectParameter)\n  fullName: System.Data.Objects.ObjectParameterCollection.Add(ObjectParameter)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  summary: Adds the specified <xref href=\"System.Data.Objects.ObjectParameter\"></xref> to the collection.\n  remarks: \"After parameters have been added, they can be removed from the collection and the collection can be cleared, as long as the query has not been compiled or executed. Parameter names cannot be changed, but values can be changed at any time.  \\n  \\n Parameters must be unique in the <xref:System.Data.Objects.ObjectParameterCollection>. There cannot be two parameters in the collection with the same name. For more information, see [Query Builder Methods](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0).\"\n  example:\n  - \"The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example adds new parameters to the collection. It iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, type, and value of each parameter in the collection.  \\n  \\n [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectparametercollection_count_add_indexer)]\\n [!code-cs[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectparametercollection_count_add_indexer)]\"\n  syntax:\n    content: public void Add (System.Data.Objects.ObjectParameter parameter);\n    parameters:\n    - id: parameter\n      type: System.Data.Objects.ObjectParameter\n      description: The parameter to add to the collection.\n  overload: System.Data.Objects.ObjectParameterCollection.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The<code> parameter</code> argument is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>parameter</code> argument already exists in the collection. This behavior differs from that of most collections that allow duplicate entries.  \\n  \\n -or-  \\n  \\n Another parameter with the same name as the <code>parameter</code> argument already exists in the collection. Note that the lookup is case-insensitive. This behavior differs from that of most collections, and is more like that of a <xref:System.Collections.Generic.Dictionary>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The type of the <code>parameter</code> is not valid.\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectParameterCollection.Clear\n  id: Clear\n  parent: System.Data.Objects.ObjectParameterCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ObjectParameterCollection.Clear()\n  fullName: System.Data.Objects.ObjectParameterCollection.Clear()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  summary: Deletes all <xref href=\"System.Data.Objects.ObjectParameter\"></xref> instances from the collection.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Data.Objects.ObjectParameterCollection.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)\n  id: Contains(System.Data.Objects.ObjectParameter)\n  parent: System.Data.Objects.ObjectParameterCollection\n  langs:\n  - csharp\n  name: Contains(ObjectParameter)\n  nameWithType: ObjectParameterCollection.Contains(ObjectParameter)\n  fullName: System.Data.Objects.ObjectParameterCollection.Contains(ObjectParameter)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  summary: Checks for the existence of a specified <xref href=\"System.Data.Objects.ObjectParameter\"></xref> in the collection by reference.\n  remarks: This is a reference-based check. That is, if an <xref:System.Data.Objects.ObjectParameter> is specified that contains the same name as a parameter object in the collection, this method will only return `true` if it is the same object.\n  syntax:\n    content: public bool Contains (System.Data.Objects.ObjectParameter parameter);\n    parameters:\n    - id: parameter\n      type: System.Data.Objects.ObjectParameter\n      description: The <xref href=\"System.Data.Objects.ObjectParameter\"></xref> to find in the collection.\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the parameter object was found in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Objects.ObjectParameterCollection.Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>parameter</code> argument is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectParameterCollection.Contains(System.String)\n  id: Contains(System.String)\n  parent: System.Data.Objects.ObjectParameterCollection\n  langs:\n  - csharp\n  name: Contains(String)\n  nameWithType: ObjectParameterCollection.Contains(String)\n  fullName: System.Data.Objects.ObjectParameterCollection.Contains(String)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  summary: Determines whether an <xref href=\"System.Data.Objects.ObjectParameter\"></xref> with the specified name is in the collection.\n  remarks: ''\n  example:\n  - \"The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example uses the <xref:System.Data.Objects.ObjectParameterCollection.Contains%2A> method to determine whether the specified parameter is in the collection.  \\n  \\n [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_StringArg](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectparametercollection_stringarg)]\\n [!code-cs[DP ObjectServices Concepts#ObjectParameterCollection_StringArg](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectparametercollection_stringarg)]\"\n  syntax:\n    content: public bool Contains (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the parameter to look for in the collection. This name should not include the \"@\" parameter marker that is used in the [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] statements, only the actual name.\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a parameter with the specified name was found in the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Objects.ObjectParameterCollection.Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)\n  id: CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)\n  parent: System.Data.Objects.ObjectParameterCollection\n  langs:\n  - csharp\n  name: CopyTo(ObjectParameter[],Int32)\n  nameWithType: ObjectParameterCollection.CopyTo(ObjectParameter[],Int32)\n  fullName: System.Data.Objects.ObjectParameterCollection.CopyTo(ObjectParameter[],Int32)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  summary: Allows the parameters in the collection to be copied into a supplied array, starting with the object at the specified index.\n  remarks: ''\n  example:\n  - \"The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example copies the parameters into the specified array.  \\n  \\n [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_CopyTo](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectparametercollection_copyto)]\\n [!code-cs[DP ObjectServices Concepts#ObjectParameterCollection_CopyTo](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectparametercollection_copyto)]\"\n  syntax:\n    content: public void CopyTo (System.Data.Objects.ObjectParameter[] array, int index);\n    parameters:\n    - id: array\n      type: System.Data.Objects.ObjectParameter[]\n      description: The array into which to copy the parameters.\n    - id: index\n      type: System.Int32\n      description: The index in the array at which to start copying the parameters.\n  overload: System.Data.Objects.ObjectParameterCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectParameterCollection.Count\n  id: Count\n  parent: System.Data.Objects.ObjectParameterCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ObjectParameterCollection.Count\n  fullName: System.Data.Objects.ObjectParameterCollection.Count\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  summary: Gets the number of parameters currently in the collection.\n  remarks: ''\n  example:\n  - \"The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example adds new parameters to the collection and gets the count of the parameters in the collection. Then it iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, type, and value of each parameter in the collection.  \\n  \\n [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectparametercollection_count_add_indexer)]\\n [!code-cs[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectparametercollection_count_add_indexer)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of <xref href=\"System.Data.Objects.ObjectParameter\"></xref> objects that are currently in the collection.\n  overload: System.Data.Objects.ObjectParameterCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectParameterCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.Data.Objects.ObjectParameterCollection\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: ObjectParameterCollection.Item(String)\n  fullName: System.Data.Objects.ObjectParameterCollection.Item(String)\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  summary: Provides an indexer that allows callers to retrieve parameters by name.\n  syntax:\n    content: public System.Data.Objects.ObjectParameter this[string name] { get; }\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the parameter to find. This name should not include the \"@\" parameter marker that is used in the [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] statements, only the actual name.\n    return:\n      type: System.Data.Objects.ObjectParameter\n      description: The <xref href=\"System.Data.Objects.ObjectParameter\"></xref> instance.\n  overload: System.Data.Objects.ObjectParameterCollection.Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: No parameter with the specified name is found in the collection.\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)\n  id: Remove(System.Data.Objects.ObjectParameter)\n  parent: System.Data.Objects.ObjectParameterCollection\n  langs:\n  - csharp\n  name: Remove(ObjectParameter)\n  nameWithType: ObjectParameterCollection.Remove(ObjectParameter)\n  fullName: System.Data.Objects.ObjectParameterCollection.Remove(ObjectParameter)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  summary: Removes an instance of an <xref href=\"System.Data.Objects.ObjectParameter\"></xref> from the collection by reference if it exists in the collection.\n  remarks: This is a reference-based comparison. That is, if a query parameter object is specified that contains the same name as a parameter object in the collection, the parameter in the collection will only be removed if it is the same object. To remove an object by name, first use the indexer to retrieve the parameter instance, then remove it by using this method.\n  example:\n  - \"The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example adds two parameters to the collection and then removes the parameters.  \\n  \\n [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Remove](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectparametercollection_remove)]\\n [!code-cs[DP ObjectServices Concepts#ObjectParameterCollection_Remove](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectparametercollection_remove)]\"\n  syntax:\n    content: public bool Remove (System.Data.Objects.ObjectParameter parameter);\n    parameters:\n    - id: parameter\n      type: System.Data.Objects.ObjectParameter\n      description: An object to remove from the collection.\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the parameter object was found and removed from the collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Objects.ObjectParameterCollection.Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>parameter</code> argument is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{System#Data#Objects#ObjectParameter}#IsReadOnly\n  id: System#Collections#Generic#ICollection{System#Data#Objects#ObjectParameter}#IsReadOnly\n  isEii: true\n  parent: System.Data.Objects.ObjectParameterCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: ObjectParameterCollection.System.Collections.Generic.ICollection\n  fullName: System.Data.Objects.ObjectParameterCollection.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: bool System.Collections.Generic.ICollection<System.Data.Objects.ObjectParameter>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection<System#Data#Objects#ObjectParameter>#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable{System#Data#Objects#ObjectParameter}#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{System#Data#Objects#ObjectParameter}#GetEnumerator\n  isEii: true\n  parent: System.Data.Objects.ObjectParameterCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: ObjectParameterCollection.System.Collections.Generic.IEnumerable()\n  fullName: System.Data.Objects.ObjectParameterCollection.System.Collections.Generic.IEnumerable()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: System.Collections.Generic.IEnumerator<System.Data.Objects.ObjectParameter> IEnumerable<ObjectParameter>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Data.Objects.ObjectParameter}\n      description: To be added.\n  overload: System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable<System#Data#Objects#ObjectParameter>#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Data.Objects.ObjectParameterCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ObjectParameterCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Data.Objects.ObjectParameterCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  summary: Returns an untyped enumerator over the collection.\n  remarks: Returns an untyped enumerator over the collection. This allows the collection to be iterated through and traversed.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> instance.\n  overload: System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Add(ObjectParameter)\n  nameWithType: ObjectParameterCollection.Add(ObjectParameter)\n  fullName: System.Data.Objects.ObjectParameterCollection.Add(ObjectParameter)\n- uid: System.Data.Objects.ObjectParameter\n  parent: System.Data.Objects\n  isExternal: false\n  name: ObjectParameter\n  nameWithType: ObjectParameter\n  fullName: System.Data.Objects.ObjectParameter\n- uid: System.Data.Objects.ObjectParameterCollection.Clear\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: ObjectParameterCollection.Clear()\n  fullName: System.Data.Objects.ObjectParameterCollection.Clear()\n- uid: System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Contains(ObjectParameter)\n  nameWithType: ObjectParameterCollection.Contains(ObjectParameter)\n  fullName: System.Data.Objects.ObjectParameterCollection.Contains(ObjectParameter)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.Objects.ObjectParameterCollection.Contains(System.String)\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Contains(String)\n  nameWithType: ObjectParameterCollection.Contains(String)\n  fullName: System.Data.Objects.ObjectParameterCollection.Contains(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: CopyTo(ObjectParameter[],Int32)\n  nameWithType: ObjectParameterCollection.CopyTo(ObjectParameter[],Int32)\n  fullName: System.Data.Objects.ObjectParameterCollection.CopyTo(ObjectParameter[],Int32)\n- uid: System.Data.Objects.ObjectParameter[]\n  parent: System.Data.Objects\n  isExternal: false\n  name: ObjectParameter\n  nameWithType: ObjectParameter\n  fullName: System.Data.Objects.ObjectParameter[]\n  spec.csharp:\n  - uid: System.Data.Objects.ObjectParameter\n    name: ObjectParameter\n    nameWithType: ObjectParameter\n    fullName: ObjectParameter[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.Objects.ObjectParameterCollection.Count\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Count\n  nameWithType: ObjectParameterCollection.Count\n  fullName: System.Data.Objects.ObjectParameterCollection.Count\n- uid: System.Data.Objects.ObjectParameterCollection.Item(System.String)\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Item(String)\n  nameWithType: ObjectParameterCollection.Item(String)\n  fullName: System.Data.Objects.ObjectParameterCollection.Item(String)\n- uid: System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Remove(ObjectParameter)\n  nameWithType: ObjectParameterCollection.Remove(ObjectParameter)\n  fullName: System.Data.Objects.ObjectParameterCollection.Remove(ObjectParameter)\n- uid: System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{System#Data#Objects#ObjectParameter}#IsReadOnly\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: ObjectParameterCollection.System.Collections.Generic.ICollection\n  fullName: System.Data.Objects.ObjectParameterCollection.System.Collections.Generic.ICollection\n- uid: System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable{System#Data#Objects#ObjectParameter}#GetEnumerator\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: ObjectParameterCollection.System.Collections.Generic.IEnumerable()\n  fullName: System.Data.Objects.ObjectParameterCollection.System.Collections.Generic.IEnumerable()\n- uid: System.Collections.Generic.IEnumerator{System.Data.Objects.ObjectParameter}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<ObjectParameter>\n  nameWithType: IEnumerator<ObjectParameter>\n  fullName: System.Collections.Generic.IEnumerator<System.Data.Objects.ObjectParameter>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<System.Data.Objects.ObjectParameter>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Objects.ObjectParameter\n    name: ObjectParameter\n    nameWithType: ObjectParameter\n    fullName: ObjectParameter\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ObjectParameterCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Data.Objects.ObjectParameterCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Data.Objects.ObjectParameterCollection.Add*\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Add\n  nameWithType: ObjectParameterCollection.Add\n- uid: System.Data.Objects.ObjectParameterCollection.Clear*\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Clear\n  nameWithType: ObjectParameterCollection.Clear\n- uid: System.Data.Objects.ObjectParameterCollection.Contains*\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Contains\n  nameWithType: ObjectParameterCollection.Contains\n- uid: System.Data.Objects.ObjectParameterCollection.CopyTo*\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: ObjectParameterCollection.CopyTo\n- uid: System.Data.Objects.ObjectParameterCollection.Count*\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Count\n  nameWithType: ObjectParameterCollection.Count\n- uid: System.Data.Objects.ObjectParameterCollection.Item*\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Item\n  nameWithType: ObjectParameterCollection.Item\n- uid: System.Data.Objects.ObjectParameterCollection.Remove*\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: Remove\n  nameWithType: ObjectParameterCollection.Remove\n- uid: System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection<System#Data#Objects#ObjectParameter>#IsReadOnly*\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Data.Objects.ObjectParameter>.IsReadOnly\n  nameWithType: ObjectParameterCollection.System.Collections.Generic.ICollection<System.Data.Objects.ObjectParameter>.IsReadOnly\n- uid: System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable<System#Data#Objects#ObjectParameter>#GetEnumerator*\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<System.Data.Objects.ObjectParameter>.GetEnumerator\n  nameWithType: ObjectParameterCollection.System.Collections.Generic.IEnumerable<System.Data.Objects.ObjectParameter>.GetEnumerator\n- uid: System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Data.Objects.ObjectParameterCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ObjectParameterCollection.System.Collections.IEnumerable.GetEnumerator\n"}