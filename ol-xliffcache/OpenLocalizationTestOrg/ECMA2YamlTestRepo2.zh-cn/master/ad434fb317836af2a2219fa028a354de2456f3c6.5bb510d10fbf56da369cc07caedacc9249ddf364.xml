{"nodes":[{"pos":[1041,1135],"content":"Represents the abstract base class for all keys that are generated using symmetric algorithms.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the abstract base class for all keys that are generated using symmetric algorithms.","pos":[0,94]}]},{"pos":[1147,1238],"content":"Typically, this class is used by the infrastructure to transform XML using a symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Typically, this class is used by the infrastructure to transform XML using a symmetric key.","pos":[0,91]}]},{"pos":[2388,2498],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SymmetricSecurityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricSecurityKey\"></xref> class."},{"pos":[3372,3511],"content":"When overridden in a derived class, generates a derived key using the specified cryptographic algorithm and parameters for the current key.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, generates a derived key using the specified cryptographic algorithm and parameters for the current key.","pos":[0,139]}]},{"pos":[3523,3660],"content":"To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.","needQuote":true,"needEscape":true,"nodes":[{"content":"To specify P-SHA1 as the cryptographic algorithm, use the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&gt; field.","pos":[0,137],"source":"To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field."}]},{"pos":[3889,3974],"content":"A URI that represents the cryptographic algorithm to use to generate the derived key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A URI that represents the cryptographic algorithm to use to generate the derived key.","pos":[0,85]}]},{"pos":[4036,4133],"content":"An array of <xref:System.Byte> that contains the label parameter for the cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the label parameter for the cryptographic algorithm.","pos":[0,97],"source":"An array of <xref:System.Byte> that contains the label parameter for the cryptographic algorithm."}]},{"pos":[4195,4287],"content":"An array of <xref:System.Byte> that contains the nonce that is used to create a derived key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the nonce that is used to create a derived key.","pos":[0,92],"source":"An array of <xref:System.Byte> that contains the nonce that is used to create a derived key."}]},{"pos":[4359,4387],"content":"The size of the derived key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the derived key.","pos":[0,28]}]},{"pos":[4449,4550],"content":"The position at which the derived key is located in the byte array that is returned from this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position at which the derived key is located in the byte array that is returned from this method.","pos":[0,101]}]},{"pos":[4608,4669],"content":"An array of <xref:System.Byte> that contains the derived key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the derived key.","pos":[0,61],"source":"An array of <xref:System.Byte> that contains the derived key."}]},{"pos":[5362,5485],"content":"When overridden in a derived class, gets a transform that decrypts cipher text using the specified cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a transform that decrypts cipher text using the specified cryptographic algorithm.","pos":[0,123]}]},{"pos":[5497,5641],"content":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the fields that represent decryption algorithms in the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[5862,5937],"content":"A cryptographic algorithm that decrypts cipher text, such as encrypted XML.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic algorithm that decrypts cipher text, such as encrypted XML.","pos":[0,75]}]},{"pos":[5996,6154],"content":"An array of &lt;xref:System.Byte&gt; that contains the initialization vector (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) for the specified algorithm.","needQuote":true,"needEscape":true,"source":"An array of <xref:System.Byte> that contains the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) for the specified algorithm."},{"pos":[6244,6355],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ICryptoTransform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the decryption transform.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the decryption transform."},{"pos":[7052,7167],"content":"When overridden in a derived class, gets a transform that encrypts XML using the specified cryptographic algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a transform that encrypts XML using the specified cryptographic algorithm.","pos":[0,115]}]},{"pos":[7179,7323],"content":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the fields that represent decryption algorithms in the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[7544,7588],"content":"A cryptographic algorithm that encrypts XML.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic algorithm that encrypts XML.","pos":[0,44]}]},{"pos":[7647,7805],"content":"An array of &lt;xref:System.Byte&gt; that contains the initialization vector (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) for the specified algorithm.","needQuote":true,"needEscape":true,"source":"An array of <xref:System.Byte> that contains the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) for the specified algorithm."},{"pos":[7895,8006],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ICryptoTransform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the encryption transform.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the encryption transform."},{"pos":[8589,8796],"content":"When overridden in a derived class, gets the size, in bits, of the initialization vector (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) that is required for the specified cryptographic algorithm.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, gets the size, in bits, of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) that is required for the specified cryptographic algorithm."},{"pos":[8951,9083],"content":"The cryptographic algorithm to get the size of the initialization vector (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"The cryptographic algorithm to get the size of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>)."},{"pos":[9140,9346],"content":"The size, in bits, of the initialization vector (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) that is required for the cryptographic algorithm specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">algorithm</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"The size, in bits, of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) that is required for the cryptographic algorithm specified in the <code>algorithm</code> parameter."},{"pos":[9976,10067],"content":"When overridden in a derived class, gets an instance of the specified keyed hash algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets an instance of the specified keyed hash algorithm.","pos":[0,91]}]},{"pos":[10079,10223],"content":"Use the fields that represent keyed hash algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the fields that represent keyed hash algorithms in the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent keyed hash algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[10434,10481],"content":"The keyed hash algorithm to get an instance of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The keyed hash algorithm to get an instance of.","pos":[0,47]}]},{"pos":[10573,10685],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the keyed hash algorithm.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> that represents the keyed hash algorithm."},{"pos":[11327,11417],"content":"When overridden in a derived class, gets an instance of the specified symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets an instance of the specified symmetric algorithm.","pos":[0,90]}]},{"pos":[11429,11572],"content":"Use the fields that represent symmetric algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the fields that represent symmetric algorithms in the &lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt; class to specify the algorithm.","pos":[0,143],"source":"Use the fields that represent symmetric algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]},{"pos":[11783,11829],"content":"The symmetric algorithm to get an instance of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The symmetric algorithm to get an instance of.","pos":[0,46]}]},{"pos":[11921,12032],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the symmetric algorithm.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> that represents the symmetric algorithm."},{"pos":[12596,12680],"content":"When overridden in a derived class, gets the bytes that represent the symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets the bytes that represent the symmetric key.","pos":[0,84]}]},{"pos":[12823,12886],"content":"An array of <xref:System.Byte> that contains the symmetric key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Byte&gt; that contains the symmetric key.","pos":[0,63],"source":"An array of <xref:System.Byte> that contains the symmetric key."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey\n  id: SymmetricSecurityKey\n  children:\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey\n  langs:\n  - csharp\n  name: SymmetricSecurityKey\n  nameWithType: SymmetricSecurityKey\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey\n  type: Class\n  summary: Represents the abstract base class for all keys that are generated using symmetric algorithms.\n  remarks: Typically, this class is used by the infrastructure to transform XML using a symmetric key.\n  syntax:\n    content: 'public abstract class SymmetricSecurityKey : System.IdentityModel.Tokens.SecurityKey'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.SecurityKey\n  implements: []\n  inheritedMembers:\n  - System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.KeySize\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor\n  id: '#ctor'\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: SymmetricSecurityKey()\n  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey()\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.SymmetricSecurityKey()\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricSecurityKey\"></xref> class.\n  syntax:\n    content: protected SymmetricSecurityKey ();\n    parameters: []\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  id: GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n  nameWithType: SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, generates a derived key using the specified cryptographic algorithm and parameters for the current key.\n  remarks: To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.\n  syntax:\n    content: public abstract byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A URI that represents the cryptographic algorithm to use to generate the derived key.\n    - id: label\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the label parameter for the cryptographic algorithm.\n    - id: nonce\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the nonce that is used to create a derived key.\n    - id: derivedKeyLength\n      type: System.Int32\n      description: The size of the derived key.\n    - id: offset\n      type: System.Int32\n      description: The position at which the derived key is located in the byte array that is returned from this method.\n    return:\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the derived key.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  id: GetDecryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetDecryptionTransform(String,Byte[])\n  nameWithType: SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a transform that decrypts cipher text using the specified cryptographic algorithm.\n  remarks: Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A cryptographic algorithm that decrypts cipher text, such as encrypted XML.\n    - id: iv\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) for the specified algorithm.\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the decryption transform.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  id: GetEncryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetEncryptionTransform(String,Byte[])\n  nameWithType: SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a transform that encrypts XML using the specified cryptographic algorithm.\n  remarks: Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A cryptographic algorithm that encrypts XML.\n    - id: iv\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) for the specified algorithm.\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the encryption transform.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)\n  id: GetIVSize(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetIVSize(String)\n  nameWithType: SymmetricSecurityKey.GetIVSize(String)\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the size, in bits, of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) that is required for the specified cryptographic algorithm.\n  syntax:\n    content: public abstract int GetIVSize (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm to get the size of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>).\n    return:\n      type: System.Int32\n      description: The size, in bits, of the initialization vector (<xref uid=\"langword_csharp_IV\" name=\"IV\" href=\"\"></xref>) that is required for the cryptographic algorithm specified in the <code>algorithm</code> parameter.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  id: GetKeyedHashAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetKeyedHashAlgorithm(String)\n  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets an instance of the specified keyed hash algorithm.\n  remarks: Use the fields that represent keyed hash algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The keyed hash algorithm to get an instance of.\n    return:\n      type: System.Security.Cryptography.KeyedHashAlgorithm\n      description: A <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> that represents the keyed hash algorithm.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  id: GetSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSymmetricAlgorithm(String)\n  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets an instance of the specified symmetric algorithm.\n  remarks: Use the fields that represent symmetric algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The symmetric algorithm to get an instance of.\n    return:\n      type: System.Security.Cryptography.SymmetricAlgorithm\n      description: A <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> that represents the symmetric algorithm.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey\n  id: GetSymmetricKey\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSymmetricKey()\n  nameWithType: SymmetricSecurityKey.GetSymmetricKey()\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the bytes that represent the symmetric key.\n  syntax:\n    content: public abstract byte[] GetSymmetricKey ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: An array of <xref:System.Byte> that contains the symmetric key.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: System.IdentityModel.Tokens.SecurityKey\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: SymmetricSecurityKey()\n  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey()\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.SymmetricSecurityKey()\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n  nameWithType: SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetDecryptionTransform(String,Byte[])\n  nameWithType: SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetEncryptionTransform(String,Byte[])\n  nameWithType: SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetIVSize(String)\n  nameWithType: SymmetricSecurityKey.GetIVSize(String)\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(String)\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetKeyedHashAlgorithm(String)\n  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n- uid: System.Security.Cryptography.KeyedHashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeyedHashAlgorithm\n  nameWithType: KeyedHashAlgorithm\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricAlgorithm(String)\n  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(String)\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricKey()\n  nameWithType: SymmetricSecurityKey.GetSymmetricKey()\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey()\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: SymmetricSecurityKey\n  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GenerateDerivedKey\n  nameWithType: SymmetricSecurityKey.GenerateDerivedKey\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetDecryptionTransform\n  nameWithType: SymmetricSecurityKey.GetDecryptionTransform\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetEncryptionTransform\n  nameWithType: SymmetricSecurityKey.GetEncryptionTransform\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetIVSize\n  nameWithType: SymmetricSecurityKey.GetIVSize\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetKeyedHashAlgorithm\n  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricAlgorithm\n  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricKey\n  nameWithType: SymmetricSecurityKey.GetSymmetricKey\n"}