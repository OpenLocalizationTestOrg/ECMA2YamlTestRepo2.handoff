{"nodes":[{"pos":[843,1016],"content":"Provides an implementation of the OLE DB <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IRowset\" name=\"IRowset\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface for use by applications upgraded from Visual Basic 6.0.","needQuote":true,"needEscape":true,"source":"Provides an implementation of the OLE DB <xref uid=\"langword_csharp_IRowset\" name=\"IRowset\" href=\"\"></xref> interface for use by applications upgraded from Visual Basic 6.0."},{"pos":[2221,2270],"content":"Adds a reference count to an existing row handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a reference count to an existing row handle.","pos":[0,49]}]},{"pos":[2544,2606],"content":"The number of rows for which to increment the reference count.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows for which to increment the reference count.","pos":[0,62]}]},{"pos":[2669,2833],"content":"An array of row handles for which to increment the reference count. The reference count of row handles is incremented by one for each time they appear in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of row handles for which to increment the reference count. The reference count of row handles is incremented by one for each time they appear in the array.","pos":[0,164],"nodes":[{"content":"An array of row handles for which to increment the reference count.","pos":[0,67]},{"content":"The reference count of row handles is incremented by one for each time they appear in the array.","pos":[68,164]}]}]},{"pos":[2900,3108],"content":"An array with `cRows` elements in which to return the new reference count for each row handle. The consumer allocates memory for this array. If `refCounts` is a null pointer, no reference counts are returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array with <ph id=\"ph1\">`cRows`</ph> elements in which to return the new reference count for each row handle.","pos":[0,94],"source":"An array with `cRows` elements in which to return the new reference count for each row handle."},{"content":"The consumer allocates memory for this array.","pos":[95,140]},{"content":"If <ph id=\"ph1\">`refCounts`</ph> is a null pointer, no reference counts are returned.","pos":[141,208],"source":" If `refCounts` is a null pointer, no reference counts are returned."}]},{"pos":[3175,3287],"content":"An array with <ph id=\"ph1\">`cRows`</ph> elements in which to return values indicating the status of each row specified in <ph id=\"ph2\">`hRows`</ph>.","needQuote":true,"needEscape":true,"source":"An array with `cRows` elements in which to return values indicating the status of each row specified in `hRows`."},{"pos":[3951,4000],"content":"Retrieves data from the rowset's copy of the row.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves data from the rowset's copy of the row.","pos":[0,49]}]},{"pos":[4243,4292],"content":"The handle of the row from which to get the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle of the row from which to get the data.","pos":[0,49]}]},{"pos":[4357,4391],"content":"The handle of the accessor to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle of the accessor to use.","pos":[0,34]}]},{"pos":[4453,4503],"content":"A pointer to a buffer in which to return the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"A pointer to a buffer in which to return the data.","pos":[0,50]}]},{"pos":[5281,5342],"content":"Fetches rows sequentially, remembering the previous position.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fetches rows sequentially, remembering the previous position.","pos":[0,61]}]},{"pos":[5636,5685],"content":"The chapter handle designating the rows to fetch.","needQuote":true,"needEscape":true,"nodes":[{"content":"The chapter handle designating the rows to fetch.","pos":[0,49]}]},{"pos":[5752,5894],"content":"The signed count of rows to skip before fetching rows. Deleted rows that the provider has removed from the rowset are not counted in the skip.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signed count of rows to skip before fetching rows. Deleted rows that the provider has removed from the rowset are not counted in the skip.","pos":[0,142],"nodes":[{"content":"The signed count of rows to skip before fetching rows.","pos":[0,54]},{"content":"Deleted rows that the provider has removed from the rowset are not counted in the skip.","pos":[55,142]}]}]},{"pos":[5955,6026],"content":"The number of rows to fetch. A negative number means to fetch backward.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows to fetch. A negative number means to fetch backward.","pos":[0,71],"nodes":[{"content":"The number of rows to fetch.","pos":[0,28]},{"content":"A negative number means to fetch backward.","pos":[29,71]}]}]},{"pos":[6095,6168],"content":"A pointer to memory in which to return the actual number of fetched rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"A pointer to memory in which to return the actual number of fetched rows.","pos":[0,73]}]},{"pos":[6231,6310],"content":"A pointer to memory in which to return an array of handles of the fetched rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"A pointer to memory in which to return an array of handles of the fetched rows.","pos":[0,79]}]},{"pos":[7103,7117],"content":"Releases rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases rows.","pos":[0,14]}]},{"pos":[7409,7439],"content":"The number of rows to release.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows to release.","pos":[0,30]}]},{"pos":[7502,7789],"content":"An array of handles of the rows to be released. The row handles do not need to form a logical cluster; they may have been obtained at separate times and need not be for contiguous underlying rows. Row handles are decremented by one reference count for each time they appear in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of handles of the rows to be released. The row handles do not need to form a logical cluster; they may have been obtained at separate times and need not be for contiguous underlying rows. Row handles are decremented by one reference count for each time they appear in the array.","pos":[0,287],"nodes":[{"content":"An array of handles of the rows to be released.","pos":[0,47]},{"content":"The row handles do not need to form a logical cluster; they may have been obtained at separate times and need not be for contiguous underlying rows.","pos":[48,196]},{"content":"Row handles are decremented by one reference count for each time they appear in the array.","pos":[197,287]}]}]},{"pos":[7856,7974],"content":"An array of <ph id=\"ph1\">`cRows`</ph> elements containing bitmasks indicating additional options to be specified when a row is released.","needQuote":true,"needEscape":true,"source":"An array of `cRows` elements containing bitmasks indicating additional options to be specified when a row is released."},{"pos":[8043,8129],"content":"An array with <ph id=\"ph1\">`cRows`</ph> elements in which to return the new reference count of each row.","needQuote":true,"needEscape":true,"source":"An array with `cRows` elements in which to return the new reference count of each row."},{"pos":[8197,8309],"content":"An array with <ph id=\"ph1\">`cRows`</ph> elements in which to return values indicating the status of each row specified in <ph id=\"ph2\">`hRows`</ph>.","needQuote":true,"needEscape":true,"source":"An array with `cRows` elements in which to return values indicating the status of each row specified in `hRows`."},{"pos":[8366,8460],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the result.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> representing the result."},{"pos":[9072,9132],"content":"Repositions the next fetch position to its initial position.","needQuote":true,"needEscape":true,"nodes":[{"content":"Repositions the next fetch position to its initial position.","pos":[0,60]}]},{"pos":[9361,9424],"content":"The chapter handle designating the rows on which to reposition.","needQuote":true,"needEscape":true,"nodes":[{"content":"The chapter handle designating the rows on which to reposition.","pos":[0,63]}]},{"pos":[9481,9575],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the result.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> representing the result."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  id: IRowset\n  children:\n  - Microsoft.VisualBasic.Compatibility.VB6.IRowset.AddRefRows(System.Int32,System.Int32[],System.Int32[]@,System.Int32[]@)\n  - Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetData(System.Int32,System.Int32,System.IntPtr)\n  - Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetNextRows(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32[]@)\n  - Microsoft.VisualBasic.Compatibility.VB6.IRowset.ReleaseRows(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,System.IntPtr)\n  - Microsoft.VisualBasic.Compatibility.VB6.IRowset.RestartPosition(System.Int32)\n  langs:\n  - csharp\n  name: IRowset\n  nameWithType: IRowset\n  fullName: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  type: Interface\n  summary: Provides an implementation of the OLE DB <xref uid=\"langword_csharp_IRowset\" name=\"IRowset\" href=\"\"></xref> interface for use by applications upgraded from Visual Basic 6.0.\n  remarks: '[!INCLUDE[Note_compatibility](~/add/includes/ajax-current-ext-md.md)]'\n  syntax:\n    content: >-\n      [System.Obsolete(\"Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862\")]\n\n      [System.Runtime.InteropServices.Guid(\"0C733A7C-2A1C-11CE-ADE5-00AA0044773D\")]\n\n      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]\n\n      public interface IRowset\n  implements: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.AddRefRows(System.Int32,System.Int32[],System.Int32[]@,System.Int32[]@)\n  id: AddRefRows(System.Int32,System.Int32[],System.Int32[]@,System.Int32[]@)\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  langs:\n  - csharp\n  name: AddRefRows(Int32,Int32[],Int32[],Int32[])\n  nameWithType: IRowset.AddRefRows(Int32,Int32[],Int32[],Int32[])\n  fullName: Microsoft.VisualBasic.Compatibility.VB6.IRowset.AddRefRows(Int32,Int32[],Int32[],Int32[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic.Compatibility.Data\n  namespace: Microsoft.VisualBasic.Compatibility.VB6\n  summary: Adds a reference count to an existing row handle.\n  remarks: '[!INCLUDE[Note_compatibility](~/add/includes/ajax-current-ext-md.md)]'\n  syntax:\n    content: public void AddRefRows (int cRows, int[] hRows, out int[] refCounts, out int[] rowStatus);\n    parameters:\n    - id: cRows\n      type: System.Int32\n      description: The number of rows for which to increment the reference count.\n    - id: hRows\n      type: System.Int32[]\n      description: An array of row handles for which to increment the reference count. The reference count of row handles is incremented by one for each time they appear in the array.\n    - id: refCounts\n      type: System.Int32[]\n      description: An array with `cRows` elements in which to return the new reference count for each row handle. The consumer allocates memory for this array. If `refCounts` is a null pointer, no reference counts are returned.\n    - id: rowStatus\n      type: System.Int32[]\n      description: An array with `cRows` elements in which to return values indicating the status of each row specified in `hRows`.\n  overload: Microsoft.VisualBasic.Compatibility.VB6.IRowset.AddRefRows*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetData(System.Int32,System.Int32,System.IntPtr)\n  id: GetData(System.Int32,System.Int32,System.IntPtr)\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  langs:\n  - csharp\n  name: GetData(Int32,Int32,IntPtr)\n  nameWithType: IRowset.GetData(Int32,Int32,IntPtr)\n  fullName: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetData(Int32,Int32,IntPtr)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic.Compatibility.Data\n  namespace: Microsoft.VisualBasic.Compatibility.VB6\n  summary: Retrieves data from the rowset's copy of the row.\n  remarks: '[!INCLUDE[Note_compatibility](~/add/includes/ajax-current-ext-md.md)]'\n  syntax:\n    content: public void GetData (int hRow, int hAccessor, IntPtr pData);\n    parameters:\n    - id: hRow\n      type: System.Int32\n      description: The handle of the row from which to get the data.\n    - id: hAccessor\n      type: System.Int32\n      description: The handle of the accessor to use.\n    - id: pData\n      type: System.IntPtr\n      description: A pointer to a buffer in which to return the data.\n  overload: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetData*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetNextRows(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32[]@)\n  id: GetNextRows(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32[]@)\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  langs:\n  - csharp\n  name: GetNextRows(Int32,Int32,Int32,Int32,Int32[])\n  nameWithType: IRowset.GetNextRows(Int32,Int32,Int32,Int32,Int32[])\n  fullName: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetNextRows(Int32,Int32,Int32,Int32,Int32[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic.Compatibility.Data\n  namespace: Microsoft.VisualBasic.Compatibility.VB6\n  summary: Fetches rows sequentially, remembering the previous position.\n  remarks: '[!INCLUDE[Note_compatibility](~/add/includes/ajax-current-ext-md.md)]'\n  syntax:\n    content: public void GetNextRows (int hChapter, int lRowsOffset, int cRows, out int cRowsObtained, out int[] hRows);\n    parameters:\n    - id: hChapter\n      type: System.Int32\n      description: The chapter handle designating the rows to fetch.\n    - id: lRowsOffset\n      type: System.Int32\n      description: The signed count of rows to skip before fetching rows. Deleted rows that the provider has removed from the rowset are not counted in the skip.\n    - id: cRows\n      type: System.Int32\n      description: The number of rows to fetch. A negative number means to fetch backward.\n    - id: cRowsObtained\n      type: System.Int32\n      description: A pointer to memory in which to return the actual number of fetched rows.\n    - id: hRows\n      type: System.Int32[]\n      description: A pointer to memory in which to return an array of handles of the fetched rows.\n  overload: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetNextRows*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.ReleaseRows(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,System.IntPtr)\n  id: ReleaseRows(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  langs:\n  - csharp\n  name: ReleaseRows(Int32,Int32[],IntPtr,IntPtr,IntPtr)\n  nameWithType: IRowset.ReleaseRows(Int32,Int32[],IntPtr,IntPtr,IntPtr)\n  fullName: Microsoft.VisualBasic.Compatibility.VB6.IRowset.ReleaseRows(Int32,Int32[],IntPtr,IntPtr,IntPtr)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic.Compatibility.Data\n  namespace: Microsoft.VisualBasic.Compatibility.VB6\n  summary: Releases rows.\n  remarks: '[!INCLUDE[Note_compatibility](~/add/includes/ajax-current-ext-md.md)]'\n  syntax:\n    content: public int ReleaseRows (int cRows, int[] hRows, IntPtr rowOptions, IntPtr rowRefCounts, IntPtr rgRowStatus);\n    parameters:\n    - id: cRows\n      type: System.Int32\n      description: The number of rows to release.\n    - id: hRows\n      type: System.Int32[]\n      description: An array of handles of the rows to be released. The row handles do not need to form a logical cluster; they may have been obtained at separate times and need not be for contiguous underlying rows. Row handles are decremented by one reference count for each time they appear in the array.\n    - id: rowOptions\n      type: System.IntPtr\n      description: An array of `cRows` elements containing bitmasks indicating additional options to be specified when a row is released.\n    - id: rowRefCounts\n      type: System.IntPtr\n      description: An array with `cRows` elements in which to return the new reference count of each row.\n    - id: rgRowStatus\n      type: System.IntPtr\n      description: An array with `cRows` elements in which to return values indicating the status of each row specified in `hRows`.\n    return:\n      type: System.Int32\n      description: An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> representing the result.\n  overload: Microsoft.VisualBasic.Compatibility.VB6.IRowset.ReleaseRows*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.RestartPosition(System.Int32)\n  id: RestartPosition(System.Int32)\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  langs:\n  - csharp\n  name: RestartPosition(Int32)\n  nameWithType: IRowset.RestartPosition(Int32)\n  fullName: Microsoft.VisualBasic.Compatibility.VB6.IRowset.RestartPosition(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic.Compatibility.Data\n  namespace: Microsoft.VisualBasic.Compatibility.VB6\n  summary: Repositions the next fetch position to its initial position.\n  remarks: '[!INCLUDE[Note_compatibility](~/add/includes/ajax-current-ext-md.md)]'\n  syntax:\n    content: public int RestartPosition (int hChapter);\n    parameters:\n    - id: hChapter\n      type: System.Int32\n      description: The chapter handle designating the rows on which to reposition.\n    return:\n      type: System.Int32\n      description: An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> representing the result.\n  overload: Microsoft.VisualBasic.Compatibility.VB6.IRowset.RestartPosition*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.AddRefRows(System.Int32,System.Int32[],System.Int32[]@,System.Int32[]@)\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  isExternal: false\n  name: AddRefRows(Int32,Int32[],Int32[],Int32[])\n  nameWithType: IRowset.AddRefRows(Int32,Int32[],Int32[],Int32[])\n  fullName: Microsoft.VisualBasic.Compatibility.VB6.IRowset.AddRefRows(Int32,Int32[],Int32[],Int32[])\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32[]\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: Int32[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetData(System.Int32,System.Int32,System.IntPtr)\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  isExternal: false\n  name: GetData(Int32,Int32,IntPtr)\n  nameWithType: IRowset.GetData(Int32,Int32,IntPtr)\n  fullName: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetData(Int32,Int32,IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetNextRows(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32[]@)\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  isExternal: false\n  name: GetNextRows(Int32,Int32,Int32,Int32,Int32[])\n  nameWithType: IRowset.GetNextRows(Int32,Int32,Int32,Int32,Int32[])\n  fullName: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetNextRows(Int32,Int32,Int32,Int32,Int32[])\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.ReleaseRows(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  isExternal: false\n  name: ReleaseRows(Int32,Int32[],IntPtr,IntPtr,IntPtr)\n  nameWithType: IRowset.ReleaseRows(Int32,Int32[],IntPtr,IntPtr,IntPtr)\n  fullName: Microsoft.VisualBasic.Compatibility.VB6.IRowset.ReleaseRows(Int32,Int32[],IntPtr,IntPtr,IntPtr)\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.RestartPosition(System.Int32)\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  isExternal: false\n  name: RestartPosition(Int32)\n  nameWithType: IRowset.RestartPosition(Int32)\n  fullName: Microsoft.VisualBasic.Compatibility.VB6.IRowset.RestartPosition(Int32)\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.AddRefRows*\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  isExternal: false\n  name: AddRefRows\n  nameWithType: IRowset.AddRefRows\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetData*\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  isExternal: false\n  name: GetData\n  nameWithType: IRowset.GetData\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.GetNextRows*\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  isExternal: false\n  name: GetNextRows\n  nameWithType: IRowset.GetNextRows\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.ReleaseRows*\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  isExternal: false\n  name: ReleaseRows\n  nameWithType: IRowset.ReleaseRows\n- uid: Microsoft.VisualBasic.Compatibility.VB6.IRowset.RestartPosition*\n  parent: Microsoft.VisualBasic.Compatibility.VB6.IRowset\n  isExternal: false\n  name: RestartPosition\n  nameWithType: IRowset.RestartPosition\n"}