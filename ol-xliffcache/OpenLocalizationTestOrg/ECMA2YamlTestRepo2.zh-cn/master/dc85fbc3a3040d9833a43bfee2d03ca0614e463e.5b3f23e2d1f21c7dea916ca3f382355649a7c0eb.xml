{"nodes":[{"pos":[328,611],"content":"Provides information for the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.Grammar.SpeechRecognized\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, and <bpt id=\"p3\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognizer.SpeechRecognized\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> events.","needQuote":true,"needEscape":true,"source":"Provides information for the <xref href=\"System.Speech.Recognition.Grammar.SpeechRecognized\"></xref>, <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized\"></xref>, and <xref href=\"System.Speech.Recognition.SpeechRecognizer.SpeechRecognized\"></xref> events."},{"pos":[624,1279],"content":"A `SpeechRecognized` event is raised by the <xref:System.Speech.Recognition.Grammar>, <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.       `SpeechRecognized` events are generated when one or more of the alternates from a recognition operation have a high enough confidence score to be accepted. To obtain detailed information about a recognized phrase, access the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the handler for the event.       `SpeechRecognizedEventArgs` derives from the <xref:System.Speech.Recognition.RecognitionEventArgs> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"A <ph id=\"ph1\">`SpeechRecognized`</ph> event is raised by the &lt;xref:System.Speech.Recognition.Grammar&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognizer&gt; and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; classes.","pos":[0,205],"source":"A `SpeechRecognized` event is raised by the <xref:System.Speech.Recognition.Grammar>, <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes."},{"content":"<ph id=\"ph1\">`SpeechRecognized`</ph> events are generated when one or more of the alternates from a recognition operation have a high enough confidence score to be accepted.","pos":[212,367],"source":"`SpeechRecognized` events are generated when one or more of the alternates from a recognition operation have a high enough confidence score to be accepted."},{"content":"To obtain detailed information about a recognized phrase, access the &lt;xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A&gt; property in the handler for the event.","pos":[368,539],"source":" To obtain detailed information about a recognized phrase, access the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the handler for the event."},{"content":"<ph id=\"ph1\">`SpeechRecognizedEventArgs`</ph> derives from the &lt;xref:System.Speech.Recognition.RecognitionEventArgs&gt; class.","pos":[546,651],"source":"`SpeechRecognizedEventArgs` derives from the <xref:System.Speech.Recognition.RecognitionEventArgs> class."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Recognition.SpeechRecognizedEventArgs\n  id: SpeechRecognizedEventArgs\n  children: []\n  langs:\n  - csharp\n  name: SpeechRecognizedEventArgs\n  nameWithType: SpeechRecognizedEventArgs\n  fullName: System.Speech.Recognition.SpeechRecognizedEventArgs\n  type: Class\n  summary: Provides information for the <xref href=\"System.Speech.Recognition.Grammar.SpeechRecognized\"></xref>, <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized\"></xref>, and <xref href=\"System.Speech.Recognition.SpeechRecognizer.SpeechRecognized\"></xref> events.\n  remarks: \"A `SpeechRecognized` event is raised by the <xref:System.Speech.Recognition.Grammar>, <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.  \\n  \\n `SpeechRecognized` events are generated when one or more of the alternates from a recognition operation have a high enough confidence score to be accepted. To obtain detailed information about a recognized phrase, access the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the handler for the event.  \\n  \\n `SpeechRecognizedEventArgs` derives from the <xref:System.Speech.Recognition.RecognitionEventArgs> class.\"\n  example:\n  - \"The following example is part of a console application that loads a speech recognition grammar and demonstrates speech input to the shared recognizer, the associated recognition results, and the associated events raised by the speech recognizer. If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.  \\n  \\n Spoken input such as \\\"I want to fly from Chicago to Miami\\\" will trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event. Speaking the phrase \\\"Fly me from Houston to Chicago \\\" will not trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.  \\n  \\n The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n  \\n    // Initialize a shared speech recognition engine.  \\n    {  \\n      using (SpeechRecognizer recognizer = new SpeechRecognizer())  \\n      {  \\n  \\n        // Create SemanticResultValue objects that contain cities and airport codes.  \\n        SemanticResultValue chicago = new SemanticResultValue(\\\"Chicago\\\", \\\"ORD\\\");  \\n        SemanticResultValue boston = new SemanticResultValue(\\\"Boston\\\", \\\"BOS\\\");  \\n        SemanticResultValue miami = new SemanticResultValue(\\\"Miami\\\", \\\"MIA\\\");  \\n        SemanticResultValue dallas = new SemanticResultValue(\\\"Dallas\\\", \\\"DFW\\\");  \\n  \\n        // Create a Choices object and add the SemanticResultValue objects, using  \\n        // implicit conversion from SemanticResultValue to GrammarBuilder  \\n        Choices cities = new Choices();  \\n        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  \\n  \\n        // Build the phrase and add SemanticResultKeys.  \\n        GrammarBuilder chooseCities = new GrammarBuilder();  \\n        chooseCities.Append(\\\"I want to fly from\\\");  \\n        chooseCities.Append(new SemanticResultKey(\\\"origin\\\", cities));  \\n        chooseCities.Append(\\\"to\\\");  \\n        chooseCities.Append(new SemanticResultKey(\\\"destination\\\", cities));  \\n  \\n        // Build a Grammar object from the GrammarBuilder.  \\n        Grammar bookFlight = new Grammar(chooseCities);  \\n        bookFlight.Name = \\\"Book Flight\\\";  \\n  \\n        // Add a handler for the LoadGrammarCompleted event.  \\n        recognizer.LoadGrammarCompleted +=  \\n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \\n  \\n        // Add a handler for the SpeechRecognized event.  \\n        recognizer.SpeechRecognized +=   \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n  \\n        // Load the grammar object to the recognizer.  \\n        recognizer.LoadGrammarAsync(bookFlight);  \\n  \\n        // Keep the console window open.  \\n        Console.ReadLine();  \\n      }  \\n    }  \\n  \\n    // Handle the LoadGrammarCompleted event.  \\n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Grammar loaded: \\\" + e.Grammar.Name);  \\n      Console.WriteLine();  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Speech recognized:  \\\" + e.Result.Text);  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Semantic results:\\\");  \\n      Console.WriteLine(\\\"  The flight origin is \\\" + e.Result.Semantics[\\\"origin\\\"].Value);  \\n      Console.WriteLine(\\\"  The flight destination is \\\" + e.Result.Semantics[\\\"destination\\\"].Value);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: 'public class SpeechRecognizedEventArgs : System.Speech.Recognition.RecognitionEventArgs'\n  inheritance:\n  - System.EventArgs\n  - System.Speech.Recognition.RecognitionEventArgs\n  implements: []\n  inheritedMembers:\n  - System.Speech.Recognition.RecognitionEventArgs.Result\n  platform:\n  - net462\nreferences:\n- uid: System.Speech.Recognition.RecognitionEventArgs\n  isExternal: false\n  name: System.Speech.Recognition.RecognitionEventArgs\n"}