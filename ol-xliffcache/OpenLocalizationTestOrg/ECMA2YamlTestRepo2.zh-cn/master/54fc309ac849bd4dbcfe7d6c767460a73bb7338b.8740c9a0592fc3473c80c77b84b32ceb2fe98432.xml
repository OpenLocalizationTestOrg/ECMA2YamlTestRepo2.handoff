{"nodes":[{"pos":[585,684],"content":"Provides a method that when implemented, resolves a latitude/longitude location to a civic address.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a method that when implemented, resolves a latitude/longitude location to a civic address.","pos":[0,99]}]},{"pos":[696,1027],"content":"To resolve a <xref:System.Device.Location.GeoCoordinate> to a <xref:System.Device.Location.CivicAddress> asynchronously, implement <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressAsync%2A>, and provide the civic address data to the <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"To resolve a &lt;xref:System.Device.Location.GeoCoordinate&gt; to a &lt;xref:System.Device.Location.CivicAddress&gt; asynchronously, implement &lt;xref:System.Device.Location.ICivicAddressResolver.ResolveAddressAsync%2A&gt;, and provide the civic address data to the &lt;xref:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted&gt; event.","pos":[0,331],"source":"To resolve a <xref:System.Device.Location.GeoCoordinate> to a <xref:System.Device.Location.CivicAddress> asynchronously, implement <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressAsync%2A>, and provide the civic address data to the <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted> event."}]},{"pos":[1656,1758],"content":"Resolves a <bpt id=\"p1\">&lt;xref href=\"System.Device.Location.GeoCoordinate\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a civic address synchronously.","needQuote":true,"needEscape":true,"source":"Resolves a <xref href=\"System.Device.Location.GeoCoordinate\"></xref> to a civic address synchronously."},{"pos":[2373,2430],"content":"The latitude/longitude location to resolve to an address.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latitude/longitude location to resolve to an address.","pos":[0,57]}]},{"pos":[2510,2612],"content":"Resolves a <bpt id=\"p1\">&lt;xref href=\"System.Device.Location.GeoCoordinate\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a civic address synchronously.","needQuote":true,"needEscape":true,"source":"Resolves a <xref href=\"System.Device.Location.GeoCoordinate\"></xref> to a civic address synchronously."},{"pos":[3277,3352],"content":"Initiates a request to resolve a latitude/longitude location to an address.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initiates a request to resolve a latitude/longitude location to an address.","pos":[0,75]}]},{"pos":[3952,4009],"content":"The latitude/longitude location to resolve to an address.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latitude/longitude location to resolve to an address.","pos":[0,57]}]},{"pos":[4577,4755],"content":"Occurs when an asynchronous request using <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressAsync*> to resolve a latitude/longitude to a civic address is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when an asynchronous request using &lt;xref:System.Device.Location.ICivicAddressResolver.ResolveAddressAsync*&gt; to resolve a latitude/longitude to a civic address is complete.","pos":[0,178],"source":"Occurs when an asynchronous request using <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressAsync*> to resolve a latitude/longitude to a civic address is complete."}]},{"pos":[5502,5514],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Device.Location.ICivicAddressResolver\n  id: ICivicAddressResolver\n  children:\n  - System.Device.Location.ICivicAddressResolver.ResolveAddress(System.Device.Location.GeoCoordinate)\n  - System.Device.Location.ICivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)\n  - System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted\n  langs:\n  - csharp\n  name: ICivicAddressResolver\n  nameWithType: ICivicAddressResolver\n  fullName: System.Device.Location.ICivicAddressResolver\n  type: Interface\n  summary: Provides a method that when implemented, resolves a latitude/longitude location to a civic address.\n  remarks: To resolve a <xref:System.Device.Location.GeoCoordinate> to a <xref:System.Device.Location.CivicAddress> asynchronously, implement <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressAsync%2A>, and provide the civic address data to the <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted> event.\n  syntax:\n    content: public interface ICivicAddressResolver\n  implements: []\n  platform:\n  - net462\n- uid: System.Device.Location.ICivicAddressResolver.ResolveAddress(System.Device.Location.GeoCoordinate)\n  id: ResolveAddress(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.ICivicAddressResolver\n  langs:\n  - csharp\n  name: ResolveAddress(GeoCoordinate)\n  nameWithType: ICivicAddressResolver.ResolveAddress(GeoCoordinate)\n  fullName: System.Device.Location.ICivicAddressResolver.ResolveAddress(GeoCoordinate)\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  summary: Resolves a <xref href=\"System.Device.Location.GeoCoordinate\"></xref> to a civic address synchronously.\n  remarks: ''\n  example:\n  - \"The following example shows how to call ResolveAddress.  \\n  \\n [!code-cs[System.Device.Location.ResolveCivicAddressSync#1](~/add/codesnippet/csharp/resolveaddresssync/resolvecivicaddresssync.cs#1)]\\n [!code-vb[System.Device.Location.ResolveCivicAddressSync#1](~/add/codesnippet/visualbasic/resolvecivicaddresssync/resolvecivicaddresssync.vb#1)]\"\n  syntax:\n    content: public System.Device.Location.CivicAddress ResolveAddress (System.Device.Location.GeoCoordinate coordinate);\n    parameters:\n    - id: coordinate\n      type: System.Device.Location.GeoCoordinate\n      description: The latitude/longitude location to resolve to an address.\n    return:\n      type: System.Device.Location.CivicAddress\n      description: Resolves a <xref href=\"System.Device.Location.GeoCoordinate\"></xref> to a civic address synchronously.\n  overload: System.Device.Location.ICivicAddressResolver.ResolveAddress*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Device.Location.ICivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)\n  id: ResolveAddressAsync(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.ICivicAddressResolver\n  langs:\n  - csharp\n  name: ResolveAddressAsync(GeoCoordinate)\n  nameWithType: ICivicAddressResolver.ResolveAddressAsync(GeoCoordinate)\n  fullName: System.Device.Location.ICivicAddressResolver.ResolveAddressAsync(GeoCoordinate)\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  summary: Initiates a request to resolve a latitude/longitude location to an address.\n  remarks: ''\n  example:\n  - \"The following example shows how to call ResolveAddressAsync.  \\n  \\n [!code-cs[System.Device.Location.ResolveCivicAddressAsync#2](~/add/codesnippet/csharp/resolveaddressasync/resolvecivicaddressasync.cs#2)]\\n [!code-vb[System.Device.Location.ResolveCivicAddressAsync#2](~/add/codesnippet/visualbasic/resolvecivicaddressasync/resolvecivicaddressasync.vb#2)]\"\n  syntax:\n    content: public void ResolveAddressAsync (System.Device.Location.GeoCoordinate coordinate);\n    parameters:\n    - id: coordinate\n      type: System.Device.Location.GeoCoordinate\n      description: The latitude/longitude location to resolve to an address.\n  overload: System.Device.Location.ICivicAddressResolver.ResolveAddressAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted\n  id: ResolveAddressCompleted\n  parent: System.Device.Location.ICivicAddressResolver\n  langs:\n  - csharp\n  name: ResolveAddressCompleted\n  nameWithType: ICivicAddressResolver.ResolveAddressCompleted\n  fullName: System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted\n  type: Event\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  summary: Occurs when an asynchronous request using <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressAsync*> to resolve a latitude/longitude to a civic address is complete.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to call <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressAsync%2A> and handle the ResolveAddressCompleted event.  \\n  \\n [!code-cs[System.Device.Location.ResolveCivicAddressAsync#2](~/add/codesnippet/csharp/resolveaddressasync/resolvecivicaddressasync.cs#2)]\\n [!code-vb[System.Device.Location.ResolveCivicAddressAsync#2](~/add/codesnippet/visualbasic/resolvecivicaddressasync/resolvecivicaddressasync.vb#2)]\"\n  syntax:\n    content: public event EventHandler<System.Device.Location.ResolveAddressCompletedEventArgs> ResolveAddressCompleted;\n    return:\n      type: System.EventHandler{System.Device.Location.ResolveAddressCompletedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Device.Location.ICivicAddressResolver.ResolveAddress(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.ICivicAddressResolver\n  isExternal: false\n  name: ResolveAddress(GeoCoordinate)\n  nameWithType: ICivicAddressResolver.ResolveAddress(GeoCoordinate)\n  fullName: System.Device.Location.ICivicAddressResolver.ResolveAddress(GeoCoordinate)\n- uid: System.Device.Location.CivicAddress\n  parent: System.Device.Location\n  isExternal: false\n  name: CivicAddress\n  nameWithType: CivicAddress\n  fullName: System.Device.Location.CivicAddress\n- uid: System.Device.Location.GeoCoordinate\n  parent: System.Device.Location\n  isExternal: false\n  name: GeoCoordinate\n  nameWithType: GeoCoordinate\n  fullName: System.Device.Location.GeoCoordinate\n- uid: System.Device.Location.ICivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.ICivicAddressResolver\n  isExternal: false\n  name: ResolveAddressAsync(GeoCoordinate)\n  nameWithType: ICivicAddressResolver.ResolveAddressAsync(GeoCoordinate)\n  fullName: System.Device.Location.ICivicAddressResolver.ResolveAddressAsync(GeoCoordinate)\n- uid: System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted\n  parent: System.Device.Location.ICivicAddressResolver\n  isExternal: false\n  name: ResolveAddressCompleted\n  nameWithType: ICivicAddressResolver.ResolveAddressCompleted\n  fullName: System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted\n- uid: System.EventHandler{System.Device.Location.ResolveAddressCompletedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<ResolveAddressCompletedEventArgs>\n  nameWithType: EventHandler<ResolveAddressCompletedEventArgs>\n  fullName: System.EventHandler<System.Device.Location.ResolveAddressCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Device.Location.ResolveAddressCompletedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Device.Location.ResolveAddressCompletedEventArgs\n    name: ResolveAddressCompletedEventArgs\n    nameWithType: ResolveAddressCompletedEventArgs\n    fullName: ResolveAddressCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Device.Location.ICivicAddressResolver.ResolveAddress*\n  parent: System.Device.Location.ICivicAddressResolver\n  isExternal: false\n  name: ResolveAddress\n  nameWithType: ICivicAddressResolver.ResolveAddress\n- uid: System.Device.Location.ICivicAddressResolver.ResolveAddressAsync*\n  parent: System.Device.Location.ICivicAddressResolver\n  isExternal: false\n  name: ResolveAddressAsync\n  nameWithType: ICivicAddressResolver.ResolveAddressAsync\n"}