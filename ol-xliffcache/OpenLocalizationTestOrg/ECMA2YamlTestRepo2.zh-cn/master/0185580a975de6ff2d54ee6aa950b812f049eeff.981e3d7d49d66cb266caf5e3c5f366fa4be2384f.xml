{"nodes":[{"pos":[745,901],"content":"Enables data from a data source to be filtered without an explicit <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Where\" name=\"Where\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> clause in the data source.","needQuote":true,"needEscape":true,"source":"Enables data from a data source to be filtered without an explicit <xref uid=\"langword_csharp_Where\" name=\"Where\" href=\"\"></xref> clause in the data source."},{"pos":[914,8725],"content":"In this topic:      -   [Introduction](#Introduction)      -   [Background](#background)      -   [Filter Options](#filter_options)      -   [Tasks](#Tasks)      -   [Declarative Syntax](#declarative_syntax)      <a name=\"Introduction\"></a>    ## Introduction    The QueryExtender control is used to create filters for data that is retrieved from a data source, without using an explicit `Where` clause in the data source. The QueryExtender control can be used to specify filtering by using declarative syntax.      <a name=\"background\"></a>    ## Background    Filtering excludes data from a data source by displaying only the records that meet specified criteria. Filtering enables you to present different views of the data that is in a data set without affecting the data in the data set.       Filtering typically requires that you create a `Where` clause to apply to the command that queries the data source. However, the `Where` property of the data source control might not expose the full functionality that is available. For example, the QueryExtender control enables you to query a table by searching for strings at the beginning, end or anywhere in .data field.       To expose the full functionality that is available in LINQ and to make filtering data easier, [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] provides the QueryExtender control. The QueryExtender control has the following benefits:      -   It provides a richer filtering experience than writing a `Where` clause. For example, you can search a Products table for Boolean values by using the <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> filter without writing a query.      -   It lets you specify filters by using the same syntax for the <xref:System.Web.UI.WebControls.LinqDataSource> and <xref:System.Web.UI.WebControls.EntityDataSource> controls and for any other data source controls that you might use.      -   It can be used with <xref:System.Web.UI.WebControls.LinqDataSource> control, with a <xref:System.Web.UI.WebControls.EntityDataSource> control, or with third-party data sources.      <a name=\"filter_options\"></a>    ## Filter Options    The QueryExtender control supports a variety of options that you can use to filter data. The control lets you search strings, search numeric values in a specified range, and compare a property value in a table to a specified value. The control also lets you sort the data and provide custom queries.       These options are provided as LINQ expressions in the QueryExtender control. The QueryExtender control also supports expressions that are specific to [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] Dynamic Data applications.       The following table lists the options that you can use to filter data in the QueryExtender control.      |Expression|Description|   |----------------|-----------------|   |<xref:System.Web.DynamicData.ControlFilterExpression>|(Dynamic Data only) Builds a database query by using the data key that is selected in a source data-bound control.<br /><br /> For information about how to use this filter option, see [How to: Filter Table Rows Using Values from a Parent Table in Dynamic Data](http://msdn.microsoft.com/en-us/a5566986-7c30-4e71-b4a4-81cd16095749).|   |<xref:System.Web.UI.WebControls.Expressions.CustomExpression>|Specifies a user-defined expression for a data source. The custom LINQ expression can be invoked in an event handler.|   |<xref:System.Web.DynamicData.DynamicFilterExpression>|(Dynamic Data only) Builds a database query by using the specified <xref:System.Web.DynamicData.DynamicFilter> control.<br /><br /> For information about how to use this filter option, see [How to: Filter Table Rows Using Foreign Key in Dynamic Data](http://msdn.microsoft.com/en-us/b774e56a-a5b9-41b7-b114-699313ef2056).|   |<xref:System.Web.UI.WebControls.Expressions.MethodExpression>|Specifies a user-defined LINQ expression for a data source. The expression is invoked in a method.|   |<xref:System.Web.UI.WebControls.Expressions.OrderByExpression>|Applies a sort expression to an <xref:System.Linq.IQueryable> data source object. After you apply the <xref:System.Web.UI.WebControls.Expressions.OrderByExpression> value, you can apply additional sort operations by specifying a <xref:System.Web.UI.WebControls.Expressions.OrderByExpression.ThenByExpressions%2A> value.|   |<xref:System.Web.UI.WebControls.Expressions.PropertyExpression>|Compares the properties the data field and property values that are specified in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.|   |<xref:System.Web.UI.WebControls.Expressions.RangeExpression>|Determines whether a value is greater than or less than a specified value, or whether a value is between two values.|   |<xref:System.Web.UI.WebControls.Expressions.SearchExpression>|Compares values in a field or fields to a specified string value.|       You can use these QueryExtender options individually or you can combine them to provide complex filtering in a Web page. For more information, see [QueryExtender Web Server Control Overview](~/add/includes/ajax-current-ext-md.md). [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f)      <a name=\"Tasks\"></a>    ## Tasks    The following table lists tasks that show how to use the QueryExtender control to filter data.      |Document|Task|   |--------------|----------|   |[Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f)|Shows how to use the filter options that the QueryExtender control provides.|      <a name=\"declarative_syntax\"></a>    ## Declarative Syntax      ```   <asp:QueryExtender        EnableViewState=\"True|False\"       ID=\"string\"       OnDataBinding=\"DataBiding event handler\"       OnDisposed=\"Disposed event handler\"       OnInit=\"Init event handler       OnLoad=\"Load event handler\"       OnPreRender=\"PreRender event handler\"       OnUnload=\"UnLoad event hadler\"       Runat=\"server\"       TargetControlID=\"string\"       Visible=\"True|False\"   >           <asp:ControlFilterExpression                ControlD=\"string\"               Column=\"string\">            </asp:ControlFilterExpression>           <asp:DynamicFilterExpression               ControlD=\"string\"           </asp:DynamicFilterExpression>           <asp:CustomExpression=\"string\"               OnQuerying=\"OnQerying event handler\">           </asp:CustomExpression>           <asp:OrderByExpression=\"string\"               DataField=\"string\"               Direction=\"string\">               <asp:ThenByExpression                    DataField=\"string\"                    Direction=\"string\"               </asp:ThenBy>           </asp:OrderByExpression>           <asp:PropertyExpression=\"string\">                   <!-- child controls -->           </asp:PropertyExpression           >           <asp:RangeExpression=\"integer\"               Datafield=\"string\"               MaxType=\"Exclusive|Inclusive|None\"               MinType=\"Exclusive|Inclusive|None\">                   <!--child controls-->           </asp:RangeExpression>           <asp:SearchExpression=\"string\"               ComparisonType=\"CurrentCulture|CurrentCultureIgnoreCase|                   InavariantCulture|InvariantCultureIgnoreCase|                   Ordinal|OrdinalIgnoreCase\"               DataField=\"string\"               SearchType=\"Contains|EndsWith|StartsWith\">                   <!--child controls-->           </asp:SearchExpression>   </asp:QueryExtender>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"In this topic:      -   [Introduction](#Introduction)      -   [Background](#background)      -   [Filter Options](#filter_options)      -   [Tasks](#Tasks)      -   [Declarative Syntax](#declarative_syntax)      <a name=\"Introduction\"></a>    ## Introduction    The QueryExtender control is used to create filters for data that is retrieved from a data source, without using an explicit `Where` clause in the data source. The QueryExtender control can be used to specify filtering by using declarative syntax.      <a name=\"background\"></a>    ## Background    Filtering excludes data from a data source by displaying only the records that meet specified criteria. Filtering enables you to present different views of the data that is in a data set without affecting the data in the data set.       Filtering typically requires that you create a `Where` clause to apply to the command that queries the data source. However, the `Where` property of the data source control might not expose the full functionality that is available. For example, the QueryExtender control enables you to query a table by searching for strings at the beginning, end or anywhere in .data field.       To expose the full functionality that is available in LINQ and to make filtering data easier, [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] provides the QueryExtender control. The QueryExtender control has the following benefits:      -   It provides a richer filtering experience than writing a `Where` clause. For example, you can search a Products table for Boolean values by using the <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> filter without writing a query.      -   It lets you specify filters by using the same syntax for the <xref:System.Web.UI.WebControls.LinqDataSource> and <xref:System.Web.UI.WebControls.EntityDataSource> controls and for any other data source controls that you might use.      -   It can be used with <xref:System.Web.UI.WebControls.LinqDataSource> control, with a <xref:System.Web.UI.WebControls.EntityDataSource> control, or with third-party data sources.      <a name=\"filter_options\"></a>    ## Filter Options    The QueryExtender control supports a variety of options that you can use to filter data. The control lets you search strings, search numeric values in a specified range, and compare a property value in a table to a specified value. The control also lets you sort the data and provide custom queries.       These options are provided as LINQ expressions in the QueryExtender control. The QueryExtender control also supports expressions that are specific to [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] Dynamic Data applications.       The following table lists the options that you can use to filter data in the QueryExtender control.      |Expression|Description|   |----------------|-----------------|   |<xref:System.Web.DynamicData.ControlFilterExpression>|(Dynamic Data only) Builds a database query by using the data key that is selected in a source data-bound control.","pos":[0,3037],"nodes":[{"content":"In this topic:      -   <bpt id=\"p1\">[</bpt>Introduction<ept id=\"p1\">](#Introduction)</ept><ph id=\"ph1\">      -   </ph><bpt id=\"p2\">[</bpt>Background<ept id=\"p2\">](#background)</ept><ph id=\"ph2\">      -   </ph><bpt id=\"p3\">[</bpt>Filter Options<ept id=\"p3\">](#filter_options)</ept><ph id=\"ph3\">      -   </ph><bpt id=\"p4\">[</bpt>Tasks<ept id=\"p4\">](#Tasks)</ept><ph id=\"ph4\">      -   </ph><bpt id=\"p5\">[</bpt>Declarative Syntax<ept id=\"p5\">](#declarative_syntax)</ept>      <bpt id=\"p6\">&lt;a name=\"Introduction\"&gt;</bpt><ept id=\"p6\">&lt;/a&gt;</ept>    ## Introduction    The QueryExtender control is used to create filters for data that is retrieved from a data source, without using an explicit <ph id=\"ph5\">`Where`</ph> clause in the data source.","pos":[0,422],"source":"In this topic:      -   [Introduction](#Introduction)      -   [Background](#background)      -   [Filter Options](#filter_options)      -   [Tasks](#Tasks)      -   [Declarative Syntax](#declarative_syntax)      <a name=\"Introduction\"></a>    ## Introduction    The QueryExtender control is used to create filters for data that is retrieved from a data source, without using an explicit `Where` clause in the data source."},{"content":"The QueryExtender control can be used to specify filtering by using declarative syntax.","pos":[423,510]},{"content":"<bpt id=\"p1\">&lt;a name=\"background\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Background    Filtering excludes data from a data source by displaying only the records that meet specified criteria.","pos":[516,665],"source":"<a name=\"background\"></a>    ## Background    Filtering excludes data from a data source by displaying only the records that meet specified criteria."},{"content":"Filtering enables you to present different views of the data that is in a data set without affecting the data in the data set.","pos":[666,792]},{"content":"Filtering typically requires that you create a <ph id=\"ph1\">`Where`</ph> clause to apply to the command that queries the data source.","pos":[799,914],"source":"       Filtering typically requires that you create a `Where` clause to apply to the command that queries the data source."},{"content":"However, the <ph id=\"ph1\">`Where`</ph> property of the data source control might not expose the full functionality that is available.","pos":[915,1030],"source":" However, the `Where` property of the data source control might not expose the full functionality that is available."},{"content":"For example, the QueryExtender control enables you to query a table by searching for strings at the beginning, end or anywhere in .data field.","pos":[1031,1173]},{"content":"To expose the full functionality that is available in LINQ and to make filtering data easier, <ph id=\"ph1\">[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]</ph> provides the QueryExtender control.","pos":[1180,1361],"source":"       To expose the full functionality that is available in LINQ and to make filtering data easier, [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] provides the QueryExtender control."},{"content":"The QueryExtender control has the following benefits:      -   It provides a richer filtering experience than writing a <ph id=\"ph1\">`Where`</ph> clause.","pos":[1362,1497],"source":" The QueryExtender control has the following benefits:      -   It provides a richer filtering experience than writing a `Where` clause."},{"content":"For example, you can search a Products table for Boolean values by using the &lt;xref:System.Web.UI.WebControls.Expressions.PropertyExpression&gt; filter without writing a query.","pos":[1498,1670],"source":" For example, you can search a Products table for Boolean values by using the <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> filter without writing a query."},{"content":"-   It lets you specify filters by using the same syntax for the &lt;xref:System.Web.UI.WebControls.LinqDataSource&gt; and &lt;xref:System.Web.UI.WebControls.EntityDataSource&gt; controls and for any other data source controls that you might use.","pos":[1676,1910],"source":"      -   It lets you specify filters by using the same syntax for the <xref:System.Web.UI.WebControls.LinqDataSource> and <xref:System.Web.UI.WebControls.EntityDataSource> controls and for any other data source controls that you might use."},{"content":"-   It can be used with &lt;xref:System.Web.UI.WebControls.LinqDataSource&gt; control, with a &lt;xref:System.Web.UI.WebControls.EntityDataSource&gt; control, or with third-party data sources.","pos":[1916,2096],"source":"      -   It can be used with <xref:System.Web.UI.WebControls.LinqDataSource> control, with a <xref:System.Web.UI.WebControls.EntityDataSource> control, or with third-party data sources."},{"content":"<bpt id=\"p1\">&lt;a name=\"filter_options\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Filter Options    The QueryExtender control supports a variety of options that you can use to filter data.","pos":[2102,2244],"source":"<a name=\"filter_options\"></a>    ## Filter Options    The QueryExtender control supports a variety of options that you can use to filter data."},{"content":"The control lets you search strings, search numeric values in a specified range, and compare a property value in a table to a specified value.","pos":[2245,2387]},{"content":"The control also lets you sort the data and provide custom queries.","pos":[2388,2455]},{"content":"These options are provided as LINQ expressions in the QueryExtender control.","pos":[2462,2538]},{"content":"The QueryExtender control also supports expressions that are specific to <ph id=\"ph1\">[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]</ph> Dynamic Data applications.","pos":[2539,2690],"source":" The QueryExtender control also supports expressions that are specific to [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] Dynamic Data applications."},{"content":"The following table lists the options that you can use to filter data in the QueryExtender control.","pos":[2697,2796]},{"content":"|Expression|Description|   |----------------|-----------------|   |&lt;xref:System.Web.DynamicData.ControlFilterExpression&gt;|(Dynamic Data only) Builds a database query by using the data key that is selected in a source data-bound control.","pos":[2802,3037],"source":"      |Expression|Description|   |----------------|-----------------|   |<xref:System.Web.DynamicData.ControlFilterExpression>|(Dynamic Data only) Builds a database query by using the data key that is selected in a source data-bound control."}]},{"content":" For information about how to use this filter option, see [How to: Filter Table Rows Using Values from a Parent Table in Dynamic Data](http://msdn.microsoft.com/en-us/a5566986-7c30-4e71-b4a4-81cd16095749).|   |<xref:System.Web.UI.WebControls.Expressions.CustomExpression>|Specifies a user-defined expression for a data source. The custom LINQ expression can be invoked in an event handler.|   |<xref:System.Web.DynamicData.DynamicFilterExpression>|(Dynamic Data only) Builds a database query by using the specified <xref:System.Web.DynamicData.DynamicFilter> control.","pos":[3049,3616],"nodes":[{"content":"For information about how to use this filter option, see <bpt id=\"p1\">[</bpt>How to: Filter Table Rows Using Values from a Parent Table in Dynamic Data<ept id=\"p1\">](http://msdn.microsoft.com/en-us/a5566986-7c30-4e71-b4a4-81cd16095749)</ept>.|   |&lt;xref:System.Web.UI.WebControls.Expressions.CustomExpression&gt;|Specifies a user-defined expression for a data source.","pos":[1,326],"source":" For information about how to use this filter option, see [How to: Filter Table Rows Using Values from a Parent Table in Dynamic Data](http://msdn.microsoft.com/en-us/a5566986-7c30-4e71-b4a4-81cd16095749).|   |<xref:System.Web.UI.WebControls.Expressions.CustomExpression>|Specifies a user-defined expression for a data source."},{"content":"The custom LINQ expression can be invoked in an event handler.|   |&lt;xref:System.Web.DynamicData.DynamicFilterExpression&gt;|(Dynamic Data only) Builds a database query by using the specified &lt;xref:System.Web.DynamicData.DynamicFilter&gt; control.","pos":[327,567],"source":" The custom LINQ expression can be invoked in an event handler.|   |<xref:System.Web.DynamicData.DynamicFilterExpression>|(Dynamic Data only) Builds a database query by using the specified <xref:System.Web.DynamicData.DynamicFilter> control."}]},{"content":" For information about how to use this filter option, see [How to: Filter Table Rows Using Foreign Key in Dynamic Data](http://msdn.microsoft.com/en-us/b774e56a-a5b9-41b7-b114-699313ef2056).|   |<xref:System.Web.UI.WebControls.Expressions.MethodExpression>|Specifies a user-defined LINQ expression for a data source. The expression is invoked in a method.|   |<xref:System.Web.UI.WebControls.Expressions.OrderByExpression>|Applies a sort expression to an <xref:System.Linq.IQueryable> data source object. After you apply the <xref:System.Web.UI.WebControls.Expressions.OrderByExpression> value, you can apply additional sort operations by specifying a <xref:System.Web.UI.WebControls.Expressions.OrderByExpression.ThenByExpressions%2A> value.|   |<xref:System.Web.UI.WebControls.Expressions.PropertyExpression>|Compares the properties the data field and property values that are specified in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.|   |<xref:System.Web.UI.WebControls.Expressions.RangeExpression>|Determines whether a value is greater than or less than a specified value, or whether a value is between two values.|   |<xref:System.Web.UI.WebControls.Expressions.SearchExpression>|Compares values in a field or fields to a specified string value.|       You can use these QueryExtender options individually or you can combine them to provide complex filtering in a Web page. For more information, see [QueryExtender Web Server Control Overview](~/add/includes/ajax-current-ext-md.md). [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f)      <a name=\"Tasks\"></a>    ## Tasks    The following table lists tasks that show how to use the QueryExtender control to filter data.      |Document|Task|   |--------------|----------|   |[Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f)|Shows how to use the filter options that the QueryExtender control provides.|      <a name=\"declarative_syntax\"></a>    ## Declarative Syntax      ```   <asp:QueryExtender        EnableViewState=\"True|False\"       ID=\"string\"       OnDataBinding=\"DataBiding event handler\"       OnDisposed=\"Disposed event handler\"       OnInit=\"Init event handler       OnLoad=\"Load event handler\"       OnPreRender=\"PreRender event handler\"       OnUnload=\"UnLoad event hadler\"       Runat=\"server\"       TargetControlID=\"string\"       Visible=\"True|False\"   >           <asp:ControlFilterExpression                ControlD=\"string\"               Column=\"string\">            </asp:ControlFilterExpression>           <asp:DynamicFilterExpression               ControlD=\"string\"           </asp:DynamicFilterExpression>           <asp:CustomExpression=\"string\"               OnQuerying=\"OnQerying event handler\">           </asp:CustomExpression>           <asp:OrderByExpression=\"string\"               DataField=\"string\"               Direction=\"string\">               <asp:ThenByExpression                    DataField=\"string\"                    Direction=\"string\"               </asp:ThenBy>           </asp:OrderByExpression>           <asp:PropertyExpression=\"string\">                   <!-- child controls -->           </asp:PropertyExpression           >           <asp:RangeExpression=\"integer\"               Datafield=\"string\"               MaxType=\"Exclusive|Inclusive|None\"               MinType=\"Exclusive|Inclusive|None\">                   <!--child controls-->           </asp:RangeExpression>           <asp:SearchExpression=\"string\"               ComparisonType=\"CurrentCulture|CurrentCultureIgnoreCase|                   InavariantCulture|InvariantCultureIgnoreCase|                   Ordinal|OrdinalIgnoreCase\"               DataField=\"string\"               SearchType=\"Contains|EndsWith|StartsWith\">                   <!--child controls-->           </asp:SearchExpression>   </asp:QueryExtender>   ```","pos":[3628,7629],"nodes":[{"content":"For information about how to use this filter option, see <bpt id=\"p1\">[</bpt>How to: Filter Table Rows Using Foreign Key in Dynamic Data<ept id=\"p1\">](http://msdn.microsoft.com/en-us/b774e56a-a5b9-41b7-b114-699313ef2056)</ept>.|   |&lt;xref:System.Web.UI.WebControls.Expressions.MethodExpression&gt;|Specifies a user-defined LINQ expression for a data source.","pos":[1,316],"source":" For information about how to use this filter option, see [How to: Filter Table Rows Using Foreign Key in Dynamic Data](http://msdn.microsoft.com/en-us/b774e56a-a5b9-41b7-b114-699313ef2056).|   |<xref:System.Web.UI.WebControls.Expressions.MethodExpression>|Specifies a user-defined LINQ expression for a data source."},{"content":"The expression is invoked in a method.|   |&lt;xref:System.Web.UI.WebControls.Expressions.OrderByExpression&gt;|Applies a sort expression to an &lt;xref:System.Linq.IQueryable&gt; data source object.","pos":[317,504],"source":" The expression is invoked in a method.|   |<xref:System.Web.UI.WebControls.Expressions.OrderByExpression>|Applies a sort expression to an <xref:System.Linq.IQueryable> data source object."},{"content":"After you apply the &lt;xref:System.Web.UI.WebControls.Expressions.OrderByExpression&gt; value, you can apply additional sort operations by specifying a &lt;xref:System.Web.UI.WebControls.Expressions.OrderByExpression.ThenByExpressions%2A&gt; value.|   |&lt;xref:System.Web.UI.WebControls.Expressions.PropertyExpression&gt;|Compares the properties the data field and property values that are specified in the &lt;xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A&gt; collection.|   |&lt;xref:System.Web.UI.WebControls.Expressions.RangeExpression&gt;|Determines whether a value is greater than or less than a specified value, or whether a value is between two values.|   |&lt;xref:System.Web.UI.WebControls.Expressions.SearchExpression&gt;|Compares values in a field or fields to a specified string value.|       You can use these QueryExtender options individually or you can combine them to provide complex filtering in a Web page.","pos":[505,1416],"source":" After you apply the <xref:System.Web.UI.WebControls.Expressions.OrderByExpression> value, you can apply additional sort operations by specifying a <xref:System.Web.UI.WebControls.Expressions.OrderByExpression.ThenByExpressions%2A> value.|   |<xref:System.Web.UI.WebControls.Expressions.PropertyExpression>|Compares the properties the data field and property values that are specified in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.|   |<xref:System.Web.UI.WebControls.Expressions.RangeExpression>|Determines whether a value is greater than or less than a specified value, or whether a value is between two values.|   |<xref:System.Web.UI.WebControls.Expressions.SearchExpression>|Compares values in a field or fields to a specified string value.|       You can use these QueryExtender options individually or you can combine them to provide complex filtering in a Web page."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>QueryExtender Web Server Control Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1417,1526],"source":" For more information, see [QueryExtender Web Server Control Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Filtering Data in a Web Page Using Declarative Syntax<ept id=\"p1\">](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f)</ept>      <bpt id=\"p2\">&lt;a name=\"Tasks\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## Tasks    The following table lists tasks that show how to use the QueryExtender control to filter data.","pos":[1527,1801],"source":"[Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f)      <a name=\"Tasks\"></a>    ## Tasks    The following table lists tasks that show how to use the QueryExtender control to filter data."},{"content":"|Document|Task|   |--------------|----------|   |<bpt id=\"p1\">[</bpt>Walkthrough: Filtering Data in a Web Page Using Declarative Syntax<ept id=\"p1\">](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f)</ept>|Shows how to use the filter options that the QueryExtender control provides.|      <bpt id=\"p2\">&lt;a name=\"declarative_syntax\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## Declarative Syntax      <ph id=\"ph1\">```   &lt;asp:QueryExtender        EnableViewState=\"True|False\"       ID=\"string\"       OnDataBinding=\"DataBiding event handler\"       OnDisposed=\"Disposed event handler\"       OnInit=\"Init event handler       OnLoad=\"Load event handler\"       OnPreRender=\"PreRender event handler\"       OnUnload=\"UnLoad event hadler\"       Runat=\"server\"       TargetControlID=\"string\"       Visible=\"True|False\"   &gt;           &lt;asp:ControlFilterExpression                ControlD=\"string\"               Column=\"string\"&gt;            &lt;/asp:ControlFilterExpression&gt;           &lt;asp:DynamicFilterExpression               ControlD=\"string\"           &lt;/asp:DynamicFilterExpression&gt;           &lt;asp:CustomExpression=\"string\"               OnQuerying=\"OnQerying event handler\"&gt;           &lt;/asp:CustomExpression&gt;           &lt;asp:OrderByExpression=\"string\"               DataField=\"string\"               Direction=\"string\"&gt;               &lt;asp:ThenByExpression                    DataField=\"string\"                    Direction=\"string\"               &lt;/asp:ThenBy&gt;           &lt;/asp:OrderByExpression&gt;           &lt;asp:PropertyExpression=\"string\"&gt;                   &lt;!-- child controls --&gt;           &lt;/asp:PropertyExpression           &gt;           &lt;asp:RangeExpression=\"integer\"               Datafield=\"string\"               MaxType=\"Exclusive|Inclusive|None\"               MinType=\"Exclusive|Inclusive|None\"&gt;                   &lt;!--child controls--&gt;           &lt;/asp:RangeExpression&gt;           &lt;asp:SearchExpression=\"string\"               ComparisonType=\"CurrentCulture|CurrentCultureIgnoreCase|                   InavariantCulture|InvariantCultureIgnoreCase|                   Ordinal|OrdinalIgnoreCase\"               DataField=\"string\"               SearchType=\"Contains|EndsWith|StartsWith\"&gt;                   &lt;!--child controls--&gt;           &lt;/asp:SearchExpression&gt;   &lt;/asp:QueryExtender&gt;   ```</ph>","pos":[1807,4001],"source":"      |Document|Task|   |--------------|----------|   |[Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f)|Shows how to use the filter options that the QueryExtender control provides.|      <a name=\"declarative_syntax\"></a>    ## Declarative Syntax      ```   <asp:QueryExtender        EnableViewState=\"True|False\"       ID=\"string\"       OnDataBinding=\"DataBiding event handler\"       OnDisposed=\"Disposed event handler\"       OnInit=\"Init event handler       OnLoad=\"Load event handler\"       OnPreRender=\"PreRender event handler\"       OnUnload=\"UnLoad event hadler\"       Runat=\"server\"       TargetControlID=\"string\"       Visible=\"True|False\"   >           <asp:ControlFilterExpression                ControlD=\"string\"               Column=\"string\">            </asp:ControlFilterExpression>           <asp:DynamicFilterExpression               ControlD=\"string\"           </asp:DynamicFilterExpression>           <asp:CustomExpression=\"string\"               OnQuerying=\"OnQerying event handler\">           </asp:CustomExpression>           <asp:OrderByExpression=\"string\"               DataField=\"string\"               Direction=\"string\">               <asp:ThenByExpression                    DataField=\"string\"                    Direction=\"string\"               </asp:ThenBy>           </asp:OrderByExpression>           <asp:PropertyExpression=\"string\">                   <!-- child controls -->           </asp:PropertyExpression           >           <asp:RangeExpression=\"integer\"               Datafield=\"string\"               MaxType=\"Exclusive|Inclusive|None\"               MinType=\"Exclusive|Inclusive|None\">                   <!--child controls-->           </asp:RangeExpression>           <asp:SearchExpression=\"string\"               ComparisonType=\"CurrentCulture|CurrentCultureIgnoreCase|                   InavariantCulture|InvariantCultureIgnoreCase|                   Ordinal|OrdinalIgnoreCase\"               DataField=\"string\"               SearchType=\"Contains|EndsWith|StartsWith\">                   <!--child controls-->           </asp:SearchExpression>   </asp:QueryExtender>   ```"}]}]},{"pos":[18563,18664],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.QueryExtender\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> Class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> Class."},{"pos":[19206,19312],"content":"Gets the data source control (<bpt id=\"p1\">&lt;xref href=\"System.Web.UI.IDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object) to use for the query.","needQuote":true,"needEscape":true,"source":"Gets the data source control (<xref href=\"System.Web.UI.IDataSource\"></xref> object) to use for the query."},{"pos":[19324,19507],"content":"The <xref:System.Web.UI.WebControls.QueryExtender> control supports the <xref:System.Web.UI.WebControls.LinqDataSource> and <xref:System.Web.UI.WebControls.EntityDataSource> controls.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.QueryExtender&gt; control supports the &lt;xref:System.Web.UI.WebControls.LinqDataSource&gt; and &lt;xref:System.Web.UI.WebControls.EntityDataSource&gt; controls.","pos":[0,183],"source":"The <xref:System.Web.UI.WebControls.QueryExtender> control supports the <xref:System.Web.UI.WebControls.LinqDataSource> and <xref:System.Web.UI.WebControls.EntityDataSource> controls."}]},{"pos":[19703,19748],"content":"The data source control to use for the query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data source control to use for the query.","pos":[0,45]}]},{"pos":[19937,20025],"content":"The DataSource property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The DataSource property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[20429,20543],"content":"Gets the collection of expressions that are applied to the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.IDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Gets the collection of expressions that are applied to the <xref href=\"System.Web.UI.IDataSource\"></xref> control."},{"pos":[20776,20850],"content":"The collection of expressions that are applied to the data source control.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection of expressions that are applied to the data source control.","pos":[0,74]}]},{"pos":[21398,21527],"content":"Loads the state of the values in the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.QueryExtender\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control that must be persisted.","needQuote":true,"needEscape":true,"source":"Loads the state of the values in the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> control that must be persisted."},{"pos":[21692,21804],"content":"An object that represents the state of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.QueryExtender\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"An object that represents the state of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> control."},{"pos":[22334,22450],"content":"Occurs when a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.QueryExtender\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class is initialized.","needQuote":true,"needEscape":true,"source":"Occurs when a new instance of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> class is initialized."},{"pos":[22596,22611],"content":"The event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event data.","pos":[0,15]}]},{"pos":[23106,23211],"content":"Saves the current view state of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.QueryExtender\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Saves the current view state of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> control."},{"pos":[23355,23471],"content":"An object that contains the saved state of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.QueryExtender\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"An object that contains the saved state of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> control."},{"pos":[23979,24082],"content":"Gets or sets the ID of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.IDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control to use for the query.","needQuote":true,"needEscape":true,"source":"Gets or sets the ID of the <xref href=\"System.Web.UI.IDataSource\"></xref> control to use for the query."},{"pos":[24215,24270],"content":"The ID of the data source control to use for the query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the data source control to use for the query.","pos":[0,55]}]},{"pos":[24779,24989],"content":"Tracks view-state changes of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.QueryExtender\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control so that the changes can be stored in the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.StateBag\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object for the control.","needQuote":true,"needEscape":true,"source":"Tracks view-state changes of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> control so that the changes can be stored in the <xref href=\"System.Web.UI.StateBag\"></xref> object for the control."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.QueryExtender\n  id: QueryExtender\n  children:\n  - System.Web.UI.WebControls.QueryExtender.#ctor\n  - System.Web.UI.WebControls.QueryExtender.DataSource\n  - System.Web.UI.WebControls.QueryExtender.Expressions\n  - System.Web.UI.WebControls.QueryExtender.LoadViewState(System.Object)\n  - System.Web.UI.WebControls.QueryExtender.OnInit(System.EventArgs)\n  - System.Web.UI.WebControls.QueryExtender.SaveViewState\n  - System.Web.UI.WebControls.QueryExtender.TargetControlID\n  - System.Web.UI.WebControls.QueryExtender.TrackViewState\n  langs:\n  - csharp\n  name: QueryExtender\n  nameWithType: QueryExtender\n  fullName: System.Web.UI.WebControls.QueryExtender\n  type: Class\n  summary: Enables data from a data source to be filtered without an explicit <xref uid=\"langword_csharp_Where\" name=\"Where\" href=\"\"></xref> clause in the data source.\n  remarks: \"In this topic:  \\n  \\n-   [Introduction](#Introduction)  \\n  \\n-   [Background](#background)  \\n  \\n-   [Filter Options](#filter_options)  \\n  \\n-   [Tasks](#Tasks)  \\n  \\n-   [Declarative Syntax](#declarative_syntax)  \\n  \\n<a name=\\\"Introduction\\\"></a>   \\n## Introduction  \\n The QueryExtender control is used to create filters for data that is retrieved from a data source, without using an explicit `Where` clause in the data source. The QueryExtender control can be used to specify filtering by using declarative syntax.  \\n  \\n<a name=\\\"background\\\"></a>   \\n## Background  \\n Filtering excludes data from a data source by displaying only the records that meet specified criteria. Filtering enables you to present different views of the data that is in a data set without affecting the data in the data set.  \\n  \\n Filtering typically requires that you create a `Where` clause to apply to the command that queries the data source. However, the `Where` property of the data source control might not expose the full functionality that is available. For example, the QueryExtender control enables you to query a table by searching for strings at the beginning, end or anywhere in .data field.  \\n  \\n To expose the full functionality that is available in LINQ and to make filtering data easier, [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] provides the QueryExtender control. The QueryExtender control has the following benefits:  \\n  \\n-   It provides a richer filtering experience than writing a `Where` clause. For example, you can search a Products table for Boolean values by using the <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> filter without writing a query.  \\n  \\n-   It lets you specify filters by using the same syntax for the <xref:System.Web.UI.WebControls.LinqDataSource> and <xref:System.Web.UI.WebControls.EntityDataSource> controls and for any other data source controls that you might use.  \\n  \\n-   It can be used with <xref:System.Web.UI.WebControls.LinqDataSource> control, with a <xref:System.Web.UI.WebControls.EntityDataSource> control, or with third-party data sources.  \\n  \\n<a name=\\\"filter_options\\\"></a>   \\n## Filter Options  \\n The QueryExtender control supports a variety of options that you can use to filter data. The control lets you search strings, search numeric values in a specified range, and compare a property value in a table to a specified value. The control also lets you sort the data and provide custom queries.  \\n  \\n These options are provided as LINQ expressions in the QueryExtender control. The QueryExtender control also supports expressions that are specific to [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] Dynamic Data applications.  \\n  \\n The following table lists the options that you can use to filter data in the QueryExtender control.  \\n  \\n|Expression|Description|  \\n|----------------|-----------------|  \\n|<xref:System.Web.DynamicData.ControlFilterExpression>|(Dynamic Data only) Builds a database query by using the data key that is selected in a source data-bound control.<br /><br /> For information about how to use this filter option, see [How to: Filter Table Rows Using Values from a Parent Table in Dynamic Data](http://msdn.microsoft.com/en-us/a5566986-7c30-4e71-b4a4-81cd16095749).|  \\n|<xref:System.Web.UI.WebControls.Expressions.CustomExpression>|Specifies a user-defined expression for a data source. The custom LINQ expression can be invoked in an event handler.|  \\n|<xref:System.Web.DynamicData.DynamicFilterExpression>|(Dynamic Data only) Builds a database query by using the specified <xref:System.Web.DynamicData.DynamicFilter> control.<br /><br /> For information about how to use this filter option, see [How to: Filter Table Rows Using Foreign Key in Dynamic Data](http://msdn.microsoft.com/en-us/b774e56a-a5b9-41b7-b114-699313ef2056).|  \\n|<xref:System.Web.UI.WebControls.Expressions.MethodExpression>|Specifies a user-defined LINQ expression for a data source. The expression is invoked in a method.|  \\n|<xref:System.Web.UI.WebControls.Expressions.OrderByExpression>|Applies a sort expression to an <xref:System.Linq.IQueryable> data source object. After you apply the <xref:System.Web.UI.WebControls.Expressions.OrderByExpression> value, you can apply additional sort operations by specifying a <xref:System.Web.UI.WebControls.Expressions.OrderByExpression.ThenByExpressions%2A> value.|  \\n|<xref:System.Web.UI.WebControls.Expressions.PropertyExpression>|Compares the properties the data field and property values that are specified in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.|  \\n|<xref:System.Web.UI.WebControls.Expressions.RangeExpression>|Determines whether a value is greater than or less than a specified value, or whether a value is between two values.|  \\n|<xref:System.Web.UI.WebControls.Expressions.SearchExpression>|Compares values in a field or fields to a specified string value.|  \\n  \\n You can use these QueryExtender options individually or you can combine them to provide complex filtering in a Web page. For more information, see [QueryExtender Web Server Control Overview](~/add/includes/ajax-current-ext-md.md). [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f)  \\n  \\n<a name=\\\"Tasks\\\"></a>   \\n## Tasks  \\n The following table lists tasks that show how to use the QueryExtender control to filter data.  \\n  \\n|Document|Task|  \\n|--------------|----------|  \\n|[Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f)|Shows how to use the filter options that the QueryExtender control provides.|  \\n  \\n<a name=\\\"declarative_syntax\\\"></a>   \\n## Declarative Syntax  \\n  \\n```  \\n<asp:QueryExtender   \\n    EnableViewState=\\\"True|False\\\"  \\n    ID=\\\"string\\\"  \\n    OnDataBinding=\\\"DataBiding event handler\\\"  \\n    OnDisposed=\\\"Disposed event handler\\\"  \\n    OnInit=\\\"Init event handler  \\n    OnLoad=\\\"Load event handler\\\"  \\n    OnPreRender=\\\"PreRender event handler\\\"  \\n    OnUnload=\\\"UnLoad event hadler\\\"  \\n    Runat=\\\"server\\\"  \\n    TargetControlID=\\\"string\\\"  \\n    Visible=\\\"True|False\\\"  \\n>  \\n        <asp:ControlFilterExpression   \\n            ControlD=\\\"string\\\"  \\n            Column=\\\"string\\\">   \\n        </asp:ControlFilterExpression>  \\n        <asp:DynamicFilterExpression  \\n            ControlD=\\\"string\\\"  \\n        </asp:DynamicFilterExpression>  \\n        <asp:CustomExpression=\\\"string\\\"  \\n            OnQuerying=\\\"OnQerying event handler\\\">  \\n        </asp:CustomExpression>  \\n        <asp:OrderByExpression=\\\"string\\\"  \\n            DataField=\\\"string\\\"  \\n            Direction=\\\"string\\\">  \\n            <asp:ThenByExpression  \\n                 DataField=\\\"string\\\"  \\n                 Direction=\\\"string\\\"  \\n            </asp:ThenBy>  \\n        </asp:OrderByExpression>  \\n        <asp:PropertyExpression=\\\"string\\\">  \\n                <!-- child controls -->  \\n        </asp:PropertyExpression  \\n        >  \\n        <asp:RangeExpression=\\\"integer\\\"  \\n            Datafield=\\\"string\\\"  \\n            MaxType=\\\"Exclusive|Inclusive|None\\\"  \\n            MinType=\\\"Exclusive|Inclusive|None\\\">  \\n                <!--child controls-->  \\n        </asp:RangeExpression>  \\n        <asp:SearchExpression=\\\"string\\\"  \\n            ComparisonType=\\\"CurrentCulture|CurrentCultureIgnoreCase|  \\n                InavariantCulture|InvariantCultureIgnoreCase|  \\n                Ordinal|OrdinalIgnoreCase\\\"  \\n            DataField=\\\"string\\\"  \\n            SearchType=\\\"Contains|EndsWith|StartsWith\\\">  \\n                <!--child controls-->  \\n        </asp:SearchExpression>  \\n</asp:QueryExtender>  \\n```\"\n  example:\n  - \"The following example shows how to use the QueryExtender control to provide a search function in a Web page. The QueryExtender control uses the text that is entered in the `TextBoxSearch` control to search for contents in the ProductName and Supplier.CompanyName columns of a Products table in the data that is returned from the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.Expressions.SearchExpression> object is used to perform the search. The <xref:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields%2A> property specifies the data fields to search. The <xref:System.Web.UI.WebControls.Expressions.SearchExpression.SearchType%2A> property specifies the type of search to perform. The <xref:System.Web.UI.WebControls.ControlParameter> element specifies the control that contains the text to use for the search. This code example is part of a larger example that is provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  \\n  \\n```  \\n<asp:LinqDataSource ID=\\\"dataSource\\\" runat=\\\"server\\\"   \\n    TableName=\\\"Products\\\">  \\n</asp:LinqDataSource>  \\n<asp:QueryExtender TargetControlID=\\\"dataSource\\\" runat=\\\"server\\\">  \\n  <asp:SearchExpression DataFields=\\\"ProductName, Supplier.CompanyName\\\"   \\n        SearchType=\\\"StartsWith\\\">  \\n    <asp:ControlParameter ControlID=\\\"TextBoxSearch\\\" />  \\n  </asp:SearchExpression>  \\n</asp:QueryExtender>  \\n```  \\n  \\n The following example shows how to use the QueryExtender control to search a Web page for values in a specified range. The QueryExtender control uses the values that are entered in the `TextBoxFrom` and `TextBoxTo` controls to search for values in the ProductName and Supplier.CompanyName columns of a Products table in the data that is returned from the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.ControlParameter> element specifies the text box controls that contain the minimum and maximum values to use for searching the range. The <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MinType%2A> and <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MaxType%2A> properties specify that the minimum and maximum values must be included in the data that is returned. This code example is part of a larger example provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  \\n  \\n```  \\n<asp:LinqDataSource ID=\\\"dataSource\\\" runat=\\\"server\\\"   \\n    TableName=\\\"Products\\\">  \\n</asp:LinqDataSource>  \\n<asp:QueryExtender TargetControlID=\\\"dataSource\\\" runat=\\\"server\\\">  \\n  <asp:RangeExpression DataField=\\\"UnitPrice\\\" MinType=\\\"Inclusive\\\"   \\n        MaxType=\\\"Inclusive\\\">  \\n    <asp:ControlParameter ControlID=\\\"TextBoxFrom\\\" />  \\n    <asp:ControlParameter ControlID=\\\"TexBoxTo\\\" />  \\n  </asp:RangeExpression>  \\n</asp:QueryExtender>  \\n```\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultProperty(\"TargetControlID\")]\n\n      [System.ComponentModel.Designer(\"System.Web.UI.Design.QueryExtenderDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\")]\n\n      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.QueryExtender), \"QueryExtender.bmp\")]\n\n      [System.Web.UI.NonVisualControl]\n\n      [System.Web.UI.ParseChildren(true, \"Expressions\")]\n\n      [System.Web.UI.PersistChildren(false)]\n\n      [System.Web.UI.TargetControlType(typeof(System.Web.UI.WebControls.IQueryableDataSource))]\n\n      public class QueryExtender : System.Web.UI.Control\n  inheritance:\n  - System.Object\n  - System.Web.UI.Control\n  implements: []\n  inheritedMembers:\n  - System.Web.UI.Control.Adapter\n  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)\n  - System.Web.UI.Control.AddParsedSubObject(System.Object)\n  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)\n  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory\n  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)\n  - System.Web.UI.Control.BindingContainer\n  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)\n  - System.Web.UI.Control.ChildControlsCreated\n  - System.Web.UI.Control.ClearCachedClientID\n  - System.Web.UI.Control.ClearChildControlState\n  - System.Web.UI.Control.ClearChildState\n  - System.Web.UI.Control.ClearChildViewState\n  - System.Web.UI.Control.ClearEffectiveClientIDMode\n  - System.Web.UI.Control.ClientID\n  - System.Web.UI.Control.ClientIDMode\n  - System.Web.UI.Control.ClientIDSeparator\n  - System.Web.UI.Control.Context\n  - System.Web.UI.Control.Controls\n  - System.Web.UI.Control.CreateChildControls\n  - System.Web.UI.Control.CreateControlCollection\n  - System.Web.UI.Control.DataBind\n  - System.Web.UI.Control.DataBind(System.Boolean)\n  - System.Web.UI.Control.DataBindChildren\n  - System.Web.UI.Control.DataBinding\n  - System.Web.UI.Control.DataItemContainer\n  - System.Web.UI.Control.DataKeysContainer\n  - System.Web.UI.Control.DesignMode\n  - System.Web.UI.Control.Dispose\n  - System.Web.UI.Control.Disposed\n  - System.Web.UI.Control.EnableTheming\n  - System.Web.UI.Control.EnableViewState\n  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)\n  - System.Web.UI.Control.EnsureChildControls\n  - System.Web.UI.Control.EnsureID\n  - System.Web.UI.Control.Events\n  - System.Web.UI.Control.FindControl(System.String)\n  - System.Web.UI.Control.FindControl(System.String,System.Int32)\n  - System.Web.UI.Control.Focus\n  - System.Web.UI.Control.GetDesignModeState\n  - System.Web.UI.Control.GetRouteUrl(System.Object)\n  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)\n  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)\n  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)\n  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)\n  - System.Web.UI.Control.HasChildViewState\n  - System.Web.UI.Control.HasControls\n  - System.Web.UI.Control.HasEvents\n  - System.Web.UI.Control.ID\n  - System.Web.UI.Control.IdSeparator\n  - System.Web.UI.Control.Init\n  - System.Web.UI.Control.IsChildControlStateCleared\n  - System.Web.UI.Control.IsLiteralContent\n  - System.Web.UI.Control.IsTrackingViewState\n  - System.Web.UI.Control.IsViewStateEnabled\n  - System.Web.UI.Control.Load\n  - System.Web.UI.Control.LoadControlState(System.Object)\n  - System.Web.UI.Control.LoadViewStateByID\n  - System.Web.UI.Control.MapPathSecure(System.String)\n  - System.Web.UI.Control.NamingContainer\n  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)\n  - System.Web.UI.Control.OnDataBinding(System.EventArgs)\n  - System.Web.UI.Control.OnLoad(System.EventArgs)\n  - System.Web.UI.Control.OnPreRender(System.EventArgs)\n  - System.Web.UI.Control.OnUnload(System.EventArgs)\n  - System.Web.UI.Control.OpenFile(System.String)\n  - System.Web.UI.Control.Page\n  - System.Web.UI.Control.Parent\n  - System.Web.UI.Control.PreRender\n  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)\n  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)\n  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)\n  - System.Web.UI.Control.RenderingCompatibility\n  - System.Web.UI.Control.ResolveAdapter\n  - System.Web.UI.Control.ResolveClientUrl(System.String)\n  - System.Web.UI.Control.ResolveUrl(System.String)\n  - System.Web.UI.Control.SaveControlState\n  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)\n  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)\n  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)\n  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)\n  - System.Web.UI.Control.Site\n  - System.Web.UI.Control.SkinID\n  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData\n  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings\n  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings\n  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions\n  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions\n  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)\n  - System.Web.UI.Control.TemplateControl\n  - System.Web.UI.Control.TemplateSourceDirectory\n  - System.Web.UI.Control.UniqueID\n  - System.Web.UI.Control.Unload\n  - System.Web.UI.Control.ValidateRequestMode\n  - System.Web.UI.Control.ViewState\n  - System.Web.UI.Control.ViewStateIgnoresCase\n  - System.Web.UI.Control.ViewStateMode\n  - System.Web.UI.Control.Visible\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.QueryExtender.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.WebControls.QueryExtender\n  langs:\n  - csharp\n  name: QueryExtender()\n  nameWithType: QueryExtender.QueryExtender()\n  fullName: System.Web.UI.WebControls.QueryExtender.QueryExtender()\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> Class.\n  syntax:\n    content: public QueryExtender ();\n    parameters: []\n  overload: System.Web.UI.WebControls.QueryExtender.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.QueryExtender.DataSource\n  id: DataSource\n  parent: System.Web.UI.WebControls.QueryExtender\n  langs:\n  - csharp\n  name: DataSource\n  nameWithType: QueryExtender.DataSource\n  fullName: System.Web.UI.WebControls.QueryExtender.DataSource\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets the data source control (<xref href=\"System.Web.UI.IDataSource\"></xref> object) to use for the query.\n  remarks: The <xref:System.Web.UI.WebControls.QueryExtender> control supports the <xref:System.Web.UI.WebControls.LinqDataSource> and <xref:System.Web.UI.WebControls.EntityDataSource> controls.\n  syntax:\n    content: public virtual System.Web.UI.WebControls.IQueryableDataSource DataSource { get; }\n    return:\n      type: System.Web.UI.WebControls.IQueryableDataSource\n      description: The data source control to use for the query.\n  overload: System.Web.UI.WebControls.QueryExtender.DataSource*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The DataSource property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.QueryExtender.Expressions\n  id: Expressions\n  parent: System.Web.UI.WebControls.QueryExtender\n  langs:\n  - csharp\n  name: Expressions\n  nameWithType: QueryExtender.Expressions\n  fullName: System.Web.UI.WebControls.QueryExtender.Expressions\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets the collection of expressions that are applied to the <xref href=\"System.Web.UI.IDataSource\"></xref> control.\n  syntax:\n    content: public System.Web.UI.WebControls.Expressions.DataSourceExpressionCollection Expressions { get; }\n    return:\n      type: System.Web.UI.WebControls.Expressions.DataSourceExpressionCollection\n      description: The collection of expressions that are applied to the data source control.\n  overload: System.Web.UI.WebControls.QueryExtender.Expressions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.QueryExtender.LoadViewState(System.Object)\n  id: LoadViewState(System.Object)\n  parent: System.Web.UI.WebControls.QueryExtender\n  langs:\n  - csharp\n  name: LoadViewState(Object)\n  nameWithType: QueryExtender.LoadViewState(Object)\n  fullName: System.Web.UI.WebControls.QueryExtender.LoadViewState(Object)\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Loads the state of the values in the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> control that must be persisted.\n  syntax:\n    content: protected override void LoadViewState (object savedState);\n    parameters:\n    - id: savedState\n      type: System.Object\n      description: An object that represents the state of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> control.\n  overload: System.Web.UI.WebControls.QueryExtender.LoadViewState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.QueryExtender.OnInit(System.EventArgs)\n  id: OnInit(System.EventArgs)\n  parent: System.Web.UI.WebControls.QueryExtender\n  langs:\n  - csharp\n  name: OnInit(EventArgs)\n  nameWithType: QueryExtender.OnInit(EventArgs)\n  fullName: System.Web.UI.WebControls.QueryExtender.OnInit(EventArgs)\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Occurs when a new instance of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> class is initialized.\n  syntax:\n    content: protected override void OnInit (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: The event data.\n  overload: System.Web.UI.WebControls.QueryExtender.OnInit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.QueryExtender.SaveViewState\n  id: SaveViewState\n  parent: System.Web.UI.WebControls.QueryExtender\n  langs:\n  - csharp\n  name: SaveViewState()\n  nameWithType: QueryExtender.SaveViewState()\n  fullName: System.Web.UI.WebControls.QueryExtender.SaveViewState()\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Saves the current view state of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> control.\n  syntax:\n    content: protected override object SaveViewState ();\n    parameters: []\n    return:\n      type: System.Object\n      description: An object that contains the saved state of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> control.\n  overload: System.Web.UI.WebControls.QueryExtender.SaveViewState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.QueryExtender.TargetControlID\n  id: TargetControlID\n  parent: System.Web.UI.WebControls.QueryExtender\n  langs:\n  - csharp\n  name: TargetControlID\n  nameWithType: QueryExtender.TargetControlID\n  fullName: System.Web.UI.WebControls.QueryExtender.TargetControlID\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the ID of the <xref href=\"System.Web.UI.IDataSource\"></xref> control to use for the query.\n  syntax:\n    content: public virtual string TargetControlID { get; set; }\n    return:\n      type: System.String\n      description: The ID of the data source control to use for the query.\n  overload: System.Web.UI.WebControls.QueryExtender.TargetControlID*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.QueryExtender.TrackViewState\n  id: TrackViewState\n  parent: System.Web.UI.WebControls.QueryExtender\n  langs:\n  - csharp\n  name: TrackViewState()\n  nameWithType: QueryExtender.TrackViewState()\n  fullName: System.Web.UI.WebControls.QueryExtender.TrackViewState()\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Tracks view-state changes of the <xref href=\"System.Web.UI.WebControls.QueryExtender\"></xref> control so that the changes can be stored in the <xref href=\"System.Web.UI.StateBag\"></xref> object for the control.\n  syntax:\n    content: protected override void TrackViewState ();\n    parameters: []\n  overload: System.Web.UI.WebControls.QueryExtender.TrackViewState*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.UI.Control\n  isExternal: false\n  name: System.Web.UI.Control\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Web.UI.WebControls.QueryExtender.#ctor\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: QueryExtender()\n  nameWithType: QueryExtender.QueryExtender()\n  fullName: System.Web.UI.WebControls.QueryExtender.QueryExtender()\n- uid: System.Web.UI.WebControls.QueryExtender.DataSource\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: DataSource\n  nameWithType: QueryExtender.DataSource\n  fullName: System.Web.UI.WebControls.QueryExtender.DataSource\n- uid: System.Web.UI.WebControls.IQueryableDataSource\n  parent: System.Web.UI.WebControls\n  isExternal: false\n  name: IQueryableDataSource\n  nameWithType: IQueryableDataSource\n  fullName: System.Web.UI.WebControls.IQueryableDataSource\n- uid: System.Web.UI.WebControls.QueryExtender.Expressions\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: Expressions\n  nameWithType: QueryExtender.Expressions\n  fullName: System.Web.UI.WebControls.QueryExtender.Expressions\n- uid: System.Web.UI.WebControls.Expressions.DataSourceExpressionCollection\n  parent: System.Web.UI.WebControls.Expressions\n  isExternal: false\n  name: DataSourceExpressionCollection\n  nameWithType: DataSourceExpressionCollection\n  fullName: System.Web.UI.WebControls.Expressions.DataSourceExpressionCollection\n- uid: System.Web.UI.WebControls.QueryExtender.LoadViewState(System.Object)\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: LoadViewState(Object)\n  nameWithType: QueryExtender.LoadViewState(Object)\n  fullName: System.Web.UI.WebControls.QueryExtender.LoadViewState(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.UI.WebControls.QueryExtender.OnInit(System.EventArgs)\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: OnInit(EventArgs)\n  nameWithType: QueryExtender.OnInit(EventArgs)\n  fullName: System.Web.UI.WebControls.QueryExtender.OnInit(EventArgs)\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Web.UI.WebControls.QueryExtender.SaveViewState\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: SaveViewState()\n  nameWithType: QueryExtender.SaveViewState()\n  fullName: System.Web.UI.WebControls.QueryExtender.SaveViewState()\n- uid: System.Web.UI.WebControls.QueryExtender.TargetControlID\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: TargetControlID\n  nameWithType: QueryExtender.TargetControlID\n  fullName: System.Web.UI.WebControls.QueryExtender.TargetControlID\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.WebControls.QueryExtender.TrackViewState\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: TrackViewState()\n  nameWithType: QueryExtender.TrackViewState()\n  fullName: System.Web.UI.WebControls.QueryExtender.TrackViewState()\n- uid: System.Web.UI.WebControls.QueryExtender.#ctor*\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: QueryExtender\n  nameWithType: QueryExtender.QueryExtender\n- uid: System.Web.UI.WebControls.QueryExtender.DataSource*\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: DataSource\n  nameWithType: QueryExtender.DataSource\n- uid: System.Web.UI.WebControls.QueryExtender.Expressions*\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: Expressions\n  nameWithType: QueryExtender.Expressions\n- uid: System.Web.UI.WebControls.QueryExtender.LoadViewState*\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: LoadViewState\n  nameWithType: QueryExtender.LoadViewState\n- uid: System.Web.UI.WebControls.QueryExtender.OnInit*\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: OnInit\n  nameWithType: QueryExtender.OnInit\n- uid: System.Web.UI.WebControls.QueryExtender.SaveViewState*\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: SaveViewState\n  nameWithType: QueryExtender.SaveViewState\n- uid: System.Web.UI.WebControls.QueryExtender.TargetControlID*\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: TargetControlID\n  nameWithType: QueryExtender.TargetControlID\n- uid: System.Web.UI.WebControls.QueryExtender.TrackViewState*\n  parent: System.Web.UI.WebControls.QueryExtender\n  isExternal: false\n  name: TrackViewState\n  nameWithType: QueryExtender.TrackViewState\n"}