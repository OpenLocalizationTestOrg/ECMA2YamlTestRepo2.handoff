{"nodes":[{"pos":[418,925],"content":"Installs an instrumented assembly. To use this default project installer, simply derive a class from DefaultManagementInstaller inside the assembly. No methods need to be overridden.       Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.","needQuote":false,"needEscape":true,"nodes":[{"content":"Installs an instrumented assembly.","pos":[0,34]},{"content":"To use this default project installer, simply derive a class from DefaultManagementInstaller inside the assembly.","pos":[35,148]},{"content":"No methods need to be overridden.","pos":[149,182]},{"content":"Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.","pos":[189,382]},{"content":"The <bpt id=\"p1\">[</bpt>MI APIs<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx)</ept> should be used for all new development.","pos":[383,505],"source":" The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development."}]},{"pos":[938,1285],"content":"This class provides an interface for the standard installUtil installer in the .NET framework. Any assembly that contains Automation classes should include a class that is derived from this type. This will provide code that generates the schema of the automation objects, installs it into WMI, and creates the necessary provider registration code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class provides an interface for the standard installUtil installer in the .NET framework. Any assembly that contains Automation classes should include a class that is derived from this type. This will provide code that generates the schema of the automation objects, installs it into WMI, and creates the necessary provider registration code.","pos":[0,347],"nodes":[{"content":"This class provides an interface for the standard installUtil installer in the .NET framework.","pos":[0,94]},{"content":"Any assembly that contains Automation classes should include a class that is derived from this type.","pos":[95,195]},{"content":"This will provide code that generates the schema of the automation objects, installs it into WMI, and creates the necessary provider registration code.","pos":[196,347]}]}]},{"pos":[5028,5183],"content":"Initializes a new instance of the <xref href=\"System.Management.Instrumentation.DefaultManagementInstaller\"></xref> class. This is the default constructor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Management.Instrumentation.DefaultManagementInstaller\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","pos":[0,122],"source":"Initializes a new instance of the <xref href=\"System.Management.Instrumentation.DefaultManagementInstaller\"></xref> class."},{"content":"This is the default constructor.","pos":[123,155]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Management.Instrumentation.DefaultManagementInstaller\n  id: DefaultManagementInstaller\n  children:\n  - System.Management.Instrumentation.DefaultManagementInstaller.#ctor\n  langs:\n  - csharp\n  name: DefaultManagementInstaller\n  nameWithType: DefaultManagementInstaller\n  fullName: System.Management.Instrumentation.DefaultManagementInstaller\n  type: Class\n  summary: \"Installs an instrumented assembly. To use this default project installer, simply derive a class from DefaultManagementInstaller inside the assembly. No methods need to be overridden.  \\n  \\n Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.\"\n  remarks: This class provides an interface for the standard installUtil installer in the .NET framework. Any assembly that contains Automation classes should include a class that is derived from this type. This will provide code that generates the schema of the automation objects, installs it into WMI, and creates the necessary provider registration code.\n  example:\n  - \"The following example shows how to derive a class from the DefaultManagementInstaller class to install a WMI provider.  \\n  \\n [C#]  \\n  \\n```  \\n// This is the installer class that installs an instrumented assembly.  \\n// To use the default project installer, simply derive a class from  \\n// DefaultManagementInstaller.  No methods need to be overridden.  \\n[System.ComponentModel.RunInstaller(true)]  \\npublic class TheInstaller : DefaultManagementInstaller  \\n{ }  \\n```\"\n  syntax:\n    content: 'public class DefaultManagementInstaller : System.Configuration.Install.Installer'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Configuration.Install.Installer\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Dispose(System.Boolean)\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Configuration.Install.Installer.AfterInstall\n  - System.Configuration.Install.Installer.AfterRollback\n  - System.Configuration.Install.Installer.AfterUninstall\n  - System.Configuration.Install.Installer.BeforeInstall\n  - System.Configuration.Install.Installer.BeforeRollback\n  - System.Configuration.Install.Installer.BeforeUninstall\n  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Committed\n  - System.Configuration.Install.Installer.Committing\n  - System.Configuration.Install.Installer.Context\n  - System.Configuration.Install.Installer.HelpText\n  - System.Configuration.Install.Installer.Install(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Installers\n  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Parent\n  - System.Configuration.Install.Installer.Rollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Management.Instrumentation.DefaultManagementInstaller.#ctor\n  id: '#ctor'\n  parent: System.Management.Instrumentation.DefaultManagementInstaller\n  langs:\n  - csharp\n  name: DefaultManagementInstaller()\n  nameWithType: DefaultManagementInstaller.DefaultManagementInstaller()\n  fullName: System.Management.Instrumentation.DefaultManagementInstaller.DefaultManagementInstaller()\n  type: Constructor\n  assemblies:\n  - System.Management.Instrumentation\n  namespace: System.Management.Instrumentation\n  summary: Initializes a new instance of the <xref href=\"System.Management.Instrumentation.DefaultManagementInstaller\"></xref> class. This is the default constructor.\n  syntax:\n    content: public DefaultManagementInstaller ();\n    parameters: []\n  overload: System.Management.Instrumentation.DefaultManagementInstaller.#ctor*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.Install.Installer\n  isExternal: false\n  name: System.Configuration.Install.Installer\n- uid: System.Management.Instrumentation.DefaultManagementInstaller.#ctor\n  parent: System.Management.Instrumentation.DefaultManagementInstaller\n  isExternal: false\n  name: DefaultManagementInstaller()\n  nameWithType: DefaultManagementInstaller.DefaultManagementInstaller()\n  fullName: System.Management.Instrumentation.DefaultManagementInstaller.DefaultManagementInstaller()\n- uid: System.Management.Instrumentation.DefaultManagementInstaller.#ctor*\n  parent: System.Management.Instrumentation.DefaultManagementInstaller\n  isExternal: false\n  name: DefaultManagementInstaller\n  nameWithType: DefaultManagementInstaller.DefaultManagementInstaller\n"}