{"nodes":[{"pos":[409,531],"content":"[Supported in the .NET Framework 4.5.1 and later versions]       Listens for <ph id=\"ph1\">`GL_STOP_LISTENING`</ph> notifications from IIS.","needQuote":false,"needEscape":true,"source":"[Supported in the .NET Framework 4.5.1 and later versions]       Listens for `GL_STOP_LISTENING` notifications from IIS."},{"pos":[544,1415],"content":"You can implement the IStopListeningRegisteredObject interface by passing an object to the <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A> method. The passed object listens for `GL_STOP_LISTENING` notifications from IIS. You can call this implementation when ASP.NET receives a `GL_STOP_LISTENING` notification from IIS, which signals that IIS is no longer listening for new requests for this application. The web server can allow requests that are in progress to run to completion. If your application processes long running requests, you might want to have the application listen for these IIS notifications to gracefully wind down the request. The <xref:System.Web.Hosting.IStopListeningRegisteredObject.StopListening%2A> method contrasts with the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method, which signals immediate application shutdown.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can implement the IStopListeningRegisteredObject interface by passing an object to the &lt;xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A&gt; method.","pos":[0,161],"source":"You can implement the IStopListeningRegisteredObject interface by passing an object to the <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A> method."},{"content":"The passed object listens for <ph id=\"ph1\">`GL_STOP_LISTENING`</ph> notifications from IIS.","pos":[162,235],"source":" The passed object listens for `GL_STOP_LISTENING` notifications from IIS."},{"content":"You can call this implementation when ASP.NET receives a <ph id=\"ph1\">`GL_STOP_LISTENING`</ph> notification from IIS, which signals that IIS is no longer listening for new requests for this application.","pos":[236,420],"source":" You can call this implementation when ASP.NET receives a `GL_STOP_LISTENING` notification from IIS, which signals that IIS is no longer listening for new requests for this application."},{"content":"The web server can allow requests that are in progress to run to completion.","pos":[421,497]},{"content":"If your application processes long running requests, you might want to have the application listen for these IIS notifications to gracefully wind down the request.","pos":[498,661]},{"content":"The &lt;xref:System.Web.Hosting.IStopListeningRegisteredObject.StopListening%2A&gt; method contrasts with the &lt;xref:System.Web.Hosting.IRegisteredObject.Stop%2A&gt; method, which signals immediate application shutdown.","pos":[662,871],"source":" The <xref:System.Web.Hosting.IStopListeningRegisteredObject.StopListening%2A> method contrasts with the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method, which signals immediate application shutdown."}]},{"pos":[2030,2130],"content":"[Supported in the .NET Framework 4.5.1 and later versions]       Stops listening for new requests.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]       Stops listening for new requests.","pos":[0,98]}]},{"pos":[2144,2808],"content":"The StopListening method is supported only when running in IIS integrated mode. The ASP.NET runtime does not guarantee that the StopListening method will ever fire.       The StopListening method must not throw exceptions, otherwise the behavior is undefined and the process will likely be terminated. Further, to avoid creating deadlocks, the StopListening method should not block execution.      > [!IMPORTANT] >  In many applications the StopListening method can run at the same time as the <xref:System.AppDomain.Unload%2A> method.  If <xref:System.AppDomain> unload occurs, the StopListening method might be forcibly aborted before it finishes executing.","needQuote":false,"needEscape":true,"nodes":[{"content":"The StopListening method is supported only when running in IIS integrated mode.","pos":[0,79]},{"content":"The ASP.NET runtime does not guarantee that the StopListening method will ever fire.","pos":[80,164]},{"content":"The StopListening method must not throw exceptions, otherwise the behavior is undefined and the process will likely be terminated.","pos":[171,301]},{"content":"Further, to avoid creating deadlocks, the StopListening method should not block execution.","pos":[302,392]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  In many applications the StopListening method can run at the same time as the &lt;xref:System.AppDomain.Unload%2A&gt; method.","pos":[398,535],"source":"      > [!IMPORTANT] >  In many applications the StopListening method can run at the same time as the <xref:System.AppDomain.Unload%2A> method."},{"content":"If &lt;xref:System.AppDomain&gt; unload occurs, the StopListening method might be forcibly aborted before it finishes executing.","pos":[537,659],"source":"  If <xref:System.AppDomain> unload occurs, the StopListening method might be forcibly aborted before it finishes executing."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Hosting.IStopListeningRegisteredObject\n  id: IStopListeningRegisteredObject\n  children:\n  - System.Web.Hosting.IStopListeningRegisteredObject.StopListening\n  langs:\n  - csharp\n  name: IStopListeningRegisteredObject\n  nameWithType: IStopListeningRegisteredObject\n  fullName: System.Web.Hosting.IStopListeningRegisteredObject\n  type: Interface\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Listens for `GL_STOP_LISTENING` notifications from IIS.\"\n  remarks: You can implement the IStopListeningRegisteredObject interface by passing an object to the <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A> method. The passed object listens for `GL_STOP_LISTENING` notifications from IIS. You can call this implementation when ASP.NET receives a `GL_STOP_LISTENING` notification from IIS, which signals that IIS is no longer listening for new requests for this application. The web server can allow requests that are in progress to run to completion. If your application processes long running requests, you might want to have the application listen for these IIS notifications to gracefully wind down the request. The <xref:System.Web.Hosting.IStopListeningRegisteredObject.StopListening%2A> method contrasts with the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method, which signals immediate application shutdown.\n  syntax:\n    content: 'public interface IStopListeningRegisteredObject : System.Web.Hosting.IRegisteredObject'\n  implements:\n  - System.Web.Hosting.IRegisteredObject\n  platform:\n  - net462\n- uid: System.Web.Hosting.IStopListeningRegisteredObject.StopListening\n  id: StopListening\n  parent: System.Web.Hosting.IStopListeningRegisteredObject\n  langs:\n  - csharp\n  name: StopListening()\n  nameWithType: IStopListeningRegisteredObject.StopListening()\n  fullName: System.Web.Hosting.IStopListeningRegisteredObject.StopListening()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Stops listening for new requests.\"\n  remarks: \"The StopListening method is supported only when running in IIS integrated mode. The ASP.NET runtime does not guarantee that the StopListening method will ever fire.  \\n  \\n The StopListening method must not throw exceptions, otherwise the behavior is undefined and the process will likely be terminated. Further, to avoid creating deadlocks, the StopListening method should not block execution.  \\n  \\n> [!IMPORTANT]\\n>  In many applications the StopListening method can run at the same time as the <xref:System.AppDomain.Unload%2A> method.  If <xref:System.AppDomain> unload occurs, the StopListening method might be forcibly aborted before it finishes executing.\"\n  syntax:\n    content: public void StopListening ();\n    parameters: []\n  overload: System.Web.Hosting.IStopListeningRegisteredObject.StopListening*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.Hosting.IStopListeningRegisteredObject.StopListening\n  parent: System.Web.Hosting.IStopListeningRegisteredObject\n  isExternal: false\n  name: StopListening()\n  nameWithType: IStopListeningRegisteredObject.StopListening()\n  fullName: System.Web.Hosting.IStopListeningRegisteredObject.StopListening()\n- uid: System.Web.Hosting.IStopListeningRegisteredObject.StopListening*\n  parent: System.Web.Hosting.IStopListeningRegisteredObject\n  isExternal: false\n  name: StopListening\n  nameWithType: IStopListeningRegisteredObject.StopListening\n"}