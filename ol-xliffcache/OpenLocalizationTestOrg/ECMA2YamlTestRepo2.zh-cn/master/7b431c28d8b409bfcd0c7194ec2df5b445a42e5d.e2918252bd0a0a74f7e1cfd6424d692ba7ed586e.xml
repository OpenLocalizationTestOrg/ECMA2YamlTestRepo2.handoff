{"nodes":[{"pos":[352,449],"content":"Determines how ASP.NET data source controls handle data conflicts when updating or deleting data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines how ASP.NET data source controls handle data conflicts when updating or deleting data.","pos":[0,97]}]},{"pos":[462,2075],"content":"Concurrency control is a technique that data stores use to control how data is read and changed in the store when multiple clients are accessing and manipulating the same data. For example, one client reads data and presents it to a user, while another client reads the same data, and presents it to a different user. If both users update the data and submit it to the data storage, some unexpected result might occur, because the clients might update different values for the same data. This is considered a conflict.       The `ConflictDetection` property that is defined for ASP.NET data source controls is used to determine how a control handles data conflicts in the underlying data storage when the underlying data storage is using optimistic concurrency and a delete or update operation is performed.       By default, the `ConflictDetection` property is set to OverwriteChanges, which means the data source control will overwrite any changes made to a data row between the time the data source control first read data from the row and the time that the row is updated. The primary key is used for locating the data row that will be updated or deleted, but no other comparison of the data is performed. If the data source control is configured to use the CompareAllValues option, however, the control passes the original data in the `oldValues` collections of the `Update` and `Delete` methods so that you can write logic to update or delete data only if these values match the values currently in the data storage. The matching values indicate that the data has not changed since the time it was read.","needQuote":false,"needEscape":true,"nodes":[{"content":"Concurrency control is a technique that data stores use to control how data is read and changed in the store when multiple clients are accessing and manipulating the same data.","pos":[0,176]},{"content":"For example, one client reads data and presents it to a user, while another client reads the same data, and presents it to a different user.","pos":[177,317]},{"content":"If both users update the data and submit it to the data storage, some unexpected result might occur, because the clients might update different values for the same data.","pos":[318,487]},{"content":"This is considered a conflict.","pos":[488,518]},{"content":"The <ph id=\"ph1\">`ConflictDetection`</ph> property that is defined for ASP.NET data source controls is used to determine how a control handles data conflicts in the underlying data storage when the underlying data storage is using optimistic concurrency and a delete or update operation is performed.","pos":[525,807],"source":"       The `ConflictDetection` property that is defined for ASP.NET data source controls is used to determine how a control handles data conflicts in the underlying data storage when the underlying data storage is using optimistic concurrency and a delete or update operation is performed."},{"content":"By default, the <ph id=\"ph1\">`ConflictDetection`</ph> property is set to OverwriteChanges, which means the data source control will overwrite any changes made to a data row between the time the data source control first read data from the row and the time that the row is updated.","pos":[814,1076],"source":"       By default, the `ConflictDetection` property is set to OverwriteChanges, which means the data source control will overwrite any changes made to a data row between the time the data source control first read data from the row and the time that the row is updated."},{"content":"The primary key is used for locating the data row that will be updated or deleted, but no other comparison of the data is performed.","pos":[1077,1209]},{"content":"If the data source control is configured to use the CompareAllValues option, however, the control passes the original data in the <ph id=\"ph1\">`oldValues`</ph> collections of the <ph id=\"ph2\">`Update`</ph> and <ph id=\"ph3\">`Delete`</ph> methods so that you can write logic to update or delete data only if these values match the values currently in the data storage.","pos":[1210,1522],"source":" If the data source control is configured to use the CompareAllValues option, however, the control passes the original data in the `oldValues` collections of the `Update` and `Delete` methods so that you can write logic to update or delete data only if these values match the values currently in the data storage."},{"content":"The matching values indicate that the data has not changed since the time it was read.","pos":[1523,1609]}]},{"pos":[2533,2813],"content":"A data source control uses the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldValues</ph><ept id=\"p1\">&lt;/code&gt;</ept> collection of the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> methods to determine whether the data has been changed by another process.","needQuote":true,"needEscape":true,"source":"A data source control uses the <code>oldValues</code> collection of the <xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"></xref> and <xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"></xref> methods to determine whether the data has been changed by another process."},{"pos":[2927,2939],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3331,3421],"content":"A data source control overwrites all values in a data row with its own values for the row.","needQuote":true,"needEscape":true,"nodes":[{"content":"A data source control overwrites all values in a data row with its own values for the row.","pos":[0,90]}]},{"pos":[3535,3547],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.ConflictOptions\n  id: ConflictOptions\n  children:\n  - System.Web.UI.ConflictOptions.CompareAllValues\n  - System.Web.UI.ConflictOptions.OverwriteChanges\n  langs:\n  - csharp\n  name: ConflictOptions\n  nameWithType: ConflictOptions\n  fullName: System.Web.UI.ConflictOptions\n  type: Enum\n  summary: Determines how ASP.NET data source controls handle data conflicts when updating or deleting data.\n  remarks: \"Concurrency control is a technique that data stores use to control how data is read and changed in the store when multiple clients are accessing and manipulating the same data. For example, one client reads data and presents it to a user, while another client reads the same data, and presents it to a different user. If both users update the data and submit it to the data storage, some unexpected result might occur, because the clients might update different values for the same data. This is considered a conflict.  \\n  \\n The `ConflictDetection` property that is defined for ASP.NET data source controls is used to determine how a control handles data conflicts in the underlying data storage when the underlying data storage is using optimistic concurrency and a delete or update operation is performed.  \\n  \\n By default, the `ConflictDetection` property is set to OverwriteChanges, which means the data source control will overwrite any changes made to a data row between the time the data source control first read data from the row and the time that the row is updated. The primary key is used for locating the data row that will be updated or deleted, but no other comparison of the data is performed. If the data source control is configured to use the CompareAllValues option, however, the control passes the original data in the `oldValues` collections of the `Update` and `Delete` methods so that you can write logic to update or delete data only if these values match the values currently in the data storage. The matching values indicate that the data has not changed since the time it was read.\"\n  syntax:\n    content: public enum ConflictOptions\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Web.UI.ConflictOptions.CompareAllValues\n  id: CompareAllValues\n  parent: System.Web.UI.ConflictOptions\n  langs:\n  - csharp\n  name: CompareAllValues\n  nameWithType: ConflictOptions.CompareAllValues\n  fullName: System.Web.UI.ConflictOptions.CompareAllValues\n  type: Field\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: A data source control uses the <code>oldValues</code> collection of the <xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"></xref> and <xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"></xref> methods to determine whether the data has been changed by another process.\n  syntax:\n    content: CompareAllValues\n    return:\n      type: System.Web.UI.ConflictOptions\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ConflictOptions.OverwriteChanges\n  id: OverwriteChanges\n  parent: System.Web.UI.ConflictOptions\n  langs:\n  - csharp\n  name: OverwriteChanges\n  nameWithType: ConflictOptions.OverwriteChanges\n  fullName: System.Web.UI.ConflictOptions.OverwriteChanges\n  type: Field\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: A data source control overwrites all values in a data row with its own values for the row.\n  syntax:\n    content: OverwriteChanges\n    return:\n      type: System.Web.UI.ConflictOptions\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Web.UI.ConflictOptions.CompareAllValues\n  parent: System.Web.UI.ConflictOptions\n  isExternal: false\n  name: CompareAllValues\n  nameWithType: ConflictOptions.CompareAllValues\n  fullName: System.Web.UI.ConflictOptions.CompareAllValues\n- uid: System.Web.UI.ConflictOptions\n  parent: System.Web.UI\n  isExternal: false\n  name: ConflictOptions\n  nameWithType: ConflictOptions\n  fullName: System.Web.UI.ConflictOptions\n- uid: System.Web.UI.ConflictOptions.OverwriteChanges\n  parent: System.Web.UI.ConflictOptions\n  isExternal: false\n  name: OverwriteChanges\n  nameWithType: ConflictOptions.OverwriteChanges\n  fullName: System.Web.UI.ConflictOptions.OverwriteChanges\n"}