{"nodes":[{"pos":[1624,1924],"content":"Implements <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IDictionary\" name=\"IDictionary\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by using a <bpt id=\"p2\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> while the collection is small, and then switching to a <bpt id=\"p3\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> when the collection gets large.","needQuote":true,"needEscape":true,"source":"Implements <xref uid=\"langword_csharp_IDictionary\" name=\"IDictionary\" href=\"\"></xref> by using a <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> while the collection is small, and then switching to a <xref href=\"System.Collections.Hashtable\"></xref> when the collection gets large."},{"pos":[1937,4275],"content":"This class is recommended for cases where the number of elements in a dictionary is unknown. It takes advantage of the improved performance of a <xref:System.Collections.Specialized.ListDictionary> with small collections, and offers the flexibility of switching to a <xref:System.Collections.Hashtable> which handles larger collections better than <xref:System.Collections.Specialized.ListDictionary>.       If the initial size of the collection is greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection is stored in a <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Specialized.ListDictionary> to a <xref:System.Collections.Hashtable>.       The constructor accepts a Boolean parameter that allows the user to specify whether the collection ignores the case when comparing strings. If the collection is case-sensitive, it uses the key's implementations of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName>. If the collection is case-insensitive, it performs a simple ordinal case-insensitive comparison, which obeys the casing rules of the invariant culture only. By default, the collection is case-sensitive. For more information on the invariant culture, see <xref:System.Globalization.CultureInfo?displayProperty=fullName>.       A key cannot be null, but a value can.       The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the HybridDictionary is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:       [!code-cpp[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/cpp/t-system.collections.spe_3_1.cpp)]  [!code-cs[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/csharp/t-system.collections.spe_3_1.cs)]  [!code-vb[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/visualbasic/t-system.collections.spe_3_1.vb)]       The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"This class is recommended for cases where the number of elements in a dictionary is unknown.","pos":[0,92]},{"content":"It takes advantage of the improved performance of a &lt;xref:System.Collections.Specialized.ListDictionary&gt; with small collections, and offers the flexibility of switching to a &lt;xref:System.Collections.Hashtable&gt; which handles larger collections better than &lt;xref:System.Collections.Specialized.ListDictionary&gt;.","pos":[93,401],"source":" It takes advantage of the improved performance of a <xref:System.Collections.Specialized.ListDictionary> with small collections, and offers the flexibility of switching to a <xref:System.Collections.Hashtable> which handles larger collections better than <xref:System.Collections.Specialized.ListDictionary>."},{"content":"If the initial size of the collection is greater than the optimal size for a &lt;xref:System.Collections.Specialized.ListDictionary&gt;, the collection is stored in a &lt;xref:System.Collections.Hashtable&gt; to avoid the overhead of copying elements from the &lt;xref:System.Collections.Specialized.ListDictionary&gt; to a &lt;xref:System.Collections.Hashtable&gt;.","pos":[408,750],"source":"       If the initial size of the collection is greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection is stored in a <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Specialized.ListDictionary> to a <xref:System.Collections.Hashtable>."},{"content":"The constructor accepts a Boolean parameter that allows the user to specify whether the collection ignores the case when comparing strings.","pos":[757,896]},{"content":"If the collection is case-sensitive, it uses the key's implementations of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[897,1092],"source":" If the collection is case-sensitive, it uses the key's implementations of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"If the collection is case-insensitive, it performs a simple ordinal case-insensitive comparison, which obeys the casing rules of the invariant culture only.","pos":[1093,1249]},{"content":"By default, the collection is case-sensitive.","pos":[1250,1295]},{"content":"For more information on the invariant culture, see &lt;xref:System.Globalization.CultureInfo?displayProperty=fullName&gt;.","pos":[1296,1412],"source":" For more information on the invariant culture, see <xref:System.Globalization.CultureInfo?displayProperty=fullName>."},{"content":"A key cannot be null, but a value can.","pos":[1419,1457]},{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.","pos":[1464,1600],"source":"       The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection."},{"content":"Since each element of the HybridDictionary is a key/value pair, the element type is not the type of the key or the type of the value.","pos":[1601,1734]},{"content":"Instead, the element type is &lt;xref:System.Collections.DictionaryEntry&gt;.","pos":[1735,1806],"source":" Instead, the element type is <xref:System.Collections.DictionaryEntry>."},{"content":"For example:       <bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Collections.Specialized.HybridDictionary2#2<ept id=\"p2\">](~/add/codesnippet/cpp/t-system.collections.spe_3_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Collections.Specialized.HybridDictionary2#2<ept id=\"p4\">](~/add/codesnippet/csharp/t-system.collections.spe_3_1.cs)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Collections.Specialized.HybridDictionary2#2<ept id=\"p6\">](~/add/codesnippet/visualbasic/t-system.collections.spe_3_1.vb)</ept><ept id=\"p5\">]</ept>       The <ph id=\"ph1\">`foreach`</ph> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.","pos":[1807,2324],"source":" For example:       [!code-cpp[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/cpp/t-system.collections.spe_3_1.cpp)]  [!code-cs[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/csharp/t-system.collections.spe_3_1.cs)]  [!code-vb[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/visualbasic/t-system.collections.spe_3_1.vb)]       The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection."}]},{"pos":[5399,5500],"content":"Creates an empty case-sensitive <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates an empty case-sensitive <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[5513,5979],"content":"By default, the collection is case-sensitive and uses the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> as the hash code provider and the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName> as the comparer.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.HybridDictionary> must be unique.       This constructor is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the collection is case-sensitive and uses the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> as the hash code provider and the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName> as the comparer.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.HybridDictionary> must be unique.       This constructor is an O(1) operation.","pos":[0,462],"nodes":[{"content":"By default, the collection is case-sensitive and uses the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; as the hash code provider and the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; as the comparer.","pos":[0,273],"source":"By default, the collection is case-sensitive and uses the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> as the hash code provider and the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName> as the comparer."},{"content":"The comparer determines whether two keys are equal.","pos":[280,331]},{"content":"Every key in a &lt;xref:System.Collections.Specialized.HybridDictionary&gt; must be unique.","pos":[332,417],"source":" Every key in a <xref:System.Collections.Specialized.HybridDictionary> must be unique."},{"content":"This constructor is an O(1) operation.","pos":[424,462]}]}]},{"pos":[7155,7277],"content":"Creates an empty <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified case sensitivity.","needQuote":true,"needEscape":true,"source":"Creates an empty <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> with the specified case sensitivity."},{"pos":[7290,7819],"content":"If `caseInsensitive` is `false`, the collection uses the key's implementations of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName>. If `caseInsensitive` is `true`, the collection performs a simple ordinal case-insensitive comparison, which obeys the casing rules of the invariant culture only. For more information on the invariant culture, see <xref:System.Globalization.CultureInfo?displayProperty=fullName>.       This constructor is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"If <ph id=\"ph1\">`caseInsensitive`</ph> is <ph id=\"ph2\">`false`</ph>, the collection uses the key's implementations of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[0,203],"source":"If `caseInsensitive` is `false`, the collection uses the key's implementations of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"If <ph id=\"ph1\">`caseInsensitive`</ph> is <ph id=\"ph2\">`true`</ph>, the collection performs a simple ordinal case-insensitive comparison, which obeys the casing rules of the invariant culture only.","pos":[204,365],"source":" If `caseInsensitive` is `true`, the collection performs a simple ordinal case-insensitive comparison, which obeys the casing rules of the invariant culture only."},{"content":"For more information on the invariant culture, see &lt;xref:System.Globalization.CultureInfo?displayProperty=fullName&gt;.","pos":[366,482],"source":" For more information on the invariant culture, see <xref:System.Globalization.CultureInfo?displayProperty=fullName>."},{"content":"This constructor is an O(1) operation.","pos":[489,527]}]},{"pos":[7980,8104],"content":"A Boolean that denotes whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is case-insensitive.","needQuote":true,"needEscape":true,"source":"A Boolean that denotes whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> is case-insensitive."},{"pos":[8666,8792],"content":"Creates a case-sensitive <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified initial size.","needQuote":true,"needEscape":true,"source":"Creates a case-sensitive <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> with the specified initial size."},{"pos":[8805,9654],"content":"If the initial size of the collection is greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection is stored in a <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Specialized.ListDictionary> to the <xref:System.Collections.Hashtable>.       By default, the collection is case-sensitive and uses the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> as the hash code provider and the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName> as the comparer.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.HybridDictionary> must be unique.       This constructor is an O(`n`) operation, where `n` is `initialSize`.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the initial size of the collection is greater than the optimal size for a &lt;xref:System.Collections.Specialized.ListDictionary&gt;, the collection is stored in a &lt;xref:System.Collections.Hashtable&gt; to avoid the overhead of copying elements from the &lt;xref:System.Collections.Specialized.ListDictionary&gt; to the &lt;xref:System.Collections.Hashtable&gt;.","pos":[0,344],"source":"If the initial size of the collection is greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection is stored in a <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Specialized.ListDictionary> to the <xref:System.Collections.Hashtable>."},{"content":"By default, the collection is case-sensitive and uses the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; as the hash code provider and the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; as the comparer.","pos":[351,624],"source":"       By default, the collection is case-sensitive and uses the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> as the hash code provider and the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName> as the comparer."},{"content":"The comparer determines whether two keys are equal.","pos":[631,682]},{"content":"Every key in a &lt;xref:System.Collections.Specialized.HybridDictionary&gt; must be unique.","pos":[683,768],"source":" Every key in a <xref:System.Collections.Specialized.HybridDictionary> must be unique."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`initialSize`</ph>.","pos":[775,843],"source":"       This constructor is an O(`n`) operation, where `n` is `initialSize`."}]},{"pos":[9804,9938],"content":"The approximate number of entries that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can initially contain.","needQuote":true,"needEscape":true,"source":"The approximate number of entries that the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> can initially contain."},{"pos":[10554,10686],"content":"Creates a <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified initial size and case sensitivity.","needQuote":true,"needEscape":true,"source":"Creates a <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> with the specified initial size and case sensitivity."},{"pos":[10699,11611],"content":"If the initial size of the collection is greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection is stored in a <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Specialized.ListDictionary> to the <xref:System.Collections.Hashtable>.       If `caseInsensitive` is `false`, the collection uses the key's implementations of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName>. If `caseInsensitive` is `true`, the collection performs a simple ordinal case-insensitive comparison, which obeys the casing rules of the invariant culture only. For more information on the invariant culture, see <xref:System.Globalization.CultureInfo?displayProperty=fullName>.       This constructor is an O(`n`) operation, where `n` is `initialSize`.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the initial size of the collection is greater than the optimal size for a &lt;xref:System.Collections.Specialized.ListDictionary&gt;, the collection is stored in a &lt;xref:System.Collections.Hashtable&gt; to avoid the overhead of copying elements from the &lt;xref:System.Collections.Specialized.ListDictionary&gt; to the &lt;xref:System.Collections.Hashtable&gt;.","pos":[0,344],"source":"If the initial size of the collection is greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection is stored in a <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Specialized.ListDictionary> to the <xref:System.Collections.Hashtable>."},{"content":"If <ph id=\"ph1\">`caseInsensitive`</ph> is <ph id=\"ph2\">`false`</ph>, the collection uses the key's implementations of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[351,554],"source":"       If `caseInsensitive` is `false`, the collection uses the key's implementations of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"If <ph id=\"ph1\">`caseInsensitive`</ph> is <ph id=\"ph2\">`true`</ph>, the collection performs a simple ordinal case-insensitive comparison, which obeys the casing rules of the invariant culture only.","pos":[555,716],"source":" If `caseInsensitive` is `true`, the collection performs a simple ordinal case-insensitive comparison, which obeys the casing rules of the invariant culture only."},{"content":"For more information on the invariant culture, see &lt;xref:System.Globalization.CultureInfo?displayProperty=fullName&gt;.","pos":[717,833],"source":" For more information on the invariant culture, see <xref:System.Globalization.CultureInfo?displayProperty=fullName>."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`initialSize`</ph>.","pos":[840,908],"source":"       This constructor is an O(`n`) operation, where `n` is `initialSize`."}]},{"pos":[11783,11917],"content":"The approximate number of entries that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can initially contain.","needQuote":true,"needEscape":true,"source":"The approximate number of entries that the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> can initially contain."},{"pos":[11990,12114],"content":"A Boolean that denotes whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is case-insensitive.","needQuote":true,"needEscape":true,"source":"A Boolean that denotes whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> is case-insensitive."},{"pos":[12680,12805],"content":"Adds an entry with the specified key and value into the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds an entry with the specified key and value into the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[12818,14239],"content":"An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.       A key cannot be `null`, but a value can.       You can also use the <xref:System.Collections.Specialized.HybridDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.HybridDictionary>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.HybridDictionary>, setting the <xref:System.Collections.Specialized.HybridDictionary.Item%2A> property overwrites the old value. In contrast, the Add method does not modify existing elements.       When the number of elements becomes greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the elements are copied from the <xref:System.Collections.Specialized.ListDictionary> to a <xref:System.Collections.Hashtable>. However, this only happens once. If the collection is already stored in a <xref:System.Collections.Hashtable> and the number of elements falls below the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection remains in the <xref:System.Collections.Hashtable>.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"An object that has no correlation between its state and its hash code value should typically not be used as the key.","pos":[0,116]},{"content":"For example, String objects are better than StringBuilder objects for use as keys.","pos":[117,199]},{"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can.","pos":[206,246],"source":"       A key cannot be `null`, but a value can."},{"content":"You can also use the &lt;xref:System.Collections.Specialized.HybridDictionary.Item%2A&gt; property to add new elements by setting the value of a key that does not exist in the &lt;xref:System.Collections.Specialized.HybridDictionary&gt;; for example, <ph id=\"ph1\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>.","pos":[253,537],"source":"       You can also use the <xref:System.Collections.Specialized.HybridDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.HybridDictionary>; for example, `myCollection[\"myNonexistentKey\"] = myValue`."},{"content":"However, if the specified key already exists in the &lt;xref:System.Collections.Specialized.HybridDictionary&gt;, setting the &lt;xref:System.Collections.Specialized.HybridDictionary.Item%2A&gt; property overwrites the old value.","pos":[538,755],"source":" However, if the specified key already exists in the <xref:System.Collections.Specialized.HybridDictionary>, setting the <xref:System.Collections.Specialized.HybridDictionary.Item%2A> property overwrites the old value."},{"content":"In contrast, the Add method does not modify existing elements.","pos":[756,818]},{"content":"When the number of elements becomes greater than the optimal size for a &lt;xref:System.Collections.Specialized.ListDictionary&gt;, the elements are copied from the &lt;xref:System.Collections.Specialized.ListDictionary&gt; to a &lt;xref:System.Collections.Hashtable&gt;.","pos":[825,1078],"source":"       When the number of elements becomes greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the elements are copied from the <xref:System.Collections.Specialized.ListDictionary> to a <xref:System.Collections.Hashtable>."},{"content":"However, this only happens once.","pos":[1079,1111]},{"content":"If the collection is already stored in a &lt;xref:System.Collections.Hashtable&gt; and the number of elements falls below the optimal size for a &lt;xref:System.Collections.Specialized.ListDictionary&gt;, the collection remains in the &lt;xref:System.Collections.Hashtable&gt;.","pos":[1112,1371],"source":" If the collection is already stored in a <xref:System.Collections.Hashtable> and the number of elements falls below the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection remains in the <xref:System.Collections.Hashtable>."},{"content":"This method is an O(1) operation.","pos":[1378,1411]}]},{"pos":[14919,14947],"content":"The key of the entry to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the entry to add.","pos":[0,28]}]},{"pos":[15009,15118],"content":"The value of the entry to add. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the entry to add.","pos":[0,30]},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[31,109],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[15300,15381],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15476,15594],"content":"An entry with the same key already exists in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An entry with the same key already exists in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[15989,16087],"content":"Removes all entries from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes all entries from the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[16100,16537],"content":"<xref:System.Collections.Specialized.HybridDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.       If the collection is already stored in a <xref:System.Collections.Hashtable>, the collection remains in the <xref:System.Collections.Hashtable>.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.HybridDictionary.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Collections.Specialized.HybridDictionary.Count%2A&gt; is set to zero, and references to other objects from elements of the collection are also released.","pos":[0,162],"source":"<xref:System.Collections.Specialized.HybridDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released."},{"content":"If the collection is already stored in a &lt;xref:System.Collections.Hashtable&gt;, the collection remains in the &lt;xref:System.Collections.Hashtable&gt;.","pos":[169,313],"source":"       If the collection is already stored in a <xref:System.Collections.Hashtable>, the collection remains in the <xref:System.Collections.Hashtable>."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.HybridDictionary.Count%2A&gt;.","pos":[320,433],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.HybridDictionary.Count%2A>."}]},{"pos":[17689,17805],"content":"Determines whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contains a specific key.","needQuote":true,"needEscape":true,"source":"Determines whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> contains a specific key."},{"pos":[17818,18295],"content":"This method is an O(1) operation.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]},{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id=\"ph1\">`key`</ph> to determine whether <ph id=\"ph2\">`item`</ph> exists.","pos":[40,247],"source":"       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id=\"ph1\">`item`</ph> parameter on the objects in the collection.","pos":[248,475],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]},{"pos":[18965,19059],"content":"The key to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The key to locate in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[19118,19371],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> contains an entry with the specified key; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> contains an entry with the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19558,19639],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[20126,20287],"content":"Copies the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> entries to a one-dimensional &lt;xref:System.Array&gt; instance at the specified index.","needQuote":true,"needEscape":true,"source":"Copies the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> entries to a one-dimensional <xref:System.Array> instance at the specified index."},{"pos":[20300,20853],"content":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.HybridDictionary>.       To copy only the keys in the <xref:System.Collections.Specialized.HybridDictionary>, use `HybridDictionary.Keys.CopyTo`.       To copy only the values in the <xref:System.Collections.Specialized.HybridDictionary>, use `HybridDictionary.Values.CopyTo`.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.HybridDictionary.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The elements are copied to the &lt;xref:System.Array&gt; in the same order in which the enumerator iterates through the &lt;xref:System.Collections.Specialized.HybridDictionary&gt;.","pos":[0,169],"source":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.HybridDictionary>."},{"content":"To copy only the keys in the &lt;xref:System.Collections.Specialized.HybridDictionary&gt;, use <ph id=\"ph1\">`HybridDictionary.Keys.CopyTo`</ph>.","pos":[176,296],"source":"       To copy only the keys in the <xref:System.Collections.Specialized.HybridDictionary>, use `HybridDictionary.Keys.CopyTo`."},{"content":"To copy only the values in the &lt;xref:System.Collections.Specialized.HybridDictionary&gt;, use <ph id=\"ph1\">`HybridDictionary.Values.CopyTo`</ph>.","pos":[303,427],"source":"       To copy only the values in the <xref:System.Collections.Specialized.HybridDictionary>, use `HybridDictionary.Values.CopyTo`."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.HybridDictionary.Count%2A&gt;.","pos":[434,547],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.HybridDictionary.Count%2A>."}]},{"pos":[21527,21784],"content":"The one-dimensional <xref:System.Array> that is the destination of the <xref:System.Collections.DictionaryEntry> objects copied from <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional &lt;xref:System.Array&gt; that is the destination of the &lt;xref:System.Collections.DictionaryEntry&gt; objects copied from <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,202],"source":"The one-dimensional <xref:System.Array> that is the destination of the <xref:System.Collections.DictionaryEntry> objects copied from <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[203,257],"source":" The <xref:System.Array> must have zero-based indexing."}]},{"pos":[21845,21901],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[22086,22169],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22284,22321],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero."},{"pos":[22417,22700],"content":"<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","pos":[0,39],"source":"<code>array</code> is multidimensional."},{"content":"-or-       The number of elements in the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is greater than the available space from <ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> to the end of the destination <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","pos":[46,277],"source":"       -or-       The number of elements in the source <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>."}]},{"pos":[22802,22973],"content":"The type of the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of the source <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."},{"pos":[23364,23485],"content":"Gets the number of key/value pairs contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[24144,24330],"content":"The number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The number of key/value pairs contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,116],"source":"The number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[123,182]}]},{"pos":[24850,25004],"content":"Returns an &lt;xref:System.Collections.IDictionaryEnumerator&gt; that iterates through the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns an <xref:System.Collections.IDictionaryEnumerator> that iterates through the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[25017,27600],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[212,332]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[339,422]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[423,519],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[521,601],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[602,819],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[826,1022],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1023,1147],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1154,1381],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1382,1513],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[1514,1664],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1665,1889],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1896,1968]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[1969,2131]},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[2138,2292]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[2294,2399]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[2401,2529]},{"content":"This method is an O(1) operation.","pos":[2536,2569]}]},{"pos":[28335,28463],"content":"An &lt;xref:System.Collections.IDictionaryEnumerator&gt; for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[28976,29098],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> has a fixed size."},{"pos":[29111,29828],"content":"<xref:System.Collections.Specialized.HybridDictionary> implements the IsFixedSize property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.       A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref:System.Collections.Specialized.HybridDictionary> implements the IsFixedSize property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.       A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","pos":[0,711],"nodes":[{"content":"&lt;xref:System.Collections.Specialized.HybridDictionary&gt; implements the IsFixedSize property because it is required by the &lt;xref:System.Collections.IDictionary?displayProperty=fullName&gt; interface.","pos":[0,194],"source":"<xref:System.Collections.Specialized.HybridDictionary> implements the IsFixedSize property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface."},{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","pos":[201,368]},{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[375,645]},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[652,711]}]}]},{"pos":[29944,30036],"content":"This property always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[30542,30660],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> is read-only."},{"pos":[30673,31299],"content":"<xref:System.Collections.Specialized.HybridDictionary> implements the IsReadOnly property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.       A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref:System.Collections.Specialized.HybridDictionary> implements the IsReadOnly property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.       A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","pos":[0,620],"nodes":[{"content":"&lt;xref:System.Collections.Specialized.HybridDictionary&gt; implements the IsReadOnly property because it is required by the &lt;xref:System.Collections.IDictionary?displayProperty=fullName&gt; interface.","pos":[0,193],"source":"<xref:System.Collections.Specialized.HybridDictionary> implements the IsReadOnly property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface."},{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[200,329]},{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[336,554]},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[561,620]}]}]},{"pos":[31414,31506],"content":"This property always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[32031,32166],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is synchronized (thread safe).","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> is synchronized (thread safe)."},{"pos":[32179,32991],"content":"<xref:System.Collections.Specialized.HybridDictionary> implements the IsSynchronized property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.       Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.HybridDictionary> using the <xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A> property.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref:System.Collections.Specialized.HybridDictionary> implements the IsSynchronized property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.       Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.HybridDictionary> using the <xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A> property.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,808],"nodes":[{"content":"&lt;xref:System.Collections.Specialized.HybridDictionary&gt; implements the IsSynchronized property because it is required by the &lt;xref:System.Collections.ICollection?displayProperty=fullName&gt; interface.","pos":[0,197],"source":"<xref:System.Collections.Specialized.HybridDictionary> implements the IsSynchronized property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface."},{"content":"Derived classes can provide a synchronized version of the &lt;xref:System.Collections.Specialized.HybridDictionary&gt; using the &lt;xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A&gt; property.","pos":[204,403],"source":"       Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.HybridDictionary> using the <xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A> property."},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[410,488]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[489,626]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[627,808]}]}]},{"pos":[33742,33834],"content":"This property always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[34367,34424],"content":"Gets or sets the value associated with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the value associated with the specified key.","pos":[0,57]}]},{"pos":[34437,35751],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.       You can also use the Item property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.HybridDictionary>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.HybridDictionary>, setting the Item property overwrites the old value. In contrast, the <xref:System.Collections.Specialized.HybridDictionary.Add%2A> method does not modify existing elements.       A key cannot be `null`, but a value can. To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.HybridDictionary.Contains%2A> method to determine if the key exists in the list.       The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.       Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[key]`</ph>.","pos":[0,133],"source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`."},{"content":"You can also use the Item property to add new elements by setting the value of a key that does not exist in the &lt;xref:System.Collections.Specialized.HybridDictionary&gt;; for example, <ph id=\"ph1\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>.","pos":[140,366],"source":"       You can also use the Item property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.HybridDictionary>; for example, `myCollection[\"myNonexistentKey\"] = myValue`."},{"content":"However, if the specified key already exists in the &lt;xref:System.Collections.Specialized.HybridDictionary&gt;, setting the Item property overwrites the old value.","pos":[367,526],"source":" However, if the specified key already exists in the <xref:System.Collections.Specialized.HybridDictionary>, setting the Item property overwrites the old value."},{"content":"In contrast, the &lt;xref:System.Collections.Specialized.HybridDictionary.Add%2A&gt; method does not modify existing elements.","pos":[527,647],"source":" In contrast, the <xref:System.Collections.Specialized.HybridDictionary.Add%2A> method does not modify existing elements."},{"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can.","pos":[654,694],"source":"       A key cannot be `null`, but a value can."},{"content":"To distinguish between <ph id=\"ph1\">`null`</ph> that is returned because the specified key is not found and <ph id=\"ph2\">`null`</ph> that is returned because the value of the specified key is <ph id=\"ph3\">`null`</ph>, use the &lt;xref:System.Collections.Specialized.HybridDictionary.Contains%2A&gt; method to determine if the key exists in the list.","pos":[695,984],"source":" To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.HybridDictionary.Contains%2A> method to determine if the key exists in the list."},{"content":"The C# language uses the  keyword to define the indexers instead of implementing the Item property.","pos":[991,1090]},{"content":"Visual Basic implements Item as a default property, which provides the same indexing functionality.","pos":[1091,1190]},{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[1197,1304]}]},{"pos":[36437,36471],"content":"The key whose value to get or set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key whose value to get or set.","pos":[0,34]}]},{"pos":[36529,36769],"content":"The value associated with the specified key. If the specified key is not found, attempting to get it returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, and attempting to set it creates a new entry using the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value associated with the specified key.","pos":[0,44]},{"content":"If the specified key is not found, attempting to get it returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, and attempting to set it creates a new entry using the specified key.","pos":[45,240],"source":" If the specified key is not found, attempting to get it returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, and attempting to set it creates a new entry using the specified key."}]},{"pos":[36952,37033],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[37419,37561],"content":"Gets an &lt;xref:System.Collections.ICollection&gt; containing the keys in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an <xref:System.Collections.ICollection> containing the keys in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[37574,38290],"content":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.HybridDictionary.Values%2A> method.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.HybridDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.HybridDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.HybridDictionary.Values%2A> method.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.HybridDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.HybridDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation.","pos":[0,712],"nodes":[{"content":"The order of the values in the &lt;xref:System.Collections.ICollection&gt; is unspecified, but it is the same order as the associated values in the &lt;xref:System.Collections.ICollection&gt; returned by the &lt;xref:System.Collections.Specialized.HybridDictionary.Values%2A&gt; method.","pos":[0,268],"source":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.HybridDictionary.Values%2A> method."},{"content":"The returned &lt;xref:System.Collections.ICollection&gt; is not a static copy; instead, the &lt;xref:System.Collections.ICollection&gt; refers back to the keys in the original &lt;xref:System.Collections.Specialized.HybridDictionary&gt;.","pos":[275,494],"source":"       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.HybridDictionary>."},{"content":"Therefore, changes to the &lt;xref:System.Collections.Specialized.HybridDictionary&gt; continue to be reflected in the &lt;xref:System.Collections.ICollection&gt;.","pos":[495,646],"source":" Therefore, changes to the <xref:System.Collections.Specialized.HybridDictionary> continue to be reflected in the <xref:System.Collections.ICollection>."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[653,712]}]}]},{"pos":[38982,39119],"content":"An &lt;xref:System.Collections.ICollection&gt; containing the keys in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.ICollection> containing the keys in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[39650,39769],"content":"Removes the entry with the specified key from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes the entry with the specified key from the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[39782,40457],"content":"If the <xref:System.Collections.Specialized.HybridDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.HybridDictionary> remains unchanged. No exception is thrown.       If the collection is already stored in a <xref:System.Collections.Hashtable> and the number of elements falls below the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection remains in the <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Hashtable> back to a <xref:System.Collections.Specialized.ListDictionary>.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the <xref:System.Collections.Specialized.HybridDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.HybridDictionary> remains unchanged. No exception is thrown.       If the collection is already stored in a <xref:System.Collections.Hashtable> and the number of elements falls below the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection remains in the <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Hashtable> back to a <xref:System.Collections.Specialized.ListDictionary>.       This method is an O(1) operation.","pos":[0,671],"nodes":[{"content":"If the &lt;xref:System.Collections.Specialized.HybridDictionary&gt; does not contain an element with the specified key, the &lt;xref:System.Collections.Specialized.HybridDictionary&gt; remains unchanged.","pos":[0,191],"source":"If the <xref:System.Collections.Specialized.HybridDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.HybridDictionary> remains unchanged."},{"content":"No exception is thrown.","pos":[192,215]},{"content":"If the collection is already stored in a &lt;xref:System.Collections.Hashtable&gt; and the number of elements falls below the optimal size for a &lt;xref:System.Collections.Specialized.ListDictionary&gt;, the collection remains in the &lt;xref:System.Collections.Hashtable&gt; to avoid the overhead of copying elements from the &lt;xref:System.Collections.Hashtable&gt; back to a &lt;xref:System.Collections.Specialized.ListDictionary&gt;.","pos":[222,631],"source":"       If the collection is already stored in a <xref:System.Collections.Hashtable> and the number of elements falls below the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection remains in the <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Hashtable> back to a <xref:System.Collections.Specialized.ListDictionary>."},{"content":"This method is an O(1) operation.","pos":[638,671]}]}]},{"pos":[41132,41163],"content":"The key of the entry to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the entry to remove.","pos":[0,31]}]},{"pos":[41348,41429],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[41835,41965],"content":"Gets an object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[41978,42993],"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.HybridDictionary> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Specialized.HybridDictionary>, not directly on the <xref:System.Collections.Specialized.HybridDictionary>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.HybridDictionary> object.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","needQuote":false,"needEscape":true,"nodes":[{"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.HybridDictionary> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Specialized.HybridDictionary>, not directly on the <xref:System.Collections.Specialized.HybridDictionary>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.HybridDictionary> object.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,1013],"nodes":[{"content":"Derived classes can provide their own synchronized version of the &lt;xref:System.Collections.Specialized.HybridDictionary&gt; using the SyncRoot property.","pos":[0,149],"source":"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.HybridDictionary> using the SyncRoot property."},{"content":"The synchronizing code must perform operations on the SyncRoot of the &lt;xref:System.Collections.Specialized.HybridDictionary&gt;, not directly on the &lt;xref:System.Collections.Specialized.HybridDictionary&gt;.","pos":[150,351],"source":" The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Specialized.HybridDictionary>, not directly on the <xref:System.Collections.Specialized.HybridDictionary>."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[352,433]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.Specialized.HybridDictionary&gt; object.","pos":[434,608],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.HybridDictionary> object."},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[615,693]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[694,831]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[832,1013]}]}]},{"pos":[43684,43809],"content":"An object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[44500,44644],"content":"Returns an &lt;xref:System.Collections.IEnumerator&gt; that iterates through the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns an <xref:System.Collections.IEnumerator> that iterates through the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[44657,47770],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[212,332]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[339,422]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[423,519],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[520,615],"source":" At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[616,833],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[840,1036],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1037,1161],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1168,1395],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1396,1527],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[1528,1693],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1694,1918],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1925,1997]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[1998,2301],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the element that it is set to, even if the enumerator is already invalidated.","pos":[2302,2578],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated."},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[2585,2739]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[2740,2877]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[2878,3059]},{"content":"This method is an O(1) operation.","pos":[3066,3099]}]},{"pos":[48481,48599],"content":"An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[49118,49262],"content":"Gets an &lt;xref:System.Collections.ICollection&gt; containing the values in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an <xref:System.Collections.ICollection> containing the values in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."},{"pos":[49275,49989],"content":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.HybridDictionary.Keys%2A> method.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.HybridDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.HybridDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.HybridDictionary.Keys%2A> method.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.HybridDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.HybridDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation.","pos":[0,710],"nodes":[{"content":"The order of the values in the &lt;xref:System.Collections.ICollection&gt; is unspecified, but it is the same order as the associated keys in the &lt;xref:System.Collections.ICollection&gt; returned by the &lt;xref:System.Collections.Specialized.HybridDictionary.Keys%2A&gt; method.","pos":[0,264],"source":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.HybridDictionary.Keys%2A> method."},{"content":"The returned &lt;xref:System.Collections.ICollection&gt; is not a static copy; instead, the &lt;xref:System.Collections.ICollection&gt; refers back to the values in the original &lt;xref:System.Collections.Specialized.HybridDictionary&gt;.","pos":[271,492],"source":"       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.HybridDictionary>."},{"content":"Therefore, changes to the &lt;xref:System.Collections.Specialized.HybridDictionary&gt; continue to be reflected in the &lt;xref:System.Collections.ICollection&gt;.","pos":[493,644],"source":" Therefore, changes to the <xref:System.Collections.Specialized.HybridDictionary> continue to be reflected in the <xref:System.Collections.ICollection>."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[651,710]}]}]},{"pos":[50683,50822],"content":"An &lt;xref:System.Collections.ICollection&gt; containing the values in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.ICollection> containing the values in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Specialized.HybridDictionary\n  id: HybridDictionary\n  children:\n  - System.Collections.Specialized.HybridDictionary.#ctor\n  - System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)\n  - System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)\n  - System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)\n  - System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)\n  - System.Collections.Specialized.HybridDictionary.Clear\n  - System.Collections.Specialized.HybridDictionary.Contains(System.Object)\n  - System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)\n  - System.Collections.Specialized.HybridDictionary.Count\n  - System.Collections.Specialized.HybridDictionary.GetEnumerator\n  - System.Collections.Specialized.HybridDictionary.IsFixedSize\n  - System.Collections.Specialized.HybridDictionary.IsReadOnly\n  - System.Collections.Specialized.HybridDictionary.IsSynchronized\n  - System.Collections.Specialized.HybridDictionary.Item(System.Object)\n  - System.Collections.Specialized.HybridDictionary.Keys\n  - System.Collections.Specialized.HybridDictionary.Remove(System.Object)\n  - System.Collections.Specialized.HybridDictionary.SyncRoot\n  - System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Specialized.HybridDictionary.Values\n  langs:\n  - csharp\n  name: HybridDictionary\n  nameWithType: HybridDictionary\n  fullName: System.Collections.Specialized.HybridDictionary\n  type: Class\n  summary: Implements <xref uid=\"langword_csharp_IDictionary\" name=\"IDictionary\" href=\"\"></xref> by using a <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> while the collection is small, and then switching to a <xref href=\"System.Collections.Hashtable\"></xref> when the collection gets large.\n  remarks: \"This class is recommended for cases where the number of elements in a dictionary is unknown. It takes advantage of the improved performance of a <xref:System.Collections.Specialized.ListDictionary> with small collections, and offers the flexibility of switching to a <xref:System.Collections.Hashtable> which handles larger collections better than <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n If the initial size of the collection is greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection is stored in a <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Specialized.ListDictionary> to a <xref:System.Collections.Hashtable>.  \\n  \\n The constructor accepts a Boolean parameter that allows the user to specify whether the collection ignores the case when comparing strings. If the collection is case-sensitive, it uses the key's implementations of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName>. If the collection is case-insensitive, it performs a simple ordinal case-insensitive comparison, which obeys the casing rules of the invariant culture only. By default, the collection is case-sensitive. For more information on the invariant culture, see <xref:System.Globalization.CultureInfo?displayProperty=fullName>.  \\n  \\n A key cannot be null, but a value can.  \\n  \\n The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the HybridDictionary is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/cpp/t-system.collections.spe_3_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/csharp/t-system.collections.spe_3_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/visualbasic/t-system.collections.spe_3_1.vb)]  \\n  \\n The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.\"\n  example:\n  - \"The following code example demonstrates several of the properties and methods of HybridDictionary.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/cpp/t-system.collections.spe_3_2.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/csharp/t-system.collections.spe_3_2.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/visualbasic/t-system.collections.spe_3_2.vb)]\"\n  syntax:\n    content: 'public class HybridDictionary : System.Collections.IDictionary'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.#ctor\n  id: '#ctor'\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: HybridDictionary()\n  nameWithType: HybridDictionary.HybridDictionary()\n  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Creates an empty case-sensitive <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  remarks: \"By default, the collection is case-sensitive and uses the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> as the hash code provider and the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName> as the comparer.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.HybridDictionary> must be unique.  \\n  \\n This constructor is an O(1) operation.\"\n  example:\n  - \"The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/cpp/m-system.collections.spe_9_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/csharp/m-system.collections.spe_9_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/visualbasic/m-system.collections.spe_9_1.vb)]\"\n  syntax:\n    content: public HybridDictionary ();\n    parameters: []\n  overload: System.Collections.Specialized.HybridDictionary.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: HybridDictionary(Boolean)\n  nameWithType: HybridDictionary.HybridDictionary(Boolean)\n  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Creates an empty <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> with the specified case sensitivity.\n  remarks: \"If `caseInsensitive` is `false`, the collection uses the key's implementations of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName>. If `caseInsensitive` is `true`, the collection performs a simple ordinal case-insensitive comparison, which obeys the casing rules of the invariant culture only. For more information on the invariant culture, see <xref:System.Globalization.CultureInfo?displayProperty=fullName>.  \\n  \\n This constructor is an O(1) operation.\"\n  syntax:\n    content: public HybridDictionary (bool caseInsensitive);\n    parameters:\n    - id: caseInsensitive\n      type: System.Boolean\n      description: A Boolean that denotes whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> is case-insensitive.\n  overload: System.Collections.Specialized.HybridDictionary.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: HybridDictionary(Int32)\n  nameWithType: HybridDictionary.HybridDictionary(Int32)\n  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Creates a case-sensitive <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> with the specified initial size.\n  remarks: \"If the initial size of the collection is greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection is stored in a <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Specialized.ListDictionary> to the <xref:System.Collections.Hashtable>.  \\n  \\n By default, the collection is case-sensitive and uses the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> as the hash code provider and the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName> as the comparer.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.HybridDictionary> must be unique.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `initialSize`.\"\n  syntax:\n    content: public HybridDictionary (int initialSize);\n    parameters:\n    - id: initialSize\n      type: System.Int32\n      description: The approximate number of entries that the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> can initially contain.\n  overload: System.Collections.Specialized.HybridDictionary.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)\n  id: '#ctor(System.Int32,System.Boolean)'\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: HybridDictionary(Int32,Boolean)\n  nameWithType: HybridDictionary.HybridDictionary(Int32,Boolean)\n  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32,Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Creates a <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> with the specified initial size and case sensitivity.\n  remarks: \"If the initial size of the collection is greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection is stored in a <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Specialized.ListDictionary> to the <xref:System.Collections.Hashtable>.  \\n  \\n If `caseInsensitive` is `false`, the collection uses the key's implementations of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName>. If `caseInsensitive` is `true`, the collection performs a simple ordinal case-insensitive comparison, which obeys the casing rules of the invariant culture only. For more information on the invariant culture, see <xref:System.Globalization.CultureInfo?displayProperty=fullName>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `initialSize`.\"\n  syntax:\n    content: public HybridDictionary (int initialSize, bool caseInsensitive);\n    parameters:\n    - id: initialSize\n      type: System.Int32\n      description: The approximate number of entries that the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> can initially contain.\n    - id: caseInsensitive\n      type: System.Boolean\n      description: A Boolean that denotes whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> is case-insensitive.\n  overload: System.Collections.Specialized.HybridDictionary.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)\n  id: Add(System.Object,System.Object)\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: Add(Object,Object)\n  nameWithType: HybridDictionary.Add(Object,Object)\n  fullName: System.Collections.Specialized.HybridDictionary.Add(Object,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Adds an entry with the specified key and value into the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  remarks: \"An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.  \\n  \\n A key cannot be `null`, but a value can.  \\n  \\n You can also use the <xref:System.Collections.Specialized.HybridDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.HybridDictionary>; for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.HybridDictionary>, setting the <xref:System.Collections.Specialized.HybridDictionary.Item%2A> property overwrites the old value. In contrast, the Add method does not modify existing elements.  \\n  \\n When the number of elements becomes greater than the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the elements are copied from the <xref:System.Collections.Specialized.ListDictionary> to a <xref:System.Collections.Hashtable>. However, this only happens once. If the collection is already stored in a <xref:System.Collections.Hashtable> and the number of elements falls below the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection remains in the <xref:System.Collections.Hashtable>.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example adds to and removes elements from a <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/cpp/200580ad-8659-4e63-8e92-_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/csharp/200580ad-8659-4e63-8e92-_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/visualbasic/200580ad-8659-4e63-8e92-_1.vb)]\"\n  syntax:\n    content: public void Add (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the entry to add.\n    - id: value\n      type: System.Object\n      description: The value of the entry to add. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.HybridDictionary.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An entry with the same key already exists in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.Clear\n  id: Clear\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: HybridDictionary.Clear()\n  fullName: System.Collections.Specialized.HybridDictionary.Clear()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Removes all entries from the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  remarks: \"<xref:System.Collections.Specialized.HybridDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \\n  \\n If the collection is already stored in a <xref:System.Collections.Hashtable>, the collection remains in the <xref:System.Collections.Hashtable>.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.HybridDictionary.Count%2A>.\"\n  example:\n  - \"The following code example adds to and removes elements from a <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_31_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_31_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_31_1.vb)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Collections.Specialized.HybridDictionary.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: Contains(Object)\n  nameWithType: HybridDictionary.Contains(Object)\n  fullName: System.Collections.Specialized.HybridDictionary.Contains(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Determines whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> contains a specific key.\n  remarks: \"This method is an O(1) operation.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example searches for an element in a <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary_Contains#1](~/add/codesnippet/cpp/m-system.collections.spe_37_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary_Contains#1](~/add/codesnippet/csharp/m-system.collections.spe_37_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary_Contains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_37_1.vb)]\"\n  syntax:\n    content: public bool Contains (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to locate in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> contains an entry with the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.HybridDictionary.Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: HybridDictionary.CopyTo(Array,Int32)\n  fullName: System.Collections.Specialized.HybridDictionary.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Copies the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> entries to a one-dimensional <xref:System.Array> instance at the specified index.\n  remarks: \"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n To copy only the keys in the <xref:System.Collections.Specialized.HybridDictionary>, use `HybridDictionary.Keys.CopyTo`.  \\n  \\n To copy only the values in the <xref:System.Collections.Specialized.HybridDictionary>, use `HybridDictionary.Values.CopyTo`.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.HybridDictionary.Count%2A>.\"\n  example:\n  - \"The following code example copies the elements of a <xref:System.Collections.Specialized.HybridDictionary> to an array.  \\n  \\n [!code-cs[System.Collections.Specialized.HybridDictionary_CopyTo#1](~/add/codesnippet/csharp/0bfe553c-62f4-44ed-b908-_1.cs)]\\n [!code-cpp[System.Collections.Specialized.HybridDictionary_CopyTo#1](~/add/codesnippet/cpp/0bfe553c-62f4-44ed-b908-_1.cpp)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary_CopyTo#1](~/add/codesnippet/visualbasic/0bfe553c-62f4-44ed-b908-_1.vb)]\"\n  syntax:\n    content: public void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref:System.Array> that is the destination of the <xref:System.Collections.DictionaryEntry> objects copied from <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>. The <xref:System.Array> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Collections.Specialized.HybridDictionary.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.Specialized.HybridDictionary\\\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.Count\n  id: Count\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: Count\n  nameWithType: HybridDictionary.Count\n  fullName: System.Collections.Specialized.HybridDictionary.Count\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_9_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_9_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_9_1.vb)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: \"The number of key/value pairs contained in the <xref href=\\\"System.Collections.Specialized.HybridDictionary\\\"></xref>.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  overload: System.Collections.Specialized.HybridDictionary.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: HybridDictionary.GetEnumerator()\n  fullName: System.Collections.Specialized.HybridDictionary.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Returns an <xref:System.Collections.IDictionaryEnumerator> that iterates through the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/m-system.collections.spe_19_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/m-system.collections.spe_19_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/m-system.collections.spe_19_1.vb)]\"\n  syntax:\n    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  overload: System.Collections.Specialized.HybridDictionary.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.IsFixedSize\n  id: IsFixedSize\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: IsFixedSize\n  nameWithType: HybridDictionary.IsFixedSize\n  fullName: System.Collections.Specialized.HybridDictionary.IsFixedSize\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> has a fixed size.\n  remarks: \"<xref:System.Collections.Specialized.HybridDictionary> implements the IsFixedSize property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.  \\n  \\n A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public bool IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.HybridDictionary.IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: HybridDictionary.IsReadOnly\n  fullName: System.Collections.Specialized.HybridDictionary.IsReadOnly\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> is read-only.\n  remarks: \"<xref:System.Collections.Specialized.HybridDictionary> implements the IsReadOnly property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.  \\n  \\n A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.HybridDictionary.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: HybridDictionary.IsSynchronized\n  fullName: System.Collections.Specialized.HybridDictionary.IsSynchronized\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref> is synchronized (thread safe).\n  remarks: \"<xref:System.Collections.Specialized.HybridDictionary> implements the IsSynchronized property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  \\n  \\n Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.HybridDictionary> using the <xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A> property.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/cpp/p-system.collections.spe_5_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/csharp/p-system.collections.spe_5_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/visualbasic/p-system.collections.spe_5_1.vb)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.HybridDictionary.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.Item(System.Object)\n  id: Item(System.Object)\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: Item(Object)\n  nameWithType: HybridDictionary.Item(Object)\n  fullName: System.Collections.Specialized.HybridDictionary.Item(Object)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets or sets the value associated with the specified key.\n  remarks: \"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \\n  \\n You can also use the Item property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.HybridDictionary>; for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.HybridDictionary>, setting the Item property overwrites the old value. In contrast, the <xref:System.Collections.Specialized.HybridDictionary.Add%2A> method does not modify existing elements.  \\n  \\n A key cannot be `null`, but a value can. To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.HybridDictionary.Contains%2A> method to determine if the key exists in the list.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.\"\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_27_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_27_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_27_1.vb)]\"\n  syntax:\n    content: public object this[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key whose value to get or set.\n    return:\n      type: System.Object\n      description: The value associated with the specified key. If the specified key is not found, attempting to get it returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, and attempting to set it creates a new entry using the specified key.\n  overload: System.Collections.Specialized.HybridDictionary.Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.Keys\n  id: Keys\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: HybridDictionary.Keys\n  fullName: System.Collections.Specialized.HybridDictionary.Keys\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets an <xref:System.Collections.ICollection> containing the keys in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  remarks: \"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.HybridDictionary.Values%2A> method.  \\n  \\n The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.HybridDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.HybridDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_20_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_20_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_20_1.vb)]\"\n  syntax:\n    content: public System.Collections.ICollection Keys { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref:System.Collections.ICollection> containing the keys in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  overload: System.Collections.Specialized.HybridDictionary.Keys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: Remove(Object)\n  nameWithType: HybridDictionary.Remove(Object)\n  fullName: System.Collections.Specialized.HybridDictionary.Remove(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Removes the entry with the specified key from the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  remarks: \"If the <xref:System.Collections.Specialized.HybridDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.HybridDictionary> remains unchanged. No exception is thrown.  \\n  \\n If the collection is already stored in a <xref:System.Collections.Hashtable> and the number of elements falls below the optimal size for a <xref:System.Collections.Specialized.ListDictionary>, the collection remains in the <xref:System.Collections.Hashtable> to avoid the overhead of copying elements from the <xref:System.Collections.Hashtable> back to a <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example adds to and removes elements from a <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_0_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_0_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_0_1.vb)]\"\n  syntax:\n    content: public void Remove (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the entry to remove.\n  overload: System.Collections.Specialized.HybridDictionary.Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: HybridDictionary.SyncRoot\n  fullName: System.Collections.Specialized.HybridDictionary.SyncRoot\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  remarks: \"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.HybridDictionary> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Specialized.HybridDictionary>, not directly on the <xref:System.Collections.Specialized.HybridDictionary>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.HybridDictionary> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/cpp/p-system.collections.spe_22_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/csharp/p-system.collections.spe_22_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/visualbasic/p-system.collections.spe_22_1.vb)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  overload: System.Collections.Specialized.HybridDictionary.SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: HybridDictionary.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Specialized.HybridDictionary.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Returns an <xref:System.Collections.IEnumerator> that iterates through the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/cfcf8780-64b5-47b8-8217-_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/cfcf8780-64b5-47b8-8217-_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/cfcf8780-64b5-47b8-8217-_1.vb)]\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  overload: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.HybridDictionary.Values\n  id: Values\n  parent: System.Collections.Specialized.HybridDictionary\n  langs:\n  - csharp\n  name: Values\n  nameWithType: HybridDictionary.Values\n  fullName: System.Collections.Specialized.HybridDictionary.Values\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets an <xref:System.Collections.ICollection> containing the values in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  remarks: \"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.HybridDictionary.Keys%2A> method.  \\n  \\n The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.HybridDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.HybridDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_14_1.cpp)]\\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_14_1.cs)]\\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_14_1.vb)]\"\n  syntax:\n    content: public System.Collections.ICollection Values { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref:System.Collections.ICollection> containing the values in the <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n  overload: System.Collections.Specialized.HybridDictionary.Values*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.Collections.Specialized.HybridDictionary.#ctor\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: HybridDictionary()\n  nameWithType: HybridDictionary.HybridDictionary()\n  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary()\n- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: HybridDictionary(Boolean)\n  nameWithType: HybridDictionary.HybridDictionary(Boolean)\n  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: HybridDictionary(Int32)\n  nameWithType: HybridDictionary.HybridDictionary(Int32)\n  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: HybridDictionary(Int32,Boolean)\n  nameWithType: HybridDictionary.HybridDictionary(Int32,Boolean)\n  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32,Boolean)\n- uid: System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Add(Object,Object)\n  nameWithType: HybridDictionary.Add(Object,Object)\n  fullName: System.Collections.Specialized.HybridDictionary.Add(Object,Object)\n- uid: System.Collections.Specialized.HybridDictionary.Clear\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Clear()\n  nameWithType: HybridDictionary.Clear()\n  fullName: System.Collections.Specialized.HybridDictionary.Clear()\n- uid: System.Collections.Specialized.HybridDictionary.Contains(System.Object)\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Contains(Object)\n  nameWithType: HybridDictionary.Contains(Object)\n  fullName: System.Collections.Specialized.HybridDictionary.Contains(Object)\n- uid: System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: HybridDictionary.CopyTo(Array,Int32)\n  fullName: System.Collections.Specialized.HybridDictionary.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Specialized.HybridDictionary.Count\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Count\n  nameWithType: HybridDictionary.Count\n  fullName: System.Collections.Specialized.HybridDictionary.Count\n- uid: System.Collections.Specialized.HybridDictionary.GetEnumerator\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: HybridDictionary.GetEnumerator()\n  fullName: System.Collections.Specialized.HybridDictionary.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.Collections.Specialized.HybridDictionary.IsFixedSize\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: HybridDictionary.IsFixedSize\n  fullName: System.Collections.Specialized.HybridDictionary.IsFixedSize\n- uid: System.Collections.Specialized.HybridDictionary.IsReadOnly\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: HybridDictionary.IsReadOnly\n  fullName: System.Collections.Specialized.HybridDictionary.IsReadOnly\n- uid: System.Collections.Specialized.HybridDictionary.IsSynchronized\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: HybridDictionary.IsSynchronized\n  fullName: System.Collections.Specialized.HybridDictionary.IsSynchronized\n- uid: System.Collections.Specialized.HybridDictionary.Item(System.Object)\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Item(Object)\n  nameWithType: HybridDictionary.Item(Object)\n  fullName: System.Collections.Specialized.HybridDictionary.Item(Object)\n- uid: System.Collections.Specialized.HybridDictionary.Keys\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Keys\n  nameWithType: HybridDictionary.Keys\n  fullName: System.Collections.Specialized.HybridDictionary.Keys\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: true\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.Specialized.HybridDictionary.Remove(System.Object)\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Remove(Object)\n  nameWithType: HybridDictionary.Remove(Object)\n  fullName: System.Collections.Specialized.HybridDictionary.Remove(Object)\n- uid: System.Collections.Specialized.HybridDictionary.SyncRoot\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: SyncRoot\n  nameWithType: HybridDictionary.SyncRoot\n  fullName: System.Collections.Specialized.HybridDictionary.SyncRoot\n- uid: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: HybridDictionary.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Specialized.HybridDictionary.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Specialized.HybridDictionary.Values\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Values\n  nameWithType: HybridDictionary.Values\n  fullName: System.Collections.Specialized.HybridDictionary.Values\n- uid: System.Collections.Specialized.HybridDictionary.#ctor*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: HybridDictionary\n  nameWithType: HybridDictionary.HybridDictionary\n- uid: System.Collections.Specialized.HybridDictionary.Add*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Add\n  nameWithType: HybridDictionary.Add\n- uid: System.Collections.Specialized.HybridDictionary.Clear*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Clear\n  nameWithType: HybridDictionary.Clear\n- uid: System.Collections.Specialized.HybridDictionary.Contains*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Contains\n  nameWithType: HybridDictionary.Contains\n- uid: System.Collections.Specialized.HybridDictionary.CopyTo*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: CopyTo\n  nameWithType: HybridDictionary.CopyTo\n- uid: System.Collections.Specialized.HybridDictionary.Count*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Count\n  nameWithType: HybridDictionary.Count\n- uid: System.Collections.Specialized.HybridDictionary.GetEnumerator*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: HybridDictionary.GetEnumerator\n- uid: System.Collections.Specialized.HybridDictionary.IsFixedSize*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: HybridDictionary.IsFixedSize\n- uid: System.Collections.Specialized.HybridDictionary.IsReadOnly*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: HybridDictionary.IsReadOnly\n- uid: System.Collections.Specialized.HybridDictionary.IsSynchronized*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: HybridDictionary.IsSynchronized\n- uid: System.Collections.Specialized.HybridDictionary.Item*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Item\n  nameWithType: HybridDictionary.Item\n- uid: System.Collections.Specialized.HybridDictionary.Keys*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Keys\n  nameWithType: HybridDictionary.Keys\n- uid: System.Collections.Specialized.HybridDictionary.Remove*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Remove\n  nameWithType: HybridDictionary.Remove\n- uid: System.Collections.Specialized.HybridDictionary.SyncRoot*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: SyncRoot\n  nameWithType: HybridDictionary.SyncRoot\n- uid: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: HybridDictionary.System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.Specialized.HybridDictionary.Values*\n  parent: System.Collections.Specialized.HybridDictionary\n  isExternal: false\n  name: Values\n  nameWithType: HybridDictionary.Values\n"}