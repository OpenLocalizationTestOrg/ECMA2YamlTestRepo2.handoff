{"nodes":[{"pos":[4011,4262],"content":"Aids implementation of the <xref href=\"System.Data.IDbDataAdapter\"></xref> interface. Inheritors of DbDataAdapter implement a set of functions to provide strong typing, but inherit most of the functionality needed to fully implement a **DataAdapter**.","needQuote":true,"needEscape":true,"nodes":[{"content":"Aids implementation of the <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface.","pos":[0,85],"source":"Aids implementation of the <xref href=\"System.Data.IDbDataAdapter\"></xref> interface."},{"content":"Inheritors of DbDataAdapter implement a set of functions to provide strong typing, but inherit most of the functionality needed to fully implement a <bpt id=\"p1\">**</bpt>DataAdapter<ept id=\"p1\">**</ept>.","pos":[86,251],"source":" Inheritors of DbDataAdapter implement a set of functions to provide strong typing, but inherit most of the functionality needed to fully implement a **DataAdapter**."}]},{"pos":[4275,5302],"content":"The DbDataAdapter class inherits from the <xref:System.Data.Common.DataAdapter> class and helps a class implement a **DataAdapter** designed for use with a relational database.       An application does not create an instance of the DbDataAdapter interface directly, but creates an instance of a class that inherits <xref:System.Data.IDbDataAdapter> and DbDataAdapter.       Classes that inherit DbDataAdapter must implement the inherited members, and typically define additional members to add provider-specific functionality. For example, the DbDataAdapter class defines the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property, and the DbDataAdapter interface defines eight overloads of the <xref:System.Data.IDataAdapter.Fill%2A> method. In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method, and also defines two additional overloads of <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> that take an ADO Recordset object as a parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"The DbDataAdapter class inherits from the &lt;xref:System.Data.Common.DataAdapter&gt; class and helps a class implement a <bpt id=\"p1\">**</bpt>DataAdapter<ept id=\"p1\">**</ept> designed for use with a relational database.","pos":[0,176],"source":"The DbDataAdapter class inherits from the <xref:System.Data.Common.DataAdapter> class and helps a class implement a **DataAdapter** designed for use with a relational database."},{"content":"An application does not create an instance of the DbDataAdapter interface directly, but creates an instance of a class that inherits &lt;xref:System.Data.IDbDataAdapter&gt; and DbDataAdapter.","pos":[183,368],"source":"       An application does not create an instance of the DbDataAdapter interface directly, but creates an instance of a class that inherits <xref:System.Data.IDbDataAdapter> and DbDataAdapter."},{"content":"Classes that inherit DbDataAdapter must implement the inherited members, and typically define additional members to add provider-specific functionality.","pos":[375,527]},{"content":"For example, the DbDataAdapter class defines the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt; property, and the DbDataAdapter interface defines eight overloads of the &lt;xref:System.Data.IDataAdapter.Fill%2A&gt; method.","pos":[528,748],"source":" For example, the DbDataAdapter class defines the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property, and the DbDataAdapter interface defines eight overloads of the <xref:System.Data.IDataAdapter.Fill%2A> method."},{"content":"In turn, the &lt;xref:System.Data.OleDb.OleDbDataAdapter&gt; class inherits the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method, and also defines two additional overloads of &lt;xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A&gt; that take an ADO Recordset object as a parameter.","pos":[749,1023],"source":" In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method, and also defines two additional overloads of <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> that take an ADO Recordset object as a parameter."}]},{"pos":[8308,8362],"content":"Initializes a new instance of a <bpt id=\"p1\">**</bpt>DataAdapter<ept id=\"p1\">**</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of a **DataAdapter** class."},{"pos":[8375,9266],"content":"When you create an instance of <xref:System.Data.Common.DbDataAdapter>, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"nodes":[{"content":"When you create an instance of &lt;xref:System.Data.Common.DbDataAdapter&gt;, the following read/write properties are set to the following initial values.","pos":[0,148],"source":"When you create an instance of <xref:System.Data.Common.DbDataAdapter>, the following read/write properties are set to the following initial values."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;|A new &lt;xref:System.Data.IDbCommand&gt;.|   |&lt;xref:System.Data.IDbDataAdapter.InsertCommand%2A&gt;|A new &lt;xref:System.Data.IDbCommand&gt;.|   |&lt;xref:System.Data.IDbDataAdapter.DeleteCommand%2A&gt;|A new &lt;xref:System.Data.IDbCommand&gt;.|   |&lt;xref:System.Data.IDbDataAdapter.UpdateCommand%2A&gt;|A new &lt;xref:System.Data.IDbCommand&gt;.|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|       You can change the value of any of these properties through a separate call to the property.","pos":[154,880],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property."}]},{"pos":[9884,10038],"content":"Initializes a new instance of a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataAdapter\" name=\"DataAdapter\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from an existing object of the same type.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of a <xref uid=\"langword_csharp_DataAdapter\" name=\"DataAdapter\" href=\"\"></xref> class from an existing object of the same type."},{"pos":[10050,10251],"content":"This overload of the <xref:System.Data.Common.DbDataAdapter> constructor is designed for use by a .NET Framework data provider when implementing a similar constructor for use in a clone implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"This overload of the &lt;xref:System.Data.Common.DbDataAdapter&gt; constructor is designed for use by a .NET Framework data provider when implementing a similar constructor for use in a clone implementation.","pos":[0,201],"source":"This overload of the <xref:System.Data.Common.DbDataAdapter> constructor is designed for use by a .NET Framework data provider when implementing a similar constructor for use in a clone implementation."}]},{"pos":[10441,10623],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataAdapter\" name=\"DataAdapter\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object used to create the new <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DataAdapter\" name=\"DataAdapter\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_DataAdapter\" name=\"DataAdapter\" href=\"\"></xref> object used to create the new <xref uid=\"langword_csharp_DataAdapter\" name=\"DataAdapter\" href=\"\"></xref>."},{"pos":[11135,11207],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the current batch.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Data.IDbCommand\"></xref> to the current batch."},{"pos":[11219,11437],"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","needQuote":true,"needEscape":true,"nodes":[{"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","pos":[0,218],"nodes":[{"content":"In &lt;xref:System.Data.Common.DbDataAdapter&gt;, this method throws &lt;xref:System.NotSupportedException&gt;.","pos":[0,99],"source":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>."},{"content":"Classes that inherit from &lt;xref:System.Data.Common.DbDataAdapter&gt; override this method to provide support for batches.","pos":[100,218],"source":" Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."}]}]},{"pos":[11616,11684],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to add to the batch.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.IDbCommand\"></xref> to add to the batch."},{"pos":[11741,11839],"content":"The number of commands in the batch before adding the <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of commands in the batch before adding the <xref href=\"System.Data.IDbCommand\"></xref>."},{"pos":[12013,12050],"content":"The adapter does not support batches.","needQuote":true,"needEscape":true,"nodes":[{"content":"The adapter does not support batches.","pos":[0,37]}]},{"pos":[12415,12494],"content":"Removes all <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects from the batch.","needQuote":true,"needEscape":true,"source":"Removes all <xref href=\"System.Data.IDbCommand\"></xref> objects from the batch."},{"pos":[12506,12724],"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","needQuote":true,"needEscape":true,"nodes":[{"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","pos":[0,218],"nodes":[{"content":"In &lt;xref:System.Data.Common.DbDataAdapter&gt;, this method throws &lt;xref:System.NotSupportedException&gt;.","pos":[0,99],"source":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>."},{"content":"Classes that inherit from &lt;xref:System.Data.Common.DbDataAdapter&gt; override this method to provide support for batches.","pos":[100,218],"source":" Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."}]}]},{"pos":[12978,13015],"content":"The adapter does not support batches.","needQuote":true,"needEscape":true,"nodes":[{"content":"The adapter does not support batches.","pos":[0,37]}]},{"pos":[13794,13894],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.RowUpdatedEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.Common.RowUpdatedEventArgs\"></xref> class."},{"pos":[14236,14312],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to update the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataRow\"></xref> used to update the data source."},{"pos":[14385,14493],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> executed during the &lt;xref:System.Data.IDataAdapter.Update*&gt;.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.IDbCommand\"></xref> executed during the <xref:System.Data.IDataAdapter.Update*>."},{"pos":[14575,14645],"content":"Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.","needQuote":true,"needEscape":true,"nodes":[{"content":"Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.","pos":[0,70]}]},{"pos":[14736,14802],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataTableMapping\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Common.DataTableMapping\"></xref> object."},{"pos":[14885,14973],"content":"A new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.RowUpdatedEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"A new instance of the <xref href=\"System.Data.Common.RowUpdatedEventArgs\"></xref> class."},{"pos":[15842,15943],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.RowUpdatingEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.Common.RowUpdatingEventArgs\"></xref> class."},{"pos":[16287,16361],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that updates the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataRow\"></xref> that updates the data source."},{"pos":[16434,16544],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to execute during the &lt;xref:System.Data.IDataAdapter.Update*&gt;.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.IDbCommand\"></xref> to execute during the <xref:System.Data.IDataAdapter.Update*>."},{"pos":[16626,16696],"content":"Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.","needQuote":true,"needEscape":true,"nodes":[{"content":"Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.","pos":[0,70]}]},{"pos":[16787,16853],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataTableMapping\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Common.DataTableMapping\"></xref> object."},{"pos":[16937,17026],"content":"A new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.RowUpdatingEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"A new instance of the <xref href=\"System.Data.Common.RowUpdatingEventArgs\"></xref> class."},{"pos":[17530,17637],"content":"The default name used by the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for table mappings.","needQuote":true,"needEscape":true,"source":"The default name used by the <xref href=\"System.Data.Common.DataAdapter\"></xref> object for table mappings."},{"pos":[17650,17954],"content":"\"Table\" is the default name used by the <xref:System.Data.Common.DataAdapter> object for table mappings.       DefaultSourceTableName is when an application adds a table mapping to be used with <xref:System.Data.Common.DbDataAdapter.Fill%2A>, but does not specify a <xref:System.Data.DataTable> name.","needQuote":false,"needEscape":true,"nodes":[{"content":"\"Table\" is the default name used by the <xref:System.Data.Common.DataAdapter> object for table mappings.       DefaultSourceTableName is when an application adds a table mapping to be used with <xref:System.Data.Common.DbDataAdapter.Fill%2A>, but does not specify a <xref:System.Data.DataTable> name.","pos":[0,300],"nodes":[{"content":"\"Table\" is the default name used by the &lt;xref:System.Data.Common.DataAdapter&gt; object for table mappings.","pos":[0,104],"source":"\"Table\" is the default name used by the <xref:System.Data.Common.DataAdapter> object for table mappings."},{"content":"DefaultSourceTableName is when an application adds a table mapping to be used with &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;, but does not specify a &lt;xref:System.Data.DataTable&gt; name.","pos":[111,300],"source":"       DefaultSourceTableName is when an application adds a table mapping to be used with <xref:System.Data.Common.DbDataAdapter.Fill%2A>, but does not specify a <xref:System.Data.DataTable> name."}]}]},{"pos":[18080,18092],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18485,18547],"content":"Gets or sets a command for deleting records from the data set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a command for deleting records from the data set.","pos":[0,62]}]},{"pos":[18559,18801],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> is automatically generated.","needQuote":true,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the &lt;xref:System.Data.IDbDataAdapter.DeleteCommand%2A&gt; is automatically generated.","pos":[0,242],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> is automatically generated."}]},{"pos":[19364,19533],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.IDataAdapter.Update*&gt; to delete records in the data source for deleted rows in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.IDataAdapter.Update*> to delete records in the data source for deleted rows in the data set."},{"pos":[20013,20158],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Data.Common.DbDataAdapter\"></xref> and optionally releases the managed resources."},{"pos":[20314,20523],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[20969,20996],"content":"Executes the current batch.","needQuote":true,"needEscape":true,"nodes":[{"content":"Executes the current batch.","pos":[0,27]}]},{"pos":[21008,21226],"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","needQuote":true,"needEscape":true,"nodes":[{"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","pos":[0,218],"nodes":[{"content":"In &lt;xref:System.Data.Common.DbDataAdapter&gt;, this method throws &lt;xref:System.NotSupportedException&gt;.","pos":[0,99],"source":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>."},{"content":"Classes that inherit from &lt;xref:System.Data.Common.DbDataAdapter&gt; override this method to provide support for batches.","pos":[100,218],"source":" Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."}]}]},{"pos":[21364,21416],"content":"The return value from the last command in the batch.","needQuote":true,"needEscape":true,"nodes":[{"content":"The return value from the last command in the batch.","pos":[0,52]}]},{"pos":[21890,21961],"content":"Adds or refreshes rows in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[21974,25607],"content":"The Fill method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before Fill is called, it is opened to retrieve data and then closed. If the connection is open before Fill is called, it remains open.       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on.       When the query specified returns multiple results, the result set for each row returning query is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on). Because no table is created for a query that does not return rows, if you process an insert query followed by a select query, the table created for the select query is named \"Table\" because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as batch SQL statements, if one of the results contains an error, all subsequent results are skipped and are not added to the <xref:System.Data.DataSet>.       When using subsequent Fill calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:      1.  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.      2.  The **Key** column information must be present.       If primary key information is present, any duplicate rows are reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use Fill with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Fill method retrieves the data from the data source using a SELECT statement.","pos":[0,81]},{"content":"The &lt;xref:System.Data.IDbConnection&gt; object associated with the select command must be valid, but it does not need to be open.","pos":[82,208],"source":" The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to be open."},{"content":"If the &lt;xref:System.Data.IDbConnection&gt; is closed before Fill is called, it is opened to retrieve data and then closed.","pos":[209,328],"source":" If the <xref:System.Data.IDbConnection> is closed before Fill is called, it is opened to retrieve data and then closed."},{"content":"If the connection is open before Fill is called, it remains open.","pos":[329,394]},{"content":"If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables.","pos":[401,552]},{"content":"The remainder of the operation is aborted.","pos":[553,595]},{"content":"If a command does not return any rows, no tables are added to the &lt;xref:System.Data.DataSet&gt;, and no exception is raised.","pos":[602,723],"source":"       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised."},{"content":"If the &lt;xref:System.Data.Common.DbDataAdapter&gt; object encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[730,987],"source":"       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[988,1142],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When the query specified returns multiple results, the result set for each row returning query is placed in a separate table.","pos":[1149,1274]},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on).","pos":[1275,1419]},{"content":"Because no table is created for a query that does not return rows, if you process an insert query followed by a select query, the table created for the select query is named \"Table\" because it is the first table created.","pos":[1420,1640]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[1641,1754]},{"content":"When the SELECT statement used to populate the &lt;xref:System.Data.DataSet&gt; returns multiple results, such as batch SQL statements, if one of the results contains an error, all subsequent results are skipped and are not added to the &lt;xref:System.Data.DataSet&gt;.","pos":[1761,2019],"source":"       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as batch SQL statements, if one of the results contains an error, all subsequent results are skipped and are not added to the <xref:System.Data.DataSet>."},{"content":"When using subsequent Fill calls to refresh the contents of the &lt;xref:System.Data.DataSet&gt;, two conditions must be met:      1.","pos":[2026,2153],"source":"       When using subsequent Fill calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:      1."},{"content":"The SQL statement should match the one initially used to populate the &lt;xref:System.Data.DataSet&gt;.","pos":[2155,2252],"source":"  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>."},{"content":"2.","pos":[2258,2260]},{"content":"The <bpt id=\"p1\">**</bpt>Key<ept id=\"p1\">**</ept> column information must be present.","pos":[2262,2309],"source":"  The **Key** column information must be present."},{"content":"If primary key information is present, any duplicate rows are reconciled and only appear once in the &lt;xref:System.Data.DataTable&gt; that corresponds to the &lt;xref:System.Data.DataSet&gt;.","pos":[2316,2497],"source":"       If primary key information is present, any duplicate rows are reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>."},{"content":"Primary key information may be set either through &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;, by specifying the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; property of the &lt;xref:System.Data.DataTable&gt;, or by setting the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt; property to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[2498,2814],"source":" Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`."},{"content":"If the <ph id=\"ph1\">`SelectCommand`</ph> returns the results of an OUTER JOIN, the <ph id=\"ph2\">`DataAdapter`</ph> does not set a &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; value for the resulting &lt;xref:System.Data.DataTable&gt;.","pos":[2821,3011],"source":"       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>."},{"content":"You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.","pos":[3012,3108]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Primary Keys<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3109,3198],"source":" For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[3204,3461],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use Fill with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[3462,3592],"source":" To retrieve schema information for multiple results, use Fill with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."}]},{"pos":[25773,25863],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to fill with records and, if necessary, schema.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if necessary, schema."},{"pos":[25920,26097],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,102],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[103,177]}]},{"pos":[26573,26757],"content":"Adds or refreshes rows in a specified range in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in the data source using the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> name.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in a specified range in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataTable\"></xref> name."},{"pos":[26770,31004],"content":"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table.       The overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataTable` as a parameter only obtains the first result. Use an overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataSet` as a parameter to obtain multiple results.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(\"aaa\");    dataset.Tables.Add(\"AAA\");    adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.       adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(\"aaa\");       adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```       You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.Fill%2A> and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method retrieves rows from the data source using the SELECT statement specified by an associated &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt; property.","pos":[0,209],"source":"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property."},{"content":"The connection object associated with the SELECT statement must be valid, but it does not need to be open.","pos":[210,316]},{"content":"If the connection is closed before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it is opened to retrieve data, then closed.","pos":[317,454],"source":" If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed."},{"content":"If the connection is open before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it remains open.","pos":[455,563],"source":" If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; operation then adds the rows to destination &lt;xref:System.Data.DataTable&gt; objects in the &lt;xref:System.Data.DataSet&gt;, creating the &lt;xref:System.Data.DataTable&gt; objects if they do not already exist.","pos":[570,817],"source":"       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist."},{"content":"When creating &lt;xref:System.Data.DataTable&gt; objects, the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; operation normally creates only column name metadata.","pos":[818,975],"source":" When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata."},{"content":"However, if the &lt;xref:System.Data.IDataAdapter.MissingSchemaAction%2A&gt; property is set to <ph id=\"ph1\">`AddWithKey`</ph>, appropriate primary keys and constraints are also created.","pos":[976,1138],"source":" However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created."},{"content":"If the &lt;xref:System.Data.Common.DbDataAdapter&gt; encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[1145,1396],"source":"       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[1397,1551],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When multiple result sets are added to the &lt;xref:System.Data.DataSet&gt; each result set is placed in a separate table.","pos":[1552,1668],"source":" When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table."},{"content":"The overload of &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; that takes <ph id=\"ph1\">`DataTable`</ph> as a parameter only obtains the first result.","pos":[1675,1807],"source":"       The overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataTable` as a parameter only obtains the first result."},{"content":"Use an overload of &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; that takes <ph id=\"ph1\">`DataSet`</ph> as a parameter to obtain multiple results.","pos":[1808,1938],"source":" Use an overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataSet` as a parameter to obtain multiple results."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method supports scenarios where the &lt;xref:System.Data.DataSet&gt; contains multiple &lt;xref:System.Data.DataTable&gt; objects whose names differ only by case.","pos":[1945,2147],"source":"       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case."},{"content":"In such situations, &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.","pos":[2148,2335],"source":" In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists."},{"content":"The following C# code illustrates this behavior.","pos":[2336,2384]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();    dataset.Tables.Add(\"aaa\");    dataset.Tables.Add(\"AAA\");    adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.       adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```</ph>       If &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called and the &lt;xref:System.Data.DataSet&gt; contains only one &lt;xref:System.Data.DataTable&gt; whose name differs only by case, that &lt;xref:System.Data.DataTable&gt; is updated.","pos":[2390,2878],"source":"```   DataSet dataset = new DataSet();    dataset.Tables.Add(\"aaa\");    dataset.Tables.Add(\"AAA\");    adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.       adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated."},{"content":"In this scenario, the comparison is case insensitive.","pos":[2879,2932]},{"content":"The following C# code illustrates this behavior.","pos":[2933,2981]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();    dataset.Tables.Add(\"aaa\");       adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```</ph>       You can use the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method multiple times on the same &lt;xref:System.Data.DataTable&gt;.","pos":[2987,3310],"source":"```   DataSet dataset = new DataSet();    dataset.Tables.Add(\"aaa\");       adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```       You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>."},{"content":"If a primary key exists, incoming rows are merged with matching rows that already exist.","pos":[3311,3399]},{"content":"If no primary key exists, incoming rows are appended to the &lt;xref:System.Data.DataTable&gt;.","pos":[3400,3489],"source":" If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>."},{"content":"If the <ph id=\"ph1\">`SelectCommand`</ph> returns the results of an OUTER JOIN, the <ph id=\"ph2\">`DataAdapter`</ph> does not set a &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; value for the resulting &lt;xref:System.Data.DataTable&gt;.","pos":[3496,3686],"source":"       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>."},{"content":"You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.","pos":[3687,3783]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Primary Keys<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3784,3873],"source":" For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; and &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for a .NET Framework data provider retrieves schema information for only the first result.","pos":[3879,4175],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.Fill%2A> and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result."}]},{"pos":[31169,31253],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use for table mapping.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.Data.DataTable\"></xref> to use for table mapping."},{"pos":[31310,31487],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,102],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[103,177]}]},{"pos":[31663,31691],"content":"The source table is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source table is invalid.","pos":[0,28]}]},{"pos":[32138,32347],"content":"Adds or refreshes rows in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in the data source using the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> names.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataSet\"></xref> and <xref href=\"System.Data.DataTable\"></xref> names."},{"pos":[32360,37477],"content":"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \"columnname1\", \"columnname2\", \"columnname3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on.       When the query specified returns multiple results, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on). Since no table is created for a query that does not return rows, if you were to process an insert query followed by a select query, the table created for the select query would be named \"Table\", because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statement, be aware of the following:      -   If one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.       When using subsequent <xref:System.Data.Common.DbDataAdapter.Fill%2A> calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:      1.  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.      2.  The **Key** column information must be present. If primary key information is present, any duplicate rows are reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see[Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method retrieves the data from the data source using a SELECT statement.","pos":[0,124],"source":"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement."},{"content":"The &lt;xref:System.Data.IDbConnection&gt; object associated with the select command must be valid, but it does not need to be open.","pos":[125,251],"source":" The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to be open."},{"content":"If the &lt;xref:System.Data.IDbConnection&gt; is closed before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it is opened to retrieve data, then closed.","pos":[252,411],"source":" If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed."},{"content":"If the connection is open before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it remains open.","pos":[412,520],"source":" If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open."},{"content":"If a command does not return any rows, no tables are added to the &lt;xref:System.Data.DataSet&gt;, and no exception is raised.","pos":[527,648],"source":"       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised."},{"content":"If the &lt;xref:System.Data.Common.DbDataAdapter&gt; object encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it will generate names for the subsequent columns, using the pattern \"columnname1\", \"columnname2\", \"columnname3\", and so on.","pos":[655,911],"source":"       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \"columnname1\", \"columnname2\", \"columnname3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[912,1066],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When the query specified returns multiple results, each result set is placed in a separate table.","pos":[1073,1170]},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on).","pos":[1171,1315]},{"content":"Since no table is created for a query that does not return rows, if you were to process an insert query followed by a select query, the table created for the select query would be named \"Table\", because it is the first table created.","pos":[1316,1549]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[1550,1663]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method supports scenarios where the &lt;xref:System.Data.DataSet&gt; contains multiple &lt;xref:System.Data.DataTable&gt; objects whose names differ only by case.","pos":[1670,1872],"source":"       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case."},{"content":"In such situations, &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.","pos":[1873,2060],"source":" In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists."},{"content":"The following C# code illustrates this behavior.","pos":[2061,2109]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```</ph>       If &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called and the &lt;xref:System.Data.DataSet&gt; contains only one &lt;xref:System.Data.DataTable&gt; whose name differs only by case, that &lt;xref:System.Data.DataTable&gt; is updated.","pos":[2115,2596],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated."},{"content":"In this scenario, the comparison is case insensitive.","pos":[2597,2650]},{"content":"The following C# code illustrates this behavior.","pos":[2651,2699]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```</ph>       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables.","pos":[2705,3047],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables."},{"content":"The remainder of the operation is aborted.","pos":[3048,3090]},{"content":"When the SELECT statement used to populate the &lt;xref:System.Data.DataSet&gt; returns multiple results, such as a batch SQL statement, be aware of the following:      -   If one of the results contains an error, all subsequent results are skipped and not added to the &lt;xref:System.Data.DataSet&gt;.","pos":[3097,3388],"source":"       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statement, be aware of the following:      -   If one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>."},{"content":"When using subsequent &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; calls to refresh the contents of the &lt;xref:System.Data.DataSet&gt;, two conditions must be met:      1.","pos":[3395,3565],"source":"       When using subsequent <xref:System.Data.Common.DbDataAdapter.Fill%2A> calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:      1."},{"content":"The SQL statement should match the one initially used to populate the &lt;xref:System.Data.DataSet&gt;.","pos":[3567,3664],"source":"  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>."},{"content":"2.","pos":[3670,3672]},{"content":"The <bpt id=\"p1\">**</bpt>Key<ept id=\"p1\">**</ept> column information must be present.","pos":[3674,3721],"source":"  The **Key** column information must be present."},{"content":"If primary key information is present, any duplicate rows are reconciled and only appear once in the &lt;xref:System.Data.DataTable&gt; that corresponds to the &lt;xref:System.Data.DataSet&gt;.","pos":[3722,3903],"source":" If primary key information is present, any duplicate rows are reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>."},{"content":"Primary key information may be set either through &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;, by specifying the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; property of the &lt;xref:System.Data.DataTable&gt;, or by setting the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt; property to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[3904,4220],"source":" Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`."},{"content":"If the <ph id=\"ph1\">`SelectCommand`</ph> returns the results of an OUTER JOIN, the <ph id=\"ph2\">`DataAdapter`</ph> does not set a &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; value for the resulting &lt;xref:System.Data.DataTable&gt;.","pos":[4227,4417],"source":"       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>."},{"content":"You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.","pos":[4418,4514]},{"content":"For more information, see<bpt id=\"p1\">[</bpt>Defining Primary Keys<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[4515,4603],"source":" For more information, see[Defining Primary Keys](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[4609,4866],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[4867,5040],"source":" To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."}]},{"pos":[38200,38290],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to fill with records and, if necessary, schema.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if necessary, schema."},{"pos":[38355,38409],"content":"The name of the source table to use for table mapping.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the source table to use for table mapping.","pos":[0,54]}]},{"pos":[38466,38643],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,102],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[103,177]}]},{"pos":[38799,38827],"content":"The source table is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source table is invalid.","pos":[0,28]}]},{"pos":[39418,39684],"content":"Adds or refreshes rows in a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in the data source using the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> and <bpt id=\"p4\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in a <xref href=\"System.Data.DataTable\"></xref> to match those in the data source using the specified <xref href=\"System.Data.DataTable\"></xref>, <xref href=\"System.Data.IDbCommand\"></xref> and <xref href=\"System.Data.CommandBehavior\"></xref>."},{"pos":[39697,42702],"content":"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data and then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to the specified destination <xref:System.Data.DataTable> object in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> object if it does not already exist. When creating a <xref:System.Data.DataTable> object, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on.       The overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataTable` as a parameter only obtains the first result. Use an overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataSet` as a parameter to obtain multiple results.       You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method retrieves rows from the data source using the SELECT statement specified by an associated &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt; property.","pos":[0,209],"source":"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property."},{"content":"The connection object associated with the SELECT statement must be valid, but it does not need to be open.","pos":[210,316]},{"content":"If the connection is closed before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it is opened to retrieve data and then closed.","pos":[317,457],"source":" If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data and then closed."},{"content":"If the connection is open before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it remains open.","pos":[458,566],"source":" If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; operation then adds the rows to the specified destination &lt;xref:System.Data.DataTable&gt; object in the &lt;xref:System.Data.DataSet&gt;, creating the &lt;xref:System.Data.DataTable&gt; object if it does not already exist.","pos":[573,832],"source":"       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to the specified destination <xref:System.Data.DataTable> object in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> object if it does not already exist."},{"content":"When creating a &lt;xref:System.Data.DataTable&gt; object, the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; operation normally creates only column name metadata.","pos":[833,991],"source":" When creating a <xref:System.Data.DataTable> object, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata."},{"content":"However, if the &lt;xref:System.Data.IDataAdapter.MissingSchemaAction%2A&gt; property is set to <ph id=\"ph1\">`AddWithKey`</ph>, appropriate primary keys and constraints are also created.","pos":[992,1154],"source":" However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created."},{"content":"If the &lt;xref:System.Data.Common.DbDataAdapter&gt; object encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it will generate names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[1161,1423],"source":"       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[1424,1578],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"The overload of &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; that takes <ph id=\"ph1\">`DataTable`</ph> as a parameter only obtains the first result.","pos":[1585,1717],"source":"       The overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataTable` as a parameter only obtains the first result."},{"content":"Use an overload of &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; that takes <ph id=\"ph1\">`DataSet`</ph> as a parameter to obtain multiple results.","pos":[1718,1848],"source":" Use an overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataSet` as a parameter to obtain multiple results."},{"content":"You can use the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method multiple times on the same &lt;xref:System.Data.DataTable&gt;.","pos":[1855,1982],"source":"       You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>."},{"content":"If a primary key exists, incoming rows are merged with matching rows that already exist.","pos":[1983,2071]},{"content":"If no primary key exists, incoming rows are appended to the &lt;xref:System.Data.DataTable&gt;.","pos":[2072,2161],"source":" If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>."},{"content":"If the <ph id=\"ph1\">`SelectCommand`</ph> returns the results of an OUTER JOIN, the <ph id=\"ph2\">`DataAdapter`</ph> does not set a &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; value for the resulting &lt;xref:System.Data.DataTable&gt;.","pos":[2168,2358],"source":"       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>."},{"content":"You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.","pos":[2359,2455]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Primary Keys<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2456,2545],"source":" For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[2551,2808],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[2809,2982],"source":" To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."}]},{"pos":[42948,43040],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to fill with records and, if necessary, schema.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> to fill with records and, if necessary, schema."},{"pos":[43113,43181],"content":"The SQL SELECT statement used to retrieve rows from the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SQL SELECT statement used to retrieve rows from the data source.","pos":[0,68]}]},{"pos":[43260,43327],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.CommandBehavior\"></xref> values."},{"pos":[43384,43563],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,104],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[105,179]}]},{"pos":[44137,44336],"content":"Adds or refreshes rows in a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in the data source starting at the specified record and retrieving up to the specified maximum number of records.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in a <xref href=\"System.Data.DataTable\"></xref> to match those in the data source starting at the specified record and retrieving up to the specified maximum number of records."},{"pos":[44349,47668],"content":"The <xref:System.Data.Common.DataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DataAdapter.Fill%2A> is called, it is opened to retrieve data, and then it is closed. If the connection is open before <xref:System.Data.Common.DataAdapter.Fill%2A> is called, it remains open.       The <xref:System.Data.Common.DataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).       If the data adapter encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"columnname1\", \"columnname2\", \"columnname3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statements, if one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.       You can use the <xref:System.Data.Common.DataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.Common.DataAdapter.Fill%2A&gt; method retrieves rows from the data source using the SELECT statement specified by an associated &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt; property.","pos":[0,207],"source":"The <xref:System.Data.Common.DataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property."},{"content":"The connection object associated with the SELECT statement must be valid, but it does not need to be open.","pos":[208,314]},{"content":"If the connection is closed before &lt;xref:System.Data.Common.DataAdapter.Fill%2A&gt; is called, it is opened to retrieve data, and then it is closed.","pos":[315,460],"source":" If the connection is closed before <xref:System.Data.Common.DataAdapter.Fill%2A> is called, it is opened to retrieve data, and then it is closed."},{"content":"If the connection is open before &lt;xref:System.Data.Common.DataAdapter.Fill%2A&gt; is called, it remains open.","pos":[461,567],"source":" If the connection is open before <xref:System.Data.Common.DataAdapter.Fill%2A> is called, it remains open."},{"content":"The &lt;xref:System.Data.Common.DataAdapter.Fill%2A&gt; operation then adds the rows to destination &lt;xref:System.Data.DataTable&gt; objects in the &lt;xref:System.Data.DataSet&gt;, creating the &lt;xref:System.Data.DataTable&gt; objects if they do not already exist.","pos":[574,819],"source":"       The <xref:System.Data.Common.DataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist."},{"content":"When creating &lt;xref:System.Data.DataTable&gt; objects, the &lt;xref:System.Data.Common.DataAdapter.Fill%2A&gt; operation normally creates only column name metadata.","pos":[820,975],"source":" When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DataAdapter.Fill%2A> operation normally creates only column name metadata."},{"content":"However, if the &lt;xref:System.Data.IDataAdapter.MissingSchemaAction%2A&gt; property is set to <ph id=\"ph1\">`AddWithKey`</ph>, appropriate primary keys and constraints are also created.","pos":[976,1138],"source":" However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created."},{"content":"If the <ph id=\"ph1\">`SelectCommand`</ph> returns the results of an OUTER JOIN, the <ph id=\"ph2\">`DataAdapter`</ph> does not set a &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; value for the resulting &lt;xref:System.Data.DataTable&gt;.","pos":[1145,1335],"source":"       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>."},{"content":"You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.","pos":[1336,1432]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Primary Keys<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1433,1522],"source":" For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md)."},{"content":"If the data adapter encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"columnname1\", \"columnname2\", \"columnname3\", and so on.","pos":[1529,1747],"source":"       If the data adapter encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"columnname1\", \"columnname2\", \"columnname3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[1748,1902],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When multiple result sets are added to the &lt;xref:System.Data.DataSet&gt;, each result set is placed in a separate table.","pos":[1903,2020],"source":" When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is placed in a separate table."},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on).","pos":[2021,2165]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[2166,2279]},{"content":"When the SELECT statement used to populate the &lt;xref:System.Data.DataSet&gt; returns multiple results, such as a batch SQL statements, if one of the results contains an error, all subsequent results are skipped and not added to the &lt;xref:System.Data.DataSet&gt;.","pos":[2286,2542],"source":"       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statements, if one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>."},{"content":"You can use the &lt;xref:System.Data.Common.DataAdapter.Fill%2A&gt; method multiple times on the same &lt;xref:System.Data.DataTable&gt;.","pos":[2549,2674],"source":"       You can use the <xref:System.Data.Common.DataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>."},{"content":"If a primary key exists, incoming rows are merged with matching rows that already exist.","pos":[2675,2763]},{"content":"If no primary key exists, incoming rows are appended to the &lt;xref:System.Data.DataTable&gt;.","pos":[2764,2853],"source":" If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[2859,3116],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[3117,3290],"source":" To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."}]},{"pos":[47862,47905],"content":"The zero-based record number to start with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based record number to start with.","pos":[0,43]}]},{"pos":[47971,48013],"content":"The maximum number of records to retrieve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of records to retrieve.","pos":[0,42]}]},{"pos":[48090,48174],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to fill from the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataTable\"></xref> objects to fill from the data source."},{"pos":[48231,48416],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>. This value does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,104],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>."},{"content":"This value does not include rows affected by statements that do not return rows.","pos":[105,185]}]},{"pos":[49019,49249],"content":"Adds or refreshes rows in a specified range in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in the data source using the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> names.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in a specified range in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataSet\"></xref> and <xref href=\"System.Data.DataTable\"></xref> names."},{"pos":[49262,55278],"content":"A `maxRecords` value of 0 gets all records found after the start record. If `maxRecords` is greater than the number of remaining rows, only the remaining rows are returned, and no error is issued.       If the corresponding select command is a statement returning multiple results, <xref:System.Data.Common.DbDataAdapter.Fill%2A> only applies `maxRecords` to the first result.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the SELECT statement must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data and then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, but no exception is raised.       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on.       When the query specified returns multiple results, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on). Because no table is created for a query that does not return rows, if you process an insert query followed by a select query, the table created for the select query is named \"Table\", because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as batch SQL statements, be aware of the following:      -   When processing multiple results from a batch SQL statement, `maxRecords` only applies to the first result. The same is true for rows containing chaptered results (.NET Framework Data Provider for OLE DB only). The top level result is limited by `maxRecords`, but all child rows are added.      -   If one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.       When using subsequent <xref:System.Data.Common.DbDataAdapter.Fill%2A> calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:      1.  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.      2.  The **Key** column information must be present.       If primary key information is present, any duplicate rows will be reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.      > [!NOTE] >  The `DataSet` will not contain more than the number of records indicated by `maxRecords`. However, the entire result set generated by the query is still returned from the server.","needQuote":false,"needEscape":true,"nodes":[{"content":"A <ph id=\"ph1\">`maxRecords`</ph> value of 0 gets all records found after the start record.","pos":[0,72],"source":"A `maxRecords` value of 0 gets all records found after the start record."},{"content":"If <ph id=\"ph1\">`maxRecords`</ph> is greater than the number of remaining rows, only the remaining rows are returned, and no error is issued.","pos":[73,196],"source":" If `maxRecords` is greater than the number of remaining rows, only the remaining rows are returned, and no error is issued."},{"content":"If the corresponding select command is a statement returning multiple results, &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; only applies <ph id=\"ph1\">`maxRecords`</ph> to the first result.","pos":[203,376],"source":"       If the corresponding select command is a statement returning multiple results, <xref:System.Data.Common.DbDataAdapter.Fill%2A> only applies `maxRecords` to the first result."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method retrieves the data from the data source using a SELECT statement.","pos":[383,507],"source":"       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement."},{"content":"The &lt;xref:System.Data.IDbConnection&gt; object associated with the SELECT statement must be valid, but it does not need to be open.","pos":[508,636],"source":" The <xref:System.Data.IDbConnection> object associated with the SELECT statement must be valid, but it does not need to be open."},{"content":"If the &lt;xref:System.Data.IDbConnection&gt; is closed before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it is opened to retrieve data and then closed.","pos":[637,799],"source":" If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data and then closed."},{"content":"If the connection is open before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it remains open.","pos":[800,908],"source":" If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open."},{"content":"If a command does not return any rows, no tables are added to the &lt;xref:System.Data.DataSet&gt;, but no exception is raised.","pos":[915,1036],"source":"       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, but no exception is raised."},{"content":"If the &lt;xref:System.Data.Common.DbDataAdapter&gt; object encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it will generate names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[1043,1305],"source":"       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[1306,1460],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When the query specified returns multiple results, each result set is placed in a separate table.","pos":[1467,1564]},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on).","pos":[1565,1709]},{"content":"Because no table is created for a query that does not return rows, if you process an insert query followed by a select query, the table created for the select query is named \"Table\", because it is the first table created.","pos":[1710,1931]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[1932,2045]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method supports scenarios where the &lt;xref:System.Data.DataSet&gt; contains multiple &lt;xref:System.Data.DataTable&gt; objects whose names differ only by case.","pos":[2052,2254],"source":"       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case."},{"content":"In such situations, &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.","pos":[2255,2442],"source":" In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists."},{"content":"The following C# code illustrates this behavior.","pos":[2443,2491]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```</ph>       If &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called and the &lt;xref:System.Data.DataSet&gt; contains only one &lt;xref:System.Data.DataTable&gt; whose name differs only by case, that &lt;xref:System.Data.DataTable&gt; is updated.","pos":[2497,2978],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated."},{"content":"In this scenario, the comparison is case insensitive.","pos":[2979,3032]},{"content":"The following C# code illustrates this behavior.","pos":[3033,3081]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```</ph>       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables.","pos":[3087,3429],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables."},{"content":"The remainder of the operation is aborted.","pos":[3430,3472]},{"content":"When the SELECT statement used to populate the &lt;xref:System.Data.DataSet&gt; returns multiple results, such as batch SQL statements, be aware of the following:      -   When processing multiple results from a batch SQL statement, <ph id=\"ph1\">`maxRecords`</ph> only applies to the first result.","pos":[3479,3752],"source":"       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as batch SQL statements, be aware of the following:      -   When processing multiple results from a batch SQL statement, `maxRecords` only applies to the first result."},{"content":"The same is true for rows containing chaptered results (.NET Framework Data Provider for OLE DB only).","pos":[3753,3855]},{"content":"The top level result is limited by <ph id=\"ph1\">`maxRecords`</ph>, but all child rows are added.","pos":[3856,3934],"source":" The top level result is limited by `maxRecords`, but all child rows are added."},{"content":"-   If one of the results contains an error, all subsequent results are skipped and not added to the &lt;xref:System.Data.DataSet&gt;.","pos":[3940,4068],"source":"      -   If one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>."},{"content":"When using subsequent &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; calls to refresh the contents of the &lt;xref:System.Data.DataSet&gt;, two conditions must be met:      1.","pos":[4075,4245],"source":"       When using subsequent <xref:System.Data.Common.DbDataAdapter.Fill%2A> calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:      1."},{"content":"The SQL statement should match the one initially used to populate the &lt;xref:System.Data.DataSet&gt;.","pos":[4247,4344],"source":"  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>."},{"content":"2.","pos":[4350,4352]},{"content":"The <bpt id=\"p1\">**</bpt>Key<ept id=\"p1\">**</ept> column information must be present.","pos":[4354,4401],"source":"  The **Key** column information must be present."},{"content":"If primary key information is present, any duplicate rows will be reconciled and only appear once in the &lt;xref:System.Data.DataTable&gt; that corresponds to the &lt;xref:System.Data.DataSet&gt;.","pos":[4408,4593],"source":"       If primary key information is present, any duplicate rows will be reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>."},{"content":"Primary key information may be set either through &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;, by specifying the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; property of the &lt;xref:System.Data.DataTable&gt;, or by setting the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt; property to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[4594,4910],"source":" Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`."},{"content":"If the <ph id=\"ph1\">`SelectCommand`</ph> returns the results of an OUTER JOIN, the <ph id=\"ph2\">`DataAdapter`</ph> does not set a &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; value for the resulting &lt;xref:System.Data.DataTable&gt;.","pos":[4917,5107],"source":"       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>."},{"content":"You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.","pos":[5108,5204]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Primary Keys<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[5205,5294],"source":" For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[5300,5557],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[5558,5731],"source":" To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> will not contain more than the number of records indicated by <ph id=\"ph3\">`maxRecords`</ph>.","pos":[5737,5839],"source":"      > [!NOTE] >  The `DataSet` will not contain more than the number of records indicated by `maxRecords`."},{"content":"However, the entire result set generated by the query is still returned from the server.","pos":[5840,5928]}]},{"pos":[56059,56149],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to fill with records and, if necessary, schema.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if necessary, schema."},{"pos":[56216,56259],"content":"The zero-based record number to start with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based record number to start with.","pos":[0,43]}]},{"pos":[56325,56367],"content":"The maximum number of records to retrieve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of records to retrieve.","pos":[0,42]}]},{"pos":[56432,56486],"content":"The name of the source table to use for table mapping.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the source table to use for table mapping.","pos":[0,54]}]},{"pos":[56543,56720],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,102],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[103,177]}]},{"pos":[56876,56932],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> is invalid."},{"pos":[57044,57120],"content":"The source table is invalid.       -or-       The connection is invalid.","needQuote":false,"needEscape":true,"nodes":[{"content":"The source table is invalid.       -or-       The connection is invalid.","pos":[0,72],"nodes":[{"content":"The source table is invalid.","pos":[0,28]},{"content":"-or-       The connection is invalid.","pos":[35,72]}]}]},{"pos":[57222,57256],"content":"The connection could not be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection could not be found.","pos":[0,34]}]},{"pos":[57352,57481],"content":"The <code>startRecord</code> parameter is less than 0.       -or-       The <code>maxRecords</code> parameter is less than 0.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startRecord</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[0,54],"source":"The <code>startRecord</code> parameter is less than 0."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxRecords</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[61,125],"source":"       -or-       The <code>maxRecords</code> parameter is less than 0."}]},{"pos":[58171,58401],"content":"Adds or refreshes rows in a specified range in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in the data source using the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> names.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in a specified range in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataSet\"></xref> and <xref href=\"System.Data.DataTable\"></xref> names."},{"pos":[58414,62456],"content":"A `maxRecords` value of 0 gets all records found after the start record. If `maxRecords` is greater than the number of remaining rows, only the remaining rows are returned and no error is issued.       The Fill method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the SELECT statement must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, but no exception is raised.       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on.       When the query specified returns multiple results, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on). Since no table is created for a query that does not return rows, if you were to process an insert query followed by a select query, the table created for the select query would be named \"Table\", because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The Fill method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.       When the SELECT statement used to populate the <xref:System.Data.DataTable> objects returns multiple results, such as a batch SQL statement, be aware of the following:      -   When processing multiple results from a batch SQL statement, `maxRecords` only applies to the first result. The same is true for rows containing chaptered results (.NET Framework Data Provider for OLE DB only). The top level result is limited by `maxRecords`, but all child rows are added.      -   If one of the results contains an error, all subsequent results are skipped.      > [!NOTE] >  The `DataSet` will not contain more than the number of records indicated by `maxRecords`. However, the entire resultset generated by the query is still returned from the server.","needQuote":false,"needEscape":true,"nodes":[{"content":"A <ph id=\"ph1\">`maxRecords`</ph> value of 0 gets all records found after the start record.","pos":[0,72],"source":"A `maxRecords` value of 0 gets all records found after the start record."},{"content":"If <ph id=\"ph1\">`maxRecords`</ph> is greater than the number of remaining rows, only the remaining rows are returned and no error is issued.","pos":[73,195],"source":" If `maxRecords` is greater than the number of remaining rows, only the remaining rows are returned and no error is issued."},{"content":"The Fill method retrieves the data from the data source using a SELECT statement.","pos":[202,283]},{"content":"The &lt;xref:System.Data.IDbConnection&gt; object associated with the SELECT statement must be valid, but it does not need to be open.","pos":[284,412],"source":" The <xref:System.Data.IDbConnection> object associated with the SELECT statement must be valid, but it does not need to be open."},{"content":"If the &lt;xref:System.Data.IDbConnection&gt; is closed before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it is opened to retrieve data, then closed.","pos":[413,572],"source":" If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed."},{"content":"If the connection is open before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it remains open.","pos":[573,681],"source":" If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open."},{"content":"If a command does not return any rows, no tables are added to the &lt;xref:System.Data.DataSet&gt;, but no exception is raised.","pos":[688,809],"source":"       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, but no exception is raised."},{"content":"If the &lt;xref:System.Data.Common.DbDataAdapter&gt; object encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it will generate names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[816,1078],"source":"       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[1079,1233],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When the query specified returns multiple results, each result set is placed in a separate table.","pos":[1240,1337]},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on).","pos":[1338,1482]},{"content":"Since no table is created for a query that does not return rows, if you were to process an insert query followed by a select query, the table created for the select query would be named \"Table\", because it is the first table created.","pos":[1483,1716]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[1717,1830]},{"content":"The Fill method supports scenarios where the &lt;xref:System.Data.DataSet&gt; contains multiple &lt;xref:System.Data.DataTable&gt; objects whose names differ only by case.","pos":[1837,1996],"source":"       The Fill method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case."},{"content":"In such situations, &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.","pos":[1997,2184],"source":" In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists."},{"content":"The following C# code illustrates this behavior.","pos":[2185,2233]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```</ph>       If &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called and the &lt;xref:System.Data.DataSet&gt; contains only one &lt;xref:System.Data.DataTable&gt; whose name differs only by case, that &lt;xref:System.Data.DataTable&gt; is updated.","pos":[2239,2720],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated."},{"content":"In this scenario, the comparison is case insensitive.","pos":[2721,2774]},{"content":"The following C# code illustrates this behavior.","pos":[2775,2823]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```</ph>       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables.","pos":[2829,3171],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables."},{"content":"The remainder of the operation is aborted.","pos":[3172,3214]},{"content":"When the SELECT statement used to populate the &lt;xref:System.Data.DataTable&gt; objects returns multiple results, such as a batch SQL statement, be aware of the following:      -   When processing multiple results from a batch SQL statement, <ph id=\"ph1\">`maxRecords`</ph> only applies to the first result.","pos":[3221,3505],"source":"       When the SELECT statement used to populate the <xref:System.Data.DataTable> objects returns multiple results, such as a batch SQL statement, be aware of the following:      -   When processing multiple results from a batch SQL statement, `maxRecords` only applies to the first result."},{"content":"The same is true for rows containing chaptered results (.NET Framework Data Provider for OLE DB only).","pos":[3506,3608]},{"content":"The top level result is limited by <ph id=\"ph1\">`maxRecords`</ph>, but all child rows are added.","pos":[3609,3687],"source":" The top level result is limited by `maxRecords`, but all child rows are added."},{"content":"-   If one of the results contains an error, all subsequent results are skipped.","pos":[3693,3773]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`DataSet`</ph> will not contain more than the number of records indicated by <ph id=\"ph3\">`maxRecords`</ph>.","pos":[3779,3881],"source":"      > [!NOTE] >  The `DataSet` will not contain more than the number of records indicated by `maxRecords`."},{"content":"However, the entire resultset generated by the query is still returned from the server.","pos":[3882,3969]}]},{"pos":[62741,62825],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to fill from the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataTable\"></xref> objects to fill from the data source."},{"pos":[62892,62935],"content":"The zero-based record number to start with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based record number to start with.","pos":[0,43]}]},{"pos":[63001,63043],"content":"The maximum number of records to retrieve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of records to retrieve.","pos":[0,42]}]},{"pos":[63116,63236],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> executed to fill the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.IDbCommand\"></xref> executed to fill the <xref href=\"System.Data.DataTable\"></xref> objects."},{"pos":[63315,63382],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.CommandBehavior\"></xref> values."},{"pos":[63439,63499],"content":"The number of rows added to or refreshed in the data tables.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows added to or refreshed in the data tables.","pos":[0,60]}]},{"pos":[63655,63711],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> is invalid."},{"pos":[63823,63899],"content":"The source table is invalid.       -or-       The connection is invalid.","needQuote":false,"needEscape":true,"nodes":[{"content":"The source table is invalid.       -or-       The connection is invalid.","pos":[0,72],"nodes":[{"content":"The source table is invalid.","pos":[0,28]},{"content":"-or-       The connection is invalid.","pos":[35,72]}]}]},{"pos":[64001,64035],"content":"The connection could not be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection could not be found.","pos":[0,34]}]},{"pos":[64131,64260],"content":"The <code>startRecord</code> parameter is less than 0.       -or-       The <code>maxRecords</code> parameter is less than 0.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startRecord</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[0,54],"source":"The <code>startRecord</code> parameter is less than 0."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxRecords</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[61,125],"source":"       -or-       The <code>maxRecords</code> parameter is less than 0."}]},{"pos":[64979,65217],"content":"Adds or refreshes rows in a specified range in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in the data source using the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and source table names, command string, and command behavior.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in a specified range in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataSet\"></xref> and source table names, command string, and command behavior."},{"pos":[65230,69444],"content":"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```       You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see[Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.Fill%2A> and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method retrieves rows from the data source using the SELECT statement specified by an associated &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt; property.","pos":[0,209],"source":"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property."},{"content":"The connection object associated with the SELECT statement must be valid, but it does not need to be open.","pos":[210,316]},{"content":"If the connection is closed before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it is opened to retrieve data, then closed.","pos":[317,454],"source":" If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed."},{"content":"If the connection is open before &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called, it remains open.","pos":[455,563],"source":" If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; operation then adds the rows to destination &lt;xref:System.Data.DataTable&gt; objects in the &lt;xref:System.Data.DataSet&gt;, creating the &lt;xref:System.Data.DataTable&gt; objects if they do not already exist.","pos":[570,817],"source":"       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist."},{"content":"When creating &lt;xref:System.Data.DataTable&gt; objects, the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; operation normally creates only column name metadata.","pos":[818,975],"source":" When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata."},{"content":"However, if the &lt;xref:System.Data.IDataAdapter.MissingSchemaAction%2A&gt; property is set to <ph id=\"ph1\">`AddWithKey`</ph>, appropriate primary keys and constraints are also created.","pos":[976,1138],"source":" However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created."},{"content":"If the &lt;xref:System.Data.Common.DbDataAdapter&gt; encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[1145,1396],"source":"       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[1397,1551],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When multiple result sets are added to the &lt;xref:System.Data.DataSet&gt; each result set is placed in a separate table.","pos":[1552,1668],"source":" When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table."},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on).","pos":[1669,1813]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[1814,1927]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method supports scenarios where the &lt;xref:System.Data.DataSet&gt; contains multiple &lt;xref:System.Data.DataTable&gt; objects whose names differ only by case.","pos":[1934,2136],"source":"       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case."},{"content":"In such situations, &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.","pos":[2137,2324],"source":" In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists."},{"content":"The following C# code illustrates this behavior.","pos":[2325,2373]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```</ph>       If &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; is called and the &lt;xref:System.Data.DataSet&gt; contains only one &lt;xref:System.Data.DataTable&gt; whose name differs only by case, that &lt;xref:System.Data.DataTable&gt; is updated.","pos":[2379,2860],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.Fill(dataset, \"aaa\"); // Fills \"aaa\", which already exists in the DataSet.   adapter.Fill(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated."},{"content":"In this scenario, the comparison is case insensitive.","pos":[2861,2914]},{"content":"The following C# code illustrates this behavior.","pos":[2915,2963]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```</ph>       You can use the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method multiple times on the same &lt;xref:System.Data.DataTable&gt;.","pos":[2969,3287],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.Fill(dataset, \"AAA\"); // Fills table \"aaa\" because only one similarly named table is in the DataSet.   ```       You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>."},{"content":"If a primary key exists, incoming rows are merged with matching rows that already exist.","pos":[3288,3376]},{"content":"If no primary key exists, incoming rows are appended to the &lt;xref:System.Data.DataTable&gt;.","pos":[3377,3466],"source":" If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>."},{"content":"If the <ph id=\"ph1\">`SelectCommand`</ph> returns the results of an OUTER JOIN, the <ph id=\"ph2\">`DataAdapter`</ph> does not set a &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; value for the resulting &lt;xref:System.Data.DataTable&gt;.","pos":[3473,3663],"source":"       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>."},{"content":"You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.","pos":[3664,3760]},{"content":"For more information, see<bpt id=\"p1\">[</bpt>Defining Primary Keys<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3761,3849],"source":" For more information, see[Defining Primary Keys](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; and &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for a .NET Framework data provider retrieves schema information for only the first result.","pos":[3855,4151],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.Fill%2A> and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result."}]},{"pos":[69732,69822],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to fill with records and, if necessary, schema.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if necessary, schema."},{"pos":[69889,69932],"content":"The zero-based record number to start with.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based record number to start with.","pos":[0,43]}]},{"pos":[69998,70040],"content":"The maximum number of records to retrieve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of records to retrieve.","pos":[0,42]}]},{"pos":[70105,70159],"content":"The name of the source table to use for table mapping.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the source table to use for table mapping.","pos":[0,54]}]},{"pos":[70232,70300],"content":"The SQL SELECT statement used to retrieve rows from the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SQL SELECT statement used to retrieve rows from the data source.","pos":[0,68]}]},{"pos":[70379,70446],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.CommandBehavior\"></xref> values."},{"pos":[70503,70680],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,102],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[103,177]}]},{"pos":[70856,70884],"content":"The source table is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source table is invalid.","pos":[0,28]}]},{"pos":[70980,71109],"content":"The <code>startRecord</code> parameter is less than 0.       -or-       The <code>maxRecords</code> parameter is less than 0.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startRecord</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[0,54],"source":"The <code>startRecord</code> parameter is less than 0."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxRecords</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[61,125],"source":"       -or-       The <code>maxRecords</code> parameter is less than 0."}]},{"pos":[71516,71587],"content":"Gets or sets the behavior of the command used to fill the data adapter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the behavior of the command used to fill the data adapter.","pos":[0,71]}]},{"pos":[71754,71852],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the command used to fill the data adapter.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.CommandBehavior\"></xref> of the command used to fill the data adapter."},{"pos":[72442,72690],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> named \"Table\" to the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and configures the schema to match that in the data source based on the specified <bpt id=\"p3\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Data.DataTable\"></xref> named \"Table\" to the specified <xref href=\"System.Data.DataSet\"></xref> and configures the schema to match that in the data source based on the specified <xref href=\"System.Data.SchemaType\"></xref>."},{"pos":[72703,77549],"content":"This method retrieves the schema information from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Primary key information is used during <xref:System.Data.Common.DbDataAdapter.Fill%2A> to find and replace any rows whose key columns match. If this is not the desired behavior, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> without requesting schema information.       If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is left open.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method retrieves the schema information from the data source using the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;.","pos":[0,127],"source":"This method retrieves the schema information from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>."},{"content":"A &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; operation adds a &lt;xref:System.Data.DataTable&gt; to the destination &lt;xref:System.Data.DataSet&gt;.","pos":[134,282],"source":"       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>."},{"content":"It then adds columns to the &lt;xref:System.Data.DataColumnCollection&gt; of the &lt;xref:System.Data.DataTable&gt;, and configures the following &lt;xref:System.Data.DataColumn&gt; properties if they exist at the data source:      -   &lt;xref:System.Data.DataColumn.AllowDBNull%2A&gt;      -   &lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;.","pos":[283,602],"source":" It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>."},{"content":"You must set &lt;xref:System.Data.DataColumn.AutoIncrementStep%2A&gt; and &lt;xref:System.Data.DataColumn.AutoIncrementSeed%2A&gt; separately.","pos":[603,733],"source":" You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately."},{"content":"-   &lt;xref:System.Data.DataColumn.MaxLength%2A&gt;      -   &lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;      -   &lt;xref:System.Data.DataColumn.Unique%2A&gt;       &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; also configures the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; and &lt;xref:System.Data.DataTable.Constraints%2A&gt; properties according to the following rules:      -   If one or more primary key columns are returned by the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;, they are used as the primary key columns for the &lt;xref:System.Data.DataTable&gt;.","pos":[739,1296],"source":"      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>."},{"content":"-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable.","pos":[1302,1472]},{"content":"If any of the columns are nullable, a &lt;xref:System.Data.UniqueConstraint&gt; is added to the &lt;xref:System.Data.ConstraintCollection&gt;, but the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; property is not set.","pos":[1473,1675],"source":" If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set."},{"content":"-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the &lt;xref:System.Data.DataTable&gt;.","pos":[1681,1843],"source":"      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>."},{"content":"Note that primary keys and unique constraints are added to the &lt;xref:System.Data.ConstraintCollection&gt; according to the preceding rules, but other constraint types are not added.","pos":[1850,2028],"source":"       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added."},{"content":"If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.","pos":[2035,2261]},{"content":"To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.","pos":[2262,2410]},{"content":"For more information about specifying query hints, see <bpt id=\"p1\">[</bpt>Query Hint (Transact-SQL)<ept id=\"p1\">](http://msdn.microsoft.com/library/ms181714.aspx)</ept>.","pos":[2411,2543],"source":" For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)."},{"content":"Primary key information is used during &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; to find and replace any rows whose key columns match.","pos":[2550,2690],"source":"       Primary key information is used during <xref:System.Data.Common.DbDataAdapter.Fill%2A> to find and replace any rows whose key columns match."},{"content":"If this is not the desired behavior, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; without requesting schema information.","pos":[2691,2818],"source":" If this is not the desired behavior, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> without requesting schema information."},{"content":"If the &lt;xref:System.Data.IDataAdapter&gt; encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[2825,3068],"source":"       If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[3069,3223],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When multiple result sets are added to the &lt;xref:System.Data.DataSet&gt; each result set is placed in a separate table.","pos":[3224,3340],"source":" When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table."},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.).","pos":[3341,3486]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[3487,3600]},{"content":"The &lt;xref:System.Data.IDbConnection&gt; object associated with the select command must be valid, but it does not need to open.","pos":[3607,3730],"source":"       The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to open."},{"content":"If the &lt;xref:System.Data.IDbConnection&gt; is closed before &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; is called, it is opened to retrieve data, then closed.","pos":[3731,3896],"source":" If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed."},{"content":"If the connection is open before &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; is called, it is left open.","pos":[3897,4011],"source":" If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is left open."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[4017,4274],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[4275,4448],"source":" To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."},{"content":"When using &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed.","pos":[4455,4629],"source":"       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed."},{"content":"The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements.","pos":[4630,4745]},{"content":"See SQL Server Books Online for more information.","pos":[4746,4795]}]},{"pos":[78235,78302],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to insert the schema in.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataSet\"></xref> to insert the schema in."},{"pos":[78378,78478],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that specify how to insert the schema.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.SchemaType\"></xref> values that specify how to insert the schema."},{"pos":[78546,78692],"content":"A reference to a collection of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that were added to the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A reference to a collection of <xref href=\"System.Data.DataTable\"></xref> objects that were added to the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[79283,79432],"content":"Configures the schema of the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> based on the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Configures the schema of the specified <xref href=\"System.Data.DataTable\"></xref> based on the specified <xref href=\"System.Data.SchemaType\"></xref>."},{"pos":[79445,84039],"content":"The FillSchema method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before FillSchema is called, it is opened to retrieve data, then closed. If the connection is open before FillSchema is called, it remains open.       A FillSchema operation returns a <xref:System.Data.DataTable>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       FillSchema also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If a <xref:System.Data.DataTable.PrimaryKey%2A> has already been defined for the `DataTable`, or the `DataTable` contains data, the `PrimaryKey` property will not be set.      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the `DataTable`.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the `PrimaryKey` property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the `DataTable`.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added. This process may require several round-trips to the server.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       FillSchema does not return any rows. Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of FillSchema for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.       When using FillSchema, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"The FillSchema method retrieves the schema from the data source using the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;.","pos":[0,125],"source":"The FillSchema method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>."},{"content":"The connection object associated with the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt; must be valid, but it does not need to be open.","pos":[126,266],"source":" The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open."},{"content":"If the connection is closed before FillSchema is called, it is opened to retrieve data, then closed.","pos":[267,367]},{"content":"If the connection is open before FillSchema is called, it remains open.","pos":[368,439]},{"content":"A FillSchema operation returns a &lt;xref:System.Data.DataTable&gt;.","pos":[446,508],"source":"       A FillSchema operation returns a <xref:System.Data.DataTable>."},{"content":"It then adds columns to the &lt;xref:System.Data.DataColumnCollection&gt; of the &lt;xref:System.Data.DataTable&gt;, and configures the following &lt;xref:System.Data.DataColumn&gt; properties if they exist at the data source:      -   &lt;xref:System.Data.DataColumn.AllowDBNull%2A&gt;      -   &lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;.","pos":[509,828],"source":" It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>."},{"content":"You must set &lt;xref:System.Data.DataColumn.AutoIncrementStep%2A&gt; and &lt;xref:System.Data.DataColumn.AutoIncrementSeed%2A&gt; separately.","pos":[829,959],"source":" You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately."},{"content":"-   &lt;xref:System.Data.DataColumn.MaxLength%2A&gt;      -   &lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;      -   &lt;xref:System.Data.DataColumn.Unique%2A&gt;       FillSchema also configures the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; and &lt;xref:System.Data.DataTable.Constraints%2A&gt; properties according to the following rules:      -   If a &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; has already been defined for the <ph id=\"ph1\">`DataTable`</ph>, or the <ph id=\"ph2\">`DataTable`</ph> contains data, the <ph id=\"ph3\">`PrimaryKey`</ph> property will not be set.","pos":[965,1464],"source":"      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       FillSchema also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If a <xref:System.Data.DataTable.PrimaryKey%2A> has already been defined for the `DataTable`, or the `DataTable` contains data, the `PrimaryKey` property will not be set."},{"content":"-   If one or more primary key columns are returned by the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;, they are used as the primary key columns for the <ph id=\"ph1\">`DataTable`</ph>.","pos":[1470,1642],"source":"      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the `DataTable`."},{"content":"-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable.","pos":[1648,1818]},{"content":"If any of the columns are nullable, a &lt;xref:System.Data.UniqueConstraint&gt; is added to the &lt;xref:System.Data.ConstraintCollection&gt;, but the <ph id=\"ph1\">`PrimaryKey`</ph> property is not set.","pos":[1819,1991],"source":" If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the `PrimaryKey` property is not set."},{"content":"-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <ph id=\"ph1\">`DataTable`</ph>.","pos":[1997,2142],"source":"      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the `DataTable`."},{"content":"Note that primary keys and unique constraints are added to the &lt;xref:System.Data.ConstraintCollection&gt; according to the preceding rules, but other constraint types are not added.","pos":[2149,2327],"source":"       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added."},{"content":"This process may require several round-trips to the server.","pos":[2328,2387]},{"content":"If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.","pos":[2394,2620]},{"content":"To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.","pos":[2621,2769]},{"content":"For more information about specifying query hints, see <bpt id=\"p1\">[</bpt>Query Hint (Transact-SQL)<ept id=\"p1\">](http://msdn.microsoft.com/library/ms181714.aspx)</ept>.","pos":[2770,2902],"source":" For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)."},{"content":"If the &lt;xref:System.Data.Common.DbDataAdapter&gt; encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[2909,3160],"source":"       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[3161,3315],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When multiple result sets are added to the &lt;xref:System.Data.DataSet&gt; each result set is placed in a separate table.","pos":[3316,3432],"source":" When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table."},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.).","pos":[3433,3578]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[3579,3692]},{"content":"FillSchema does not return any rows.","pos":[3699,3735]},{"content":"Use the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method to add rows to a &lt;xref:System.Data.DataTable&gt;.","pos":[3736,3845],"source":" Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of FillSchema for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[3851,4065],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of FillSchema for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[4066,4239],"source":" To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."},{"content":"When using FillSchema, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed.","pos":[4246,4377]},{"content":"The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements.","pos":[4378,4493]},{"content":"See SQL Server Books Online for more information.","pos":[4494,4543]}]},{"pos":[84708,84805],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be filled with the schema from the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataTable\"></xref> to be filled with the schema from the data source."},{"pos":[84881,84943],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.SchemaType\"></xref> values."},{"pos":[85009,85117],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains schema information returned from the data source.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> that contains schema information returned from the data source."},{"pos":[85747,86030],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and configures the schema to match that in the data source based upon the specified <bpt id=\"p3\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> and <bpt id=\"p4\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Data.DataTable\"></xref> to the specified <xref href=\"System.Data.DataSet\"></xref> and configures the schema to match that in the data source based upon the specified <xref href=\"System.Data.SchemaType\"></xref> and <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[86043,92223],"content":"This method retrieves the schema information from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Primary key information is used during <xref:System.Data.Common.DbDataAdapter.Fill%2A> to find and replace any rows whose key columns match. If this is not the desired behavior, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> without requesting schema information.       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.FillSchema(dataset, \"aaa\"); // Fills the schema of \"aaa\", which already exists in the DataSet.   adapter.FillSchema(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.FillSchema(dataset, \"AAA\"); // Fills the schema of table \"aaa\" because only one similarly named table is in the DataSet.   ```       The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is left open.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method retrieves the schema information from the data source using the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;.","pos":[0,127],"source":"This method retrieves the schema information from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>."},{"content":"A &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; operation adds a &lt;xref:System.Data.DataTable&gt; to the destination &lt;xref:System.Data.DataSet&gt;.","pos":[134,282],"source":"       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>."},{"content":"It then adds columns to the &lt;xref:System.Data.DataColumnCollection&gt; of the &lt;xref:System.Data.DataTable&gt;, and configures the following &lt;xref:System.Data.DataColumn&gt; properties if they exist at the data source:      -   &lt;xref:System.Data.DataColumn.AllowDBNull%2A&gt;      -   &lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;.","pos":[283,602],"source":" It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>."},{"content":"You must set &lt;xref:System.Data.DataColumn.AutoIncrementStep%2A&gt; and &lt;xref:System.Data.DataColumn.AutoIncrementSeed%2A&gt; separately.","pos":[603,733],"source":" You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately."},{"content":"-   &lt;xref:System.Data.DataColumn.MaxLength%2A&gt;      -   &lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;      -   &lt;xref:System.Data.DataColumn.Unique%2A&gt;       &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; also configures the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; and &lt;xref:System.Data.DataTable.Constraints%2A&gt; properties according to the following rules:      -   If one or more primary key columns are returned by the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;, they are used as the primary key columns for the &lt;xref:System.Data.DataTable&gt;.","pos":[739,1296],"source":"      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>."},{"content":"-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable.","pos":[1302,1472]},{"content":"If any of the columns are nullable, a &lt;xref:System.Data.UniqueConstraint&gt; is added to the &lt;xref:System.Data.ConstraintCollection&gt;, but the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; property is not set.","pos":[1473,1675],"source":" If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set."},{"content":"-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the &lt;xref:System.Data.DataTable&gt;.","pos":[1681,1843],"source":"      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>."},{"content":"Note that primary keys and unique constraints are added to the &lt;xref:System.Data.ConstraintCollection&gt; according to the preceding rules, but other constraint types are not added.","pos":[1850,2028],"source":"       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added."},{"content":"If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.","pos":[2035,2261]},{"content":"To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.","pos":[2262,2410]},{"content":"For more information about specifying query hints, see <bpt id=\"p1\">[</bpt>Query Hint (Transact-SQL)<ept id=\"p1\">](http://msdn.microsoft.com/library/ms181714.aspx)</ept>.","pos":[2411,2543],"source":" For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)."},{"content":"Primary key information is used during &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; to find and replace any rows whose key columns match.","pos":[2550,2690],"source":"       Primary key information is used during <xref:System.Data.Common.DbDataAdapter.Fill%2A> to find and replace any rows whose key columns match."},{"content":"If this is not the desired behavior, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; without requesting schema information.","pos":[2691,2818],"source":" If this is not the desired behavior, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> without requesting schema information."},{"content":"If the &lt;xref:System.Data.Common.DbDataAdapter&gt; encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[2825,3076],"source":"       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[3077,3231],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When multiple result sets are added to the &lt;xref:System.Data.DataSet&gt; each result set is placed in a separate table.","pos":[3232,3348],"source":" When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table."},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.).","pos":[3349,3494]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[3495,3608]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; method supports scenarios where the &lt;xref:System.Data.DataSet&gt; contains multiple &lt;xref:System.Data.DataTable&gt; objects whose names differ only by case.","pos":[3615,3823],"source":"       The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case."},{"content":"In such situations, &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.","pos":[3824,4017],"source":" In such situations, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists."},{"content":"The following C# code illustrates this behavior.","pos":[4018,4066]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.FillSchema(dataset, \"aaa\"); // Fills the schema of \"aaa\", which already exists in the DataSet.   adapter.FillSchema(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```</ph>       If &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; is called and the &lt;xref:System.Data.DataSet&gt; contains only one &lt;xref:System.Data.DataTable&gt; whose name differs only by case, that &lt;xref:System.Data.DataTable&gt; is updated.","pos":[4072,4585],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.FillSchema(dataset, \"aaa\"); // Fills the schema of \"aaa\", which already exists in the DataSet.   adapter.FillSchema(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated."},{"content":"In this scenario, the comparison is case insensitive.","pos":[4586,4639]},{"content":"The following C# code illustrates this behavior.","pos":[4640,4688]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.FillSchema(dataset, \"AAA\"); // Fills the schema of table \"aaa\" because only one similarly named table is in the DataSet.   ```</ph>       The &lt;xref:System.Data.IDbConnection&gt; object associated with the select command must be valid, but it does not need to open.","pos":[4694,5028],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.FillSchema(dataset, \"AAA\"); // Fills the schema of table \"aaa\" because only one similarly named table is in the DataSet.   ```       The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to open."},{"content":"If the &lt;xref:System.Data.IDbConnection&gt; is closed before &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; is called, it is opened to retrieve data, then closed.","pos":[5029,5194],"source":" If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed."},{"content":"If the connection is open before &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; is called, it is left open.","pos":[5195,5309],"source":" If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is left open."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[5315,5572],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[5573,5746],"source":" To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."},{"content":"When using &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed.","pos":[5753,5927],"source":"       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed."},{"content":"The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements.","pos":[5928,6043]},{"content":"See SQL Server Books Online for more information.","pos":[6044,6093]}]},{"pos":[92917,92984],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to insert the schema in.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataSet\"></xref> to insert the schema in."},{"pos":[93060,93160],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that specify how to insert the schema.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.SchemaType\"></xref> values that specify how to insert the schema."},{"pos":[93225,93279],"content":"The name of the source table to use for table mapping.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the source table to use for table mapping.","pos":[0,54]}]},{"pos":[93347,93493],"content":"A reference to a collection of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that were added to the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A reference to a collection of <xref href=\"System.Data.DataTable\"></xref> objects that were added to the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[93659,93722],"content":"A source table from which to get the schema could not be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"A source table from which to get the schema could not be found.","pos":[0,63]}]},{"pos":[94422,94648],"content":"Configures the schema of the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> based on the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, command string, and <bpt id=\"p3\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"Configures the schema of the specified <xref href=\"System.Data.DataTable\"></xref> based on the specified <xref href=\"System.Data.SchemaType\"></xref>, command string, and <xref href=\"System.Data.CommandBehavior\"></xref> values."},{"pos":[94661,99456],"content":"The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it remains open.       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> does not return any rows. Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; method retrieves the schema from the data source using the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;.","pos":[0,168],"source":"The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>."},{"content":"The connection object associated with the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt; must be valid, but it does not need to be open.","pos":[169,309],"source":" The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open."},{"content":"If the connection is closed before &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; is called, it is opened to retrieve data, then closed.","pos":[310,453],"source":" If the connection is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed."},{"content":"If the connection is open before &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; is called, it remains open.","pos":[454,568],"source":" If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it remains open."},{"content":"A &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; operation adds a &lt;xref:System.Data.DataTable&gt; to the destination &lt;xref:System.Data.DataSet&gt;.","pos":[575,723],"source":"       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>."},{"content":"It then adds columns to the &lt;xref:System.Data.DataColumnCollection&gt; of the &lt;xref:System.Data.DataTable&gt;, and configures the following &lt;xref:System.Data.DataColumn&gt; properties if they exist at the data source:      -   &lt;xref:System.Data.DataColumn.AllowDBNull%2A&gt;      -   &lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;.","pos":[724,1043],"source":" It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>."},{"content":"You must set &lt;xref:System.Data.DataColumn.AutoIncrementStep%2A&gt; and &lt;xref:System.Data.DataColumn.AutoIncrementSeed%2A&gt; separately.","pos":[1044,1174],"source":" You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately."},{"content":"-   &lt;xref:System.Data.DataColumn.MaxLength%2A&gt;      -   &lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;      -   &lt;xref:System.Data.DataColumn.Unique%2A&gt;       &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; also configures the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; and &lt;xref:System.Data.DataTable.Constraints%2A&gt; properties according to the following rules:      -   If one or more primary key columns are returned by the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;, they are used as the primary key columns for the &lt;xref:System.Data.DataTable&gt;.","pos":[1180,1737],"source":"      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>."},{"content":"-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable.","pos":[1743,1913]},{"content":"If any of the columns are nullable, a &lt;xref:System.Data.UniqueConstraint&gt; is added to the &lt;xref:System.Data.ConstraintCollection&gt;, but the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; property is not set.","pos":[1914,2116],"source":" If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set."},{"content":"-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the &lt;xref:System.Data.DataTable&gt;.","pos":[2122,2284],"source":"      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>."},{"content":"Note that primary keys and unique constraints are added to the &lt;xref:System.Data.ConstraintCollection&gt; according to the preceding rules, but other constraint types are not added.","pos":[2291,2469],"source":"       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added."},{"content":"If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.","pos":[2476,2702]},{"content":"To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.","pos":[2703,2851]},{"content":"For more information about specifying query hints, see <bpt id=\"p1\">[</bpt>Query Hint (Transact-SQL)<ept id=\"p1\">](http://msdn.microsoft.com/library/ms181714.aspx)</ept>.","pos":[2852,2984],"source":" For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)."},{"content":"If the &lt;xref:System.Data.IDataAdapter&gt; encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[2991,3234],"source":"       If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[3235,3389],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When multiple result sets are added to the &lt;xref:System.Data.DataSet&gt; each result set is placed in a separate table.","pos":[3390,3506],"source":" When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table."},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.).","pos":[3507,3652]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[3653,3766]},{"content":"&lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; does not return any rows.","pos":[3773,3852],"source":"       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> does not return any rows."},{"content":"Use the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method to add rows to a &lt;xref:System.Data.DataTable&gt;.","pos":[3853,3962],"source":" Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[3968,4225],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[4226,4399],"source":" To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."},{"content":"When using &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed.","pos":[4406,4580],"source":"       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed."},{"content":"The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements.","pos":[4581,4696]},{"content":"See SQL Server Books Online for more information.","pos":[4697,4746]}]},{"pos":[99761,99858],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be filled with the schema from the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataTable\"></xref> to be filled with the schema from the data source."},{"pos":[99934,99996],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.SchemaType\"></xref> values."},{"pos":[100069,100137],"content":"The SQL SELECT statement used to retrieve rows from the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SQL SELECT statement used to retrieve rows from the data source.","pos":[0,68]}]},{"pos":[100216,100283],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.CommandBehavior\"></xref> values."},{"pos":[100349,100467],"content":"A of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains schema information returned from the data source.","needQuote":true,"needEscape":true,"source":"A of <xref href=\"System.Data.DataTable\"></xref> object that contains schema information returned from the data source."},{"pos":[101280,101514],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and configures the schema to match that in the data source based on the specified <bpt id=\"p3\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Data.DataTable\"></xref> to the specified <xref href=\"System.Data.DataSet\"></xref> and configures the schema to match that in the data source based on the specified <xref href=\"System.Data.SchemaType\"></xref>."},{"pos":[101527,107648],"content":"The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it remains open.       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.FillSchema(dataset, \"aaa\"); // Fills the schema of \"aaa\", which already exists in the DataSet.   adapter.FillSchema(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.FillSchema(dataset, \"AAA\"); // Fills the schema of table \"aaa\" because only one similarly named table is in the DataSet.   ```       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> does not return any rows. Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; method retrieves the schema from the data source using the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;.","pos":[0,168],"source":"The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>."},{"content":"The connection object associated with the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt; must be valid, but it does not need to be open.","pos":[169,309],"source":" The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open."},{"content":"If the connection is closed before &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; is called, it is opened to retrieve data, then closed.","pos":[310,453],"source":" If the connection is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed."},{"content":"If the connection is open before &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; is called, it remains open.","pos":[454,568],"source":" If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it remains open."},{"content":"A &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; operation adds a &lt;xref:System.Data.DataTable&gt; to the destination &lt;xref:System.Data.DataSet&gt;.","pos":[575,723],"source":"       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>."},{"content":"It then adds columns to the &lt;xref:System.Data.DataColumnCollection&gt; of the &lt;xref:System.Data.DataTable&gt;, and configures the following &lt;xref:System.Data.DataColumn&gt; properties if they exist at the data source:      -   &lt;xref:System.Data.DataColumn.AllowDBNull%2A&gt;      -   &lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;.","pos":[724,1043],"source":" It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>."},{"content":"You must set &lt;xref:System.Data.DataColumn.AutoIncrementStep%2A&gt; and &lt;xref:System.Data.DataColumn.AutoIncrementSeed%2A&gt; separately.","pos":[1044,1174],"source":" You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately."},{"content":"-   &lt;xref:System.Data.DataColumn.MaxLength%2A&gt;      -   &lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;      -   &lt;xref:System.Data.DataColumn.Unique%2A&gt;       &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; also configures the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; and &lt;xref:System.Data.DataTable.Constraints%2A&gt; properties according to the following rules:      -   If one or more primary key columns are returned by the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;, they are used as the primary key columns for the &lt;xref:System.Data.DataTable&gt;.","pos":[1180,1737],"source":"      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>."},{"content":"-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable.","pos":[1743,1913]},{"content":"If any of the columns are nullable, a &lt;xref:System.Data.UniqueConstraint&gt; is added to the &lt;xref:System.Data.ConstraintCollection&gt;, but the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; property is not set.","pos":[1914,2116],"source":" If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set."},{"content":"-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the &lt;xref:System.Data.DataTable&gt;.","pos":[2122,2284],"source":"      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>."},{"content":"Note that primary keys and unique constraints are added to the &lt;xref:System.Data.ConstraintCollection&gt; according to the preceding rules, but other constraint types are not added.","pos":[2291,2469],"source":"       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added."},{"content":"If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.","pos":[2476,2702]},{"content":"To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.","pos":[2703,2851]},{"content":"For more information about specifying query hints, see <bpt id=\"p1\">[</bpt>Query Hint (Transact-SQL)<ept id=\"p1\">](http://msdn.microsoft.com/library/ms181714.aspx)</ept>.","pos":[2852,2984],"source":" For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)."},{"content":"If the &lt;xref:System.Data.IDataAdapter&gt; encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[2991,3234],"source":"       If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[3235,3389],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When multiple result sets are added to the &lt;xref:System.Data.DataSet&gt; each result set is placed in a separate table.","pos":[3390,3506],"source":" When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table."},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on.).","pos":[3507,3652]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[3653,3766]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; method supports scenarios where the &lt;xref:System.Data.DataSet&gt; contains multiple &lt;xref:System.Data.DataTable&gt; objects whose names differ only by case.","pos":[3773,3981],"source":"       The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case."},{"content":"In such situations, &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.","pos":[3982,4175],"source":" In such situations, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists."},{"content":"The following C# code illustrates this behavior.","pos":[4176,4224]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.FillSchema(dataset, \"aaa\"); // Fills the schema of \"aaa\", which already exists in the DataSet.   adapter.FillSchema(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```</ph>       If &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; is called and the &lt;xref:System.Data.DataSet&gt; contains only one &lt;xref:System.Data.DataTable&gt; whose name differs only by case, that &lt;xref:System.Data.DataTable&gt; is updated.","pos":[4230,4743],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   dataset.Tables.Add(\"AAA\");   adapter.FillSchema(dataset, \"aaa\"); // Fills the schema of \"aaa\", which already exists in the DataSet.   adapter.FillSchema(dataset, \"Aaa\"); // Adds a new table called \"Aaa\".   ```       If <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated."},{"content":"In this scenario, the comparison is case insensitive.","pos":[4744,4797]},{"content":"The following C# code illustrates this behavior.","pos":[4798,4846]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.FillSchema(dataset, \"AAA\"); // Fills the schema of table \"aaa\" because only one similarly named table is in the DataSet.   ```</ph>       &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; does not return any rows.","pos":[4852,5142],"source":"```   DataSet dataset = new DataSet();   dataset.Tables.Add(\"aaa\");   adapter.FillSchema(dataset, \"AAA\"); // Fills the schema of table \"aaa\" because only one similarly named table is in the DataSet.   ```       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> does not return any rows."},{"content":"Use the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method to add rows to a &lt;xref:System.Data.DataTable&gt;.","pos":[5143,5252],"source":" Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[5258,5515],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[5516,5689],"source":" To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."},{"content":"When using &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed.","pos":[5696,5870],"source":"       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed."},{"content":"The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements.","pos":[5871,5986]},{"content":"See SQL Server Books Online for more information.","pos":[5987,6036]}]},{"pos":[107964,108059],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be filled with the schema from the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> to be filled with the schema from the data source."},{"pos":[108135,108197],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.SchemaType\"></xref> values."},{"pos":[108270,108338],"content":"The SQL SELECT statement used to retrieve rows from the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SQL SELECT statement used to retrieve rows from the data source.","pos":[0,68]}]},{"pos":[108403,108457],"content":"The name of the source table to use for table mapping.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the source table to use for table mapping.","pos":[0,54]}]},{"pos":[108536,108603],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.CommandBehavior\"></xref> values."},{"pos":[108671,108796],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that contain schema information returned from the data source.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.DataTable\"></xref> objects that contain schema information returned from the data source."},{"pos":[109367,109471],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from one of the commands in the current batch.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Data.IDataParameter\"></xref> from one of the commands in the current batch."},{"pos":[109483,109701],"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","needQuote":true,"needEscape":true,"nodes":[{"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","pos":[0,218],"nodes":[{"content":"In &lt;xref:System.Data.Common.DbDataAdapter&gt;, this method throws &lt;xref:System.NotSupportedException&gt;.","pos":[0,99],"source":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>."},{"content":"Classes that inherit from &lt;xref:System.Data.Common.DbDataAdapter&gt; override this method to provide support for batches.","pos":[100,218],"source":" Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."}]}]},{"pos":[109923,109979],"content":"The index of the command to retrieve the parameter from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the command to retrieve the parameter from.","pos":[0,56]}]},{"pos":[110049,110095],"content":"The index of the parameter within the command.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the parameter within the command.","pos":[0,46]}]},{"pos":[110166,110228],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.IDataParameter\"></xref> specified."},{"pos":[110411,110448],"content":"The adapter does not support batches.","needQuote":true,"needEscape":true,"nodes":[{"content":"The adapter does not support batches.","pos":[0,37]}]},{"pos":[111043,111129],"content":"Returns information about an individual update attempt within a larger batched update.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns information about an individual update attempt within a larger batched update.","pos":[0,86]}]},{"pos":[111141,111575],"content":"Data providers that support batched updating logic must override a series of virtual methods on the <xref:System.Data.Common.DbDataAdapter> class. `GetBatchedRecordsAffected` represents one of those virtual methods. The `DbDataAdapter` class relies on `GetBatchedRecordsAffected` to determine the success or failure of individual update attempts within a batch so it can mark each corresponding <xref:System.Data.DataRow> accordingly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Data providers that support batched updating logic must override a series of virtual methods on the &lt;xref:System.Data.Common.DbDataAdapter&gt; class.","pos":[0,146],"source":"Data providers that support batched updating logic must override a series of virtual methods on the <xref:System.Data.Common.DbDataAdapter> class."},{"content":"<ph id=\"ph1\">`GetBatchedRecordsAffected`</ph> represents one of those virtual methods.","pos":[147,215],"source":"`GetBatchedRecordsAffected` represents one of those virtual methods."},{"content":"The <ph id=\"ph1\">`DbDataAdapter`</ph> class relies on <ph id=\"ph2\">`GetBatchedRecordsAffected`</ph> to determine the success or failure of individual update attempts within a batch so it can mark each corresponding &lt;xref:System.Data.DataRow&gt; accordingly.","pos":[216,434],"source":" The `DbDataAdapter` class relies on `GetBatchedRecordsAffected` to determine the success or failure of individual update attempts within a batch so it can mark each corresponding <xref:System.Data.DataRow> accordingly."}]},{"pos":[111807,111880],"content":"The zero-based column ordinal of the individual command within the batch.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based column ordinal of the individual command within the batch.","pos":[0,73]}]},{"pos":[111951,112039],"content":"The number of rows affected in the data store by the specified command within the batch.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows affected in the data store by the specified command within the batch.","pos":[0,88]}]},{"pos":[112104,112361],"content":"An <xref:System.Exception> thrown during execution of the specified command. Returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) if no exception is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Exception&gt; thrown during execution of the specified command.","pos":[0,76],"source":"An <xref:System.Exception> thrown during execution of the specified command."},{"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in Visual Basic) if no exception is thrown.","pos":[77,257],"source":" Returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) if no exception is thrown."}]},{"pos":[112420,112498],"content":"Information about an individual update attempt within a larger batched update.","needQuote":true,"needEscape":true,"nodes":[{"content":"Information about an individual update attempt within a larger batched update.","pos":[0,78]}]},{"pos":[112987,113062],"content":"Gets the parameters set by the user when executing an SQL SELECT statement.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the parameters set by the user when executing an SQL SELECT statement.","pos":[0,75]}]},{"pos":[113244,113357],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that contains the parameters set by the user.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.IDataParameter\"></xref> objects that contains the parameters set by the user."},{"pos":[113843,113926],"content":"Initializes batching for the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes batching for the <xref href=\"System.Data.Common.DbDataAdapter\"></xref>."},{"pos":[113938,114156],"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","needQuote":true,"needEscape":true,"nodes":[{"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","pos":[0,218],"nodes":[{"content":"In &lt;xref:System.Data.Common.DbDataAdapter&gt;, this method throws &lt;xref:System.NotSupportedException&gt;.","pos":[0,99],"source":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>."},{"content":"Classes that inherit from &lt;xref:System.Data.Common.DbDataAdapter&gt; override this method to provide support for batches.","pos":[100,218],"source":" Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."}]}]},{"pos":[114426,114463],"content":"The adapter does not support batches.","needQuote":true,"needEscape":true,"nodes":[{"content":"The adapter does not support batches.","pos":[0,37]}]},{"pos":[114839,114910],"content":"Gets or sets a command used to insert new records into the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a command used to insert new records into the data source.","pos":[0,71]}]},{"pos":[114922,115169],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.InsertCommand%2A> will be automatically generated.","needQuote":true,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the &lt;xref:System.Data.IDbDataAdapter.InsertCommand%2A&gt; will be automatically generated.","pos":[0,247],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.InsertCommand%2A> will be automatically generated."}]},{"pos":[115732,115896],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.IDataAdapter.Update*&gt; to insert records in the data source for new rows in the data set.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.IDataAdapter.Update*> to insert records in the data source for new rows in the data set."},{"pos":[116485,116609],"content":"Raises the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_RowUpdated\" name=\"RowUpdated\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event of a .NET Framework data provider.","needQuote":true,"needEscape":true,"source":"Raises the <xref uid=\"langword_csharp_RowUpdated\" name=\"RowUpdated\" href=\"\"></xref> event of a .NET Framework data provider."},{"pos":[116622,116800],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[117011,117102],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.RowUpdatedEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Common.RowUpdatedEventArgs\"></xref> that contains the event data."},{"pos":[117700,117826],"content":"Raises the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_RowUpdating\" name=\"RowUpdating\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event of a .NET Framework data provider.","needQuote":true,"needEscape":true,"source":"Raises the <xref uid=\"langword_csharp_RowUpdating\" name=\"RowUpdating\" href=\"\"></xref> event of a .NET Framework data provider."},{"pos":[117839,118017],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[118231,118324],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.RowUpdatingEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.Common.RowUpdatingEventArgs\"></xref> that contains the event data."},{"pos":[118777,118842],"content":"Gets or sets a command used to select records in the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a command used to select records in the data source.","pos":[0,65]}]},{"pos":[119419,119590],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used during &lt;xref:System.Data.IDataAdapter.Update*&gt; to select records from data source for placement in the data set.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.IDataAdapter.Update*> to select records from data source for placement in the data set."},{"pos":[120192,120261],"content":"Gets or sets an SQL statement for deleting records from the data set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement for deleting records from the data set.","pos":[0,69]}]},{"pos":[120274,120556],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.","pos":[0,280],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.Common.DbDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,196],"source":" It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."},{"content":"For more information, see &lt;xref:System.Data.IDbDataAdapter.DeleteCommand%2A&gt;.","pos":[203,280],"source":"       For more information, see <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>."}]}]},{"pos":[120725,120902],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to delete records in the data source for deleted rows in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to delete records in the data source for deleted rows in the data set."},{"pos":[121531,121609],"content":"Gets or sets an SQL statement used to insert new records into the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement used to insert new records into the data source.","pos":[0,78]}]},{"pos":[121622,121904],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.","pos":[0,280],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.Common.DbDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,196],"source":" It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."},{"content":"For more information, see &lt;xref:System.Data.IDbDataAdapter.InsertCommand%2A&gt;.","pos":[203,280],"source":"       For more information, see <xref:System.Data.IDbDataAdapter.InsertCommand%2A>."}]}]},{"pos":[122073,122246],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to insert records in the data source for new rows in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to insert records in the data source for new rows in the data set."},{"pos":[122875,122947],"content":"Gets or sets an SQL statement used to select records in the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement used to select records in the data source.","pos":[0,72]}]},{"pos":[122960,123242],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.","pos":[0,280],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.Common.DbDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,196],"source":" It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."},{"content":"For more information, see &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;.","pos":[203,280],"source":"       For more information, see <xref:System.Data.IDbDataAdapter.SelectCommand%2A>."}]}]},{"pos":[123411,123591],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to select records from data source for placement in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to select records from data source for placement in the data set."},{"pos":[124220,124292],"content":"Gets or sets an SQL statement used to update records in the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an SQL statement used to update records in the data source.","pos":[0,72]}]},{"pos":[124305,124587],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.","pos":[0,280],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.Common.DbDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.","pos":[60,196],"source":" It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface."},{"content":"For more information, see &lt;xref:System.Data.IDbDataAdapter.UpdateCommand%2A&gt;.","pos":[203,280],"source":"       For more information, see <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>."}]}]},{"pos":[124756,124934],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; to update records in the data source for modified rows in the data set.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the data source for modified rows in the data set."},{"pos":[125482,125542],"content":"Creates a new object that is a copy of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new object that is a copy of the current instance.","pos":[0,60]}]},{"pos":[125555,125836],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.ICloneable> interface.       For more information, see <xref:System.ICloneable.Clone%2A?displayProperty=fullName>.","needQuote":false,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.ICloneable> interface.       For more information, see <xref:System.ICloneable.Clone%2A?displayProperty=fullName>.","pos":[0,279],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.Common.DbDataAdapter&gt; instance is cast to an &lt;xref:System.ICloneable&gt; interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.ICloneable> interface."},{"content":"For more information, see &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;.","pos":[194,279],"source":"       For more information, see <xref:System.ICloneable.Clone%2A?displayProperty=fullName>."}]}]},{"pos":[125965,126010],"content":"A new object that is a copy of this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new object that is a copy of this instance.","pos":[0,45]}]},{"pos":[126497,126573],"content":"Ends batching for the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Ends batching for the <xref href=\"System.Data.Common.DbDataAdapter\"></xref>."},{"pos":[126585,126803],"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","needQuote":true,"needEscape":true,"nodes":[{"content":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.","pos":[0,218],"nodes":[{"content":"In &lt;xref:System.Data.Common.DbDataAdapter&gt;, this method throws &lt;xref:System.NotSupportedException&gt;.","pos":[0,99],"source":"In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>."},{"content":"Classes that inherit from &lt;xref:System.Data.Common.DbDataAdapter&gt; override this method to provide support for batches.","pos":[100,218],"source":" Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."}]}]},{"pos":[127071,127108],"content":"The adapter does not support batches.","needQuote":true,"needEscape":true,"nodes":[{"content":"The adapter does not support batches.","pos":[0,37]}]},{"pos":[127526,127740],"content":"Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array in the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[127753,133378],"content":"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.","needQuote":false,"needEscape":true,"nodes":[{"content":"When an application calls the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method, the &lt;xref:System.Data.Common.DbDataAdapter&gt; examines the &lt;xref:System.Data.DataRow.RowState%2A&gt; property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the &lt;xref:System.Data.DataSet&gt;.","pos":[0,362],"source":"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>."},{"content":"For example, &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the &lt;xref:System.Data.DataTable&gt;.","pos":[363,596],"source":" For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>."},{"content":"It should be noted that these statements are not performed as a batch process; each row is updated individually.","pos":[603,715]},{"content":"An application can call the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs).","pos":[716,899],"source":" An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Updating Data Sources with DataAdapters<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[900,1007],"source":" For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md)."},{"content":"If INSERT, UPDATE, or DELETE statements have not been specified, the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method generates an exception.","pos":[1014,1163],"source":"       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception."},{"content":"However, you can create a &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt; or &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt; object to automatically generate SQL statements for single-table updates if you set the <ph id=\"ph1\">`SelectCommand`</ph> property of a .NET Framework data provider.","pos":[1164,1432],"source":" However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider."},{"content":"Then, any additional SQL statements that you do not set are generated by the <bpt id=\"p1\">**</bpt>CommandBuilder<ept id=\"p1\">**</ept>.","pos":[1433,1529],"source":" Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[1530,1632],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1633,1740],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method retrieves rows from the table listed in the first mapping before performing an update.","pos":[1747,1894],"source":"       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; then refreshes the row using the value of the &lt;xref:System.Data.IDbCommand.UpdatedRowSource%2A&gt; property.","pos":[1895,2054],"source":" The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property."},{"content":"Any additional rows returned are ignored.","pos":[2055,2096]},{"content":"After any data is loaded back into the &lt;xref:System.Data.DataSet&gt;, the &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised, allowing the user to inspect the reconciled &lt;xref:System.Data.DataSet&gt; row and any output parameters returned by the command.","pos":[2103,2372],"source":"       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command."},{"content":"After a row updates successfully, the changes to that row are accepted.","pos":[2373,2444]},{"content":"When using &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, the order of execution is as follows:      1.","pos":[2451,2558],"source":"       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1."},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[2560,2639],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[2645,2647]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A&gt; event is raised.","pos":[2649,2726],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised."},{"content":"3.","pos":[2732,2734]},{"content":"The command executes.","pos":[2736,2757]},{"content":"4.","pos":[2763,2765]},{"content":"If the command is set to <ph id=\"ph1\">`FirstReturnedRecord`</ph>, the first returned result is placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[2767,2885],"source":"  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>."},{"content":"5.","pos":[2891,2893]},{"content":"If there are output parameters, they are placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[2895,2977],"source":"  If there are output parameters, they are placed in the <xref:System.Data.DataRow>."},{"content":"6.","pos":[2983,2985]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised.","pos":[2987,3063],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised."},{"content":"7.","pos":[3069,3071]},{"content":"&lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; is called.","pos":[3073,3127],"source":"  <xref:System.Data.DataRow.AcceptChanges%2A> is called."},{"content":"Each command associated with the &lt;xref:System.Data.Common.DbDataAdapter&gt; usually has a parameters collection associated with it.","pos":[3134,3262],"source":"       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it."},{"content":"Parameters are mapped to the current row through the <ph id=\"ph1\">`SourceColumn`</ph> and <ph id=\"ph2\">`SourceVersion`</ph> properties of a .NET Framework data provider's <ph id=\"ph3\">`Parameter`</ph> class.","pos":[3263,3416],"source":" Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to a &lt;xref:System.Data.DataTable&gt; column that the &lt;xref:System.Data.Common.DbDataAdapter&gt; references to obtain parameter values for the current row.","pos":[3417,3587],"source":"`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to the unmapped column name before any table mappings have been applied.","pos":[3594,3688],"source":"`SourceColumn` refers to the unmapped column name before any table mappings have been applied."},{"content":"If <ph id=\"ph1\">`SourceColumn`</ph> refers to a nonexistent column, the action taken depends on one of the following &lt;xref:System.Data.MissingMappingAction&gt; values.","pos":[3689,3835],"source":" If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values."},{"content":"|Enumeration value|Action taken|   |-----------------------|------------------|   |<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|Use the source column names and table names in the &lt;xref:System.Data.DataSet&gt; if no mapping is present.|   |<ph id=\"ph2\">`MissingMappingAction.Ignore`</ph>|A &lt;xref:System.SystemException&gt; is generated.","pos":[3841,4142],"source":"      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated."},{"content":"When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |<ph id=\"ph1\">`MissingMappingAction.Error`</ph>|A &lt;xref:System.SystemException&gt; is generated.|       The <ph id=\"ph2\">`SourceColumn`</ph> property is also used to map the value for output or input/output parameters back to the <ph id=\"ph3\">`DataSet`</ph>.","pos":[4143,4461],"source":" When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`."},{"content":"An exception is generated if it refers to a nonexistent column.","pos":[4462,4525]},{"content":"The <ph id=\"ph1\">`SourceVersion`</ph> property of a .NET Framework data provider's <ph id=\"ph2\">`Parameter`</ph> class determines whether to use the Original, Current, or Proposed version of the column value.","pos":[4532,4704],"source":"       The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value."},{"content":"This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.","pos":[4705,4852]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.","pos":[4858,4979],"source":"      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued."},{"content":"To continue the update operation without generating exceptions when an error is encountered, set the &lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt; property to <ph id=\"ph1\">`true`</ph> before calling &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;.","pos":[4980,5228],"source":" To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>."},{"content":"You may also respond to errors on a per-row basis within the <ph id=\"ph1\">`RowUpdated`</ph> event of a DataAdapter.","pos":[5229,5326],"source":" You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter."},{"content":"To continue the update operation without generating an exception within the <ph id=\"ph1\">`RowUpdated`</ph> event, set the &lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt; property of the &lt;xref:System.Data.Common.RowUpdatedEventArgs&gt; to &lt;xref:System.Data.UpdateStatus&gt;.","pos":[5327,5584],"source":" To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."}]},{"pos":[133927,134019],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects used to update the data source.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.DataRow\"></xref> objects used to update the data source."},{"pos":[134076,134166],"content":"The number of rows successfully updated from the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of rows successfully updated from the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[134336,134392],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> is invalid."},{"pos":[134503,134531],"content":"The source table is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source table is invalid.","pos":[0,28]}]},{"pos":[134623,134867],"content":"No <xref href=\"System.Data.DataRow\"></xref> exists to update.       -or-       No <xref href=\"System.Data.DataTable\"></xref> exists to update.       -or-       No <xref href=\"System.Data.DataSet\"></xref> exists to use as a source.","needQuote":false,"needEscape":true,"nodes":[{"content":"No <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> exists to update.","pos":[0,61],"source":"No <xref href=\"System.Data.DataRow\"></xref> exists to update."},{"content":"-or-       No <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> exists to update.","pos":[68,142],"source":"       -or-       No <xref href=\"System.Data.DataTable\"></xref> exists to update."},{"content":"-or-       No <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> exists to use as a source.","pos":[149,230],"source":"       -or-       No <xref href=\"System.Data.DataSet\"></xref> exists to use as a source."}]},{"pos":[134983,135078],"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","pos":[0,95]}]},{"pos":[135486,135687],"content":"Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[135700,141029],"content":"When an application calls the Update method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, Update might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the Update method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The Update method retrieves rows from the table listed in the first mapping before performing an update. The Update then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using Update, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling Update. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.","needQuote":false,"needEscape":true,"nodes":[{"content":"When an application calls the Update method, the &lt;xref:System.Data.Common.DbDataAdapter&gt; examines the &lt;xref:System.Data.DataRow.RowState%2A&gt; property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the &lt;xref:System.Data.DataSet&gt;.","pos":[0,319],"source":"When an application calls the Update method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>."},{"content":"For example, Update might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the &lt;xref:System.Data.DataTable&gt;.","pos":[320,510],"source":" For example, Update might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>."},{"content":"It should be noted that these statements are not performed as a batch process; each row is updated individually.","pos":[517,629]},{"content":"An application can call the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs).","pos":[630,813],"source":" An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Updating Data Sources with DataAdapters<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[814,921],"source":" For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md)."},{"content":"If INSERT, UPDATE, or DELETE statements have not been specified, the Update method generates an exception.","pos":[928,1034]},{"content":"However, you can create a &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt; or &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt; object to automatically generate SQL statements for single-table updates if you set the <ph id=\"ph1\">`SelectCommand`</ph> property of a .NET Framework data provider.","pos":[1035,1303],"source":" However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider."},{"content":"Then, any additional SQL statements that you do not set are generated by the <bpt id=\"p1\">**</bpt>CommandBuilder<ept id=\"p1\">**</ept>.","pos":[1304,1400],"source":" Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[1401,1503],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1504,1611],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"The Update method retrieves rows from the table listed in the first mapping before performing an update.","pos":[1618,1722]},{"content":"The Update then refreshes the row using the value of the &lt;xref:System.Data.IDbCommand.UpdatedRowSource%2A&gt; property.","pos":[1723,1839],"source":" The Update then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property."},{"content":"Any additional rows returned are ignored.","pos":[1840,1881]},{"content":"After any data is loaded back into the &lt;xref:System.Data.DataSet&gt;, the &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised, allowing the user to inspect the reconciled &lt;xref:System.Data.DataSet&gt; row and any output parameters returned by the command.","pos":[1888,2157],"source":"       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command."},{"content":"After a row updates successfully, the changes to that row are accepted.","pos":[2158,2229]},{"content":"When using Update, the order of execution is as follows:      1.","pos":[2236,2300]},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[2302,2381],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[2387,2389]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A&gt; event is raised.","pos":[2391,2468],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised."},{"content":"3.","pos":[2474,2476]},{"content":"The command executes.","pos":[2478,2499]},{"content":"4.","pos":[2505,2507]},{"content":"If the command is set to <ph id=\"ph1\">`FirstReturnedRecord`</ph>, then the first returned result is placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[2509,2632],"source":"  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>."},{"content":"5.","pos":[2638,2640]},{"content":"If there are output parameters, they are placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[2642,2724],"source":"  If there are output parameters, they are placed in the <xref:System.Data.DataRow>."},{"content":"6.","pos":[2730,2732]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised.","pos":[2734,2810],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised."},{"content":"7.","pos":[2816,2818]},{"content":"&lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; is called.","pos":[2820,2874],"source":"  <xref:System.Data.DataRow.AcceptChanges%2A> is called."},{"content":"Each command associated with the &lt;xref:System.Data.Common.DbDataAdapter&gt; usually has a parameters collection associated with it.","pos":[2881,3009],"source":"       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it."},{"content":"Parameters are mapped to the current row through the <ph id=\"ph1\">`SourceColumn`</ph> and <ph id=\"ph2\">`SourceVersion`</ph> properties of a .NET Framework data provider's <ph id=\"ph3\">`Parameter`</ph> class.","pos":[3010,3163],"source":" Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to a &lt;xref:System.Data.DataTable&gt; column that the &lt;xref:System.Data.Common.DbDataAdapter&gt; references to obtain parameter values for the current row.","pos":[3164,3334],"source":"`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to the unmapped column name before any table mappings have been applied.","pos":[3341,3435],"source":"`SourceColumn` refers to the unmapped column name before any table mappings have been applied."},{"content":"If <ph id=\"ph1\">`SourceColumn`</ph> refers to a nonexistent column, the action taken depends on one of the following &lt;xref:System.Data.MissingMappingAction&gt; values.","pos":[3436,3582],"source":" If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values."},{"content":"|Enumeration value|Action taken|   |-----------------------|------------------|   |<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|Use the source column names and table names in the &lt;xref:System.Data.DataSet&gt; if no mapping is present.|   |<ph id=\"ph2\">`MissingMappingAction.Ignore`</ph>|A &lt;xref:System.SystemException&gt; is generated.","pos":[3588,3889],"source":"      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated."},{"content":"When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |<ph id=\"ph1\">`MissingMappingAction.Error`</ph>|A &lt;xref:System.SystemException&gt; is generated.|       The <ph id=\"ph2\">`SourceColumn`</ph> property is also used to map the value for output or input/output parameters back to the <ph id=\"ph3\">`DataSet`</ph>.","pos":[3890,4208],"source":" When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`."},{"content":"An exception is generated if it refers to a nonexistent column.","pos":[4209,4272]},{"content":"The <ph id=\"ph1\">`SourceVersion`</ph> property of a .NET Framework data provider's <ph id=\"ph2\">`Parameter`</ph> class determines whether to use the Original, Current, or Proposed version of the column value.","pos":[4279,4451],"source":"       The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value."},{"content":"This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.","pos":[4452,4599]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.","pos":[4605,4726],"source":"      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued."},{"content":"To continue the update operation without generating exceptions when an error is encountered, set the &lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt; property to <ph id=\"ph1\">`true`</ph> before calling Update.","pos":[4727,4932],"source":" To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling Update."},{"content":"You may also respond to errors on a per-row basis within the <ph id=\"ph1\">`RowUpdated`</ph> event of a DataAdapter.","pos":[4933,5030],"source":" You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter."},{"content":"To continue the update operation without generating an exception within the <ph id=\"ph1\">`RowUpdated`</ph> event, set the &lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt; property of the &lt;xref:System.Data.Common.RowUpdatedEventArgs&gt; to &lt;xref:System.Data.UpdateStatus&gt;.","pos":[5031,5288],"source":" To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."}]},{"pos":[141579,141655],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to update the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> used to update the data source."},{"pos":[141712,141802],"content":"The number of rows successfully updated from the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of rows successfully updated from the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[141980,142008],"content":"The source table is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source table is invalid.","pos":[0,28]}]},{"pos":[142123,142218],"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","pos":[0,95]}]},{"pos":[142636,142839],"content":"Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[142852,148482],"content":"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.","needQuote":false,"needEscape":true,"nodes":[{"content":"When an application calls the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method, the &lt;xref:System.Data.Common.DbDataAdapter&gt; examines the &lt;xref:System.Data.DataRow.RowState%2A&gt; property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the &lt;xref:System.Data.DataSet&gt;.","pos":[0,362],"source":"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>."},{"content":"For example, &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the &lt;xref:System.Data.DataTable&gt;.","pos":[363,596],"source":" For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>."},{"content":"It should be noted that these statements are not performed as a batch process; each row is updated individually.","pos":[603,715]},{"content":"An application can call the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs).","pos":[716,899],"source":" An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Updating Data Sources with DataAdapters<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[900,1007],"source":" For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md)."},{"content":"If INSERT, UPDATE, or DELETE statements have not been specified, the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method generates an exception.","pos":[1014,1163],"source":"       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception."},{"content":"However, you can create a &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt; or &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt; object to automatically generate SQL statements for single-table updates if you set the <ph id=\"ph1\">`SelectCommand`</ph> property of a .NET Framework data provider.","pos":[1164,1432],"source":" However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider."},{"content":"Then, any additional SQL statements that you do not set are generated by the <bpt id=\"p1\">**</bpt>CommandBuilder<ept id=\"p1\">**</ept>.","pos":[1433,1529],"source":" Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[1530,1632],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1633,1740],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method retrieves rows from the table listed in the first mapping before performing an update.","pos":[1747,1894],"source":"       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; then refreshes the row using the value of the &lt;xref:System.Data.IDbCommand.UpdatedRowSource%2A&gt; property.","pos":[1895,2054],"source":" The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property."},{"content":"Any additional rows returned are ignored.","pos":[2055,2096]},{"content":"After any data is loaded back into the &lt;xref:System.Data.DataSet&gt;, the &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised, allowing the user to inspect the reconciled &lt;xref:System.Data.DataSet&gt; row and any output parameters returned by the command.","pos":[2103,2372],"source":"       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command."},{"content":"After a row updates successfully, the changes to that row are accepted.","pos":[2373,2444]},{"content":"When using &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, the order of execution is as follows:      1.","pos":[2451,2558],"source":"       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1."},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[2560,2639],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[2645,2647]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A&gt; event is raised.","pos":[2649,2726],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised."},{"content":"3.","pos":[2732,2734]},{"content":"The command executes.","pos":[2736,2757]},{"content":"4.","pos":[2763,2765]},{"content":"If the command is set to <ph id=\"ph1\">`FirstReturnedRecord`</ph>, then the first returned result is placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[2767,2890],"source":"  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>."},{"content":"5.","pos":[2896,2898]},{"content":"If there are output parameters, they are placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[2900,2982],"source":"  If there are output parameters, they are placed in the <xref:System.Data.DataRow>."},{"content":"6.","pos":[2988,2990]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised.","pos":[2992,3068],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised."},{"content":"7.","pos":[3074,3076]},{"content":"&lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; is called.","pos":[3078,3132],"source":"  <xref:System.Data.DataRow.AcceptChanges%2A> is called."},{"content":"Each command associated with the &lt;xref:System.Data.Common.DbDataAdapter&gt; usually has a parameters collection associated with it.","pos":[3139,3267],"source":"       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it."},{"content":"Parameters are mapped to the current row through the <ph id=\"ph1\">`SourceColumn`</ph> and <ph id=\"ph2\">`SourceVersion`</ph> properties of a .NET Framework data provider's <ph id=\"ph3\">`Parameter`</ph> class.","pos":[3268,3421],"source":" Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to a &lt;xref:System.Data.DataTable&gt; column that the &lt;xref:System.Data.Common.DbDataAdapter&gt; references to obtain parameter values for the current row.","pos":[3422,3592],"source":"`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to the unmapped column name before any table mappings have been applied.","pos":[3599,3693],"source":"`SourceColumn` refers to the unmapped column name before any table mappings have been applied."},{"content":"If <ph id=\"ph1\">`SourceColumn`</ph> refers to a nonexistent column, the action taken depends on one of the following &lt;xref:System.Data.MissingMappingAction&gt; values.","pos":[3694,3840],"source":" If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values."},{"content":"|Enumeration value|Action taken|   |-----------------------|------------------|   |<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|Use the source column names and table names in the &lt;xref:System.Data.DataSet&gt; if no mapping is present.|   |<ph id=\"ph2\">`MissingMappingAction.Ignore`</ph>|A &lt;xref:System.SystemException&gt; is generated.","pos":[3846,4147],"source":"      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated."},{"content":"When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |<ph id=\"ph1\">`MissingMappingAction.Error`</ph>|A &lt;xref:System.SystemException&gt; is generated.|       The <ph id=\"ph2\">`SourceColumn`</ph> property is also used to map the value for output or input/output parameters back to the <ph id=\"ph3\">`DataSet`</ph>.","pos":[4148,4466],"source":" When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`."},{"content":"An exception is generated if it refers to a nonexistent column.","pos":[4467,4530]},{"content":"The <ph id=\"ph1\">`SourceVersion`</ph> property of a .NET Framework data provider's <ph id=\"ph2\">`Parameter`</ph> class determines whether to use the Original, Current, or Proposed version of the column value.","pos":[4537,4709],"source":"       The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value."},{"content":"This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.","pos":[4710,4857]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.","pos":[4863,4984],"source":"      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued."},{"content":"To continue the update operation without generating exceptions when an error is encountered, set the &lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt; property to <ph id=\"ph1\">`true`</ph> before calling &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;.","pos":[4985,5233],"source":" To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>."},{"content":"You may also respond to errors on a per-row basis within the <ph id=\"ph1\">`RowUpdated`</ph> event of a DataAdapter.","pos":[5234,5331],"source":" You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter."},{"content":"To continue the update operation without generating an exception within the <ph id=\"ph1\">`RowUpdated`</ph> event, set the &lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt; property of the &lt;xref:System.Data.Common.RowUpdatedEventArgs&gt; to &lt;xref:System.Data.UpdateStatus&gt;.","pos":[5332,5589],"source":" To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."}]},{"pos":[149033,149111],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to update the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataTable\"></xref> used to update the data source."},{"pos":[149168,149260],"content":"The number of rows successfully updated from the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of rows successfully updated from the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[149430,149486],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> is invalid."},{"pos":[149597,149625],"content":"The source table is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source table is invalid.","pos":[0,28]}]},{"pos":[149717,149961],"content":"No <xref href=\"System.Data.DataRow\"></xref> exists to update.       -or-       No <xref href=\"System.Data.DataTable\"></xref> exists to update.       -or-       No <xref href=\"System.Data.DataSet\"></xref> exists to use as a source.","needQuote":false,"needEscape":true,"nodes":[{"content":"No <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> exists to update.","pos":[0,61],"source":"No <xref href=\"System.Data.DataRow\"></xref> exists to update."},{"content":"-or-       No <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> exists to update.","pos":[68,142],"source":"       -or-       No <xref href=\"System.Data.DataTable\"></xref> exists to update."},{"content":"-or-       No <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> exists to use as a source.","pos":[149,230],"source":"       -or-       No <xref href=\"System.Data.DataSet\"></xref> exists to use as a source."}]},{"pos":[150077,150172],"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","pos":[0,95]}]},{"pos":[150713,150931],"content":"Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array of <xref href=\"System.Data.DataSet\"></xref> objects."},{"pos":[150944,156574],"content":"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.","needQuote":false,"needEscape":true,"nodes":[{"content":"When an application calls the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method, the &lt;xref:System.Data.Common.DbDataAdapter&gt; examines the &lt;xref:System.Data.DataRow.RowState%2A&gt; property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the &lt;xref:System.Data.DataSet&gt;.","pos":[0,362],"source":"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>."},{"content":"For example, &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the &lt;xref:System.Data.DataTable&gt;.","pos":[363,596],"source":" For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>."},{"content":"It should be noted that these statements are not performed as a batch process; each row is updated individually.","pos":[603,715]},{"content":"An application can call the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs).","pos":[716,899],"source":" An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Updating Data Sources with DataAdapters<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[900,1007],"source":" For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md)."},{"content":"If INSERT, UPDATE, or DELETE statements have not been specified, the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method generates an exception.","pos":[1014,1163],"source":"       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception."},{"content":"However, you can create a &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt; or &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt; object to automatically generate SQL statements for single-table updates if you set the <ph id=\"ph1\">`SelectCommand`</ph> property of a .NET Framework data provider.","pos":[1164,1432],"source":" However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider."},{"content":"Then, any additional SQL statements that you do not set are generated by the <bpt id=\"p1\">**</bpt>CommandBuilder<ept id=\"p1\">**</ept>.","pos":[1433,1529],"source":" Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[1530,1632],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1633,1740],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method retrieves rows from the table listed in the first mapping before performing an update.","pos":[1747,1894],"source":"       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; then refreshes the row using the value of the &lt;xref:System.Data.IDbCommand.UpdatedRowSource%2A&gt; property.","pos":[1895,2054],"source":" The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property."},{"content":"Any additional rows returned are ignored.","pos":[2055,2096]},{"content":"After any data is loaded back into the &lt;xref:System.Data.DataSet&gt;, the &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised, allowing the user to inspect the reconciled &lt;xref:System.Data.DataSet&gt; row and any output parameters returned by the command.","pos":[2103,2372],"source":"       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command."},{"content":"After a row updates successfully, the changes to that row are accepted.","pos":[2373,2444]},{"content":"When using &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, the order of execution is as follows:      1.","pos":[2451,2558],"source":"       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1."},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[2560,2639],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[2645,2647]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A&gt; event is raised.","pos":[2649,2726],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised."},{"content":"3.","pos":[2732,2734]},{"content":"The command executes.","pos":[2736,2757]},{"content":"4.","pos":[2763,2765]},{"content":"If the command is set to <ph id=\"ph1\">`FirstReturnedRecord`</ph>, then the first returned result is placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[2767,2890],"source":"  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>."},{"content":"5.","pos":[2896,2898]},{"content":"If there are output parameters, they are placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[2900,2982],"source":"  If there are output parameters, they are placed in the <xref:System.Data.DataRow>."},{"content":"6.","pos":[2988,2990]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised.","pos":[2992,3068],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised."},{"content":"7.","pos":[3074,3076]},{"content":"&lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; is called.","pos":[3078,3132],"source":"  <xref:System.Data.DataRow.AcceptChanges%2A> is called."},{"content":"Each command associated with the &lt;xref:System.Data.Common.DbDataAdapter&gt; usually has a parameters collection associated with it.","pos":[3139,3267],"source":"       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it."},{"content":"Parameters are mapped to the current row through the <ph id=\"ph1\">`SourceColumn`</ph> and <ph id=\"ph2\">`SourceVersion`</ph> properties of a .NET Framework data provider's <ph id=\"ph3\">`Parameter`</ph> class.","pos":[3268,3421],"source":" Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to a &lt;xref:System.Data.DataTable&gt; column that the &lt;xref:System.Data.Common.DbDataAdapter&gt; references to obtain parameter values for the current row.","pos":[3422,3592],"source":"`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to the unmapped column name before any table mappings have been applied.","pos":[3599,3693],"source":"`SourceColumn` refers to the unmapped column name before any table mappings have been applied."},{"content":"If <ph id=\"ph1\">`SourceColumn`</ph> refers to a nonexistent column, the action taken depends on one of the following &lt;xref:System.Data.MissingMappingAction&gt; values.","pos":[3694,3840],"source":" If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values."},{"content":"|Enumeration value|Action taken|   |-----------------------|------------------|   |<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|Use the source column names and table names in the &lt;xref:System.Data.DataSet&gt; if no mapping is present.|   |<ph id=\"ph2\">`MissingMappingAction.Ignore`</ph>|A &lt;xref:System.SystemException&gt; is generated.","pos":[3846,4147],"source":"      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated."},{"content":"When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |<ph id=\"ph1\">`MissingMappingAction.Error`</ph>|A &lt;xref:System.SystemException&gt; is generated.|       The <ph id=\"ph2\">`SourceColumn`</ph> property is also used to map the value for output or input/output parameters back to the <ph id=\"ph3\">`DataSet`</ph>.","pos":[4148,4466],"source":" When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`."},{"content":"An exception is generated if it refers to a nonexistent column.","pos":[4467,4530]},{"content":"The <ph id=\"ph1\">`SourceVersion`</ph> property of a .NET Framework data provider's <ph id=\"ph2\">`Parameter`</ph> class determines whether to use the Original, Current, or Proposed version of the column value.","pos":[4537,4709],"source":"       The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value."},{"content":"This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.","pos":[4710,4857]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.","pos":[4863,4984],"source":"      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued."},{"content":"To continue the update operation without generating exceptions when an error is encountered, set the &lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt; property to <ph id=\"ph1\">`true`</ph> before calling &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;.","pos":[4985,5233],"source":" To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>."},{"content":"You may also respond to errors on a per-row basis within the <ph id=\"ph1\">`RowUpdated`</ph> event of a DataAdapter.","pos":[5234,5331],"source":" You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter."},{"content":"To continue the update operation without generating an exception within the <ph id=\"ph1\">`RowUpdated`</ph> event, set the &lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt; property of the &lt;xref:System.Data.Common.RowUpdatedEventArgs&gt; to &lt;xref:System.Data.UpdateStatus&gt;.","pos":[5332,5589],"source":" To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."}]},{"pos":[156800,156892],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects used to update the data source.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.DataRow\"></xref> objects used to update the data source."},{"pos":[156983,157052],"content":"The <xref:System.Data.IDataAdapter.TableMappings*> collection to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.IDataAdapter.TableMappings*&gt; collection to use.","pos":[0,69],"source":"The <xref:System.Data.IDataAdapter.TableMappings*> collection to use."}]},{"pos":[157109,157199],"content":"The number of rows successfully updated from the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of rows successfully updated from the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[157369,157425],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> is invalid."},{"pos":[157536,157564],"content":"The source table is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source table is invalid.","pos":[0,28]}]},{"pos":[157656,157900],"content":"No <xref href=\"System.Data.DataRow\"></xref> exists to update.       -or-       No <xref href=\"System.Data.DataTable\"></xref> exists to update.       -or-       No <xref href=\"System.Data.DataSet\"></xref> exists to use as a source.","needQuote":false,"needEscape":true,"nodes":[{"content":"No <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> exists to update.","pos":[0,61],"source":"No <xref href=\"System.Data.DataRow\"></xref> exists to update."},{"content":"-or-       No <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> exists to update.","pos":[68,142],"source":"       -or-       No <xref href=\"System.Data.DataTable\"></xref> exists to update."},{"content":"-or-       No <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> exists to use as a source.","pos":[149,230],"source":"       -or-       No <xref href=\"System.Data.DataSet\"></xref> exists to use as a source."}]},{"pos":[158016,158111],"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","pos":[0,95]}]},{"pos":[158568,158826],"content":"Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> name.","needQuote":true,"needEscape":true,"source":"Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <xref href=\"System.Data.DataSet\"></xref> with the specified <xref href=\"System.Data.DataTable\"></xref> name."},{"pos":[158839,165880],"content":"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERT before UPDATE). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. When multiple tables with the same name, but different case, exist in a `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A> performs a case-sensitive comparison to find the corresponding table, and generates an exception if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet ds = new DataSet();    ds.Tables.Add(\"aaa\");    ds.Tables.Add(\"AAA\");    adapter.Update(ds, \"aaa\"); // Updates \"aaa\", which already exists in the DataSet.    adapter.Update(ds, \"AAA\"); // Updates \"AAA\", which already exists in the DataSet.       adapter.Update(ds, \"Aaa\"); // Results in an exception.   ```       If <xref:System.Data.Common.DbDataAdapter.Update%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(\"aaa\");       adapter.Update(dataset, \"AAA\"); // Updates table \"aaa\" because only one similarly named table is in the DataSet.   ```       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.","needQuote":false,"needEscape":true,"nodes":[{"content":"When an application calls the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method, the &lt;xref:System.Data.Common.DbDataAdapter&gt; examines the &lt;xref:System.Data.DataRow.RowState%2A&gt; property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the &lt;xref:System.Data.DataSet&gt;.","pos":[0,362],"source":"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>."},{"content":"For example, &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the &lt;xref:System.Data.DataTable&gt;.","pos":[363,596],"source":" For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>."},{"content":"It should be noted that these statements are not performed as a batch process; each row is updated individually.","pos":[603,715]},{"content":"An application can call the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method in situations where you must control the sequence of statement types (for example, INSERT before UPDATE).","pos":[716,897],"source":" An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERT before UPDATE)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Updating Data Sources with DataAdapters<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[898,1005],"source":" For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md)."},{"content":"If INSERT, UPDATE, or DELETE statements have not been specified, the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method generates an exception.","pos":[1012,1161],"source":"       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception."},{"content":"However, you can create a &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt; or &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt; object to automatically generate SQL statements for single-table updates if you set the <ph id=\"ph1\">`SelectCommand`</ph> property of a .NET Framework data provider.","pos":[1162,1430],"source":" However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider."},{"content":"Then, any additional SQL statements that you do not set are generated by the <bpt id=\"p1\">**</bpt>CommandBuilder<ept id=\"p1\">**</ept>.","pos":[1431,1527],"source":" Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[1528,1630],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1631,1738],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method supports scenarios where the &lt;xref:System.Data.DataSet&gt; contains multiple &lt;xref:System.Data.DataTable&gt; objects whose names differ only by case.","pos":[1745,1949],"source":"       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case."},{"content":"When multiple tables with the same name, but different case, exist in a <ph id=\"ph1\">`DataSet`</ph>, &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; performs a case-sensitive comparison to find the corresponding table, and generates an exception if no exact match exists.","pos":[1950,2205],"source":" When multiple tables with the same name, but different case, exist in a `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A> performs a case-sensitive comparison to find the corresponding table, and generates an exception if no exact match exists."},{"content":"The following C# code illustrates this behavior.","pos":[2206,2254]},{"content":"<ph id=\"ph1\">```   DataSet ds = new DataSet();    ds.Tables.Add(\"aaa\");    ds.Tables.Add(\"AAA\");    adapter.Update(ds, \"aaa\"); // Updates \"aaa\", which already exists in the DataSet.    adapter.Update(ds, \"AAA\"); // Updates \"AAA\", which already exists in the DataSet.       adapter.Update(ds, \"Aaa\"); // Results in an exception.   ```</ph>       If &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; is called and the &lt;xref:System.Data.DataSet&gt; contains only one &lt;xref:System.Data.DataTable&gt; whose name differs only by case, that &lt;xref:System.Data.DataTable&gt; is updated.","pos":[2260,2810],"source":"```   DataSet ds = new DataSet();    ds.Tables.Add(\"aaa\");    ds.Tables.Add(\"AAA\");    adapter.Update(ds, \"aaa\"); // Updates \"aaa\", which already exists in the DataSet.    adapter.Update(ds, \"AAA\"); // Updates \"AAA\", which already exists in the DataSet.       adapter.Update(ds, \"Aaa\"); // Results in an exception.   ```       If <xref:System.Data.Common.DbDataAdapter.Update%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated."},{"content":"In this scenario, the comparison is case insensitive.","pos":[2811,2864]},{"content":"The following C# code illustrates this behavior.","pos":[2865,2913]},{"content":"<ph id=\"ph1\">```   DataSet dataset = new DataSet();    dataset.Tables.Add(\"aaa\");       adapter.Update(dataset, \"AAA\"); // Updates table \"aaa\" because only one similarly named table is in the DataSet.   ```</ph>       The &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method retrieves rows from the table listed in the first mapping before performing an update.","pos":[2919,3266],"source":"```   DataSet dataset = new DataSet();    dataset.Tables.Add(\"aaa\");       adapter.Update(dataset, \"AAA\"); // Updates table \"aaa\" because only one similarly named table is in the DataSet.   ```       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update."},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; then refreshes the row using the value of the &lt;xref:System.Data.IDbCommand.UpdatedRowSource%2A&gt; property.","pos":[3267,3426],"source":" The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property."},{"content":"Any additional rows returned are ignored.","pos":[3427,3468]},{"content":"After any data is loaded back into the &lt;xref:System.Data.DataSet&gt;, the &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised, allowing the user to inspect the reconciled &lt;xref:System.Data.DataSet&gt; row and any output parameters returned by the command.","pos":[3475,3744],"source":"       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command."},{"content":"After a row updates successfully, the changes to that row are accepted.","pos":[3745,3816]},{"content":"When using &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, the order of execution is as follows:      1.","pos":[3823,3930],"source":"       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1."},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[3932,4011],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[4017,4019]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A&gt; event is raised.","pos":[4021,4098],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised."},{"content":"3.","pos":[4104,4106]},{"content":"The command executes.","pos":[4108,4129]},{"content":"4.","pos":[4135,4137]},{"content":"If the command is set to <ph id=\"ph1\">`FirstReturnedRecord`</ph>, then the first returned result is placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[4139,4262],"source":"  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>."},{"content":"5.","pos":[4268,4270]},{"content":"If there are output parameters, they are placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[4272,4354],"source":"  If there are output parameters, they are placed in the <xref:System.Data.DataRow>."},{"content":"6.","pos":[4360,4362]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised.","pos":[4364,4440],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised."},{"content":"7.","pos":[4446,4448]},{"content":"&lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; is called.","pos":[4450,4504],"source":"  <xref:System.Data.DataRow.AcceptChanges%2A> is called."},{"content":"Each command associated with the &lt;xref:System.Data.Common.DbDataAdapter&gt; usually has a parameters collection associated with it.","pos":[4511,4639],"source":"       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it."},{"content":"Parameters are mapped to the current row through the <ph id=\"ph1\">`SourceColumn`</ph> and <ph id=\"ph2\">`SourceVersion`</ph> properties of a .NET Framework data provider's <ph id=\"ph3\">`Parameter`</ph> class.","pos":[4640,4793],"source":" Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to a &lt;xref:System.Data.DataTable&gt; column that the &lt;xref:System.Data.Common.DbDataAdapter&gt; references to obtain parameter values for the current row.","pos":[4794,4964],"source":"`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to the unmapped column name before any table mappings have been applied.","pos":[4971,5065],"source":"`SourceColumn` refers to the unmapped column name before any table mappings have been applied."},{"content":"If <ph id=\"ph1\">`SourceColumn`</ph> refers to a nonexistent column, the action taken depends on one of the following &lt;xref:System.Data.MissingMappingAction&gt; values.","pos":[5066,5212],"source":" If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values."},{"content":"|Enumeration value|Action taken|   |-----------------------|------------------|   |<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|Use the source column names and table names in the &lt;xref:System.Data.DataSet&gt; if no mapping is present.|   |<ph id=\"ph2\">`MissingMappingAction.Ignore`</ph>|A &lt;xref:System.SystemException&gt; is generated.","pos":[5218,5519],"source":"      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated."},{"content":"When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |<ph id=\"ph1\">`MissingMappingAction.Error`</ph>|A &lt;xref:System.SystemException&gt; is generated.|       The <ph id=\"ph2\">`SourceColumn`</ph> property is also used to map the value for output or input/output parameters back to the <ph id=\"ph3\">`DataSet`</ph>.","pos":[5520,5838],"source":" When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`."},{"content":"An exception is generated if it refers to a nonexistent column.","pos":[5839,5902]},{"content":"The <ph id=\"ph1\">`SourceVersion`</ph> property of a .NET Framework data provider's <ph id=\"ph2\">`Parameter`</ph> class determines whether to use the Original, Current, or Proposed version of the column value.","pos":[5909,6081],"source":"       The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value."},{"content":"This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.","pos":[6082,6229]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.","pos":[6235,6356],"source":"      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued."},{"content":"To continue the update operation without generating exceptions when an error is encountered, set the &lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt; property to <ph id=\"ph1\">`true`</ph> before calling &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;.","pos":[6357,6605],"source":" To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>."},{"content":"You may also respond to errors on a per-row basis within the <ph id=\"ph1\">`RowUpdated`</ph> event of a DataAdapter.","pos":[6606,6703],"source":" You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter."},{"content":"To continue the update operation without generating an exception within the <ph id=\"ph1\">`RowUpdated`</ph> event, set the &lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt; property of the &lt;xref:System.Data.Common.RowUpdatedEventArgs&gt; to &lt;xref:System.Data.UpdateStatus&gt;.","pos":[6704,6961],"source":" To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."}]},{"pos":[166424,166502],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use to update the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> to use to update the data source."},{"pos":[166567,166621],"content":"The name of the source table to use for table mapping.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the source table to use for table mapping.","pos":[0,54]}]},{"pos":[166678,166768],"content":"The number of rows successfully updated from the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of rows successfully updated from the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[166938,166994],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> is invalid."},{"pos":[167105,167133],"content":"The source table is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source table is invalid.","pos":[0,28]}]},{"pos":[167248,167343],"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","pos":[0,95]}]},{"pos":[167729,167870],"content":"Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.","pos":[0,141]}]},{"pos":[167883,168542],"content":"Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>. If the data provider supports batch processing, this can increase application performance by reducing the number of round-trips to the server. In ADO.NET 2.0, this property is supported for the .NET data providers for SQL Server (SqlClient) and Oracle (OracleClient).       Executing an extremely large batch could decrease performance. Therefore, you should test for the optimum batch size setting before implementing your application.       An <xref:System.ArgumentOutOfRangeException> will be thrown if the value is set to a number less than zero.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>. If the data provider supports batch processing, this can increase application performance by reducing the number of round-trips to the server. In ADO.NET 2.0, this property is supported for the .NET data providers for SQL Server (SqlClient) and Oracle (OracleClient).       Executing an extremely large batch could decrease performance. Therefore, you should test for the optimum batch size setting before implementing your application.       An <xref:System.ArgumentOutOfRangeException> will be thrown if the value is set to a number less than zero.","pos":[0,655],"nodes":[{"content":"Use the UpdateBatchSize property to update a data source with changes from a &lt;xref:System.Data.DataSet&gt;.","pos":[0,104],"source":"Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>."},{"content":"If the data provider supports batch processing, this can increase application performance by reducing the number of round-trips to the server.","pos":[105,247]},{"content":"In ADO.NET 2.0, this property is supported for the .NET data providers for SQL Server (SqlClient) and Oracle (OracleClient).","pos":[248,372]},{"content":"Executing an extremely large batch could decrease performance.","pos":[379,441]},{"content":"Therefore, you should test for the optimum batch size setting before implementing your application.","pos":[442,541]},{"content":"An &lt;xref:System.ArgumentOutOfRangeException&gt; will be thrown if the value is set to a number less than zero.","pos":[548,655],"source":"       An <xref:System.ArgumentOutOfRangeException> will be thrown if the value is set to a number less than zero."}]}]},{"pos":[168673,169405],"content":"The number of rows to process per batch.       <table><thead><tr><th> Value is       </th><th> Effect       </th></tr></thead><tbody><tr><td> 0       </td><td> There is no limit on the batch size.       </td></tr><tr><td> 1       </td><td> Disables batch updating.       </td></tr><tr><td> &gt; 1       </td><td> Changes are sent using batches of UpdateBatchSize operations at a time.       </td></tr></tbody></table>       When setting this to a value other than 1 ,all the commands associated with the <xref href=\"System.Data.Common.DbDataAdapter\"></xref> must have their <xref:System.Data.IDbCommand.UpdatedRowSource*> property set to **None** or **OutputParameters**. An exception will be thrown otherwise.","needQuote":false,"needEscape":true,"nodes":[{"content":"The number of rows to process per batch.       ","pos":[0,47],"nodes":[{"content":"The number of rows to process per batch.","pos":[0,40]}]},{"content":"Value is","pos":[70,78]},{"content":"Effect","pos":[95,101]},{"content":"0","pos":[142,143]},{"content":" There is no limit on the batch size.       ","pos":[159,203],"nodes":[{"content":"There is no limit on the batch size.","pos":[1,37]}]},{"content":"1","pos":[222,223]},{"content":" Disables batch updating.       ","pos":[239,271],"nodes":[{"content":"Disables batch updating.","pos":[1,25]}]},{"content":"<ph id=\"ph1\">&amp;gt;</ph> 1","pos":[290,296],"source":"&gt; 1       "},{"content":" Changes are sent using batches of UpdateBatchSize operations at a time.       ","pos":[312,391],"nodes":[{"content":"Changes are sent using batches of UpdateBatchSize operations at a time.","pos":[1,72]}]},{"content":"       When setting this to a value other than 1 ,all the commands associated with the <xref href=\"System.Data.Common.DbDataAdapter\"></xref> must have their <xref:System.Data.IDbCommand.UpdatedRowSource*> property set to **None** or **OutputParameters**. An exception will be thrown otherwise.","pos":[417,710],"nodes":[{"content":"When setting this to a value other than 1 ,all the commands associated with the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbDataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> must have their &lt;xref:System.Data.IDbCommand.UpdatedRowSource<bpt id=\"p2\">*</bpt>&gt; property set to <ept id=\"p2\">*</ept><bpt id=\"p3\">*</bpt>None<ept id=\"p3\">*</ept><bpt id=\"p4\">*</bpt> or <ept id=\"p4\">*</ept><bpt id=\"p5\">*</bpt>OutputParameters<ept id=\"p5\">*</ept>*.","pos":[7,254],"source":"       When setting this to a value other than 1 ,all the commands associated with the <xref href=\"System.Data.Common.DbDataAdapter\"></xref> must have their <xref:System.Data.IDbCommand.UpdatedRowSource*> property set to **None** or **OutputParameters**."},{"content":"An exception will be thrown otherwise.","pos":[255,293]}]}]},{"pos":[169861,169926],"content":"Gets or sets a command used to update records in the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a command used to update records in the data source.","pos":[0,65]}]},{"pos":[169938,170185],"content":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> will be automatically generated.","needQuote":true,"needEscape":true,"nodes":[{"content":"During &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;, if this property is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, the &lt;xref:System.Data.IDbDataAdapter.UpdateCommand%2A&gt; will be automatically generated.","pos":[0,247],"source":"During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> will be automatically generated."}]},{"pos":[170748,170917],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used during &lt;xref:System.Data.IDataAdapter.Update*&gt; to update records in the data source for modified rows in the data set.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.IDataAdapter.Update*> to update records in the data source for modified rows in the data set."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Common.DbDataAdapter\n  id: DbDataAdapter\n  children:\n  - System.Data.Common.DbDataAdapter.#ctor\n  - System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)\n  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)\n  - System.Data.Common.DbDataAdapter.ClearBatch\n  - System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  - System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  - System.Data.Common.DbDataAdapter.DefaultSourceTableName\n  - System.Data.Common.DbDataAdapter.DeleteCommand\n  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)\n  - System.Data.Common.DbDataAdapter.ExecuteBatch\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.FillCommandBehavior\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)\n  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)\n  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  - System.Data.Common.DbDataAdapter.GetFillParameters\n  - System.Data.Common.DbDataAdapter.InitializeBatching\n  - System.Data.Common.DbDataAdapter.InsertCommand\n  - System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  - System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  - System.Data.Common.DbDataAdapter.SelectCommand\n  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  - System.Data.Common.DbDataAdapter.System#ICloneable#Clone\n  - System.Data.Common.DbDataAdapter.TerminateBatching\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)\n  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)\n  - System.Data.Common.DbDataAdapter.UpdateBatchSize\n  - System.Data.Common.DbDataAdapter.UpdateCommand\n  langs:\n  - csharp\n  name: DbDataAdapter\n  nameWithType: DbDataAdapter\n  fullName: System.Data.Common.DbDataAdapter\n  type: Class\n  summary: Aids implementation of the <xref href=\"System.Data.IDbDataAdapter\"></xref> interface. Inheritors of DbDataAdapter implement a set of functions to provide strong typing, but inherit most of the functionality needed to fully implement a **DataAdapter**.\n  remarks: \"The DbDataAdapter class inherits from the <xref:System.Data.Common.DataAdapter> class and helps a class implement a **DataAdapter** designed for use with a relational database.  \\n  \\n An application does not create an instance of the DbDataAdapter interface directly, but creates an instance of a class that inherits <xref:System.Data.IDbDataAdapter> and DbDataAdapter.  \\n  \\n Classes that inherit DbDataAdapter must implement the inherited members, and typically define additional members to add provider-specific functionality. For example, the DbDataAdapter class defines the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property, and the DbDataAdapter interface defines eight overloads of the <xref:System.Data.IDataAdapter.Fill%2A> method. In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method, and also defines two additional overloads of <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> that take an ADO Recordset object as a parameter.\"\n  syntax:\n    content: 'public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Data.Common.DataAdapter\n  implements:\n  - System.Data.IDbDataAdapter\n  - System.ICloneable\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Data.Common.DataAdapter.AcceptChangesDuringFill\n  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate\n  - System.Data.Common.DataAdapter.CloneInternals\n  - System.Data.Common.DataAdapter.ContinueUpdateOnError\n  - System.Data.Common.DataAdapter.CreateTableMappings\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)\n  - System.Data.Common.DataAdapter.FillError\n  - System.Data.Common.DataAdapter.FillLoadOption\n  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.HasTableMappings\n  - System.Data.Common.DataAdapter.MissingMappingAction\n  - System.Data.Common.DataAdapter.MissingSchemaAction\n  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)\n  - System.Data.Common.DataAdapter.ResetFillLoadOption\n  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes\n  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill\n  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption\n  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings\n  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings\n  - System.Data.Common.DataAdapter.TableMappings\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: DbDataAdapter()\n  nameWithType: DbDataAdapter.DbDataAdapter()\n  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Initializes a new instance of a **DataAdapter** class.\n  remarks: \"When you create an instance of <xref:System.Data.Common.DbDataAdapter>, the following read/write properties are set to the following initial values.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|A new <xref:System.Data.IDbCommand>.|  \\n|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|A new <xref:System.Data.IDbCommand>.|  \\n|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|A new <xref:System.Data.IDbCommand>.|  \\n|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|A new <xref:System.Data.IDbCommand>.|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n  \\n You can change the value of any of these properties through a separate call to the property.\"\n  syntax:\n    content: protected DbDataAdapter ();\n    parameters: []\n  overload: System.Data.Common.DbDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)\n  id: '#ctor(System.Data.Common.DbDataAdapter)'\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: DbDataAdapter(DbDataAdapter)\n  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)\n  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Initializes a new instance of a <xref uid=\"langword_csharp_DataAdapter\" name=\"DataAdapter\" href=\"\"></xref> class from an existing object of the same type.\n  remarks: This overload of the <xref:System.Data.Common.DbDataAdapter> constructor is designed for use by a .NET Framework data provider when implementing a similar constructor for use in a clone implementation.\n  syntax:\n    content: protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);\n    parameters:\n    - id: adapter\n      type: System.Data.Common.DbDataAdapter\n      description: A <xref uid=\"langword_csharp_DataAdapter\" name=\"DataAdapter\" href=\"\"></xref> object used to create the new <xref uid=\"langword_csharp_DataAdapter\" name=\"DataAdapter\" href=\"\"></xref>.\n  overload: System.Data.Common.DbDataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)\n  id: AddToBatch(System.Data.IDbCommand)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: AddToBatch(IDbCommand)\n  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)\n  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds a <xref href=\"System.Data.IDbCommand\"></xref> to the current batch.\n  remarks: In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.\n  syntax:\n    content: protected virtual int AddToBatch (System.Data.IDbCommand command);\n    parameters:\n    - id: command\n      type: System.Data.IDbCommand\n      description: The <xref href=\"System.Data.IDbCommand\"></xref> to add to the batch.\n    return:\n      type: System.Int32\n      description: The number of commands in the batch before adding the <xref href=\"System.Data.IDbCommand\"></xref>.\n  overload: System.Data.Common.DbDataAdapter.AddToBatch*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The adapter does not support batches.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.ClearBatch\n  id: ClearBatch\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: ClearBatch()\n  nameWithType: DbDataAdapter.ClearBatch()\n  fullName: System.Data.Common.DbDataAdapter.ClearBatch()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Removes all <xref href=\"System.Data.IDbCommand\"></xref> objects from the batch.\n  remarks: In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.\n  syntax:\n    content: protected virtual void ClearBatch ();\n    parameters: []\n  overload: System.Data.Common.DbDataAdapter.ClearBatch*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The adapter does not support batches.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Initializes a new instance of the <xref href=\"System.Data.Common.RowUpdatedEventArgs\"></xref> class.\n  syntax:\n    content: protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);\n    parameters:\n    - id: dataRow\n      type: System.Data.DataRow\n      description: The <xref href=\"System.Data.DataRow\"></xref> used to update the data source.\n    - id: command\n      type: System.Data.IDbCommand\n      description: The <xref href=\"System.Data.IDbCommand\"></xref> executed during the <xref:System.Data.IDataAdapter.Update*>.\n    - id: statementType\n      type: System.Data.StatementType\n      description: Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.\n    - id: tableMapping\n      type: System.Data.Common.DataTableMapping\n      description: A <xref href=\"System.Data.Common.DataTableMapping\"></xref> object.\n    return:\n      type: System.Data.Common.RowUpdatedEventArgs\n      description: A new instance of the <xref href=\"System.Data.Common.RowUpdatedEventArgs\"></xref> class.\n  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Initializes a new instance of the <xref href=\"System.Data.Common.RowUpdatingEventArgs\"></xref> class.\n  syntax:\n    content: protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);\n    parameters:\n    - id: dataRow\n      type: System.Data.DataRow\n      description: The <xref href=\"System.Data.DataRow\"></xref> that updates the data source.\n    - id: command\n      type: System.Data.IDbCommand\n      description: The <xref href=\"System.Data.IDbCommand\"></xref> to execute during the <xref:System.Data.IDataAdapter.Update*>.\n    - id: statementType\n      type: System.Data.StatementType\n      description: Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.\n    - id: tableMapping\n      type: System.Data.Common.DataTableMapping\n      description: A <xref href=\"System.Data.Common.DataTableMapping\"></xref> object.\n    return:\n      type: System.Data.Common.RowUpdatingEventArgs\n      description: A new instance of the <xref href=\"System.Data.Common.RowUpdatingEventArgs\"></xref> class.\n  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName\n  id: DefaultSourceTableName\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: DefaultSourceTableName\n  nameWithType: DbDataAdapter.DefaultSourceTableName\n  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName\n  type: Field\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: The default name used by the <xref href=\"System.Data.Common.DataAdapter\"></xref> object for table mappings.\n  remarks: \"\\\"Table\\\" is the default name used by the <xref:System.Data.Common.DataAdapter> object for table mappings.  \\n  \\n DefaultSourceTableName is when an application adds a table mapping to be used with <xref:System.Data.Common.DbDataAdapter.Fill%2A>, but does not specify a <xref:System.Data.DataTable> name.\"\n  syntax:\n    content: public const string DefaultSourceTableName;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.DeleteCommand\n  id: DeleteCommand\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: DeleteCommand\n  nameWithType: DbDataAdapter.DeleteCommand\n  fullName: System.Data.Common.DbDataAdapter.DeleteCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets a command for deleting records from the data set.\n  remarks: During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> is automatically generated.\n  example:\n  - \"The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_3_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_3_1.vb)]\"\n  syntax:\n    content: public System.Data.Common.DbCommand DeleteCommand { get; set; }\n    return:\n      type: System.Data.Common.DbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.IDataAdapter.Update*> to delete records in the data source for deleted rows in the data set.\n  overload: System.Data.Common.DbDataAdapter.DeleteCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: DbDataAdapter.Dispose(Boolean)\n  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Data.Common.DbDataAdapter\"></xref> and optionally releases the managed resources.\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Data.Common.DbDataAdapter.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.ExecuteBatch\n  id: ExecuteBatch\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: ExecuteBatch()\n  nameWithType: DbDataAdapter.ExecuteBatch()\n  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Executes the current batch.\n  remarks: In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.\n  syntax:\n    content: protected virtual int ExecuteBatch ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The return value from the last command in the batch.\n  overload: System.Data.Common.DbDataAdapter.ExecuteBatch*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)\n  id: Fill(System.Data.DataSet)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Fill(DataSet)\n  nameWithType: DbDataAdapter.Fill(DataSet)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"The Fill method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before Fill is called, it is opened to retrieve data and then closed. If the connection is open before Fill is called, it remains open.  \\n  \\n If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.  \\n  \\n If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.  \\n  \\n If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on.  \\n  \\n When the query specified returns multiple results, the result set for each row returning query is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on). Because no table is created for a query that does not return rows, if you process an insert query followed by a select query, the table created for the select query is named \\\"Table\\\" because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as batch SQL statements, if one of the results contains an error, all subsequent results are skipped and are not added to the <xref:System.Data.DataSet>.  \\n  \\n When using subsequent Fill calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:  \\n  \\n1.  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.  \\n  \\n2.  The **Key** column information must be present.  \\n  \\n If primary key information is present, any duplicate rows are reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.  \\n  \\n If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use Fill with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.\"\n  syntax:\n    content: public override int Fill (System.Data.DataSet dataSet);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if necessary, schema.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.Common.DbDataAdapter.Fill*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)\n  id: Fill(System.Data.DataTable)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Fill(DataTable)\n  nameWithType: DbDataAdapter.Fill(DataTable)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in a specified range in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataTable\"></xref> name.\n  remarks: \"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.  \\n  \\n If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table.  \\n  \\n The overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataTable` as a parameter only obtains the first result. Use an overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataSet` as a parameter to obtain multiple results.  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\n dataset.Tables.Add(\\\"aaa\\\");  \\n dataset.Tables.Add(\\\"AAA\\\");  \\n adapter.Fill(dataset, \\\"aaa\\\"); // Fills \\\"aaa\\\", which already exists in the DataSet.  \\n    adapter.Fill(dataset, \\\"Aaa\\\"); // Adds a new table called \\\"Aaa\\\".  \\n```  \\n  \\n If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\n dataset.Tables.Add(\\\"aaa\\\");  \\n    adapter.Fill(dataset, \\\"AAA\\\"); // Fills table \\\"aaa\\\" because only one similarly named table is in the DataSet.  \\n```  \\n  \\n You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.  \\n  \\n If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.Fill%2A> and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.\"\n  syntax:\n    content: public int Fill (System.Data.DataTable dataTable);\n    parameters:\n    - id: dataTable\n      type: System.Data.DataTable\n      description: The name of the <xref href=\"System.Data.DataTable\"></xref> to use for table mapping.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.Common.DbDataAdapter.Fill*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source table is invalid.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)\n  id: Fill(System.Data.DataSet,System.String)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Fill(DataSet,String)\n  nameWithType: DbDataAdapter.Fill(DataSet,String)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataSet\"></xref> and <xref href=\"System.Data.DataTable\"></xref> names.\n  remarks: \"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.  \\n  \\n If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.  \\n  \\n If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \\\"columnname1\\\", \\\"columnname2\\\", \\\"columnname3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on.  \\n  \\n When the query specified returns multiple results, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on). Since no table is created for a query that does not return rows, if you were to process an insert query followed by a select query, the table created for the select query would be named \\\"Table\\\", because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\ndataset.Tables.Add(\\\"AAA\\\");  \\nadapter.Fill(dataset, \\\"aaa\\\"); // Fills \\\"aaa\\\", which already exists in the DataSet.  \\nadapter.Fill(dataset, \\\"Aaa\\\"); // Adds a new table called \\\"Aaa\\\".  \\n```  \\n  \\n If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\nadapter.Fill(dataset, \\\"AAA\\\"); // Fills table \\\"aaa\\\" because only one similarly named table is in the DataSet.  \\n```  \\n  \\n If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.  \\n  \\n When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statement, be aware of the following:  \\n  \\n-   If one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.  \\n  \\n When using subsequent <xref:System.Data.Common.DbDataAdapter.Fill%2A> calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:  \\n  \\n1.  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.  \\n  \\n2.  The **Key** column information must be present. If primary key information is present, any duplicate rows are reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.  \\n  \\n If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see[Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.\"\n  example:\n  - \"The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with rows from the categories table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \\n  \\n [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_3_1.vb)]\\n [!code-cs[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_3_1.cs)]\"\n  syntax:\n    content: public int Fill (System.Data.DataSet dataSet, string srcTable);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if necessary, schema.\n    - id: srcTable\n      type: System.String\n      description: The name of the source table to use for table mapping.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.Common.DbDataAdapter.Fill*\n  exceptions:\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The source table is invalid.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)\n  id: Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Fill(DataTable,IDbCommand,CommandBehavior)\n  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in a <xref href=\"System.Data.DataTable\"></xref> to match those in the data source using the specified <xref href=\"System.Data.DataTable\"></xref>, <xref href=\"System.Data.IDbCommand\"></xref> and <xref href=\"System.Data.CommandBehavior\"></xref>.\n  remarks: \"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data and then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to the specified destination <xref:System.Data.DataTable> object in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> object if it does not already exist. When creating a <xref:System.Data.DataTable> object, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.  \\n  \\n If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on.  \\n  \\n The overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataTable` as a parameter only obtains the first result. Use an overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataSet` as a parameter to obtain multiple results.  \\n  \\n You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.  \\n  \\n If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.\"\n  syntax:\n    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);\n    parameters:\n    - id: dataTable\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> to fill with records and, if necessary, schema.\n    - id: command\n      type: System.Data.IDbCommand\n      description: The SQL SELECT statement used to retrieve rows from the data source.\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: One of the <xref href=\"System.Data.CommandBehavior\"></xref> values.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.Common.DbDataAdapter.Fill*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])\n  id: Fill(System.Int32,System.Int32,System.Data.DataTable[])\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Fill(Int32,Int32,DataTable[])\n  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])\n  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in a <xref href=\"System.Data.DataTable\"></xref> to match those in the data source starting at the specified record and retrieving up to the specified maximum number of records.\n  remarks: \"The <xref:System.Data.Common.DataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DataAdapter.Fill%2A> is called, it is opened to retrieve data, and then it is closed. If the connection is open before <xref:System.Data.Common.DataAdapter.Fill%2A> is called, it remains open.  \\n  \\n The <xref:System.Data.Common.DataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.  \\n  \\n If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If the data adapter encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"columnname1\\\", \\\"columnname2\\\", \\\"columnname3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statements, if one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.  \\n  \\n You can use the <xref:System.Data.Common.DataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.\"\n  syntax:\n    content: public int Fill (int startRecord, int maxRecords, System.Data.DataTable[] dataTables);\n    parameters:\n    - id: startRecord\n      type: System.Int32\n      description: The zero-based record number to start with.\n    - id: maxRecords\n      type: System.Int32\n      description: The maximum number of records to retrieve.\n    - id: dataTables\n      type: System.Data.DataTable[]\n      description: The <xref href=\"System.Data.DataTable\"></xref> objects to fill from the data source.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>. This value does not include rows affected by statements that do not return rows.\n  overload: System.Data.Common.DbDataAdapter.Fill*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)\n  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Fill(DataSet,Int32,Int32,String)\n  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in a specified range in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataSet\"></xref> and <xref href=\"System.Data.DataTable\"></xref> names.\n  remarks: \"A `maxRecords` value of 0 gets all records found after the start record. If `maxRecords` is greater than the number of remaining rows, only the remaining rows are returned, and no error is issued.  \\n  \\n If the corresponding select command is a statement returning multiple results, <xref:System.Data.Common.DbDataAdapter.Fill%2A> only applies `maxRecords` to the first result.  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the SELECT statement must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data and then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.  \\n  \\n If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, but no exception is raised.  \\n  \\n If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on.  \\n  \\n When the query specified returns multiple results, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on). Because no table is created for a query that does not return rows, if you process an insert query followed by a select query, the table created for the select query is named \\\"Table\\\", because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\ndataset.Tables.Add(\\\"AAA\\\");  \\nadapter.Fill(dataset, \\\"aaa\\\"); // Fills \\\"aaa\\\", which already exists in the DataSet.  \\nadapter.Fill(dataset, \\\"Aaa\\\"); // Adds a new table called \\\"Aaa\\\".  \\n```  \\n  \\n If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\nadapter.Fill(dataset, \\\"AAA\\\"); // Fills table \\\"aaa\\\" because only one similarly named table is in the DataSet.  \\n```  \\n  \\n If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.  \\n  \\n When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as batch SQL statements, be aware of the following:  \\n  \\n-   When processing multiple results from a batch SQL statement, `maxRecords` only applies to the first result. The same is true for rows containing chaptered results (.NET Framework Data Provider for OLE DB only). The top level result is limited by `maxRecords`, but all child rows are added.  \\n  \\n-   If one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.  \\n  \\n When using subsequent <xref:System.Data.Common.DbDataAdapter.Fill%2A> calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:  \\n  \\n1.  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.  \\n  \\n2.  The **Key** column information must be present.  \\n  \\n If primary key information is present, any duplicate rows will be reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.  \\n  \\n If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.  \\n  \\n> [!NOTE]\\n>  The `DataSet` will not contain more than the number of records indicated by `maxRecords`. However, the entire result set generated by the query is still returned from the server.\"\n  example:\n  - \"The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with 15 rows, beginning at row 10, from the **Categories** table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \\n  \\n [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/visualbasic/db016a7d-8591-46f9-abcc-_1.vb)]\\n [!code-cs[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/csharp/db016a7d-8591-46f9-abcc-_1.cs)]\"\n  syntax:\n    content: public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if necessary, schema.\n    - id: startRecord\n      type: System.Int32\n      description: The zero-based record number to start with.\n    - id: maxRecords\n      type: System.Int32\n      description: The maximum number of records to retrieve.\n    - id: srcTable\n      type: System.String\n      description: The name of the source table to use for table mapping.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.Common.DbDataAdapter.Fill*\n  exceptions:\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The <xref href=\"System.Data.DataSet\"></xref> is invalid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The source table is invalid.  \\n  \\n -or-  \\n  \\n The connection is invalid.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The connection could not be found.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>startRecord</code> parameter is less than 0.  \\n  \\n -or-  \\n  \\n The <code>maxRecords</code> parameter is less than 0.\"\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)\n  id: Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)\n  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in a specified range in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataSet\"></xref> and <xref href=\"System.Data.DataTable\"></xref> names.\n  remarks: \"A `maxRecords` value of 0 gets all records found after the start record. If `maxRecords` is greater than the number of remaining rows, only the remaining rows are returned and no error is issued.  \\n  \\n The Fill method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the SELECT statement must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.  \\n  \\n If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, but no exception is raised.  \\n  \\n If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on.  \\n  \\n When the query specified returns multiple results, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on). Since no table is created for a query that does not return rows, if you were to process an insert query followed by a select query, the table created for the select query would be named \\\"Table\\\", because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n The Fill method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\ndataset.Tables.Add(\\\"AAA\\\");  \\nadapter.Fill(dataset, \\\"aaa\\\"); // Fills \\\"aaa\\\", which already exists in the DataSet.  \\nadapter.Fill(dataset, \\\"Aaa\\\"); // Adds a new table called \\\"Aaa\\\".  \\n```  \\n  \\n If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\nadapter.Fill(dataset, \\\"AAA\\\"); // Fills table \\\"aaa\\\" because only one similarly named table is in the DataSet.  \\n```  \\n  \\n If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.  \\n  \\n When the SELECT statement used to populate the <xref:System.Data.DataTable> objects returns multiple results, such as a batch SQL statement, be aware of the following:  \\n  \\n-   When processing multiple results from a batch SQL statement, `maxRecords` only applies to the first result. The same is true for rows containing chaptered results (.NET Framework Data Provider for OLE DB only). The top level result is limited by `maxRecords`, but all child rows are added.  \\n  \\n-   If one of the results contains an error, all subsequent results are skipped.  \\n  \\n> [!NOTE]\\n>  The `DataSet` will not contain more than the number of records indicated by `maxRecords`. However, the entire resultset generated by the query is still returned from the server.\"\n  syntax:\n    content: protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);\n    parameters:\n    - id: dataTables\n      type: System.Data.DataTable[]\n      description: The <xref href=\"System.Data.DataTable\"></xref> objects to fill from the data source.\n    - id: startRecord\n      type: System.Int32\n      description: The zero-based record number to start with.\n    - id: maxRecords\n      type: System.Int32\n      description: The maximum number of records to retrieve.\n    - id: command\n      type: System.Data.IDbCommand\n      description: The <xref href=\"System.Data.IDbCommand\"></xref> executed to fill the <xref href=\"System.Data.DataTable\"></xref> objects.\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: One of the <xref href=\"System.Data.CommandBehavior\"></xref> values.\n    return:\n      type: System.Int32\n      description: The number of rows added to or refreshed in the data tables.\n  overload: System.Data.Common.DbDataAdapter.Fill*\n  exceptions:\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The <xref href=\"System.Data.DataSet\"></xref> is invalid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The source table is invalid.  \\n  \\n -or-  \\n  \\n The connection is invalid.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The connection could not be found.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>startRecord</code> parameter is less than 0.  \\n  \\n -or-  \\n  \\n The <code>maxRecords</code> parameter is less than 0.\"\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)\n  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)\n  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in a specified range in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataSet\"></xref> and source table names, command string, and command behavior.\n  remarks: \"The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.  \\n  \\n If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\ndataset.Tables.Add(\\\"AAA\\\");  \\nadapter.Fill(dataset, \\\"aaa\\\"); // Fills \\\"aaa\\\", which already exists in the DataSet.  \\nadapter.Fill(dataset, \\\"Aaa\\\"); // Adds a new table called \\\"Aaa\\\".  \\n```  \\n  \\n If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\nadapter.Fill(dataset, \\\"AAA\\\"); // Fills table \\\"aaa\\\" because only one similarly named table is in the DataSet.  \\n```  \\n  \\n You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.  \\n  \\n If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see[Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.Fill%2A> and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.\"\n  syntax:\n    content: protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if necessary, schema.\n    - id: startRecord\n      type: System.Int32\n      description: The zero-based record number to start with.\n    - id: maxRecords\n      type: System.Int32\n      description: The maximum number of records to retrieve.\n    - id: srcTable\n      type: System.String\n      description: The name of the source table to use for table mapping.\n    - id: command\n      type: System.Data.IDbCommand\n      description: The SQL SELECT statement used to retrieve rows from the data source.\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: One of the <xref href=\"System.Data.CommandBehavior\"></xref> values.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.Common.DbDataAdapter.Fill*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source table is invalid.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>startRecord</code> parameter is less than 0.  \\n  \\n -or-  \\n  \\n The <code>maxRecords</code> parameter is less than 0.\"\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior\n  id: FillCommandBehavior\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: FillCommandBehavior\n  nameWithType: DbDataAdapter.FillCommandBehavior\n  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets the behavior of the command used to fill the data adapter.\n  syntax:\n    content: protected System.Data.CommandBehavior FillCommandBehavior { get; set; }\n    return:\n      type: System.Data.CommandBehavior\n      description: The <xref href=\"System.Data.CommandBehavior\"></xref> of the command used to fill the data adapter.\n  overload: System.Data.Common.DbDataAdapter.FillCommandBehavior*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)\n  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: FillSchema(DataSet,SchemaType)\n  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)\n  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds a <xref href=\"System.Data.DataTable\"></xref> named \"Table\" to the specified <xref href=\"System.Data.DataSet\"></xref> and configures the schema to match that in the data source based on the specified <xref href=\"System.Data.SchemaType\"></xref>.\n  remarks: \"This method retrieves the schema information from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  \\n  \\n A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:  \\n  \\n-   <xref:System.Data.DataColumn.AllowDBNull%2A>  \\n  \\n-   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.  \\n  \\n-   <xref:System.Data.DataColumn.MaxLength%2A>  \\n  \\n-   <xref:System.Data.DataColumn.ReadOnly%2A>  \\n  \\n-   <xref:System.Data.DataColumn.Unique%2A>  \\n  \\n <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:  \\n  \\n-   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.  \\n  \\n-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.  \\n  \\n-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.  \\n  \\n Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.  \\n  \\n If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  \\n  \\n Primary key information is used during <xref:System.Data.Common.DbDataAdapter.Fill%2A> to find and replace any rows whose key columns match. If this is not the desired behavior, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> without requesting schema information.  \\n  \\n If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is left open.  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.  \\n  \\n When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information.\"\n  example:\n  - \"The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \\n  \\n [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/visualbasic/5283d285-2680-48b0-856a-_1.vb)]\\n [!code-cs[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/csharp/5283d285-2680-48b0-856a-_1.cs)]\"\n  syntax:\n    content: public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: A <xref href=\"System.Data.DataSet\"></xref> to insert the schema in.\n    - id: schemaType\n      type: System.Data.SchemaType\n      description: One of the <xref href=\"System.Data.SchemaType\"></xref> values that specify how to insert the schema.\n    return:\n      type: System.Data.DataTable[]\n      description: A reference to a collection of <xref href=\"System.Data.DataTable\"></xref> objects that were added to the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.Common.DbDataAdapter.FillSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)\n  id: FillSchema(System.Data.DataTable,System.Data.SchemaType)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: FillSchema(DataTable,SchemaType)\n  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)\n  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Configures the schema of the specified <xref href=\"System.Data.DataTable\"></xref> based on the specified <xref href=\"System.Data.SchemaType\"></xref>.\n  remarks: \"The FillSchema method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before FillSchema is called, it is opened to retrieve data, then closed. If the connection is open before FillSchema is called, it remains open.  \\n  \\n A FillSchema operation returns a <xref:System.Data.DataTable>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:  \\n  \\n-   <xref:System.Data.DataColumn.AllowDBNull%2A>  \\n  \\n-   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.  \\n  \\n-   <xref:System.Data.DataColumn.MaxLength%2A>  \\n  \\n-   <xref:System.Data.DataColumn.ReadOnly%2A>  \\n  \\n-   <xref:System.Data.DataColumn.Unique%2A>  \\n  \\n FillSchema also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:  \\n  \\n-   If a <xref:System.Data.DataTable.PrimaryKey%2A> has already been defined for the `DataTable`, or the `DataTable` contains data, the `PrimaryKey` property will not be set.  \\n  \\n-   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the `DataTable`.  \\n  \\n-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the `PrimaryKey` property is not set.  \\n  \\n-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the `DataTable`.  \\n  \\n Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added. This process may require several round-trips to the server.  \\n  \\n If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  \\n  \\n If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n FillSchema does not return any rows. Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of FillSchema for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.  \\n  \\n When using FillSchema, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information.\"\n  example:\n  - \"The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataTable>.  \\n  \\n [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/visualbasic/658ac10a-3a87-4693-8b37-_1.vb)]\\n [!code-cs[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/csharp/658ac10a-3a87-4693-8b37-_1.cs)]\"\n  syntax:\n    content: public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);\n    parameters:\n    - id: dataTable\n      type: System.Data.DataTable\n      description: The <xref href=\"System.Data.DataTable\"></xref> to be filled with the schema from the data source.\n    - id: schemaType\n      type: System.Data.SchemaType\n      description: One of the <xref href=\"System.Data.SchemaType\"></xref> values.\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> that contains schema information returned from the data source.\n  overload: System.Data.Common.DbDataAdapter.FillSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)\n  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: FillSchema(DataSet,SchemaType,String)\n  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)\n  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds a <xref href=\"System.Data.DataTable\"></xref> to the specified <xref href=\"System.Data.DataSet\"></xref> and configures the schema to match that in the data source based upon the specified <xref href=\"System.Data.SchemaType\"></xref> and <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: \"This method retrieves the schema information from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  \\n  \\n A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:  \\n  \\n-   <xref:System.Data.DataColumn.AllowDBNull%2A>  \\n  \\n-   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.  \\n  \\n-   <xref:System.Data.DataColumn.MaxLength%2A>  \\n  \\n-   <xref:System.Data.DataColumn.ReadOnly%2A>  \\n  \\n-   <xref:System.Data.DataColumn.Unique%2A>  \\n  \\n <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:  \\n  \\n-   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.  \\n  \\n-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.  \\n  \\n-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.  \\n  \\n Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.  \\n  \\n If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  \\n  \\n Primary key information is used during <xref:System.Data.Common.DbDataAdapter.Fill%2A> to find and replace any rows whose key columns match. If this is not the desired behavior, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> without requesting schema information.  \\n  \\n If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\ndataset.Tables.Add(\\\"AAA\\\");  \\nadapter.FillSchema(dataset, \\\"aaa\\\"); // Fills the schema of \\\"aaa\\\", which already exists in the DataSet.  \\nadapter.FillSchema(dataset, \\\"Aaa\\\"); // Adds a new table called \\\"Aaa\\\".  \\n```  \\n  \\n If <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\nadapter.FillSchema(dataset, \\\"AAA\\\"); // Fills the schema of table \\\"aaa\\\" because only one similarly named table is in the DataSet.  \\n```  \\n  \\n The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is left open.  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.  \\n  \\n When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information.\"\n  example:\n  - \"The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \\n  \\n [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/visualbasic/c7e2b899-0a44-4d9d-9e8d-_1.vb)]\\n [!code-cs[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/csharp/c7e2b899-0a44-4d9d-9e8d-_1.cs)]\"\n  syntax:\n    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: A <xref href=\"System.Data.DataSet\"></xref> to insert the schema in.\n    - id: schemaType\n      type: System.Data.SchemaType\n      description: One of the <xref href=\"System.Data.SchemaType\"></xref> values that specify how to insert the schema.\n    - id: srcTable\n      type: System.String\n      description: The name of the source table to use for table mapping.\n    return:\n      type: System.Data.DataTable[]\n      description: A reference to a collection of <xref href=\"System.Data.DataTable\"></xref> objects that were added to the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.Common.DbDataAdapter.FillSchema*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A source table from which to get the schema could not be found.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)\n  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)\n  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)\n  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Configures the schema of the specified <xref href=\"System.Data.DataTable\"></xref> based on the specified <xref href=\"System.Data.SchemaType\"></xref>, command string, and <xref href=\"System.Data.CommandBehavior\"></xref> values.\n  remarks: \"The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it remains open.  \\n  \\n A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:  \\n  \\n-   <xref:System.Data.DataColumn.AllowDBNull%2A>  \\n  \\n-   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.  \\n  \\n-   <xref:System.Data.DataColumn.MaxLength%2A>  \\n  \\n-   <xref:System.Data.DataColumn.ReadOnly%2A>  \\n  \\n-   <xref:System.Data.DataColumn.Unique%2A>  \\n  \\n <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:  \\n  \\n-   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.  \\n  \\n-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.  \\n  \\n-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.  \\n  \\n Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.  \\n  \\n If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  \\n  \\n If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> does not return any rows. Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.  \\n  \\n When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information.\"\n  syntax:\n    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);\n    parameters:\n    - id: dataTable\n      type: System.Data.DataTable\n      description: The <xref href=\"System.Data.DataTable\"></xref> to be filled with the schema from the data source.\n    - id: schemaType\n      type: System.Data.SchemaType\n      description: One of the <xref href=\"System.Data.SchemaType\"></xref> values.\n    - id: command\n      type: System.Data.IDbCommand\n      description: The SQL SELECT statement used to retrieve rows from the data source.\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: One of the <xref href=\"System.Data.CommandBehavior\"></xref> values.\n    return:\n      type: System.Data.DataTable\n      description: A of <xref href=\"System.Data.DataTable\"></xref> object that contains schema information returned from the data source.\n  overload: System.Data.Common.DbDataAdapter.FillSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)\n  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)\n  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)\n  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds a <xref href=\"System.Data.DataTable\"></xref> to the specified <xref href=\"System.Data.DataSet\"></xref> and configures the schema to match that in the data source based on the specified <xref href=\"System.Data.SchemaType\"></xref>.\n  remarks: \"The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it remains open.  \\n  \\n A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:  \\n  \\n-   <xref:System.Data.DataColumn.AllowDBNull%2A>  \\n  \\n-   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.  \\n  \\n-   <xref:System.Data.DataColumn.MaxLength%2A>  \\n  \\n-   <xref:System.Data.DataColumn.ReadOnly%2A>  \\n  \\n-   <xref:System.Data.DataColumn.Unique%2A>  \\n  \\n <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:  \\n  \\n-   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.  \\n  \\n-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.  \\n  \\n-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.  \\n  \\n Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.  \\n  \\n If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  \\n  \\n If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\ndataset.Tables.Add(\\\"AAA\\\");  \\nadapter.FillSchema(dataset, \\\"aaa\\\"); // Fills the schema of \\\"aaa\\\", which already exists in the DataSet.  \\nadapter.FillSchema(dataset, \\\"Aaa\\\"); // Adds a new table called \\\"Aaa\\\".  \\n```  \\n  \\n If <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\ndataset.Tables.Add(\\\"aaa\\\");  \\nadapter.FillSchema(dataset, \\\"AAA\\\"); // Fills the schema of table \\\"aaa\\\" because only one similarly named table is in the DataSet.  \\n```  \\n  \\n <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> does not return any rows. Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.  \\n  \\n When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information.\"\n  syntax:\n    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The <xref href=\"System.Data.DataSet\"></xref> to be filled with the schema from the data source.\n    - id: schemaType\n      type: System.Data.SchemaType\n      description: One of the <xref href=\"System.Data.SchemaType\"></xref> values.\n    - id: command\n      type: System.Data.IDbCommand\n      description: The SQL SELECT statement used to retrieve rows from the data source.\n    - id: srcTable\n      type: System.String\n      description: The name of the source table to use for table mapping.\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: One of the <xref href=\"System.Data.CommandBehavior\"></xref> values.\n    return:\n      type: System.Data.DataTable[]\n      description: An array of <xref href=\"System.Data.DataTable\"></xref> objects that contain schema information returned from the data source.\n  overload: System.Data.Common.DbDataAdapter.FillSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)\n  id: GetBatchedParameter(System.Int32,System.Int32)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: GetBatchedParameter(Int32,Int32)\n  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)\n  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Returns a <xref href=\"System.Data.IDataParameter\"></xref> from one of the commands in the current batch.\n  remarks: In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.\n  syntax:\n    content: protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);\n    parameters:\n    - id: commandIdentifier\n      type: System.Int32\n      description: The index of the command to retrieve the parameter from.\n    - id: parameterIndex\n      type: System.Int32\n      description: The index of the parameter within the command.\n    return:\n      type: System.Data.IDataParameter\n      description: The <xref href=\"System.Data.IDataParameter\"></xref> specified.\n  overload: System.Data.Common.DbDataAdapter.GetBatchedParameter*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The adapter does not support batches.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: GetBatchedRecordsAffected(Int32,Int32,Exception)\n  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Returns information about an individual update attempt within a larger batched update.\n  remarks: Data providers that support batched updating logic must override a series of virtual methods on the <xref:System.Data.Common.DbDataAdapter> class. `GetBatchedRecordsAffected` represents one of those virtual methods. The `DbDataAdapter` class relies on `GetBatchedRecordsAffected` to determine the success or failure of individual update attempts within a batch so it can mark each corresponding <xref:System.Data.DataRow> accordingly.\n  syntax:\n    content: protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);\n    parameters:\n    - id: commandIdentifier\n      type: System.Int32\n      description: The zero-based column ordinal of the individual command within the batch.\n    - id: recordsAffected\n      type: System.Int32\n      description: The number of rows affected in the data store by the specified command within the batch.\n    - id: error\n      type: System.Exception\n      description: An <xref:System.Exception> thrown during execution of the specified command. Returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) if no exception is thrown.\n    return:\n      type: System.Boolean\n      description: Information about an individual update attempt within a larger batched update.\n  overload: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.GetFillParameters\n  id: GetFillParameters\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: GetFillParameters()\n  nameWithType: DbDataAdapter.GetFillParameters()\n  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the parameters set by the user when executing an SQL SELECT statement.\n  syntax:\n    content: public override System.Data.IDataParameter[] GetFillParameters ();\n    parameters: []\n    return:\n      type: System.Data.IDataParameter[]\n      description: An array of <xref href=\"System.Data.IDataParameter\"></xref> objects that contains the parameters set by the user.\n  overload: System.Data.Common.DbDataAdapter.GetFillParameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.InitializeBatching\n  id: InitializeBatching\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: InitializeBatching()\n  nameWithType: DbDataAdapter.InitializeBatching()\n  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Initializes batching for the <xref href=\"System.Data.Common.DbDataAdapter\"></xref>.\n  remarks: In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.\n  syntax:\n    content: protected virtual void InitializeBatching ();\n    parameters: []\n  overload: System.Data.Common.DbDataAdapter.InitializeBatching*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The adapter does not support batches.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.InsertCommand\n  id: InsertCommand\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: InsertCommand\n  nameWithType: DbDataAdapter.InsertCommand\n  fullName: System.Data.Common.DbDataAdapter.InsertCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets a command used to insert new records into the data source.\n  remarks: During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.InsertCommand%2A> will be automatically generated.\n  example:\n  - \"The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_0_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_0_1.vb)]\"\n  syntax:\n    content: public System.Data.Common.DbCommand InsertCommand { get; set; }\n    return:\n      type: System.Data.Common.DbCommand\n      description: A <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.IDataAdapter.Update*> to insert records in the data source for new rows in the data set.\n  overload: System.Data.Common.DbDataAdapter.InsertCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: OnRowUpdated(RowUpdatedEventArgs)\n  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Raises the <xref uid=\"langword_csharp_RowUpdated\" name=\"RowUpdated\" href=\"\"></xref> event of a .NET Framework data provider.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);\n    parameters:\n    - id: value\n      type: System.Data.Common.RowUpdatedEventArgs\n      description: A <xref href=\"System.Data.Common.RowUpdatedEventArgs\"></xref> that contains the event data.\n  overload: System.Data.Common.DbDataAdapter.OnRowUpdated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: OnRowUpdating(RowUpdatingEventArgs)\n  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Raises the <xref uid=\"langword_csharp_RowUpdating\" name=\"RowUpdating\" href=\"\"></xref> event of a .NET Framework data provider.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);\n    parameters:\n    - id: value\n      type: System.Data.Common.RowUpdatingEventArgs\n      description: An <xref href=\"System.Data.Common.RowUpdatingEventArgs\"></xref> that contains the event data.\n  overload: System.Data.Common.DbDataAdapter.OnRowUpdating*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.SelectCommand\n  id: SelectCommand\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: SelectCommand\n  nameWithType: DbDataAdapter.SelectCommand\n  fullName: System.Data.Common.DbDataAdapter.SelectCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets a command used to select records in the data source.\n  remarks: ''\n  example:\n  - \"The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_1_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_1_1.vb)]\"\n  syntax:\n    content: public System.Data.Common.DbCommand SelectCommand { get; set; }\n    return:\n      type: System.Data.Common.DbCommand\n      description: A <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.IDataAdapter.Update*> to select records from data source for placement in the data set.\n  overload: System.Data.Common.DbDataAdapter.SelectCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  id: System#Data#IDbDataAdapter#DeleteCommand\n  isEii: true\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets an SQL statement for deleting records from the data set.\n  remarks: \"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.  \\n  \\n For more information, see <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.\"\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to delete records in the data source for deleted rows in the data set.\n  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  id: System#Data#IDbDataAdapter#InsertCommand\n  isEii: true\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets an SQL statement used to insert new records into the data source.\n  remarks: \"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.  \\n  \\n For more information, see <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.\"\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to insert records in the data source for new rows in the data set.\n  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  id: System#Data#IDbDataAdapter#SelectCommand\n  isEii: true\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets an SQL statement used to select records in the data source.\n  remarks: \"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.  \\n  \\n For more information, see <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.\"\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to select records from data source for placement in the data set.\n  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  id: System#Data#IDbDataAdapter#UpdateCommand\n  isEii: true\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets an SQL statement used to update records in the data source.\n  remarks: \"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.  \\n  \\n For more information, see <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.\"\n  syntax:\n    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }\n    return:\n      type: System.Data.IDbCommand\n      description: An <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the data source for modified rows in the data set.\n  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone\n  id: System#ICloneable#Clone\n  isEii: true\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: System.ICloneable.Clone()\n  nameWithType: DbDataAdapter.System.ICloneable.Clone()\n  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Creates a new object that is a copy of the current instance.\n  remarks: \"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.ICloneable> interface.  \\n  \\n For more information, see <xref:System.ICloneable.Clone%2A?displayProperty=fullName>.\"\n  syntax:\n    content: object ICloneable.Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A new object that is a copy of this instance.\n  overload: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.TerminateBatching\n  id: TerminateBatching\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: TerminateBatching()\n  nameWithType: DbDataAdapter.TerminateBatching()\n  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Ends batching for the <xref href=\"System.Data.Common.DbDataAdapter\"></xref>.\n  remarks: In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.\n  syntax:\n    content: protected virtual void TerminateBatching ();\n    parameters: []\n  overload: System.Data.Common.DbDataAdapter.TerminateBatching*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The adapter does not support batches.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])\n  id: Update(System.Data.DataRow[])\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Update(DataRow[])\n  nameWithType: DbDataAdapter.Update(DataRow[])\n  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array in the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.  \\n  \\n It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.  \\n  \\n After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.  \\n  \\n When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.  \\n  \\n5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.  \\n  \\n6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.  \\n  \\n7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.  \\n  \\n Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.  \\n  \\n `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.  \\n  \\n|Enumeration value|Action taken|  \\n|-----------------------|------------------|  \\n|`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|  \\n|`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|  \\n|`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|  \\n  \\n The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.  \\n  \\n The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.  \\n  \\n> [!NOTE]\\n>  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.\"\n  example:\n  - \"The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_0_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_0_1.vb)]\"\n  syntax:\n    content: public int Update (System.Data.DataRow[] dataRows);\n    parameters:\n    - id: dataRows\n      type: System.Data.DataRow[]\n      description: An array of <xref href=\"System.Data.DataRow\"></xref> objects used to update the data source.\n    return:\n      type: System.Int32\n      description: The number of rows successfully updated from the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.Common.DbDataAdapter.Update*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Data.DataSet\"></xref> is invalid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source table is invalid.\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: \"No <xref href=\\\"System.Data.DataRow\\\"></xref> exists to update.  \\n  \\n -or-  \\n  \\n No <xref href=\\\"System.Data.DataTable\\\"></xref> exists to update.  \\n  \\n -or-  \\n  \\n No <xref href=\\\"System.Data.DataSet\\\"></xref> exists to use as a source.\"\n  - type: System.Data.DBConcurrencyException\n    commentId: T:System.Data.DBConcurrencyException\n    description: An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)\n  id: Update(System.Data.DataSet)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Update(DataSet)\n  nameWithType: DbDataAdapter.Update(DataSet)\n  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"When an application calls the Update method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, Update might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.  \\n  \\n It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If INSERT, UPDATE, or DELETE statements have not been specified, the Update method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The Update method retrieves rows from the table listed in the first mapping before performing an update. The Update then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.  \\n  \\n After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.  \\n  \\n When using Update, the order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.  \\n  \\n5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.  \\n  \\n6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.  \\n  \\n7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.  \\n  \\n Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.  \\n  \\n `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.  \\n  \\n|Enumeration value|Action taken|  \\n|-----------------------|------------------|  \\n|`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|  \\n|`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|  \\n|`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|  \\n  \\n The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.  \\n  \\n The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.  \\n  \\n> [!NOTE]\\n>  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling Update. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.\"\n  example:\n  - \"The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \\n  \\n [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_4_1.vb)]\\n [!code-cs[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_4_1.cs)]\"\n  syntax:\n    content: public override int Update (System.Data.DataSet dataSet);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The <xref href=\"System.Data.DataSet\"></xref> used to update the data source.\n    return:\n      type: System.Int32\n      description: The number of rows successfully updated from the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.Common.DbDataAdapter.Update*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source table is invalid.\n  - type: System.Data.DBConcurrencyException\n    commentId: T:System.Data.DBConcurrencyException\n    description: An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)\n  id: Update(System.Data.DataTable)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Update(DataTable)\n  nameWithType: DbDataAdapter.Update(DataTable)\n  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: \"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.  \\n  \\n It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.  \\n  \\n After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.  \\n  \\n When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.  \\n  \\n5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.  \\n  \\n6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.  \\n  \\n7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.  \\n  \\n Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.  \\n  \\n `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.  \\n  \\n|Enumeration value|Action taken|  \\n|-----------------------|------------------|  \\n|`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|  \\n|`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|  \\n|`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|  \\n  \\n The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.  \\n  \\n The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.  \\n  \\n> [!NOTE]\\n>  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.\"\n  example:\n  - \"The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \\n  \\n [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_1_1.vb)]\\n [!code-cs[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_1_1.cs)]\"\n  syntax:\n    content: public int Update (System.Data.DataTable dataTable);\n    parameters:\n    - id: dataTable\n      type: System.Data.DataTable\n      description: The <xref href=\"System.Data.DataTable\"></xref> used to update the data source.\n    return:\n      type: System.Int32\n      description: The number of rows successfully updated from the <xref href=\"System.Data.DataTable\"></xref>.\n  overload: System.Data.Common.DbDataAdapter.Update*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Data.DataSet\"></xref> is invalid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source table is invalid.\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: \"No <xref href=\\\"System.Data.DataRow\\\"></xref> exists to update.  \\n  \\n -or-  \\n  \\n No <xref href=\\\"System.Data.DataTable\\\"></xref> exists to update.  \\n  \\n -or-  \\n  \\n No <xref href=\\\"System.Data.DataSet\\\"></xref> exists to use as a source.\"\n  - type: System.Data.DBConcurrencyException\n    commentId: T:System.Data.DBConcurrencyException\n    description: An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)\n  id: Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Update(DataRow[],DataTableMapping)\n  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)\n  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array of <xref href=\"System.Data.DataSet\"></xref> objects.\n  remarks: \"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.  \\n  \\n It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.  \\n  \\n After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.  \\n  \\n When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.  \\n  \\n5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.  \\n  \\n6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.  \\n  \\n7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.  \\n  \\n Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.  \\n  \\n `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.  \\n  \\n|Enumeration value|Action taken|  \\n|-----------------------|------------------|  \\n|`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|  \\n|`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|  \\n|`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|  \\n  \\n The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.  \\n  \\n The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.  \\n  \\n> [!NOTE]\\n>  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.\"\n  syntax:\n    content: protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);\n    parameters:\n    - id: dataRows\n      type: System.Data.DataRow[]\n      description: An array of <xref href=\"System.Data.DataRow\"></xref> objects used to update the data source.\n    - id: tableMapping\n      type: System.Data.Common.DataTableMapping\n      description: The <xref:System.Data.IDataAdapter.TableMappings*> collection to use.\n    return:\n      type: System.Int32\n      description: The number of rows successfully updated from the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.Common.DbDataAdapter.Update*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Data.DataSet\"></xref> is invalid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source table is invalid.\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: \"No <xref href=\\\"System.Data.DataRow\\\"></xref> exists to update.  \\n  \\n -or-  \\n  \\n No <xref href=\\\"System.Data.DataTable\\\"></xref> exists to update.  \\n  \\n -or-  \\n  \\n No <xref href=\\\"System.Data.DataSet\\\"></xref> exists to use as a source.\"\n  - type: System.Data.DBConcurrencyException\n    commentId: T:System.Data.DBConcurrencyException\n    description: An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)\n  id: Update(System.Data.DataSet,System.String)\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: Update(DataSet,String)\n  nameWithType: DbDataAdapter.Update(DataSet,String)\n  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <xref href=\"System.Data.DataSet\"></xref> with the specified <xref href=\"System.Data.DataTable\"></xref> name.\n  remarks: \"When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.  \\n  \\n It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERT before UPDATE). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Update%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. When multiple tables with the same name, but different case, exist in a `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A> performs a case-sensitive comparison to find the corresponding table, and generates an exception if no exact match exists. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet ds = new DataSet();  \\n ds.Tables.Add(\\\"aaa\\\");  \\n ds.Tables.Add(\\\"AAA\\\");  \\n adapter.Update(ds, \\\"aaa\\\"); // Updates \\\"aaa\\\", which already exists in the DataSet.  \\n adapter.Update(ds, \\\"AAA\\\"); // Updates \\\"AAA\\\", which already exists in the DataSet.  \\n    adapter.Update(ds, \\\"Aaa\\\"); // Results in an exception.  \\n```  \\n  \\n If <xref:System.Data.Common.DbDataAdapter.Update%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.  \\n  \\n```  \\nDataSet dataset = new DataSet();  \\n dataset.Tables.Add(\\\"aaa\\\");  \\n    adapter.Update(dataset, \\\"AAA\\\"); // Updates table \\\"aaa\\\" because only one similarly named table is in the DataSet.  \\n```  \\n  \\n The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.  \\n  \\n After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.  \\n  \\n When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.  \\n  \\n5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.  \\n  \\n6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.  \\n  \\n7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.  \\n  \\n Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.  \\n  \\n `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.  \\n  \\n|Enumeration value|Action taken|  \\n|-----------------------|------------------|  \\n|`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|  \\n|`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|  \\n|`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|  \\n  \\n The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.  \\n  \\n The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.  \\n  \\n> [!NOTE]\\n>  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.\"\n  example:\n  - \"The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/csharp/m-system.data.common.dbd_2_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_2_1.vb)]\"\n  syntax:\n    content: public int Update (System.Data.DataSet dataSet, string srcTable);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The <xref href=\"System.Data.DataSet\"></xref> to use to update the data source.\n    - id: srcTable\n      type: System.String\n      description: The name of the source table to use for table mapping.\n    return:\n      type: System.Int32\n      description: The number of rows successfully updated from the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.Common.DbDataAdapter.Update*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Data.DataSet\"></xref> is invalid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source table is invalid.\n  - type: System.Data.DBConcurrencyException\n    commentId: T:System.Data.DBConcurrencyException\n    description: An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize\n  id: UpdateBatchSize\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: UpdateBatchSize\n  nameWithType: DbDataAdapter.UpdateBatchSize\n  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.\n  remarks: \"Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>. If the data provider supports batch processing, this can increase application performance by reducing the number of round-trips to the server. In ADO.NET 2.0, this property is supported for the .NET data providers for SQL Server (SqlClient) and Oracle (OracleClient).  \\n  \\n Executing an extremely large batch could decrease performance. Therefore, you should test for the optimum batch size setting before implementing your application.  \\n  \\n An <xref:System.ArgumentOutOfRangeException> will be thrown if the value is set to a number less than zero.\"\n  syntax:\n    content: public virtual int UpdateBatchSize { get; set; }\n    return:\n      type: System.Int32\n      description: \"The number of rows to process per batch.  \\n  \\n <table><thead><tr><th> Value is  \\n  \\n </th><th> Effect  \\n  \\n </th></tr></thead><tbody><tr><td> 0  \\n  \\n </td><td> There is no limit on the batch size.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td> Disables batch updating.  \\n  \\n </td></tr><tr><td> &gt; 1  \\n  \\n </td><td> Changes are sent using batches of UpdateBatchSize operations at a time.  \\n  \\n </td></tr></tbody></table>  \\n  \\n When setting this to a value other than 1 ,all the commands associated with the <xref href=\\\"System.Data.Common.DbDataAdapter\\\"></xref> must have their <xref:System.Data.IDbCommand.UpdatedRowSource*> property set to **None** or **OutputParameters**. An exception will be thrown otherwise.\"\n  overload: System.Data.Common.DbDataAdapter.UpdateBatchSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbDataAdapter.UpdateCommand\n  id: UpdateCommand\n  parent: System.Data.Common.DbDataAdapter\n  langs:\n  - csharp\n  name: UpdateCommand\n  nameWithType: DbDataAdapter.UpdateCommand\n  fullName: System.Data.Common.DbDataAdapter.UpdateCommand\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets a command used to update records in the data source.\n  remarks: During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> will be automatically generated.\n  example:\n  - \"The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \\n  \\n [!code-cs[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_2_1.cs)]\\n [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_2_1.vb)]\"\n  syntax:\n    content: public System.Data.Common.DbCommand UpdateCommand { get; set; }\n    return:\n      type: System.Data.Common.DbCommand\n      description: A <xref href=\"System.Data.IDbCommand\"></xref> used during <xref:System.Data.IDataAdapter.Update*> to update records in the data source for modified rows in the data set.\n  overload: System.Data.Common.DbDataAdapter.UpdateCommand*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Data.Common.DataAdapter\n  isExternal: false\n  name: System.Data.Common.DataAdapter\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.SystemException\n  parent: System\n  isExternal: false\n  name: SystemException\n  nameWithType: SystemException\n  fullName: System.SystemException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Data.DBConcurrencyException\n  parent: System.Data\n  isExternal: false\n  name: DBConcurrencyException\n  nameWithType: DBConcurrencyException\n  fullName: System.Data.DBConcurrencyException\n- uid: System.Data.Common.DbDataAdapter.#ctor\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: DbDataAdapter()\n  nameWithType: DbDataAdapter.DbDataAdapter()\n  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()\n- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: DbDataAdapter(DbDataAdapter)\n  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)\n  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)\n- uid: System.Data.Common.DbDataAdapter\n  parent: System.Data.Common\n  isExternal: false\n  name: DbDataAdapter\n  nameWithType: DbDataAdapter\n  fullName: System.Data.Common.DbDataAdapter\n- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: AddToBatch(IDbCommand)\n  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)\n  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.IDbCommand\n  parent: System.Data\n  isExternal: false\n  name: IDbCommand\n  nameWithType: IDbCommand\n  fullName: System.Data.IDbCommand\n- uid: System.Data.Common.DbDataAdapter.ClearBatch\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: ClearBatch()\n  nameWithType: DbDataAdapter.ClearBatch()\n  fullName: System.Data.Common.DbDataAdapter.ClearBatch()\n- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n- uid: System.Data.Common.RowUpdatedEventArgs\n  parent: System.Data.Common\n  isExternal: false\n  name: RowUpdatedEventArgs\n  nameWithType: RowUpdatedEventArgs\n  fullName: System.Data.Common.RowUpdatedEventArgs\n- uid: System.Data.DataRow\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow\n- uid: System.Data.StatementType\n  parent: System.Data\n  isExternal: false\n  name: StatementType\n  nameWithType: StatementType\n  fullName: System.Data.StatementType\n- uid: System.Data.Common.DataTableMapping\n  parent: System.Data.Common\n  isExternal: false\n  name: DataTableMapping\n  nameWithType: DataTableMapping\n  fullName: System.Data.Common.DataTableMapping\n- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)\n- uid: System.Data.Common.RowUpdatingEventArgs\n  parent: System.Data.Common\n  isExternal: false\n  name: RowUpdatingEventArgs\n  nameWithType: RowUpdatingEventArgs\n  fullName: System.Data.Common.RowUpdatingEventArgs\n- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: DefaultSourceTableName\n  nameWithType: DbDataAdapter.DefaultSourceTableName\n  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Common.DbDataAdapter.DeleteCommand\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: DeleteCommand\n  nameWithType: DbDataAdapter.DeleteCommand\n  fullName: System.Data.Common.DbDataAdapter.DeleteCommand\n- uid: System.Data.Common.DbCommand\n  parent: System.Data.Common\n  isExternal: false\n  name: DbCommand\n  nameWithType: DbCommand\n  fullName: System.Data.Common.DbCommand\n- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DbDataAdapter.Dispose(Boolean)\n  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.Common.DbDataAdapter.ExecuteBatch\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: ExecuteBatch()\n  nameWithType: DbDataAdapter.ExecuteBatch()\n  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Fill(DataSet)\n  nameWithType: DbDataAdapter.Fill(DataSet)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)\n- uid: System.Data.DataSet\n  parent: System.Data\n  isExternal: false\n  name: DataSet\n  nameWithType: DataSet\n  fullName: System.Data.DataSet\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Fill(DataTable)\n  nameWithType: DbDataAdapter.Fill(DataTable)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)\n- uid: System.Data.DataTable\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Fill(DataSet,String)\n  nameWithType: DbDataAdapter.Fill(DataSet,String)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Fill(DataTable,IDbCommand,CommandBehavior)\n  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)\n- uid: System.Data.CommandBehavior\n  parent: System.Data\n  isExternal: false\n  name: CommandBehavior\n  nameWithType: CommandBehavior\n  fullName: System.Data.CommandBehavior\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Fill(Int32,Int32,DataTable[])\n  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])\n  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])\n- uid: System.Data.DataTable[]\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable[]\n  spec.csharp:\n  - uid: System.Data.DataTable\n    name: DataTable\n    nameWithType: DataTable\n    fullName: DataTable[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Fill(DataSet,Int32,Int32,String)\n  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)\n  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)\n- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)\n  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)\n  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)\n- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: FillCommandBehavior\n  nameWithType: DbDataAdapter.FillCommandBehavior\n  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior\n- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: FillSchema(DataSet,SchemaType)\n  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)\n  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)\n- uid: System.Data.SchemaType\n  parent: System.Data\n  isExternal: false\n  name: SchemaType\n  nameWithType: SchemaType\n  fullName: System.Data.SchemaType\n- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: FillSchema(DataTable,SchemaType)\n  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)\n  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)\n- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: FillSchema(DataSet,SchemaType,String)\n  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)\n  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)\n- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)\n  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)\n  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)\n- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)\n  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)\n  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)\n- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: GetBatchedParameter(Int32,Int32)\n  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)\n  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)\n- uid: System.Data.IDataParameter\n  parent: System.Data\n  isExternal: false\n  name: IDataParameter\n  nameWithType: IDataParameter\n  fullName: System.Data.IDataParameter\n- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: GetBatchedRecordsAffected(Int32,Int32,Exception)\n  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Data.Common.DbDataAdapter.GetFillParameters\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: GetFillParameters()\n  nameWithType: DbDataAdapter.GetFillParameters()\n  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()\n- uid: System.Data.IDataParameter[]\n  parent: System.Data\n  isExternal: false\n  name: IDataParameter\n  nameWithType: IDataParameter\n  fullName: System.Data.IDataParameter[]\n  spec.csharp:\n  - uid: System.Data.IDataParameter\n    name: IDataParameter\n    nameWithType: IDataParameter\n    fullName: IDataParameter[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.Common.DbDataAdapter.InitializeBatching\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: InitializeBatching()\n  nameWithType: DbDataAdapter.InitializeBatching()\n  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()\n- uid: System.Data.Common.DbDataAdapter.InsertCommand\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: InsertCommand\n  nameWithType: DbDataAdapter.InsertCommand\n  fullName: System.Data.Common.DbDataAdapter.InsertCommand\n- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: OnRowUpdated(RowUpdatedEventArgs)\n  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)\n- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: OnRowUpdating(RowUpdatingEventArgs)\n  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)\n- uid: System.Data.Common.DbDataAdapter.SelectCommand\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: SelectCommand\n  nameWithType: DbDataAdapter.SelectCommand\n  fullName: System.Data.Common.DbDataAdapter.SelectCommand\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.ICloneable.Clone()\n  nameWithType: DbDataAdapter.System.ICloneable.Clone()\n  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.Common.DbDataAdapter.TerminateBatching\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: TerminateBatching()\n  nameWithType: DbDataAdapter.TerminateBatching()\n  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()\n- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Update(DataRow[])\n  nameWithType: DbDataAdapter.Update(DataRow[])\n  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])\n- uid: System.Data.DataRow[]\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow[]\n  spec.csharp:\n  - uid: System.Data.DataRow\n    name: DataRow\n    nameWithType: DataRow\n    fullName: DataRow[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Update(DataSet)\n  nameWithType: DbDataAdapter.Update(DataSet)\n  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)\n- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Update(DataTable)\n  nameWithType: DbDataAdapter.Update(DataTable)\n  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)\n- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Update(DataRow[],DataTableMapping)\n  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)\n  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)\n- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Update(DataSet,String)\n  nameWithType: DbDataAdapter.Update(DataSet,String)\n  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)\n- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: UpdateBatchSize\n  nameWithType: DbDataAdapter.UpdateBatchSize\n  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize\n- uid: System.Data.Common.DbDataAdapter.UpdateCommand\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: UpdateCommand\n  nameWithType: DbDataAdapter.UpdateCommand\n  fullName: System.Data.Common.DbDataAdapter.UpdateCommand\n- uid: System.Data.Common.DbDataAdapter.#ctor*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: DbDataAdapter\n  nameWithType: DbDataAdapter.DbDataAdapter\n- uid: System.Data.Common.DbDataAdapter.AddToBatch*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: AddToBatch\n  nameWithType: DbDataAdapter.AddToBatch\n- uid: System.Data.Common.DbDataAdapter.ClearBatch*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: ClearBatch\n  nameWithType: DbDataAdapter.ClearBatch\n- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: CreateRowUpdatedEvent\n  nameWithType: DbDataAdapter.CreateRowUpdatedEvent\n- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: CreateRowUpdatingEvent\n  nameWithType: DbDataAdapter.CreateRowUpdatingEvent\n- uid: System.Data.Common.DbDataAdapter.DeleteCommand*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: DeleteCommand\n  nameWithType: DbDataAdapter.DeleteCommand\n- uid: System.Data.Common.DbDataAdapter.Dispose*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Dispose\n  nameWithType: DbDataAdapter.Dispose\n- uid: System.Data.Common.DbDataAdapter.ExecuteBatch*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: ExecuteBatch\n  nameWithType: DbDataAdapter.ExecuteBatch\n- uid: System.Data.Common.DbDataAdapter.Fill*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Fill\n  nameWithType: DbDataAdapter.Fill\n- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: FillCommandBehavior\n  nameWithType: DbDataAdapter.FillCommandBehavior\n- uid: System.Data.Common.DbDataAdapter.FillSchema*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: FillSchema\n  nameWithType: DbDataAdapter.FillSchema\n- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: GetBatchedParameter\n  nameWithType: DbDataAdapter.GetBatchedParameter\n- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: GetBatchedRecordsAffected\n  nameWithType: DbDataAdapter.GetBatchedRecordsAffected\n- uid: System.Data.Common.DbDataAdapter.GetFillParameters*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: GetFillParameters\n  nameWithType: DbDataAdapter.GetFillParameters\n- uid: System.Data.Common.DbDataAdapter.InitializeBatching*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: InitializeBatching\n  nameWithType: DbDataAdapter.InitializeBatching\n- uid: System.Data.Common.DbDataAdapter.InsertCommand*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: InsertCommand\n  nameWithType: DbDataAdapter.InsertCommand\n- uid: System.Data.Common.DbDataAdapter.OnRowUpdated*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: OnRowUpdated\n  nameWithType: DbDataAdapter.OnRowUpdated\n- uid: System.Data.Common.DbDataAdapter.OnRowUpdating*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: OnRowUpdating\n  nameWithType: DbDataAdapter.OnRowUpdating\n- uid: System.Data.Common.DbDataAdapter.SelectCommand*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: SelectCommand\n  nameWithType: DbDataAdapter.SelectCommand\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.DeleteCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.InsertCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.SelectCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand\n- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.Data.IDbDataAdapter.UpdateCommand\n  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand\n- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: System.ICloneable.Clone\n  nameWithType: DbDataAdapter.System.ICloneable.Clone\n- uid: System.Data.Common.DbDataAdapter.TerminateBatching*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: TerminateBatching\n  nameWithType: DbDataAdapter.TerminateBatching\n- uid: System.Data.Common.DbDataAdapter.Update*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: Update\n  nameWithType: DbDataAdapter.Update\n- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: UpdateBatchSize\n  nameWithType: DbDataAdapter.UpdateBatchSize\n- uid: System.Data.Common.DbDataAdapter.UpdateCommand*\n  parent: System.Data.Common.DbDataAdapter\n  isExternal: false\n  name: UpdateCommand\n  nameWithType: DbDataAdapter.UpdateCommand\n"}