{"nodes":[{"pos":[2639,2785],"content":"Provides the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> base class for the listeners who monitor trace and debug output.","needQuote":true,"needEscape":true,"source":"Provides the <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class for the listeners who monitor trace and debug output."},{"pos":[5421,5515],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.TraceListener\"></xref> class."},{"pos":[5528,5791],"content":"The following table shows initial property values for an instance of <xref:System.Diagnostics.TraceListener>.      |Property|Default Value|   |--------------|-------------------|   |Name|The empty string (\"\").|   |Indent|Zero.|   |IndentSize|Four spaces.|","needQuote":false,"needEscape":true,"nodes":[{"content":"The following table shows initial property values for an instance of <xref:System.Diagnostics.TraceListener>.      |Property|Default Value|   |--------------|-------------------|   |Name|The empty string (\"\").|   |Indent|Zero.|   |IndentSize|Four spaces.|","pos":[0,255],"nodes":[{"content":"The following table shows initial property values for an instance of &lt;xref:System.Diagnostics.TraceListener&gt;.","pos":[0,109],"source":"The following table shows initial property values for an instance of <xref:System.Diagnostics.TraceListener>."},{"content":"|Property|Default Value|   |--------------|-------------------|   |Name|The empty string (\"\").|   |Indent|Zero.|   |IndentSize|Four spaces.|","pos":[115,255]}]}]},{"pos":[6345,6480],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified name as the listener.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.TraceListener\"></xref> class using the specified name as the listener."},{"pos":[6619,6689],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.Diagnostics.TraceListener\"></xref>."},{"pos":[7114,7202],"content":"Gets the custom trace listener attributes defined in the application configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the custom trace listener attributes defined in the application configuration file.","pos":[0,88]}]},{"pos":[7215,8352],"content":"Classes that inherit from the <xref:System.Diagnostics.TraceListener> class can add custom attributes by overriding the <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A> method and returning a string array of custom attribute names. The Attributes property identifies the custom attributes that are referenced in the application's configuration file. For example, in the following configuration file excerpt the <xref:System.Diagnostics.DelimitedListTraceListener> custom attribute \"delimiter\" is referenced. In this case, the Attributes property returns a <xref:System.Collections.Specialized.StringDictionary> containing the string \"delimiter\".      ```   <listeners>     <add name=\"delimitedListener\"        type=\"System.Diagnostics.DelimitedListTraceListener\"        delimiter=\":\"        initializeData=\"delimitedOutput.txt\"        traceOutputOptions=\"ProcessId, DateTime\" />     <remove name=\"Default\" />   </listeners>   ```       Unreferenced custom attributes are not enumerated.  For more information, see the <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Classes that inherit from the &lt;xref:System.Diagnostics.TraceListener&gt; class can add custom attributes by overriding the &lt;xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A&gt; method and returning a string array of custom attribute names.","pos":[0,248],"source":"Classes that inherit from the <xref:System.Diagnostics.TraceListener> class can add custom attributes by overriding the <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A> method and returning a string array of custom attribute names."},{"content":"The Attributes property identifies the custom attributes that are referenced in the application's configuration file.","pos":[249,366]},{"content":"For example, in the following configuration file excerpt the &lt;xref:System.Diagnostics.DelimitedListTraceListener&gt; custom attribute \"delimiter\" is referenced.","pos":[367,524],"source":" For example, in the following configuration file excerpt the <xref:System.Diagnostics.DelimitedListTraceListener> custom attribute \"delimiter\" is referenced."},{"content":"In this case, the Attributes property returns a &lt;xref:System.Collections.Specialized.StringDictionary&gt; containing the string \"delimiter\".","pos":[525,662],"source":" In this case, the Attributes property returns a <xref:System.Collections.Specialized.StringDictionary> containing the string \"delimiter\"."},{"content":"<ph id=\"ph1\">```   &lt;listeners&gt;     &lt;add name=\"delimitedListener\"        type=\"System.Diagnostics.DelimitedListTraceListener\"        delimiter=\":\"        initializeData=\"delimitedOutput.txt\"        traceOutputOptions=\"ProcessId, DateTime\" /&gt;     &lt;remove name=\"Default\" /&gt;   &lt;/listeners&gt;   ```</ph>       Unreferenced custom attributes are not enumerated.","pos":[668,1003],"source":"```   <listeners>     <add name=\"delimitedListener\"        type=\"System.Diagnostics.DelimitedListTraceListener\"        delimiter=\":\"        initializeData=\"delimitedOutput.txt\"        traceOutputOptions=\"ProcessId, DateTime\" />     <remove name=\"Default\" />   </listeners>   ```       Unreferenced custom attributes are not enumerated."},{"content":"For more information, see the &lt;xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A&gt; method.","pos":[1005,1108],"source":"  For more information, see the <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A> method."}]},{"pos":[8543,8670],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the custom attributes for the trace listener.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.StringDictionary\"></xref> containing the custom attributes for the trace listener."},{"pos":[9079,9193],"content":"When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.","pos":[0,114]}]},{"pos":[9205,9385],"content":"Use this method when the output is going to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>. After a call to this method, you must reinitialize the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this method when the output is going to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>. After a call to this method, you must reinitialize the object.","pos":[0,180],"nodes":[{"content":"Use this method when the output is going to a file, such as to the &lt;xref:System.Diagnostics.TextWriterTraceListener&gt;.","pos":[0,117],"source":"Use this method when the output is going to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>."},{"content":"After a call to this method, you must reinitialize the object.","pos":[118,180]}]}]},{"pos":[9871,9960],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Diagnostics.TraceListener\"></xref>."},{"pos":[9972,10212],"content":"Calling Dispose allows the resources used by the <xref:System.Diagnostics.TraceListener> to be reallocated for other purposes. For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"nodes":[{"content":"Calling Dispose allows the resources used by the &lt;xref:System.Diagnostics.TraceListener&gt; to be reallocated for other purposes.","pos":[0,126],"source":"Calling Dispose allows the resources used by the <xref:System.Diagnostics.TraceListener> to be reallocated for other purposes."},{"content":"For more information about Dispose, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[127,240],"source":" For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[10747,10892],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Diagnostics.TraceListener\"></xref> and optionally releases the managed resources."},{"pos":[10905,11510],"content":"This method is called by the public <xref:System.Diagnostics.TraceListener.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected <xref:System.Diagnostics.TraceListener.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Diagnostics.TraceListener> references. This method invokes the `Dispose` method of each referenced object.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called by the public &lt;xref:System.Diagnostics.TraceListener.Dispose%2A&gt; method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,142],"source":"This method is called by the public <xref:System.Diagnostics.TraceListener.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose`</ph> invokes the protected &lt;xref:System.Diagnostics.TraceListener.Dispose%2A&gt; method with the <ph id=\"ph2\">`disposing`</ph> parameter set to <ph id=\"ph3\">`true`</ph>.","pos":[143,278],"source":"`Dispose` invokes the protected <xref:System.Diagnostics.TraceListener.Dispose%2A> method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[279,362],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Diagnostics.TraceListener&gt; references.","pos":[369,535],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Diagnostics.TraceListener> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[536,603],"source":" This method invokes the `Dispose` method of each referenced object."}]},{"pos":[11666,11875],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[12324,12457],"content":"Emits an error message to the listener you create when you implement the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Emits an error message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class."},{"pos":[12469,12998],"content":"The default behavior is to display the specified message in a message box when the application is running in a user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in a <xref:System.Diagnostics.TraceListenerCollection> collection. By default, the <xref:System.Diagnostics.TraceListenerCollection> collection has an instance of a <xref:System.Diagnostics.DefaultTraceListener>. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to or removing one from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default behavior is to display the specified message in a message box when the application is running in a user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in a <xref:System.Diagnostics.TraceListenerCollection> collection. By default, the <xref:System.Diagnostics.TraceListenerCollection> collection has an instance of a <xref:System.Diagnostics.DefaultTraceListener>. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to or removing one from the collection.","pos":[0,529],"nodes":[{"content":"The default behavior is to display the specified message in a message box when the application is running in a user-interface mode, and to the &lt;xref:System.Diagnostics.TraceListener&gt; instances in a &lt;xref:System.Diagnostics.TraceListenerCollection&gt; collection.","pos":[0,259],"source":"The default behavior is to display the specified message in a message box when the application is running in a user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in a <xref:System.Diagnostics.TraceListenerCollection> collection."},{"content":"By default, the &lt;xref:System.Diagnostics.TraceListenerCollection&gt; collection has an instance of a &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[260,405],"source":" By default, the <xref:System.Diagnostics.TraceListenerCollection> collection has an instance of a <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"You can customize this behavior by adding a &lt;xref:System.Diagnostics.TraceListener&gt; to or removing one from the collection.","pos":[406,529],"source":" You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to or removing one from the collection."}]}]},{"pos":[13144,13162],"content":"A message to emit.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to emit.","pos":[0,18]}]},{"pos":[13657,13819],"content":"Emits an error message and a detailed error message to the listener you create when you implement the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Emits an error message and a detailed error message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class."},{"pos":[13831,14371],"content":"The default behavior is to display the message and detailed message in a message box when the application is running in a user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in a <xref:System.Diagnostics.TraceListenerCollection> collection. By default, the <xref:System.Diagnostics.TraceListenerCollection> collection has an instance of a <xref:System.Diagnostics.DefaultTraceListener>. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to or removing one from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default behavior is to display the message and detailed message in a message box when the application is running in a user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in a <xref:System.Diagnostics.TraceListenerCollection> collection. By default, the <xref:System.Diagnostics.TraceListenerCollection> collection has an instance of a <xref:System.Diagnostics.DefaultTraceListener>. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to or removing one from the collection.","pos":[0,540],"nodes":[{"content":"The default behavior is to display the message and detailed message in a message box when the application is running in a user-interface mode, and to the &lt;xref:System.Diagnostics.TraceListener&gt; instances in a &lt;xref:System.Diagnostics.TraceListenerCollection&gt; collection.","pos":[0,270],"source":"The default behavior is to display the message and detailed message in a message box when the application is running in a user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in a <xref:System.Diagnostics.TraceListenerCollection> collection."},{"content":"By default, the &lt;xref:System.Diagnostics.TraceListenerCollection&gt; collection has an instance of a &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[271,416],"source":" By default, the <xref:System.Diagnostics.TraceListenerCollection> collection has an instance of a <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"You can customize this behavior by adding a &lt;xref:System.Diagnostics.TraceListener&gt; to or removing one from the collection.","pos":[417,540],"source":" You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to or removing one from the collection."}]}]},{"pos":[14539,14557],"content":"A message to emit.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to emit.","pos":[0,18]}]},{"pos":[14627,14654],"content":"A detailed message to emit.","needQuote":true,"needEscape":true,"nodes":[{"content":"A detailed message to emit.","pos":[0,27]}]},{"pos":[15058,15112],"content":"Gets and sets the trace filter for the trace listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets and sets the trace filter for the trace listener.","pos":[0,54]}]},{"pos":[15124,15557],"content":"A trace filter can be added to a trace listener to provide a layer of screening beyond that provided to the trace source by switches. For example, the <xref:System.Diagnostics.EventTypeFilter> can be added to a trace listener to control the event types that are output by the listener.  Listeners that are called because the switch criteria are met can query their filter, if present, to determine if a trace is to be sent to output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A trace filter can be added to a trace listener to provide a layer of screening beyond that provided to the trace source by switches. For example, the <xref:System.Diagnostics.EventTypeFilter> can be added to a trace listener to control the event types that are output by the listener.  Listeners that are called because the switch criteria are met can query their filter, if present, to determine if a trace is to be sent to output.","pos":[0,433],"nodes":[{"content":"A trace filter can be added to a trace listener to provide a layer of screening beyond that provided to the trace source by switches.","pos":[0,133]},{"content":"For example, the &lt;xref:System.Diagnostics.EventTypeFilter&gt; can be added to a trace listener to control the event types that are output by the listener.","pos":[134,285],"source":" For example, the <xref:System.Diagnostics.EventTypeFilter> can be added to a trace listener to control the event types that are output by the listener."},{"content":"Listeners that are called because the switch criteria are met can query their filter, if present, to determine if a trace is to be sent to output.","pos":[287,433]}]}]},{"pos":[16180,16270],"content":"An object derived from the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceFilter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> base class.","needQuote":true,"needEscape":true,"source":"An object derived from the <xref href=\"System.Diagnostics.TraceFilter\"></xref> base class."},{"pos":[16675,16737],"content":"When overridden in a derived class, flushes the output buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, flushes the output buffer.","pos":[0,62]}]},{"pos":[17298,17357],"content":"Gets the custom attributes supported by the trace listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the custom attributes supported by the trace listener.","pos":[0,59]}]},{"pos":[17369,17438],"content":"The default implementation for GetSupportedAttributes returns <ph id=\"ph1\">`null`</ph>.","needQuote":true,"needEscape":true,"source":"The default implementation for GetSupportedAttributes returns `null`."},{"pos":[17982,18157],"content":"A string array naming the custom attributes supported by the trace listener, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if there are no custom attributes.","needQuote":true,"needEscape":true,"source":"A string array naming the custom attributes supported by the trace listener, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there are no custom attributes."},{"pos":[18604,18634],"content":"Gets or sets the indent level.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the indent level.","pos":[0,30]}]},{"pos":[18646,18866],"content":"The IndentLevel property represents the number of times that the indent specified by the <xref:System.Diagnostics.TraceListener.IndentSize%2A> property is applied. This property is stored on per-thread/per-request basis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The IndentLevel property represents the number of times that the indent specified by the <xref:System.Diagnostics.TraceListener.IndentSize%2A> property is applied. This property is stored on per-thread/per-request basis.","pos":[0,220],"nodes":[{"content":"The IndentLevel property represents the number of times that the indent specified by the &lt;xref:System.Diagnostics.TraceListener.IndentSize%2A&gt; property is applied.","pos":[0,163],"source":"The IndentLevel property represents the number of times that the indent specified by the <xref:System.Diagnostics.TraceListener.IndentSize%2A> property is applied."},{"content":"This property is stored on per-thread/per-request basis.","pos":[164,220]}]}]},{"pos":[18983,19021],"content":"The indent level. The default is zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The indent level. The default is zero.","pos":[0,38],"nodes":[{"content":"The indent level.","pos":[0,17]},{"content":"The default is zero.","pos":[18,38]}]}]},{"pos":[19452,19499],"content":"Gets or sets the number of spaces in an indent.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the number of spaces in an indent.","pos":[0,47]}]},{"pos":[19511,19566],"content":"The property is stored on per-thread/per-request basis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property is stored on per-thread/per-request basis.","pos":[0,55]}]},{"pos":[19682,19744],"content":"The number of spaces in an indent. The default is four spaces.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of spaces in an indent. The default is four spaces.","pos":[0,62],"nodes":[{"content":"The number of spaces in an indent.","pos":[0,34]},{"content":"The default is four spaces.","pos":[35,62]}]}]},{"pos":[19930,19987],"content":"Set operation failed because the value is less than zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"Set operation failed because the value is less than zero.","pos":[0,57]}]},{"pos":[20353,20419],"content":"Gets a value indicating whether the trace listener is thread safe.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the trace listener is thread safe.","pos":[0,66]}]},{"pos":[20431,20909],"content":"The value of IsThreadSafe is used to determine whether to use a global lock when writing to the listener. If the value of IsThreadSafe is `false`, the global lock is used regardless of the value of <xref:System.Diagnostics.Trace.UseGlobalLock%2A>. The global lock is not used only if the value of IsThreadSafe is `true` and the value of <xref:System.Diagnostics.Trace.UseGlobalLock%2A> is `false`. The default behavior is to use the global lock whenever writing to the listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of IsThreadSafe is used to determine whether to use a global lock when writing to the listener.","pos":[0,105]},{"content":"If the value of IsThreadSafe is <ph id=\"ph1\">`false`</ph>, the global lock is used regardless of the value of &lt;xref:System.Diagnostics.Trace.UseGlobalLock%2A&gt;.","pos":[106,247],"source":" If the value of IsThreadSafe is `false`, the global lock is used regardless of the value of <xref:System.Diagnostics.Trace.UseGlobalLock%2A>."},{"content":"The global lock is not used only if the value of IsThreadSafe is <ph id=\"ph1\">`true`</ph> and the value of &lt;xref:System.Diagnostics.Trace.UseGlobalLock%2A&gt; is <ph id=\"ph2\">`false`</ph>.","pos":[248,397],"source":" The global lock is not used only if the value of IsThreadSafe is `true` and the value of <xref:System.Diagnostics.Trace.UseGlobalLock%2A> is `false`."},{"content":"The default behavior is to use the global lock whenever writing to the listener.","pos":[398,478]}]},{"pos":[21033,21285],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the trace listener is thread safe; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the trace listener is thread safe; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,173],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the trace listener is thread safe; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[174,252],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[21687,21770],"content":"Gets or sets a name for this <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a name for this <xref href=\"System.Diagnostics.TraceListener\"></xref>."},{"pos":[21782,21902],"content":"The name can be used to organize and access listeners in a <xref:System.Diagnostics.TraceListenerCollection> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name can be used to organize and access listeners in a &lt;xref:System.Diagnostics.TraceListenerCollection&gt; collection.","pos":[0,120],"source":"The name can be used to organize and access listeners in a <xref:System.Diagnostics.TraceListenerCollection> collection."}]},{"pos":[22024,22131],"content":"A name for this <xref href=\"System.Diagnostics.TraceListener\"></xref>. The default is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"A name for this <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,70],"source":"A name for this <xref href=\"System.Diagnostics.TraceListener\"></xref>."},{"content":"The default is an empty string (\"\").","pos":[71,107]}]},{"pos":[22555,22616],"content":"Gets or sets a value indicating whether to indent the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether to indent the output.","pos":[0,61]}]},{"pos":[22629,23003],"content":"**Note** The <xref:System.Diagnostics.TraceListener.WriteIndent%2A> method, called by the <xref:System.Diagnostics.DefaultTraceListener> and <xref:System.Diagnostics.TextWriterTraceListener> classes, sets the NeedIndent property value to `false` to prevent later, unnecessary indents. You must set the NeedIndent property to `true` each time you wish to indent trace output.","needQuote":false,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> The &lt;xref:System.Diagnostics.TraceListener.WriteIndent%2A&gt; method, called by the &lt;xref:System.Diagnostics.DefaultTraceListener&gt; and &lt;xref:System.Diagnostics.TextWriterTraceListener&gt; classes, sets the NeedIndent property value to <ph id=\"ph1\">`false`</ph> to prevent later, unnecessary indents.","pos":[0,284],"source":"**Note** The <xref:System.Diagnostics.TraceListener.WriteIndent%2A> method, called by the <xref:System.Diagnostics.DefaultTraceListener> and <xref:System.Diagnostics.TextWriterTraceListener> classes, sets the NeedIndent property value to `false` to prevent later, unnecessary indents."},{"content":"You must set the NeedIndent property to <ph id=\"ph1\">`true`</ph> each time you wish to indent trace output.","pos":[285,374],"source":" You must set the NeedIndent property to `true` each time you wish to indent trace output."}]},{"pos":[23126,23295],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the output should be indented; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the output should be indented; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24096,24190],"content":"Writes trace information, a data object and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a data object and event information to the listener specific output.","pos":[0,94]}]},{"pos":[24203,24765],"content":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.       The default implementation writes the `eventCache`, `source`, `eventType` and `id` parameters in the header and footer of the trace. The `data` parameter is written as the body of the trace message. The `ToString` method of the data object is used to convert the object to a <xref:System.String>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  This method is not intended to be called directly by application code but by members of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace data to output.","pos":[0,256],"source":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output."},{"content":"The default implementation writes the <ph id=\"ph1\">`eventCache`</ph>, <ph id=\"ph2\">`source`</ph>, <ph id=\"ph3\">`eventType`</ph> and <ph id=\"ph4\">`id`</ph> parameters in the header and footer of the trace.","pos":[263,395],"source":"       The default implementation writes the `eventCache`, `source`, `eventType` and `id` parameters in the header and footer of the trace."},{"content":"The <ph id=\"ph1\">`data`</ph> parameter is written as the body of the trace message.","pos":[396,461],"source":" The `data` parameter is written as the body of the trace message."},{"content":"The <ph id=\"ph1\">`ToString`</ph> method of the data object is used to convert the object to a &lt;xref:System.String&gt;.","pos":[462,559],"source":" The `ToString` method of the data object is used to convert the object to a <xref:System.String>."}]},{"pos":[25053,25195],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[25258,25363],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[25449,25577],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace."},{"pos":[25635,25670],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[25731,25754],"content":"The trace data to emit.","needQuote":true,"needEscape":true,"nodes":[{"content":"The trace data to emit.","pos":[0,23]}]},{"pos":[26564,26669],"content":"Writes trace information, an array of data objects and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, an array of data objects and event information to the listener specific output.","pos":[0,105]}]},{"pos":[26682,27324],"content":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.       The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header. The data objects are converted to strings using the `ToString` method of each object. The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  This method is not intended to be called directly by application code but by members of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace data to output.","pos":[0,256],"source":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output."},{"content":"The default implementation writes the values of the <ph id=\"ph1\">`source`</ph>, <ph id=\"ph2\">`eventType`</ph> and <ph id=\"ph3\">`id`</ph> parameters as a header.","pos":[263,369],"source":"       The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header."},{"content":"The data objects are converted to strings using the <ph id=\"ph1\">`ToString`</ph> method of each object.","pos":[370,455],"source":" The data objects are converted to strings using the `ToString` method of each object."},{"content":"The <ph id=\"ph1\">`eventCache`</ph> data is written as a footer, the nature of the output data being dependent on the value of the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.","pos":[456,639],"source":" The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[27614,27756],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[27819,27924],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[28010,28138],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace."},{"pos":[28196,28231],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[28294,28330],"content":"An array of objects to emit as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of objects to emit as data.","pos":[0,36]}]},{"pos":[29086,29153],"content":"Writes trace and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace and event information to the listener specific output.","pos":[0,67]}]},{"pos":[29166,29722],"content":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.       The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header. The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  This method is not intended to be called directly by application code but by members of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace data to output.","pos":[0,256],"source":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output."},{"content":"The default implementation writes the values of the <ph id=\"ph1\">`source`</ph>, <ph id=\"ph2\">`eventType`</ph> and <ph id=\"ph3\">`id`</ph> parameters as a header.","pos":[263,369],"source":"       The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header."},{"content":"The <ph id=\"ph1\">`eventCache`</ph> data is written as a footer, the nature of the output data being dependent on the value of the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.","pos":[370,553],"source":" The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[29998,30140],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[30203,30308],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[30394,30522],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace."},{"pos":[30580,30615],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[31421,31512],"content":"Writes trace information, a message, and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a message, and event information to the listener specific output.","pos":[0,91]}]},{"pos":[31525,32113],"content":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.       The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header, followed by the `message` data. The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  This method is not intended to be called directly by application code but by members of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace data to output.","pos":[0,256],"source":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output."},{"content":"The default implementation writes the values of the <ph id=\"ph1\">`source`</ph>, <ph id=\"ph2\">`eventType`</ph> and <ph id=\"ph3\">`id`</ph> parameters as a header, followed by the <ph id=\"ph4\">`message`</ph> data.","pos":[263,401],"source":"       The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header, followed by the `message` data."},{"content":"The <ph id=\"ph1\">`eventCache`</ph> data is written as a footer, the nature of the output data being dependent on the value of the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.","pos":[402,585],"source":" The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[32405,32547],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[32610,32715],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[32801,32929],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace."},{"pos":[32987,33022],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[33086,33105],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[33970,34079],"content":"Writes trace information, a formatted array of objects and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a formatted array of objects and event information to the listener specific output.","pos":[0,109]}]},{"pos":[34092,34849],"content":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.       The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header. The `args` object array is converted to a string using the <xref:System.String.Format%2A> method, passing the `format` string and `args` array to format the string as the message portion of the trace. The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  This method is not intended to be called directly by application code but by members of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace data to output.","pos":[0,256],"source":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output."},{"content":"The default implementation writes the values of the <ph id=\"ph1\">`source`</ph>, <ph id=\"ph2\">`eventType`</ph> and <ph id=\"ph3\">`id`</ph> parameters as a header.","pos":[263,369],"source":"       The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header."},{"content":"The <ph id=\"ph1\">`args`</ph> object array is converted to a string using the &lt;xref:System.String.Format%2A&gt; method, passing the <ph id=\"ph2\">`format`</ph> string and <ph id=\"ph3\">`args`</ph> array to format the string as the message portion of the trace.","pos":[370,570],"source":" The `args` object array is converted to a string using the <xref:System.String.Format%2A> method, passing the `format` string and `args` array to format the string as the message portion of the trace."},{"content":"The <ph id=\"ph1\">`eventCache`</ph> data is written as a footer, the nature of the output data being dependent on the value of the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.","pos":[571,754],"source":" The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[35155,35297],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[35360,35465],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[35551,35679],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace."},{"pos":[35737,35772],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[35835,35940],"content":"A format string that contains zero or more format items, which correspond to objects in the <ph id=\"ph1\">`args`</ph> array.","needQuote":true,"needEscape":true,"source":"A format string that contains zero or more format items, which correspond to objects in the `args` array."},{"pos":[36003,36119],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array containing zero or more objects to format.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format."},{"pos":[36589,36627],"content":"Gets or sets the trace output options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the trace output options.","pos":[0,38]}]},{"pos":[36640,37773],"content":"The TraceOutputOptions property determines the optional content of trace output. The property can be set in the configuration file or programmatically during execution to include additional data specifically for a section of code. For example, you can set the TraceOutputOptions property for the console trace listener to <xref:System.Diagnostics.TraceOptions?displayProperty=fullName> to add call stack information to the trace output.       The <xref:System.Diagnostics.TraceOptions> enumeration is not used by the following classes and methods:      -   The <xref:System.Diagnostics.EventLogTraceListener> class, because it can cause a large volume of data to be written to the log.      -   The `Write` and `WriteLine` methods of the <xref:System.Diagnostics.ConsoleTraceListener>, <xref:System.Diagnostics.DefaultTraceListener>, and <xref:System.Diagnostics.TextWriterTraceListener> classes.      -   The <xref:System.Diagnostics.TraceListener.Write%2A> and <xref:System.Diagnostics.TraceListener.WriteLine%2A> methods of the <xref:System.Diagnostics.TraceListener> class when they are not overridden in a derived class.","needQuote":false,"needEscape":true,"nodes":[{"content":"The TraceOutputOptions property determines the optional content of trace output.","pos":[0,80]},{"content":"The property can be set in the configuration file or programmatically during execution to include additional data specifically for a section of code.","pos":[81,230]},{"content":"For example, you can set the TraceOutputOptions property for the console trace listener to &lt;xref:System.Diagnostics.TraceOptions?displayProperty=fullName&gt; to add call stack information to the trace output.","pos":[231,436],"source":" For example, you can set the TraceOutputOptions property for the console trace listener to <xref:System.Diagnostics.TraceOptions?displayProperty=fullName> to add call stack information to the trace output."},{"content":"The &lt;xref:System.Diagnostics.TraceOptions&gt; enumeration is not used by the following classes and methods:      -   The &lt;xref:System.Diagnostics.EventLogTraceListener&gt; class, because it can cause a large volume of data to be written to the log.","pos":[443,685],"source":"       The <xref:System.Diagnostics.TraceOptions> enumeration is not used by the following classes and methods:      -   The <xref:System.Diagnostics.EventLogTraceListener> class, because it can cause a large volume of data to be written to the log."},{"content":"-   The <ph id=\"ph1\">`Write`</ph> and <ph id=\"ph2\">`WriteLine`</ph> methods of the &lt;xref:System.Diagnostics.ConsoleTraceListener&gt;, &lt;xref:System.Diagnostics.DefaultTraceListener&gt;, and &lt;xref:System.Diagnostics.TextWriterTraceListener&gt; classes.","pos":[691,896],"source":"      -   The `Write` and `WriteLine` methods of the <xref:System.Diagnostics.ConsoleTraceListener>, <xref:System.Diagnostics.DefaultTraceListener>, and <xref:System.Diagnostics.TextWriterTraceListener> classes."},{"content":"-   The &lt;xref:System.Diagnostics.TraceListener.Write%2A&gt; and &lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt; methods of the &lt;xref:System.Diagnostics.TraceListener&gt; class when they are not overridden in a derived class.","pos":[902,1125],"source":"      -   The <xref:System.Diagnostics.TraceListener.Write%2A> and <xref:System.Diagnostics.TraceListener.WriteLine%2A> methods of the <xref:System.Diagnostics.TraceListener> class when they are not overridden in a derived class."}]},{"pos":[38548,38665],"content":"A bitwise combination of the enumeration values. The default is <xref href=\"System.Diagnostics.TraceOptions\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values.","pos":[0,48]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[49,117],"source":" The default is <xref href=\"System.Diagnostics.TraceOptions\"></xref>."}]},{"pos":[38859,38909],"content":"Set operation failed because the value is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"Set operation failed because the value is invalid.","pos":[0,50]}]},{"pos":[39582,39701],"content":"Writes trace information, a message, a related activity identity and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a message, a related activity identity and event information to the listener specific output.","pos":[0,119]}]},{"pos":[39714,40376],"content":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.       The <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> method is used for the correlation of related traces. The TraceTransfer method calls the <xref:System.Diagnostics.TraceListener.TraceEvent%2A> method to process the call, with the eventType level set to <xref:System.Diagnostics.TraceEventType> and the `relatedActivityId`<xref:System.Guid> as a string appended to the message.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  This method is not intended to be called directly by application code but by members of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace data to output.","pos":[0,256],"source":"> [!IMPORTANT] >  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output."},{"content":"The &lt;xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A&gt; method is used for the correlation of related traces.","pos":[263,386],"source":"       The <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> method is used for the correlation of related traces."},{"content":"The TraceTransfer method calls the &lt;xref:System.Diagnostics.TraceListener.TraceEvent%2A&gt; method to process the call, with the eventType level set to &lt;xref:System.Diagnostics.TraceEventType&gt; and the <ph id=\"ph1\">`relatedActivityId`</ph>&lt;xref:System.Guid&gt; as a string appended to the message.","pos":[387,659],"source":" The TraceTransfer method calls the <xref:System.Diagnostics.TraceListener.TraceEvent%2A> method to process the call, with the eventType level set to <xref:System.Diagnostics.TraceEventType> and the `relatedActivityId`<xref:System.Guid> as a string appended to the message."}]},{"pos":[40650,40792],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[40855,40960],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[41018,41053],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[41117,41136],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[41208,41267],"content":"A <xref:System.Guid> object identifying a related activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Guid&gt; object identifying a related activity.","pos":[0,59],"source":"A <xref:System.Guid> object identifying a related activity."}]},{"pos":[41727,41908],"content":"Writes the value of the object's &lt;xref:System.Object.ToString*&gt; method to the listener you create when you implement the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Writes the value of the object's <xref:System.Object.ToString*> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class."},{"pos":[42043,42118],"content":"An <xref:System.Object> whose fully qualified class name you want to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; whose fully qualified class name you want to write.","pos":[0,75],"source":"An <xref:System.Object> whose fully qualified class name you want to write."}]},{"pos":[42570,42683],"content":"When overridden in a derived class, writes the specified message to the listener you create in the derived class.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, writes the specified message to the listener you create in the derived class.","pos":[0,113]}]},{"pos":[42831,42850],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[43351,43552],"content":"Writes a category name and the value of the object's &lt;xref:System.Object.ToString*&gt; method to the listener you create when you implement the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class."},{"pos":[43704,43779],"content":"An <xref:System.Object> whose fully qualified class name you want to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; whose fully qualified class name you want to write.","pos":[0,75],"source":"An <xref:System.Object> whose fully qualified class name you want to write."}]},{"pos":[43844,43888],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]},{"pos":[44389,44536],"content":"Writes a category name and a message to the listener you create when you implement the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Writes a category name and a message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class."},{"pos":[44700,44719],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[44784,44828],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]},{"pos":[45262,45480],"content":"Writes the indent to the listener you create when you implement this class, and resets the &lt;xref:System.Diagnostics.TraceListener.NeedIndent*&gt; property to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Writes the indent to the listener you create when you implement this class, and resets the <xref:System.Diagnostics.TraceListener.NeedIndent*> property to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[45492,46433],"content":"This method writes the indent and resets the <xref:System.Diagnostics.TraceListener.NeedIndent%2A> property to `false`. Call this method if <xref:System.Diagnostics.TraceListener.NeedIndent%2A> is `true` when you are overriding the <xref:System.Diagnostics.TraceListener.Write%2A> and <xref:System.Diagnostics.TraceListener.WriteLine%2A> methods. By default, this method uses blank spaces for indentation. The size of the indent is determined by the values of the <xref:System.Diagnostics.TraceListener.IndentSize%2A> and <xref:System.Diagnostics.TraceListener.IndentLevel%2A> properties. The <xref:System.Diagnostics.TraceListener.IndentLevel%2A> property represents the number of times the indent of the size specified by the <xref:System.Diagnostics.TraceListener.IndentSize%2A> property is applied. This method is called by the <xref:System.Diagnostics.DefaultTraceListener> and <xref:System.Diagnostics.TextWriterTraceListener> classes.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method writes the indent and resets the &lt;xref:System.Diagnostics.TraceListener.NeedIndent%2A&gt; property to <ph id=\"ph1\">`false`</ph>.","pos":[0,119],"source":"This method writes the indent and resets the <xref:System.Diagnostics.TraceListener.NeedIndent%2A> property to `false`."},{"content":"Call this method if &lt;xref:System.Diagnostics.TraceListener.NeedIndent%2A&gt; is <ph id=\"ph1\">`true`</ph> when you are overriding the &lt;xref:System.Diagnostics.TraceListener.Write%2A&gt; and &lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt; methods.","pos":[120,346],"source":" Call this method if <xref:System.Diagnostics.TraceListener.NeedIndent%2A> is `true` when you are overriding the <xref:System.Diagnostics.TraceListener.Write%2A> and <xref:System.Diagnostics.TraceListener.WriteLine%2A> methods."},{"content":"By default, this method uses blank spaces for indentation.","pos":[347,405]},{"content":"The size of the indent is determined by the values of the &lt;xref:System.Diagnostics.TraceListener.IndentSize%2A&gt; and &lt;xref:System.Diagnostics.TraceListener.IndentLevel%2A&gt; properties.","pos":[406,588],"source":" The size of the indent is determined by the values of the <xref:System.Diagnostics.TraceListener.IndentSize%2A> and <xref:System.Diagnostics.TraceListener.IndentLevel%2A> properties."},{"content":"The &lt;xref:System.Diagnostics.TraceListener.IndentLevel%2A&gt; property represents the number of times the indent of the size specified by the &lt;xref:System.Diagnostics.TraceListener.IndentSize%2A&gt; property is applied.","pos":[589,802],"source":" The <xref:System.Diagnostics.TraceListener.IndentLevel%2A> property represents the number of times the indent of the size specified by the <xref:System.Diagnostics.TraceListener.IndentSize%2A> property is applied."},{"content":"This method is called by the &lt;xref:System.Diagnostics.DefaultTraceListener&gt; and &lt;xref:System.Diagnostics.TextWriterTraceListener&gt; classes.","pos":[803,941],"source":" This method is called by the <xref:System.Diagnostics.DefaultTraceListener> and <xref:System.Diagnostics.TextWriterTraceListener> classes."}]},{"pos":[46992,47204],"content":"Writes the value of the object's &lt;xref:System.Object.ToString*&gt; method to the listener you create when you implement the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, followed by a line terminator.","needQuote":true,"needEscape":true,"source":"Writes the value of the object's <xref:System.Object.ToString*> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class, followed by a line terminator."},{"pos":[47216,47316],"content":"The typical line terminator you might implement is a carriage return followed by a line feed (\\r ).","needQuote":true,"needEscape":true,"nodes":[{"content":"The typical line terminator you might implement is a carriage return followed by a line feed (\\r ).","pos":[0,99]}]},{"pos":[47455,47530],"content":"An <xref:System.Object> whose fully qualified class name you want to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; whose fully qualified class name you want to write.","pos":[0,75],"source":"An <xref:System.Object> whose fully qualified class name you want to write."}]},{"pos":[48006,48138],"content":"When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.","pos":[0,132]}]},{"pos":[48150,48250],"content":"The typical line terminator you might implement is a carriage return followed by a line feed (\\r ).","needQuote":true,"needEscape":true,"nodes":[{"content":"The typical line terminator you might implement is a carriage return followed by a line feed (\\r ).","pos":[0,99]}]},{"pos":[48402,48421],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[48946,49178],"content":"Writes a category name and the value of the object's &lt;xref:System.Object.ToString*&gt; method to the listener you create when you implement the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, followed by a line terminator.","needQuote":true,"needEscape":true,"source":"Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class, followed by a line terminator."},{"pos":[49190,49290],"content":"The typical line terminator you might implement is a carriage return followed by a line feed (\\r ).","needQuote":true,"needEscape":true,"nodes":[{"content":"The typical line terminator you might implement is a carriage return followed by a line feed (\\r ).","pos":[0,99]}]},{"pos":[49446,49521],"content":"An <xref:System.Object> whose fully qualified class name you want to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; whose fully qualified class name you want to write.","pos":[0,75],"source":"An <xref:System.Object> whose fully qualified class name you want to write."}]},{"pos":[49586,49630],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]},{"pos":[50155,50333],"content":"Writes a category name and a message to the listener you create when you implement the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, followed by a line terminator.","needQuote":true,"needEscape":true,"source":"Writes a category name and a message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class, followed by a line terminator."},{"pos":[50345,50445],"content":"The typical line terminator you might implement is a carriage return followed by a line feed (\\r ).","needQuote":true,"needEscape":true,"nodes":[{"content":"The typical line terminator you might implement is a carriage return followed by a line feed (\\r ).","pos":[0,99]}]},{"pos":[50613,50632],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[50697,50741],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.TraceListener\n  id: TraceListener\n  children:\n  - System.Diagnostics.TraceListener.#ctor\n  - System.Diagnostics.TraceListener.#ctor(System.String)\n  - System.Diagnostics.TraceListener.Attributes\n  - System.Diagnostics.TraceListener.Close\n  - System.Diagnostics.TraceListener.Dispose\n  - System.Diagnostics.TraceListener.Dispose(System.Boolean)\n  - System.Diagnostics.TraceListener.Fail(System.String)\n  - System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  - System.Diagnostics.TraceListener.Filter\n  - System.Diagnostics.TraceListener.Flush\n  - System.Diagnostics.TraceListener.GetSupportedAttributes\n  - System.Diagnostics.TraceListener.IndentLevel\n  - System.Diagnostics.TraceListener.IndentSize\n  - System.Diagnostics.TraceListener.IsThreadSafe\n  - System.Diagnostics.TraceListener.Name\n  - System.Diagnostics.TraceListener.NeedIndent\n  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  - System.Diagnostics.TraceListener.TraceOutputOptions\n  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  - System.Diagnostics.TraceListener.Write(System.Object)\n  - System.Diagnostics.TraceListener.Write(System.String)\n  - System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  - System.Diagnostics.TraceListener.Write(System.String,System.String)\n  - System.Diagnostics.TraceListener.WriteIndent\n  - System.Diagnostics.TraceListener.WriteLine(System.Object)\n  - System.Diagnostics.TraceListener.WriteLine(System.String)\n  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  langs:\n  - csharp\n  name: TraceListener\n  nameWithType: TraceListener\n  fullName: System.Diagnostics.TraceListener\n  type: Class\n  summary: Provides the <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class for the listeners who monitor trace and debug output.\n  remarks: \"For examples of how to implement a TraceListener, see the <xref:System.Diagnostics.DefaultTraceListener>, <xref:System.Diagnostics.TextWriterTraceListener> and the <xref:System.Diagnostics.EventLogTraceListener> classes.  \\n  \\n You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  \\n  \\n-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.  \\n  \\n-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.  \\n  \\n To add a trace listener, edit the configuration file that corresponds to the name of your application. Within this file, you can add a listener, set its type and set its parameter, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted similar to the following example.  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <trace autoflush=\\\"false\\\" indentsize=\\\"4\\\">  \\n      <listeners>  \\n        <add name=\\\"myListener\\\" type=\\\"System.Diagnostics.TextWriterTraceListener\\\" initializeData=\\\"TextWriterOutput.log\\\" />  \\n        <remove name=\\\"Default\\\" />  \\n      </listeners>  \\n    </trace>  \\n  </system.diagnostics>  \\n</configuration>  \\n```  \\n  \\n For more information on using configuration files for tracing, see [\\\\&lt;system.diagnostics\\\\&gt;](../Topic/%3Csystem.diagnostics%3E%20Element.md).\"\n  syntax:\n    content: 'public abstract class TraceListener : MarshalByRefObject, IDisposable'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: TraceListener()\n  nameWithType: TraceListener.TraceListener()\n  fullName: System.Diagnostics.TraceListener.TraceListener()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.TraceListener\"></xref> class.\n  remarks: \"The following table shows initial property values for an instance of <xref:System.Diagnostics.TraceListener>.  \\n  \\n|Property|Default Value|  \\n|--------------|-------------------|  \\n|Name|The empty string (\\\"\\\").|  \\n|Indent|Zero.|  \\n|IndentSize|Four spaces.|\"\n  syntax:\n    content: protected TraceListener ();\n    parameters: []\n  overload: System.Diagnostics.TraceListener.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: TraceListener(String)\n  nameWithType: TraceListener.TraceListener(String)\n  fullName: System.Diagnostics.TraceListener.TraceListener(String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.TraceListener\"></xref> class using the specified name as the listener.\n  syntax:\n    content: protected TraceListener (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the <xref href=\"System.Diagnostics.TraceListener\"></xref>.\n  overload: System.Diagnostics.TraceListener.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Attributes\n  id: Attributes\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: TraceListener.Attributes\n  fullName: System.Diagnostics.TraceListener.Attributes\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the custom trace listener attributes defined in the application configuration file.\n  remarks: \"Classes that inherit from the <xref:System.Diagnostics.TraceListener> class can add custom attributes by overriding the <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A> method and returning a string array of custom attribute names. The Attributes property identifies the custom attributes that are referenced in the application's configuration file. For example, in the following configuration file excerpt the <xref:System.Diagnostics.DelimitedListTraceListener> custom attribute \\\"delimiter\\\" is referenced. In this case, the Attributes property returns a <xref:System.Collections.Specialized.StringDictionary> containing the string \\\"delimiter\\\".  \\n  \\n```  \\n<listeners>  \\n  <add name=\\\"delimitedListener\\\"   \\n    type=\\\"System.Diagnostics.DelimitedListTraceListener\\\"   \\n    delimiter=\\\":\\\"   \\n    initializeData=\\\"delimitedOutput.txt\\\"   \\n    traceOutputOptions=\\\"ProcessId, DateTime\\\" />  \\n  <remove name=\\\"Default\\\" />  \\n</listeners>  \\n```  \\n  \\n Unreferenced custom attributes are not enumerated.  For more information, see the <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A> method.\"\n  syntax:\n    content: public System.Collections.Specialized.StringDictionary Attributes { get; }\n    return:\n      type: System.Collections.Specialized.StringDictionary\n      description: A <xref href=\"System.Collections.Specialized.StringDictionary\"></xref> containing the custom attributes for the trace listener.\n  overload: System.Diagnostics.TraceListener.Attributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Close\n  id: Close\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: TraceListener.Close()\n  fullName: System.Diagnostics.TraceListener.Close()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.\n  remarks: Use this method when the output is going to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>. After a call to this method, you must reinitialize the object.\n  syntax:\n    content: public virtual void Close ();\n    parameters: []\n  overload: System.Diagnostics.TraceListener.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Dispose\n  id: Dispose\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: TraceListener.Dispose()\n  fullName: System.Diagnostics.TraceListener.Dispose()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Releases all resources used by the <xref href=\"System.Diagnostics.TraceListener\"></xref>.\n  remarks: Calling Dispose allows the resources used by the <xref:System.Diagnostics.TraceListener> to be reallocated for other purposes. For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Diagnostics.TraceListener.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: TraceListener.Dispose(Boolean)\n  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Diagnostics.TraceListener\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public <xref:System.Diagnostics.TraceListener.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected <xref:System.Diagnostics.TraceListener.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Diagnostics.TraceListener> references. This method invokes the `Dispose` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Diagnostics.TraceListener.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Fail(System.String)\n  id: Fail(System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Fail(String)\n  nameWithType: TraceListener.Fail(String)\n  fullName: System.Diagnostics.TraceListener.Fail(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Emits an error message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class.\n  remarks: The default behavior is to display the specified message in a message box when the application is running in a user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in a <xref:System.Diagnostics.TraceListenerCollection> collection. By default, the <xref:System.Diagnostics.TraceListenerCollection> collection has an instance of a <xref:System.Diagnostics.DefaultTraceListener>. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to or removing one from the collection.\n  syntax:\n    content: public virtual void Fail (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to emit.\n  overload: System.Diagnostics.TraceListener.Fail*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  id: Fail(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Fail(String,String)\n  nameWithType: TraceListener.Fail(String,String)\n  fullName: System.Diagnostics.TraceListener.Fail(String,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Emits an error message and a detailed error message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class.\n  remarks: The default behavior is to display the message and detailed message in a message box when the application is running in a user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in a <xref:System.Diagnostics.TraceListenerCollection> collection. By default, the <xref:System.Diagnostics.TraceListenerCollection> collection has an instance of a <xref:System.Diagnostics.DefaultTraceListener>. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to or removing one from the collection.\n  syntax:\n    content: public virtual void Fail (string message, string detailMessage);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to emit.\n    - id: detailMessage\n      type: System.String\n      description: A detailed message to emit.\n  overload: System.Diagnostics.TraceListener.Fail*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Filter\n  id: Filter\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Filter\n  nameWithType: TraceListener.Filter\n  fullName: System.Diagnostics.TraceListener.Filter\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets and sets the trace filter for the trace listener.\n  remarks: A trace filter can be added to a trace listener to provide a layer of screening beyond that provided to the trace source by switches. For example, the <xref:System.Diagnostics.EventTypeFilter> can be added to a trace listener to control the event types that are output by the listener.  Listeners that are called because the switch criteria are met can query their filter, if present, to determine if a trace is to be sent to output.\n  example:\n  - \"The following code example shows how to use the Filter property to add a source filter to a console trace listener. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource2#28](~/add/codesnippet/csharp/p-system.diagnostics.tra_6_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#28](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_6_1.vb)]\"\n  syntax:\n    content: public System.Diagnostics.TraceFilter Filter { get; set; }\n    return:\n      type: System.Diagnostics.TraceFilter\n      description: An object derived from the <xref href=\"System.Diagnostics.TraceFilter\"></xref> base class.\n  overload: System.Diagnostics.TraceListener.Filter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Flush\n  id: Flush\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: TraceListener.Flush()\n  fullName: System.Diagnostics.TraceListener.Flush()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: When overridden in a derived class, flushes the output buffer.\n  syntax:\n    content: public virtual void Flush ();\n    parameters: []\n  overload: System.Diagnostics.TraceListener.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.GetSupportedAttributes\n  id: GetSupportedAttributes\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: GetSupportedAttributes()\n  nameWithType: TraceListener.GetSupportedAttributes()\n  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the custom attributes supported by the trace listener.\n  remarks: The default implementation for GetSupportedAttributes returns `null`.\n  example:\n  - \"The following code sample shows an override of the GetSupportedAttributes method for a custom trace listener.  \\n  \\n [!code-cs[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_22_1.cs)]\\n [!code-vb[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_22_1.vb)]\"\n  syntax:\n    content: protected virtual string[] GetSupportedAttributes ();\n    parameters: []\n    return:\n      type: System.String[]\n      description: A string array naming the custom attributes supported by the trace listener, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there are no custom attributes.\n  overload: System.Diagnostics.TraceListener.GetSupportedAttributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.IndentLevel\n  id: IndentLevel\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: IndentLevel\n  nameWithType: TraceListener.IndentLevel\n  fullName: System.Diagnostics.TraceListener.IndentLevel\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the indent level.\n  remarks: The IndentLevel property represents the number of times that the indent specified by the <xref:System.Diagnostics.TraceListener.IndentSize%2A> property is applied. This property is stored on per-thread/per-request basis.\n  syntax:\n    content: public int IndentLevel { get; set; }\n    return:\n      type: System.Int32\n      description: The indent level. The default is zero.\n  overload: System.Diagnostics.TraceListener.IndentLevel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.IndentSize\n  id: IndentSize\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: IndentSize\n  nameWithType: TraceListener.IndentSize\n  fullName: System.Diagnostics.TraceListener.IndentSize\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the number of spaces in an indent.\n  remarks: The property is stored on per-thread/per-request basis.\n  syntax:\n    content: public int IndentSize { get; set; }\n    return:\n      type: System.Int32\n      description: The number of spaces in an indent. The default is four spaces.\n  overload: System.Diagnostics.TraceListener.IndentSize*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Set operation failed because the value is less than zero.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.IsThreadSafe\n  id: IsThreadSafe\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: IsThreadSafe\n  nameWithType: TraceListener.IsThreadSafe\n  fullName: System.Diagnostics.TraceListener.IsThreadSafe\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets a value indicating whether the trace listener is thread safe.\n  remarks: The value of IsThreadSafe is used to determine whether to use a global lock when writing to the listener. If the value of IsThreadSafe is `false`, the global lock is used regardless of the value of <xref:System.Diagnostics.Trace.UseGlobalLock%2A>. The global lock is not used only if the value of IsThreadSafe is `true` and the value of <xref:System.Diagnostics.Trace.UseGlobalLock%2A> is `false`. The default behavior is to use the global lock whenever writing to the listener.\n  syntax:\n    content: public virtual bool IsThreadSafe { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the trace listener is thread safe; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.TraceListener.IsThreadSafe*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Name\n  id: Name\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Name\n  nameWithType: TraceListener.Name\n  fullName: System.Diagnostics.TraceListener.Name\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a name for this <xref href=\"System.Diagnostics.TraceListener\"></xref>.\n  remarks: The name can be used to organize and access listeners in a <xref:System.Diagnostics.TraceListenerCollection> collection.\n  syntax:\n    content: public virtual string Name { get; set; }\n    return:\n      type: System.String\n      description: A name for this <xref href=\"System.Diagnostics.TraceListener\"></xref>. The default is an empty string (\"\").\n  overload: System.Diagnostics.TraceListener.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.NeedIndent\n  id: NeedIndent\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: NeedIndent\n  nameWithType: TraceListener.NeedIndent\n  fullName: System.Diagnostics.TraceListener.NeedIndent\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a value indicating whether to indent the output.\n  remarks: '**Note** The <xref:System.Diagnostics.TraceListener.WriteIndent%2A> method, called by the <xref:System.Diagnostics.DefaultTraceListener> and <xref:System.Diagnostics.TextWriterTraceListener> classes, sets the NeedIndent property value to `false` to prevent later, unnecessary indents. You must set the NeedIndent property to `true` each time you wish to indent trace output.'\n  syntax:\n    content: protected bool NeedIndent { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the output should be indented; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.TraceListener.NeedIndent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace information, a data object and event information to the listener specific output.\n  remarks: \"> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.  \\n  \\n The default implementation writes the `eventCache`, `source`, `eventType` and `id` parameters in the header and footer of the trace. The `data` parameter is written as the body of the trace message. The `ToString` method of the data object is used to convert the object to a <xref:System.String>.\"\n  syntax:\n    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object\n      description: The trace data to emit.\n  overload: System.Diagnostics.TraceListener.TraceData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace information, an array of data objects and event information to the listener specific output.\n  remarks: \"> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.  \\n  \\n The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header. The data objects are converted to strings using the `ToString` method of each object. The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.\"\n  syntax:\n    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object[]\n      description: An array of objects to emit as data.\n  overload: System.Diagnostics.TraceListener.TraceData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace and event information to the listener specific output.\n  remarks: \"> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.  \\n  \\n The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header. The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.\"\n  syntax:\n    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n  overload: System.Diagnostics.TraceListener.TraceEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace information, a message, and event information to the listener specific output.\n  remarks: \"> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.  \\n  \\n The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header, followed by the `message` data. The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.\"\n  syntax:\n    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: System.Diagnostics.TraceListener.TraceEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace information, a formatted array of objects and event information to the listener specific output.\n  remarks: \"> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.  \\n  \\n The default implementation writes the values of the `source`, `eventType` and `id` parameters as a header. The `args` object array is converted to a string using the <xref:System.String.Format%2A> method, passing the `format` string and `args` array to format the string as the message portion of the trace. The `eventCache` data is written as a footer, the nature of the output data being dependent on the value of the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.\"\n  syntax:\n    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: format\n      type: System.String\n      description: A format string that contains zero or more format items, which correspond to objects in the `args` array.\n    - id: args\n      type: System.Object[]\n      description: An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format.\n  overload: System.Diagnostics.TraceListener.TraceEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.TraceOutputOptions\n  id: TraceOutputOptions\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: TraceOutputOptions\n  nameWithType: TraceListener.TraceOutputOptions\n  fullName: System.Diagnostics.TraceListener.TraceOutputOptions\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the trace output options.\n  remarks: \"The TraceOutputOptions property determines the optional content of trace output. The property can be set in the configuration file or programmatically during execution to include additional data specifically for a section of code. For example, you can set the TraceOutputOptions property for the console trace listener to <xref:System.Diagnostics.TraceOptions?displayProperty=fullName> to add call stack information to the trace output.  \\n  \\n The <xref:System.Diagnostics.TraceOptions> enumeration is not used by the following classes and methods:  \\n  \\n-   The <xref:System.Diagnostics.EventLogTraceListener> class, because it can cause a large volume of data to be written to the log.  \\n  \\n-   The `Write` and `WriteLine` methods of the <xref:System.Diagnostics.ConsoleTraceListener>, <xref:System.Diagnostics.DefaultTraceListener>, and <xref:System.Diagnostics.TextWriterTraceListener> classes.  \\n  \\n-   The <xref:System.Diagnostics.TraceListener.Write%2A> and <xref:System.Diagnostics.TraceListener.WriteLine%2A> methods of the <xref:System.Diagnostics.TraceListener> class when they are not overridden in a derived class.\"\n  example:\n  - \"The following example shows the setting of the TraceOutputOptions property for a console trace listener. The console trace listener is one of the listeners enumerated in the <xref:System.Diagnostics.TraceSource.Listeners%2A> property of a trace source. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource2#16](~/add/codesnippet/csharp/p-system.diagnostics.tra_9_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#16](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_9_1.vb)]\"\n  syntax:\n    content: public System.Diagnostics.TraceOptions TraceOutputOptions { get; set; }\n    return:\n      type: System.Diagnostics.TraceOptions\n      description: A bitwise combination of the enumeration values. The default is <xref href=\"System.Diagnostics.TraceOptions\"></xref>.\n  overload: System.Diagnostics.TraceListener.TraceOutputOptions*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Set operation failed because the value is invalid.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  id: TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace information, a message, a related activity identity and event information to the listener specific output.\n  remarks: \"> [!IMPORTANT]\\n>  This method is not intended to be called directly by application code but by members of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data to output.  \\n  \\n The <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> method is used for the correlation of related traces. The TraceTransfer method calls the <xref:System.Diagnostics.TraceListener.TraceEvent%2A> method to process the call, with the eventType level set to <xref:System.Diagnostics.TraceEventType> and the `relatedActivityId`<xref:System.Guid> as a string appended to the message.\"\n  syntax:\n    content: public virtual void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: message\n      type: System.String\n      description: A message to write.\n    - id: relatedActivityId\n      type: System.Guid\n      description: A <xref:System.Guid> object identifying a related activity.\n  overload: System.Diagnostics.TraceListener.TraceTransfer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Write(System.Object)\n  id: Write(System.Object)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Write(Object)\n  nameWithType: TraceListener.Write(Object)\n  fullName: System.Diagnostics.TraceListener.Write(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes the value of the object's <xref:System.Object.ToString*> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class.\n  syntax:\n    content: public virtual void Write (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: An <xref:System.Object> whose fully qualified class name you want to write.\n  overload: System.Diagnostics.TraceListener.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Write(System.String)\n  id: Write(System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: TraceListener.Write(String)\n  fullName: System.Diagnostics.TraceListener.Write(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: When overridden in a derived class, writes the specified message to the listener you create in the derived class.\n  syntax:\n    content: public abstract void Write (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: System.Diagnostics.TraceListener.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  id: Write(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Write(Object,String)\n  nameWithType: TraceListener.Write(Object,String)\n  fullName: System.Diagnostics.TraceListener.Write(Object,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class.\n  syntax:\n    content: public virtual void Write (object o, string category);\n    parameters:\n    - id: o\n      type: System.Object\n      description: An <xref:System.Object> whose fully qualified class name you want to write.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.TraceListener.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)\n  id: Write(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: Write(String,String)\n  nameWithType: TraceListener.Write(String,String)\n  fullName: System.Diagnostics.TraceListener.Write(String,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and a message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class.\n  syntax:\n    content: public virtual void Write (string message, string category);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to write.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.TraceListener.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.WriteIndent\n  id: WriteIndent\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: WriteIndent()\n  nameWithType: TraceListener.WriteIndent()\n  fullName: System.Diagnostics.TraceListener.WriteIndent()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes the indent to the listener you create when you implement this class, and resets the <xref:System.Diagnostics.TraceListener.NeedIndent*> property to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  remarks: This method writes the indent and resets the <xref:System.Diagnostics.TraceListener.NeedIndent%2A> property to `false`. Call this method if <xref:System.Diagnostics.TraceListener.NeedIndent%2A> is `true` when you are overriding the <xref:System.Diagnostics.TraceListener.Write%2A> and <xref:System.Diagnostics.TraceListener.WriteLine%2A> methods. By default, this method uses blank spaces for indentation. The size of the indent is determined by the values of the <xref:System.Diagnostics.TraceListener.IndentSize%2A> and <xref:System.Diagnostics.TraceListener.IndentLevel%2A> properties. The <xref:System.Diagnostics.TraceListener.IndentLevel%2A> property represents the number of times the indent of the size specified by the <xref:System.Diagnostics.TraceListener.IndentSize%2A> property is applied. This method is called by the <xref:System.Diagnostics.DefaultTraceListener> and <xref:System.Diagnostics.TextWriterTraceListener> classes.\n  syntax:\n    content: protected virtual void WriteIndent ();\n    parameters: []\n  overload: System.Diagnostics.TraceListener.WriteIndent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)\n  id: WriteLine(System.Object)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: WriteLine(Object)\n  nameWithType: TraceListener.WriteLine(Object)\n  fullName: System.Diagnostics.TraceListener.WriteLine(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes the value of the object's <xref:System.Object.ToString*> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class, followed by a line terminator.\n  remarks: The typical line terminator you might implement is a carriage return followed by a line feed (\\r\\n).\n  syntax:\n    content: public virtual void WriteLine (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: An <xref:System.Object> whose fully qualified class name you want to write.\n  overload: System.Diagnostics.TraceListener.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: WriteLine(String)\n  nameWithType: TraceListener.WriteLine(String)\n  fullName: System.Diagnostics.TraceListener.WriteLine(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.\n  remarks: The typical line terminator you might implement is a carriage return followed by a line feed (\\r\\n).\n  syntax:\n    content: public abstract void WriteLine (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: System.Diagnostics.TraceListener.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  id: WriteLine(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: WriteLine(Object,String)\n  nameWithType: TraceListener.WriteLine(Object,String)\n  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class, followed by a line terminator.\n  remarks: The typical line terminator you might implement is a carriage return followed by a line feed (\\r\\n).\n  syntax:\n    content: public virtual void WriteLine (object o, string category);\n    parameters:\n    - id: o\n      type: System.Object\n      description: An <xref:System.Object> whose fully qualified class name you want to write.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.TraceListener.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  id: WriteLine(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  name: WriteLine(String,String)\n  nameWithType: TraceListener.WriteLine(String,String)\n  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and a message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class, followed by a line terminator.\n  remarks: The typical line terminator you might implement is a carriage return followed by a line feed (\\r\\n).\n  syntax:\n    content: public virtual void WriteLine (string message, string category);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to write.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.TraceListener.WriteLine*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Diagnostics.TraceListener.#ctor\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceListener()\n  nameWithType: TraceListener.TraceListener()\n  fullName: System.Diagnostics.TraceListener.TraceListener()\n- uid: System.Diagnostics.TraceListener.#ctor(System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceListener(String)\n  nameWithType: TraceListener.TraceListener(String)\n  fullName: System.Diagnostics.TraceListener.TraceListener(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.TraceListener.Attributes\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Attributes\n  nameWithType: TraceListener.Attributes\n  fullName: System.Diagnostics.TraceListener.Attributes\n- uid: System.Collections.Specialized.StringDictionary\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: StringDictionary\n  nameWithType: StringDictionary\n  fullName: System.Collections.Specialized.StringDictionary\n- uid: System.Diagnostics.TraceListener.Close\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Close()\n  nameWithType: TraceListener.Close()\n  fullName: System.Diagnostics.TraceListener.Close()\n- uid: System.Diagnostics.TraceListener.Dispose\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Dispose()\n  nameWithType: TraceListener.Dispose()\n  fullName: System.Diagnostics.TraceListener.Dispose()\n- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: TraceListener.Dispose(Boolean)\n  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.TraceListener.Fail(System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Fail(String)\n  nameWithType: TraceListener.Fail(String)\n  fullName: System.Diagnostics.TraceListener.Fail(String)\n- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Fail(String,String)\n  nameWithType: TraceListener.Fail(String,String)\n  fullName: System.Diagnostics.TraceListener.Fail(String,String)\n- uid: System.Diagnostics.TraceListener.Filter\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Filter\n  nameWithType: TraceListener.Filter\n  fullName: System.Diagnostics.TraceListener.Filter\n- uid: System.Diagnostics.TraceFilter\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceFilter\n  nameWithType: TraceFilter\n  fullName: System.Diagnostics.TraceFilter\n- uid: System.Diagnostics.TraceListener.Flush\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Flush()\n  nameWithType: TraceListener.Flush()\n  fullName: System.Diagnostics.TraceListener.Flush()\n- uid: System.Diagnostics.TraceListener.GetSupportedAttributes\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: GetSupportedAttributes()\n  nameWithType: TraceListener.GetSupportedAttributes()\n  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.TraceListener.IndentLevel\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IndentLevel\n  nameWithType: TraceListener.IndentLevel\n  fullName: System.Diagnostics.TraceListener.IndentLevel\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.TraceListener.IndentSize\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IndentSize\n  nameWithType: TraceListener.IndentSize\n  fullName: System.Diagnostics.TraceListener.IndentSize\n- uid: System.Diagnostics.TraceListener.IsThreadSafe\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IsThreadSafe\n  nameWithType: TraceListener.IsThreadSafe\n  fullName: System.Diagnostics.TraceListener.IsThreadSafe\n- uid: System.Diagnostics.TraceListener.Name\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Name\n  nameWithType: TraceListener.Name\n  fullName: System.Diagnostics.TraceListener.Name\n- uid: System.Diagnostics.TraceListener.NeedIndent\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: NeedIndent\n  nameWithType: TraceListener.NeedIndent\n  fullName: System.Diagnostics.TraceListener.NeedIndent\n- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n- uid: System.Diagnostics.TraceEventCache\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventCache\n  nameWithType: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n- uid: System.Diagnostics.TraceListener.TraceOutputOptions\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceOutputOptions\n  nameWithType: TraceListener.TraceOutputOptions\n  fullName: System.Diagnostics.TraceListener.TraceOutputOptions\n- uid: System.Diagnostics.TraceOptions\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceOptions\n  nameWithType: TraceOptions\n  fullName: System.Diagnostics.TraceOptions\n- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Diagnostics.TraceListener.Write(System.Object)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(Object)\n  nameWithType: TraceListener.Write(Object)\n  fullName: System.Diagnostics.TraceListener.Write(Object)\n- uid: System.Diagnostics.TraceListener.Write(System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(String)\n  nameWithType: TraceListener.Write(String)\n  fullName: System.Diagnostics.TraceListener.Write(String)\n- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(Object,String)\n  nameWithType: TraceListener.Write(Object,String)\n  fullName: System.Diagnostics.TraceListener.Write(Object,String)\n- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(String,String)\n  nameWithType: TraceListener.Write(String,String)\n  fullName: System.Diagnostics.TraceListener.Write(String,String)\n- uid: System.Diagnostics.TraceListener.WriteIndent\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteIndent()\n  nameWithType: TraceListener.WriteIndent()\n  fullName: System.Diagnostics.TraceListener.WriteIndent()\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(Object)\n  nameWithType: TraceListener.WriteLine(Object)\n  fullName: System.Diagnostics.TraceListener.WriteLine(Object)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: TraceListener.WriteLine(String)\n  fullName: System.Diagnostics.TraceListener.WriteLine(String)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(Object,String)\n  nameWithType: TraceListener.WriteLine(Object,String)\n  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(String,String)\n  nameWithType: TraceListener.WriteLine(String,String)\n  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)\n- uid: System.Diagnostics.TraceListener.#ctor*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceListener\n  nameWithType: TraceListener.TraceListener\n- uid: System.Diagnostics.TraceListener.Attributes*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Attributes\n  nameWithType: TraceListener.Attributes\n- uid: System.Diagnostics.TraceListener.Close*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Close\n  nameWithType: TraceListener.Close\n- uid: System.Diagnostics.TraceListener.Dispose*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Dispose\n  nameWithType: TraceListener.Dispose\n- uid: System.Diagnostics.TraceListener.Fail*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Fail\n  nameWithType: TraceListener.Fail\n- uid: System.Diagnostics.TraceListener.Filter*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Filter\n  nameWithType: TraceListener.Filter\n- uid: System.Diagnostics.TraceListener.Flush*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Flush\n  nameWithType: TraceListener.Flush\n- uid: System.Diagnostics.TraceListener.GetSupportedAttributes*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: GetSupportedAttributes\n  nameWithType: TraceListener.GetSupportedAttributes\n- uid: System.Diagnostics.TraceListener.IndentLevel*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IndentLevel\n  nameWithType: TraceListener.IndentLevel\n- uid: System.Diagnostics.TraceListener.IndentSize*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IndentSize\n  nameWithType: TraceListener.IndentSize\n- uid: System.Diagnostics.TraceListener.IsThreadSafe*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IsThreadSafe\n  nameWithType: TraceListener.IsThreadSafe\n- uid: System.Diagnostics.TraceListener.Name*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Name\n  nameWithType: TraceListener.Name\n- uid: System.Diagnostics.TraceListener.NeedIndent*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: NeedIndent\n  nameWithType: TraceListener.NeedIndent\n- uid: System.Diagnostics.TraceListener.TraceData*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceData\n  nameWithType: TraceListener.TraceData\n- uid: System.Diagnostics.TraceListener.TraceEvent*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceEvent\n  nameWithType: TraceListener.TraceEvent\n- uid: System.Diagnostics.TraceListener.TraceOutputOptions*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceOutputOptions\n  nameWithType: TraceListener.TraceOutputOptions\n- uid: System.Diagnostics.TraceListener.TraceTransfer*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceTransfer\n  nameWithType: TraceListener.TraceTransfer\n- uid: System.Diagnostics.TraceListener.Write*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write\n  nameWithType: TraceListener.Write\n- uid: System.Diagnostics.TraceListener.WriteIndent*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteIndent\n  nameWithType: TraceListener.WriteIndent\n- uid: System.Diagnostics.TraceListener.WriteLine*\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine\n  nameWithType: TraceListener.WriteLine\n"}