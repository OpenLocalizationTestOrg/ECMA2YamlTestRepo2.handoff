{"nodes":[{"pos":[2242,2381],"content":"Represents a calendar that divides time into months, days, years, and eras, and has dates that are based on cycles of the sun and the moon.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a calendar that divides time into months, days, years, and eras, and has dates that are based on cycles of the sun and the moon.","pos":[0,139]}]},{"pos":[2394,4323],"content":"The EastAsianLunisolarCalendar class supports the sexagenary cycle of years (which repeats every 60 years) in addition to solar years and lunar months. Each solar year in the calendar is associated with a Sexagenary Year (see <xref:System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear%2A>), a Celestial Stem (see <xref:System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem%2A>), and a Terrestrial Branch (see <xref:System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch%2A>).      > [!NOTE] >  For information about using the <xref:System.Globalization.HebrewCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md).       A year can have a leap month after any month of the year, and a month can have a leap day. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a positive integer that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.       Each <xref:System.Globalization.CultureInfo> supports a set of calendars. Currently, none of the lunisolar calendar classes that derive from EastAsianLunisolarCalendar is used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class. Therefore, this class and those that derive from it can be used only to calculate dates in the East Asian lunisolar calendars. This class supports several \"get\" methods to describe a <xref:System.DateTime> in the terms used by lunisolar calendars, and the <xref:System.Globalization.EastAsianLunisolarCalendar.ToDateTime%2A> method to convert from lunisolar calendar data to a <xref:System.DateTime>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The EastAsianLunisolarCalendar class supports the sexagenary cycle of years (which repeats every 60 years) in addition to solar years and lunar months.","pos":[0,151]},{"content":"Each solar year in the calendar is associated with a Sexagenary Year (see &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear%2A&gt;), a Celestial Stem (see &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem%2A&gt;), and a Terrestrial Branch (see &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch%2A&gt;).","pos":[152,513],"source":" Each solar year in the calendar is associated with a Sexagenary Year (see <xref:System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear%2A>), a Celestial Stem (see <xref:System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem%2A>), and a Terrestrial Branch (see <xref:System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch%2A>)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  For information about using the &lt;xref:System.Globalization.HebrewCalendar&gt; class and the other calendar classes in the .NET Framework, see <bpt id=\"p1\">[</bpt>Working with Calendars<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[519,735],"source":"      > [!NOTE] >  For information about using the <xref:System.Globalization.HebrewCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md)."},{"content":"A year can have a leap month after any month of the year, and a month can have a leap day.","pos":[742,832]},{"content":"For example, the &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt; method returns a positive integer that indicates the month associated with a specified date.","pos":[833,1009],"source":" For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a positive integer that indicates the month associated with a specified date."},{"content":"If there is a leap month between the eighth and ninth months of the year, the &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt; method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","pos":[1010,1250],"source":" If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month."},{"content":"Each &lt;xref:System.Globalization.CultureInfo&gt; supports a set of calendars.","pos":[1257,1330],"source":"       Each <xref:System.Globalization.CultureInfo> supports a set of calendars."},{"content":"Currently, none of the lunisolar calendar classes that derive from EastAsianLunisolarCalendar is used by any of the cultures supported by the &lt;xref:System.Globalization.CultureInfo&gt; class.","pos":[1331,1519],"source":" Currently, none of the lunisolar calendar classes that derive from EastAsianLunisolarCalendar is used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class."},{"content":"Therefore, this class and those that derive from it can be used only to calculate dates in the East Asian lunisolar calendars.","pos":[1520,1646]},{"content":"This class supports several \"get\" methods to describe a &lt;xref:System.DateTime&gt; in the terms used by lunisolar calendars, and the &lt;xref:System.Globalization.EastAsianLunisolarCalendar.ToDateTime%2A&gt; method to convert from lunisolar calendar data to a &lt;xref:System.DateTime&gt;.","pos":[1647,1920],"source":" This class supports several \"get\" methods to describe a <xref:System.DateTime> in the terms used by lunisolar calendars, and the <xref:System.Globalization.EastAsianLunisolarCalendar.ToDateTime%2A> method to convert from lunisolar calendar data to a <xref:System.DateTime>."}]},{"pos":[5102,5190],"content":"Calculates the date that is the specified number of months away from the specified date.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the date that is the specified number of months away from the specified date.","pos":[0,88]}]},{"pos":[5203,7008],"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. In this case, the day part is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, if the specified month is October, which has 31 days, the specified day is the thirty-first day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the thirtieth day, which is the last day in April.       If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/d86a04c2-1ef4-4a8d-ab7c-_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/d86a04c2-1ef4-4a8d-ab7c-_1.cs)]","needQuote":false,"needEscape":true,"nodes":[{"content":"The day part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting day is not a valid day in the resulting month of the resulting year.","pos":[0,150],"source":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year."},{"content":"In this case, the day part is changed to the last valid day in the resulting month of the resulting year.","pos":[151,256]},{"content":"The year part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting month is outside the year of the specified &lt;xref:System.DateTime&gt;.","pos":[257,406],"source":" The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>."},{"content":"This implementation supports only the current era.","pos":[407,457]},{"content":"Therefore, &lt;xref:System.ArgumentException&gt; is thrown if the resulting year is outside the era of the specified &lt;xref:System.DateTime&gt;.","pos":[458,592],"source":" Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>."},{"content":"The time-of-day part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[593,711],"source":" The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"For example, if the specified month is October, which has 31 days, the specified day is the thirty-first day of that month, and the value of the <ph id=\"ph1\">`months`</ph> parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the thirtieth day, which is the last day in April.","pos":[718,1049],"source":"       For example, if the specified month is October, which has 31 days, the specified day is the thirty-first day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the thirtieth day, which is the last day in April."},{"content":"If the value of the <ph id=\"ph1\">`months`</ph> parameter is negative, the resulting &lt;xref:System.DateTime&gt; is earlier than the specified &lt;xref:System.DateTime&gt;.","pos":[1056,1198],"source":"       If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>."},{"content":"The&lt;xref:System.DateTime.Kind%2A&gt; property of the returned &lt;xref:System.DateTime&gt; value always equals &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[1205,1359],"source":"       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>."},{"content":"You can preserve the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> parameter by calling the &lt;xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName&gt; method, as the following example shows.","pos":[1360,1562],"source":" You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows."},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Globalization.Calendar.AddMethods#5<ept id=\"p2\">](~/add/codesnippet/visualbasic/d86a04c2-1ef4-4a8d-ab7c-_1.vb)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Globalization.Calendar.AddMethods#5<ept id=\"p4\">](~/add/codesnippet/csharp/d86a04c2-1ef4-4a8d-ab7c-_1.cs)</ept><ept id=\"p3\">]</ept>","pos":[1569,1796],"source":"[!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/d86a04c2-1ef4-4a8d-ab7c-_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/d86a04c2-1ef4-4a8d-ab7c-_1.cs)]"}]},{"pos":[7175,7227],"content":"The &lt;xref:System.DateTime&gt; to which to add <ph id=\"ph1\">`months`</ph>.","needQuote":true,"needEscape":true,"source":"The <xref:System.DateTime> to which to add `months`."},{"pos":[7289,7317],"content":"The number of months to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of months to add.","pos":[0,28]}]},{"pos":[7377,7497],"content":"A new &lt;xref:System.DateTime&gt; that results from adding the specified number of months to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"A new <xref:System.DateTime> that results from adding the specified number of months to the <code>time</code> parameter."},{"pos":[7677,7747],"content":"The result is outside the supported range of a <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The result is outside the supported range of a &lt;xref:System.DateTime&gt;.","pos":[0,70],"source":"The result is outside the supported range of a <xref:System.DateTime>."}]},{"pos":[7863,8114],"content":"<code>months</code> is less than -120000 or greater than 120000.       -or-       <code>time</code> is less than <xref:System.Globalization.Calendar.MinSupportedDateTime*> or greater than <xref:System.Globalization.Calendar.MaxSupportedDateTime*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;months&lt;/code&gt;</ph> is less than -120000 or greater than 120000.","pos":[0,64],"source":"<code>months</code> is less than -120000 or greater than 120000."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;time&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref:System.Globalization.Calendar.MinSupportedDateTime*&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Globalization.Calendar.MaxSupportedDateTime*&gt;</ph>.","pos":[71,247],"source":"       -or-       <code>time</code> is less than <xref:System.Globalization.Calendar.MinSupportedDateTime*> or greater than <xref:System.Globalization.Calendar.MaxSupportedDateTime*>."}]},{"pos":[8629,8716],"content":"Calculates the date that is the specified number of years away from the specified date.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the date that is the specified number of years away from the specified date.","pos":[0,87]}]},{"pos":[8729,10420],"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. In this case, the day part is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the twenty-ninth day of February in a leap year and the value of the `years` parameter is 1, the resulting date will be the twenty-eighth day of February in the following year.       If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/6f9d0244-83a4-4a86-acea-_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/6f9d0244-83a4-4a86-acea-_1.cs)]","needQuote":false,"needEscape":true,"nodes":[{"content":"The day part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting day is not a valid day in the resulting month of the resulting year.","pos":[0,150],"source":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year."},{"content":"In this case, the day part is changed to the last valid day in the resulting month of the resulting year.","pos":[151,256]},{"content":"The month part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[257,369],"source":" The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"This implementation supports only the current era.","pos":[370,420]},{"content":"Therefore, &lt;xref:System.ArgumentException&gt; is thrown if the resulting year is outside the era of the specified &lt;xref:System.DateTime&gt;.","pos":[421,555],"source":" Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>."},{"content":"The time-of-day part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[556,674],"source":" The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"For example, February has 28 days, except during leap years when it has 29 days.","pos":[681,761]},{"content":"If the specified date is the twenty-ninth day of February in a leap year and the value of the <ph id=\"ph1\">`years`</ph> parameter is 1, the resulting date will be the twenty-eighth day of February in the following year.","pos":[762,963],"source":" If the specified date is the twenty-ninth day of February in a leap year and the value of the `years` parameter is 1, the resulting date will be the twenty-eighth day of February in the following year."},{"content":"If <ph id=\"ph1\">`years`</ph> is negative, the resulting &lt;xref:System.DateTime&gt; is earlier than the specified &lt;xref:System.DateTime&gt;.","pos":[970,1084],"source":"       If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>."},{"content":"The&lt;xref:System.DateTime.Kind%2A&gt; property of the returned &lt;xref:System.DateTime&gt; value always equals &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[1091,1245],"source":"       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>."},{"content":"You can preserve the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> parameter by calling the &lt;xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName&gt; method, as the following example shows.","pos":[1246,1448],"source":" You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows."},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Globalization.Calendar.AddMethods#8<ept id=\"p2\">](~/add/codesnippet/visualbasic/6f9d0244-83a4-4a86-acea-_1.vb)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Globalization.Calendar.AddMethods#8<ept id=\"p4\">](~/add/codesnippet/csharp/6f9d0244-83a4-4a86-acea-_1.cs)</ept><ept id=\"p3\">]</ept>","pos":[1455,1682],"source":"[!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/6f9d0244-83a4-4a86-acea-_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/6f9d0244-83a4-4a86-acea-_1.cs)]"}]},{"pos":[10585,10636],"content":"The &lt;xref:System.DateTime&gt; to which to add <ph id=\"ph1\">`years`</ph>.","needQuote":true,"needEscape":true,"source":"The <xref:System.DateTime> to which to add `years`."},{"pos":[10697,10724],"content":"The number of years to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of years to add.","pos":[0,27]}]},{"pos":[10784,10903],"content":"A new &lt;xref:System.DateTime&gt; that results from adding the specified number of years to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"A new <xref:System.DateTime> that results from adding the specified number of years to the <code>time</code> parameter."},{"pos":[11082,11152],"content":"The result is outside the supported range of a <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The result is outside the supported range of a &lt;xref:System.DateTime&gt;.","pos":[0,70],"source":"The result is outside the supported range of a <xref:System.DateTime>."}]},{"pos":[11267,11432],"content":"<ph id=\"ph1\">&lt;code&gt;time&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref:System.Globalization.Calendar.MinSupportedDateTime*&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Globalization.Calendar.MaxSupportedDateTime*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>time</code> is less than <xref:System.Globalization.Calendar.MinSupportedDateTime*> or greater than <xref:System.Globalization.Calendar.MaxSupportedDateTime*>."},{"pos":[11865,11972],"content":"Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.","pos":[0,107]}]},{"pos":[12164,12243],"content":"Always returns <bpt id=\"p1\">&lt;xref href=\"System.Globalization.CalendarAlgorithmType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always returns <xref href=\"System.Globalization.CalendarAlgorithmType\"></xref>."},{"pos":[12830,12916],"content":"Calculates the celestial stem of the specified year in the sexagenary (60-year) cycle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the celestial stem of the specified year in the sexagenary (60-year) cycle.","pos":[0,86]}]},{"pos":[13075,13151],"content":"An integer from 1 through 60 that represents a year in the sexagenary cycle.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 through 60 that represents a year in the sexagenary cycle.","pos":[0,76]}]},{"pos":[13208,13235],"content":"A number from 1 through 10.","needQuote":true,"needEscape":true,"nodes":[{"content":"A number from 1 through 10.","pos":[0,27]}]},{"pos":[13442,13504],"content":"<ph id=\"ph1\">&lt;code&gt;sexagenaryYear&lt;/code&gt;</ph> is less than 1 or greater than 60.","needQuote":true,"needEscape":true,"source":"<code>sexagenaryYear</code> is less than 1 or greater than 60."},{"pos":[13999,14053],"content":"Calculates the day of the month in the specified date.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the day of the month in the specified date.","pos":[0,54]}]},{"pos":[14206,14241],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[14298,14409],"content":"An integer from 1 through 31 that represents the day of the month specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"An integer from 1 through 31 that represents the day of the month specified in the <code>time</code> parameter."},{"pos":[14991,15044],"content":"Calculates the day of the week in the specified date.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the day of the week in the specified date.","pos":[0,53]}]},{"pos":[15202,15237],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[15298,15421],"content":"One of the &lt;xref:System.DayOfWeek&gt; values that represents the day of the week specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"One of the <xref:System.DayOfWeek> values that represents the day of the week specified in the <code>time</code> parameter."},{"pos":[15624,15789],"content":"<ph id=\"ph1\">&lt;code&gt;time&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref:System.Globalization.Calendar.MinSupportedDateTime*&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Globalization.Calendar.MaxSupportedDateTime*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>time</code> is less than <xref:System.Globalization.Calendar.MinSupportedDateTime*> or greater than <xref:System.Globalization.Calendar.MaxSupportedDateTime*>."},{"pos":[16279,16332],"content":"Calculates the day of the year in the specified date.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the day of the year in the specified date.","pos":[0,53]}]},{"pos":[16344,16710],"content":"The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear%2A>.","pos":[0,366],"nodes":[{"content":"The day of the year is defined as the number of days from the first day of the year.","pos":[0,84]},{"content":"For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear%2A&gt;.","pos":[85,366],"source":" For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear%2A>."}]}]},{"pos":[16862,16897],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[16954,17116],"content":"An integer from 1 through 354 in a common year, or 1 through 384 in a leap year, that represents the day of the year specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"An integer from 1 through 354 in a common year, or 1 through 384 in a leap year, that represents the day of the year specified in the <code>time</code> parameter."},{"pos":[17780,17863],"content":"Calculates the number of days in the specified month of the specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the number of days in the specified month of the specified year and era.","pos":[0,83]}]},{"pos":[17875,18021],"content":"Ifthe <ph id=\"ph1\">`month`</ph> parameter is the second month, the GetDaysInMonth method returns 28 or 29, depending on whether the <ph id=\"ph2\">`year`</ph> parameter is a leap year.","needQuote":true,"needEscape":true,"source":"Ifthe `month` parameter is the second month, the GetDaysInMonth method returns 28 or 29, depending on whether the `year` parameter is a leap year."},{"pos":[18187,18223],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[18284,18389],"content":"An integer from 1 through 12 in a common year, or 1 through 13 in a leap year, that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 through 12 in a common year, or 1 through 13 in a leap year, that represents the month.","pos":[0,105]}]},{"pos":[18448,18483],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[18540,18612],"content":"The number of days in the specified month of the specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of days in the specified month of the specified year and era.","pos":[0,72]}]},{"pos":[18817,18924],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;month&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code>, <code>month</code>, or <code>era</code> is outside the range supported by this calendar."},{"pos":[19448,19508],"content":"Calculates the number of days in the specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the number of days in the specified year and era.","pos":[0,60]}]},{"pos":[19520,19622],"content":"The GetDaysInYear method returns 365 or 366, depending on whether the <ph id=\"ph1\">`year`</ph> parameter is a leap year.","needQuote":true,"needEscape":true,"source":"The GetDaysInYear method returns 365 or 366, depending on whether the `year` parameter is a leap year."},{"pos":[19776,19812],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[19871,19906],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[19963,20012],"content":"The number of days in the specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of days in the specified year and era.","pos":[0,49]}]},{"pos":[20216,20302],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code> or <code>era</code> is outside the range supported by this calendar."},{"pos":[20821,20878],"content":"Calculates the leap month for the specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the leap month for the specified year and era.","pos":[0,57]}]},{"pos":[20890,21444],"content":"In a calendar that supports a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number from 1 through 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","needQuote":true,"needEscape":true,"nodes":[{"content":"In a calendar that supports a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number from 1 through 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","pos":[0,554],"nodes":[{"content":"In a calendar that supports a leap month, the leap month can occur either after a particular month or after any month in a year.","pos":[0,128]},{"content":"For example, the &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt; method returns a number from 1 through 13 that indicates the month associated with a specified date.","pos":[129,313],"source":" For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number from 1 through 13 that indicates the month associated with a specified date."},{"content":"If there is a leap month between the eighth and ninth months of the year, the &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt; method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","pos":[314,554],"source":" If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month."}]}]},{"pos":[21597,21633],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[21692,21727],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[21785,22044],"content":"A positive integer from 1 through 13 that indicates the leap month in the specified year and era.       -or-       Zero if this calendar does not support a leap month, or if the <code>year</code> and <code>era</code> parameters do not specify a leap year.","needQuote":false,"needEscape":true,"nodes":[{"content":"A positive integer from 1 through 13 that indicates the leap month in the specified year and era.","pos":[0,97]},{"content":"-or-       Zero if this calendar does not support a leap month, or if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">year</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">era</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters do not specify a leap year.","pos":[104,255],"source":"       -or-       Zero if this calendar does not support a leap month, or if the <code>year</code> and <code>era</code> parameters do not specify a leap year."}]},{"pos":[22606,22646],"content":"Returns the month in the specified date.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the month in the specified date.","pos":[0,40]}]},{"pos":[22794,22829],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[22886,22981],"content":"An integer from 1 to 13 that represents the month specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"An integer from 1 to 13 that represents the month specified in the <code>time</code> parameter."},{"pos":[23602,23664],"content":"Calculates the number of months in the specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the number of months in the specified year and era.","pos":[0,62]}]},{"pos":[23820,23856],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[23915,23950],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[24007,24147],"content":"The number of months in the specified year in the specified era. The return value is 12 months in a common year or 13 months in a leap year.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of months in the specified year in the specified era. The return value is 12 months in a common year or 13 months in a leap year.","pos":[0,140],"nodes":[{"content":"The number of months in the specified year in the specified era.","pos":[0,64]},{"content":"The return value is 12 months in a common year or 13 months in a leap year.","pos":[65,140]}]}]},{"pos":[24353,24439],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code> or <code>era</code> is outside the range supported by this calendar."},{"pos":[24954,25047],"content":"Calculates the year in the sexagenary (60-year) cycle that corresponds to the specified date.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the year in the sexagenary (60-year) cycle that corresponds to the specified date.","pos":[0,93]}]},{"pos":[25203,25236],"content":"A <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; to read.","pos":[0,33],"source":"A <xref:System.DateTime> to read."}]},{"pos":[25293,25396],"content":"A number from 1 through 60 in the sexagenary cycle that corresponds to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">date</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"A number from 1 through 60 in the sexagenary cycle that corresponds to the <code>date</code> parameter."},{"pos":[26007,26097],"content":"Calculates the terrestrial branch of the specified year in the sexagenary (60-year) cycle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the terrestrial branch of the specified year in the sexagenary (60-year) cycle.","pos":[0,90]}]},{"pos":[26260,26336],"content":"An integer from 1 through 60 that represents a year in the sexagenary cycle.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 through 60 that represents a year in the sexagenary cycle.","pos":[0,76]}]},{"pos":[26393,26422],"content":"An integer from 1 through 12.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 through 12.","pos":[0,29]}]},{"pos":[26633,26695],"content":"<ph id=\"ph1\">&lt;code&gt;sexagenaryYear&lt;/code&gt;</ph> is less than 1 or greater than 60.","needQuote":true,"needEscape":true,"source":"<code>sexagenaryYear</code> is less than 1 or greater than 60."},{"pos":[27160,27199],"content":"Returns the year in the specified date.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the year in the specified date.","pos":[0,39]}]},{"pos":[27346,27381],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[27438,27514],"content":"An integer that represents the year in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year in the specified &lt;xref:System.DateTime&gt;.","pos":[0,76],"source":"An integer that represents the year in the specified <xref:System.DateTime>."}]},{"pos":[28192,28265],"content":"Determines whether the specified date in the specified era is a leap day.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified date in the specified era is a leap day.","pos":[0,73]}]},{"pos":[28436,28472],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[28533,28588],"content":"An integer from 1 through 13 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 through 13 that represents the month.","pos":[0,55]}]},{"pos":[28647,28700],"content":"An integer from 1 through 31 that represents the day.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 through 31 that represents the day.","pos":[0,53]}]},{"pos":[28759,28794],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[28853,29024],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified day is a leap day; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified day is a leap day; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[29224,29349],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;month&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;day&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code>, <code>month</code>, <code>day</code>, or <code>era</code> is outside the range supported by this calendar."},{"pos":[29907,29992],"content":"Determines whether the specified month in the specified year and era is a leap month.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified month in the specified year and era is a leap month.","pos":[0,85]}]},{"pos":[30156,30192],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[30253,30308],"content":"An integer from 1 through 13 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 through 13 that represents the month.","pos":[0,55]}]},{"pos":[30367,30402],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[30461,30649],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">month</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is a leap month; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>month</code> parameter is a leap month; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[30851,30958],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;month&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code>, <code>month</code>, or <code>era</code> is outside the range supported by this calendar."},{"pos":[31467,31541],"content":"Determines whether the specified year in the specified era is a leap year.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified year in the specified era is a leap year.","pos":[0,74]}]},{"pos":[31693,31729],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[31788,31823],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[31882,32055],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified year is a leap year; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified year is a leap year; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[32256,32342],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code> or <code>era</code> is outside the range supported by this calendar."},{"pos":[33115,33197],"content":"Returns a <xref:System.DateTime> that is set to the specified date, time, and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.DateTime&gt; that is set to the specified date, time, and era.","pos":[0,82],"source":"Returns a <xref:System.DateTime> that is set to the specified date, time, and era."}]},{"pos":[33209,33458],"content":"The ToDateTime method can convert any date in the current calendar to a Gregorian calendar date. The Gregorian date can subsequently be used, for example, to compare dates in different calendars or create an equivalent date in a particular calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ToDateTime method can convert any date in the current calendar to a Gregorian calendar date. The Gregorian date can subsequently be used, for example, to compare dates in different calendars or create an equivalent date in a particular calendar.","pos":[0,249],"nodes":[{"content":"The ToDateTime method can convert any date in the current calendar to a Gregorian calendar date.","pos":[0,96]},{"content":"The Gregorian date can subsequently be used, for example, to compare dates in different calendars or create an equivalent date in a particular calendar.","pos":[97,249]}]}]},{"pos":[33685,33721],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[33782,33837],"content":"An integer from 1 through 13 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 through 13 that represents the month.","pos":[0,55]}]},{"pos":[33896,33949],"content":"An integer from 1 through 31 that represents the day.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 through 31 that represents the day.","pos":[0,53]}]},{"pos":[34009,34063],"content":"An integer from 0 through 23 that represents the hour.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 through 23 that represents the hour.","pos":[0,54]}]},{"pos":[34125,34181],"content":"An integer from 0 through 59 that represents the minute.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 through 59 that represents the minute.","pos":[0,56]}]},{"pos":[34243,34299],"content":"An integer from 0 through 59 that represents the second.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 through 59 that represents the second.","pos":[0,56]}]},{"pos":[34366,34428],"content":"An integer from 0 through 999 that represents the millisecond.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 through 999 that represents the millisecond.","pos":[0,62]}]},{"pos":[34487,34522],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[34582,34656],"content":"A <xref:System.DateTime> that is set to the specified date, time, and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; that is set to the specified date, time, and era.","pos":[0,74],"source":"A <xref:System.DateTime> that is set to the specified date, time, and era."}]},{"pos":[34857,35069],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;month&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;day&lt;/code&gt;</ph>, <ph id=\"ph4\">&lt;code&gt;hour&lt;/code&gt;</ph>, <ph id=\"ph5\">&lt;code&gt;minute&lt;/code&gt;</ph>, <ph id=\"ph6\">&lt;code&gt;second&lt;/code&gt;</ph>, <ph id=\"ph7\">&lt;code&gt;millisecond&lt;/code&gt;</ph>, or <ph id=\"ph8\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, <code>millisecond</code>, or <code>era</code> is outside the range supported by this calendar."},{"pos":[35559,35608],"content":"Converts the specified year to a four-digit year.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts the specified year to a four-digit year.","pos":[0,49]}]},{"pos":[35621,36419],"content":"The ToFourDigitYear method uses the <xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A> property to determine the appropriate century.       ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ToFourDigitYear method uses the <xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A> property to determine the appropriate century.       ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","pos":[0,796],"nodes":[{"content":"The ToFourDigitYear method uses the &lt;xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A&gt; property to determine the appropriate century.","pos":[0,156],"source":"The ToFourDigitYear method uses the <xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A> property to determine the appropriate century."},{"content":"ToFourDigitYear supports either a two-digit year or a four-digit year.","pos":[163,233]},{"content":"Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the &lt;xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A&gt; value representing the appropriate century.","pos":[234,476],"source":" Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A> value representing the appropriate century."},{"content":"If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value.","pos":[477,635]},{"content":"If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","pos":[636,796]}]}]},{"pos":[36567,36637],"content":"A two-digit or four-digit integer that represents the year to convert.","needQuote":true,"needEscape":true,"nodes":[{"content":"A two-digit or four-digit integer that represents the year to convert.","pos":[0,70]}]},{"pos":[36694,36784],"content":"An integer that contains the four-digit representation of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">year</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"An integer that contains the four-digit representation of the <code>year</code> parameter."},{"pos":[36990,37056],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by this calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code> is outside the range supported by this calendar."},{"pos":[37499,37588],"content":"Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.","pos":[0,89]}]},{"pos":[37601,38251],"content":"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, in the Gregorian calendar, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.       The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.EastAsianLunisolarCalendar> class does not detect changes in the system settings automatically.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, in the Gregorian calendar, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.       The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.EastAsianLunisolarCalendar> class does not detect changes in the system settings automatically.","pos":[0,648],"nodes":[{"content":"This property allows a 2-digit year to be properly translated to a 4-digit year.","pos":[0,80]},{"content":"For example, in the Gregorian calendar, if this property is set to 2029, the 100-year range is from 1930 to 2029.","pos":[81,194]},{"content":"Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.","pos":[195,303]},{"content":"The initial value of this property is derived from the settings in the regional and language options portion of Control Panel.","pos":[310,436]},{"content":"However, that information can change during the life of the &lt;xref:System.AppDomain&gt;.","pos":[437,521],"source":" However, that information can change during the life of the <xref:System.AppDomain>."},{"content":"The &lt;xref:System.Globalization.EastAsianLunisolarCalendar&gt; class does not detect changes in the system settings automatically.","pos":[522,648],"source":" The <xref:System.Globalization.EastAsianLunisolarCalendar> class does not detect changes in the system settings automatically."}]}]},{"pos":[38382,38458],"content":"The last year of a 100-year range that can be represented by a 2-digit year.","needQuote":true,"needEscape":true,"nodes":[{"content":"The last year of a 100-year range that can be represented by a 2-digit year.","pos":[0,76]}]},{"pos":[38660,38754],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Globalization.EastAsianLunisolarCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Globalization.EastAsianLunisolarCalendar\"></xref> is read-only."},{"pos":[38869,38981],"content":"The value in a set operation is less than 99 or greater than the maximum supported year in the current calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value in a set operation is less than 99 or greater than the maximum supported year in the current calendar.","pos":[0,112]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Globalization.EastAsianLunisolarCalendar\n  id: EastAsianLunisolarCalendar\n  children:\n  - System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.AlgorithmType\n  - System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax\n  langs:\n  - csharp\n  name: EastAsianLunisolarCalendar\n  nameWithType: EastAsianLunisolarCalendar\n  fullName: System.Globalization.EastAsianLunisolarCalendar\n  type: Class\n  summary: Represents a calendar that divides time into months, days, years, and eras, and has dates that are based on cycles of the sun and the moon.\n  remarks: \"The EastAsianLunisolarCalendar class supports the sexagenary cycle of years (which repeats every 60 years) in addition to solar years and lunar months. Each solar year in the calendar is associated with a Sexagenary Year (see <xref:System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear%2A>), a Celestial Stem (see <xref:System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem%2A>), and a Terrestrial Branch (see <xref:System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch%2A>).  \\n  \\n> [!NOTE]\\n>  For information about using the <xref:System.Globalization.HebrewCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md).  \\n  \\n A year can have a leap month after any month of the year, and a month can have a leap day. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a positive integer that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.  \\n  \\n Each <xref:System.Globalization.CultureInfo> supports a set of calendars. Currently, none of the lunisolar calendar classes that derive from EastAsianLunisolarCalendar is used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class. Therefore, this class and those that derive from it can be used only to calculate dates in the East Asian lunisolar calendars. This class supports several \\\"get\\\" methods to describe a <xref:System.DateTime> in the terms used by lunisolar calendars, and the <xref:System.Globalization.EastAsianLunisolarCalendar.ToDateTime%2A> method to convert from lunisolar calendar data to a <xref:System.DateTime>.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class EastAsianLunisolarCalendar : System.Globalization.Calendar\n  inheritance:\n  - System.Globalization.Calendar\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)\n  id: AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: AddMonths(DateTime,Int32)\n  nameWithType: EastAsianLunisolarCalendar.AddMonths(DateTime,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.AddMonths(DateTime,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the date that is the specified number of months away from the specified date.\n  remarks: \"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. In this case, the day part is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \\n  \\n For example, if the specified month is October, which has 31 days, the specified day is the thirty-first day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the thirtieth day, which is the last day in April.  \\n  \\n If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \\n  \\n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \\n  \\n [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/d86a04c2-1ef4-4a8d-ab7c-_1.vb)]\\n [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/d86a04c2-1ef4-4a8d-ab7c-_1.cs)]\"\n  syntax:\n    content: public override DateTime AddMonths (DateTime time, int months);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to which to add `months`.\n    - id: months\n      type: System.Int32\n      description: The number of months to add.\n    return:\n      type: System.DateTime\n      description: A new <xref:System.DateTime> that results from adding the specified number of months to the <code>time</code> parameter.\n  overload: System.Globalization.EastAsianLunisolarCalendar.AddMonths*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The result is outside the supported range of a <xref:System.DateTime>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>months</code> is less than -120000 or greater than 120000.  \\n  \\n -or-  \\n  \\n <code>time</code> is less than <xref:System.Globalization.Calendar.MinSupportedDateTime*> or greater than <xref:System.Globalization.Calendar.MaxSupportedDateTime*>.\"\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)\n  id: AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: AddYears(DateTime,Int32)\n  nameWithType: EastAsianLunisolarCalendar.AddYears(DateTime,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.AddYears(DateTime,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the date that is the specified number of years away from the specified date.\n  remarks: \"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. In this case, the day part is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \\n  \\n For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the twenty-ninth day of February in a leap year and the value of the `years` parameter is 1, the resulting date will be the twenty-eighth day of February in the following year.  \\n  \\n If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \\n  \\n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \\n  \\n [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/6f9d0244-83a4-4a86-acea-_1.vb)]\\n [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/6f9d0244-83a4-4a86-acea-_1.cs)]\"\n  syntax:\n    content: public override DateTime AddYears (DateTime time, int years);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to which to add `years`.\n    - id: years\n      type: System.Int32\n      description: The number of years to add.\n    return:\n      type: System.DateTime\n      description: A new <xref:System.DateTime> that results from adding the specified number of years to the <code>time</code> parameter.\n  overload: System.Globalization.EastAsianLunisolarCalendar.AddYears*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The result is outside the supported range of a <xref:System.DateTime>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>time</code> is less than <xref:System.Globalization.Calendar.MinSupportedDateTime*> or greater than <xref:System.Globalization.Calendar.MaxSupportedDateTime*>.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType\n  id: AlgorithmType\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: AlgorithmType\n  nameWithType: EastAsianLunisolarCalendar.AlgorithmType\n  fullName: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.\n  syntax:\n    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }\n    return:\n      type: System.Globalization.CalendarAlgorithmType\n      description: Always returns <xref href=\"System.Globalization.CalendarAlgorithmType\"></xref>.\n  overload: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)\n  id: GetCelestialStem(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetCelestialStem(Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetCelestialStem(Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the celestial stem of the specified year in the sexagenary (60-year) cycle.\n  syntax:\n    content: public int GetCelestialStem (int sexagenaryYear);\n    parameters:\n    - id: sexagenaryYear\n      type: System.Int32\n      description: An integer from 1 through 60 that represents a year in the sexagenary cycle.\n    return:\n      type: System.Int32\n      description: A number from 1 through 10.\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>sexagenaryYear</code> is less than 1 or greater than 60.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)\n  id: GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetDayOfMonth(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfMonth(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the day of the month in the specified date.\n  syntax:\n    content: public override int GetDayOfMonth (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 through 31 that represents the day of the month specified in the <code>time</code> parameter.\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)\n  id: GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetDayOfWeek(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfWeek(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the day of the week in the specified date.\n  syntax:\n    content: public override DayOfWeek GetDayOfWeek (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.DayOfWeek\n      description: One of the <xref:System.DayOfWeek> values that represents the day of the week specified in the <code>time</code> parameter.\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>time</code> is less than <xref:System.Globalization.Calendar.MinSupportedDateTime*> or greater than <xref:System.Globalization.Calendar.MaxSupportedDateTime*>.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)\n  id: GetDayOfYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetDayOfYear(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfYear(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the day of the year in the specified date.\n  remarks: The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear%2A>.\n  syntax:\n    content: public override int GetDayOfYear (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 through 354 in a common year, or 1 through 384 in a leap year, that represents the day of the year specified in the <code>time</code> parameter.\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetDaysInMonth(Int32,Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the number of days in the specified month of the specified year and era.\n  remarks: Ifthe `month` parameter is the second month, the GetDaysInMonth method returns 28 or 29, depending on whether the `year` parameter is a leap year.\n  syntax:\n    content: public override int GetDaysInMonth (int year, int month, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 through 12 in a common year, or 1 through 13 in a leap year, that represents the month.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of days in the specified month of the specified year and era.\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code>, <code>month</code>, or <code>era</code> is outside the range supported by this calendar.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)\n  id: GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetDaysInYear(Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetDaysInYear(Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the number of days in the specified year and era.\n  remarks: The GetDaysInYear method returns 365 or 366, depending on whether the `year` parameter is a leap year.\n  syntax:\n    content: public override int GetDaysInYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of days in the specified year and era.\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code> or <code>era</code> is outside the range supported by this calendar.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)\n  id: GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetLeapMonth(Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetLeapMonth(Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the leap month for the specified year and era.\n  remarks: In a calendar that supports a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number from 1 through 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.\n  syntax:\n    content: public override int GetLeapMonth (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: \"A positive integer from 1 through 13 that indicates the leap month in the specified year and era.  \\n  \\n -or-  \\n  \\n Zero if this calendar does not support a leap month, or if the <code>year</code> and <code>era</code> parameters do not specify a leap year.\"\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\n  id: GetMonth(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetMonth(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetMonth(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetMonth(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the month in the specified date.\n  syntax:\n    content: public override int GetMonth (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 13 that represents the month specified in the <code>time</code> parameter.\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetMonth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  id: GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetMonthsInYear(Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetMonthsInYear(Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the number of months in the specified year and era.\n  syntax:\n    content: public override int GetMonthsInYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of months in the specified year in the specified era. The return value is 12 months in a common year or 13 months in a leap year.\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code> or <code>era</code> is outside the range supported by this calendar.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)\n  id: GetSexagenaryYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetSexagenaryYear(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetSexagenaryYear(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the year in the sexagenary (60-year) cycle that corresponds to the specified date.\n  syntax:\n    content: public virtual int GetSexagenaryYear (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: A <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: A number from 1 through 60 in the sexagenary cycle that corresponds to the <code>date</code> parameter.\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)\n  id: GetTerrestrialBranch(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetTerrestrialBranch(Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetTerrestrialBranch(Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the terrestrial branch of the specified year in the sexagenary (60-year) cycle.\n  syntax:\n    content: public int GetTerrestrialBranch (int sexagenaryYear);\n    parameters:\n    - id: sexagenaryYear\n      type: System.Int32\n      description: An integer from 1 through 60 that represents a year in the sexagenary cycle.\n    return:\n      type: System.Int32\n      description: An integer from 1 through 12.\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>sexagenaryYear</code> is less than 1 or greater than 60.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)\n  id: GetYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: GetYear(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetYear(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetYear(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the year in the specified date.\n  syntax:\n    content: public override int GetYear (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer that represents the year in the specified <xref:System.DateTime>.\n  overload: System.Globalization.EastAsianLunisolarCalendar.GetYear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: IsLeapDay(Int32,Int32,Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified date in the specified era is a leap day.\n  syntax:\n    content: public override bool IsLeapDay (int year, int month, int day, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 through 13 that represents the month.\n    - id: day\n      type: System.Int32\n      description: An integer from 1 through 31 that represents the day.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified day is a leap day; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code>, <code>month</code>, <code>day</code>, or <code>era</code> is outside the range supported by this calendar.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: IsLeapMonth(Int32,Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.IsLeapMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified month in the specified year and era is a leap month.\n  syntax:\n    content: public override bool IsLeapMonth (int year, int month, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 through 13 that represents the month.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>month</code> parameter is a leap month; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code>, <code>month</code>, or <code>era</code> is outside the range supported by this calendar.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)\n  id: IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: IsLeapYear(Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.IsLeapYear(Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified year in the specified era is a leap year.\n  syntax:\n    content: public override bool IsLeapYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified year is a leap year; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code> or <code>era</code> is outside the range supported by this calendar.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns a <xref:System.DateTime> that is set to the specified date, time, and era.\n  remarks: The ToDateTime method can convert any date in the current calendar to a Gregorian calendar date. The Gregorian date can subsequently be used, for example, to compare dates in different calendars or create an equivalent date in a particular calendar.\n  syntax:\n    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 through 13 that represents the month.\n    - id: day\n      type: System.Int32\n      description: An integer from 1 through 31 that represents the day.\n    - id: hour\n      type: System.Int32\n      description: An integer from 0 through 23 that represents the hour.\n    - id: minute\n      type: System.Int32\n      description: An integer from 0 through 59 that represents the minute.\n    - id: second\n      type: System.Int32\n      description: An integer from 0 through 59 that represents the second.\n    - id: millisecond\n      type: System.Int32\n      description: An integer from 0 through 999 that represents the millisecond.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.DateTime\n      description: A <xref:System.DateTime> that is set to the specified date, time, and era.\n  overload: System.Globalization.EastAsianLunisolarCalendar.ToDateTime*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, <code>millisecond</code>, or <code>era</code> is outside the range supported by this calendar.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)\n  id: ToFourDigitYear(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: ToFourDigitYear(Int32)\n  nameWithType: EastAsianLunisolarCalendar.ToFourDigitYear(Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Converts the specified year to a four-digit year.\n  remarks: \"The ToFourDigitYear method uses the <xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A> property to determine the appropriate century.  \\n  \\n ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.\"\n  syntax:\n    content: public override int ToFourDigitYear (int year);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: A two-digit or four-digit integer that represents the year to convert.\n    return:\n      type: System.Int32\n      description: An integer that contains the four-digit representation of the <code>year</code> parameter.\n  overload: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code> is outside the range supported by this calendar.\n  platform:\n  - net462\n- uid: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax\n  id: TwoDigitYearMax\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  name: TwoDigitYearMax\n  nameWithType: EastAsianLunisolarCalendar.TwoDigitYearMax\n  fullName: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.\n  remarks: \"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, in the Gregorian calendar, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.  \\n  \\n The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.EastAsianLunisolarCalendar> class does not detect changes in the system settings automatically.\"\n  syntax:\n    content: public override int TwoDigitYearMax { get; set; }\n    return:\n      type: System.Int32\n      description: The last year of a 100-year range that can be represented by a 2-digit year.\n  overload: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current <xref href=\"System.Globalization.EastAsianLunisolarCalendar\"></xref> is read-only.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value in a set operation is less than 99 or greater than the maximum supported year in the current calendar.\n  platform:\n  - net462\nreferences:\n- uid: System.Globalization.Calendar\n  isExternal: false\n  name: System.Globalization.Calendar\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: AddMonths(DateTime,Int32)\n  nameWithType: EastAsianLunisolarCalendar.AddMonths(DateTime,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.AddMonths(DateTime,Int32)\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: AddYears(DateTime,Int32)\n  nameWithType: EastAsianLunisolarCalendar.AddYears(DateTime,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.AddYears(DateTime,Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: AlgorithmType\n  nameWithType: EastAsianLunisolarCalendar.AlgorithmType\n  fullName: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType\n- uid: System.Globalization.CalendarAlgorithmType\n  parent: System.Globalization\n  isExternal: false\n  name: CalendarAlgorithmType\n  nameWithType: CalendarAlgorithmType\n  fullName: System.Globalization.CalendarAlgorithmType\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetCelestialStem(Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetCelestialStem(Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDayOfMonth(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfMonth(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDayOfWeek(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfWeek(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(DateTime)\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: true\n  name: DayOfWeek\n  nameWithType: DayOfWeek\n  fullName: System.DayOfWeek\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDayOfYear(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfYear(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDaysInMonth(Int32,Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(Int32,Int32,Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDaysInYear(Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetDaysInYear(Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(Int32,Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetLeapMonth(Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetLeapMonth(Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(Int32,Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetMonth(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetMonth(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetMonth(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetMonthsInYear(Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetMonthsInYear(Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(Int32,Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetSexagenaryYear(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetSexagenaryYear(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetTerrestrialBranch(Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetTerrestrialBranch(Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetYear(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetYear(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetYear(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: IsLeapDay(Int32,Int32,Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: IsLeapMonth(Int32,Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.IsLeapMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(Int32,Int32,Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: IsLeapYear(Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.IsLeapYear(Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(Int32,Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: EastAsianLunisolarCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: ToFourDigitYear(Int32)\n  nameWithType: EastAsianLunisolarCalendar.ToFourDigitYear(Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: TwoDigitYearMax\n  nameWithType: EastAsianLunisolarCalendar.TwoDigitYearMax\n  fullName: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax\n- uid: System.Globalization.EastAsianLunisolarCalendar.AddMonths*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: AddMonths\n  nameWithType: EastAsianLunisolarCalendar.AddMonths\n- uid: System.Globalization.EastAsianLunisolarCalendar.AddYears*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: AddYears\n  nameWithType: EastAsianLunisolarCalendar.AddYears\n- uid: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: AlgorithmType\n  nameWithType: EastAsianLunisolarCalendar.AlgorithmType\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetCelestialStem\n  nameWithType: EastAsianLunisolarCalendar.GetCelestialStem\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDayOfMonth\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfMonth\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDayOfWeek\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfWeek\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDayOfYear\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfYear\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDaysInMonth\n  nameWithType: EastAsianLunisolarCalendar.GetDaysInMonth\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDaysInYear\n  nameWithType: EastAsianLunisolarCalendar.GetDaysInYear\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetLeapMonth\n  nameWithType: EastAsianLunisolarCalendar.GetLeapMonth\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonth*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetMonth\n  nameWithType: EastAsianLunisolarCalendar.GetMonth\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetMonthsInYear\n  nameWithType: EastAsianLunisolarCalendar.GetMonthsInYear\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetSexagenaryYear\n  nameWithType: EastAsianLunisolarCalendar.GetSexagenaryYear\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetTerrestrialBranch\n  nameWithType: EastAsianLunisolarCalendar.GetTerrestrialBranch\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetYear*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetYear\n  nameWithType: EastAsianLunisolarCalendar.GetYear\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: IsLeapDay\n  nameWithType: EastAsianLunisolarCalendar.IsLeapDay\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: IsLeapMonth\n  nameWithType: EastAsianLunisolarCalendar.IsLeapMonth\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: IsLeapYear\n  nameWithType: EastAsianLunisolarCalendar.IsLeapYear\n- uid: System.Globalization.EastAsianLunisolarCalendar.ToDateTime*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: ToDateTime\n  nameWithType: EastAsianLunisolarCalendar.ToDateTime\n- uid: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: ToFourDigitYear\n  nameWithType: EastAsianLunisolarCalendar.ToFourDigitYear\n- uid: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax*\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: TwoDigitYearMax\n  nameWithType: EastAsianLunisolarCalendar.TwoDigitYearMax\n"}