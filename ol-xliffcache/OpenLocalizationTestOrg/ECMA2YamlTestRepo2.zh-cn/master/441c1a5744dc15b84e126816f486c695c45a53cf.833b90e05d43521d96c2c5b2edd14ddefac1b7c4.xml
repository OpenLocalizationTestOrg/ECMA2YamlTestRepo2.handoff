{"nodes":[{"pos":[450,537],"content":"Provides a safe handle that represents a secret agreement value (NCRYPT_SECRET_HANDLE).","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a safe handle that represents a secret agreement value (NCRYPT_SECRET_HANDLE).","pos":[0,87]}]},{"pos":[550,1180],"content":"This class should be used when working with native code that expects an NCRYPT_SECRET_HANDLE.      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.","needQuote":false,"needEscape":true,"nodes":[{"content":"This class should be used when working with native code that expects an NCRYPT_SECRET_HANDLE.","pos":[0,93]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.","pos":[99,178],"source":"      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[179,273]},{"content":"To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block.","pos":[274,385],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[386,493],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.","pos":[494,627],"source":" For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."}]},{"pos":[2217,2329],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\"></xref> class."},{"pos":[3111,3123],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n  id: SafeNCryptSecretHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor\n  - Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.ReleaseNativeHandle\n  langs:\n  - csharp\n  name: SafeNCryptSecretHandle\n  nameWithType: SafeNCryptSecretHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n  type: Class\n  summary: Provides a safe handle that represents a secret agreement value (NCRYPT_SECRET_HANDLE).\n  remarks: \"This class should be used when working with native code that expects an NCRYPT_SECRET_HANDLE.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]\n\n      public sealed class SafeNCryptSecretHandle : Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  inheritance:\n  - System.Runtime.InteropServices.SafeHandle\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  - Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  implements: []\n  inheritedMembers:\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  - Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor\n  id: '#ctor'\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n  langs:\n  - csharp\n  name: SafeNCryptSecretHandle()\n  nameWithType: SafeNCryptSecretHandle.SafeNCryptSecretHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.SafeNCryptSecretHandle()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\"></xref> class.\n  syntax:\n    content: public SafeNCryptSecretHandle ();\n    parameters: []\n  overload: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.ReleaseNativeHandle\n  id: ReleaseNativeHandle\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n  langs:\n  - csharp\n  name: ReleaseNativeHandle()\n  nameWithType: SafeNCryptSecretHandle.ReleaseNativeHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.ReleaseNativeHandle()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: protected override bool ReleaseNativeHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.ReleaseNativeHandle*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n  isExternal: false\n  name: SafeNCryptSecretHandle()\n  nameWithType: SafeNCryptSecretHandle.SafeNCryptSecretHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.SafeNCryptSecretHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.ReleaseNativeHandle\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n  isExternal: false\n  name: ReleaseNativeHandle()\n  nameWithType: SafeNCryptSecretHandle.ReleaseNativeHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.ReleaseNativeHandle()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n  isExternal: false\n  name: SafeNCryptSecretHandle\n  nameWithType: SafeNCryptSecretHandle.SafeNCryptSecretHandle\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.ReleaseNativeHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n  isExternal: false\n  name: ReleaseNativeHandle\n  nameWithType: SafeNCryptSecretHandle.ReleaseNativeHandle\n"}