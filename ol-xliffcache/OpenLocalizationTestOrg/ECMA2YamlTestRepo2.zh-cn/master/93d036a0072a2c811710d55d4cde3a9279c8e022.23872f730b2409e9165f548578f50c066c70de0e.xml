{"nodes":[{"pos":[259,410],"content":"Represents the method that will handle various routed events that do not have specific event data beyond the data that is common for all routed events.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the method that will handle various routed events that do not have specific event data beyond the data that is common for all routed events.","pos":[0,151]}]},{"pos":[423,2900],"content":"The RoutedEventHandler delegate is used for any routed event that does not report event-specific information in the event data. There are many such routed events; prominent examples include <xref:System.Windows.Controls.Primitives.ButtonBase.Click> and <xref:System.Windows.FrameworkElement.Loaded>.       The most noteworthy difference between writing a handler for a routed event as opposed to a general [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event is that the `sender` of the event (the element where the handler is attached and invoked) cannot be considered to necessarily be the source of the event. The source is reported as a property in the event data (<xref:System.Windows.RoutedEventArgs.Source%2A>). A difference between `sender`and <xref:System.Windows.RoutedEventArgs.Source%2A> is the result of the event being routed to different elements, during the traversal of the routed event through an element tree.       You can use either `sender` or <xref:System.Windows.RoutedEventArgs.Source%2A> for an object reference if you are deliberately not interested in the routing behavior of a direct or bubbling routed event and you only intend to handle routed events on the elements where they are first raised. In this circumstance, `sender` and <xref:System.Windows.RoutedEventArgs.Source%2A> are the same object.       If you do intend to take advantage of the inherent features of routed events and write your handlers accordingly, the two most important properties of the event data that you will work with when writing event handlers are <xref:System.Windows.RoutedEventArgs.Source%2A> and <xref:System.Windows.RoutedEventArgs.Handled%2A>.       For certain combinations of input events and [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] control classes, the element that raises the event is not the first element that has the opportunity to handle it. If the input event has a Preview version of the event, then the root of the element tree has first opportunity, can set <xref:System.Windows.RoutedEventArgs.Handled%2A> to `true` in the shared event data, and can influence how the input event is reported to remaining elements in its event route. The Preview handling behavior can give the appearance that a particular routed event is not raised as expected. For more information, see [Preview Events](~/add/includes/ajax-current-ext-md.md) and [Input Overview](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The RoutedEventHandler delegate is used for any routed event that does not report event-specific information in the event data.","pos":[0,127]},{"content":"There are many such routed events; prominent examples include &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; and &lt;xref:System.Windows.FrameworkElement.Loaded&gt;.","pos":[128,299],"source":" There are many such routed events; prominent examples include <xref:System.Windows.Controls.Primitives.ButtonBase.Click> and <xref:System.Windows.FrameworkElement.Loaded>."},{"content":"The most noteworthy difference between writing a handler for a routed event as opposed to a general <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> event is that the <ph id=\"ph2\">`sender`</ph> of the event (the element where the handler is attached and invoked) cannot be considered to necessarily be the source of the event.","pos":[306,627],"source":"       The most noteworthy difference between writing a handler for a routed event as opposed to a general [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event is that the `sender` of the event (the element where the handler is attached and invoked) cannot be considered to necessarily be the source of the event."},{"content":"The source is reported as a property in the event data (&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;).","pos":[628,733],"source":" The source is reported as a property in the event data (<xref:System.Windows.RoutedEventArgs.Source%2A>)."},{"content":"A difference between <ph id=\"ph1\">`sender`</ph>and &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; is the result of the event being routed to different elements, during the traversal of the routed event through an element tree.","pos":[734,943],"source":" A difference between `sender`and <xref:System.Windows.RoutedEventArgs.Source%2A> is the result of the event being routed to different elements, during the traversal of the routed event through an element tree."},{"content":"You can use either <ph id=\"ph1\">`sender`</ph> or &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; for an object reference if you are deliberately not interested in the routing behavior of a direct or bubbling routed event and you only intend to handle routed events on the elements where they are first raised.","pos":[950,1241],"source":"       You can use either `sender` or <xref:System.Windows.RoutedEventArgs.Source%2A> for an object reference if you are deliberately not interested in the routing behavior of a direct or bubbling routed event and you only intend to handle routed events on the elements where they are first raised."},{"content":"In this circumstance, <ph id=\"ph1\">`sender`</ph> and &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; are the same object.","pos":[1242,1345],"source":" In this circumstance, `sender` and <xref:System.Windows.RoutedEventArgs.Source%2A> are the same object."},{"content":"If you do intend to take advantage of the inherent features of routed events and write your handlers accordingly, the two most important properties of the event data that you will work with when writing event handlers are &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; and &lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;.","pos":[1352,1675],"source":"       If you do intend to take advantage of the inherent features of routed events and write your handlers accordingly, the two most important properties of the event data that you will work with when writing event handlers are <xref:System.Windows.RoutedEventArgs.Source%2A> and <xref:System.Windows.RoutedEventArgs.Handled%2A>."},{"content":"For certain combinations of input events and <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> control classes, the element that raises the event is not the first element that has the opportunity to handle it.","pos":[1682,1917],"source":"       For certain combinations of input events and [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] control classes, the element that raises the event is not the first element that has the opportunity to handle it."},{"content":"If the input event has a Preview version of the event, then the root of the element tree has first opportunity, can set &lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt; to <ph id=\"ph1\">`true`</ph> in the shared event data, and can influence how the input event is reported to remaining elements in its event route.","pos":[1918,2214],"source":" If the input event has a Preview version of the event, then the root of the element tree has first opportunity, can set <xref:System.Windows.RoutedEventArgs.Handled%2A> to `true` in the shared event data, and can influence how the input event is reported to remaining elements in its event route."},{"content":"The Preview handling behavior can give the appearance that a particular routed event is not raised as expected.","pos":[2215,2326]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Preview Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Input Overview<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2327,2469],"source":" For more information, see [Preview Events](~/add/includes/ajax-current-ext-md.md) and [Input Overview](~/add/includes/ajax-current-ext-md.md)."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.RoutedEventHandler\n  id: RoutedEventHandler\n  langs:\n  - csharp\n  name: RoutedEventHandler\n  nameWithType: RoutedEventHandler\n  fullName: System.Windows.RoutedEventHandler\n  type: Delegate\n  summary: Represents the method that will handle various routed events that do not have specific event data beyond the data that is common for all routed events.\n  remarks: \"The RoutedEventHandler delegate is used for any routed event that does not report event-specific information in the event data. There are many such routed events; prominent examples include <xref:System.Windows.Controls.Primitives.ButtonBase.Click> and <xref:System.Windows.FrameworkElement.Loaded>.  \\n  \\n The most noteworthy difference between writing a handler for a routed event as opposed to a general [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event is that the `sender` of the event (the element where the handler is attached and invoked) cannot be considered to necessarily be the source of the event. The source is reported as a property in the event data (<xref:System.Windows.RoutedEventArgs.Source%2A>). A difference between `sender`and <xref:System.Windows.RoutedEventArgs.Source%2A> is the result of the event being routed to different elements, during the traversal of the routed event through an element tree.  \\n  \\n You can use either `sender` or <xref:System.Windows.RoutedEventArgs.Source%2A> for an object reference if you are deliberately not interested in the routing behavior of a direct or bubbling routed event and you only intend to handle routed events on the elements where they are first raised. In this circumstance, `sender` and <xref:System.Windows.RoutedEventArgs.Source%2A> are the same object.  \\n  \\n If you do intend to take advantage of the inherent features of routed events and write your handlers accordingly, the two most important properties of the event data that you will work with when writing event handlers are <xref:System.Windows.RoutedEventArgs.Source%2A> and <xref:System.Windows.RoutedEventArgs.Handled%2A>.  \\n  \\n For certain combinations of input events and [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] control classes, the element that raises the event is not the first element that has the opportunity to handle it. If the input event has a Preview version of the event, then the root of the element tree has first opportunity, can set <xref:System.Windows.RoutedEventArgs.Handled%2A> to `true` in the shared event data, and can influence how the input event is reported to remaining elements in its event route. The Preview handling behavior can give the appearance that a particular routed event is not raised as expected. For more information, see [Preview Events](~/add/includes/ajax-current-ext-md.md) and [Input Overview](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public delegate void RoutedEventHandler(object sender, RoutedEventArgs e);\n  inheritance:\n  - System.Delegate\n  platform:\n  - net462\nreferences:\n- uid: System.Delegate\n  isExternal: false\n  name: System.Delegate\n"}