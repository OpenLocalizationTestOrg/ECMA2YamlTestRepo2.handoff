{"nodes":[{"pos":[518,636],"content":"Computes the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SHA1\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> hash for the input data using the managed library.","needQuote":true,"needEscape":true,"source":"Computes the <xref href=\"System.Security.Cryptography.SHA1\"></xref> hash for the input data using the managed library."},{"pos":[649,1085],"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.       This is a purely managed implementation of <xref:System.Security.Cryptography.SHA1> that does not wrap CAPI.       The hash size for the SHA1Managed algorithm is 160 bits.","needQuote":false,"needEscape":true,"nodes":[{"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.       This is a purely managed implementation of <xref:System.Security.Cryptography.SHA1> that does not wrap CAPI.       The hash size for the SHA1Managed algorithm is 160 bits.","pos":[0,432],"nodes":[{"content":"The hash is used as a unique value of fixed size representing a large amount of data.","pos":[0,85]},{"content":"Hashes of two sets of data should match if and only if the corresponding data also matches.","pos":[86,177]},{"content":"Small changes to the data result in large unpredictable changes in the hash.","pos":[178,254]},{"content":"This is a purely managed implementation of &lt;xref:System.Security.Cryptography.SHA1&gt; that does not wrap CAPI.","pos":[261,369],"source":"       This is a purely managed implementation of <xref:System.Security.Cryptography.SHA1> that does not wrap CAPI."},{"content":"The hash size for the SHA1Managed algorithm is 160 bits.","pos":[376,432]}]}]},{"pos":[3597,3699],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SHA1Managed\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.SHA1Managed\"></xref> class."},{"pos":[3949,4001],"content":"This class is not compliant with the FIPS algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class is not compliant with the FIPS algorithm.","pos":[0,52]}]},{"pos":[4521,4664],"content":"Routes data written to the object into the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SHA1Managed\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> hash algorithm for computing the hash.","needQuote":true,"needEscape":true,"source":"Routes data written to the object into the <xref href=\"System.Security.Cryptography.SHA1Managed\"></xref> hash algorithm for computing the hash."},{"pos":[4835,4850],"content":"The input data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input data.","pos":[0,15]}]},{"pos":[4913,4975],"content":"The offset into the byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]},{"pos":[5037,5085],"content":"The number of bytes in the array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]},{"pos":[5554,5687],"content":"Returns the computed <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SHA1\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> hash value after all data has been written to the object.","needQuote":true,"needEscape":true,"source":"Returns the computed <xref href=\"System.Security.Cryptography.SHA1\"></xref> hash value after all data has been written to the object."},{"pos":[5827,5850],"content":"The computed hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed hash code.","pos":[0,23]}]},{"pos":[6325,6414],"content":"Initializes an instance of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SHA1Managed\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes an instance of <xref href=\"System.Security.Cryptography.SHA1Managed\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.SHA1Managed\n  id: SHA1Managed\n  children:\n  - System.Security.Cryptography.SHA1Managed.#ctor\n  - System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.SHA1Managed.HashFinal\n  - System.Security.Cryptography.SHA1Managed.Initialize\n  langs:\n  - csharp\n  name: SHA1Managed\n  nameWithType: SHA1Managed\n  fullName: System.Security.Cryptography.SHA1Managed\n  type: Class\n  summary: Computes the <xref href=\"System.Security.Cryptography.SHA1\"></xref> hash for the input data using the managed library.\n  remarks: \"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.  \\n  \\n This is a purely managed implementation of <xref:System.Security.Cryptography.SHA1> that does not wrap CAPI.  \\n  \\n The hash size for the SHA1Managed algorithm is 160 bits.\"\n  example:\n  - \"The following example computes the SHA1Managed hash for `data` and stores it in `result`. This example assumes that there is a predefined constant `DATA_SIZE`.  \\n  \\n [!code-cpp[Classic SHA1Managed Example#1](~/add/codesnippet/cpp/t-system.security.crypto_56_1.cpp)]\\n [!code-cs[Classic SHA1Managed Example#1](~/add/codesnippet/csharp/t-system.security.crypto_56_1.cs)]\\n [!code-vb[Classic SHA1Managed Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_56_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class SHA1Managed : System.Security.Cryptography.SHA1\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.SHA1\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.SHA1.Create\n  - System.Security.Cryptography.SHA1.Create(System.String)\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SHA1Managed.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.SHA1Managed\n  langs:\n  - csharp\n  name: SHA1Managed()\n  nameWithType: SHA1Managed.SHA1Managed()\n  fullName: System.Security.Cryptography.SHA1Managed.SHA1Managed()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.SHA1Managed\"></xref> class.\n  syntax:\n    content: public SHA1Managed ();\n    parameters: []\n  overload: System.Security.Cryptography.SHA1Managed.#ctor*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This class is not compliant with the FIPS algorithm.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.SHA1Managed\n  langs:\n  - csharp\n  name: HashCore(Byte[],Int32,Int32)\n  nameWithType: SHA1Managed.HashCore(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.SHA1Managed.HashCore(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Routes data written to the object into the <xref href=\"System.Security.Cryptography.SHA1Managed\"></xref> hash algorithm for computing the hash.\n  syntax:\n    content: protected override void HashCore (byte[] rgb, int ibStart, int cbSize);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: The input data.\n    - id: ibStart\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: cbSize\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n  overload: System.Security.Cryptography.SHA1Managed.HashCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SHA1Managed.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.SHA1Managed\n  langs:\n  - csharp\n  name: HashFinal()\n  nameWithType: SHA1Managed.HashFinal()\n  fullName: System.Security.Cryptography.SHA1Managed.HashFinal()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Returns the computed <xref href=\"System.Security.Cryptography.SHA1\"></xref> hash value after all data has been written to the object.\n  syntax:\n    content: protected override byte[] HashFinal ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: The computed hash code.\n  overload: System.Security.Cryptography.SHA1Managed.HashFinal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SHA1Managed.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.SHA1Managed\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: SHA1Managed.Initialize()\n  fullName: System.Security.Cryptography.SHA1Managed.Initialize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes an instance of <xref href=\"System.Security.Cryptography.SHA1Managed\"></xref>.\n  syntax:\n    content: public override void Initialize ();\n    parameters: []\n  overload: System.Security.Cryptography.SHA1Managed.Initialize*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.SHA1\n  isExternal: false\n  name: System.Security.Cryptography.SHA1\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Security.Cryptography.SHA1Managed.#ctor\n  parent: System.Security.Cryptography.SHA1Managed\n  isExternal: false\n  name: SHA1Managed()\n  nameWithType: SHA1Managed.SHA1Managed()\n  fullName: System.Security.Cryptography.SHA1Managed.SHA1Managed()\n- uid: System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.SHA1Managed\n  isExternal: false\n  name: HashCore(Byte[],Int32,Int32)\n  nameWithType: SHA1Managed.HashCore(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.SHA1Managed.HashCore(Byte[],Int32,Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.SHA1Managed.HashFinal\n  parent: System.Security.Cryptography.SHA1Managed\n  isExternal: false\n  name: HashFinal()\n  nameWithType: SHA1Managed.HashFinal()\n  fullName: System.Security.Cryptography.SHA1Managed.HashFinal()\n- uid: System.Security.Cryptography.SHA1Managed.Initialize\n  parent: System.Security.Cryptography.SHA1Managed\n  isExternal: false\n  name: Initialize()\n  nameWithType: SHA1Managed.Initialize()\n  fullName: System.Security.Cryptography.SHA1Managed.Initialize()\n- uid: System.Security.Cryptography.SHA1Managed.#ctor*\n  parent: System.Security.Cryptography.SHA1Managed\n  isExternal: false\n  name: SHA1Managed\n  nameWithType: SHA1Managed.SHA1Managed\n- uid: System.Security.Cryptography.SHA1Managed.HashCore*\n  parent: System.Security.Cryptography.SHA1Managed\n  isExternal: false\n  name: HashCore\n  nameWithType: SHA1Managed.HashCore\n- uid: System.Security.Cryptography.SHA1Managed.HashFinal*\n  parent: System.Security.Cryptography.SHA1Managed\n  isExternal: false\n  name: HashFinal\n  nameWithType: SHA1Managed.HashFinal\n- uid: System.Security.Cryptography.SHA1Managed.Initialize*\n  parent: System.Security.Cryptography.SHA1Managed\n  isExternal: false\n  name: Initialize\n  nameWithType: SHA1Managed.Initialize\n"}