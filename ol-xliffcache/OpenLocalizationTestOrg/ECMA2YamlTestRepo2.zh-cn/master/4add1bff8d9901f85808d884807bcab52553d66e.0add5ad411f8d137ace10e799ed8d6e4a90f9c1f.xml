{"nodes":[{"pos":[615,662],"content":"Specifies the isolation level of a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the isolation level of a transaction.","pos":[0,47]}]},{"pos":[675,1751],"content":"The data affected by a transaction is called volatile. When you create a transaction, you can specify the isolation level that applies to the transaction. The isolation level of a transaction determines what level of access other transactions have to volatile data before a transaction completes.       The lowest isolation level, `ReadUncommitted`, allows many transactions to operate on a data store simultaneously and provides no protection against data corruption due to interruptive transactions. The highest isolation level, `Serializable`, provides a high degree of protection against interruptive transactions, but requires that each transaction complete before any other transactions are allowed to operate on the data.       The isolation level of a transaction is determined when the transaction is created. By default, the <xref:System.Transactions> infrastructure creates `Serializable` transactions. You can determine the isolation level of an existing transaction using the <xref:System.Transactions.Transaction.IsolationLevel%2A> property of a transaction.","needQuote":false,"needEscape":true,"nodes":[{"content":"The data affected by a transaction is called volatile.","pos":[0,54]},{"content":"When you create a transaction, you can specify the isolation level that applies to the transaction.","pos":[55,154]},{"content":"The isolation level of a transaction determines what level of access other transactions have to volatile data before a transaction completes.","pos":[155,296]},{"content":"The lowest isolation level, <ph id=\"ph1\">`ReadUncommitted`</ph>, allows many transactions to operate on a data store simultaneously and provides no protection against data corruption due to interruptive transactions.","pos":[303,501],"source":"       The lowest isolation level, `ReadUncommitted`, allows many transactions to operate on a data store simultaneously and provides no protection against data corruption due to interruptive transactions."},{"content":"The highest isolation level, <ph id=\"ph1\">`Serializable`</ph>, provides a high degree of protection against interruptive transactions, but requires that each transaction complete before any other transactions are allowed to operate on the data.","pos":[502,728],"source":" The highest isolation level, `Serializable`, provides a high degree of protection against interruptive transactions, but requires that each transaction complete before any other transactions are allowed to operate on the data."},{"content":"The isolation level of a transaction is determined when the transaction is created.","pos":[735,818]},{"content":"By default, the &lt;xref:System.Transactions&gt; infrastructure creates <ph id=\"ph1\">`Serializable`</ph> transactions.","pos":[819,913],"source":" By default, the <xref:System.Transactions> infrastructure creates `Serializable` transactions."},{"content":"You can determine the isolation level of an existing transaction using the &lt;xref:System.Transactions.Transaction.IsolationLevel%2A&gt; property of a transaction.","pos":[914,1072],"source":" You can determine the isolation level of an existing transaction using the <xref:System.Transactions.Transaction.IsolationLevel%2A> property of a transaction."}]},{"pos":[2182,2263],"content":"The pending changes from more highly isolated transactions cannot be overwritten.","needQuote":true,"needEscape":true,"nodes":[{"content":"The pending changes from more highly isolated transactions cannot be overwritten.","pos":[0,81]}]},{"pos":[2371,2383],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2789,2862],"content":"Volatile data cannot be read during the transaction, but can be modified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Volatile data cannot be read during the transaction, but can be modified.","pos":[0,73]}]},{"pos":[2978,2990],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3406,3468],"content":"Volatile data can be read and modified during the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Volatile data can be read and modified during the transaction.","pos":[0,62]}]},{"pos":[3586,3598],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4009,4121],"content":"Volatile data can be read but not modified during the transaction. New data can be added during the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Volatile data can be read but not modified during the transaction. New data can be added during the transaction.","pos":[0,112],"nodes":[{"content":"Volatile data can be read but not modified during the transaction.","pos":[0,66]},{"content":"New data can be added during the transaction.","pos":[67,112]}]}]},{"pos":[4238,4250],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4651,4747],"content":"Volatile data can be read but not modified, and no new data can be added during the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Volatile data can be read but not modified, and no new data can be added during the transaction.","pos":[0,96]}]},{"pos":[4862,4874],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5255,5532],"content":"Volatile data can be read. Before a transaction modifies data, it verifies if another transaction has changed the data after it was initially read. If the data has been updated, an error is raised. This allows a transaction to get to the previously committed value of the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Volatile data can be read. Before a transaction modifies data, it verifies if another transaction has changed the data after it was initially read. If the data has been updated, an error is raised. This allows a transaction to get to the previously committed value of the data.","pos":[0,277],"nodes":[{"content":"Volatile data can be read.","pos":[0,26]},{"content":"Before a transaction modifies data, it verifies if another transaction has changed the data after it was initially read.","pos":[27,147]},{"content":"If the data has been updated, an error is raised.","pos":[148,197]},{"content":"This allows a transaction to get to the previously committed value of the data.","pos":[198,277]}]}]},{"pos":[5544,5765],"content":"When you try to promote a transaction that was created with this isolation level, an <xref:System.InvalidOperationException> is thrown with the error message \"Transactions with IsolationLevel Snapshot cannot be promoted\".","needQuote":true,"needEscape":true,"nodes":[{"content":"When you try to promote a transaction that was created with this isolation level, an &lt;xref:System.InvalidOperationException&gt; is thrown with the error message \"Transactions with IsolationLevel Snapshot cannot be promoted\".","pos":[0,221],"source":"When you try to promote a transaction that was created with this isolation level, an <xref:System.InvalidOperationException> is thrown with the error message \"Transactions with IsolationLevel Snapshot cannot be promoted\"."}]},{"pos":[5876,5888],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6284,6430],"content":"A different isolation level than the one specified is being used, but the level cannot be determined. An exception is thrown if this value is set.","needQuote":true,"needEscape":true,"nodes":[{"content":"A different isolation level than the one specified is being used, but the level cannot be determined. An exception is thrown if this value is set.","pos":[0,146],"nodes":[{"content":"A different isolation level than the one specified is being used, but the level cannot be determined.","pos":[0,101]},{"content":"An exception is thrown if this value is set.","pos":[102,146]}]}]},{"pos":[6544,6556],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Transactions.IsolationLevel\n  id: IsolationLevel\n  children:\n  - System.Transactions.IsolationLevel.Chaos\n  - System.Transactions.IsolationLevel.ReadCommitted\n  - System.Transactions.IsolationLevel.ReadUncommitted\n  - System.Transactions.IsolationLevel.RepeatableRead\n  - System.Transactions.IsolationLevel.Serializable\n  - System.Transactions.IsolationLevel.Snapshot\n  - System.Transactions.IsolationLevel.Unspecified\n  langs:\n  - csharp\n  name: IsolationLevel\n  nameWithType: IsolationLevel\n  fullName: System.Transactions.IsolationLevel\n  type: Enum\n  summary: Specifies the isolation level of a transaction.\n  remarks: \"The data affected by a transaction is called volatile. When you create a transaction, you can specify the isolation level that applies to the transaction. The isolation level of a transaction determines what level of access other transactions have to volatile data before a transaction completes.  \\n  \\n The lowest isolation level, `ReadUncommitted`, allows many transactions to operate on a data store simultaneously and provides no protection against data corruption due to interruptive transactions. The highest isolation level, `Serializable`, provides a high degree of protection against interruptive transactions, but requires that each transaction complete before any other transactions are allowed to operate on the data.  \\n  \\n The isolation level of a transaction is determined when the transaction is created. By default, the <xref:System.Transactions> infrastructure creates `Serializable` transactions. You can determine the isolation level of an existing transaction using the <xref:System.Transactions.Transaction.IsolationLevel%2A> property of a transaction.\"\n  syntax:\n    content: public enum IsolationLevel\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Transactions.IsolationLevel.Chaos\n  id: Chaos\n  parent: System.Transactions.IsolationLevel\n  langs:\n  - csharp\n  name: Chaos\n  nameWithType: IsolationLevel.Chaos\n  fullName: System.Transactions.IsolationLevel.Chaos\n  type: Field\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: The pending changes from more highly isolated transactions cannot be overwritten.\n  syntax:\n    content: Chaos\n    return:\n      type: System.Transactions.IsolationLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.IsolationLevel.ReadCommitted\n  id: ReadCommitted\n  parent: System.Transactions.IsolationLevel\n  langs:\n  - csharp\n  name: ReadCommitted\n  nameWithType: IsolationLevel.ReadCommitted\n  fullName: System.Transactions.IsolationLevel.ReadCommitted\n  type: Field\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Volatile data cannot be read during the transaction, but can be modified.\n  syntax:\n    content: ReadCommitted\n    return:\n      type: System.Transactions.IsolationLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.IsolationLevel.ReadUncommitted\n  id: ReadUncommitted\n  parent: System.Transactions.IsolationLevel\n  langs:\n  - csharp\n  name: ReadUncommitted\n  nameWithType: IsolationLevel.ReadUncommitted\n  fullName: System.Transactions.IsolationLevel.ReadUncommitted\n  type: Field\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Volatile data can be read and modified during the transaction.\n  syntax:\n    content: ReadUncommitted\n    return:\n      type: System.Transactions.IsolationLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.IsolationLevel.RepeatableRead\n  id: RepeatableRead\n  parent: System.Transactions.IsolationLevel\n  langs:\n  - csharp\n  name: RepeatableRead\n  nameWithType: IsolationLevel.RepeatableRead\n  fullName: System.Transactions.IsolationLevel.RepeatableRead\n  type: Field\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Volatile data can be read but not modified during the transaction. New data can be added during the transaction.\n  syntax:\n    content: RepeatableRead\n    return:\n      type: System.Transactions.IsolationLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.IsolationLevel.Serializable\n  id: Serializable\n  parent: System.Transactions.IsolationLevel\n  langs:\n  - csharp\n  name: Serializable\n  nameWithType: IsolationLevel.Serializable\n  fullName: System.Transactions.IsolationLevel.Serializable\n  type: Field\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Volatile data can be read but not modified, and no new data can be added during the transaction.\n  syntax:\n    content: Serializable\n    return:\n      type: System.Transactions.IsolationLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.IsolationLevel.Snapshot\n  id: Snapshot\n  parent: System.Transactions.IsolationLevel\n  langs:\n  - csharp\n  name: Snapshot\n  nameWithType: IsolationLevel.Snapshot\n  fullName: System.Transactions.IsolationLevel.Snapshot\n  type: Field\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Volatile data can be read. Before a transaction modifies data, it verifies if another transaction has changed the data after it was initially read. If the data has been updated, an error is raised. This allows a transaction to get to the previously committed value of the data.\n  remarks: When you try to promote a transaction that was created with this isolation level, an <xref:System.InvalidOperationException> is thrown with the error message \"Transactions with IsolationLevel Snapshot cannot be promoted\".\n  syntax:\n    content: Snapshot\n    return:\n      type: System.Transactions.IsolationLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.IsolationLevel.Unspecified\n  id: Unspecified\n  parent: System.Transactions.IsolationLevel\n  langs:\n  - csharp\n  name: Unspecified\n  nameWithType: IsolationLevel.Unspecified\n  fullName: System.Transactions.IsolationLevel.Unspecified\n  type: Field\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: A different isolation level than the one specified is being used, but the level cannot be determined. An exception is thrown if this value is set.\n  syntax:\n    content: Unspecified\n    return:\n      type: System.Transactions.IsolationLevel\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Transactions.IsolationLevel.Chaos\n  parent: System.Transactions.IsolationLevel\n  isExternal: false\n  name: Chaos\n  nameWithType: IsolationLevel.Chaos\n  fullName: System.Transactions.IsolationLevel.Chaos\n- uid: System.Transactions.IsolationLevel\n  parent: System.Transactions\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: IsolationLevel\n  fullName: System.Transactions.IsolationLevel\n- uid: System.Transactions.IsolationLevel.ReadCommitted\n  parent: System.Transactions.IsolationLevel\n  isExternal: false\n  name: ReadCommitted\n  nameWithType: IsolationLevel.ReadCommitted\n  fullName: System.Transactions.IsolationLevel.ReadCommitted\n- uid: System.Transactions.IsolationLevel.ReadUncommitted\n  parent: System.Transactions.IsolationLevel\n  isExternal: false\n  name: ReadUncommitted\n  nameWithType: IsolationLevel.ReadUncommitted\n  fullName: System.Transactions.IsolationLevel.ReadUncommitted\n- uid: System.Transactions.IsolationLevel.RepeatableRead\n  parent: System.Transactions.IsolationLevel\n  isExternal: false\n  name: RepeatableRead\n  nameWithType: IsolationLevel.RepeatableRead\n  fullName: System.Transactions.IsolationLevel.RepeatableRead\n- uid: System.Transactions.IsolationLevel.Serializable\n  parent: System.Transactions.IsolationLevel\n  isExternal: false\n  name: Serializable\n  nameWithType: IsolationLevel.Serializable\n  fullName: System.Transactions.IsolationLevel.Serializable\n- uid: System.Transactions.IsolationLevel.Snapshot\n  parent: System.Transactions.IsolationLevel\n  isExternal: false\n  name: Snapshot\n  nameWithType: IsolationLevel.Snapshot\n  fullName: System.Transactions.IsolationLevel.Snapshot\n- uid: System.Transactions.IsolationLevel.Unspecified\n  parent: System.Transactions.IsolationLevel\n  isExternal: false\n  name: Unspecified\n  nameWithType: IsolationLevel.Unspecified\n  fullName: System.Transactions.IsolationLevel.Unspecified\n"}