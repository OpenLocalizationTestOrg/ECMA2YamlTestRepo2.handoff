{"nodes":[{"pos":[1316,1398],"content":"Provides a channel implementation that uses the TCP protocol to transmit messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a channel implementation that uses the TCP protocol to transmit messages.","pos":[0,82]}]},{"pos":[1411,3157],"content":"Channels transport messages across remoting boundaries (for example, between computers on application domains). The TcpChannel class is a convenience class combining the functionality of the <xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel> class and the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> class.       Channels are used by the .NET Framework remoting infrastructure to transport remote calls. When a client makes a call to a remote object, the call is serialized into a message that is sent by a client channel and received by a server channel. It is then deserialized and processed. Any returned values are transmitted by the server channel and received by the client channel.       To perform additional processing of messages, you can specify implementations of the <xref:System.Runtime.Remoting.Channels.IClientChannelSinkProvider> and <xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider> through which all messages processed by the TcpChannel are passed.       A TcpChannel object has associated configuration properties that can be set at run time either in a configuration file (by invoking the static <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=fullName> method) or programmatically (by passing a <xref:System.Collections.IDictionary> collection to the <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.%23ctor%2A> constructor). For more information about channel configuration properties, see [Channel and Formatter Configuration Properties](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe).      > [!NOTE] >  If the server computer is running Windows 95/98/Me, the server TcpChannel cannot be specified as secure.","needQuote":false,"needEscape":true,"nodes":[{"content":"Channels transport messages across remoting boundaries (for example, between computers on application domains).","pos":[0,111]},{"content":"The TcpChannel class is a convenience class combining the functionality of the &lt;xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel&gt; class and the &lt;xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel&gt; class.","pos":[112,333],"source":" The TcpChannel class is a convenience class combining the functionality of the <xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel> class and the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> class."},{"content":"Channels are used by the .NET Framework remoting infrastructure to transport remote calls.","pos":[340,430]},{"content":"When a client makes a call to a remote object, the call is serialized into a message that is sent by a client channel and received by a server channel.","pos":[431,582]},{"content":"It is then deserialized and processed.","pos":[583,621]},{"content":"Any returned values are transmitted by the server channel and received by the client channel.","pos":[622,715]},{"content":"To perform additional processing of messages, you can specify implementations of the &lt;xref:System.Runtime.Remoting.Channels.IClientChannelSinkProvider&gt; and &lt;xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider&gt; through which all messages processed by the TcpChannel are passed.","pos":[722,1011],"source":"       To perform additional processing of messages, you can specify implementations of the <xref:System.Runtime.Remoting.Channels.IClientChannelSinkProvider> and <xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider> through which all messages processed by the TcpChannel are passed."},{"content":"A TcpChannel object has associated configuration properties that can be set at run time either in a configuration file (by invoking the static &lt;xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=fullName&gt; method) or programmatically (by passing a &lt;xref:System.Collections.IDictionary&gt; collection to the &lt;xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.%23ctor%2A&gt; constructor).","pos":[1018,1429],"source":"       A TcpChannel object has associated configuration properties that can be set at run time either in a configuration file (by invoking the static <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=fullName> method) or programmatically (by passing a <xref:System.Collections.IDictionary> collection to the <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.%23ctor%2A> constructor)."},{"content":"For more information about channel configuration properties, see <bpt id=\"p1\">[</bpt>Channel and Formatter Configuration Properties<ept id=\"p1\">](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe)</ept>.","pos":[1430,1614],"source":" For more information about channel configuration properties, see [Channel and Formatter Configuration Properties](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the server computer is running Windows 95/98/Me, the server TcpChannel cannot be specified as secure.","pos":[1620,1737],"source":"      > [!NOTE] >  If the server computer is running Windows 95/98/Me, the server TcpChannel cannot be specified as secure."}]},{"pos":[5221,5390],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, activating only a client channel, and not a server channel.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"></xref> class, activating only a client channel, and not a server channel."},{"pos":[5402,5591],"content":"The default constructor initializes all fields to their default values. If the default constructor is used, the channel functions only as a client channel, and does not listen on any ports.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default constructor initializes all fields to their default values. If the default constructor is used, the channel functions only as a client channel, and does not listen on any ports.","pos":[0,189],"nodes":[{"content":"The default constructor initializes all fields to their default values.","pos":[0,71]},{"content":"If the default constructor is used, the channel functions only as a client channel, and does not listen on any ports.","pos":[72,189]}]}]},{"pos":[6548,6714],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a server channel that listens on the specified port.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"></xref> class with a server channel that listens on the specified port."},{"pos":[6727,7257],"content":"To request that the remoting system choose an open port on your behalf, specify port 0 (zero). This will create a <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> instance to listen for requests on the dynamically assigned port. This is typically done on the client to make sure that a <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> is listening for callback methods.       If 0 is passed to the constructor the <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> is instantiated to use a free port.","needQuote":false,"needEscape":true,"nodes":[{"content":"To request that the remoting system choose an open port on your behalf, specify port 0 (zero). This will create a <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> instance to listen for requests on the dynamically assigned port. This is typically done on the client to make sure that a <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> is listening for callback methods.       If 0 is passed to the constructor the <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> is instantiated to use a free port.","pos":[0,528],"nodes":[{"content":"To request that the remoting system choose an open port on your behalf, specify port 0 (zero).","pos":[0,94]},{"content":"This will create a &lt;xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel&gt; instance to listen for requests on the dynamically assigned port.","pos":[95,240],"source":" This will create a <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> instance to listen for requests on the dynamically assigned port."},{"content":"This is typically done on the client to make sure that a &lt;xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel&gt; is listening for callback methods.","pos":[241,393],"source":" This is typically done on the client to make sure that a <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> is listening for callback methods."},{"content":"If 0 is passed to the constructor the &lt;xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel&gt; is instantiated to use a free port.","pos":[400,528],"source":"       If 0 is passed to the constructor the <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> is instantiated to use a free port."}]}]},{"pos":[7908,7953],"content":"The port on which the server channel listens.","needQuote":true,"needEscape":true,"nodes":[{"content":"The port on which the server channel listens.","pos":[0,45]}]},{"pos":[8970,9133],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified configuration properties and sinks.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"></xref> class with the specified configuration properties and sinks."},{"pos":[9146,10087],"content":"For more information about channel configuration properties, see [Channel and Formatter Configuration Properties](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe).      > [!NOTE] >  If the server computer is running Windows 95/98/Me, the server <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> cannot be specified as secure.       Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object. Channel sinks are also responsible for transporting messages between the client and the server. Channel sinks are linked together in a chain, and all channel messages flow through this chain of sinks before the message is finally serialized and transported. If you do not require sink functionality, set the `clientSinkProvider` and `serverSinkProvider` parameters to `null`.","needQuote":false,"needEscape":true,"nodes":[{"content":"For more information about channel configuration properties, see <bpt id=\"p1\">[</bpt>Channel and Formatter Configuration Properties<ept id=\"p1\">](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe)</ept>.","pos":[0,184],"source":"For more information about channel configuration properties, see [Channel and Formatter Configuration Properties](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the server computer is running Windows 95/98/Me, the server &lt;xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel&gt; cannot be specified as secure.","pos":[190,351],"source":"      > [!NOTE] >  If the server computer is running Windows 95/98/Me, the server <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> cannot be specified as secure."},{"content":"Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object.","pos":[358,560]},{"content":"Channel sinks are also responsible for transporting messages between the client and the server.","pos":[561,656]},{"content":"Channel sinks are linked together in a chain, and all channel messages flow through this chain of sinks before the message is finally serialized and transported.","pos":[657,818]},{"content":"If you do not require sink functionality, set the <ph id=\"ph1\">`clientSinkProvider`</ph> and <ph id=\"ph2\">`serverSinkProvider`</ph> parameters to <ph id=\"ph3\">`null`</ph>.","pos":[819,936],"source":" If you do not require sink functionality, set the `clientSinkProvider` and `serverSinkProvider` parameters to `null`."}]},{"pos":[10760,10907],"content":"A <xref:System.Collections.IDictionary> collection that specifies values for configuration properties to be used by the client and server channels.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Collections.IDictionary&gt; collection that specifies values for configuration properties to be used by the client and server channels.","pos":[0,147],"source":"A <xref:System.Collections.IDictionary> collection that specifies values for configuration properties to be used by the client and server channels."}]},{"pos":[11028,11161],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Channels.IClientChannelSinkProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> implementation to be used by the client channel.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Remoting.Channels.IClientChannelSinkProvider\"></xref> implementation to be used by the client channel."},{"pos":[11282,11415],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Channels.IServerChannelSinkProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> implementation to be used by the server channel.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Remoting.Channels.IServerChannelSinkProvider\"></xref> implementation to be used by the server channel."},{"pos":[11591,11644],"content":"A provided channel property was improperly formatted.","needQuote":true,"needEscape":true,"nodes":[{"content":"A provided channel property was improperly formatted.","pos":[0,53]}]},{"pos":[12082,12113],"content":"Gets the channel-specific data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the channel-specific data.","pos":[0,31]}]},{"pos":[12125,12436],"content":"Although returned as an instance of <xref:System.Object?displayProperty=fullName>, the value of this property can be cast to an instance of <xref:System.Runtime.Remoting.Channels.ChannelDataStore> describing the channel to which the <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel> object listens.","needQuote":true,"needEscape":true,"nodes":[{"content":"Although returned as an instance of &lt;xref:System.Object?displayProperty=fullName&gt;, the value of this property can be cast to an instance of &lt;xref:System.Runtime.Remoting.Channels.ChannelDataStore&gt; describing the channel to which the &lt;xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel&gt; object listens.","pos":[0,311],"source":"Although returned as an instance of <xref:System.Object?displayProperty=fullName>, the value of this property can be cast to an instance of <xref:System.Runtime.Remoting.Channels.ChannelDataStore> describing the channel to which the <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel> object listens."}]},{"pos":[12877,12995],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Channels.ChannelDataStore\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that contains channel-specific data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Runtime.Remoting.Channels.ChannelDataStore\"></xref> instance that contains channel-specific data."},{"pos":[13523,13560],"content":"Gets the name of the current channel.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the current channel.","pos":[0,37]}]},{"pos":[13572,14096],"content":"Every registered channel has a unique name. The name is used to retrieve a specific channel when calling <xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A>. To set the ChannelName property, assign the value to the \"name\" indexed property in the dictionary passed to the <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.%23ctor%28System.Collections.IDictionary%2CSystem.Runtime.Remoting.Channels.IClientChannelSinkProvider%2CSystem.Runtime.Remoting.Channels.IServerChannelSinkProvider%29> constructor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Every registered channel has a unique name. The name is used to retrieve a specific channel when calling <xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A>. To set the ChannelName property, assign the value to the \"name\" indexed property in the dictionary passed to the <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.%23ctor%28System.Collections.IDictionary%2CSystem.Runtime.Remoting.Channels.IClientChannelSinkProvider%2CSystem.Runtime.Remoting.Channels.IServerChannelSinkProvider%29> constructor.","pos":[0,524],"nodes":[{"content":"Every registered channel has a unique name.","pos":[0,43]},{"content":"The name is used to retrieve a specific channel when calling &lt;xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A&gt;.","pos":[44,175],"source":" The name is used to retrieve a specific channel when calling <xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A>."},{"content":"To set the ChannelName property, assign the value to the \"name\" indexed property in the dictionary passed to the &lt;xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.%23ctor%28System.Collections.IDictionary%2CSystem.Runtime.Remoting.Channels.IClientChannelSinkProvider%2CSystem.Runtime.Remoting.Channels.IServerChannelSinkProvider%29&gt; constructor.","pos":[176,524],"source":" To set the ChannelName property, assign the value to the \"name\" indexed property in the dictionary passed to the <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.%23ctor%28System.Collections.IDictionary%2CSystem.Runtime.Remoting.Channels.IClientChannelSinkProvider%2CSystem.Runtime.Remoting.Channels.IServerChannelSinkProvider%29> constructor."}]}]},{"pos":[14539,14600],"content":"A <xref:System.String> that contains the name of the channel.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that contains the name of the channel.","pos":[0,61],"source":"A <xref:System.String> that contains the name of the channel."}]},{"pos":[15148,15189],"content":"Gets the priority of the current channel.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the priority of the current channel.","pos":[0,41]}]},{"pos":[15646,15710],"content":"An integer that represents the priority assigned to the channel.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the priority assigned to the channel.","pos":[0,64]}]},{"pos":[16424,16522],"content":"Returns a channel message sink that delivers messages to the specified URL or channel data object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a channel message sink that delivers messages to the specified URL or channel data object.","pos":[0,98]}]},{"pos":[16535,17235],"content":"The CreateMessageSink method returns a channel message sink that delivers messages to either the specified URL or channel data object. If the `uri` parameter is `null`, `remoteChannelData` is used as a target for the sink. Either the `url` or `remoteChannelData` parameters can be `null`, but not both.       Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object. Channel sinks are linked together in a chain of `ChannelSinkProviders` and all channel messages flow through this chain of sinks before the message is finally serialized and transported.","needQuote":false,"needEscape":true,"nodes":[{"content":"The CreateMessageSink method returns a channel message sink that delivers messages to either the specified URL or channel data object.","pos":[0,134]},{"content":"If the <ph id=\"ph1\">`uri`</ph> parameter is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">`remoteChannelData`</ph> is used as a target for the sink.","pos":[135,222],"source":" If the `uri` parameter is `null`, `remoteChannelData` is used as a target for the sink."},{"content":"Either the <ph id=\"ph1\">`url`</ph> or <ph id=\"ph2\">`remoteChannelData`</ph> parameters can be <ph id=\"ph3\">`null`</ph>, but not both.","pos":[223,302],"source":" Either the `url` or `remoteChannelData` parameters can be `null`, but not both."},{"content":"Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object.","pos":[309,511]},{"content":"Channel sinks are linked together in a chain of <ph id=\"ph1\">`ChannelSinkProviders`</ph> and all channel messages flow through this chain of sinks before the message is finally serialized and transported.","pos":[512,698],"source":" Channel sinks are linked together in a chain of `ChannelSinkProviders` and all channel messages flow through this chain of sinks before the message is finally serialized and transported."}]},{"pos":[17790,17913],"content":"The URL to which the new sink should deliver messages. Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL to which the new sink should deliver messages.","pos":[0,54]},{"content":"Can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[55,123],"source":" Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[17987,18145],"content":"The channel data object of the remote host to which the new sink should deliver messages. Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The channel data object of the remote host to which the new sink should deliver messages.","pos":[0,89]},{"content":"Can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,158],"source":" Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[18211,18391],"content":"When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.","pos":[0,180],"nodes":[{"content":"When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object.","pos":[0,140]},{"content":"This parameter is passed uninitialized.","pos":[141,180]}]}]},{"pos":[18482,18572],"content":"A channel message sink that delivers messages to the specified URL or channel data object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A channel message sink that delivers messages to the specified URL or channel data object.","pos":[0,90]}]},{"pos":[19168,19330],"content":"Returns an array of all the URLs for an object with the specified URI, hosted on the current <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns an array of all the URLs for an object with the specified URI, hosted on the current <xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"></xref>."},{"pos":[19342,19466],"content":"This method is used by <xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=fullName>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is used by &lt;xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=fullName&gt;.","pos":[0,124],"source":"This method is used by <xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=fullName>."}]},{"pos":[20002,20052],"content":"The URI of the object for which URLs are required.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URI of the object for which URLs are required.","pos":[0,50]}]},{"pos":[20112,20262],"content":"An array of the URLs for an object with the specified URI, hosted on the current <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of the URLs for an object with the specified URI, hosted on the current <xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"></xref>."},{"pos":[20782,20864],"content":"Gets or sets a Boolean value that indicates whether the current channel is secure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Boolean value that indicates whether the current channel is secure.","pos":[0,82]}]},{"pos":[20876,21076],"content":"This property need not be set explicitly, as it is sufficient to set the ensureSecurity parameter of <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property need not be set explicitly, as it is sufficient to set the ensureSecurity parameter of &lt;xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29&gt;.","pos":[0,200],"source":"This property need not be set explicitly, as it is sufficient to set the ensureSecurity parameter of <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29>."}]},{"pos":[21194,21264],"content":"A Boolean value that indicates whether the current instance is secure.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value that indicates whether the current instance is secure.","pos":[0,70]}]},{"pos":[21863,21948],"content":"Extracts the channel URI and the remote well-known object URI from the specified URL.","needQuote":true,"needEscape":true,"nodes":[{"content":"Extracts the channel URI and the remote well-known object URI from the specified URL.","pos":[0,85]}]},{"pos":[21960,22042],"content":"A URI of an object is a value that uniquely identifies a specific object instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A URI of an object is a value that uniquely identifies a specific object instance.","pos":[0,82]}]},{"pos":[22516,22586],"content":"The URL from which to extract the URI of the remote well-known object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL from which to extract the URI of the remote well-known object.","pos":[0,70]}]},{"pos":[22652,22801],"content":"When this method returns, contains a <xref:System.String> that holds the URI of the remote well-known object. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains a <xref:System.String> that holds the URI of the remote well-known object. This parameter is passed uninitialized.","pos":[0,149],"nodes":[{"content":"When this method returns, contains a &lt;xref:System.String&gt; that holds the URI of the remote well-known object.","pos":[0,109],"source":"When this method returns, contains a <xref:System.String> that holds the URI of the remote well-known object."},{"content":"This parameter is passed uninitialized.","pos":[110,149]}]}]},{"pos":[22859,22890],"content":"The URI of the current channel.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URI of the current channel.","pos":[0,31]}]},{"pos":[23479,23541],"content":"Instructs the current channel to start listening for requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"Instructs the current channel to start listening for requests.","pos":[0,62]}]},{"pos":[23554,24116],"content":"It is not necessary to call this method to begin listening on a newly initialized channel.       Use this method to restart listening on a channel after the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening%2A> method has been called.       If your channel uses a dynamically assigned port number, your port number might change when you restart listening.       The `data` parameter can be used to pass a specific initialization state to the channel. If you do not want to pass a specific state to the channel, set `data` to `null`.","needQuote":false,"needEscape":true,"nodes":[{"content":"It is not necessary to call this method to begin listening on a newly initialized channel.","pos":[0,90]},{"content":"Use this method to restart listening on a channel after the &lt;xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening%2A&gt; method has been called.","pos":[97,258],"source":"       Use this method to restart listening on a channel after the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening%2A> method has been called."},{"content":"If your channel uses a dynamically assigned port number, your port number might change when you restart listening.","pos":[265,379]},{"content":"The <ph id=\"ph1\">`data`</ph> parameter can be used to pass a specific initialization state to the channel.","pos":[386,474],"source":"       The `data` parameter can be used to pass a specific initialization state to the channel."},{"content":"If you do not want to pass a specific state to the channel, set <ph id=\"ph1\">`data`</ph> to <ph id=\"ph2\">`null`</ph>.","pos":[475,556],"source":" If you do not want to pass a specific state to the channel, set `data` to `null`."}]},{"pos":[24259,24295],"content":"Optional initialization information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional initialization information.","pos":[0,36]}]},{"pos":[24888,24949],"content":"Instructs the current channel to stop listening for requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"Instructs the current channel to stop listening for requests.","pos":[0,61]}]},{"pos":[24962,25428],"content":"Use this method to stop listening on a channel. To restart listening, use the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening%2A> method.       If your channel uses a dynamically assigned port number, your port number might change when you restart listening.       The `data` parameter can be used to pass a specific initialization state to the channel. If you do not want to pass a specific state to the channel, set `data` to `null`.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this method to stop listening on a channel.","pos":[0,47]},{"content":"To restart listening, use the &lt;xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening%2A&gt; method.","pos":[48,164],"source":" To restart listening, use the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening%2A> method."},{"content":"If your channel uses a dynamically assigned port number, your port number might change when you restart listening.","pos":[171,285]},{"content":"The <ph id=\"ph1\">`data`</ph> parameter can be used to pass a specific initialization state to the channel.","pos":[292,380],"source":"       The `data` parameter can be used to pass a specific initialization state to the channel."},{"content":"If you do not want to pass a specific state to the channel, set <ph id=\"ph1\">`data`</ph> to <ph id=\"ph2\">`null`</ph>.","pos":[381,462],"source":" If you do not want to pass a specific state to the channel, set `data` to `null`."}]},{"pos":[25570,25613],"content":"Optional state information for the channel.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional state information for the channel.","pos":[0,43]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  id: TcpChannel\n  children:\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Int32)\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelData\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelPriority\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink(System.String,System.Object,System.String@)\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.GetUrlsForUri(System.String)\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.IsSecured\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.Parse(System.String,System.String@)\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.StartListening(System.Object)\n  - System.Runtime.Remoting.Channels.Tcp.TcpChannel.StopListening(System.Object)\n  langs:\n  - csharp\n  name: TcpChannel\n  nameWithType: TcpChannel\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  type: Class\n  summary: Provides a channel implementation that uses the TCP protocol to transmit messages.\n  remarks: \"Channels transport messages across remoting boundaries (for example, between computers on application domains). The TcpChannel class is a convenience class combining the functionality of the <xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel> class and the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> class.  \\n  \\n Channels are used by the .NET Framework remoting infrastructure to transport remote calls. When a client makes a call to a remote object, the call is serialized into a message that is sent by a client channel and received by a server channel. It is then deserialized and processed. Any returned values are transmitted by the server channel and received by the client channel.  \\n  \\n To perform additional processing of messages, you can specify implementations of the <xref:System.Runtime.Remoting.Channels.IClientChannelSinkProvider> and <xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider> through which all messages processed by the TcpChannel are passed.  \\n  \\n A TcpChannel object has associated configuration properties that can be set at run time either in a configuration file (by invoking the static <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=fullName> method) or programmatically (by passing a <xref:System.Collections.IDictionary> collection to the <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.%23ctor%2A> constructor). For more information about channel configuration properties, see [Channel and Formatter Configuration Properties](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe).  \\n  \\n> [!NOTE]\\n>  If the server computer is running Windows 95/98/Me, the server TcpChannel cannot be specified as secure.\"\n  example:\n  - \"The following code example shows how to use a TcpChannel to set up a remoting server and its client. The example contains three parts, a server, a client, and a remote object used by the server and the client.  \\n  \\n The following code example shows a server:  \\n  \\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpChannel#1](~/add/codesnippet/csharp/t-system.runtime.remotin_20_1.cs)]\\n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#1](~/add/codesnippet/cpp/t-system.runtime.remotin_20_1.cpp)]  \\n  \\n The following code example shows a client for this server:  \\n  \\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpChannel#10](~/add/codesnippet/csharp/t-system.runtime.remotin_20_2.cs)]\\n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#10](~/add/codesnippet/cpp/t-system.runtime.remotin_20_2.cpp)]  \\n  \\n The following code example shows the remote object used by the server and the client:  \\n  \\n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#20](~/add/codesnippet/cpp/t-system.runtime.remotin_20_3.cpp)]\\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpChannel#20](~/add/codesnippet/csharp/t-system.runtime.remotin_20_3.cs)]\"\n  syntax:\n    content: 'public class TcpChannel : System.Runtime.Remoting.Channels.IChannelReceiver, System.Runtime.Remoting.Channels.IChannelSender, System.Runtime.Remoting.Channels.ISecurableChannel'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Runtime.Remoting.Channels.IChannelReceiver\n  - System.Runtime.Remoting.Channels.IChannelSender\n  - System.Runtime.Remoting.Channels.ISecurableChannel\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor\n  id: '#ctor'\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: TcpChannel()\n  nameWithType: TcpChannel.TcpChannel()\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.TcpChannel()\n  type: Constructor\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"></xref> class, activating only a client channel, and not a server channel.\n  remarks: The default constructor initializes all fields to their default values. If the default constructor is used, the channel functions only as a client channel, and does not listen on any ports.\n  example:\n  - \"The following code example shows how to use this constructor.  \\n  \\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpChannel#11](~/add/codesnippet/csharp/m-system.runtime.remotin_33_1.cs)]\\n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#11](~/add/codesnippet/cpp/m-system.runtime.remotin_33_1.cpp)]\"\n  syntax:\n    content: public TcpChannel ();\n    parameters: []\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: TcpChannel(Int32)\n  nameWithType: TcpChannel.TcpChannel(Int32)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.TcpChannel(Int32)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"></xref> class with a server channel that listens on the specified port.\n  remarks: \"To request that the remoting system choose an open port on your behalf, specify port 0 (zero). This will create a <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> instance to listen for requests on the dynamically assigned port. This is typically done on the client to make sure that a <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> is listening for callback methods.  \\n  \\n If 0 is passed to the constructor the <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> is instantiated to use a free port.\"\n  example:\n  - \"The following code example demonstrates using this method. To request that an available port be dynamically assigned, set the `port` parameter to zero.  \\n  \\n [!code-cpp[RemotingConfiguration.ServerActivation#2](~/add/codesnippet/cpp/m-system.runtime.remotin_94_1.cpp)]\\n [!code-cs[RemotingConfiguration.ServerActivation#2](~/add/codesnippet/csharp/m-system.runtime.remotin_94_1.cs)]\\n [!code-vb[RemotingConfiguration.ServerActivation#2](~/add/codesnippet/visualbasic/m-system.runtime.remotin_94_1.vb)]\"\n  syntax:\n    content: public TcpChannel (int port);\n    parameters:\n    - id: port\n      type: System.Int32\n      description: The port on which the server channel listens.\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)\n  id: '#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)'\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: TcpChannel(IDictionary,IClientChannelSinkProvider,IServerChannelSinkProvider)\n  nameWithType: TcpChannel.TcpChannel(IDictionary,IClientChannelSinkProvider,IServerChannelSinkProvider)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.TcpChannel(IDictionary,IClientChannelSinkProvider,IServerChannelSinkProvider)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"></xref> class with the specified configuration properties and sinks.\n  remarks: \"For more information about channel configuration properties, see [Channel and Formatter Configuration Properties](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe).  \\n  \\n> [!NOTE]\\n>  If the server computer is running Windows 95/98/Me, the server <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> cannot be specified as secure.  \\n  \\n Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object. Channel sinks are also responsible for transporting messages between the client and the server. Channel sinks are linked together in a chain, and all channel messages flow through this chain of sinks before the message is finally serialized and transported. If you do not require sink functionality, set the `clientSinkProvider` and `serverSinkProvider` parameters to `null`.\"\n  example:\n  - \"The following code example shows how to use this constructor.  \\n  \\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpChannel2#1](~/add/codesnippet/csharp/a59b945a-521d-44ce-a81e-_1.cs)]\\n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel2#1](~/add/codesnippet/cpp/a59b945a-521d-44ce-a81e-_1.cpp)]\"\n  syntax:\n    content: public TcpChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IClientChannelSinkProvider clientSinkProvider, System.Runtime.Remoting.Channels.IServerChannelSinkProvider serverSinkProvider);\n    parameters:\n    - id: properties\n      type: System.Collections.IDictionary\n      description: A <xref:System.Collections.IDictionary> collection that specifies values for configuration properties to be used by the client and server channels.\n    - id: clientSinkProvider\n      type: System.Runtime.Remoting.Channels.IClientChannelSinkProvider\n      description: The <xref href=\"System.Runtime.Remoting.Channels.IClientChannelSinkProvider\"></xref> implementation to be used by the client channel.\n    - id: serverSinkProvider\n      type: System.Runtime.Remoting.Channels.IServerChannelSinkProvider\n      description: The <xref href=\"System.Runtime.Remoting.Channels.IServerChannelSinkProvider\"></xref> implementation to be used by the server channel.\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A provided channel property was improperly formatted.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelData\n  id: ChannelData\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: ChannelData\n  nameWithType: TcpChannel.ChannelData\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelData\n  type: Property\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Gets the channel-specific data.\n  remarks: Although returned as an instance of <xref:System.Object?displayProperty=fullName>, the value of this property can be cast to an instance of <xref:System.Runtime.Remoting.Channels.ChannelDataStore> describing the channel to which the <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel> object listens.\n  example:\n  - \"The following code example shows how to use this property.  \\n  \\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpChannel#5](~/add/codesnippet/csharp/p-system.runtime.remotin_2_1.cs)]\\n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#5](~/add/codesnippet/cpp/p-system.runtime.remotin_2_1.cpp)]\"\n  syntax:\n    content: public object ChannelData { get; }\n    return:\n      type: System.Object\n      description: A <xref href=\"System.Runtime.Remoting.Channels.ChannelDataStore\"></xref> instance that contains channel-specific data.\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName\n  id: ChannelName\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: ChannelName\n  nameWithType: TcpChannel.ChannelName\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName\n  type: Property\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Gets the name of the current channel.\n  remarks: Every registered channel has a unique name. The name is used to retrieve a specific channel when calling <xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A>. To set the ChannelName property, assign the value to the \"name\" indexed property in the dictionary passed to the <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.%23ctor%28System.Collections.IDictionary%2CSystem.Runtime.Remoting.Channels.IClientChannelSinkProvider%2CSystem.Runtime.Remoting.Channels.IServerChannelSinkProvider%29> constructor.\n  example:\n  - \"The following code example shows how to use this property.  \\n  \\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpChannel#3](~/add/codesnippet/csharp/p-system.runtime.remotin_65_1.cs)]\\n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#3](~/add/codesnippet/cpp/p-system.runtime.remotin_65_1.cpp)]\"\n  syntax:\n    content: public string ChannelName { get; }\n    return:\n      type: System.String\n      description: A <xref:System.String> that contains the name of the channel.\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelPriority\n  id: ChannelPriority\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: ChannelPriority\n  nameWithType: TcpChannel.ChannelPriority\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelPriority\n  type: Property\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Gets the priority of the current channel.\n  remarks: ''\n  example:\n  - \"The following code example shows how to use this property.  \\n  \\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpChannel#4](~/add/codesnippet/csharp/p-system.runtime.remotin_50_1.cs)]\\n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#4](~/add/codesnippet/cpp/p-system.runtime.remotin_50_1.cpp)]\"\n  syntax:\n    content: public int ChannelPriority { get; }\n    return:\n      type: System.Int32\n      description: An integer that represents the priority assigned to the channel.\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelPriority*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink(System.String,System.Object,System.String@)\n  id: CreateMessageSink(System.String,System.Object,System.String@)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: CreateMessageSink(String,Object,String)\n  nameWithType: TcpChannel.CreateMessageSink(String,Object,String)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink(String,Object,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Returns a channel message sink that delivers messages to the specified URL or channel data object.\n  remarks: \"The CreateMessageSink method returns a channel message sink that delivers messages to either the specified URL or channel data object. If the `uri` parameter is `null`, `remoteChannelData` is used as a target for the sink. Either the `url` or `remoteChannelData` parameters can be `null`, but not both.  \\n  \\n Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object. Channel sinks are linked together in a chain of `ChannelSinkProviders` and all channel messages flow through this chain of sinks before the message is finally serialized and transported.\"\n  example:\n  - \"The following code example shows how to use this method.  \\n  \\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpChannel#12](~/add/codesnippet/csharp/73bdeed3-70ff-41b4-8d48-_1.cs)]\\n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#12](~/add/codesnippet/cpp/73bdeed3-70ff-41b4-8d48-_1.cpp)]\"\n  syntax:\n    content: public System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink (string url, object remoteChannelData, out string objectURI);\n    parameters:\n    - id: url\n      type: System.String\n      description: The URL to which the new sink should deliver messages. Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    - id: remoteChannelData\n      type: System.Object\n      description: The channel data object of the remote host to which the new sink should deliver messages. Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    - id: objectURI\n      type: System.String\n      description: When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.\n    return:\n      type: System.Runtime.Remoting.Messaging.IMessageSink\n      description: A channel message sink that delivers messages to the specified URL or channel data object.\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.GetUrlsForUri(System.String)\n  id: GetUrlsForUri(System.String)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: GetUrlsForUri(String)\n  nameWithType: TcpChannel.GetUrlsForUri(String)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.GetUrlsForUri(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Returns an array of all the URLs for an object with the specified URI, hosted on the current <xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"></xref>.\n  remarks: This method is used by <xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=fullName>.\n  example:\n  - \"The following code example shows how to use this method.  \\n  \\n [!code-cs[TcpChannel.GetUrlsForUri#1](~/add/codesnippet/csharp/m-system.runtime.remotin_3_1.cs)]\\n [!code-vb[TcpChannel.GetUrlsForUri#1](~/add/codesnippet/visualbasic/m-system.runtime.remotin_3_1.vb)]\\n [!code-cpp[TcpChannel.GetUrlsForUri#1](~/add/codesnippet/cpp/m-system.runtime.remotin_3_1.cpp)]\"\n  syntax:\n    content: public string[] GetUrlsForUri (string objectURI);\n    parameters:\n    - id: objectURI\n      type: System.String\n      description: The URI of the object for which URLs are required.\n    return:\n      type: System.String[]\n      description: An array of the URLs for an object with the specified URI, hosted on the current <xref href=\"System.Runtime.Remoting.Channels.Tcp.TcpChannel\"></xref>.\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.GetUrlsForUri*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.IsSecured\n  id: IsSecured\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: IsSecured\n  nameWithType: TcpChannel.IsSecured\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.IsSecured\n  type: Property\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Gets or sets a Boolean value that indicates whether the current channel is secure.\n  remarks: This property need not be set explicitly, as it is sufficient to set the ensureSecurity parameter of <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29>.\n  syntax:\n    content: public bool IsSecured { get; set; }\n    return:\n      type: System.Boolean\n      description: A Boolean value that indicates whether the current instance is secure.\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.IsSecured*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.Parse(System.String,System.String@)\n  id: Parse(System.String,System.String@)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: Parse(String,String)\n  nameWithType: TcpChannel.Parse(String,String)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.Parse(String,String)\n  type: Method\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Extracts the channel URI and the remote well-known object URI from the specified URL.\n  remarks: A URI of an object is a value that uniquely identifies a specific object instance.\n  example:\n  - \"The following code example shows how to use this method.  \\n  \\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpChannel#6](~/add/codesnippet/csharp/2b3d57e7-01ce-48be-88d4-_1.cs)]\\n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#6](~/add/codesnippet/cpp/2b3d57e7-01ce-48be-88d4-_1.cpp)]\"\n  syntax:\n    content: public string Parse (string url, out string objectURI);\n    parameters:\n    - id: url\n      type: System.String\n      description: The URL from which to extract the URI of the remote well-known object.\n    - id: objectURI\n      type: System.String\n      description: When this method returns, contains a <xref:System.String> that holds the URI of the remote well-known object. This parameter is passed uninitialized.\n    return:\n      type: System.String\n      description: The URI of the current channel.\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.Parse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StartListening(System.Object)\n  id: StartListening(System.Object)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: StartListening(Object)\n  nameWithType: TcpChannel.StartListening(Object)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StartListening(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Instructs the current channel to start listening for requests.\n  remarks: \"It is not necessary to call this method to begin listening on a newly initialized channel.  \\n  \\n Use this method to restart listening on a channel after the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening%2A> method has been called.  \\n  \\n If your channel uses a dynamically assigned port number, your port number might change when you restart listening.  \\n  \\n The `data` parameter can be used to pass a specific initialization state to the channel. If you do not want to pass a specific state to the channel, set `data` to `null`.\"\n  syntax:\n    content: public void StartListening (object data);\n    parameters:\n    - id: data\n      type: System.Object\n      description: Optional initialization information.\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StartListening*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StopListening(System.Object)\n  id: StopListening(System.Object)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  langs:\n  - csharp\n  name: StopListening(Object)\n  nameWithType: TcpChannel.StopListening(Object)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StopListening(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Remoting\n  namespace: System.Runtime.Remoting.Channels.Tcp\n  summary: Instructs the current channel to stop listening for requests.\n  remarks: \"Use this method to stop listening on a channel. To restart listening, use the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening%2A> method.  \\n  \\n If your channel uses a dynamically assigned port number, your port number might change when you restart listening.  \\n  \\n The `data` parameter can be used to pass a specific initialization state to the channel. If you do not want to pass a specific state to the channel, set `data` to `null`.\"\n  syntax:\n    content: public void StopListening (object data);\n    parameters:\n    - id: data\n      type: System.Object\n      description: Optional state information for the channel.\n  overload: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StopListening*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: TcpChannel()\n  nameWithType: TcpChannel.TcpChannel()\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.TcpChannel()\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Int32)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: TcpChannel(Int32)\n  nameWithType: TcpChannel.TcpChannel(Int32)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.TcpChannel(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: TcpChannel(IDictionary,IClientChannelSinkProvider,IServerChannelSinkProvider)\n  nameWithType: TcpChannel.TcpChannel(IDictionary,IClientChannelSinkProvider,IServerChannelSinkProvider)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.TcpChannel(IDictionary,IClientChannelSinkProvider,IServerChannelSinkProvider)\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: true\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.Runtime.Remoting.Channels.IClientChannelSinkProvider\n  parent: System.Runtime.Remoting.Channels\n  isExternal: false\n  name: IClientChannelSinkProvider\n  nameWithType: IClientChannelSinkProvider\n  fullName: System.Runtime.Remoting.Channels.IClientChannelSinkProvider\n- uid: System.Runtime.Remoting.Channels.IServerChannelSinkProvider\n  parent: System.Runtime.Remoting.Channels\n  isExternal: false\n  name: IServerChannelSinkProvider\n  nameWithType: IServerChannelSinkProvider\n  fullName: System.Runtime.Remoting.Channels.IServerChannelSinkProvider\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelData\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: ChannelData\n  nameWithType: TcpChannel.ChannelData\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelData\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: ChannelName\n  nameWithType: TcpChannel.ChannelName\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelPriority\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: ChannelPriority\n  nameWithType: TcpChannel.ChannelPriority\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelPriority\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink(System.String,System.Object,System.String@)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: CreateMessageSink(String,Object,String)\n  nameWithType: TcpChannel.CreateMessageSink(String,Object,String)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink(String,Object,String)\n- uid: System.Runtime.Remoting.Messaging.IMessageSink\n  parent: System.Runtime.Remoting.Messaging\n  isExternal: false\n  name: IMessageSink\n  nameWithType: IMessageSink\n  fullName: System.Runtime.Remoting.Messaging.IMessageSink\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.GetUrlsForUri(System.String)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: GetUrlsForUri(String)\n  nameWithType: TcpChannel.GetUrlsForUri(String)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.GetUrlsForUri(String)\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.IsSecured\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: IsSecured\n  nameWithType: TcpChannel.IsSecured\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.IsSecured\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.Parse(System.String,System.String@)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: Parse(String,String)\n  nameWithType: TcpChannel.Parse(String,String)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.Parse(String,String)\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StartListening(System.Object)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: StartListening(Object)\n  nameWithType: TcpChannel.StartListening(Object)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StartListening(Object)\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StopListening(System.Object)\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: StopListening(Object)\n  nameWithType: TcpChannel.StopListening(Object)\n  fullName: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StopListening(Object)\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor*\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: TcpChannel\n  nameWithType: TcpChannel.TcpChannel\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelData*\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: ChannelData\n  nameWithType: TcpChannel.ChannelData\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName*\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: ChannelName\n  nameWithType: TcpChannel.ChannelName\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelPriority*\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: ChannelPriority\n  nameWithType: TcpChannel.ChannelPriority\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink*\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: CreateMessageSink\n  nameWithType: TcpChannel.CreateMessageSink\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.GetUrlsForUri*\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: GetUrlsForUri\n  nameWithType: TcpChannel.GetUrlsForUri\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.IsSecured*\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: IsSecured\n  nameWithType: TcpChannel.IsSecured\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.Parse*\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: Parse\n  nameWithType: TcpChannel.Parse\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StartListening*\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: StartListening\n  nameWithType: TcpChannel.StartListening\n- uid: System.Runtime.Remoting.Channels.Tcp.TcpChannel.StopListening*\n  parent: System.Runtime.Remoting.Channels.Tcp.TcpChannel\n  isExternal: false\n  name: StopListening\n  nameWithType: TcpChannel.StopListening\n"}