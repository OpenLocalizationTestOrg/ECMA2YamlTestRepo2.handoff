{"nodes":[{"pos":[5100,5170],"content":"Creates and controls a thread, sets its priority, and gets its status.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and controls a thread, sets its priority, and gets its status.","pos":[0,70]}]},{"pos":[5183,17230],"content":"When a process starts, the common language runtime automatically creates a single foreground thread to execute application code. Along with this main foreground thread, a process can create one or more threads to execute a portion of the program code associated with the process. These threads can execute either in the foreground or in the background. In addition, you can use the <xref:System.Threading.ThreadPool> class to execute code on worker threads that are managed by the common language runtime.       In this section       [Starting a thread](#Starting)     [Retrieving Thread objects](#Retrieving)     [Foreground and background threads](#Foreground)     [Culture and threads](#Culture)     [Getting information about and controlling threads](#Properties)     [Accessing the source code for the Thread class](#Source)      <a name=\"Starting\"></a>    ## Starting a thread    You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor. You then call the <xref:System.Threading.Thread.Start%2A> method to begin execution.       The Thread constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:      -   If the method has no arguments, you pass a <xref:System.Threading.ThreadStart> delegate to  the constructor. It has the signature:          ```c#       public delegate void ThreadStart()       ```          ```vb       Public Delegate Sub ThreadStart()       ```           The following example creates and starts a thread that executes the `ExecuteInForeground` method. The method displays  information about some thread properties, then executes a loop in which it pauses for half a second and displays the elapsed number of seconds. When the thread has executed for at least five seconds, the loop ends and the thread terminates execution.           [!code-cs[System.Threading.Thread#1](~/add/codesnippet/csharp/t-system.threading.thread_1.cs)]      [!code-vb[System.Threading.Thread#1](~/add/codesnippet/visualbasic/t-system.threading.thread_1.vb)]      -   If the method has an argument, you pass a <xref:System.Threading.ParameterizedThreadStart> delegate to the constructor. It has the signature:          ```c#       public delegate void ParameterizedThreadStart(object obj)       ```          ```vb       Public Delegate Sub ParameterizedThreadStart(obj As Object)       ```           The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type.           The following example is identical to the previous one, except that it calls the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor. This version of the `ExecuteInForeground` method has a single parameter that represents the approximate number of milliseconds the loop is to execute.           [!code-cs[System.Threading.Thread#2](~/add/codesnippet/csharp/t-system.threading.thread_2.cs)]      [!code-vb[System.Threading.Thread#2](~/add/codesnippet/visualbasic/t-system.threading.thread_2.vb)]       It is not necessary to retain a reference to a Thread object once you have started the thread. The thread continues to execute until the thread procedure is complete.      <a name=\"Retrieving\"></a>    ## Retrieving Thread objects    You can use the static (`Shared` in Visual Basic)  <xref:System.Threading.Thread.CurrentThread%2A> property to retrieve a reference to the currently executing thread from the code that the thread is executing. The following example uses the <xref:System.Threading.Thread.CurrentThread%2A> property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread.       [!code-cs[System.Threading.Thread#4](~/add/codesnippet/csharp/t-system.threading.thread_3.cs)]  [!code-vb[System.Threading.Thread#4](~/add/codesnippet/visualbasic/t-system.threading.thread_3.vb)]      <a name=\"Foreground\"></a>    ## Foreground and background threads    Instances of the Thread class represent either foreground threads or background threads. Background threads are identical to foreground threads with one exception: a background thread does not keep a process running if all foreground threads have terminated. Once all foreground threads have been stopped, the runtime stops all background threads and shuts down.       By default, the following threads execute in the foreground:      -   The main application thread.      -   All threads created by calling a Thread class constructor.       The following threads execute in the background by default:      -   Thread pool threads, which are a pool of worker threads maintained by the runtime.  You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.          > [!NOTE]     >  Task-based asynchronous operations automatically execute on thread pool threads. Task-based asynchronous operations use the <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> classes to implement the [task-based asynchronous pattern](~/add/includes/ajax-current-ext-md.md).      -   All threads that enter the managed execution environment from unmanaged code.       You can change a thread to execute in the background by setting the <xref:System.Threading.Thread.IsBackground%2A> property at any time.  Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections.       The following example illustrates the difference between foreground and background threads. It is like the first example in the [Starting a thread](#Starting) section, except that it sets the thread to execute in the background before starting it. As the output shows, the loop is interrupted before it executes for five seconds.       [!code-cs[System.Threading.Thread#3](~/add/codesnippet/csharp/t-system.threading.thread_4.cs)]  [!code-vb[System.Threading.Thread#3](~/add/codesnippet/visualbasic/t-system.threading.thread_4.vb)]      <a name=\"Culture\"></a>    ## Culture and threads    Each thread has a culture, represented by the <xref:System.Threading.Thread.CurrentCulture%2A> property, and a UI culture, represented by the <xref:System.Threading.Thread.CurrentUICulture%2A> property.  The current culture supports such culture-sensitive  operations as parsing and formatting, string comparison and sorting, and also controls the writing system and calendar used by a thread. The current UI culture provides for culture-sensitive retrieval of resources in resource files.       When a new thread is instantiated, its culture and UI culture are defined by the current system culture and UI culture, and not by the culture and UI culture of the thread from which the new thread is created. This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor from the primary thread is English (United States), and not French (France). For more information, see the \"Culture and threads\" section of the <xref:System.Globalization.CultureInfo> class topic.      > [!IMPORTANT] >  This is not true of threads that execute asynchronous operations for apps that target the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)] and later versions, In this case, the culture and UI culture is part of an asynchronous operations' context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched. For more information, see the \"Culture and task-based asynchronous operations\" section of the <xref:System.Globalization.CultureInfo> class topic.       You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:      -   You can pass a <xref:System.Globalization.CultureInfo> object that represents that culture to the <xref:System.Threading.ParameterizedThreadStart> delegate or the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=fullName> method.      -   For apps running on the [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)] and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=fullName> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=fullName> properties. Note that this is a per-application domain setting.       For more information and examples, see the \"Culture and threads\" section of the <xref:System.Globalization.CultureInfo> class topic.      <a name=\"Properties\"></a>    ## Getting information about and controlling threads    You can retrieve a number of property values that provide information about a thread. In some cases, you can also set these property values to control the operation of the thread. These thread properties include:      -   A name. <xref:System.Threading.Thread.Name%2A> is a write-once property that you can use to identify a thread.  Its default value is `null`.      -   A hash code, which you can retrieve by calling the <xref:System.Threading.Thread.GetHashCode%2A> method. The hash code can be used to uniquely identify a thread; for the lifetime of your thread, its hash code will not collide with the value from any other thread, regardless of the application domain from which you obtain the value.      -   A thread ID. The value of the read-only <xref:System.Threading.Thread.ManagedThreadId%2A> property is assigned by the runtime and uniquely identifies a thread within its process.          > [!NOTE]     >  An operating-system [ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads. Specifically, a sophisticated host can use the [CLR Hosting API](https://msdn.microsoft.com/library/ms404385.aspx) to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads.      -   The thread's current state. For the duration of its existence, a thread is always in one or more of the states defined by the <xref:System.Threading.ThreadState> property.      -   A scheduling priority level, which is defined by the <xref:System.Threading.ThreadPriority> property. Although you can set this value to request a thread's priority, it is not guaranteed to be honored by the operating system.      -   The read-only <xref:System.Threading.Thread.IsThreadPoolThread%2A> property, which indicates whether a thread is  a thread pool thread.      -   The <xref:System.Threading.Thread.IsBackground%2A> property. For more information, see the [Foreground and background threads](#Foreground) section.      <a name=\"Source\"></a>    ## Accessing the source code for the Thread class    To view the .NET Framework source code for the Thread class, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/thread.cs#3980e012bae82e96). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","needQuote":false,"needEscape":true,"nodes":[{"content":"When a process starts, the common language runtime automatically creates a single foreground thread to execute application code.","pos":[0,128]},{"content":"Along with this main foreground thread, a process can create one or more threads to execute a portion of the program code associated with the process.","pos":[129,279]},{"content":"These threads can execute either in the foreground or in the background.","pos":[280,352]},{"content":"In addition, you can use the &lt;xref:System.Threading.ThreadPool&gt; class to execute code on worker threads that are managed by the common language runtime.","pos":[353,505],"source":" In addition, you can use the <xref:System.Threading.ThreadPool> class to execute code on worker threads that are managed by the common language runtime."},{"content":"In this section       <bpt id=\"p1\">[</bpt>Starting a thread<ept id=\"p1\">](#Starting)</ept>     <bpt id=\"p2\">[</bpt>Retrieving Thread objects<ept id=\"p2\">](#Retrieving)</ept>     <bpt id=\"p3\">[</bpt>Foreground and background threads<ept id=\"p3\">](#Foreground)</ept>     <bpt id=\"p4\">[</bpt>Culture and threads<ept id=\"p4\">](#Culture)</ept>     <bpt id=\"p5\">[</bpt>Getting information about and controlling threads<ept id=\"p5\">](#Properties)</ept>     <bpt id=\"p6\">[</bpt>Accessing the source code for the Thread class<ept id=\"p6\">](#Source)</ept>      <bpt id=\"p7\">&lt;a name=\"Starting\"&gt;</bpt><ept id=\"p7\">&lt;/a&gt;</ept>    ## Starting a thread    You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor.","pos":[512,1006],"source":"       In this section       [Starting a thread](#Starting)     [Retrieving Thread objects](#Retrieving)     [Foreground and background threads](#Foreground)     [Culture and threads](#Culture)     [Getting information about and controlling threads](#Properties)     [Accessing the source code for the Thread class](#Source)      <a name=\"Starting\"></a>    ## Starting a thread    You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor."},{"content":"You then call the &lt;xref:System.Threading.Thread.Start%2A&gt; method to begin execution.","pos":[1007,1091],"source":" You then call the <xref:System.Threading.Thread.Start%2A> method to begin execution."},{"content":"The Thread constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:      -   If the method has no arguments, you pass a &lt;xref:System.Threading.ThreadStart&gt; delegate to  the constructor.","pos":[1098,1354],"source":"       The Thread constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:      -   If the method has no arguments, you pass a <xref:System.Threading.ThreadStart> delegate to  the constructor."},{"content":"It has the signature:          <ph id=\"ph1\">```c#       public delegate void ThreadStart()       ```</ph>          <ph id=\"ph2\">```vb       Public Delegate Sub ThreadStart()       ```</ph>           The following example creates and starts a thread that executes the <ph id=\"ph3\">`ExecuteInForeground`</ph> method.","pos":[1355,1615],"source":" It has the signature:          ```c#       public delegate void ThreadStart()       ```          ```vb       Public Delegate Sub ThreadStart()       ```           The following example creates and starts a thread that executes the `ExecuteInForeground` method."},{"content":"The method displays  information about some thread properties, then executes a loop in which it pauses for half a second and displays the elapsed number of seconds.","pos":[1616,1780]},{"content":"When the thread has executed for at least five seconds, the loop ends and the thread terminates execution.","pos":[1781,1887]},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Threading.Thread#1<ept id=\"p2\">](~/add/codesnippet/csharp/t-system.threading.thread_1.cs)</ept><ept id=\"p1\">]</ept>      <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Thread#1<ept id=\"p4\">](~/add/codesnippet/visualbasic/t-system.threading.thread_1.vb)</ept><ept id=\"p3\">]</ept>      -   If the method has an argument, you pass a &lt;xref:System.Threading.ParameterizedThreadStart&gt; delegate to the constructor.","pos":[1898,2226],"source":"[!code-cs[System.Threading.Thread#1](~/add/codesnippet/csharp/t-system.threading.thread_1.cs)]      [!code-vb[System.Threading.Thread#1](~/add/codesnippet/visualbasic/t-system.threading.thread_1.vb)]      -   If the method has an argument, you pass a <xref:System.Threading.ParameterizedThreadStart> delegate to the constructor."},{"content":"It has the signature:          <ph id=\"ph1\">```c#       public delegate void ParameterizedThreadStart(object obj)       ```</ph>          <ph id=\"ph2\">```vb       Public Delegate Sub ParameterizedThreadStart(obj As Object)       ```</ph>           The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type.","pos":[2227,2564],"source":" It has the signature:          ```c#       public delegate void ParameterizedThreadStart(object obj)       ```          ```vb       Public Delegate Sub ParameterizedThreadStart(obj As Object)       ```           The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type."},{"content":"The following example is identical to the previous one, except that it calls the &lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29&gt; constructor.","pos":[2575,2754],"source":"           The following example is identical to the previous one, except that it calls the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor."},{"content":"This version of the <ph id=\"ph1\">`ExecuteInForeground`</ph> method has a single parameter that represents the approximate number of milliseconds the loop is to execute.","pos":[2755,2905],"source":" This version of the `ExecuteInForeground` method has a single parameter that represents the approximate number of milliseconds the loop is to execute."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Threading.Thread#2<ept id=\"p2\">](~/add/codesnippet/csharp/t-system.threading.thread_2.cs)</ept><ept id=\"p1\">]</ept>      <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Thread#2<ept id=\"p4\">](~/add/codesnippet/visualbasic/t-system.threading.thread_2.vb)</ept><ept id=\"p3\">]</ept>       It is not necessary to retain a reference to a Thread object once you have started the thread.","pos":[2916,3216],"source":"[!code-cs[System.Threading.Thread#2](~/add/codesnippet/csharp/t-system.threading.thread_2.cs)]      [!code-vb[System.Threading.Thread#2](~/add/codesnippet/visualbasic/t-system.threading.thread_2.vb)]       It is not necessary to retain a reference to a Thread object once you have started the thread."},{"content":"The thread continues to execute until the thread procedure is complete.","pos":[3217,3288]},{"content":"<bpt id=\"p1\">&lt;a name=\"Retrieving\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Retrieving Thread objects    You can use the static (<ph id=\"ph1\">`Shared`</ph> in Visual Basic)  &lt;xref:System.Threading.Thread.CurrentThread%2A&gt; property to retrieve a reference to the currently executing thread from the code that the thread is executing.","pos":[3294,3564],"source":"<a name=\"Retrieving\"></a>    ## Retrieving Thread objects    You can use the static (`Shared` in Visual Basic)  <xref:System.Threading.Thread.CurrentThread%2A> property to retrieve a reference to the currently executing thread from the code that the thread is executing."},{"content":"The following example uses the &lt;xref:System.Threading.Thread.CurrentThread%2A&gt; property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread.","pos":[3565,3784],"source":" The following example uses the <xref:System.Threading.Thread.CurrentThread%2A> property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Threading.Thread#4<ept id=\"p2\">](~/add/codesnippet/csharp/t-system.threading.thread_3.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Thread#4<ept id=\"p4\">](~/add/codesnippet/visualbasic/t-system.threading.thread_3.vb)</ept><ept id=\"p3\">]</ept>      <bpt id=\"p5\">&lt;a name=\"Foreground\"&gt;</bpt><ept id=\"p5\">&lt;/a&gt;</ept>    ## Foreground and background threads    Instances of the Thread class represent either foreground threads or background threads.","pos":[3791,4149],"source":"[!code-cs[System.Threading.Thread#4](~/add/codesnippet/csharp/t-system.threading.thread_3.cs)]  [!code-vb[System.Threading.Thread#4](~/add/codesnippet/visualbasic/t-system.threading.thread_3.vb)]      <a name=\"Foreground\"></a>    ## Foreground and background threads    Instances of the Thread class represent either foreground threads or background threads."},{"content":"Background threads are identical to foreground threads with one exception: a background thread does not keep a process running if all foreground threads have terminated.","pos":[4150,4319]},{"content":"Once all foreground threads have been stopped, the runtime stops all background threads and shuts down.","pos":[4320,4423]},{"content":"By default, the following threads execute in the foreground:      -   The main application thread.","pos":[4430,4528]},{"content":"-   All threads created by calling a Thread class constructor.","pos":[4534,4596]},{"content":"The following threads execute in the background by default:      -   Thread pool threads, which are a pool of worker threads maintained by the runtime.","pos":[4603,4754]},{"content":"You can configure the thread pool and schedule work on thread pool threads by using the &lt;xref:System.Threading.ThreadPool&gt; class.","pos":[4756,4885],"source":"  You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  Task-based asynchronous operations automatically execute on thread pool threads.","pos":[4895,4992],"source":"          > [!NOTE]     >  Task-based asynchronous operations automatically execute on thread pool threads."},{"content":"Task-based asynchronous operations use the &lt;xref:System.Threading.Tasks.Task&gt; and &lt;xref:System.Threading.Tasks.Task%601&gt; classes to implement the <bpt id=\"p1\">[</bpt>task-based asynchronous pattern<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[4993,5212],"source":" Task-based asynchronous operations use the <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> classes to implement the [task-based asynchronous pattern](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   All threads that enter the managed execution environment from unmanaged code.","pos":[5218,5299]},{"content":"You can change a thread to execute in the background by setting the &lt;xref:System.Threading.Thread.IsBackground%2A&gt; property at any time.","pos":[5306,5442],"source":"       You can change a thread to execute in the background by setting the <xref:System.Threading.Thread.IsBackground%2A> property at any time."},{"content":"Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections.","pos":[5444,5677]},{"content":"The following example illustrates the difference between foreground and background threads.","pos":[5684,5775]},{"content":"It is like the first example in the <bpt id=\"p1\">[</bpt>Starting a thread<ept id=\"p1\">](#Starting)</ept> section, except that it sets the thread to execute in the background before starting it.","pos":[5776,5931],"source":" It is like the first example in the [Starting a thread](#Starting) section, except that it sets the thread to execute in the background before starting it."},{"content":"As the output shows, the loop is interrupted before it executes for five seconds.","pos":[5932,6013]},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Threading.Thread#3<ept id=\"p2\">](~/add/codesnippet/csharp/t-system.threading.thread_4.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Thread#3<ept id=\"p4\">](~/add/codesnippet/visualbasic/t-system.threading.thread_4.vb)</ept><ept id=\"p3\">]</ept>      <bpt id=\"p5\">&lt;a name=\"Culture\"&gt;</bpt><ept id=\"p5\">&lt;/a&gt;</ept>    ## Culture and threads    Each thread has a culture, represented by the &lt;xref:System.Threading.Thread.CurrentCulture%2A&gt; property, and a UI culture, represented by the &lt;xref:System.Threading.Thread.CurrentUICulture%2A&gt; property.","pos":[6020,6475],"source":"[!code-cs[System.Threading.Thread#3](~/add/codesnippet/csharp/t-system.threading.thread_4.cs)]  [!code-vb[System.Threading.Thread#3](~/add/codesnippet/visualbasic/t-system.threading.thread_4.vb)]      <a name=\"Culture\"></a>    ## Culture and threads    Each thread has a culture, represented by the <xref:System.Threading.Thread.CurrentCulture%2A> property, and a UI culture, represented by the <xref:System.Threading.Thread.CurrentUICulture%2A> property."},{"content":"The current culture supports such culture-sensitive  operations as parsing and formatting, string comparison and sorting, and also controls the writing system and calendar used by a thread.","pos":[6477,6666]},{"content":"The current UI culture provides for culture-sensitive retrieval of resources in resource files.","pos":[6667,6762]},{"content":"When a new thread is instantiated, its culture and UI culture are defined by the current system culture and UI culture, and not by the culture and UI culture of the thread from which the new thread is created.","pos":[6769,6978]},{"content":"This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   &lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29&gt; constructor from the primary thread is English (United States), and not French (France).","pos":[6979,7371],"source":" This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor from the primary thread is English (United States), and not French (France)."},{"content":"For more information, see the \"Culture and threads\" section of the &lt;xref:System.Globalization.CultureInfo&gt; class topic.","pos":[7372,7491],"source":" For more information, see the \"Culture and threads\" section of the <xref:System.Globalization.CultureInfo> class topic."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This is not true of threads that execute asynchronous operations for apps that target the <ph id=\"ph2\">[!INCLUDE[net_v46](~/add/includes/net-v46-md.md)]</ph> and later versions, In this case, the culture and UI culture is part of an asynchronous operations' context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched.","pos":[7497,7931],"source":"      > [!IMPORTANT] >  This is not true of threads that execute asynchronous operations for apps that target the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)] and later versions, In this case, the culture and UI culture is part of an asynchronous operations' context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched."},{"content":"For more information, see the \"Culture and task-based asynchronous operations\" section of the &lt;xref:System.Globalization.CultureInfo&gt; class topic.","pos":[7932,8078],"source":" For more information, see the \"Culture and task-based asynchronous operations\" section of the <xref:System.Globalization.CultureInfo> class topic."},{"content":"You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:      -   You can pass a &lt;xref:System.Globalization.CultureInfo&gt; object that represents that culture to the &lt;xref:System.Threading.ParameterizedThreadStart&gt; delegate or the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=fullName&gt; method.","pos":[8085,8529],"source":"       You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:      -   You can pass a <xref:System.Globalization.CultureInfo> object that represents that culture to the <xref:System.Threading.ParameterizedThreadStart> delegate or the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=fullName> method."},{"content":"-   For apps running on the <ph id=\"ph1\">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the &lt;xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=fullName&gt; and &lt;xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=fullName&gt; properties.","pos":[8535,8992],"source":"      -   For apps running on the [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)] and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=fullName> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=fullName> properties."},{"content":"Note that this is a per-application domain setting.","pos":[8993,9044]},{"content":"For more information and examples, see the \"Culture and threads\" section of the &lt;xref:System.Globalization.CultureInfo&gt; class topic.","pos":[9051,9183],"source":"       For more information and examples, see the \"Culture and threads\" section of the <xref:System.Globalization.CultureInfo> class topic."},{"content":"<bpt id=\"p1\">&lt;a name=\"Properties\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Getting information about and controlling threads    You can retrieve a number of property values that provide information about a thread.","pos":[9189,9359],"source":"<a name=\"Properties\"></a>    ## Getting information about and controlling threads    You can retrieve a number of property values that provide information about a thread."},{"content":"In some cases, you can also set these property values to control the operation of the thread.","pos":[9360,9453]},{"content":"These thread properties include:      -   A name.","pos":[9454,9503]},{"content":"&lt;xref:System.Threading.Thread.Name%2A&gt; is a write-once property that you can use to identify a thread.","pos":[9504,9606],"source":" <xref:System.Threading.Thread.Name%2A> is a write-once property that you can use to identify a thread."},{"content":"Its default value is <ph id=\"ph1\">`null`</ph>.","pos":[9608,9636],"source":"  Its default value is `null`."},{"content":"-   A hash code, which you can retrieve by calling the &lt;xref:System.Threading.Thread.GetHashCode%2A&gt; method.","pos":[9642,9750],"source":"      -   A hash code, which you can retrieve by calling the <xref:System.Threading.Thread.GetHashCode%2A> method."},{"content":"The hash code can be used to uniquely identify a thread; for the lifetime of your thread, its hash code will not collide with the value from any other thread, regardless of the application domain from which you obtain the value.","pos":[9751,9979]},{"content":"-   A thread ID.","pos":[9985,10001]},{"content":"The value of the read-only &lt;xref:System.Threading.Thread.ManagedThreadId%2A&gt; property is assigned by the runtime and uniquely identifies a thread within its process.","pos":[10002,10167],"source":" The value of the read-only <xref:System.Threading.Thread.ManagedThreadId%2A> property is assigned by the runtime and uniquely identifies a thread within its process."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  An operating-system <bpt id=\"p1\">[</bpt>ThreadId<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx)</ept> has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads.","pos":[10177,10431],"source":"          > [!NOTE]     >  An operating-system [ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads."},{"content":"Specifically, a sophisticated host can use the <bpt id=\"p1\">[</bpt>CLR Hosting API<ept id=\"p1\">](https://msdn.microsoft.com/library/ms404385.aspx)</ept> to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads.","pos":[10432,10693],"source":" Specifically, a sophisticated host can use the [CLR Hosting API](https://msdn.microsoft.com/library/ms404385.aspx) to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads."},{"content":"-   The thread's current state.","pos":[10699,10730]},{"content":"For the duration of its existence, a thread is always in one or more of the states defined by the &lt;xref:System.Threading.ThreadState&gt; property.","pos":[10731,10874],"source":" For the duration of its existence, a thread is always in one or more of the states defined by the <xref:System.Threading.ThreadState> property."},{"content":"-   A scheduling priority level, which is defined by the &lt;xref:System.Threading.ThreadPriority&gt; property.","pos":[10880,10985],"source":"      -   A scheduling priority level, which is defined by the <xref:System.Threading.ThreadPriority> property."},{"content":"Although you can set this value to request a thread's priority, it is not guaranteed to be honored by the operating system.","pos":[10986,11109]},{"content":"-   The read-only &lt;xref:System.Threading.Thread.IsThreadPoolThread%2A&gt; property, which indicates whether a thread is  a thread pool thread.","pos":[11115,11254],"source":"      -   The read-only <xref:System.Threading.Thread.IsThreadPoolThread%2A> property, which indicates whether a thread is  a thread pool thread."},{"content":"-   The &lt;xref:System.Threading.Thread.IsBackground%2A&gt; property.","pos":[11260,11324],"source":"      -   The <xref:System.Threading.Thread.IsBackground%2A> property."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Foreground and background threads<ept id=\"p1\">](#Foreground)</ept> section.","pos":[11325,11412],"source":" For more information, see the [Foreground and background threads](#Foreground) section."},{"content":"<bpt id=\"p1\">&lt;a name=\"Source\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Accessing the source code for the Thread class    To view the .NET Framework source code for the Thread class, see the <bpt id=\"p2\">[</bpt>Reference Source<ept id=\"p2\">](http://referencesource.microsoft.com/#mscorlib/system/threading/thread.cs#3980e012bae82e96)</ept>.","pos":[11418,11676],"source":"<a name=\"Source\"></a>    ## Accessing the source code for the Thread class    To view the .NET Framework source code for the Thread class, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/thread.cs#3980e012bae82e96)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[11677,11905],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]},{"pos":[19255,19439],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Threading.Thread\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Threading.Thread\"></xref> class, specifying a delegate that allows an object to be passed to the thread when the thread is started."},{"pos":[19452,20041],"content":"A thread does not begin executing when it is created. To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method. To pass a data object to the thread, use the <xref:System.Threading.Thread.Start%28System.Object%29> method overload.      > [!NOTE] >  Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread. Use the `AddressOf` operator when passing your method, for example `Dim t As New Thread(AddressOf ThreadProc)`. Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.","needQuote":false,"needEscape":true,"nodes":[{"content":"A thread does not begin executing when it is created.","pos":[0,53]},{"content":"To schedule the thread for execution, call the &lt;xref:System.Threading.Thread.Start%2A&gt; method.","pos":[54,148],"source":" To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method."},{"content":"To pass a data object to the thread, use the &lt;xref:System.Threading.Thread.Start%28System.Object%29&gt; method overload.","pos":[149,266],"source":" To pass a data object to the thread, use the <xref:System.Threading.Thread.Start%28System.Object%29> method overload."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Visual Basic users can omit the &lt;xref:System.Threading.ThreadStart&gt; constructor when creating a thread.","pos":[272,388],"source":"      > [!NOTE] >  Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread."},{"content":"Use the <ph id=\"ph1\">`AddressOf`</ph> operator when passing your method, for example <ph id=\"ph2\">`Dim t As New Thread(AddressOf ThreadProc)`</ph>.","pos":[389,500],"source":" Use the `AddressOf` operator when passing your method, for example `Dim t As New Thread(AddressOf ThreadProc)`."},{"content":"Visual Basic automatically calls the &lt;xref:System.Threading.ThreadStart&gt; constructor.","pos":[501,586],"source":" Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor."}]},{"pos":[20781,20868],"content":"A delegate that represents the methods to be invoked when this thread begins executing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A delegate that represents the methods to be invoked when this thread begins executing.","pos":[0,87]}]},{"pos":[21028,21111],"content":"<ph id=\"ph1\">&lt;code&gt;start&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>start</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[21515,21600],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Threading.Thread\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Threading.Thread\"></xref> class."},{"pos":[21613,22083],"content":"A thread does not begin executing when it is created. To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.      > [!NOTE] >  Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread. Use the `AddressOf` operator when passing your method for example `Dim t As New Thread(AddressOf ThreadProc)`. Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.","needQuote":false,"needEscape":true,"nodes":[{"content":"A thread does not begin executing when it is created.","pos":[0,53]},{"content":"To schedule the thread for execution, call the &lt;xref:System.Threading.Thread.Start%2A&gt; method.","pos":[54,148],"source":" To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Visual Basic users can omit the &lt;xref:System.Threading.ThreadStart&gt; constructor when creating a thread.","pos":[154,270],"source":"      > [!NOTE] >  Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread."},{"content":"Use the <ph id=\"ph1\">`AddressOf`</ph> operator when passing your method for example <ph id=\"ph2\">`Dim t As New Thread(AddressOf ThreadProc)`</ph>.","pos":[271,381],"source":" Use the `AddressOf` operator when passing your method for example `Dim t As New Thread(AddressOf ThreadProc)`."},{"content":"Visual Basic automatically calls the &lt;xref:System.Threading.ThreadStart&gt; constructor.","pos":[382,467],"source":" Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor."}]},{"pos":[23101,23238],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadStart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate that represents the methods to be invoked when this thread begins executing.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Threading.ThreadStart\"></xref> delegate that represents the methods to be invoked when this thread begins executing."},{"pos":[23398,23495],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">start</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>start</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[24008,24245],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Threading.Thread\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Threading.Thread\"></xref> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread."},{"pos":[24258,26415],"content":"Avoid using this constructor overload. The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor overload is the recommended stack size for threads. If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.      > [!IMPORTANT] >  Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte). If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used. No exception is thrown. Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.      > [!NOTE] >  If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used. Do not do this unless you fully control the code that runs on the thread.       If `maxStackSize` is less than the minimum stack size, the minimum stack size is used. If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size. For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).      > [!NOTE] >  On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.       If you specify a very small stack size, you might need to disable stack-overflow probing. When the stack is severely constrained, the probing can itself cause a stack overflow. To disable stack overflow probing, add the following to your application configuration file.      ```   <configuration>     <runtime>       <disableStackOverflowProbing enabled=\"true\"/>     </runtime>   </configuration>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"Avoid using this constructor overload.","pos":[0,38]},{"content":"The default stack size used by the &lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29&gt; constructor overload is the recommended stack size for threads.","pos":[39,223],"source":" The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor overload is the recommended stack size for threads."},{"content":"If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.","pos":[224,328]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Beginning with the <ph id=\"ph2\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, only fully trusted code can set <ph id=\"ph3\">`maxStackSize`</ph> to a value that is greater than the default stack size (1 megabyte).","pos":[334,547],"source":"      > [!IMPORTANT] >  Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte)."},{"content":"If a larger value is specified for <ph id=\"ph1\">`maxStackSize`</ph> when code is running with partial trust, <ph id=\"ph2\">`maxStackSize`</ph> is ignored and the default stack size is used.","pos":[548,700],"source":" If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used."},{"content":"No exception is thrown.","pos":[701,724]},{"content":"Code at any trust level can set <ph id=\"ph1\">`maxStackSize`</ph> to a value that is less than the default stack size.","pos":[725,824],"source":" Code at any trust level can set `maxStackSize` to a value that is less than the default stack size."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.","pos":[830,1088],"source":"      > [!NOTE] >  If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used."},{"content":"Do not do this unless you fully control the code that runs on the thread.","pos":[1089,1162]},{"content":"If <ph id=\"ph1\">`maxStackSize`</ph> is less than the minimum stack size, the minimum stack size is used.","pos":[1169,1255],"source":"       If `maxStackSize` is less than the minimum stack size, the minimum stack size is used."},{"content":"If <ph id=\"ph1\">`maxStackSize`</ph> is not a multiple of the page size, it is rounded to the next larger multiple of the page size.","pos":[1256,1369],"source":" If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size."},{"content":"For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).","pos":[1370,1539]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, <ph id=\"ph2\">`maxStackSize`</ph> is ignored, and the stack size specified in the executable header is used.","pos":[1545,1725],"source":"      > [!NOTE] >  On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used."},{"content":"If you specify a very small stack size, you might need to disable stack-overflow probing.","pos":[1732,1821]},{"content":"When the stack is severely constrained, the probing can itself cause a stack overflow.","pos":[1822,1908]},{"content":"To disable stack overflow probing, add the following to your application configuration file.","pos":[1909,2001]}]},{"pos":[26628,26778],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Threading.ParameterizedThreadStart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate that represents the methods to be invoked when this thread begins executing.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Threading.ParameterizedThreadStart\"></xref> delegate that represents the methods to be invoked when this thread begins executing."},{"pos":[26847,27137],"content":"The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.       Important   For partially trusted code, `maxStackSize` is ignored if it is greater than the default stack size. No exception is thrown.","needQuote":false,"needEscape":true,"nodes":[{"content":"The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.","pos":[0,146]},{"content":"Important   For partially trusted code, <ph id=\"ph1\">`maxStackSize`</ph> is ignored if it is greater than the default stack size.","pos":[153,264],"source":"       Important   For partially trusted code, `maxStackSize` is ignored if it is greater than the default stack size."},{"content":"No exception is thrown.","pos":[265,288]}]},{"pos":[27298,27381],"content":"<ph id=\"ph1\">&lt;code&gt;start&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>start</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[27496,27540],"content":"<ph id=\"ph1\">&lt;code&gt;maxStackSize&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>maxStackSize</code> is less than zero."},{"pos":[27988,28123],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Threading.Thread\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, specifying the maximum stack size for the thread.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Threading.Thread\"></xref> class, specifying the maximum stack size for the thread."},{"pos":[28136,30280],"content":"Avoid using this constructor overload. The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> constructor overload is the recommended stack size for threads. If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.      > [!IMPORTANT] >  Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte). If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used. No exception is thrown. Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.      > [!NOTE] >  If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used. Do not do this unless you fully control the code that runs on the thread.       If `maxStackSize` is less than the minimum stack size, the minimum stack size is used. If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size. For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).      > [!NOTE] >  On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.       If you specify a very small stack size, you might need to disable stack-overflow probing. When the stack is severely constrained, the probing can itself cause a stack overflow. To disable stack overflow probing, add the following to your application configuration file.      ```   <configuration>     <runtime>       <disableStackOverflowProbing enabled=\"true\"/>     </runtime>   </configuration>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"Avoid using this constructor overload.","pos":[0,38]},{"content":"The default stack size used by the &lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29&gt; constructor overload is the recommended stack size for threads.","pos":[39,210],"source":" The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> constructor overload is the recommended stack size for threads."},{"content":"If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.","pos":[211,315]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Beginning with the <ph id=\"ph2\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, only fully trusted code can set <ph id=\"ph3\">`maxStackSize`</ph> to a value that is greater than the default stack size (1 megabyte).","pos":[321,534],"source":"      > [!IMPORTANT] >  Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte)."},{"content":"If a larger value is specified for <ph id=\"ph1\">`maxStackSize`</ph> when code is running with partial trust, <ph id=\"ph2\">`maxStackSize`</ph> is ignored and the default stack size is used.","pos":[535,687],"source":" If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used."},{"content":"No exception is thrown.","pos":[688,711]},{"content":"Code at any trust level can set <ph id=\"ph1\">`maxStackSize`</ph> to a value that is less than the default stack size.","pos":[712,811],"source":" Code at any trust level can set `maxStackSize` to a value that is less than the default stack size."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.","pos":[817,1075],"source":"      > [!NOTE] >  If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used."},{"content":"Do not do this unless you fully control the code that runs on the thread.","pos":[1076,1149]},{"content":"If <ph id=\"ph1\">`maxStackSize`</ph> is less than the minimum stack size, the minimum stack size is used.","pos":[1156,1242],"source":"       If `maxStackSize` is less than the minimum stack size, the minimum stack size is used."},{"content":"If <ph id=\"ph1\">`maxStackSize`</ph> is not a multiple of the page size, it is rounded to the next larger multiple of the page size.","pos":[1243,1356],"source":" If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size."},{"content":"For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).","pos":[1357,1526]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, <ph id=\"ph2\">`maxStackSize`</ph> is ignored, and the stack size specified in the executable header is used.","pos":[1532,1712],"source":"      > [!NOTE] >  On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used."},{"content":"If you specify a very small stack size, you might need to disable stack-overflow probing.","pos":[1719,1808]},{"content":"When the stack is severely constrained, the probing can itself cause a stack overflow.","pos":[1809,1895]},{"content":"To disable stack overflow probing, add the following to your application configuration file.","pos":[1896,1988]}]},{"pos":[30467,30604],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadStart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate that represents the methods to be invoked when this thread begins executing.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Threading.ThreadStart\"></xref> delegate that represents the methods to be invoked when this thread begins executing."},{"pos":[30673,30963],"content":"The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.       Important   For partially trusted code, `maxStackSize` is ignored if it is greater than the default stack size. No exception is thrown.","needQuote":false,"needEscape":true,"nodes":[{"content":"The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.","pos":[0,146]},{"content":"Important   For partially trusted code, <ph id=\"ph1\">`maxStackSize`</ph> is ignored if it is greater than the default stack size.","pos":[153,264],"source":"       Important   For partially trusted code, `maxStackSize` is ignored if it is greater than the default stack size."},{"content":"No exception is thrown.","pos":[265,288]}]},{"pos":[31124,31207],"content":"<ph id=\"ph1\">&lt;code&gt;start&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>start</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[31322,31366],"content":"<ph id=\"ph1\">&lt;code&gt;maxStackSize&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>maxStackSize</code> is less than zero."},{"pos":[31667,31871],"content":"Raises a <xref href=\"System.Threading.ThreadAbortException\"></xref> in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Raises a <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadAbortException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the thread on which it is invoked, to begin the process of terminating the thread.","pos":[0,153],"source":"Raises a <xref href=\"System.Threading.ThreadAbortException\"></xref> in the thread on which it is invoked, to begin the process of terminating the thread."},{"content":"Calling this method usually terminates the thread.","pos":[154,204]}]},{"pos":[31884,35404],"content":"When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it. `ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called. `ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread. Unexecuted `finally` blocks are executed before the thread is aborted.      > [!NOTE] >  When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable. However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running. There is also a chance that a static constructor could be aborted. In rare cases, this might prevent instances of that class from being created in that application domain. In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.       The thread is not guaranteed to abort immediately, or at all. This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort. To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the Abort method, but there is no guarantee the wait will end.      > [!NOTE] >  The thread that calls Abort might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region. If the thread that calls Abort holds a lock that the aborted thread requires, a deadlock can occur.       If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called. If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.       If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted. A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.       If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.       If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`. However, an application cannot detect this situation.       After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState>. After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState>. With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method. For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.","needQuote":false,"needEscape":true,"nodes":[{"content":"When this method is invoked on a thread, the system throws a &lt;xref:System.Threading.ThreadAbortException&gt; in the thread to abort it.","pos":[0,132],"source":"When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it."},{"content":"<ph id=\"ph1\">`ThreadAbortException`</ph> is a special exception that can be caught by application code, but is re-thrown at the end of the <ph id=\"ph2\">`catch`</ph> block unless &lt;xref:System.Threading.Thread.ResetAbort%2A&gt; is called.","pos":[133,330],"source":"`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called."},{"content":"<ph id=\"ph1\">`ResetAbort`</ph> cancels the request to abort, and prevents the <ph id=\"ph2\">`ThreadAbortException`</ph> from terminating the thread.","pos":[331,442],"source":"`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread."},{"content":"Unexecuted <ph id=\"ph1\">`finally`</ph> blocks are executed before the thread is aborted.","pos":[443,513],"source":" Unexecuted `finally` blocks are executed before the thread is aborted."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When a thread calls <ph id=\"ph2\">`Abort`</ph> on itself, the effect is similar to throwing an exception; the &lt;xref:System.Threading.ThreadAbortException&gt; happens immediately, and the result is predictable.","pos":[519,719],"source":"      > [!NOTE] >  When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable."},{"content":"However, if one thread calls <ph id=\"ph1\">`Abort`</ph> on another thread, the abort interrupts whatever code is running.","pos":[720,822],"source":" However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running."},{"content":"There is also a chance that a static constructor could be aborted.","pos":[823,889]},{"content":"In rare cases, this might prevent instances of that class from being created in that application domain.","pos":[890,994]},{"content":"In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a <ph id=\"ph1\">`finally`</ph> block is running, in which case the <ph id=\"ph2\">`finally`</ph> block is aborted.","pos":[995,1161],"source":" In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted."},{"content":"The thread is not guaranteed to abort immediately, or at all.","pos":[1168,1229]},{"content":"This situation can occur if a thread does an unbounded amount of computation in the <ph id=\"ph1\">`finally`</ph> blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.","pos":[1230,1419],"source":" This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort."},{"content":"To wait until a thread has aborted, you can call the &lt;xref:System.Threading.Thread.Join%2A&gt; method on the thread after calling the Abort method, but there is no guarantee the wait will end.","pos":[1420,1609],"source":" To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the Abort method, but there is no guarantee the wait will end."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The thread that calls Abort might block if the thread that is being aborted is in a protected region of code, such as a <ph id=\"ph2\">`catch`</ph> block, <ph id=\"ph3\">`finally`</ph> block, or constrained execution region.","pos":[1615,1812],"source":"      > [!NOTE] >  The thread that calls Abort might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region."},{"content":"If the thread that calls Abort holds a lock that the aborted thread requires, a deadlock can occur.","pos":[1813,1912]},{"content":"If <ph id=\"ph1\">`Abort`</ph> is called on a thread that has not been started, the thread will abort when &lt;xref:System.Threading.Thread.Start%2A&gt; is called.","pos":[1919,2056],"source":"       If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called."},{"content":"If <ph id=\"ph1\">`Abort`</ph> is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.","pos":[2057,2165],"source":" If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted."},{"content":"If <ph id=\"ph1\">`Abort`</ph> is called on a thread that has been suspended, a &lt;xref:System.Threading.ThreadStateException&gt; is thrown in the thread that called &lt;xref:System.Threading.Thread.Abort%2A&gt;, and &lt;xref:System.Threading.ThreadState&gt; is added to the &lt;xref:System.Threading.Thread.ThreadState%2A&gt; property of the thread being aborted.","pos":[2172,2493],"source":"       If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted."},{"content":"A &lt;xref:System.Threading.ThreadAbortException&gt; is not thrown in the suspended thread until &lt;xref:System.Threading.Thread.Resume%2A&gt; is called.","pos":[2494,2636],"source":" A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called."},{"content":"If <ph id=\"ph1\">`Abort`</ph> is called on a managed thread while it is executing unmanaged code, a <ph id=\"ph2\">`ThreadAbortException`</ph> is not thrown until the thread returns to managed code.","pos":[2643,2802],"source":"       If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code."},{"content":"If two calls to <ph id=\"ph1\">`Abort`</ph> come at the same time, it is possible for one call to set the state information and the other call to execute the <ph id=\"ph2\">`Abort`</ph>.","pos":[2809,2955],"source":"       If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`."},{"content":"However, an application cannot detect this situation.","pos":[2956,3009]},{"content":"After <ph id=\"ph1\">`Abort`</ph> is invoked on a thread, the state of the thread includes &lt;xref:System.Threading.ThreadState&gt;.","pos":[3016,3123],"source":"       After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState>."},{"content":"After the thread has terminated as a result of a successful call to <ph id=\"ph1\">`Abort`</ph>, the state of the thread is changed to &lt;xref:System.Threading.ThreadState&gt;.","pos":[3124,3275],"source":" After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState>."},{"content":"With sufficient permissions, a thread that is the target of an <ph id=\"ph1\">`Abort`</ph> can cancel the abort using the <ph id=\"ph2\">`ResetAbort`</ph> method.","pos":[3276,3398],"source":" With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method."},{"content":"For an example that demonstrates calling the <ph id=\"ph1\">`ResetAbort`</ph> method, see the <ph id=\"ph2\">`ThreadAbortException`</ph> class.","pos":[3399,3502],"source":" For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class."}]},{"pos":[35639,35688],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[35809,35865],"content":"The thread that is being aborted is currently suspended.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread that is being aborted is currently suspended.","pos":[0,56]}]},{"pos":[36214,36490],"content":"Raises a <xref href=\"System.Threading.ThreadAbortException\"></xref> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates the thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Raises a <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadAbortException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination.","pos":[0,225],"source":"Raises a <xref href=\"System.Threading.ThreadAbortException\"></xref> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination."},{"content":"Calling this method usually terminates the thread.","pos":[226,276]}]},{"pos":[36503,40091],"content":"When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it. `ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called. `ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread. Unexecuted `finally` blocks are executed before the thread is aborted.      > [!NOTE] >  When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable. However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running. There is a chance that a static constructor could be aborted. In rare cases, this might prevent instances of that class from being created in that application domain. In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.       The thread is not guaranteed to abort immediately, or at all. This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort. To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the Abort method, but there is no guarantee that the wait will end.      > [!NOTE] >  The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region. If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.       If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called. If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.       If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted. A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.       If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.       If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`. However, an application cannot detect this situation.       After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState>. After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState>. With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method. For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.","needQuote":false,"needEscape":true,"nodes":[{"content":"When this method is invoked on a thread, the system throws a &lt;xref:System.Threading.ThreadAbortException&gt; in the thread to abort it.","pos":[0,132],"source":"When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it."},{"content":"<ph id=\"ph1\">`ThreadAbortException`</ph> is a special exception that can be caught by application code, but is re-thrown at the end of the <ph id=\"ph2\">`catch`</ph> block unless &lt;xref:System.Threading.Thread.ResetAbort%2A&gt; is called.","pos":[133,330],"source":"`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called."},{"content":"<ph id=\"ph1\">`ResetAbort`</ph> cancels the request to abort, and prevents the <ph id=\"ph2\">`ThreadAbortException`</ph> from terminating the thread.","pos":[331,442],"source":"`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread."},{"content":"Unexecuted <ph id=\"ph1\">`finally`</ph> blocks are executed before the thread is aborted.","pos":[443,513],"source":" Unexecuted `finally` blocks are executed before the thread is aborted."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When a thread calls <ph id=\"ph2\">`Abort`</ph> on itself, the effect is similar to throwing an exception; the &lt;xref:System.Threading.ThreadAbortException&gt; happens immediately, and the result is predictable.","pos":[519,719],"source":"      > [!NOTE] >  When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable."},{"content":"However, if one thread calls <ph id=\"ph1\">`Abort`</ph> on another thread, the abort interrupts whatever code is running.","pos":[720,822],"source":" However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running."},{"content":"There is a chance that a static constructor could be aborted.","pos":[823,884]},{"content":"In rare cases, this might prevent instances of that class from being created in that application domain.","pos":[885,989]},{"content":"In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a <ph id=\"ph1\">`finally`</ph> block is running, in which case the <ph id=\"ph2\">`finally`</ph> block is aborted.","pos":[990,1156],"source":" In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted."},{"content":"The thread is not guaranteed to abort immediately, or at all.","pos":[1163,1224]},{"content":"This situation can occur if a thread does an unbounded amount of computation in the <ph id=\"ph1\">`finally`</ph> blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.","pos":[1225,1414],"source":" This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort."},{"content":"To wait until a thread has aborted, you can call the &lt;xref:System.Threading.Thread.Join%2A&gt; method on the thread after calling the Abort method, but there is no guarantee that the wait will end.","pos":[1415,1609],"source":" To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the Abort method, but there is no guarantee that the wait will end."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The thread that calls &lt;xref:System.Threading.Thread.Abort%2A&gt; might block if the thread that is being aborted is in a protected region of code, such as a <ph id=\"ph2\">`catch`</ph> block, <ph id=\"ph3\">`finally`</ph> block, or constrained execution region.","pos":[1615,1846],"source":"      > [!NOTE] >  The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region."},{"content":"If the thread that calls &lt;xref:System.Threading.Thread.Abort%2A&gt; holds a lock that the aborted thread requires, a deadlock can occur.","pos":[1847,1980],"source":" If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur."},{"content":"If <ph id=\"ph1\">`Abort`</ph> is called on a thread that has not been started, the thread will abort when &lt;xref:System.Threading.Thread.Start%2A&gt; is called.","pos":[1987,2124],"source":"       If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called."},{"content":"If <ph id=\"ph1\">`Abort`</ph> is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.","pos":[2125,2233],"source":" If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted."},{"content":"If <ph id=\"ph1\">`Abort`</ph> is called on a thread that has been suspended, a &lt;xref:System.Threading.ThreadStateException&gt; is thrown in the thread that called &lt;xref:System.Threading.Thread.Abort%2A&gt;, and &lt;xref:System.Threading.ThreadState&gt; is added to the &lt;xref:System.Threading.Thread.ThreadState%2A&gt; property of the thread being aborted.","pos":[2240,2561],"source":"       If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted."},{"content":"A &lt;xref:System.Threading.ThreadAbortException&gt; is not thrown in the suspended thread until &lt;xref:System.Threading.Thread.Resume%2A&gt; is called.","pos":[2562,2704],"source":" A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called."},{"content":"If <ph id=\"ph1\">`Abort`</ph> is called on a managed thread while it is executing unmanaged code, a <ph id=\"ph2\">`ThreadAbortException`</ph> is not thrown until the thread returns to managed code.","pos":[2711,2870],"source":"       If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code."},{"content":"If two calls to <ph id=\"ph1\">`Abort`</ph> come at the same time, it is possible for one call to set the state information and the other call to execute the <ph id=\"ph2\">`Abort`</ph>.","pos":[2877,3023],"source":"       If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`."},{"content":"However, an application cannot detect this situation.","pos":[3024,3077]},{"content":"After <ph id=\"ph1\">`Abort`</ph> is invoked on a thread, the state of the thread includes &lt;xref:System.Threading.ThreadState&gt;.","pos":[3084,3191],"source":"       After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState>."},{"content":"After the thread has terminated as a result of a successful call to <ph id=\"ph1\">`Abort`</ph>, the state of the thread is changed to &lt;xref:System.Threading.ThreadState&gt;.","pos":[3192,3343],"source":" After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState>."},{"content":"With sufficient permissions, a thread that is the target of an <ph id=\"ph1\">`Abort`</ph> can cancel the abort using the <ph id=\"ph2\">`ResetAbort`</ph> method.","pos":[3344,3466],"source":" With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method."},{"content":"For an example that demonstrates calling the <ph id=\"ph1\">`ResetAbort`</ph> method, see the <ph id=\"ph2\">`ThreadAbortException`</ph> class.","pos":[3467,3570],"source":" For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class."}]},{"pos":[40672,40791],"content":"An object that contains application-specific information, such as state, which can be used by the thread being aborted.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains application-specific information, such as state, which can be used by the thread being aborted.","pos":[0,119]}]},{"pos":[40961,41010],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[41131,41187],"content":"The thread that is being aborted is currently suspended.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread that is being aborted is currently suspended.","pos":[0,56]}]},{"pos":[41543,41708],"content":"Allocates an unnamed data slot on all the threads. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allocates an unnamed data slot on all the threads. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.","pos":[0,165],"nodes":[{"content":"Allocates an unnamed data slot on all the threads.","pos":[0,50]},{"content":"For better performance, use fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute instead.","pos":[51,165],"source":" For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead."}]}]},{"pos":[41721,42705],"content":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).       The slot is allocated on all threads.       Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute) and data slots.","pos":[0,233],"source":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots."},{"content":"Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.","pos":[234,351]},{"content":"For more information about using TLS, see <bpt id=\"p1\">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[352,502],"source":" For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md)."},{"content":"The slot is allocated on all threads.","pos":[509,546]},{"content":"Threads use a local store memory mechanism to store thread-specific data.","pos":[553,626]},{"content":"The common language runtime allocates a multi-slot data store array to each process when it is created.","pos":[627,730]},{"content":"The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.","pos":[731,884]},{"content":"Data slots are unique per thread.","pos":[885,918]},{"content":"No other thread (not even a child thread) can get that data.","pos":[919,979]}]},{"pos":[44254,44299],"content":"The allocated named data slot on all threads.","needQuote":true,"needEscape":true,"nodes":[{"content":"The allocated named data slot on all threads.","pos":[0,45]}]},{"pos":[44799,44957],"content":"Allocates a named data slot on all threads. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allocates a named data slot on all threads. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.","pos":[0,158],"nodes":[{"content":"Allocates a named data slot on all threads.","pos":[0,43]},{"content":"For better performance, use fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute instead.","pos":[44,158],"source":" For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead."}]}]},{"pos":[44970,46532],"content":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).       Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.       It is not necessary to use the AllocateNamedDataSlot method to allocate a named data slot, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.      > [!NOTE] >  If the AllocateNamedDataSlot method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated. There is no way to test whether a slot has already been allocated.       Slots allocated with this method must be freed with <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute) and data slots.","pos":[0,233],"source":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots."},{"content":"Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.","pos":[234,351]},{"content":"For more information about using TLS, see <bpt id=\"p1\">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[352,502],"source":" For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md)."},{"content":"Threads use a local store memory mechanism to store thread-specific data.","pos":[509,582]},{"content":"The common language runtime allocates a multi-slot data store array to each process when it is created.","pos":[583,686]},{"content":"The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.","pos":[687,840]},{"content":"Data slots are unique per thread.","pos":[841,874]},{"content":"No other thread (not even a child thread) can get that data.","pos":[875,935]},{"content":"It is not necessary to use the AllocateNamedDataSlot method to allocate a named data slot, because the &lt;xref:System.Threading.Thread.GetNamedDataSlot%2A&gt; method allocates the slot if it has not already been allocated.","pos":[942,1159],"source":"       It is not necessary to use the AllocateNamedDataSlot method to allocate a named data slot, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the AllocateNamedDataSlot method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated.","pos":[1165,1374],"source":"      > [!NOTE] >  If the AllocateNamedDataSlot method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated."},{"content":"There is no way to test whether a slot has already been allocated.","pos":[1375,1441]},{"content":"Slots allocated with this method must be freed with &lt;xref:System.Threading.Thread.FreeNamedDataSlot%2A&gt;.","pos":[1448,1552],"source":"       Slots allocated with this method must be freed with <xref:System.Threading.Thread.FreeNamedDataSlot%2A>."}]},{"pos":[48411,48453],"content":"The name of the data slot to be allocated.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the data slot to be allocated.","pos":[0,42]}]},{"pos":[48523,48568],"content":"The allocated named data slot on all threads.","needQuote":true,"needEscape":true,"nodes":[{"content":"The allocated named data slot on all threads.","pos":[0,45]}]},{"pos":[48736,48793],"content":"A named data slot with the specified name already exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"A named data slot with the specified name already exists.","pos":[0,57]}]},{"pos":[49135,49183],"content":"Gets or sets the apartment state of this thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the apartment state of this thread.","pos":[0,48]}]},{"pos":[49196,50967],"content":"**The ApartmentState property is obsolete.**  The non-obsolete alternatives are the <xref:System.Threading.Thread.GetApartmentState%2A> method to retrieve the apartment state and the   <xref:System.Threading.Thread.SetApartmentState%2A> method to set the apartment state.       In the .NET Framework versions 1.0 and 1.1, the `ApartmentState` property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment. This property can be set when the thread is in the `Unstarted` or `Running` thread state; however, it can be set only once for a thread. If the property has not been set, it returns `Unknown`.       An attempt to use the ApartmentState property to set the apartment state of a thread whose apartment state has already been set is ignored. However, the <xref:System.Threading.Thread.SetApartmentState%2A> method throws a <xref:System.InvalidOperationException> in this case.      > [!IMPORTANT] >  In the .NET Framework version 2.0, new threads are initialized as <xref:System.Threading.ApartmentState?displayProperty=fullName> if their apartment state has not been set before they are started. The main application thread is initialized to <xref:System.Threading.ApartmentState?displayProperty=fullName> by default. You can no longer set the main application thread to <xref:System.Threading.ApartmentState?displayProperty=fullName> by setting the <xref:System.Threading.ApartmentState?displayProperty=fullName> property on the first line of code. Use the <xref:System.STAThreadAttribute> instead.       In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the [/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)](~/add/includes/ajax-current-ext-md.md) linker option.","needQuote":false,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">**</bpt>The ApartmentState property is obsolete.<ept id=\"p1\">**</ept>","pos":[0,44],"source":"**The ApartmentState property is obsolete.**"},{"content":"The non-obsolete alternatives are the &lt;xref:System.Threading.Thread.GetApartmentState%2A&gt; method to retrieve the apartment state and the   &lt;xref:System.Threading.Thread.SetApartmentState%2A&gt; method to set the apartment state.","pos":[46,271],"source":"  The non-obsolete alternatives are the <xref:System.Threading.Thread.GetApartmentState%2A> method to retrieve the apartment state and the   <xref:System.Threading.Thread.SetApartmentState%2A> method to set the apartment state."},{"content":"In the .NET Framework versions 1.0 and 1.1, the <ph id=\"ph1\">`ApartmentState`</ph> property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment.","pos":[278,448],"source":"       In the .NET Framework versions 1.0 and 1.1, the `ApartmentState` property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment."},{"content":"This property can be set when the thread is in the <ph id=\"ph1\">`Unstarted`</ph> or <ph id=\"ph2\">`Running`</ph> thread state; however, it can be set only once for a thread.","pos":[449,585],"source":" This property can be set when the thread is in the `Unstarted` or `Running` thread state; however, it can be set only once for a thread."},{"content":"If the property has not been set, it returns <ph id=\"ph1\">`Unknown`</ph>.","pos":[586,641],"source":" If the property has not been set, it returns `Unknown`."},{"content":"An attempt to use the ApartmentState property to set the apartment state of a thread whose apartment state has already been set is ignored.","pos":[648,787]},{"content":"However, the &lt;xref:System.Threading.Thread.SetApartmentState%2A&gt; method throws a &lt;xref:System.InvalidOperationException&gt; in this case.","pos":[788,922],"source":" However, the <xref:System.Threading.Thread.SetApartmentState%2A> method throws a <xref:System.InvalidOperationException> in this case."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  In the .NET Framework version 2.0, new threads are initialized as &lt;xref:System.Threading.ApartmentState?displayProperty=fullName&gt; if their apartment state has not been set before they are started.","pos":[928,1142],"source":"      > [!IMPORTANT] >  In the .NET Framework version 2.0, new threads are initialized as <xref:System.Threading.ApartmentState?displayProperty=fullName> if their apartment state has not been set before they are started."},{"content":"The main application thread is initialized to &lt;xref:System.Threading.ApartmentState?displayProperty=fullName&gt; by default.","pos":[1143,1264],"source":" The main application thread is initialized to <xref:System.Threading.ApartmentState?displayProperty=fullName> by default."},{"content":"You can no longer set the main application thread to &lt;xref:System.Threading.ApartmentState?displayProperty=fullName&gt; by setting the &lt;xref:System.Threading.ApartmentState?displayProperty=fullName&gt; property on the first line of code.","pos":[1265,1496],"source":" You can no longer set the main application thread to <xref:System.Threading.ApartmentState?displayProperty=fullName> by setting the <xref:System.Threading.ApartmentState?displayProperty=fullName> property on the first line of code."},{"content":"Use the &lt;xref:System.STAThreadAttribute&gt; instead.","pos":[1497,1546],"source":" Use the <xref:System.STAThreadAttribute> instead."},{"content":"In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the <bpt id=\"p1\">[</bpt>/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> linker option.","pos":[1553,1762],"source":"       In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the [/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)](~/add/includes/ajax-current-ext-md.md) linker option."}]},{"pos":[51585,51745],"content":"One of the <xref href=\"System.Threading.ApartmentState\"></xref> values. The initial value is <xref uid=\"langword_csharp_Unknown\" name=\"Unknown\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Threading.ApartmentState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,71],"source":"One of the <xref href=\"System.Threading.ApartmentState\"></xref> values."},{"content":"The initial value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Unknown\" name=\"Unknown\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[72,160],"source":" The initial value is <xref uid=\"langword_csharp_Unknown\" name=\"Unknown\" href=\"\"></xref>."}]},{"pos":[51906,52189],"content":"An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_STA\" name=\"STA\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>) or multithreaded apartment (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_MTA\" name=\"MTA\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>)).","needQuote":true,"needEscape":true,"source":"An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (<xref uid=\"langword_csharp_STA\" name=\"STA\" href=\"\"></xref>) or multithreaded apartment (<xref uid=\"langword_csharp_MTA\" name=\"MTA\" href=\"\"></xref>))."},{"pos":[52560,52743],"content":"Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.","pos":[0,183]}]},{"pos":[52756,54074],"content":"Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code. A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task. By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.       For example, consider a task that attempts to allocate memory while holding a lock. If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock. If the current task is terminated, other tasks could be deadlocked.       When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state. To inform the host that your code is entering a critical region, call BeginCriticalRegion. Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.       Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","needQuote":false,"needEscape":true,"nodes":[{"content":"Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code. A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task. By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.       For example, consider a task that attempts to allocate memory while holding a lock. If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock. If the current task is terminated, other tasks could be deadlocked.       When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state. To inform the host that your code is entering a critical region, call BeginCriticalRegion. Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.       Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","pos":[0,1312],"nodes":[{"content":"Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.","pos":[0,170]},{"content":"A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.","pos":[171,302]},{"content":"By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.","pos":[303,417]},{"content":"For example, consider a task that attempts to allocate memory while holding a lock.","pos":[424,507]},{"content":"If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the &lt;xref:System.AppDomain&gt;, because there can be other tasks in the domain waiting for the same lock.","pos":[508,709],"source":" If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock."},{"content":"If the current task is terminated, other tasks could be deadlocked.","pos":[710,777]},{"content":"When a failure occurs in a critical region, the host might decide to unload the entire &lt;xref:System.AppDomain&gt; rather than take the risk of continuing execution in a potentially unstable state.","pos":[784,977],"source":"       When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state."},{"content":"To inform the host that your code is entering a critical region, call BeginCriticalRegion.","pos":[978,1068]},{"content":"Call &lt;xref:System.Threading.Thread.EndCriticalRegion%2A&gt; when execution returns to a non-critical region of code.","pos":[1069,1182],"source":" Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code."},{"content":"Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","pos":[1189,1312]}]}]},{"pos":[55186,55329],"content":"Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.","pos":[0,143]}]},{"pos":[55342,56278],"content":"Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management. A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time. Most tasks are not affected by this switching. However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread. These tasks must inform the host when they execute code that should not be switched.       For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call BeginThreadAffinity before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.       Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","needQuote":false,"needEscape":true,"nodes":[{"content":"Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management. A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time. Most tasks are not affected by this switching. However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread. These tasks must inform the host when they execute code that should not be switched.       For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call BeginThreadAffinity before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.       Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","pos":[0,932],"nodes":[{"content":"Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.","pos":[0,114]},{"content":"A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.","pos":[115,254]},{"content":"Most tasks are not affected by this switching.","pos":[255,301]},{"content":"However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.","pos":[302,420]},{"content":"These tasks must inform the host when they execute code that should not be switched.","pos":[421,505]},{"content":"For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call BeginThreadAffinity before acquiring the lock, and &lt;xref:System.Threading.Thread.EndThreadAffinity%2A&gt; after releasing the lock.","pos":[512,802],"source":"       For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call BeginThreadAffinity before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock."},{"content":"Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","pos":[809,932]}]}]},{"pos":[57164,57213],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[57555,57613],"content":"Gets the current context in which the thread is executing.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current context in which the thread is executing.","pos":[0,58]}]},{"pos":[57800,57904],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Contexts.Context\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the current thread context.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Runtime.Remoting.Contexts.Context\"></xref> representing the current thread context."},{"pos":[58083,58132],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[58474,58522],"content":"Gets or sets the culture for the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the culture for the current thread.","pos":[0,48]}]},{"pos":[58535,60112],"content":"The <xref:System.Globalization.CultureInfo> object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons. See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains. See the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property to learn how a thread's default culture is determined, and how users set culture information for their computers.       Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you can set the CurrentCulture property to a neutral culture. This is because the behavior of the <xref:System.Globalization.CultureInfo> class has changed: When it represents a neutral culture, its property values (in particular, the <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, and <xref:System.Globalization.CultureInfo.TextInfo%2A> properties) now reflect the specific culture that is associated with the neutral culture. In earlier versions of the .NET Framework, the CurrentCulture property threw a <xref:System.NotSupportedException> exception when a neutral culture was assigned.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Globalization.CultureInfo&gt; object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.","pos":[0,267],"source":"The <xref:System.Globalization.CultureInfo> object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons."},{"content":"See the &lt;xref:System.Globalization.CultureInfo&gt; class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.","pos":[268,507],"source":" See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains."},{"content":"See the &lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName&gt; property to learn how a thread's default culture is determined, and how users set culture information for their computers.","pos":[508,721],"source":" See the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property to learn how a thread's default culture is determined, and how users set culture information for their computers."},{"content":"Beginning with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, you can set the CurrentCulture property to a neutral culture.","pos":[728,869],"source":"       Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you can set the CurrentCulture property to a neutral culture."},{"content":"This is because the behavior of the &lt;xref:System.Globalization.CultureInfo&gt; class has changed: When it represents a neutral culture, its property values (in particular, the &lt;xref:System.Globalization.CultureInfo.Calendar%2A&gt;, &lt;xref:System.Globalization.CultureInfo.CompareInfo%2A&gt;, &lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A&gt;, &lt;xref:System.Globalization.CultureInfo.NumberFormat%2A&gt;, and &lt;xref:System.Globalization.CultureInfo.TextInfo%2A&gt; properties) now reflect the specific culture that is associated with the neutral culture.","pos":[870,1413],"source":" This is because the behavior of the <xref:System.Globalization.CultureInfo> class has changed: When it represents a neutral culture, its property values (in particular, the <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, and <xref:System.Globalization.CultureInfo.TextInfo%2A> properties) now reflect the specific culture that is associated with the neutral culture."},{"content":"In earlier versions of the .NET Framework, the CurrentCulture property threw a &lt;xref:System.NotSupportedException&gt; exception when a neutral culture was assigned.","pos":[1414,1575],"source":" In earlier versions of the .NET Framework, the CurrentCulture property threw a <xref:System.NotSupportedException> exception when a neutral culture was assigned."}]},{"pos":[60817,60878],"content":"An object that represents the culture for the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the culture for the current thread.","pos":[0,61]}]},{"pos":[61047,61131],"content":"The property is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[61483,61553],"content":"Gets or sets the thread's current principal (for role-based security).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the thread's current principal (for role-based security).","pos":[0,70]}]},{"pos":[62212,62299],"content":"An <xref:System.Security.Principal.IPrincipal> value representing the security context.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Security.Principal.IPrincipal&gt; value representing the security context.","pos":[0,87],"source":"An <xref:System.Security.Principal.IPrincipal> value representing the security context."}]},{"pos":[62480,62550],"content":"The caller does not have the permission required to set the principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the permission required to set the principal.","pos":[0,70]}]},{"pos":[62887,62921],"content":"Gets the currently running thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the currently running thread.","pos":[0,34]}]},{"pos":[64054,64160],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Threading.Thread\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is the representation of the currently running thread.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Threading.Thread\"></xref> that is the representation of the currently running thread."},{"pos":[64580,64692],"content":"Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.","pos":[0,112]}]},{"pos":[67401,67447],"content":"An object that represents the current culture.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the current culture.","pos":[0,46]}]},{"pos":[67618,67702],"content":"The property is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[67797,67960],"content":"The property is set to a culture name that cannot be used to locate a resource file. Resource filenames must include only letters, numbers, hyphens or underscores.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property is set to a culture name that cannot be used to locate a resource file. Resource filenames must include only letters, numbers, hyphens or underscores.","pos":[0,163],"nodes":[{"content":"The property is set to a culture name that cannot be used to locate a resource file.","pos":[0,84]},{"content":"Resource filenames must include only letters, numbers, hyphens or underscores.","pos":[85,163]}]}]},{"pos":[68376,68462],"content":"Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.","pos":[0,86]}]},{"pos":[68475,69459],"content":"By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically. The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:      -   The application does its own message pumping.      -   The application needs to control precisely when message pumping occurs.       Such applications can use the DisableComObjectEagerCleanup method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.       When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread. When your application is ready to clean up runtime callable wrappers, use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=fullName> method to instruct the runtime to clean up all runtime callable wrappers in the current context. Message pumping occurs while the method executes.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically. The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:      -   The application does its own message pumping.      -   The application needs to control precisely when message pumping occurs.       Such applications can use the DisableComObjectEagerCleanup method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.       When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread. When your application is ready to clean up runtime callable wrappers, use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=fullName> method to instruct the runtime to clean up all runtime callable wrappers in the current context. Message pumping occurs while the method executes.","pos":[0,976],"nodes":[{"content":"By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically.","pos":[0,96]},{"content":"The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:      -   The application does its own message pumping.","pos":[97,297]},{"content":"-   The application needs to control precisely when message pumping occurs.","pos":[303,378]},{"content":"Such applications can use the DisableComObjectEagerCleanup method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.","pos":[385,532]},{"content":"When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread.","pos":[539,640]},{"content":"When your application is ready to clean up runtime callable wrappers, use the &lt;xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=fullName&gt; method to instruct the runtime to clean up all runtime callable wrappers in the current context.","pos":[641,926],"source":" When your application is ready to clean up runtime callable wrappers, use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=fullName> method to instruct the runtime to clean up all runtime callable wrappers in the current context."},{"content":"Message pumping occurs while the method executes.","pos":[927,976]}]}]},{"pos":[69991,70151],"content":"Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.","needQuote":true,"needEscape":true,"nodes":[{"content":"Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.","pos":[0,160]}]},{"pos":[70164,71482],"content":"Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code. A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task. By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.       For example, consider a task that attempts to allocate memory while holding a lock. If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock. If the current task is terminated, other tasks could be deadlocked.       When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state. To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>. Call EndCriticalRegion when execution returns to a non-critical region of code.       Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","needQuote":false,"needEscape":true,"nodes":[{"content":"Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code. A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task. By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.       For example, consider a task that attempts to allocate memory while holding a lock. If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock. If the current task is terminated, other tasks could be deadlocked.       When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state. To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>. Call EndCriticalRegion when execution returns to a non-critical region of code.       Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","pos":[0,1312],"nodes":[{"content":"Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.","pos":[0,170]},{"content":"A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.","pos":[171,302]},{"content":"By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.","pos":[303,417]},{"content":"For example, consider a task that attempts to allocate memory while holding a lock.","pos":[424,507]},{"content":"If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the &lt;xref:System.AppDomain&gt;, because there can be other tasks in the domain waiting for the same lock.","pos":[508,709],"source":" If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock."},{"content":"If the current task is terminated, other tasks could be deadlocked.","pos":[710,777]},{"content":"When a failure occurs in a critical region, the host might decide to unload the entire &lt;xref:System.AppDomain&gt; rather than take the risk of continuing execution in a potentially unstable state.","pos":[784,977],"source":"       When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state."},{"content":"To inform the host that your code is entering a critical region, call &lt;xref:System.Threading.Thread.BeginCriticalRegion%2A&gt;.","pos":[978,1102],"source":" To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>."},{"content":"Call EndCriticalRegion when execution returns to a non-critical region of code.","pos":[1103,1182]},{"content":"Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","pos":[1189,1312]}]}]},{"pos":[72580,72726],"content":"Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.","pos":[0,146]}]},{"pos":[72739,73675],"content":"Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management. A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time. Most tasks are not affected by this switching. However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread. These tasks must inform the host when they execute code that should not be switched.       For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and EndThreadAffinity after releasing the lock.       Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","needQuote":false,"needEscape":true,"nodes":[{"content":"Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management. A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time. Most tasks are not affected by this switching. However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread. These tasks must inform the host when they execute code that should not be switched.       For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and EndThreadAffinity after releasing the lock.       Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","pos":[0,932],"nodes":[{"content":"Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.","pos":[0,114]},{"content":"A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.","pos":[115,254]},{"content":"Most tasks are not affected by this switching.","pos":[255,301]},{"content":"However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.","pos":[302,420]},{"content":"These tasks must inform the host when they execute code that should not be switched.","pos":[421,505]},{"content":"For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call &lt;xref:System.Threading.Thread.BeginThreadAffinity%2A&gt; before acquiring the lock, and EndThreadAffinity after releasing the lock.","pos":[512,802],"source":"       For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and EndThreadAffinity after releasing the lock."},{"content":"Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.","pos":[809,932]}]}]},{"pos":[74557,74606],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[74958,75089],"content":"Gets an <xref:System.Threading.ExecutionContext> object that contains information about the various contexts of the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an &lt;xref:System.Threading.ExecutionContext&gt; object that contains information about the various contexts of the current thread.","pos":[0,131],"source":"Gets an <xref:System.Threading.ExecutionContext> object that contains information about the various contexts of the current thread."}]},{"pos":[75101,75360],"content":"The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution. This includes security context, call context, synchronization context, localization context, and transaction context.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution. This includes security context, call context, synchronization context, localization context, and transaction context.","pos":[0,259],"nodes":[{"content":"The &lt;xref:System.Threading.ExecutionContext&gt; class provides a single container for all information relevant to a logical thread of execution.","pos":[0,141],"source":"The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution."},{"content":"This includes security context, call context, synchronization context, localization context, and transaction context.","pos":[142,259]}]}]},{"pos":[75528,75640],"content":"An <xref:System.Threading.ExecutionContext> object that consolidates context information for the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Threading.ExecutionContext&gt; object that consolidates context information for the current thread.","pos":[0,112],"source":"An <xref:System.Threading.ExecutionContext> object that consolidates context information for the current thread."}]},{"pos":[76027,76195],"content":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <bpt id=\"p1\">&lt;xref href=\"System.Threading.Thread\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.Threading.Thread\"></xref> object."},{"pos":[76207,76293],"content":"The garbage collector calls Finalize when the current object is ready to be finalized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The garbage collector calls Finalize when the current object is ready to be finalized.","pos":[0,86]}]},{"pos":[76819,77019],"content":"Eliminates the association between a name and a slot, for all threads in the process. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.","needQuote":true,"needEscape":true,"nodes":[{"content":"Eliminates the association between a name and a slot, for all threads in the process. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.","pos":[0,200],"nodes":[{"content":"Eliminates the association between a name and a slot, for all threads in the process.","pos":[0,85]},{"content":"For better performance, use fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute instead.","pos":[86,200],"source":" For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead."}]}]},{"pos":[77032,78630],"content":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).       After any thread calls `FreeNamedDataSlot`, any other thread that calls <xref:System.Threading.Thread.GetNamedDataSlot%2A> with the same name will allocate a new slot associated with the name. Subsequent calls to `GetNamedDataSlot` by any thread will return the new slot. However, any thread that still has a <xref:System.LocalDataStoreSlot?displayProperty=fullName> returned by an earlier call to `GetNamedDataSlot` can continue to use the old slot.       A slot that has been associated with a name is released only when every `LocalDataStoreSlot` that was obtained prior to the call to `FreeNamedDataSlot` has been released and garbage-collected.       Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute) and data slots.","pos":[0,233],"source":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots."},{"content":"Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.","pos":[234,351]},{"content":"For more information about using TLS, see <bpt id=\"p1\">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[352,502],"source":" For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md)."},{"content":"After any thread calls <ph id=\"ph1\">`FreeNamedDataSlot`</ph>, any other thread that calls &lt;xref:System.Threading.Thread.GetNamedDataSlot%2A&gt; with the same name will allocate a new slot associated with the name.","pos":[509,701],"source":"       After any thread calls `FreeNamedDataSlot`, any other thread that calls <xref:System.Threading.Thread.GetNamedDataSlot%2A> with the same name will allocate a new slot associated with the name."},{"content":"Subsequent calls to <ph id=\"ph1\">`GetNamedDataSlot`</ph> by any thread will return the new slot.","pos":[702,780],"source":" Subsequent calls to `GetNamedDataSlot` by any thread will return the new slot."},{"content":"However, any thread that still has a &lt;xref:System.LocalDataStoreSlot?displayProperty=fullName&gt; returned by an earlier call to <ph id=\"ph1\">`GetNamedDataSlot`</ph> can continue to use the old slot.","pos":[781,959],"source":" However, any thread that still has a <xref:System.LocalDataStoreSlot?displayProperty=fullName> returned by an earlier call to `GetNamedDataSlot` can continue to use the old slot."},{"content":"A slot that has been associated with a name is released only when every <ph id=\"ph1\">`LocalDataStoreSlot`</ph> that was obtained prior to the call to <ph id=\"ph2\">`FreeNamedDataSlot`</ph> has been released and garbage-collected.","pos":[966,1158],"source":"       A slot that has been associated with a name is released only when every `LocalDataStoreSlot` that was obtained prior to the call to `FreeNamedDataSlot` has been released and garbage-collected."},{"content":"Threads use a local store memory mechanism to store thread-specific data.","pos":[1165,1238]},{"content":"The common language runtime allocates a multi-slot data store array to each process when it is created.","pos":[1239,1342]},{"content":"The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.","pos":[1343,1496]},{"content":"Data slots are unique per thread.","pos":[1497,1530]},{"content":"No other thread (not even a child thread) can get that data.","pos":[1531,1591]}]},{"pos":[80175,80213],"content":"The name of the data slot to be freed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the data slot to be freed.","pos":[0,38]}]},{"pos":[80646,80747],"content":"Returns an <bpt id=\"p1\">&lt;xref href=\"System.Threading.ApartmentState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value indicating the apartment state.","needQuote":true,"needEscape":true,"source":"Returns an <xref href=\"System.Threading.ApartmentState\"></xref> value indicating the apartment state."},{"pos":[80759,80988],"content":"This method, along with the <xref:System.Threading.Thread.SetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method, along with the &lt;xref:System.Threading.Thread.SetApartmentState%2A&gt; method and the &lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt; method, replaces the &lt;xref:System.Threading.Thread.ApartmentState%2A&gt; property.","pos":[0,229],"source":"This method, along with the <xref:System.Threading.Thread.SetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property."}]},{"pos":[82646,82839],"content":"One of the <xref href=\"System.Threading.ApartmentState\"></xref> values indicating the apartment state of the managed thread. The default is <xref href=\"System.Threading.ApartmentState\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Threading.ApartmentState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values indicating the apartment state of the managed thread.","pos":[0,124],"source":"One of the <xref href=\"System.Threading.ApartmentState\"></xref> values indicating the apartment state of the managed thread."},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Threading.ApartmentState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[125,193],"source":" The default is <xref href=\"System.Threading.ApartmentState\"></xref>."}]},{"pos":[83277,83409],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Threading.CompressedStack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that can be used to capture the stack for the current thread.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Threading.CompressedStack\"></xref> object that can be used to capture the stack for the current thread."},{"pos":[83421,83456],"content":"This method is no longer supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is no longer supported.","pos":[0,35]}]},{"pos":[83638,83643],"content":"None.","needQuote":true,"needEscape":true,"nodes":[{"content":"None.","pos":[0,5]}]},{"pos":[83824,83837],"content":"In all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"In all cases.","pos":[0,13]}]},{"pos":[84256,84481],"content":"Retrieves the value from the specified slot on the current thread, within the current thread's current domain. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the value from the specified slot on the current thread, within the current thread's current domain. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.","pos":[0,225],"nodes":[{"content":"Retrieves the value from the specified slot on the current thread, within the current thread's current domain.","pos":[0,110]},{"content":"For better performance, use fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute instead.","pos":[111,225],"source":" For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead."}]}]},{"pos":[84494,85724],"content":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).       Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.      > [!NOTE] >  GetData is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread. To avoid confusion, use the class name when calling `Shared` methods: `Dim test As Object = Thread.GetData(testSlot)`.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute) and data slots.","pos":[0,233],"source":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots."},{"content":"Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.","pos":[234,351]},{"content":"For more information about using TLS, see <bpt id=\"p1\">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[352,502],"source":" For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md)."},{"content":"Threads use a local store memory mechanism to store thread-specific data.","pos":[509,582]},{"content":"The common language runtime allocates a multi-slot data store array to each process when it is created.","pos":[583,686]},{"content":"The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.","pos":[687,840]},{"content":"Data slots are unique per thread.","pos":[841,874]},{"content":"No other thread (not even a child thread) can get that data.","pos":[875,935]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  GetData is a <ph id=\"ph2\">`Shared`</ph> method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.","pos":[941,1105],"source":"      > [!NOTE] >  GetData is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread."},{"content":"To avoid confusion, use the class name when calling <ph id=\"ph1\">`Shared`</ph> methods: <ph id=\"ph2\">`Dim test As Object = Thread.GetData(testSlot)`</ph>.","pos":[1106,1224],"source":" To avoid confusion, use the class name when calling `Shared` methods: `Dim test As Object = Thread.GetData(testSlot)`."}]},{"pos":[87270,87349],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.LocalDataStoreSlot\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from which to get the value.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.LocalDataStoreSlot\"></xref> from which to get the value."},{"pos":[87407,87427],"content":"The retrieved value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The retrieved value.","pos":[0,20]}]},{"pos":[87810,87876],"content":"Returns the current domain in which the current thread is running.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the current domain in which the current thread is running.","pos":[0,66]}]},{"pos":[88492,88599],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.AppDomain\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the current application domain of the running thread.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.AppDomain\"></xref> representing the current application domain of the running thread."},{"pos":[88994,89041],"content":"Returns a unique application domain identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a unique application domain identifier.","pos":[0,47]}]},{"pos":[89649,89717],"content":"A 32-bit signed integer uniquely identifying the application domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 32-bit signed integer uniquely identifying the application domain.","pos":[0,68]}]},{"pos":[90114,90157],"content":"Returns a hash code for the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a hash code for the current thread.","pos":[0,43]}]},{"pos":[90169,90335],"content":"The hash code is not guaranteed to be unique. Use the <xref:System.Threading.Thread.ManagedThreadId%2A> property if you need a unique identifier for a managed thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash code is not guaranteed to be unique. Use the <xref:System.Threading.Thread.ManagedThreadId%2A> property if you need a unique identifier for a managed thread.","pos":[0,166],"nodes":[{"content":"The hash code is not guaranteed to be unique.","pos":[0,45]},{"content":"Use the &lt;xref:System.Threading.Thread.ManagedThreadId%2A&gt; property if you need a unique identifier for a managed thread.","pos":[46,166],"source":" Use the <xref:System.Threading.Thread.ManagedThreadId%2A> property if you need a unique identifier for a managed thread."}]}]},{"pos":[90470,90497],"content":"An integer hash code value.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer hash code value.","pos":[0,27]}]},{"pos":[90967,91109],"content":"Looks up a named data slot. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.","needQuote":true,"needEscape":true,"nodes":[{"content":"Looks up a named data slot. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.","pos":[0,142],"nodes":[{"content":"Looks up a named data slot.","pos":[0,27]},{"content":"For better performance, use fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute instead.","pos":[28,142],"source":" For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead."}]}]},{"pos":[91122,92189],"content":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).       Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.       If the named slot does not exist, a new slot is allocated. Named data slots are public and can be manipulated by anyone.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute) and data slots.","pos":[0,233],"source":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots."},{"content":"Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.","pos":[234,351]},{"content":"For more information about using TLS, see <bpt id=\"p1\">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[352,502],"source":" For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md)."},{"content":"Threads use a local store memory mechanism to store thread-specific data.","pos":[509,582]},{"content":"The common language runtime allocates a multi-slot data store array to each process when it is created.","pos":[583,686]},{"content":"The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.","pos":[687,840]},{"content":"Data slots are unique per thread.","pos":[841,874]},{"content":"No other thread (not even a child thread) can get that data.","pos":[875,935]},{"content":"If the named slot does not exist, a new slot is allocated.","pos":[942,1000]},{"content":"Named data slots are public and can be manipulated by anyone.","pos":[1001,1062]}]},{"pos":[93753,93785],"content":"The name of the local data slot.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the local data slot.","pos":[0,32]}]},{"pos":[93855,93930],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.LocalDataStoreSlot\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> allocated for this thread.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.LocalDataStoreSlot\"></xref> allocated for this thread."},{"pos":[94322,94449],"content":"Interrupts a thread that is in the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_WaitSleepJoin\" name=\"WaitSleepJoin\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> thread state.","needQuote":true,"needEscape":true,"source":"Interrupts a thread that is in the <xref uid=\"langword_csharp_WaitSleepJoin\" name=\"WaitSleepJoin\" href=\"\"></xref> thread state."},{"pos":[94462,94842],"content":"If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.       <xref:System.Threading.ThreadInterruptedException> is thrown in the interrupted thread, but not until the thread blocks. If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.","needQuote":false,"needEscape":true,"nodes":[{"content":"If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.       <xref:System.Threading.ThreadInterruptedException> is thrown in the interrupted thread, but not until the thread blocks. If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.","pos":[0,378],"nodes":[{"content":"If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.","pos":[0,125]},{"content":"&lt;xref:System.Threading.ThreadInterruptedException&gt; is thrown in the interrupted thread, but not until the thread blocks.","pos":[132,252],"source":"       <xref:System.Threading.ThreadInterruptedException> is thrown in the interrupted thread, but not until the thread blocks."},{"content":"If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.","pos":[253,378]}]}]},{"pos":[95559,95668],"content":"The caller does not have the appropriate <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The caller does not have the appropriate <xref href=\"System.Security.Permissions.SecurityPermission\"></xref>."},{"pos":[95975,96042],"content":"Gets a value indicating the execution status of the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating the execution status of the current thread.","pos":[0,67]}]},{"pos":[96153,96364],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this thread has been started and has not terminated normally or aborted; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this thread has been started and has not terminated normally or aborted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[96758,96837],"content":"Gets or sets a value indicating whether or not a thread is a background thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether or not a thread is a background thread.","pos":[0,79]}]},{"pos":[96850,98047],"content":"A thread is either a background thread or a foreground thread. Background threads are identical to foreground threads, except that background threads do not prevent a process from terminating. Once all foreground threads belonging to a process have terminated, the common language runtime ends the process. Any remaining background threads are stopped and do not complete.       By default, the following threads execute in the foreground (that is, their IsBackground property returns `false`):      -   The primary thread (or main application thread).      -   All threads created by calling a <xref:System.Threading.Thread> class constructor.       By default, the following threads execute in the background  (that is, their IsBackground property returns `true`):      -   Thread pool threads, which are a pool of worker threads maintained by the runtime. You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.          > [!NOTE]     >  Task-based asynchronous operations automatically execute on thread pool threads.      -   All threads that enter the managed execution environment from unmanaged code.","needQuote":false,"needEscape":true,"nodes":[{"content":"A thread is either a background thread or a foreground thread.","pos":[0,62]},{"content":"Background threads are identical to foreground threads, except that background threads do not prevent a process from terminating.","pos":[63,192]},{"content":"Once all foreground threads belonging to a process have terminated, the common language runtime ends the process.","pos":[193,306]},{"content":"Any remaining background threads are stopped and do not complete.","pos":[307,372]},{"content":"By default, the following threads execute in the foreground (that is, their IsBackground property returns <ph id=\"ph1\">`false`</ph>):      -   The primary thread (or main application thread).","pos":[379,552],"source":"       By default, the following threads execute in the foreground (that is, their IsBackground property returns `false`):      -   The primary thread (or main application thread)."},{"content":"-   All threads created by calling a &lt;xref:System.Threading.Thread&gt; class constructor.","pos":[558,644],"source":"      -   All threads created by calling a <xref:System.Threading.Thread> class constructor."},{"content":"By default, the following threads execute in the background  (that is, their IsBackground property returns <ph id=\"ph1\">`true`</ph>):      -   Thread pool threads, which are a pool of worker threads maintained by the runtime.","pos":[651,858],"source":"       By default, the following threads execute in the background  (that is, their IsBackground property returns `true`):      -   Thread pool threads, which are a pool of worker threads maintained by the runtime."},{"content":"You can configure the thread pool and schedule work on thread pool threads by using the &lt;xref:System.Threading.ThreadPool&gt; class.","pos":[859,988],"source":" You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph>     &gt;  Task-based asynchronous operations automatically execute on thread pool threads.","pos":[998,1095],"source":"          > [!NOTE]     >  Task-based asynchronous operations automatically execute on thread pool threads."},{"content":"-   All threads that enter the managed execution environment from unmanaged code.","pos":[1101,1182]}]},{"pos":[98944,99134],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this thread is or is to become a background thread; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this thread is or is to become a background thread; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[99319,99338],"content":"The thread is dead.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread is dead.","pos":[0,19]}]},{"pos":[99700,99783],"content":"Gets a value indicating whether or not a thread belongs to the managed thread pool.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether or not a thread belongs to the managed thread pool.","pos":[0,83]}]},{"pos":[99795,99885],"content":"For more information see <bpt id=\"p1\">[</bpt>The Managed Thread Pool<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"source":"For more information see [The Managed Thread Pool](~/add/includes/ajax-current-ext-md.md)."},{"pos":[100477,100663],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this thread belongs to the managed thread pool; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this thread belongs to the managed thread pool; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[101032,101244],"content":"Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_SendMessage\" name=\"SendMessage\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> pumping.","needQuote":true,"needEscape":true,"source":"Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <xref uid=\"langword_csharp_SendMessage\" name=\"SendMessage\" href=\"\"></xref> pumping."},{"pos":[101257,102559],"content":"Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until the thread whose Join method is called has completed. Use this method to ensure that a thread has been terminated. The caller will block indefinitely if the thread does not terminate. In the following example, the `Thread1` thread calls the Join method of `Thread2`, which causes `Thread1` to block until `Thread2` has completed.       [!code-cs[System.Threading.Thread.Join#1](~/add/codesnippet/csharp/m-system.threading.threa_24_1.cs)]  [!code-vb[System.Threading.Thread.Join#1](~/add/codesnippet/visualbasic/m-system.threading.threa_24_1.vb)]       If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.      > [!WARNING] >  You should never call the Join method of the <xref:System.Threading.Thread> object that represents the current thread from the current thread. This causes your app to hang because the current thread waits upon itself indefinitely,       This method changes the state of the calling thread to include <xref:System.Threading.ThreadState?displayProperty=fullName>. You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state.","needQuote":false,"needEscape":true,"nodes":[{"content":"Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until the thread whose Join method is called has completed.","pos":[0,167]},{"content":"Use this method to ensure that a thread has been terminated.","pos":[168,228]},{"content":"The caller will block indefinitely if the thread does not terminate.","pos":[229,297]},{"content":"In the following example, the <ph id=\"ph1\">`Thread1`</ph> thread calls the Join method of <ph id=\"ph2\">`Thread2`</ph>, which causes <ph id=\"ph3\">`Thread1`</ph> to block until <ph id=\"ph4\">`Thread2`</ph> has completed.","pos":[298,443],"source":" In the following example, the `Thread1` thread calls the Join method of `Thread2`, which causes `Thread1` to block until `Thread2` has completed."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Threading.Thread.Join#1<ept id=\"p2\">](~/add/codesnippet/csharp/m-system.threading.threa_24_1.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Thread.Join#1<ept id=\"p4\">](~/add/codesnippet/visualbasic/m-system.threading.threa_24_1.vb)</ept><ept id=\"p3\">]</ept>       If the thread has already terminated when &lt;xref:System.Threading.Thread.Join%2A&gt; is called, the method returns immediately.","pos":[450,789],"source":"[!code-cs[System.Threading.Thread.Join#1](~/add/codesnippet/csharp/m-system.threading.threa_24_1.cs)]  [!code-vb[System.Threading.Thread.Join#1](~/add/codesnippet/visualbasic/m-system.threading.threa_24_1.vb)]       If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately."},{"content":"&gt; <ph id=\"ph1\">[!WARNING]</ph> &gt;  You should never call the Join method of the &lt;xref:System.Threading.Thread&gt; object that represents the current thread from the current thread.","pos":[795,953],"source":"      > [!WARNING] >  You should never call the Join method of the <xref:System.Threading.Thread> object that represents the current thread from the current thread."},{"content":"This causes your app to hang because the current thread waits upon itself indefinitely,       This method changes the state of the calling thread to include &lt;xref:System.Threading.ThreadState?displayProperty=fullName&gt;.","pos":[954,1172],"source":" This causes your app to hang because the current thread waits upon itself indefinitely,       This method changes the state of the calling thread to include <xref:System.Threading.ThreadState?displayProperty=fullName>."},{"content":"You cannot invoke <ph id=\"ph1\">`Join`</ph> on a thread that is in the &lt;xref:System.Threading.ThreadState?displayProperty=fullName&gt; state.","pos":[1173,1292],"source":" You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state."}]},{"pos":[102800,102909],"content":"The caller attempted to join a thread that is in the <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> state.","needQuote":true,"needEscape":true,"source":"The caller attempted to join a thread that is in the <xref href=\"System.Threading.ThreadState\"></xref> state."},{"pos":[103042,103082],"content":"The thread is interrupted while waiting.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread is interrupted while waiting.","pos":[0,40]}]},{"pos":[103421,103600],"content":"Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.","needQuote":true,"needEscape":true,"nodes":[{"content":"Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.","pos":[0,179]}]},{"pos":[103613,104922],"content":"Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed. In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.       [!code-cs[System.Threading.Thread.Join#2](~/add/codesnippet/csharp/m-system.threading.threa_8_1.cs)]  [!code-vb[System.Threading.Thread.Join#2](~/add/codesnippet/visualbasic/m-system.threading.threa_8_1.vb)]       If <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> is specified for the `millisecondsTimeout` parameter, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.       If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.       This method changes the state of the calling thread to include <xref:System.Threading.ThreadState?displayProperty=fullName>. You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state.","needQuote":false,"needEscape":true,"nodes":[{"content":"Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose &lt;xref:System.Threading.Thread.Join%2A&gt; method is called has completed or the time-out interval has elapsed.","pos":[0,245],"source":"Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed."},{"content":"In the following example, the <ph id=\"ph1\">`Thread1`</ph> thread calls the &lt;xref:System.Threading.Thread.Join&gt; method of <ph id=\"ph2\">`Thread2`</ph>, which causes <ph id=\"ph3\">`Thread1`</ph> to block either until <ph id=\"ph4\">`Thread2`</ph> has completed or 2 seconds have elapsed.","pos":[246,455],"source":" In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Threading.Thread.Join#2<ept id=\"p2\">](~/add/codesnippet/csharp/m-system.threading.threa_8_1.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Thread.Join#2<ept id=\"p4\">](~/add/codesnippet/visualbasic/m-system.threading.threa_8_1.vb)</ept><ept id=\"p3\">]</ept>       If &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; is specified for the <ph id=\"ph1\">`millisecondsTimeout`</ph> parameter, this method behaves identically to the &lt;xref:System.Threading.Thread.Join&gt; method overload, except for the return value.","pos":[462,919],"source":"[!code-cs[System.Threading.Thread.Join#2](~/add/codesnippet/csharp/m-system.threading.threa_8_1.cs)]  [!code-vb[System.Threading.Thread.Join#2](~/add/codesnippet/visualbasic/m-system.threading.threa_8_1.vb)]       If <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> is specified for the `millisecondsTimeout` parameter, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value."},{"content":"If the thread has already terminated when &lt;xref:System.Threading.Thread.Join%2A&gt; is called, the method returns immediately.","pos":[926,1049],"source":"       If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately."},{"content":"This method changes the state of the calling thread to include &lt;xref:System.Threading.ThreadState?displayProperty=fullName&gt;.","pos":[1056,1180],"source":"       This method changes the state of the calling thread to include <xref:System.Threading.ThreadState?displayProperty=fullName>."},{"content":"You cannot invoke <ph id=\"ph1\">`Join`</ph> on a thread that is in the &lt;xref:System.Threading.ThreadState?displayProperty=fullName&gt; state.","pos":[1181,1300],"source":" You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state."}]},{"pos":[105081,105144],"content":"The number of milliseconds to wait for the thread to terminate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of milliseconds to wait for the thread to terminate.","pos":[0,63]}]},{"pos":[105203,105487],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the thread has terminated; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the thread has not terminated after the amount of time specified by the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">millisecondsTimeout</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter has elapsed.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the thread has terminated; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the thread has not terminated after the amount of time specified by the <code>millisecondsTimeout</code> parameter has elapsed."},{"pos":[105658,105824],"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">millisecondsTimeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> is negative and is not equal to <ph id=\"ph2\">&amp;lt;</ph>xref:System.Threading.Timeout.Infinite?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph> in milliseconds.","needQuote":true,"needEscape":true,"source":"The value of <code>millisecondsTimeout</code> is negative and is not equal to &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; in milliseconds."},{"pos":[105945,105977],"content":"The thread has not been started.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread has not been started.","pos":[0,32]}]},{"pos":[106331,106510],"content":"Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.","needQuote":true,"needEscape":true,"nodes":[{"content":"Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.","pos":[0,179]}]},{"pos":[106523,107783],"content":"Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed. In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.       [!code-cs[System.Threading.Thread.Join#3](~/add/codesnippet/csharp/m-system.threading.threa_28_1.cs)]  [!code-vb[System.Threading.Thread.Join#3](~/add/codesnippet/visualbasic/m-system.threading.threa_28_1.vb)]       If <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> is specified for `timeout`, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.       If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.       This method changes the state of the current thread to include <xref:System.Threading.ThreadState>. You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state.","needQuote":false,"needEscape":true,"nodes":[{"content":"Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose &lt;xref:System.Threading.Thread.Join%2A&gt; method is called has completed or the time-out interval has elapsed.","pos":[0,245],"source":"Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed."},{"content":"In the following example, the <ph id=\"ph1\">`Thread1`</ph> thread calls the &lt;xref:System.Threading.Thread.Join&gt; method of <ph id=\"ph2\">`Thread2`</ph>, which causes <ph id=\"ph3\">`Thread1`</ph> to block either until <ph id=\"ph4\">`Thread2`</ph> has completed or 2 seconds have elapsed.","pos":[246,455],"source":" In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Threading.Thread.Join#3<ept id=\"p2\">](~/add/codesnippet/csharp/m-system.threading.threa_28_1.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Thread.Join#3<ept id=\"p4\">](~/add/codesnippet/visualbasic/m-system.threading.threa_28_1.vb)</ept><ept id=\"p3\">]</ept>       If &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; is specified for <ph id=\"ph1\">`timeout`</ph>, this method behaves identically to the &lt;xref:System.Threading.Thread.Join&gt; method overload, except for the return value.","pos":[462,895],"source":"[!code-cs[System.Threading.Thread.Join#3](~/add/codesnippet/csharp/m-system.threading.threa_28_1.cs)]  [!code-vb[System.Threading.Thread.Join#3](~/add/codesnippet/visualbasic/m-system.threading.threa_28_1.vb)]       If <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> is specified for `timeout`, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value."},{"content":"If the thread has already terminated when &lt;xref:System.Threading.Thread.Join%2A&gt; is called, the method returns immediately.","pos":[902,1025],"source":"       If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately."},{"content":"This method changes the state of the current thread to include &lt;xref:System.Threading.ThreadState&gt;.","pos":[1032,1131],"source":"       This method changes the state of the current thread to include <xref:System.Threading.ThreadState>."},{"content":"You cannot invoke <ph id=\"ph1\">`Join`</ph> on a thread that is in the &lt;xref:System.Threading.ThreadState?displayProperty=fullName&gt; state.","pos":[1132,1251],"source":" You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state."}]},{"pos":[108371,108458],"content":"A <xref:System.TimeSpan> set to the amount of time to wait for the thread to terminate.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.TimeSpan&gt; set to the amount of time to wait for the thread to terminate.","pos":[0,87],"source":"A <xref:System.TimeSpan> set to the amount of time to wait for the thread to terminate."}]},{"pos":[108517,108785],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the thread terminated; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the thread has not terminated after the amount of time specified by the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter has elapsed.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the thread terminated; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the thread has not terminated after the amount of time specified by the <code>timeout</code> parameter has elapsed."},{"pos":[108956,109203],"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> is negative and is not equal to <ph id=\"ph2\">&amp;lt;</ph>xref:System.Threading.Timeout.Infinite?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph> in milliseconds, or is greater than <ph id=\"ph4\">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id=\"ph5\">&amp;gt;</ph> milliseconds.","needQuote":true,"needEscape":true,"source":"The value of <code>timeout</code> is negative and is not equal to &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; in milliseconds, or is greater than &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt; milliseconds."},{"pos":[109324,109433],"content":"The caller attempted to join a thread that is in the <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> state.","needQuote":true,"needEscape":true,"source":"The caller attempted to join a thread that is in the <xref href=\"System.Threading.ThreadState\"></xref> state."},{"pos":[109780,109836],"content":"Gets a unique identifier for the current managed thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a unique identifier for the current managed thread.","pos":[0,56]}]},{"pos":[109849,110121],"content":"A thread's ManagedThreadId property value serves to uniquely identify that thread within its process.       The value of the ManagedThreadId property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.","needQuote":false,"needEscape":true,"nodes":[{"content":"A thread's ManagedThreadId property value serves to uniquely identify that thread within its process.       The value of the ManagedThreadId property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.","pos":[0,270],"nodes":[{"content":"A thread's ManagedThreadId property value serves to uniquely identify that thread within its process.","pos":[0,101]},{"content":"The value of the ManagedThreadId property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.","pos":[108,270]}]}]},{"pos":[110238,110309],"content":"An integer that represents a unique identifier for this managed thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents a unique identifier for this managed thread.","pos":[0,71]}]},{"pos":[110721,110969],"content":"Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to MemoryBarrier execute after memory accesses that follow the call to MemoryBarrier.","needQuote":false,"needEscape":true,"nodes":[{"content":"Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to MemoryBarrier execute after memory accesses that follow the call to MemoryBarrier.","pos":[0,248]}]},{"pos":[110983,111311],"content":"MemoryBarrier is required only on multiprocessor systems with weak memory ordering (for example, a system employing multiple Intel Itanium processors).       For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data.","needQuote":false,"needEscape":true,"nodes":[{"content":"MemoryBarrier is required only on multiprocessor systems with weak memory ordering (for example, a system employing multiple Intel Itanium processors).","pos":[0,151]},{"content":"For most purposes, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, or the &lt;xref:System.Threading.Monitor&gt; class provide easier ways to synchronize data.","pos":[158,326],"source":"       For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data."}]},{"pos":[111751,111787],"content":"Gets or sets the name of the thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the thread.","pos":[0,36]}]},{"pos":[111800,112090],"content":"This property is write-once. Because the default value of a thread's Name property is `null`, you can determine whether a name has already been explicitly assigned to the thread by comparing it with `null`.       The string assigned to the Name property can include any Unicode character.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property is write-once.","pos":[0,28]},{"content":"Because the default value of a thread's Name property is <ph id=\"ph1\">`null`</ph>, you can determine whether a name has already been explicitly assigned to the thread by comparing it with <ph id=\"ph2\">`null`</ph>.","pos":[29,206],"source":" Because the default value of a thread's Name property is `null`, you can determine whether a name has already been explicitly assigned to the thread by comparing it with `null`."},{"content":"The string assigned to the Name property can include any Unicode character.","pos":[213,288]}]},{"pos":[112591,112718],"content":"A string containing the name of the thread, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no name was set.","needQuote":true,"needEscape":true,"source":"A string containing the name of the thread, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no name was set."},{"pos":[112885,113015],"content":"A set operation was requested, but the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Name\" name=\"Name\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> property has already been set.","needQuote":true,"needEscape":true,"source":"A set operation was requested, but the <xref uid=\"langword_csharp_Name\" name=\"Name\" href=\"\"></xref> property has already been set."},{"pos":[113327,113395],"content":"Gets or sets a value indicating the scheduling priority of a thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating the scheduling priority of a thread.","pos":[0,68]}]},{"pos":[113408,113702],"content":"A thread can be assigned any one of the following priority &lt;xref:System.Threading.ThreadPriority&gt; values:      -   <ph id=\"ph1\">`Highest`</ph><ph id=\"ph2\">      -   </ph><ph id=\"ph3\">`AboveNormal`</ph><ph id=\"ph4\">      -   </ph><ph id=\"ph5\">`Normal`</ph><ph id=\"ph6\">      -   </ph><ph id=\"ph7\">`BelowNormal`</ph><ph id=\"ph8\">      -   </ph><ph id=\"ph9\">`Lowest`</ph>       Operating systems are not required to honor the priority of a thread.","needQuote":false,"needEscape":true,"source":"A thread can be assigned any one of the following priority <xref:System.Threading.ThreadPriority> values:      -   `Highest`      -   `AboveNormal`      -   `Normal`      -   `BelowNormal`      -   `Lowest`       Operating systems are not required to honor the priority of a thread."},{"pos":[114491,114637],"content":"One of the <xref href=\"System.Threading.ThreadPriority\"></xref> values. The default value is <xref href=\"System.Threading.ThreadPriority\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadPriority\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,71],"source":"One of the <xref href=\"System.Threading.ThreadPriority\"></xref> values."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadPriority\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[72,146],"source":" The default value is <xref href=\"System.Threading.ThreadPriority\"></xref>."}]},{"pos":[114818,114914],"content":"The thread has reached a final state, such as <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The thread has reached a final state, such as <xref href=\"System.Threading.ThreadState\"></xref>."},{"pos":[115009,115123],"content":"The value specified for a set operation is not a valid <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadPriority\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"The value specified for a set operation is not a valid <xref href=\"System.Threading.ThreadPriority\"></xref> value."},{"pos":[115449,115531],"content":"Cancels an <xref:System.Threading.Thread.Abort*> requested for the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels an &lt;xref:System.Threading.Thread.Abort*&gt; requested for the current thread.","pos":[0,82],"source":"Cancels an <xref:System.Threading.Thread.Abort*> requested for the current thread."}]},{"pos":[115544,116137],"content":"This method can only be called by code with the proper permissions.       When a call is made to `Abort` to terminate a thread, the system throws a <xref:System.Threading.ThreadAbortException>. `ThreadAbortException` is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless `ResetAbort` is called. `ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.       See <xref:System.Threading.ThreadAbortException> for an example that demonstrates calling the `ResetAbort` method.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method can only be called by code with the proper permissions.","pos":[0,67]},{"content":"When a call is made to <ph id=\"ph1\">`Abort`</ph> to terminate a thread, the system throws a &lt;xref:System.Threading.ThreadAbortException&gt;.","pos":[74,193],"source":"       When a call is made to `Abort` to terminate a thread, the system throws a <xref:System.Threading.ThreadAbortException>."},{"content":"<ph id=\"ph1\">`ThreadAbortException`</ph> is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless <ph id=\"ph2\">`ResetAbort`</ph> is called.","pos":[194,356],"source":"`ThreadAbortException` is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless `ResetAbort` is called."},{"content":"<ph id=\"ph1\">`ResetAbort`</ph> cancels the request to abort, and prevents the <ph id=\"ph2\">`ThreadAbortException`</ph> from terminating the thread.","pos":[357,468],"source":"`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread."},{"content":"See &lt;xref:System.Threading.ThreadAbortException&gt; for an example that demonstrates calling the <ph id=\"ph1\">`ResetAbort`</ph> method.","pos":[475,589],"source":"       See <xref:System.Threading.ThreadAbortException> for an example that demonstrates calling the `ResetAbort` method."}]},{"pos":[116397,116498],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Abort\" name=\"Abort\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was not invoked on the current thread.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_Abort\" name=\"Abort\" href=\"\"></xref> was not invoked on the current thread."},{"pos":[116611,116692],"content":"The caller does not have the required security permission for the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required security permission for the current thread.","pos":[0,81]}]},{"pos":[116998,117039],"content":"Resumes a thread that has been suspended.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resumes a thread that has been suspended.","pos":[0,41]}]},{"pos":[117858,117933],"content":"The thread has not been started, is dead, or is not in the suspended state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread has not been started, is dead, or is not in the suspended state.","pos":[0,75]}]},{"pos":[118046,118155],"content":"The caller does not have the appropriate <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The caller does not have the appropriate <xref href=\"System.Security.Permissions.SecurityPermission\"></xref>."},{"pos":[118624,118682],"content":"Sets the apartment state of a thread before it is started.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the apartment state of a thread before it is started.","pos":[0,58]}]},{"pos":[118695,119534],"content":"New threads are initialized as <xref:System.Threading.ApartmentState?displayProperty=fullName> if their apartment state has not been set before they are started. Apartment state must be set before a thread is started.      > [!NOTE] >  The main application thread is initialized to <xref:System.Threading.ApartmentState?displayProperty=fullName> by default. The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState?displayProperty=fullName> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.       The SetApartmentState method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"New threads are initialized as &lt;xref:System.Threading.ApartmentState?displayProperty=fullName&gt; if their apartment state has not been set before they are started.","pos":[0,161],"source":"New threads are initialized as <xref:System.Threading.ApartmentState?displayProperty=fullName> if their apartment state has not been set before they are started."},{"content":"Apartment state must be set before a thread is started.","pos":[162,217]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The main application thread is initialized to &lt;xref:System.Threading.ApartmentState?displayProperty=fullName&gt; by default.","pos":[223,357],"source":"      > [!NOTE] >  The main application thread is initialized to <xref:System.Threading.ApartmentState?displayProperty=fullName> by default."},{"content":"The only way to set the apartment state of the main application thread to &lt;xref:System.Threading.ApartmentState?displayProperty=fullName&gt; is to apply the &lt;xref:System.STAThreadAttribute&gt; attribute to the entry point method.","pos":[358,581],"source":" The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState?displayProperty=fullName> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method."},{"content":"The SetApartmentState method, along with the &lt;xref:System.Threading.Thread.GetApartmentState%2A&gt; method and the &lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt; method, replaces the &lt;xref:System.Threading.Thread.ApartmentState%2A&gt; property.","pos":[588,834],"source":"       The SetApartmentState method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property."}]},{"pos":[121167,121191],"content":"The new apartment state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new apartment state.","pos":[0,24]}]},{"pos":[121355,121405],"content":"<ph id=\"ph1\">&lt;code&gt;state&lt;/code&gt;</ph> is not a valid apartment state.","needQuote":true,"needEscape":true,"source":"<code>state</code> is not a valid apartment state."},{"pos":[121526,121562],"content":"The thread has already been started.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread has already been started.","pos":[0,36]}]},{"pos":[121673,121722],"content":"The apartment state has already been initialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The apartment state has already been initialized.","pos":[0,49]}]},{"pos":[122201,122296],"content":"Applies a captured <bpt id=\"p1\">&lt;xref href=\"System.Threading.CompressedStack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the current thread.","needQuote":true,"needEscape":true,"source":"Applies a captured <xref href=\"System.Threading.CompressedStack\"></xref> to the current thread."},{"pos":[122308,122343],"content":"This method is no longer supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is no longer supported.","pos":[0,35]}]},{"pos":[122536,122637],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Threading.CompressedStack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to be applied to the current thread.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Threading.CompressedStack\"></xref> object to be applied to the current thread."},{"pos":[122818,122831],"content":"In all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"In all cases.","pos":[0,13]}]},{"pos":[123299,123507],"content":"Sets the data in the specified slot on the currently running thread, for that thread's current domain. For better performance, use fields marked with the <xref:System.ThreadStaticAttribute> attribute instead.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the data in the specified slot on the currently running thread, for that thread's current domain. For better performance, use fields marked with the <xref:System.ThreadStaticAttribute> attribute instead.","pos":[0,208],"nodes":[{"content":"Sets the data in the specified slot on the currently running thread, for that thread's current domain.","pos":[0,102]},{"content":"For better performance, use fields marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute instead.","pos":[103,208],"source":" For better performance, use fields marked with the <xref:System.ThreadStaticAttribute> attribute instead."}]}]},{"pos":[123520,124838],"content":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).       Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the <xref:System.Threading.Thread> object has been reclaimed by garbage collection. Data slots are unique per thread. No other thread (not even a child thread) can get that data.      > [!NOTE] >  SetData is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread. To avoid confusion, use the class name when calling `Shared` methods: `Thread.SetData(testSlot, \"test data\")`.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute) and data slots.","pos":[0,233],"source":"> [!IMPORTANT] >  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots."},{"content":"Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.","pos":[234,351]},{"content":"For more information about using TLS, see <bpt id=\"p1\">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[352,502],"source":" For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md)."},{"content":"Threads use a local store memory mechanism to store thread-specific data.","pos":[509,582]},{"content":"The common language runtime allocates a multi-slot data store array to each process when it is created.","pos":[583,686]},{"content":"The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the &lt;xref:System.Threading.Thread&gt; object has been reclaimed by garbage collection.","pos":[687,934],"source":" The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the <xref:System.Threading.Thread> object has been reclaimed by garbage collection."},{"content":"Data slots are unique per thread.","pos":[935,968]},{"content":"No other thread (not even a child thread) can get that data.","pos":[969,1029]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  SetData is a <ph id=\"ph2\">`Shared`</ph> method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.","pos":[1035,1199],"source":"      > [!NOTE] >  SetData is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread."},{"content":"To avoid confusion, use the class name when calling <ph id=\"ph1\">`Shared`</ph> methods: <ph id=\"ph2\">`Thread.SetData(testSlot, \"test data\")`</ph>.","pos":[1200,1310],"source":" To avoid confusion, use the class name when calling `Shared` methods: `Thread.SetData(testSlot, \"test data\")`."}]},{"pos":[126410,126487],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.LocalDataStoreSlot\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which to set the value.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.LocalDataStoreSlot\"></xref> in which to set the value."},{"pos":[126548,126568],"content":"The value to be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be set.","pos":[0,20]}]},{"pos":[126974,127043],"content":"Suspends the current thread for the specified number of milliseconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"Suspends the current thread for the specified number of milliseconds.","pos":[0,69]}]},{"pos":[127056,128594],"content":"The thread will not be scheduled for execution by the operating system for the amount of time specified. This method changes the state of the thread to include <xref:System.Threading.ThreadState>.       You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> for the `millisecondsTimeout` parameter to suspend the thread indefinitely. However, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.       The system clock ticks at a specific rate called the clock resolution. The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks. For more information on clock resolution and the waiting time, see the [Sleep function](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) topic. This method calls the [Sleep function](http://msdn.microsoft.com/en-us/library/windows/desktop/ms686298.aspx) from the Windows system APIs.       This method does not perform standard COM and SendMessage pumping.      > [!NOTE] >  If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.","needQuote":false,"needEscape":true,"nodes":[{"content":"The thread will not be scheduled for execution by the operating system for the amount of time specified.","pos":[0,104]},{"content":"This method changes the state of the thread to include &lt;xref:System.Threading.ThreadState&gt;.","pos":[105,196],"source":" This method changes the state of the thread to include <xref:System.Threading.ThreadState>."},{"content":"You can specify &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; for the <ph id=\"ph1\">`millisecondsTimeout`</ph> parameter to suspend the thread indefinitely.","pos":[203,360],"source":"       You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> for the `millisecondsTimeout` parameter to suspend the thread indefinitely."},{"content":"However, we recommend that you use other &lt;xref:System.Threading?displayProperty=fullName&gt; classes such as &lt;xref:System.Threading.Mutex&gt;, &lt;xref:System.Threading.Monitor&gt;, &lt;xref:System.Threading.EventWaitHandle&gt;, or &lt;xref:System.Threading.Semaphore&gt; instead to sychronize threads or manage resources.","pos":[361,659],"source":" However, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources."},{"content":"The system clock ticks at a specific rate called the clock resolution.","pos":[666,736]},{"content":"The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks.","pos":[737,876]},{"content":"For more information on clock resolution and the waiting time, see the <bpt id=\"p1\">[</bpt>Sleep function<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx)</ept> topic.","pos":[877,1036],"source":" For more information on clock resolution and the waiting time, see the [Sleep function](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) topic."},{"content":"This method calls the <bpt id=\"p1\">[</bpt>Sleep function<ept id=\"p1\">](http://msdn.microsoft.com/en-us/library/windows/desktop/ms686298.aspx)</ept> from the Windows system APIs.","pos":[1037,1176],"source":" This method calls the [Sleep function](http://msdn.microsoft.com/en-us/library/windows/desktop/ms686298.aspx) from the Windows system APIs."},{"content":"This method does not perform standard COM and SendMessage pumping.","pos":[1183,1249]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you need to sleep on a thread that has &lt;xref:System.STAThreadAttribute&gt;, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the &lt;xref:System.Threading.Thread.Join%2A&gt; method that specifies a timeout interval.","pos":[1255,1529],"source":"      > [!NOTE] >  If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval."}]},{"pos":[129133,129485],"content":"The number of milliseconds for which the thread is suspended. If the value of the `millisecondsTimeout` argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of milliseconds for which the thread is suspended.","pos":[0,61]},{"content":"If the value of the <ph id=\"ph1\">`millisecondsTimeout`</ph> argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.","pos":[62,231],"source":" If the value of the `millisecondsTimeout` argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run."},{"content":"If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.","pos":[232,352]}]},{"pos":[129657,129749],"content":"The time-out value is negative and is not equal to <xref:System.Threading.Timeout.Infinite>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time-out value is negative and is not equal to &lt;xref:System.Threading.Timeout.Infinite&gt;.","pos":[0,92],"source":"The time-out value is negative and is not equal to <xref:System.Threading.Timeout.Infinite>."}]},{"pos":[130108,130169],"content":"Suspends the current thread for the specified amount of time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Suspends the current thread for the specified amount of time.","pos":[0,61]}]},{"pos":[130182,131359],"content":"The thread will not be scheduled for execution by the operating system for the amount of time specified. This method changes the state of the thread to include <xref:System.Threading.ThreadState>.       You can specify <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=fullName> for the `timeout` parameter to suspend the thread indefinitely. However, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.       This overload of <xref:System.Threading.Thread.Sleep%2A> uses the total number of whole milliseconds in `timeout`. Fractional milliseconds are discarded.       This method does not perform standard COM and SendMessage pumping.      > [!NOTE] >  If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.","needQuote":false,"needEscape":true,"nodes":[{"content":"The thread will not be scheduled for execution by the operating system for the amount of time specified.","pos":[0,104]},{"content":"This method changes the state of the thread to include &lt;xref:System.Threading.ThreadState&gt;.","pos":[105,196],"source":" This method changes the state of the thread to include <xref:System.Threading.ThreadState>."},{"content":"You can specify &lt;xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=fullName&gt; for the <ph id=\"ph1\">`timeout`</ph> parameter to suspend the thread indefinitely.","pos":[203,356],"source":"       You can specify <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=fullName> for the `timeout` parameter to suspend the thread indefinitely."},{"content":"However, we recommend that you use other &lt;xref:System.Threading?displayProperty=fullName&gt; classes such as &lt;xref:System.Threading.Mutex&gt;, &lt;xref:System.Threading.Monitor&gt;, &lt;xref:System.Threading.EventWaitHandle&gt;, or &lt;xref:System.Threading.Semaphore&gt; instead to sychronize threads or manage resources.","pos":[357,655],"source":" However, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources."},{"content":"This overload of &lt;xref:System.Threading.Thread.Sleep%2A&gt; uses the total number of whole milliseconds in <ph id=\"ph1\">`timeout`</ph>.","pos":[662,776],"source":"       This overload of <xref:System.Threading.Thread.Sleep%2A> uses the total number of whole milliseconds in `timeout`."},{"content":"Fractional milliseconds are discarded.","pos":[777,815]},{"content":"This method does not perform standard COM and SendMessage pumping.","pos":[822,888]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you need to sleep on a thread that has &lt;xref:System.STAThreadAttribute&gt;, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the &lt;xref:System.Threading.Thread.Join%2A&gt; method that specifies a timeout interval.","pos":[894,1168],"source":"      > [!NOTE] >  If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval."}]},{"pos":[131959,132352],"content":"The amount of time for which the thread is suspended. If the value of the `millisecondsTimeout` argument is &lt;xref:System.TimeSpan?displayProperty=fullName&gt;, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount of time for which the thread is suspended.","pos":[0,53]},{"content":"If the value of the <ph id=\"ph1\">`millisecondsTimeout`</ph> argument is <ph id=\"ph2\">&amp;lt;</ph>xref:System.TimeSpan?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph>, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.","pos":[54,272],"source":" If the value of the `millisecondsTimeout` argument is &lt;xref:System.TimeSpan?displayProperty=fullName&gt;, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run."},{"content":"If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.","pos":[273,393]}]},{"pos":[132524,132771],"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> is negative and is not equal to <ph id=\"ph2\">&amp;lt;</ph>xref:System.Threading.Timeout.Infinite?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph> in milliseconds, or is greater than <ph id=\"ph4\">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id=\"ph5\">&amp;gt;</ph> milliseconds.","needQuote":true,"needEscape":true,"source":"The value of <code>timeout</code> is negative and is not equal to &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; in milliseconds, or is greater than &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt; milliseconds."},{"pos":[133130,133223],"content":"Causes a thread to wait the number of times defined by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">iterations</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"Causes a thread to wait the number of times defined by the <code>iterations</code> parameter."},{"pos":[133236,134889],"content":"The SpinWait method is useful for implementing locks. Classes in the .NET Framework, such as <xref:System.Threading.Monitor> and <xref:System.Threading.ReaderWriterLock>, use this method internally. SpinWait essentially puts the processor into a very tight loop, with the loop count specified by the `iterations` parameter. The duration of the wait therefore depends on the speed of the processor.       Contrast this with the <xref:System.Threading.Thread.Sleep%2A> method. A thread that calls <xref:System.Threading.Thread.Sleep%2A> yields the rest of its current slice of processor time, even if the specified interval is zero. Specifying a non-zero interval for <xref:System.Threading.Thread.Sleep%2A> removes the thread from consideration by the thread scheduler until the time interval has elapsed.       SpinWait is not generally useful for ordinary applications. In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call <xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName> or a statement that wraps <xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName> (`lock` in C# or `SyncLock` in Visual Basic).      > [!CAUTION] >  In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the SpinWait method in your loop. The code SpinWait executes is designed to prevent problems that can occur on computers with multiple processors. For example, on computers with multiple Intel processors employing Hyper-Threading technology, SpinWait prevents processor starvation in certain situations.","needQuote":false,"needEscape":true,"nodes":[{"content":"The SpinWait method is useful for implementing locks.","pos":[0,53]},{"content":"Classes in the .NET Framework, such as &lt;xref:System.Threading.Monitor&gt; and &lt;xref:System.Threading.ReaderWriterLock&gt;, use this method internally.","pos":[54,198],"source":" Classes in the .NET Framework, such as <xref:System.Threading.Monitor> and <xref:System.Threading.ReaderWriterLock>, use this method internally."},{"content":"SpinWait essentially puts the processor into a very tight loop, with the loop count specified by the <ph id=\"ph1\">`iterations`</ph> parameter.","pos":[199,323],"source":" SpinWait essentially puts the processor into a very tight loop, with the loop count specified by the `iterations` parameter."},{"content":"The duration of the wait therefore depends on the speed of the processor.","pos":[324,397]},{"content":"Contrast this with the &lt;xref:System.Threading.Thread.Sleep%2A&gt; method.","pos":[404,474],"source":"       Contrast this with the <xref:System.Threading.Thread.Sleep%2A> method."},{"content":"A thread that calls &lt;xref:System.Threading.Thread.Sleep%2A&gt; yields the rest of its current slice of processor time, even if the specified interval is zero.","pos":[475,630],"source":" A thread that calls <xref:System.Threading.Thread.Sleep%2A> yields the rest of its current slice of processor time, even if the specified interval is zero."},{"content":"Specifying a non-zero interval for &lt;xref:System.Threading.Thread.Sleep%2A&gt; removes the thread from consideration by the thread scheduler until the time interval has elapsed.","pos":[631,804],"source":" Specifying a non-zero interval for <xref:System.Threading.Thread.Sleep%2A> removes the thread from consideration by the thread scheduler until the time interval has elapsed."},{"content":"SpinWait is not generally useful for ordinary applications.","pos":[811,870]},{"content":"In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call &lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName&gt; or a statement that wraps &lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName&gt; (<ph id=\"ph1\">`lock`</ph> in C# or <ph id=\"ph2\">`SyncLock`</ph> in Visual Basic).","pos":[871,1182],"source":" In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call <xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName> or a statement that wraps <xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName> (`lock` in C# or `SyncLock` in Visual Basic)."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the SpinWait method in your loop.","pos":[1188,1376],"source":"      > [!CAUTION] >  In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the SpinWait method in your loop."},{"content":"The code SpinWait executes is designed to prevent problems that can occur on computers with multiple processors.","pos":[1377,1489]},{"content":"For example, on computers with multiple Intel processors employing Hyper-Threading technology, SpinWait prevents processor starvation in certain situations.","pos":[1490,1646]}]},{"pos":[135041,135107],"content":"A 32-bit signed integer that defines how long a thread is to wait.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 32-bit signed integer that defines how long a thread is to wait.","pos":[0,66]}]},{"pos":[135471,135596],"content":"Causes the operating system to change the state of the current instance to <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Causes the operating system to change the state of the current instance to <xref href=\"System.Threading.ThreadState\"></xref>."},{"pos":[135609,136306],"content":"Once a thread is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state, the operating system can schedule it for execution. The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor. Note that the call to Start does not block the calling thread.      > [!NOTE] >  If this overload is used with a thread created using a <xref:System.Threading.ParameterizedThreadStart> delegate, `null` is passed to the method executed by the thread.       Once the thread terminates, it cannot be restarted with another call to `Start`.","needQuote":false,"needEscape":true,"nodes":[{"content":"Once a thread is in the &lt;xref:System.Threading.ThreadState?displayProperty=fullName&gt; state, the operating system can schedule it for execution.","pos":[0,143],"source":"Once a thread is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state, the operating system can schedule it for execution."},{"content":"The thread begins executing at the first line of the method represented by the &lt;xref:System.Threading.ThreadStart&gt; or &lt;xref:System.Threading.ParameterizedThreadStart&gt; delegate supplied to the thread constructor.","pos":[144,355],"source":" The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor."},{"content":"Note that the call to Start does not block the calling thread.","pos":[356,418]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If this overload is used with a thread created using a &lt;xref:System.Threading.ParameterizedThreadStart&gt; delegate, <ph id=\"ph2\">`null`</ph> is passed to the method executed by the thread.","pos":[424,605],"source":"      > [!NOTE] >  If this overload is used with a thread created using a <xref:System.Threading.ParameterizedThreadStart> delegate, `null` is passed to the method executed by the thread."},{"content":"Once the thread terminates, it cannot be restarted with another call to <ph id=\"ph1\">`Start`</ph>.","pos":[612,692],"source":"       Once the thread terminates, it cannot be restarted with another call to `Start`."}]},{"pos":[136888,136924],"content":"The thread has already been started.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread has already been started.","pos":[0,36]}]},{"pos":[137025,137083],"content":"There is not enough memory available to start this thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory available to start this thread.","pos":[0,58]}]},{"pos":[137432,137653],"content":"Causes the operating system to change the state of the current instance to <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, and optionally supplies an object containing data to be used by the method the thread executes.","needQuote":true,"needEscape":true,"source":"Causes the operating system to change the state of the current instance to <xref href=\"System.Threading.ThreadState\"></xref>, and optionally supplies an object containing data to be used by the method the thread executes."},{"pos":[137666,138643],"content":"Once a thread is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state, the operating system can schedule it for execution. The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor. Note that the call to Start does not block the calling thread.       Once the thread terminates, it cannot be restarted with another call to `Start`.       This overload and the <xref:System.Threading.ParameterizedThreadStart> delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload. A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object. For more information, see [Creating Threads and Passing Data at Start Time](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Once a thread is in the &lt;xref:System.Threading.ThreadState?displayProperty=fullName&gt; state, the operating system can schedule it for execution.","pos":[0,143],"source":"Once a thread is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state, the operating system can schedule it for execution."},{"content":"The thread begins executing at the first line of the method represented by the &lt;xref:System.Threading.ThreadStart&gt; or &lt;xref:System.Threading.ParameterizedThreadStart&gt; delegate supplied to the thread constructor.","pos":[144,355],"source":" The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor."},{"content":"Note that the call to Start does not block the calling thread.","pos":[356,418]},{"content":"Once the thread terminates, it cannot be restarted with another call to <ph id=\"ph1\">`Start`</ph>.","pos":[425,505],"source":"       Once the thread terminates, it cannot be restarted with another call to `Start`."},{"content":"This overload and the &lt;xref:System.Threading.ParameterizedThreadStart&gt; delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload.","pos":[512,726],"source":"       This overload and the <xref:System.Threading.ParameterizedThreadStart> delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload."},{"content":"A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.","pos":[727,857]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Creating Threads and Passing Data at Start Time<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[858,973],"source":" For more information, see [Creating Threads and Passing Data at Start Time](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[139300,139374],"content":"An object that contains data to be used by the method the thread executes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains data to be used by the method the thread executes.","pos":[0,74]}]},{"pos":[139552,139588],"content":"The thread has already been started.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread has already been started.","pos":[0,36]}]},{"pos":[139689,139747],"content":"There is not enough memory available to start this thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory available to start this thread.","pos":[0,58]}]},{"pos":[139858,140034],"content":"This thread was created using a <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadStart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate instead of a <bpt id=\"p2\">&lt;xref href=\"System.Threading.ParameterizedThreadStart\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> delegate.","needQuote":true,"needEscape":true,"source":"This thread was created using a <xref href=\"System.Threading.ThreadStart\"></xref> delegate instead of a <xref href=\"System.Threading.ParameterizedThreadStart\"></xref> delegate."},{"pos":[140345,140426],"content":"Either suspends the thread, or if the thread is already suspended, has no effect.","needQuote":true,"needEscape":true,"nodes":[{"content":"Either suspends the thread, or if the thread is already suspended, has no effect.","pos":[0,81]}]},{"pos":[140439,141061],"content":"If the thread is already suspended, this method has no effect.      > [!CAUTION] >  Do not use the Suspend and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads. You have no way of knowing what code a thread is executing when you suspend it. If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked. If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked. Deadlocks can occur very easily.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the thread is already suspended, this method has no effect.","pos":[0,62]},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  Do not use the Suspend and &lt;xref:System.Threading.Thread.Resume%2A&gt; methods to synchronize the activities of threads.","pos":[68,201],"source":"      > [!CAUTION] >  Do not use the Suspend and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads."},{"content":"You have no way of knowing what code a thread is executing when you suspend it.","pos":[202,281]},{"content":"If you suspend a thread while it holds locks during a security permission evaluation, other threads in the &lt;xref:System.AppDomain&gt; might be blocked.","pos":[282,430],"source":" If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked."},{"content":"If you suspend a thread while it is executing a class constructor, other threads in the &lt;xref:System.AppDomain&gt; that attempt to use that class are blocked.","pos":[431,586],"source":" If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked."},{"content":"Deadlocks can occur very easily.","pos":[587,619]}]},{"pos":[141308,141351],"content":"The thread has not been started or is dead.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread has not been started or is dead.","pos":[0,43]}]},{"pos":[141464,141573],"content":"The caller does not have the appropriate <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The caller does not have the appropriate <xref href=\"System.Security.Permissions.SecurityPermission\"></xref>."},{"pos":[142359,142426],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]},{"pos":[142438,142624],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]},{"pos":[142825,142867],"content":"Reserved for future use. Must be IID_NULL.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]},{"pos":[142933,142971],"content":"Passed-in array of names to be mapped.","needQuote":true,"needEscape":true,"nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]},{"pos":[143034,143066],"content":"Count of the names to be mapped.","needQuote":true,"needEscape":true,"nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]},{"pos":[143127,143178],"content":"The locale context in which to interpret the names.","needQuote":true,"needEscape":true,"nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]},{"pos":[143243,143316],"content":"Caller-allocated array which receives the IDs corresponding to the names.","needQuote":true,"needEscape":true,"nodes":[{"content":"Caller-allocated array which receives the IDs corresponding to the names.","pos":[0,73]}]},{"pos":[143527,143598],"content":"Late-bound access using the COM <ph id=\"ph1\">`IDispatch`</ph> interface is not supported.","needQuote":true,"needEscape":true,"source":"Late-bound access using the COM `IDispatch` interface is not supported."},{"pos":[144284,144398],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]},{"pos":[144410,144594],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]},{"pos":[144763,144794],"content":"The type information to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type information to return.","pos":[0,31]}]},{"pos":[144855,144902],"content":"The locale identifier for the type information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]},{"pos":[144966,145026],"content":"Receives a pointer to the requested type information object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]},{"pos":[145235,145306],"content":"Late-bound access using the COM <ph id=\"ph1\">`IDispatch`</ph> interface is not supported.","needQuote":true,"needEscape":true,"source":"Late-bound access using the COM `IDispatch` interface is not supported."},{"pos":[145921,146013],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]},{"pos":[146025,146214],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]},{"pos":[146367,146467],"content":"Points to a location that receives the number of type information interfaces provided by the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]},{"pos":[146681,146752],"content":"Late-bound access using the COM <ph id=\"ph1\">`IDispatch`</ph> interface is not supported.","needQuote":true,"needEscape":true,"source":"Late-bound access using the COM `IDispatch` interface is not supported."},{"pos":[147645,147708],"content":"Provides access to properties and methods exposed by an object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]},{"pos":[147720,147899],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]},{"pos":[148163,148185],"content":"Identifies the member.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the member.","pos":[0,22]}]},{"pos":[148244,148286],"content":"Reserved for future use. Must be IID_NULL.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]},{"pos":[148347,148398],"content":"The locale context in which to interpret arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]},{"pos":[148460,148501],"content":"Flags describing the context of the call.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]},{"pos":[148569,148728],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","needQuote":true,"needEscape":true,"nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]},{"pos":[148795,148852],"content":"Pointer to the location where the result is to be stored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]},{"pos":[148919,148978],"content":"Pointer to a structure that contains exception information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]},{"pos":[149043,149093],"content":"The index of the first argument that has an error.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]},{"pos":[149297,149368],"content":"Late-bound access using the COM <ph id=\"ph1\">`IDispatch`</ph> interface is not supported.","needQuote":true,"needEscape":true,"source":"Late-bound access using the COM `IDispatch` interface is not supported."},{"pos":[149695,149752],"content":"Gets a value containing the states of the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value containing the states of the current thread.","pos":[0,57]}]},{"pos":[149765,150050],"content":"The ThreadState property provides more specific information than the <xref:System.Threading.Thread.IsAlive%2A> property.      > [!IMPORTANT] >  Thread state is only of interest in debugging scenarios. Your code should never use thread state to synchronize the activities of threads.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ThreadState property provides more specific information than the &lt;xref:System.Threading.Thread.IsAlive%2A&gt; property.","pos":[0,120],"source":"The ThreadState property provides more specific information than the <xref:System.Threading.Thread.IsAlive%2A> property."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Thread state is only of interest in debugging scenarios.","pos":[126,200],"source":"      > [!IMPORTANT] >  Thread state is only of interest in debugging scenarios."},{"content":"Your code should never use thread state to synchronize the activities of threads.","pos":[201,282]}]},{"pos":[150642,150846],"content":"One of the <xref href=\"System.Threading.ThreadState\"></xref> values indicating the state of the current thread. The initial value is <xref uid=\"langword_csharp_Unstarted\" name=\"Unstarted\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values indicating the state of the current thread.","pos":[0,111],"source":"One of the <xref href=\"System.Threading.ThreadState\"></xref> values indicating the state of the current thread."},{"content":"The initial value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Unstarted\" name=\"Unstarted\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[112,204],"source":" The initial value is <xref uid=\"langword_csharp_Unstarted\" name=\"Unstarted\" href=\"\"></xref>."}]},{"pos":[151396,151454],"content":"Sets the apartment state of a thread before it is started.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the apartment state of a thread before it is started.","pos":[0,58]}]},{"pos":[151467,152306],"content":"New threads are initialized as <xref:System.Threading.ApartmentState?displayProperty=fullName> if their apartment state has not been set before they are started. Apartment state must be set before a thread is started.      > [!NOTE] >  The main application thread is initialized to <xref:System.Threading.ApartmentState?displayProperty=fullName> by default. The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState?displayProperty=fullName> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.       The TrySetApartmentState method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.SetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"New threads are initialized as &lt;xref:System.Threading.ApartmentState?displayProperty=fullName&gt; if their apartment state has not been set before they are started.","pos":[0,161],"source":"New threads are initialized as <xref:System.Threading.ApartmentState?displayProperty=fullName> if their apartment state has not been set before they are started."},{"content":"Apartment state must be set before a thread is started.","pos":[162,217]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The main application thread is initialized to &lt;xref:System.Threading.ApartmentState?displayProperty=fullName&gt; by default.","pos":[223,357],"source":"      > [!NOTE] >  The main application thread is initialized to <xref:System.Threading.ApartmentState?displayProperty=fullName> by default."},{"content":"The only way to set the apartment state of the main application thread to &lt;xref:System.Threading.ApartmentState?displayProperty=fullName&gt; is to apply the &lt;xref:System.STAThreadAttribute&gt; attribute to the entry point method.","pos":[358,581],"source":" The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState?displayProperty=fullName> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method."},{"content":"The TrySetApartmentState method, along with the &lt;xref:System.Threading.Thread.GetApartmentState%2A&gt; method and the &lt;xref:System.Threading.Thread.SetApartmentState%2A&gt; method, replaces the &lt;xref:System.Threading.Thread.ApartmentState%2A&gt; property.","pos":[588,834],"source":"       The TrySetApartmentState method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.SetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property."}]},{"pos":[153945,153969],"content":"The new apartment state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new apartment state.","pos":[0,24]}]},{"pos":[154028,154194],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the apartment state is set; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the apartment state is set; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[154361,154411],"content":"<ph id=\"ph1\">&lt;code&gt;state&lt;/code&gt;</ph> is not a valid apartment state.","needQuote":true,"needEscape":true,"source":"<code>state</code> is not a valid apartment state."},{"pos":[154532,154568],"content":"The thread has already been started.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread has already been started.","pos":[0,36]}]},{"pos":[154944,155107],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[155120,156278],"content":"VolatileRead and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, VolatileRead obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, VolatileRead and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use VolatileRead or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses VolatileRead or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"VolatileRead and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,106],"source":"VolatileRead and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[107,273],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, VolatileRead obtains the very latest value written to a memory location by any processor.","pos":[280,397]},{"content":"This might require flushing processor caches.","pos":[398,443]},{"content":"Even on a uniprocessor system, VolatileRead and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[450,650],"source":"       Even on a uniprocessor system, VolatileRead and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[651,761]},{"content":"Calling this method affects only a single memory access.","pos":[768,824]},{"content":"To provide effective synchronization for a field, all access to the field must use VolatileRead or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[825,972],"source":" To provide effective synchronization for a field, all access to the field must use VolatileRead or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses VolatileRead or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[978,1149],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses VolatileRead or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[156432,156453],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[156509,156564],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[157017,157180],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[157193,158521],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[158681,158702],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[158760,158815],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[159263,159426],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[159439,160767],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[160924,160945],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[161002,161057],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[161505,161668],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[161681,163009],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[163162,163183],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[163240,163295],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[163743,163906],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[163919,165247],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[165402,165423],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[165480,165535],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[165988,166151],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[166164,167492],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[167652,167673],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[167731,167786],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[168239,168402],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[168415,169743],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[169903,169924],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[169982,170037],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[170485,170648],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[170661,171989],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[172146,172167],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[172224,172279],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[172732,172895],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[172908,174236],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[174394,174415],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[174473,174528],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[174981,175144],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[175157,176485],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[176645,176666],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[176724,176779],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[177232,177395],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[177408,178736],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[178892,178913],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[178971,179026],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[179479,179642],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[179655,180983],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[181141,181162],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[181220,181275],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[181733,181896],"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[0,163],"nodes":[{"content":"Reads the value of a field.","pos":[0,27]},{"content":"The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.","pos":[28,163]}]}]},{"pos":[181909,183237],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; obtains the very latest value written to a memory location by any processor.","pos":[314,465],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor."},{"content":"This might require flushing processor caches.","pos":[466,511]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[518,752],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[753,863]},{"content":"Calling this method affects only a single memory access.","pos":[870,926]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[927,1108],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1114,1319],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[183400,183421],"content":"The field to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be read.","pos":[0,21]}]},{"pos":[183480,183535],"content":"The latest value written to the field by any processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest value written to the field by any processor.","pos":[0,55]}]},{"pos":[184022,184124],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[184137,185311],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and VolatileWrite are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, VolatileWrite ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and VolatileWrite ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or VolatileWrite.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or VolatileWrite.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and VolatileWrite are for special cases of synchronization.","pos":[0,106],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and VolatileWrite are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[107,273],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, VolatileWrite ensures that a value written to a memory location is immediately visible to all processors.","pos":[280,413]},{"content":"This might require flushing processor caches.","pos":[414,459]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and VolatileWrite ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[466,666],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and VolatileWrite ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[667,777]},{"content":"Calling this method affects only a single memory access.","pos":[784,840]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or VolatileWrite.","pos":[841,988],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or VolatileWrite."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or VolatileWrite.","pos":[994,1165],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or VolatileWrite."}]},{"pos":[185478,185524],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[185584,185608],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[186116,186218],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[186231,187575],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[187748,187794],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[187856,187880],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[188378,188480],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[188493,189837],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[190007,190053],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[190114,190138],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[190636,190738],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[190751,192095],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[192261,192307],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[192368,192392],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[192890,192992],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[193005,194349],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[194517,194563],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[194624,194648],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[195156,195258],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[195271,196615],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[196788,196834],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[196896,196920],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[197428,197530],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[197543,198887],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[199060,199106],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[199168,199192],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[199690,199792],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[199805,201149],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[201319,201365],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[201426,201450],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[201958,202060],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[202073,203417],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[203588,203634],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[203696,203720],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[204228,204330],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[204343,205687],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[205860,205906],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[205968,205992],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[206500,206602],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[206615,207959],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[208128,208174],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[208236,208260],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[208768,208870],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[208883,210227],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[210398,210444],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[210506,210530],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[211048,211150],"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a value to a field immediately, so that the value is visible to all processors in the computer.","pos":[0,102]}]},{"pos":[211163,212507],"content":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.       Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; are for special cases of synchronization.","pos":[0,140],"source":"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization."},{"content":"Under normal circumstances, the C# <ph id=\"ph1\">`lock`</ph> statement, the Visual Basic <ph id=\"ph2\">`SyncLock`</ph> statement, and the &lt;xref:System.Threading.Monitor&gt; class provide easier alternatives.","pos":[141,307],"source":" Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives."},{"content":"On a multiprocessor system, &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensures that a value written to a memory location is immediately visible to all processors.","pos":[314,481],"source":"       On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors."},{"content":"This might require flushing processor caches.","pos":[482,527]},{"content":"Even on a uniprocessor system, &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; and &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt; ensure that a value is read or written to memory, and not cached (for example, in a processor register).","pos":[534,768],"source":"       Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register)."},{"content":"Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.","pos":[769,879]},{"content":"Calling this method affects only a single memory access.","pos":[886,942]},{"content":"To provide effective synchronization for a field, all access to the field must use &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[943,1124],"source":" To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In C#, using the <ph id=\"ph2\">`volatile`</ph> modifier on a field guarantees that all access to that field uses &lt;xref:System.Threading.Thread.VolatileRead%2A&gt; or &lt;xref:System.Threading.Thread.VolatileWrite%2A&gt;.","pos":[1130,1335],"source":"      > [!NOTE] >  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>."}]},{"pos":[212683,212729],"content":"The field to which the value is to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to which the value is to be written.","pos":[0,46]}]},{"pos":[212792,212816],"content":"The value to be written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be written.","pos":[0,24]}]},{"pos":[213185,213347],"content":"Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the thread to yield to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the thread to yield to.","pos":[0,162],"nodes":[{"content":"Causes the calling thread to yield execution to another thread that is ready to run on the current processor.","pos":[0,109]},{"content":"The operating system selects the thread to yield to.","pos":[110,162]}]}]},{"pos":[213360,214251],"content":"If this method succeeds, the rest of the thread's current time slice is yielded. The operating system schedules the calling thread for another time slice, according to its priority and the status of other threads that are available to run.       Yielding is limited to the processor that is executing the calling thread. The operating system will not switch execution to another processor, even if that processor is idle or is running a thread of lower priority. If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns `false`.       This method is equivalent to using platform invoke to call the native Win32 `SwitchToThread` function. You should call the Yield method instead of using platform invoke, because platform invoke bypasses any custom threading behavior the host has requested.","needQuote":false,"needEscape":true,"nodes":[{"content":"If this method succeeds, the rest of the thread's current time slice is yielded.","pos":[0,80]},{"content":"The operating system schedules the calling thread for another time slice, according to its priority and the status of other threads that are available to run.","pos":[81,239]},{"content":"Yielding is limited to the processor that is executing the calling thread.","pos":[246,320]},{"content":"The operating system will not switch execution to another processor, even if that processor is idle or is running a thread of lower priority.","pos":[321,462]},{"content":"If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns <ph id=\"ph1\">`false`</ph>.","pos":[463,624],"source":" If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns `false`."},{"content":"This method is equivalent to using platform invoke to call the native Win32 <ph id=\"ph1\">`SwitchToThread`</ph> function.","pos":[631,733],"source":"       This method is equivalent to using platform invoke to call the native Win32 `SwitchToThread` function."},{"content":"You should call the Yield method instead of using platform invoke, because platform invoke bypasses any custom threading behavior the host has requested.","pos":[734,887]}]},{"pos":[214382,214579],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operating system switched execution to another thread; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operating system switched execution to another thread; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Thread\n  id: Thread\n  children:\n  - System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)\n  - System.Threading.Thread.#ctor(System.Threading.ThreadStart)\n  - System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)\n  - System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)\n  - System.Threading.Thread.Abort\n  - System.Threading.Thread.Abort(System.Object)\n  - System.Threading.Thread.AllocateDataSlot\n  - System.Threading.Thread.AllocateNamedDataSlot(System.String)\n  - System.Threading.Thread.ApartmentState\n  - System.Threading.Thread.BeginCriticalRegion\n  - System.Threading.Thread.BeginThreadAffinity\n  - System.Threading.Thread.CurrentContext\n  - System.Threading.Thread.CurrentCulture\n  - System.Threading.Thread.CurrentPrincipal\n  - System.Threading.Thread.CurrentThread\n  - System.Threading.Thread.CurrentUICulture\n  - System.Threading.Thread.DisableComObjectEagerCleanup\n  - System.Threading.Thread.EndCriticalRegion\n  - System.Threading.Thread.EndThreadAffinity\n  - System.Threading.Thread.ExecutionContext\n  - System.Threading.Thread.Finalize\n  - System.Threading.Thread.FreeNamedDataSlot(System.String)\n  - System.Threading.Thread.GetApartmentState\n  - System.Threading.Thread.GetCompressedStack\n  - System.Threading.Thread.GetData(System.LocalDataStoreSlot)\n  - System.Threading.Thread.GetDomain\n  - System.Threading.Thread.GetDomainID\n  - System.Threading.Thread.GetHashCode\n  - System.Threading.Thread.GetNamedDataSlot(System.String)\n  - System.Threading.Thread.Interrupt\n  - System.Threading.Thread.IsAlive\n  - System.Threading.Thread.IsBackground\n  - System.Threading.Thread.IsThreadPoolThread\n  - System.Threading.Thread.Join\n  - System.Threading.Thread.Join(System.Int32)\n  - System.Threading.Thread.Join(System.TimeSpan)\n  - System.Threading.Thread.ManagedThreadId\n  - System.Threading.Thread.MemoryBarrier\n  - System.Threading.Thread.Name\n  - System.Threading.Thread.Priority\n  - System.Threading.Thread.ResetAbort\n  - System.Threading.Thread.Resume\n  - System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)\n  - System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)\n  - System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)\n  - System.Threading.Thread.Sleep(System.Int32)\n  - System.Threading.Thread.Sleep(System.TimeSpan)\n  - System.Threading.Thread.SpinWait(System.Int32)\n  - System.Threading.Thread.Start\n  - System.Threading.Thread.Start(System.Object)\n  - System.Threading.Thread.Suspend\n  - System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)\n  - System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Threading.Thread.ThreadState\n  - System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)\n  - System.Threading.Thread.VolatileRead(System.Byte@)\n  - System.Threading.Thread.VolatileRead(System.Double@)\n  - System.Threading.Thread.VolatileRead(System.Int16@)\n  - System.Threading.Thread.VolatileRead(System.Int32@)\n  - System.Threading.Thread.VolatileRead(System.Int64@)\n  - System.Threading.Thread.VolatileRead(System.IntPtr@)\n  - System.Threading.Thread.VolatileRead(System.Object@)\n  - System.Threading.Thread.VolatileRead(System.SByte@)\n  - System.Threading.Thread.VolatileRead(System.Single@)\n  - System.Threading.Thread.VolatileRead(System.UInt16@)\n  - System.Threading.Thread.VolatileRead(System.UInt32@)\n  - System.Threading.Thread.VolatileRead(System.UInt64@)\n  - System.Threading.Thread.VolatileRead(System.UIntPtr@)\n  - System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)\n  - System.Threading.Thread.VolatileWrite(System.Double@,System.Double)\n  - System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)\n  - System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)\n  - System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)\n  - System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)\n  - System.Threading.Thread.VolatileWrite(System.Object@,System.Object)\n  - System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)\n  - System.Threading.Thread.VolatileWrite(System.Single@,System.Single)\n  - System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)\n  - System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)\n  - System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)\n  - System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)\n  - System.Threading.Thread.Yield\n  langs:\n  - csharp\n  name: Thread\n  nameWithType: Thread\n  fullName: System.Threading.Thread\n  type: Class\n  summary: Creates and controls a thread, sets its priority, and gets its status.\n  remarks: \"When a process starts, the common language runtime automatically creates a single foreground thread to execute application code. Along with this main foreground thread, a process can create one or more threads to execute a portion of the program code associated with the process. These threads can execute either in the foreground or in the background. In addition, you can use the <xref:System.Threading.ThreadPool> class to execute code on worker threads that are managed by the common language runtime.  \\n  \\n In this section  \\n  \\n [Starting a thread](#Starting)   \\n [Retrieving Thread objects](#Retrieving)   \\n [Foreground and background threads](#Foreground)   \\n [Culture and threads](#Culture)   \\n [Getting information about and controlling threads](#Properties)   \\n [Accessing the source code for the Thread class](#Source)  \\n  \\n<a name=\\\"Starting\\\"></a>   \\n## Starting a thread  \\n You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor. You then call the <xref:System.Threading.Thread.Start%2A> method to begin execution.  \\n  \\n The Thread constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:  \\n  \\n-   If the method has no arguments, you pass a <xref:System.Threading.ThreadStart> delegate to  the constructor. It has the signature:  \\n  \\n    ```c#  \\n    public delegate void ThreadStart()  \\n    ```  \\n  \\n    ```vb  \\n    Public Delegate Sub ThreadStart()  \\n    ```  \\n  \\n     The following example creates and starts a thread that executes the `ExecuteInForeground` method. The method displays  information about some thread properties, then executes a loop in which it pauses for half a second and displays the elapsed number of seconds. When the thread has executed for at least five seconds, the loop ends and the thread terminates execution.  \\n  \\n     [!code-cs[System.Threading.Thread#1](~/add/codesnippet/csharp/t-system.threading.thread_1.cs)]\\n     [!code-vb[System.Threading.Thread#1](~/add/codesnippet/visualbasic/t-system.threading.thread_1.vb)]  \\n  \\n-   If the method has an argument, you pass a <xref:System.Threading.ParameterizedThreadStart> delegate to the constructor. It has the signature:  \\n  \\n    ```c#  \\n    public delegate void ParameterizedThreadStart(object obj)  \\n    ```  \\n  \\n    ```vb  \\n    Public Delegate Sub ParameterizedThreadStart(obj As Object)  \\n    ```  \\n  \\n     The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type.  \\n  \\n     The following example is identical to the previous one, except that it calls the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor. This version of the `ExecuteInForeground` method has a single parameter that represents the approximate number of milliseconds the loop is to execute.  \\n  \\n     [!code-cs[System.Threading.Thread#2](~/add/codesnippet/csharp/t-system.threading.thread_2.cs)]\\n     [!code-vb[System.Threading.Thread#2](~/add/codesnippet/visualbasic/t-system.threading.thread_2.vb)]  \\n  \\n It is not necessary to retain a reference to a Thread object once you have started the thread. The thread continues to execute until the thread procedure is complete.  \\n  \\n<a name=\\\"Retrieving\\\"></a>   \\n## Retrieving Thread objects  \\n You can use the static (`Shared` in Visual Basic)  <xref:System.Threading.Thread.CurrentThread%2A> property to retrieve a reference to the currently executing thread from the code that the thread is executing. The following example uses the <xref:System.Threading.Thread.CurrentThread%2A> property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread.  \\n  \\n [!code-cs[System.Threading.Thread#4](~/add/codesnippet/csharp/t-system.threading.thread_3.cs)]\\n [!code-vb[System.Threading.Thread#4](~/add/codesnippet/visualbasic/t-system.threading.thread_3.vb)]  \\n  \\n<a name=\\\"Foreground\\\"></a>   \\n## Foreground and background threads  \\n Instances of the Thread class represent either foreground threads or background threads. Background threads are identical to foreground threads with one exception: a background thread does not keep a process running if all foreground threads have terminated. Once all foreground threads have been stopped, the runtime stops all background threads and shuts down.  \\n  \\n By default, the following threads execute in the foreground:  \\n  \\n-   The main application thread.  \\n  \\n-   All threads created by calling a Thread class constructor.  \\n  \\n The following threads execute in the background by default:  \\n  \\n-   Thread pool threads, which are a pool of worker threads maintained by the runtime.  You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.  \\n  \\n    > [!NOTE]\\n    >  Task-based asynchronous operations automatically execute on thread pool threads. Task-based asynchronous operations use the <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> classes to implement the [task-based asynchronous pattern](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   All threads that enter the managed execution environment from unmanaged code.  \\n  \\n You can change a thread to execute in the background by setting the <xref:System.Threading.Thread.IsBackground%2A> property at any time.  Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections.  \\n  \\n The following example illustrates the difference between foreground and background threads. It is like the first example in the [Starting a thread](#Starting) section, except that it sets the thread to execute in the background before starting it. As the output shows, the loop is interrupted before it executes for five seconds.  \\n  \\n [!code-cs[System.Threading.Thread#3](~/add/codesnippet/csharp/t-system.threading.thread_4.cs)]\\n [!code-vb[System.Threading.Thread#3](~/add/codesnippet/visualbasic/t-system.threading.thread_4.vb)]  \\n  \\n<a name=\\\"Culture\\\"></a>   \\n## Culture and threads  \\n Each thread has a culture, represented by the <xref:System.Threading.Thread.CurrentCulture%2A> property, and a UI culture, represented by the <xref:System.Threading.Thread.CurrentUICulture%2A> property.  The current culture supports such culture-sensitive  operations as parsing and formatting, string comparison and sorting, and also controls the writing system and calendar used by a thread. The current UI culture provides for culture-sensitive retrieval of resources in resource files.  \\n  \\n When a new thread is instantiated, its culture and UI culture are defined by the current system culture and UI culture, and not by the culture and UI culture of the thread from which the new thread is created. This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor from the primary thread is English (United States), and not French (France). For more information, see the \\\"Culture and threads\\\" section of the <xref:System.Globalization.CultureInfo> class topic.  \\n  \\n> [!IMPORTANT]\\n>  This is not true of threads that execute asynchronous operations for apps that target the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)] and later versions, In this case, the culture and UI culture is part of an asynchronous operations' context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched. For more information, see the \\\"Culture and task-based asynchronous operations\\\" section of the <xref:System.Globalization.CultureInfo> class topic.  \\n  \\n You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:  \\n  \\n-   You can pass a <xref:System.Globalization.CultureInfo> object that represents that culture to the <xref:System.Threading.ParameterizedThreadStart> delegate or the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=fullName> method.  \\n  \\n-   For apps running on the [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)] and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=fullName> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=fullName> properties. Note that this is a per-application domain setting.  \\n  \\n For more information and examples, see the \\\"Culture and threads\\\" section of the <xref:System.Globalization.CultureInfo> class topic.  \\n  \\n<a name=\\\"Properties\\\"></a>   \\n## Getting information about and controlling threads  \\n You can retrieve a number of property values that provide information about a thread. In some cases, you can also set these property values to control the operation of the thread. These thread properties include:  \\n  \\n-   A name. <xref:System.Threading.Thread.Name%2A> is a write-once property that you can use to identify a thread.  Its default value is `null`.  \\n  \\n-   A hash code, which you can retrieve by calling the <xref:System.Threading.Thread.GetHashCode%2A> method. The hash code can be used to uniquely identify a thread; for the lifetime of your thread, its hash code will not collide with the value from any other thread, regardless of the application domain from which you obtain the value.  \\n  \\n-   A thread ID. The value of the read-only <xref:System.Threading.Thread.ManagedThreadId%2A> property is assigned by the runtime and uniquely identifies a thread within its process.  \\n  \\n    > [!NOTE]\\n    >  An operating-system [ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads. Specifically, a sophisticated host can use the [CLR Hosting API](https://msdn.microsoft.com/library/ms404385.aspx) to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads.  \\n  \\n-   The thread's current state. For the duration of its existence, a thread is always in one or more of the states defined by the <xref:System.Threading.ThreadState> property.  \\n  \\n-   A scheduling priority level, which is defined by the <xref:System.Threading.ThreadPriority> property. Although you can set this value to request a thread's priority, it is not guaranteed to be honored by the operating system.  \\n  \\n-   The read-only <xref:System.Threading.Thread.IsThreadPoolThread%2A> property, which indicates whether a thread is  a thread pool thread.  \\n  \\n-   The <xref:System.Threading.Thread.IsBackground%2A> property. For more information, see the [Foreground and background threads](#Foreground) section.  \\n  \\n<a name=\\\"Source\\\"></a>   \\n## Accessing the source code for the Thread class  \\n To view the .NET Framework source code for the Thread class, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/thread.cs#3980e012bae82e96). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).\"\n  example:\n  - \"The following example demonstrates simple threading functionality.  \\n  \\n [!code-cpp[Classic Thread Example#1](~/add/codesnippet/cpp/t-system.threading.thread_5.cpp)]\\n [!code-vb[Classic Thread Example#1](~/add/codesnippet/visualbasic/t-system.threading.thread_5.vb)]\\n [!code-cs[Classic Thread Example#1](~/add/codesnippet/csharp/t-system.threading.thread_5.cs)]  \\n  \\n This code produces output similar to the following:  \\n  \\n```  \\n[VB, C++, C#]  \\nMain thread: Start a second thread.  \\nMain thread: Do some work.  \\nThreadProc: 0  \\nMain thread: Do some work.  \\nThreadProc: 1  \\nMain thread: Do some work.  \\nThreadProc: 2  \\nMain thread: Do some work.  \\nThreadProc: 3  \\nMain thread: Call Join(), to wait until ThreadProc ends.  \\nThreadProc: 4  \\nThreadProc: 5  \\nThreadProc: 6  \\nThreadProc: 7  \\nThreadProc: 8  \\nThreadProc: 9  \\nMain thread: ThreadProc.Join has returned.  Press Enter to end program.  \\n```\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Thread))]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Runtime.InteropServices._Thread\n  inheritance:\n  - System.Object\n  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n  implements:\n  - System.Runtime.InteropServices._Thread\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)\n  id: '#ctor(System.Threading.ParameterizedThreadStart)'\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Thread(ParameterizedThreadStart)\n  nameWithType: Thread.Thread(ParameterizedThreadStart)\n  fullName: System.Threading.Thread.Thread(ParameterizedThreadStart)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.Thread\"></xref> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.\n  remarks: \"A thread does not begin executing when it is created. To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method. To pass a data object to the thread, use the <xref:System.Threading.Thread.Start%28System.Object%29> method overload.  \\n  \\n> [!NOTE]\\n>  Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread. Use the `AddressOf` operator when passing your method, for example `Dim t As New Thread(AddressOf ThreadProc)`. Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.\"\n  example:\n  - \"The following example shows the syntax for creating and using a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.  \\n  \\n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/m-system.threading.threa_19_1.cpp)]\\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/m-system.threading.threa_19_1.vb)]\\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/m-system.threading.threa_19_1.cs)]\"\n  syntax:\n    content: public Thread (System.Threading.ParameterizedThreadStart start);\n    parameters:\n    - id: start\n      type: System.Threading.ParameterizedThreadStart\n      description: A delegate that represents the methods to be invoked when this thread begins executing.\n  overload: System.Threading.Thread.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>start</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Threading.Thread.#ctor(System.Threading.ThreadStart)\n  id: '#ctor(System.Threading.ThreadStart)'\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Thread(ThreadStart)\n  nameWithType: Thread.Thread(ThreadStart)\n  fullName: System.Threading.Thread.Thread(ThreadStart)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.Thread\"></xref> class.\n  remarks: \"A thread does not begin executing when it is created. To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.  \\n  \\n> [!NOTE]\\n>  Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread. Use the `AddressOf` operator when passing your method for example `Dim t As New Thread(AddressOf ThreadProc)`. Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.\"\n  example:\n  - \"The following code example shows how to create a thread that executes a static method.  \\n  \\n [!code-cpp[System.Threading.Thread.ctor#1](~/add/codesnippet/cpp/m-system.threading.threa_18_1.cpp)]\\n [!code-vb[System.Threading.Thread.ctor#1](~/add/codesnippet/visualbasic/m-system.threading.threa_18_1.vb)]\\n [!code-cs[System.Threading.Thread.ctor#1](~/add/codesnippet/csharp/m-system.threading.threa_18_1.cs)]  \\n  \\n The following code example shows how to create a thread that executes an instance method.  \\n  \\n [!code-cs[System.Threading.Thread.ctor2#1](~/add/codesnippet/csharp/m-system.threading.threa_18_2.cs)]\\n [!code-vb[System.Threading.Thread.ctor2#1](~/add/codesnippet/visualbasic/m-system.threading.threa_18_2.vb)]\\n [!code-cpp[System.Threading.Thread.ctor2#1](~/add/codesnippet/cpp/m-system.threading.threa_18_2.cpp)]\"\n  syntax:\n    content: public Thread (System.Threading.ThreadStart start);\n    parameters:\n    - id: start\n      type: System.Threading.ThreadStart\n      description: A <xref href=\"System.Threading.ThreadStart\"></xref> delegate that represents the methods to be invoked when this thread begins executing.\n  overload: System.Threading.Thread.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>start</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)\n  id: '#ctor(System.Threading.ParameterizedThreadStart,System.Int32)'\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Thread(ParameterizedThreadStart,Int32)\n  nameWithType: Thread.Thread(ParameterizedThreadStart,Int32)\n  fullName: System.Threading.Thread.Thread(ParameterizedThreadStart,Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.Thread\"></xref> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.\n  remarks: \"Avoid using this constructor overload. The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor overload is the recommended stack size for threads. If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.  \\n  \\n> [!IMPORTANT]\\n>  Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte). If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used. No exception is thrown. Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.  \\n  \\n> [!NOTE]\\n>  If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used. Do not do this unless you fully control the code that runs on the thread.  \\n  \\n If `maxStackSize` is less than the minimum stack size, the minimum stack size is used. If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size. For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).  \\n  \\n> [!NOTE]\\n>  On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.  \\n  \\n If you specify a very small stack size, you might need to disable stack-overflow probing. When the stack is severely constrained, the probing can itself cause a stack overflow. To disable stack overflow probing, add the following to your application configuration file.  \\n  \\n```  \\n<configuration>  \\n  <runtime>  \\n    <disableStackOverflowProbing enabled=\\\"true\\\"/>  \\n  </runtime>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public Thread (System.Threading.ParameterizedThreadStart start, int maxStackSize);\n    parameters:\n    - id: start\n      type: System.Threading.ParameterizedThreadStart\n      description: A <xref href=\"System.Threading.ParameterizedThreadStart\"></xref> delegate that represents the methods to be invoked when this thread begins executing.\n    - id: maxStackSize\n      type: System.Int32\n      description: \"The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.  \\n  \\n Important   For partially trusted code, `maxStackSize` is ignored if it is greater than the default stack size. No exception is thrown.\"\n  overload: System.Threading.Thread.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>start</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>maxStackSize</code> is less than zero.\n  platform:\n  - net462\n- uid: System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)\n  id: '#ctor(System.Threading.ThreadStart,System.Int32)'\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Thread(ThreadStart,Int32)\n  nameWithType: Thread.Thread(ThreadStart,Int32)\n  fullName: System.Threading.Thread.Thread(ThreadStart,Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.Thread\"></xref> class, specifying the maximum stack size for the thread.\n  remarks: \"Avoid using this constructor overload. The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> constructor overload is the recommended stack size for threads. If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.  \\n  \\n> [!IMPORTANT]\\n>  Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte). If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used. No exception is thrown. Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.  \\n  \\n> [!NOTE]\\n>  If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used. Do not do this unless you fully control the code that runs on the thread.  \\n  \\n If `maxStackSize` is less than the minimum stack size, the minimum stack size is used. If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size. For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).  \\n  \\n> [!NOTE]\\n>  On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.  \\n  \\n If you specify a very small stack size, you might need to disable stack-overflow probing. When the stack is severely constrained, the probing can itself cause a stack overflow. To disable stack overflow probing, add the following to your application configuration file.  \\n  \\n```  \\n<configuration>  \\n  <runtime>  \\n    <disableStackOverflowProbing enabled=\\\"true\\\"/>  \\n  </runtime>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public Thread (System.Threading.ThreadStart start, int maxStackSize);\n    parameters:\n    - id: start\n      type: System.Threading.ThreadStart\n      description: A <xref href=\"System.Threading.ThreadStart\"></xref> delegate that represents the methods to be invoked when this thread begins executing.\n    - id: maxStackSize\n      type: System.Int32\n      description: \"The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.  \\n  \\n Important   For partially trusted code, `maxStackSize` is ignored if it is greater than the default stack size. No exception is thrown.\"\n  overload: System.Threading.Thread.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>start</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>maxStackSize</code> is less than zero.\n  platform:\n  - net462\n- uid: System.Threading.Thread.Abort\n  id: Abort\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: Thread.Abort()\n  fullName: System.Threading.Thread.Abort()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Raises a <xref href=\"System.Threading.ThreadAbortException\"></xref> in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.\n  remarks: \"When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it. `ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called. `ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread. Unexecuted `finally` blocks are executed before the thread is aborted.  \\n  \\n> [!NOTE]\\n>  When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable. However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running. There is also a chance that a static constructor could be aborted. In rare cases, this might prevent instances of that class from being created in that application domain. In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.  \\n  \\n The thread is not guaranteed to abort immediately, or at all. This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort. To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the Abort method, but there is no guarantee the wait will end.  \\n  \\n> [!NOTE]\\n>  The thread that calls Abort might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region. If the thread that calls Abort holds a lock that the aborted thread requires, a deadlock can occur.  \\n  \\n If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called. If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.  \\n  \\n If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted. A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.  \\n  \\n If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.  \\n  \\n If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`. However, an application cannot detect this situation.  \\n  \\n After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState>. After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState>. With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method. For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.\"\n  syntax:\n    content: public void Abort ();\n    parameters: []\n  overload: System.Threading.Thread.Abort*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread that is being aborted is currently suspended.\n  platform:\n  - net462\n- uid: System.Threading.Thread.Abort(System.Object)\n  id: Abort(System.Object)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Abort(Object)\n  nameWithType: Thread.Abort(Object)\n  fullName: System.Threading.Thread.Abort(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Raises a <xref href=\"System.Threading.ThreadAbortException\"></xref> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates the thread.\n  remarks: \"When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it. `ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called. `ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread. Unexecuted `finally` blocks are executed before the thread is aborted.  \\n  \\n> [!NOTE]\\n>  When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable. However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running. There is a chance that a static constructor could be aborted. In rare cases, this might prevent instances of that class from being created in that application domain. In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.  \\n  \\n The thread is not guaranteed to abort immediately, or at all. This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort. To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the Abort method, but there is no guarantee that the wait will end.  \\n  \\n> [!NOTE]\\n>  The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region. If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.  \\n  \\n If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called. If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.  \\n  \\n If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted. A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.  \\n  \\n If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.  \\n  \\n If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`. However, an application cannot detect this situation.  \\n  \\n After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState>. After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState>. With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method. For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.\"\n  example:\n  - \"The following code example shows how to pass information to a thread that is being aborted.  \\n  \\n [!code-cs[System.Threading.Thread.Abort2#1](~/add/codesnippet/csharp/m-system.threading.threa_12_1.cs)]\\n [!code-cpp[System.Threading.Thread.Abort2#1](~/add/codesnippet/cpp/m-system.threading.threa_12_1.cpp)]\\n [!code-vb[System.Threading.Thread.Abort2#1](~/add/codesnippet/visualbasic/m-system.threading.threa_12_1.vb)]\"\n  syntax:\n    content: public void Abort (object stateInfo);\n    parameters:\n    - id: stateInfo\n      type: System.Object\n      description: An object that contains application-specific information, such as state, which can be used by the thread being aborted.\n  overload: System.Threading.Thread.Abort*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread that is being aborted is currently suspended.\n  platform:\n  - net462\n- uid: System.Threading.Thread.AllocateDataSlot\n  id: AllocateDataSlot\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: AllocateDataSlot()\n  nameWithType: Thread.AllocateDataSlot()\n  fullName: System.Threading.Thread.AllocateDataSlot()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Allocates an unnamed data slot on all the threads. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.\n  remarks: \"> [!IMPORTANT]\\n>  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The slot is allocated on all threads.  \\n  \\n Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.\"\n  example:\n  - \"This section contains two code examples. The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information. The second example shows how to use a data slot to do the same thing.  \\n  \\n **First Example**  \\n  \\n The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information. This technique provides better performance than the technique that is shown in the second example.  \\n  \\n [!code-cs[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/csharp/m-system.threading.threa_16_1.cs)]\\n [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/visualbasic/m-system.threading.threa_16_1.vb)]\\n [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/cpp/m-system.threading.threa_16_1.cpp)]  \\n  \\n **Second Example**  \\n  \\n The following code example demonstrates how to use a data slot to store thread-specific information.  \\n  \\n [!code-cs[System.Threading.Thread.DataSlot#1](~/add/codesnippet/csharp/m-system.threading.threa_16_2.cs)]\\n [!code-cpp[System.Threading.Thread.DataSlot#1](~/add/codesnippet/cpp/m-system.threading.threa_16_2.cpp)]\\n [!code-vb[System.Threading.Thread.DataSlot#1](~/add/codesnippet/visualbasic/m-system.threading.threa_16_2.vb)]\"\n  syntax:\n    content: public static LocalDataStoreSlot AllocateDataSlot ();\n    parameters: []\n    return:\n      type: System.LocalDataStoreSlot\n      description: The allocated named data slot on all threads.\n  overload: System.Threading.Thread.AllocateDataSlot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.AllocateNamedDataSlot(System.String)\n  id: AllocateNamedDataSlot(System.String)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: AllocateNamedDataSlot(String)\n  nameWithType: Thread.AllocateNamedDataSlot(String)\n  fullName: System.Threading.Thread.AllocateNamedDataSlot(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Allocates a named data slot on all threads. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.\n  remarks: \"> [!IMPORTANT]\\n>  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.  \\n  \\n It is not necessary to use the AllocateNamedDataSlot method to allocate a named data slot, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.  \\n  \\n> [!NOTE]\\n>  If the AllocateNamedDataSlot method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated. There is no way to test whether a slot has already been allocated.  \\n  \\n Slots allocated with this method must be freed with <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.\"\n  example:\n  - \"This section contains two code examples. The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information. The second example shows how to use a data slot to do the same thing.  \\n  \\n **First Example**  \\n  \\n The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information. This technique provides better performance than the technique that is shown in the second example.  \\n  \\n [!code-cs[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/csharp/m-system.threading.threa_7_1.cs)]\\n [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/visualbasic/m-system.threading.threa_7_1.vb)]\\n [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/cpp/m-system.threading.threa_7_1.cpp)]  \\n  \\n **Second Example**  \\n  \\n The following example demonstrates how to use a named data slot to store thread-specific information.  \\n  \\n> [!NOTE]\\n>  The example code does not use the AllocateNamedDataSlot method, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated. If the AllocateNamedDataSlot method is used, it should be called in the main thread at program startup.  \\n  \\n [!code-cs[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/csharp/m-system.threading.threa_7_2.cs)]\\n [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/cpp/m-system.threading.threa_7_2.cpp)]\\n [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/visualbasic/m-system.threading.threa_7_2.vb)]\"\n  syntax:\n    content: public static LocalDataStoreSlot AllocateNamedDataSlot (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the data slot to be allocated.\n    return:\n      type: System.LocalDataStoreSlot\n      description: The allocated named data slot on all threads.\n  overload: System.Threading.Thread.AllocateNamedDataSlot*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A named data slot with the specified name already exists.\n  platform:\n  - net462\n- uid: System.Threading.Thread.ApartmentState\n  id: ApartmentState\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: ApartmentState\n  nameWithType: Thread.ApartmentState\n  fullName: System.Threading.Thread.ApartmentState\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets or sets the apartment state of this thread.\n  remarks: \"**The ApartmentState property is obsolete.**  The non-obsolete alternatives are the <xref:System.Threading.Thread.GetApartmentState%2A> method to retrieve the apartment state and the   <xref:System.Threading.Thread.SetApartmentState%2A> method to set the apartment state.  \\n  \\n In the .NET Framework versions 1.0 and 1.1, the `ApartmentState` property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment. This property can be set when the thread is in the `Unstarted` or `Running` thread state; however, it can be set only once for a thread. If the property has not been set, it returns `Unknown`.  \\n  \\n An attempt to use the ApartmentState property to set the apartment state of a thread whose apartment state has already been set is ignored. However, the <xref:System.Threading.Thread.SetApartmentState%2A> method throws a <xref:System.InvalidOperationException> in this case.  \\n  \\n> [!IMPORTANT]\\n>  In the .NET Framework version 2.0, new threads are initialized as <xref:System.Threading.ApartmentState?displayProperty=fullName> if their apartment state has not been set before they are started. The main application thread is initialized to <xref:System.Threading.ApartmentState?displayProperty=fullName> by default. You can no longer set the main application thread to <xref:System.Threading.ApartmentState?displayProperty=fullName> by setting the <xref:System.Threading.ApartmentState?displayProperty=fullName> property on the first line of code. Use the <xref:System.STAThreadAttribute> instead.  \\n  \\n In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the [/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)](~/add/includes/ajax-current-ext-md.md) linker option.\"\n  example:\n  - \"The following code example demonstrates how to set the apartment state of a thread.  \\n  \\n [!code-cs[System.Threading.Thread.ApartmentState#1](~/add/codesnippet/csharp/p-system.threading.threa_8_1.cs)]\\n [!code-cpp[System.Threading.Thread.ApartmentState#1](~/add/codesnippet/cpp/p-system.threading.threa_8_1.cpp)]\\n [!code-vb[System.Threading.Thread.ApartmentState#1](~/add/codesnippet/visualbasic/p-system.threading.threa_8_1.vb)]\"\n  syntax:\n    content: public System.Threading.ApartmentState ApartmentState { get; set; }\n    return:\n      type: System.Threading.ApartmentState\n      description: One of the <xref href=\"System.Threading.ApartmentState\"></xref> values. The initial value is <xref uid=\"langword_csharp_Unknown\" name=\"Unknown\" href=\"\"></xref>.\n  overload: System.Threading.Thread.ApartmentState*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (<xref uid=\"langword_csharp_STA\" name=\"STA\" href=\"\"></xref>) or multithreaded apartment (<xref uid=\"langword_csharp_MTA\" name=\"MTA\" href=\"\"></xref>)).\n  platform:\n  - net462\n- uid: System.Threading.Thread.BeginCriticalRegion\n  id: BeginCriticalRegion\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: BeginCriticalRegion()\n  nameWithType: Thread.BeginCriticalRegion()\n  fullName: System.Threading.Thread.BeginCriticalRegion()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.\n  remarks: \"Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code. A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task. By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.  \\n  \\n For example, consider a task that attempts to allocate memory while holding a lock. If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock. If the current task is terminated, other tasks could be deadlocked.  \\n  \\n When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state. To inform the host that your code is entering a critical region, call BeginCriticalRegion. Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.  \\n  \\n Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.\"\n  example:\n  - \"The following example demonstrates the use of the BeginCriticalRegion and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.  \\n  \\n [!code-cs[System.Threading.Thread.BeginCriticalRegion#1](~/add/codesnippet/csharp/m-system.threading.threa_5_1.cs)]\\n [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/add/codesnippet/cpp/m-system.threading.threa_5_1.cpp)]\\n [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/add/codesnippet/visualbasic/m-system.threading.threa_5_1.vb)]\"\n  syntax:\n    content: public static void BeginCriticalRegion ();\n    parameters: []\n  overload: System.Threading.Thread.BeginCriticalRegion*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.BeginThreadAffinity\n  id: BeginThreadAffinity\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: BeginThreadAffinity()\n  nameWithType: Thread.BeginThreadAffinity()\n  fullName: System.Threading.Thread.BeginThreadAffinity()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.\n  remarks: \"Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management. A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time. Most tasks are not affected by this switching. However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread. These tasks must inform the host when they execute code that should not be switched.  \\n  \\n For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call BeginThreadAffinity before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.  \\n  \\n Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.\"\n  example:\n  - \"The following example demonstrates the use of the BeginThreadAffinity and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.  \\n  \\n [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/add/codesnippet/cpp/m-system.threading.threa_0_1.cpp)]\\n [!code-cs[System.Threading.Thread.BeginThreadAffinity#1](~/add/codesnippet/csharp/m-system.threading.threa_0_1.cs)]\\n [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/add/codesnippet/visualbasic/m-system.threading.threa_0_1.vb)]\"\n  syntax:\n    content: public static void BeginThreadAffinity ();\n    parameters: []\n  overload: System.Threading.Thread.BeginThreadAffinity*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.Threading.Thread.CurrentContext\n  id: CurrentContext\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: CurrentContext\n  nameWithType: Thread.CurrentContext\n  fullName: System.Threading.Thread.CurrentContext\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets the current context in which the thread is executing.\n  syntax:\n    content: public static System.Runtime.Remoting.Contexts.Context CurrentContext { get; }\n    return:\n      type: System.Runtime.Remoting.Contexts.Context\n      description: A <xref href=\"System.Runtime.Remoting.Contexts.Context\"></xref> representing the current thread context.\n  overload: System.Threading.Thread.CurrentContext*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.Threading.Thread.CurrentCulture\n  id: CurrentCulture\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: CurrentCulture\n  nameWithType: Thread.CurrentCulture\n  fullName: System.Threading.Thread.CurrentCulture\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets or sets the culture for the current thread.\n  remarks: \"The <xref:System.Globalization.CultureInfo> object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons. See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains. See the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property to learn how a thread's default culture is determined, and how users set culture information for their computers.  \\n  \\n Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you can set the CurrentCulture property to a neutral culture. This is because the behavior of the <xref:System.Globalization.CultureInfo> class has changed: When it represents a neutral culture, its property values (in particular, the <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, and <xref:System.Globalization.CultureInfo.TextInfo%2A> properties) now reflect the specific culture that is associated with the neutral culture. In earlier versions of the .NET Framework, the CurrentCulture property threw a <xref:System.NotSupportedException> exception when a neutral culture was assigned.\"\n  example:\n  - \"The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel. Additional code is needed.  \\n  \\n [!code-cpp[System.Threading.Thread.Culture#1](~/add/codesnippet/cpp/p-system.threading.threa_3_1.cpp)]\\n [!code-cs[System.Threading.Thread.Culture#1](~/add/codesnippet/csharp/p-system.threading.threa_3_1.cs)]\\n [!code-vb[System.Threading.Thread.Culture#1](~/add/codesnippet/visualbasic/p-system.threading.threa_3_1.vb)]\"\n  syntax:\n    content: public System.Globalization.CultureInfo CurrentCulture { get; set; }\n    return:\n      type: System.Globalization.CultureInfo\n      description: An object that represents the culture for the current thread.\n  overload: System.Threading.Thread.CurrentCulture*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Threading.Thread.CurrentPrincipal\n  id: CurrentPrincipal\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: CurrentPrincipal\n  nameWithType: Thread.CurrentPrincipal\n  fullName: System.Threading.Thread.CurrentPrincipal\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets or sets the thread's current principal (for role-based security).\n  remarks: ''\n  example:\n  - \"The following code example shows how to set and retrieve the principal of a thread.  \\n  \\n [!code-cpp[System.Threading.Thread.CurrentPrincipal#1](~/add/codesnippet/cpp/p-system.threading.threa_11_1.cpp)]\\n [!code-cs[System.Threading.Thread.CurrentPrincipal#1](~/add/codesnippet/csharp/p-system.threading.threa_11_1.cs)]\\n [!code-vb[System.Threading.Thread.CurrentPrincipal#1](~/add/codesnippet/visualbasic/p-system.threading.threa_11_1.vb)]\"\n  syntax:\n    content: public static System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }\n    return:\n      type: System.Security.Principal.IPrincipal\n      description: An <xref:System.Security.Principal.IPrincipal> value representing the security context.\n  overload: System.Threading.Thread.CurrentPrincipal*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the permission required to set the principal.\n  platform:\n  - net462\n- uid: System.Threading.Thread.CurrentThread\n  id: CurrentThread\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: CurrentThread\n  nameWithType: Thread.CurrentThread\n  fullName: System.Threading.Thread.CurrentThread\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets the currently running thread.\n  remarks: ''\n  example:\n  - \"The following example creates a task that in turn creates 20 child tasks. The application itself, as well as each task, calls the `ShowThreadInformation` method, which uses the CurrentThread property  to display information about the thread on which it is running.  \\n  \\n [!code-vb[System.Threading.Thread.CurrentThread#1](~/add/codesnippet/visualbasic/p-system.threading.threa_1_1.vb)]\\n [!code-cs[System.Threading.Thread.CurrentThread#1](~/add/codesnippet/csharp/p-system.threading.threa_1_1.cs)]  \\n  \\n Each child task generates 1 million random numbers between 1 and 1 million and returns their mean. The parent task calls the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=fullName> method to ensure that the child tasks have completed before displaying the mean returned by each task and calculating the mean of means.  \\n  \\n Note that while the application runs on a foreground thread, each task runs on a thread pool thread.\"\n  syntax:\n    content: public static System.Threading.Thread CurrentThread { get; }\n    return:\n      type: System.Threading.Thread\n      description: A <xref href=\"System.Threading.Thread\"></xref> that is the representation of the currently running thread.\n  overload: System.Threading.Thread.CurrentThread*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.CurrentUICulture\n  id: CurrentUICulture\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: CurrentUICulture\n  nameWithType: Thread.CurrentUICulture\n  fullName: System.Threading.Thread.CurrentUICulture\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.\n  remarks: \"The UI culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture. See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains. See the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName> property to learn how a thread's default UI culture is determined.  \\n  \\n The <xref:System.Globalization.CultureInfo> returned by this property can be a neutral culture. Neutral cultures should not be used with formatting methods such as [String.Format(IFormatProvider, String, Object\\\\[\\\\])](assetId:///M:System.String.Format(System.IFormatProvider,System.String,System.Object[])?qualifyHint=True&autoUpgrade=False), <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>, and <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=fullName>. Use the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=fullName> method to get a specific culture, or use the <xref:System.Threading.Thread.CurrentCulture%2A> property.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=fullName> method throws <xref:System.ArgumentException> for the neutral cultures \\\"zh-Hant\\\" (\\\"zh-CHT\\\") and \\\"zh-Hans\\\" (\\\"zh-CHS\\\").\"\n  example:\n  - \"The following example determines whether the language of the current thread's UI culture is French. If it is not, it sets the UI culture of the current thread to English (United States).  \\n  \\n [!code-cs[System.Threading.Thread.CurrentUICulture#1](~/add/codesnippet/csharp/p-system.threading.threa_2_1.cs)]\\n [!code-vb[System.Threading.Thread.CurrentUICulture#1](~/add/codesnippet/visualbasic/p-system.threading.threa_2_1.vb)]  \\n  \\n The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel. Additional code is needed.  \\n  \\n [!code-cpp[System.Threading.Thread.Culture#1](~/add/codesnippet/cpp/p-system.threading.threa_2_2.cpp)]\\n [!code-cs[System.Threading.Thread.Culture#1](~/add/codesnippet/csharp/p-system.threading.threa_2_2.cs)]\\n [!code-vb[System.Threading.Thread.Culture#1](~/add/codesnippet/visualbasic/p-system.threading.threa_2_2.vb)]\"\n  syntax:\n    content: public System.Globalization.CultureInfo CurrentUICulture { get; set; }\n    return:\n      type: System.Globalization.CultureInfo\n      description: An object that represents the current culture.\n  overload: System.Threading.Thread.CurrentUICulture*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The property is set to a culture name that cannot be used to locate a resource file. Resource filenames must include only letters, numbers, hyphens or underscores.\n  platform:\n  - net462\n- uid: System.Threading.Thread.DisableComObjectEagerCleanup\n  id: DisableComObjectEagerCleanup\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: DisableComObjectEagerCleanup()\n  nameWithType: Thread.DisableComObjectEagerCleanup()\n  fullName: System.Threading.Thread.DisableComObjectEagerCleanup()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.\n  remarks: \"By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically. The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:  \\n  \\n-   The application does its own message pumping.  \\n  \\n-   The application needs to control precisely when message pumping occurs.  \\n  \\n Such applications can use the DisableComObjectEagerCleanup method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.  \\n  \\n When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread. When your application is ready to clean up runtime callable wrappers, use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=fullName> method to instruct the runtime to clean up all runtime callable wrappers in the current context. Message pumping occurs while the method executes.\"\n  syntax:\n    content: public void DisableComObjectEagerCleanup ();\n    parameters: []\n  overload: System.Threading.Thread.DisableComObjectEagerCleanup*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.EndCriticalRegion\n  id: EndCriticalRegion\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: EndCriticalRegion()\n  nameWithType: Thread.EndCriticalRegion()\n  fullName: System.Threading.Thread.EndCriticalRegion()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.\n  remarks: \"Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code. A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task. By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.  \\n  \\n For example, consider a task that attempts to allocate memory while holding a lock. If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock. If the current task is terminated, other tasks could be deadlocked.  \\n  \\n When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state. To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>. Call EndCriticalRegion when execution returns to a non-critical region of code.  \\n  \\n Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.\"\n  example:\n  - \"The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and EndCriticalRegion methods to divide a block of code into critical and non-critical regions.  \\n  \\n [!code-cs[System.Threading.Thread.BeginCriticalRegion#1](~/add/codesnippet/csharp/m-system.threading.threa_1_1.cs)]\\n [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/add/codesnippet/cpp/m-system.threading.threa_1_1.cpp)]\\n [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/add/codesnippet/visualbasic/m-system.threading.threa_1_1.vb)]\"\n  syntax:\n    content: public static void EndCriticalRegion ();\n    parameters: []\n  overload: System.Threading.Thread.EndCriticalRegion*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.EndThreadAffinity\n  id: EndThreadAffinity\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: EndThreadAffinity()\n  nameWithType: Thread.EndThreadAffinity()\n  fullName: System.Threading.Thread.EndThreadAffinity()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.\n  remarks: \"Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management. A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time. Most tasks are not affected by this switching. However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread. These tasks must inform the host when they execute code that should not be switched.  \\n  \\n For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and EndThreadAffinity after releasing the lock.  \\n  \\n Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.\"\n  example:\n  - \"The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and EndThreadAffinity methods to notify a host that a block of code depends on the identity of a physical operating system thread.  \\n  \\n [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/add/codesnippet/cpp/m-system.threading.threa_3_1.cpp)]\\n [!code-cs[System.Threading.Thread.BeginThreadAffinity#1](~/add/codesnippet/csharp/m-system.threading.threa_3_1.cs)]\\n [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/add/codesnippet/visualbasic/m-system.threading.threa_3_1.vb)]\"\n  syntax:\n    content: public static void EndThreadAffinity ();\n    parameters: []\n  overload: System.Threading.Thread.EndThreadAffinity*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.Threading.Thread.ExecutionContext\n  id: ExecutionContext\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: ExecutionContext\n  nameWithType: Thread.ExecutionContext\n  fullName: System.Threading.Thread.ExecutionContext\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets an <xref:System.Threading.ExecutionContext> object that contains information about the various contexts of the current thread.\n  remarks: The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution. This includes security context, call context, synchronization context, localization context, and transaction context.\n  syntax:\n    content: public System.Threading.ExecutionContext ExecutionContext { get; }\n    return:\n      type: System.Threading.ExecutionContext\n      description: An <xref:System.Threading.ExecutionContext> object that consolidates context information for the current thread.\n  overload: System.Threading.Thread.ExecutionContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.Finalize\n  id: Finalize\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: Thread.Finalize()\n  fullName: System.Threading.Thread.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.Threading.Thread\"></xref> object.\n  remarks: The garbage collector calls Finalize when the current object is ready to be finalized.\n  syntax:\n    content: ~Thread ();\n    parameters: []\n  overload: System.Threading.Thread.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.FreeNamedDataSlot(System.String)\n  id: FreeNamedDataSlot(System.String)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: FreeNamedDataSlot(String)\n  nameWithType: Thread.FreeNamedDataSlot(String)\n  fullName: System.Threading.Thread.FreeNamedDataSlot(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Eliminates the association between a name and a slot, for all threads in the process. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.\n  remarks: \"> [!IMPORTANT]\\n>  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).  \\n  \\n After any thread calls `FreeNamedDataSlot`, any other thread that calls <xref:System.Threading.Thread.GetNamedDataSlot%2A> with the same name will allocate a new slot associated with the name. Subsequent calls to `GetNamedDataSlot` by any thread will return the new slot. However, any thread that still has a <xref:System.LocalDataStoreSlot?displayProperty=fullName> returned by an earlier call to `GetNamedDataSlot` can continue to use the old slot.  \\n  \\n A slot that has been associated with a name is released only when every `LocalDataStoreSlot` that was obtained prior to the call to `FreeNamedDataSlot` has been released and garbage-collected.  \\n  \\n Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.\"\n  example:\n  - \"This section contains two code examples. The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information. The second example shows how to use a data slot to do the same thing.  \\n  \\n **First Example**  \\n  \\n The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information. This technique provides better performance than the technique that is shown in the second example.  \\n  \\n [!code-cs[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/csharp/m-system.threading.threa_9_1.cs)]\\n [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/visualbasic/m-system.threading.threa_9_1.vb)]\\n [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/cpp/m-system.threading.threa_9_1.cpp)]  \\n  \\n **Second Example**  \\n  \\n The following example demonstrates how to use a named data slot to store thread-specific information.  \\n  \\n [!code-cs[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/csharp/m-system.threading.threa_9_2.cs)]\\n [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/cpp/m-system.threading.threa_9_2.cpp)]\\n [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/visualbasic/m-system.threading.threa_9_2.vb)]\"\n  syntax:\n    content: public static void FreeNamedDataSlot (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the data slot to be freed.\n  overload: System.Threading.Thread.FreeNamedDataSlot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.GetApartmentState\n  id: GetApartmentState\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: GetApartmentState()\n  nameWithType: Thread.GetApartmentState()\n  fullName: System.Threading.Thread.GetApartmentState()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Returns an <xref href=\"System.Threading.ApartmentState\"></xref> value indicating the apartment state.\n  remarks: This method, along with the <xref:System.Threading.Thread.SetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.\n  example:\n  - \"The following code example demonstrates the GetApartmentState, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods. The code example creates a thread. Before the thread is started, GetApartmentState displays the initial <xref:System.Threading.ApartmentState?displayProperty=fullName> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState?displayProperty=fullName>. The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState?displayProperty=fullName> because the apartment state is already set. If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.  \\n  \\n After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again. This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.  \\n  \\n [!code-vb[Thread.GetSetTrySetApartmentState#1](~/add/codesnippet/visualbasic/m-system.threading.threa_11_1.vb)]\\n [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/add/codesnippet/cpp/m-system.threading.threa_11_1.cpp)]\\n [!code-cs[Thread.GetSetTrySetApartmentState#1](~/add/codesnippet/csharp/m-system.threading.threa_11_1.cs)]\"\n  syntax:\n    content: public System.Threading.ApartmentState GetApartmentState ();\n    parameters: []\n    return:\n      type: System.Threading.ApartmentState\n      description: One of the <xref href=\"System.Threading.ApartmentState\"></xref> values indicating the apartment state of the managed thread. The default is <xref href=\"System.Threading.ApartmentState\"></xref>.\n  overload: System.Threading.Thread.GetApartmentState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.GetCompressedStack\n  id: GetCompressedStack\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: GetCompressedStack()\n  nameWithType: Thread.GetCompressedStack()\n  fullName: System.Threading.Thread.GetCompressedStack()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Returns a <xref href=\"System.Threading.CompressedStack\"></xref> object that can be used to capture the stack for the current thread.\n  remarks: This method is no longer supported.\n  syntax:\n    content: public System.Threading.CompressedStack GetCompressedStack ();\n    parameters: []\n    return:\n      type: System.Threading.CompressedStack\n      description: None.\n  overload: System.Threading.Thread.GetCompressedStack*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: In all cases.\n  platform:\n  - net462\n- uid: System.Threading.Thread.GetData(System.LocalDataStoreSlot)\n  id: GetData(System.LocalDataStoreSlot)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: GetData(LocalDataStoreSlot)\n  nameWithType: Thread.GetData(LocalDataStoreSlot)\n  fullName: System.Threading.Thread.GetData(LocalDataStoreSlot)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Retrieves the value from the specified slot on the current thread, within the current thread's current domain. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.\n  remarks: \"> [!IMPORTANT]\\n>  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.  \\n  \\n> [!NOTE]\\n>  GetData is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread. To avoid confusion, use the class name when calling `Shared` methods: `Dim test As Object = Thread.GetData(testSlot)`.\"\n  example:\n  - \"This section contains two code examples. The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information. The second example shows how to use a data slot to do the same thing.  \\n  \\n **First Example**  \\n  \\n The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information. This technique provides better performance than the technique that is shown in the second example.  \\n  \\n [!code-cs[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/csharp/m-system.threading.threa_27_1.cs)]\\n [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/visualbasic/m-system.threading.threa_27_1.vb)]\\n [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/cpp/m-system.threading.threa_27_1.cpp)]  \\n  \\n **Second Example**  \\n  \\n The following example demonstrates how to use a data slot to store thread-specific information.  \\n  \\n [!code-cs[System.Threading.Thread.DataSlot#1](~/add/codesnippet/csharp/m-system.threading.threa_27_2.cs)]\\n [!code-cpp[System.Threading.Thread.DataSlot#1](~/add/codesnippet/cpp/m-system.threading.threa_27_2.cpp)]\\n [!code-vb[System.Threading.Thread.DataSlot#1](~/add/codesnippet/visualbasic/m-system.threading.threa_27_2.vb)]\"\n  syntax:\n    content: public static object GetData (LocalDataStoreSlot slot);\n    parameters:\n    - id: slot\n      type: System.LocalDataStoreSlot\n      description: The <xref href=\"System.LocalDataStoreSlot\"></xref> from which to get the value.\n    return:\n      type: System.Object\n      description: The retrieved value.\n  overload: System.Threading.Thread.GetData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.GetDomain\n  id: GetDomain\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: GetDomain()\n  nameWithType: Thread.GetDomain()\n  fullName: System.Threading.Thread.GetDomain()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Returns the current domain in which the current thread is running.\n  remarks: ''\n  example:\n  - \"The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.  \\n  \\n [!code-cs[System.Threading.Thread.Domain#1](~/add/codesnippet/csharp/m-system.threading.threa_29_1.cs)]\\n [!code-vb[System.Threading.Thread.Domain#1](~/add/codesnippet/visualbasic/m-system.threading.threa_29_1.vb)]\\n [!code-cpp[System.Threading.Thread.Domain#1](~/add/codesnippet/cpp/m-system.threading.threa_29_1.cpp)]\"\n  syntax:\n    content: public static AppDomain GetDomain ();\n    parameters: []\n    return:\n      type: System.AppDomain\n      description: An <xref href=\"System.AppDomain\"></xref> representing the current application domain of the running thread.\n  overload: System.Threading.Thread.GetDomain*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.GetDomainID\n  id: GetDomainID\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: GetDomainID()\n  nameWithType: Thread.GetDomainID()\n  fullName: System.Threading.Thread.GetDomainID()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Returns a unique application domain identifier.\n  remarks: ''\n  example:\n  - \"The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.  \\n  \\n [!code-cs[System.Threading.Thread.Domain#1](~/add/codesnippet/csharp/m-system.threading.threa_17_1.cs)]\\n [!code-vb[System.Threading.Thread.Domain#1](~/add/codesnippet/visualbasic/m-system.threading.threa_17_1.vb)]\\n [!code-cpp[System.Threading.Thread.Domain#1](~/add/codesnippet/cpp/m-system.threading.threa_17_1.cpp)]\"\n  syntax:\n    content: public static int GetDomainID ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer uniquely identifying the application domain.\n  overload: System.Threading.Thread.GetDomainID*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.GetHashCode\n  id: GetHashCode\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Thread.GetHashCode()\n  fullName: System.Threading.Thread.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Returns a hash code for the current thread.\n  remarks: The hash code is not guaranteed to be unique. Use the <xref:System.Threading.Thread.ManagedThreadId%2A> property if you need a unique identifier for a managed thread.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: An integer hash code value.\n  overload: System.Threading.Thread.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.GetNamedDataSlot(System.String)\n  id: GetNamedDataSlot(System.String)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: GetNamedDataSlot(String)\n  nameWithType: Thread.GetNamedDataSlot(String)\n  fullName: System.Threading.Thread.GetNamedDataSlot(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Looks up a named data slot. For better performance, use fields that are marked with the <xref:System.ThreadStaticAttribute> attribute instead.\n  remarks: \"> [!IMPORTANT]\\n>  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.  \\n  \\n If the named slot does not exist, a new slot is allocated. Named data slots are public and can be manipulated by anyone.\"\n  example:\n  - \"This section contains two code examples. The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information. The second example shows how to use a data slot to do the same thing.  \\n  \\n **First Example**  \\n  \\n The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information. This technique provides better performance than the technique that is shown in the second example.  \\n  \\n [!code-cs[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/csharp/m-system.threading.threa_13_1.cs)]\\n [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/visualbasic/m-system.threading.threa_13_1.vb)]\\n [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/cpp/m-system.threading.threa_13_1.cpp)]  \\n  \\n **Second Example**  \\n  \\n The following example demonstrates how to use a named data slot to store thread-specific information.  \\n  \\n [!code-cs[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/csharp/m-system.threading.threa_13_2.cs)]\\n [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/cpp/m-system.threading.threa_13_2.cpp)]\\n [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/visualbasic/m-system.threading.threa_13_2.vb)]\"\n  syntax:\n    content: public static LocalDataStoreSlot GetNamedDataSlot (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the local data slot.\n    return:\n      type: System.LocalDataStoreSlot\n      description: A <xref href=\"System.LocalDataStoreSlot\"></xref> allocated for this thread.\n  overload: System.Threading.Thread.GetNamedDataSlot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.Interrupt\n  id: Interrupt\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Interrupt()\n  nameWithType: Thread.Interrupt()\n  fullName: System.Threading.Thread.Interrupt()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Interrupts a thread that is in the <xref uid=\"langword_csharp_WaitSleepJoin\" name=\"WaitSleepJoin\" href=\"\"></xref> thread state.\n  remarks: \"If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.  \\n  \\n <xref:System.Threading.ThreadInterruptedException> is thrown in the interrupted thread, but not until the thread blocks. If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.\"\n  example:\n  - \"The following code example shows the behavior of a running thread when it is interrupted and subsequently gets blocked.  \\n  \\n [!code-cpp[System.Threading.Thread.Interrupt#1](~/add/codesnippet/cpp/m-system.threading.threa_21_1.cpp)]\\n [!code-vb[System.Threading.Thread.Interrupt#1](~/add/codesnippet/visualbasic/m-system.threading.threa_21_1.vb)]\\n [!code-cs[System.Threading.Thread.Interrupt#1](~/add/codesnippet/csharp/m-system.threading.threa_21_1.cs)]\"\n  syntax:\n    content: public void Interrupt ();\n    parameters: []\n  overload: System.Threading.Thread.Interrupt*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the appropriate <xref href=\"System.Security.Permissions.SecurityPermission\"></xref>.\n  platform:\n  - net462\n- uid: System.Threading.Thread.IsAlive\n  id: IsAlive\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: IsAlive\n  nameWithType: Thread.IsAlive\n  fullName: System.Threading.Thread.IsAlive\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets a value indicating the execution status of the current thread.\n  syntax:\n    content: public bool IsAlive { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this thread has been started and has not terminated normally or aborted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Threading.Thread.IsAlive*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.IsBackground\n  id: IsBackground\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: IsBackground\n  nameWithType: Thread.IsBackground\n  fullName: System.Threading.Thread.IsBackground\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets or sets a value indicating whether or not a thread is a background thread.\n  remarks: \"A thread is either a background thread or a foreground thread. Background threads are identical to foreground threads, except that background threads do not prevent a process from terminating. Once all foreground threads belonging to a process have terminated, the common language runtime ends the process. Any remaining background threads are stopped and do not complete.  \\n  \\n By default, the following threads execute in the foreground (that is, their IsBackground property returns `false`):  \\n  \\n-   The primary thread (or main application thread).  \\n  \\n-   All threads created by calling a <xref:System.Threading.Thread> class constructor.  \\n  \\n By default, the following threads execute in the background  (that is, their IsBackground property returns `true`):  \\n  \\n-   Thread pool threads, which are a pool of worker threads maintained by the runtime. You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.  \\n  \\n    > [!NOTE]\\n    >  Task-based asynchronous operations automatically execute on thread pool threads.  \\n  \\n-   All threads that enter the managed execution environment from unmanaged code.\"\n  example:\n  - \"The following example contrasts the behavior of foreground and background threads. It creates a foreground thread and a background thread. The foreground thread keeps the process running until completes its `for` loop and terminates. However, as the output from the example shows, because the foreground thread has finished execution, the process is terminated before the background thread has completed execution.  \\n  \\n [!code-cs[System.Threading.Thread.IsBackground#1](~/add/codesnippet/csharp/p-system.threading.threa_7_1.cs)]\\n [!code-cpp[System.Threading.Thread.IsBackground#1](~/add/codesnippet/cpp/p-system.threading.threa_7_1.cpp)]\\n [!code-vb[System.Threading.Thread.IsBackground#1](~/add/codesnippet/visualbasic/p-system.threading.threa_7_1.vb)]\"\n  syntax:\n    content: public bool IsBackground { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this thread is or is to become a background thread; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Threading.Thread.IsBackground*\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread is dead.\n  platform:\n  - net462\n- uid: System.Threading.Thread.IsThreadPoolThread\n  id: IsThreadPoolThread\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: IsThreadPoolThread\n  nameWithType: Thread.IsThreadPoolThread\n  fullName: System.Threading.Thread.IsThreadPoolThread\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets a value indicating whether or not a thread belongs to the managed thread pool.\n  remarks: For more information see [The Managed Thread Pool](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - \"The following code example shows how to determine whether a thread is from the thread pool.  \\n  \\n [!code-cpp[System.Threading.Thread.IsThreadPoolThread#1](~/add/codesnippet/cpp/p-system.threading.threa_0_1.cpp)]\\n [!code-cs[System.Threading.Thread.IsThreadPoolThread#1](~/add/codesnippet/csharp/p-system.threading.threa_0_1.cs)]\\n [!code-vb[System.Threading.Thread.IsThreadPoolThread#1](~/add/codesnippet/visualbasic/p-system.threading.threa_0_1.vb)]\"\n  syntax:\n    content: public bool IsThreadPoolThread { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this thread belongs to the managed thread pool; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Threading.Thread.IsThreadPoolThread*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.Join\n  id: Join\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Join()\n  nameWithType: Thread.Join()\n  fullName: System.Threading.Thread.Join()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <xref uid=\"langword_csharp_SendMessage\" name=\"SendMessage\" href=\"\"></xref> pumping.\n  remarks: \"Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until the thread whose Join method is called has completed. Use this method to ensure that a thread has been terminated. The caller will block indefinitely if the thread does not terminate. In the following example, the `Thread1` thread calls the Join method of `Thread2`, which causes `Thread1` to block until `Thread2` has completed.  \\n  \\n [!code-cs[System.Threading.Thread.Join#1](~/add/codesnippet/csharp/m-system.threading.threa_24_1.cs)]\\n [!code-vb[System.Threading.Thread.Join#1](~/add/codesnippet/visualbasic/m-system.threading.threa_24_1.vb)]  \\n  \\n If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.  \\n  \\n> [!WARNING]\\n>  You should never call the Join method of the <xref:System.Threading.Thread> object that represents the current thread from the current thread. This causes your app to hang because the current thread waits upon itself indefinitely,  \\n  \\n This method changes the state of the calling thread to include <xref:System.Threading.ThreadState?displayProperty=fullName>. You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state.\"\n  syntax:\n    content: public void Join ();\n    parameters: []\n  overload: System.Threading.Thread.Join*\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The caller attempted to join a thread that is in the <xref href=\"System.Threading.ThreadState\"></xref> state.\n  - type: System.Threading.ThreadInterruptedException\n    commentId: T:System.Threading.ThreadInterruptedException\n    description: The thread is interrupted while waiting.\n  platform:\n  - net462\n- uid: System.Threading.Thread.Join(System.Int32)\n  id: Join(System.Int32)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Join(Int32)\n  nameWithType: Thread.Join(Int32)\n  fullName: System.Threading.Thread.Join(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.\n  remarks: \"Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed. In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.  \\n  \\n [!code-cs[System.Threading.Thread.Join#2](~/add/codesnippet/csharp/m-system.threading.threa_8_1.cs)]\\n [!code-vb[System.Threading.Thread.Join#2](~/add/codesnippet/visualbasic/m-system.threading.threa_8_1.vb)]  \\n  \\n If <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> is specified for the `millisecondsTimeout` parameter, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.  \\n  \\n If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.  \\n  \\n This method changes the state of the calling thread to include <xref:System.Threading.ThreadState?displayProperty=fullName>. You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state.\"\n  syntax:\n    content: public bool Join (int millisecondsTimeout);\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait for the thread to terminate.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the thread has terminated; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the thread has not terminated after the amount of time specified by the <code>millisecondsTimeout</code> parameter has elapsed.\n  overload: System.Threading.Thread.Join*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value of <code>millisecondsTimeout</code> is negative and is not equal to &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; in milliseconds.\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread has not been started.\n  platform:\n  - net462\n- uid: System.Threading.Thread.Join(System.TimeSpan)\n  id: Join(System.TimeSpan)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Join(TimeSpan)\n  nameWithType: Thread.Join(TimeSpan)\n  fullName: System.Threading.Thread.Join(TimeSpan)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.\n  remarks: \"Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed. In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.  \\n  \\n [!code-cs[System.Threading.Thread.Join#3](~/add/codesnippet/csharp/m-system.threading.threa_28_1.cs)]\\n [!code-vb[System.Threading.Thread.Join#3](~/add/codesnippet/visualbasic/m-system.threading.threa_28_1.vb)]  \\n  \\n If <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> is specified for `timeout`, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.  \\n  \\n If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.  \\n  \\n This method changes the state of the current thread to include <xref:System.Threading.ThreadState>. You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state.\"\n  example:\n  - \"The following code example demonstrates how to use a `TimeSpan` value with the `Join` method.  \\n  \\n [!code-cpp[System.Threading.Thread.Timespan#1](~/add/codesnippet/cpp/m-system.threading.threa_28_2.cpp)]\\n [!code-cs[System.Threading.Thread.Timespan#1](~/add/codesnippet/csharp/m-system.threading.threa_28_2.cs)]\\n [!code-vb[System.Threading.Thread.Timespan#1](~/add/codesnippet/visualbasic/m-system.threading.threa_28_2.vb)]\"\n  syntax:\n    content: public bool Join (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref:System.TimeSpan> set to the amount of time to wait for the thread to terminate.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the thread terminated; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the thread has not terminated after the amount of time specified by the <code>timeout</code> parameter has elapsed.\n  overload: System.Threading.Thread.Join*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value of <code>timeout</code> is negative and is not equal to &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; in milliseconds, or is greater than &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt; milliseconds.\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The caller attempted to join a thread that is in the <xref href=\"System.Threading.ThreadState\"></xref> state.\n  platform:\n  - net462\n- uid: System.Threading.Thread.ManagedThreadId\n  id: ManagedThreadId\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: ManagedThreadId\n  nameWithType: Thread.ManagedThreadId\n  fullName: System.Threading.Thread.ManagedThreadId\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets a unique identifier for the current managed thread.\n  remarks: \"A thread's ManagedThreadId property value serves to uniquely identify that thread within its process.  \\n  \\n The value of the ManagedThreadId property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.\"\n  syntax:\n    content: public int ManagedThreadId { get; }\n    return:\n      type: System.Int32\n      description: An integer that represents a unique identifier for this managed thread.\n  overload: System.Threading.Thread.ManagedThreadId*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.MemoryBarrier\n  id: MemoryBarrier\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: MemoryBarrier()\n  nameWithType: Thread.MemoryBarrier()\n  fullName: System.Threading.Thread.MemoryBarrier()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: 'Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to MemoryBarrier execute after memory accesses that follow the call to MemoryBarrier.'\n  remarks: \"MemoryBarrier is required only on multiprocessor systems with weak memory ordering (for example, a system employing multiple Intel Itanium processors).  \\n  \\n For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data.\"\n  syntax:\n    content: public static void MemoryBarrier ();\n    parameters: []\n  overload: System.Threading.Thread.MemoryBarrier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.Name\n  id: Name\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Name\n  nameWithType: Thread.Name\n  fullName: System.Threading.Thread.Name\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets or sets the name of the thread.\n  remarks: \"This property is write-once. Because the default value of a thread's Name property is `null`, you can determine whether a name has already been explicitly assigned to the thread by comparing it with `null`.  \\n  \\n The string assigned to the Name property can include any Unicode character.\"\n  example:\n  - \"The following example shows how to name a thread.  \\n  \\n [!code-cs[System.Threading.Thread.Name#1](~/add/codesnippet/csharp/p-system.threading.threa_4_1.cs)]\\n [!code-cpp[System.Threading.Thread.Name#1](~/add/codesnippet/cpp/p-system.threading.threa_4_1.cpp)]\\n [!code-vb[System.Threading.Thread.Name#1](~/add/codesnippet/visualbasic/p-system.threading.threa_4_1.vb)]\"\n  syntax:\n    content: public string Name { get; set; }\n    return:\n      type: System.String\n      description: A string containing the name of the thread, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no name was set.\n  overload: System.Threading.Thread.Name*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A set operation was requested, but the <xref uid=\"langword_csharp_Name\" name=\"Name\" href=\"\"></xref> property has already been set.\n  platform:\n  - net462\n- uid: System.Threading.Thread.Priority\n  id: Priority\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Priority\n  nameWithType: Thread.Priority\n  fullName: System.Threading.Thread.Priority\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets or sets a value indicating the scheduling priority of a thread.\n  remarks: \"A thread can be assigned any one of the following priority <xref:System.Threading.ThreadPriority> values:  \\n  \\n-   `Highest`  \\n  \\n-   `AboveNormal`  \\n  \\n-   `Normal`  \\n  \\n-   `BelowNormal`  \\n  \\n-   `Lowest`  \\n  \\n Operating systems are not required to honor the priority of a thread.\"\n  example:\n  - \"The following example shows the result of changing the priority of a thread. Three threads are created, the priority of one thread is set to <xref:System.Threading.ThreadPriority?displayProperty=fullName>, and the priority of a second is set to <xref:System.Threading.ThreadPriority?displayProperty=fullName>. Each thread increments a variable in a `while` loop and runs for a set time.  \\n  \\n [!code-cs[System.Threading.ThreadPriority#1](~/add/codesnippet/csharp/p-system.threading.threa_6_1.cs)]\\n [!code-vb[System.Threading.ThreadPriority#1](~/add/codesnippet/visualbasic/p-system.threading.threa_6_1.vb)]\"\n  syntax:\n    content: public System.Threading.ThreadPriority Priority { get; set; }\n    return:\n      type: System.Threading.ThreadPriority\n      description: One of the <xref href=\"System.Threading.ThreadPriority\"></xref> values. The default value is <xref href=\"System.Threading.ThreadPriority\"></xref>.\n  overload: System.Threading.Thread.Priority*\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread has reached a final state, such as <xref href=\"System.Threading.ThreadState\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for a set operation is not a valid <xref href=\"System.Threading.ThreadPriority\"></xref> value.\n  platform:\n  - net462\n- uid: System.Threading.Thread.ResetAbort\n  id: ResetAbort\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: ResetAbort()\n  nameWithType: Thread.ResetAbort()\n  fullName: System.Threading.Thread.ResetAbort()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Cancels an <xref:System.Threading.Thread.Abort*> requested for the current thread.\n  remarks: \"This method can only be called by code with the proper permissions.  \\n  \\n When a call is made to `Abort` to terminate a thread, the system throws a <xref:System.Threading.ThreadAbortException>. `ThreadAbortException` is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless `ResetAbort` is called. `ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.  \\n  \\n See <xref:System.Threading.ThreadAbortException> for an example that demonstrates calling the `ResetAbort` method.\"\n  syntax:\n    content: public static void ResetAbort ();\n    parameters: []\n  overload: System.Threading.Thread.ResetAbort*\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: <xref uid=\"langword_csharp_Abort\" name=\"Abort\" href=\"\"></xref> was not invoked on the current thread.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required security permission for the current thread.\n  platform:\n  - net462\n- uid: System.Threading.Thread.Resume\n  id: Resume\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Resume()\n  nameWithType: Thread.Resume()\n  fullName: System.Threading.Thread.Resume()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Resumes a thread that has been suspended.\n  remarks: >-\n    > [!CAUTION]\n\n    >  Do not use the <xref:System.Threading.Thread.Suspend%2A> and Resume methods to synchronize the activities of threads. You have no way of knowing what code a thread is executing when you suspend it. If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked. If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked. Deadlocks can occur very easily.\n  syntax:\n    content: public void Resume ();\n    parameters: []\n  overload: System.Threading.Thread.Resume*\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread has not been started, is dead, or is not in the suspended state.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the appropriate <xref href=\"System.Security.Permissions.SecurityPermission\"></xref>.\n  platform:\n  - net462\n- uid: System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)\n  id: SetApartmentState(System.Threading.ApartmentState)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: SetApartmentState(ApartmentState)\n  nameWithType: Thread.SetApartmentState(ApartmentState)\n  fullName: System.Threading.Thread.SetApartmentState(ApartmentState)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Sets the apartment state of a thread before it is started.\n  remarks: \"New threads are initialized as <xref:System.Threading.ApartmentState?displayProperty=fullName> if their apartment state has not been set before they are started. Apartment state must be set before a thread is started.  \\n  \\n> [!NOTE]\\n>  The main application thread is initialized to <xref:System.Threading.ApartmentState?displayProperty=fullName> by default. The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState?displayProperty=fullName> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.  \\n  \\n The SetApartmentState method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.\"\n  example:\n  - \"The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, SetApartmentState, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods. The code example creates a thread. Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState?displayProperty=fullName> state and SetApartmentState changes the state to <xref:System.Threading.ApartmentState?displayProperty=fullName>. The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState?displayProperty=fullName> because the apartment state is already set. If the same operation had been attempted with SetApartmentState, <xref:System.InvalidOperationException> would have been thrown.  \\n  \\n After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again. This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.  \\n  \\n [!code-vb[Thread.GetSetTrySetApartmentState#1](~/add/codesnippet/visualbasic/m-system.threading.threa_6_1.vb)]\\n [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/add/codesnippet/cpp/m-system.threading.threa_6_1.cpp)]\\n [!code-cs[Thread.GetSetTrySetApartmentState#1](~/add/codesnippet/csharp/m-system.threading.threa_6_1.cs)]\"\n  syntax:\n    content: public void SetApartmentState (System.Threading.ApartmentState state);\n    parameters:\n    - id: state\n      type: System.Threading.ApartmentState\n      description: The new apartment state.\n  overload: System.Threading.Thread.SetApartmentState*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>state</code> is not a valid apartment state.\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread has already been started.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The apartment state has already been initialized.\n  platform:\n  - net462\n- uid: System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)\n  id: SetCompressedStack(System.Threading.CompressedStack)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: SetCompressedStack(CompressedStack)\n  nameWithType: Thread.SetCompressedStack(CompressedStack)\n  fullName: System.Threading.Thread.SetCompressedStack(CompressedStack)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Applies a captured <xref href=\"System.Threading.CompressedStack\"></xref> to the current thread.\n  remarks: This method is no longer supported.\n  syntax:\n    content: public void SetCompressedStack (System.Threading.CompressedStack stack);\n    parameters:\n    - id: stack\n      type: System.Threading.CompressedStack\n      description: The <xref href=\"System.Threading.CompressedStack\"></xref> object to be applied to the current thread.\n  overload: System.Threading.Thread.SetCompressedStack*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: In all cases.\n  platform:\n  - net462\n- uid: System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)\n  id: SetData(System.LocalDataStoreSlot,System.Object)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: SetData(LocalDataStoreSlot,Object)\n  nameWithType: Thread.SetData(LocalDataStoreSlot,Object)\n  fullName: System.Threading.Thread.SetData(LocalDataStoreSlot,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Sets the data in the specified slot on the currently running thread, for that thread's current domain. For better performance, use fields marked with the <xref:System.ThreadStaticAttribute> attribute instead.\n  remarks: \"> [!IMPORTANT]\\n>  The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the <xref:System.Threading.Thread> object has been reclaimed by garbage collection. Data slots are unique per thread. No other thread (not even a child thread) can get that data.  \\n  \\n> [!NOTE]\\n>  SetData is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread. To avoid confusion, use the class name when calling `Shared` methods: `Thread.SetData(testSlot, \\\"test data\\\")`.\"\n  example:\n  - \"This section contains two code examples. The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information. The second example shows how to use a data slot to do the same thing.  \\n  \\n **First Example**  \\n  \\n The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information. This technique provides better performance than the technique that is shown in the second example.  \\n  \\n [!code-cs[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/csharp/m-system.threading.threa_4_1.cs)]\\n [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/visualbasic/m-system.threading.threa_4_1.vb)]\\n [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/add/codesnippet/cpp/m-system.threading.threa_4_1.cpp)]  \\n  \\n **Second Example**  \\n  \\n The following example demonstrates how to use a named data slot to store thread-specific information.  \\n  \\n [!code-cs[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/csharp/m-system.threading.threa_4_2.cs)]\\n [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/cpp/m-system.threading.threa_4_2.cpp)]\\n [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/add/codesnippet/visualbasic/m-system.threading.threa_4_2.vb)]\"\n  syntax:\n    content: public static void SetData (LocalDataStoreSlot slot, object data);\n    parameters:\n    - id: slot\n      type: System.LocalDataStoreSlot\n      description: The <xref href=\"System.LocalDataStoreSlot\"></xref> in which to set the value.\n    - id: data\n      type: System.Object\n      description: The value to be set.\n  overload: System.Threading.Thread.SetData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.Sleep(System.Int32)\n  id: Sleep(System.Int32)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Sleep(Int32)\n  nameWithType: Thread.Sleep(Int32)\n  fullName: System.Threading.Thread.Sleep(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Suspends the current thread for the specified number of milliseconds.\n  remarks: \"The thread will not be scheduled for execution by the operating system for the amount of time specified. This method changes the state of the thread to include <xref:System.Threading.ThreadState>.  \\n  \\n You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> for the `millisecondsTimeout` parameter to suspend the thread indefinitely. However, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.  \\n  \\n The system clock ticks at a specific rate called the clock resolution. The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks. For more information on clock resolution and the waiting time, see the [Sleep function](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) topic. This method calls the [Sleep function](http://msdn.microsoft.com/en-us/library/windows/desktop/ms686298.aspx) from the Windows system APIs.  \\n  \\n This method does not perform standard COM and SendMessage pumping.  \\n  \\n> [!NOTE]\\n>  If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.\"\n  example:\n  - \"The following example uses the Sleep method to block the application's main thread.  \\n  \\n [!code-cs[Thread.Sleep#1](~/add/codesnippet/csharp/m-system.threading.threa_2_1.cs)]\\n [!code-vb[Thread.Sleep#1](~/add/codesnippet/visualbasic/m-system.threading.threa_2_1.vb)]\\n [!code-cpp[Thread.Sleep#1](~/add/codesnippet/cpp/m-system.threading.threa_2_1.cpp)]\"\n  syntax:\n    content: public static void Sleep (int millisecondsTimeout);\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds for which the thread is suspended. If the value of the `millisecondsTimeout` argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.\n  overload: System.Threading.Thread.Sleep*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The time-out value is negative and is not equal to <xref:System.Threading.Timeout.Infinite>.\n  platform:\n  - net462\n- uid: System.Threading.Thread.Sleep(System.TimeSpan)\n  id: Sleep(System.TimeSpan)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Sleep(TimeSpan)\n  nameWithType: Thread.Sleep(TimeSpan)\n  fullName: System.Threading.Thread.Sleep(TimeSpan)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Suspends the current thread for the specified amount of time.\n  remarks: \"The thread will not be scheduled for execution by the operating system for the amount of time specified. This method changes the state of the thread to include <xref:System.Threading.ThreadState>.  \\n  \\n You can specify <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=fullName> for the `timeout` parameter to suspend the thread indefinitely. However, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.  \\n  \\n This overload of <xref:System.Threading.Thread.Sleep%2A> uses the total number of whole milliseconds in `timeout`. Fractional milliseconds are discarded.  \\n  \\n This method does not perform standard COM and SendMessage pumping.  \\n  \\n> [!NOTE]\\n>  If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.\"\n  example:\n  - \"The following example uses the Sleep method overload to block the application's main thread five times, for two seconds each time.  \\n  \\n [!code-cpp[Thread.Sleep_TimeSpan#1](~/add/codesnippet/cpp/m-system.threading.threa_31_1.cpp)]\\n [!code-cs[Thread.Sleep_TimeSpan#1](~/add/codesnippet/csharp/m-system.threading.threa_31_1.cs)]\\n [!code-vb[Thread.Sleep_TimeSpan#1](~/add/codesnippet/visualbasic/m-system.threading.threa_31_1.vb)]\"\n  syntax:\n    content: public static void Sleep (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The amount of time for which the thread is suspended. If the value of the `millisecondsTimeout` argument is &lt;xref:System.TimeSpan?displayProperty=fullName&gt;, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.\n  overload: System.Threading.Thread.Sleep*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value of <code>timeout</code> is negative and is not equal to &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; in milliseconds, or is greater than &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt; milliseconds.\n  platform:\n  - net462\n- uid: System.Threading.Thread.SpinWait(System.Int32)\n  id: SpinWait(System.Int32)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: SpinWait(Int32)\n  nameWithType: Thread.SpinWait(Int32)\n  fullName: System.Threading.Thread.SpinWait(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Causes a thread to wait the number of times defined by the <code>iterations</code> parameter.\n  remarks: \"The SpinWait method is useful for implementing locks. Classes in the .NET Framework, such as <xref:System.Threading.Monitor> and <xref:System.Threading.ReaderWriterLock>, use this method internally. SpinWait essentially puts the processor into a very tight loop, with the loop count specified by the `iterations` parameter. The duration of the wait therefore depends on the speed of the processor.  \\n  \\n Contrast this with the <xref:System.Threading.Thread.Sleep%2A> method. A thread that calls <xref:System.Threading.Thread.Sleep%2A> yields the rest of its current slice of processor time, even if the specified interval is zero. Specifying a non-zero interval for <xref:System.Threading.Thread.Sleep%2A> removes the thread from consideration by the thread scheduler until the time interval has elapsed.  \\n  \\n SpinWait is not generally useful for ordinary applications. In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call <xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName> or a statement that wraps <xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName> (`lock` in C# or `SyncLock` in Visual Basic).  \\n  \\n> [!CAUTION]\\n>  In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the SpinWait method in your loop. The code SpinWait executes is designed to prevent problems that can occur on computers with multiple processors. For example, on computers with multiple Intel processors employing Hyper-Threading technology, SpinWait prevents processor starvation in certain situations.\"\n  syntax:\n    content: public static void SpinWait (int iterations);\n    parameters:\n    - id: iterations\n      type: System.Int32\n      description: A 32-bit signed integer that defines how long a thread is to wait.\n  overload: System.Threading.Thread.SpinWait*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.Start\n  id: Start\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: Thread.Start()\n  fullName: System.Threading.Thread.Start()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Causes the operating system to change the state of the current instance to <xref href=\"System.Threading.ThreadState\"></xref>.\n  remarks: \"Once a thread is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state, the operating system can schedule it for execution. The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor. Note that the call to Start does not block the calling thread.  \\n  \\n> [!NOTE]\\n>  If this overload is used with a thread created using a <xref:System.Threading.ParameterizedThreadStart> delegate, `null` is passed to the method executed by the thread.  \\n  \\n Once the thread terminates, it cannot be restarted with another call to `Start`.\"\n  example:\n  - \"The following example creates and starts a thread.  \\n  \\n [!code-cpp[ThreadStart#1](~/add/codesnippet/cpp/m-system.threading.threa_25_1.cpp)]\\n [!code-cs[ThreadStart#1](~/add/codesnippet/csharp/m-system.threading.threa_25_1.cs)]\\n [!code-vb[ThreadStart#1](~/add/codesnippet/visualbasic/m-system.threading.threa_25_1.vb)]\"\n  syntax:\n    content: public void Start ();\n    parameters: []\n  overload: System.Threading.Thread.Start*\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread has already been started.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory available to start this thread.\n  platform:\n  - net462\n- uid: System.Threading.Thread.Start(System.Object)\n  id: Start(System.Object)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Start(Object)\n  nameWithType: Thread.Start(Object)\n  fullName: System.Threading.Thread.Start(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Causes the operating system to change the state of the current instance to <xref href=\"System.Threading.ThreadState\"></xref>, and optionally supplies an object containing data to be used by the method the thread executes.\n  remarks: \"Once a thread is in the <xref:System.Threading.ThreadState?displayProperty=fullName> state, the operating system can schedule it for execution. The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor. Note that the call to Start does not block the calling thread.  \\n  \\n Once the thread terminates, it cannot be restarted with another call to `Start`.  \\n  \\n This overload and the <xref:System.Threading.ParameterizedThreadStart> delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload. A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object. For more information, see [Creating Threads and Passing Data at Start Time](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example creates a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.  \\n  \\n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/m-system.threading.threa_15_1.cpp)]\\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/m-system.threading.threa_15_1.vb)]\\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/m-system.threading.threa_15_1.cs)]\"\n  syntax:\n    content: public void Start (object parameter);\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: An object that contains data to be used by the method the thread executes.\n  overload: System.Threading.Thread.Start*\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread has already been started.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory available to start this thread.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This thread was created using a <xref href=\"System.Threading.ThreadStart\"></xref> delegate instead of a <xref href=\"System.Threading.ParameterizedThreadStart\"></xref> delegate.\n  platform:\n  - net462\n- uid: System.Threading.Thread.Suspend\n  id: Suspend\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Suspend()\n  nameWithType: Thread.Suspend()\n  fullName: System.Threading.Thread.Suspend()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Either suspends the thread, or if the thread is already suspended, has no effect.\n  remarks: \"If the thread is already suspended, this method has no effect.  \\n  \\n> [!CAUTION]\\n>  Do not use the Suspend and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads. You have no way of knowing what code a thread is executing when you suspend it. If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked. If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked. Deadlocks can occur very easily.\"\n  syntax:\n    content: public void Suspend ();\n    parameters: []\n  overload: System.Threading.Thread.Suspend*\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread has not been started or is dead.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the appropriate <xref href=\"System.Security.Permissions.SecurityPermission\"></xref>.\n  platform:\n  - net462\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n  fullName: System.Threading.Thread.System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _Thread.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array which receives the IDs corresponding to the names.\n  overload: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM `IDispatch` interface is not supported.\n  platform:\n  - net462\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: System.Runtime.InteropServices._Thread.GetTypeInfo(UInt32,UInt32,IntPtr)\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.GetTypeInfo(UInt32,UInt32,IntPtr)\n  fullName: System.Threading.Thread.System.Runtime.InteropServices._Thread.GetTypeInfo(UInt32,UInt32,IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _Thread.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM `IDispatch` interface is not supported.\n  platform:\n  - net462\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: System.Runtime.InteropServices._Thread.GetTypeInfoCount(UInt32)\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.GetTypeInfoCount(UInt32)\n  fullName: System.Threading.Thread.System.Runtime.InteropServices._Thread.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _Thread.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM `IDispatch` interface is not supported.\n  platform:\n  - net462\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: System.Runtime.InteropServices._Thread.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n  fullName: System.Threading.Thread.System.Runtime.InteropServices._Thread.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _Thread.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM `IDispatch` interface is not supported.\n  platform:\n  - net462\n- uid: System.Threading.Thread.ThreadState\n  id: ThreadState\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: ThreadState\n  nameWithType: Thread.ThreadState\n  fullName: System.Threading.Thread.ThreadState\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets a value containing the states of the current thread.\n  remarks: \"The ThreadState property provides more specific information than the <xref:System.Threading.Thread.IsAlive%2A> property.  \\n  \\n> [!IMPORTANT]\\n>  Thread state is only of interest in debugging scenarios. Your code should never use thread state to synchronize the activities of threads.\"\n  example:\n  - \"The following code example demonstrates accessing the `ThreadState` of a thread.  \\n  \\n [!code-cs[System.Threading.Thread.ThreadState#1](~/add/codesnippet/csharp/p-system.threading.threa_5_1.cs)]\\n [!code-vb[System.Threading.Thread.ThreadState#1](~/add/codesnippet/visualbasic/p-system.threading.threa_5_1.vb)]\\n [!code-cpp[System.Threading.Thread.ThreadState#1](~/add/codesnippet/cpp/p-system.threading.threa_5_1.cpp)]\"\n  syntax:\n    content: public System.Threading.ThreadState ThreadState { get; }\n    return:\n      type: System.Threading.ThreadState\n      description: One of the <xref href=\"System.Threading.ThreadState\"></xref> values indicating the state of the current thread. The initial value is <xref uid=\"langword_csharp_Unstarted\" name=\"Unstarted\" href=\"\"></xref>.\n  overload: System.Threading.Thread.ThreadState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)\n  id: TrySetApartmentState(System.Threading.ApartmentState)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: TrySetApartmentState(ApartmentState)\n  nameWithType: Thread.TrySetApartmentState(ApartmentState)\n  fullName: System.Threading.Thread.TrySetApartmentState(ApartmentState)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Sets the apartment state of a thread before it is started.\n  remarks: \"New threads are initialized as <xref:System.Threading.ApartmentState?displayProperty=fullName> if their apartment state has not been set before they are started. Apartment state must be set before a thread is started.  \\n  \\n> [!NOTE]\\n>  The main application thread is initialized to <xref:System.Threading.ApartmentState?displayProperty=fullName> by default. The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState?displayProperty=fullName> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.  \\n  \\n The TrySetApartmentState method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.SetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.\"\n  example:\n  - \"The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and TrySetApartmentState methods. The code example creates a thread. Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState?displayProperty=fullName> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState?displayProperty=fullName>. The TrySetApartmentState method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState?displayProperty=fullName> because the apartment state is already set. If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.  \\n  \\n After the thread is started, the TrySetApartmentState method is used again. This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.  \\n  \\n [!code-vb[Thread.GetSetTrySetApartmentState#1](~/add/codesnippet/visualbasic/m-system.threading.threa_26_1.vb)]\\n [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/add/codesnippet/cpp/m-system.threading.threa_26_1.cpp)]\\n [!code-cs[Thread.GetSetTrySetApartmentState#1](~/add/codesnippet/csharp/m-system.threading.threa_26_1.cs)]\"\n  syntax:\n    content: public bool TrySetApartmentState (System.Threading.ApartmentState state);\n    parameters:\n    - id: state\n      type: System.Threading.ApartmentState\n      description: The new apartment state.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the apartment state is set; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Threading.Thread.TrySetApartmentState*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>state</code> is not a valid apartment state.\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread has already been started.\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.Byte@)\n  id: VolatileRead(System.Byte@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(Byte)\n  nameWithType: Thread.VolatileRead(Byte)\n  fullName: System.Threading.Thread.VolatileRead(Byte)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"VolatileRead and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, VolatileRead obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, VolatileRead and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use VolatileRead or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses VolatileRead or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static byte VolatileRead (ref byte address);\n    parameters:\n    - id: address\n      type: System.Byte\n      description: The field to be read.\n    return:\n      type: System.Byte\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.Double@)\n  id: VolatileRead(System.Double@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(Double)\n  nameWithType: Thread.VolatileRead(Double)\n  fullName: System.Threading.Thread.VolatileRead(Double)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static double VolatileRead (ref double address);\n    parameters:\n    - id: address\n      type: System.Double\n      description: The field to be read.\n    return:\n      type: System.Double\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.Int16@)\n  id: VolatileRead(System.Int16@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(Int16)\n  nameWithType: Thread.VolatileRead(Int16)\n  fullName: System.Threading.Thread.VolatileRead(Int16)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static short VolatileRead (ref short address);\n    parameters:\n    - id: address\n      type: System.Int16\n      description: The field to be read.\n    return:\n      type: System.Int16\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.Int32@)\n  id: VolatileRead(System.Int32@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(Int32)\n  nameWithType: Thread.VolatileRead(Int32)\n  fullName: System.Threading.Thread.VolatileRead(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static int VolatileRead (ref int address);\n    parameters:\n    - id: address\n      type: System.Int32\n      description: The field to be read.\n    return:\n      type: System.Int32\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.Int64@)\n  id: VolatileRead(System.Int64@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(Int64)\n  nameWithType: Thread.VolatileRead(Int64)\n  fullName: System.Threading.Thread.VolatileRead(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static long VolatileRead (ref long address);\n    parameters:\n    - id: address\n      type: System.Int64\n      description: The field to be read.\n    return:\n      type: System.Int64\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.IntPtr@)\n  id: VolatileRead(System.IntPtr@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(IntPtr)\n  nameWithType: Thread.VolatileRead(IntPtr)\n  fullName: System.Threading.Thread.VolatileRead(IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static IntPtr VolatileRead (ref IntPtr address);\n    parameters:\n    - id: address\n      type: System.IntPtr\n      description: The field to be read.\n    return:\n      type: System.IntPtr\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.Object@)\n  id: VolatileRead(System.Object@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(Object)\n  nameWithType: Thread.VolatileRead(Object)\n  fullName: System.Threading.Thread.VolatileRead(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static object VolatileRead (ref object address);\n    parameters:\n    - id: address\n      type: System.Object\n      description: The field to be read.\n    return:\n      type: System.Object\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.SByte@)\n  id: VolatileRead(System.SByte@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(SByte)\n  nameWithType: Thread.VolatileRead(SByte)\n  fullName: System.Threading.Thread.VolatileRead(SByte)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static sbyte VolatileRead (ref sbyte address);\n    parameters:\n    - id: address\n      type: System.SByte\n      description: The field to be read.\n    return:\n      type: System.SByte\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.Single@)\n  id: VolatileRead(System.Single@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(Single)\n  nameWithType: Thread.VolatileRead(Single)\n  fullName: System.Threading.Thread.VolatileRead(Single)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static float VolatileRead (ref float address);\n    parameters:\n    - id: address\n      type: System.Single\n      description: The field to be read.\n    return:\n      type: System.Single\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.UInt16@)\n  id: VolatileRead(System.UInt16@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(UInt16)\n  nameWithType: Thread.VolatileRead(UInt16)\n  fullName: System.Threading.Thread.VolatileRead(UInt16)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static ushort VolatileRead (ref ushort address);\n    parameters:\n    - id: address\n      type: System.UInt16\n      description: The field to be read.\n    return:\n      type: System.UInt16\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.UInt32@)\n  id: VolatileRead(System.UInt32@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(UInt32)\n  nameWithType: Thread.VolatileRead(UInt32)\n  fullName: System.Threading.Thread.VolatileRead(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static uint VolatileRead (ref uint address);\n    parameters:\n    - id: address\n      type: System.UInt32\n      description: The field to be read.\n    return:\n      type: System.UInt32\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.UInt64@)\n  id: VolatileRead(System.UInt64@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(UInt64)\n  nameWithType: Thread.VolatileRead(UInt64)\n  fullName: System.Threading.Thread.VolatileRead(UInt64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static ulong VolatileRead (ref ulong address);\n    parameters:\n    - id: address\n      type: System.UInt64\n      description: The field to be read.\n    return:\n      type: System.UInt64\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileRead(System.UIntPtr@)\n  id: VolatileRead(System.UIntPtr@)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileRead(UIntPtr)\n  nameWithType: Thread.VolatileRead(UIntPtr)\n  fullName: System.Threading.Thread.VolatileRead(UIntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static UIntPtr VolatileRead (ref UIntPtr address);\n    parameters:\n    - id: address\n      type: System.UIntPtr\n      description: The field to be read.\n    return:\n      type: System.UIntPtr\n      description: The latest value written to the field by any processor.\n  overload: System.Threading.Thread.VolatileRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)\n  id: VolatileWrite(System.Byte@,System.Byte)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(Byte,Byte)\n  nameWithType: Thread.VolatileWrite(Byte,Byte)\n  fullName: System.Threading.Thread.VolatileWrite(Byte,Byte)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and VolatileWrite are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, VolatileWrite ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and VolatileWrite ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or VolatileWrite.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or VolatileWrite.\"\n  syntax:\n    content: public static void VolatileWrite (ref byte address, byte value);\n    parameters:\n    - id: address\n      type: System.Byte\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.Byte\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.Double@,System.Double)\n  id: VolatileWrite(System.Double@,System.Double)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(Double,Double)\n  nameWithType: Thread.VolatileWrite(Double,Double)\n  fullName: System.Threading.Thread.VolatileWrite(Double,Double)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref double address, double value);\n    parameters:\n    - id: address\n      type: System.Double\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.Double\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)\n  id: VolatileWrite(System.Int16@,System.Int16)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(Int16,Int16)\n  nameWithType: Thread.VolatileWrite(Int16,Int16)\n  fullName: System.Threading.Thread.VolatileWrite(Int16,Int16)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref short address, short value);\n    parameters:\n    - id: address\n      type: System.Int16\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.Int16\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)\n  id: VolatileWrite(System.Int32@,System.Int32)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(Int32,Int32)\n  nameWithType: Thread.VolatileWrite(Int32,Int32)\n  fullName: System.Threading.Thread.VolatileWrite(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref int address, int value);\n    parameters:\n    - id: address\n      type: System.Int32\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.Int32\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)\n  id: VolatileWrite(System.Int64@,System.Int64)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(Int64,Int64)\n  nameWithType: Thread.VolatileWrite(Int64,Int64)\n  fullName: System.Threading.Thread.VolatileWrite(Int64,Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref long address, long value);\n    parameters:\n    - id: address\n      type: System.Int64\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.Int64\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)\n  id: VolatileWrite(System.IntPtr@,System.IntPtr)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(IntPtr,IntPtr)\n  nameWithType: Thread.VolatileWrite(IntPtr,IntPtr)\n  fullName: System.Threading.Thread.VolatileWrite(IntPtr,IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref IntPtr address, IntPtr value);\n    parameters:\n    - id: address\n      type: System.IntPtr\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.IntPtr\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.Object@,System.Object)\n  id: VolatileWrite(System.Object@,System.Object)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(Object,Object)\n  nameWithType: Thread.VolatileWrite(Object,Object)\n  fullName: System.Threading.Thread.VolatileWrite(Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref object address, object value);\n    parameters:\n    - id: address\n      type: System.Object\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.Object\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)\n  id: VolatileWrite(System.SByte@,System.SByte)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(SByte,SByte)\n  nameWithType: Thread.VolatileWrite(SByte,SByte)\n  fullName: System.Threading.Thread.VolatileWrite(SByte,SByte)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref sbyte address, sbyte value);\n    parameters:\n    - id: address\n      type: System.SByte\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.SByte\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.Single@,System.Single)\n  id: VolatileWrite(System.Single@,System.Single)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(Single,Single)\n  nameWithType: Thread.VolatileWrite(Single,Single)\n  fullName: System.Threading.Thread.VolatileWrite(Single,Single)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref float address, float value);\n    parameters:\n    - id: address\n      type: System.Single\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.Single\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)\n  id: VolatileWrite(System.UInt16@,System.UInt16)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(UInt16,UInt16)\n  nameWithType: Thread.VolatileWrite(UInt16,UInt16)\n  fullName: System.Threading.Thread.VolatileWrite(UInt16,UInt16)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref ushort address, ushort value);\n    parameters:\n    - id: address\n      type: System.UInt16\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.UInt16\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)\n  id: VolatileWrite(System.UInt32@,System.UInt32)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(UInt32,UInt32)\n  nameWithType: Thread.VolatileWrite(UInt32,UInt32)\n  fullName: System.Threading.Thread.VolatileWrite(UInt32,UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref uint address, uint value);\n    parameters:\n    - id: address\n      type: System.UInt32\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.UInt32\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)\n  id: VolatileWrite(System.UInt64@,System.UInt64)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(UInt64,UInt64)\n  nameWithType: Thread.VolatileWrite(UInt64,UInt64)\n  fullName: System.Threading.Thread.VolatileWrite(UInt64,UInt64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref ulong address, ulong value);\n    parameters:\n    - id: address\n      type: System.UInt64\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.UInt64\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)\n  id: VolatileWrite(System.UIntPtr@,System.UIntPtr)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: VolatileWrite(UIntPtr,UIntPtr)\n  nameWithType: Thread.VolatileWrite(UIntPtr,UIntPtr)\n  fullName: System.Threading.Thread.VolatileWrite(UIntPtr,UIntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Writes a value to a field immediately, so that the value is visible to all processors in the computer.\n  remarks: \"<xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization. Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.  \\n  \\n On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  \\n  \\n Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  \\n  \\n Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.  \\n  \\n> [!NOTE]\\n>  In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.\"\n  syntax:\n    content: public static void VolatileWrite (ref UIntPtr address, UIntPtr value);\n    parameters:\n    - id: address\n      type: System.UIntPtr\n      description: The field to which the value is to be written.\n    - id: value\n      type: System.UIntPtr\n      description: The value to be written.\n  overload: System.Threading.Thread.VolatileWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.Thread.Yield\n  id: Yield\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  name: Yield()\n  nameWithType: Thread.Yield()\n  fullName: System.Threading.Thread.Yield()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the thread to yield to.\n  remarks: \"If this method succeeds, the rest of the thread's current time slice is yielded. The operating system schedules the calling thread for another time slice, according to its priority and the status of other threads that are available to run.  \\n  \\n Yielding is limited to the processor that is executing the calling thread. The operating system will not switch execution to another processor, even if that processor is idle or is running a thread of lower priority. If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns `false`.  \\n  \\n This method is equivalent to using platform invoke to call the native Win32 `SwitchToThread` function. You should call the Yield method instead of using platform invoke, because platform invoke bypasses any custom threading behavior the host has requested.\"\n  syntax:\n    content: public static bool Yield ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operating system switched execution to another thread; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Threading.Thread.Yield*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n  isExternal: false\n  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.Threading.ThreadStateException\n  parent: System.Threading\n  isExternal: false\n  name: ThreadStateException\n  nameWithType: ThreadStateException\n  fullName: System.Threading.ThreadStateException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Threading.ThreadInterruptedException\n  parent: System.Threading\n  isExternal: false\n  name: ThreadInterruptedException\n  nameWithType: ThreadInterruptedException\n  fullName: System.Threading.ThreadInterruptedException\n- uid: System.OutOfMemoryException\n  isExternal: true\n  name: System.OutOfMemoryException\n- uid: System.NotImplementedException\n  isExternal: true\n  name: System.NotImplementedException\n- uid: System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Thread(ParameterizedThreadStart)\n  nameWithType: Thread.Thread(ParameterizedThreadStart)\n  fullName: System.Threading.Thread.Thread(ParameterizedThreadStart)\n- uid: System.Threading.ParameterizedThreadStart\n  parent: System.Threading\n  isExternal: false\n  name: ParameterizedThreadStart\n  nameWithType: ParameterizedThreadStart\n  fullName: System.Threading.ParameterizedThreadStart\n- uid: System.Threading.Thread.#ctor(System.Threading.ThreadStart)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Thread(ThreadStart)\n  nameWithType: Thread.Thread(ThreadStart)\n  fullName: System.Threading.Thread.Thread(ThreadStart)\n- uid: System.Threading.ThreadStart\n  parent: System.Threading\n  isExternal: false\n  name: ThreadStart\n  nameWithType: ThreadStart\n  fullName: System.Threading.ThreadStart\n- uid: System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Thread(ParameterizedThreadStart,Int32)\n  nameWithType: Thread.Thread(ParameterizedThreadStart,Int32)\n  fullName: System.Threading.Thread.Thread(ParameterizedThreadStart,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Thread(ThreadStart,Int32)\n  nameWithType: Thread.Thread(ThreadStart,Int32)\n  fullName: System.Threading.Thread.Thread(ThreadStart,Int32)\n- uid: System.Threading.Thread.Abort\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Abort()\n  nameWithType: Thread.Abort()\n  fullName: System.Threading.Thread.Abort()\n- uid: System.Threading.Thread.Abort(System.Object)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Abort(Object)\n  nameWithType: Thread.Abort(Object)\n  fullName: System.Threading.Thread.Abort(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Threading.Thread.AllocateDataSlot\n  parent: System.Threading.Thread\n  isExternal: false\n  name: AllocateDataSlot()\n  nameWithType: Thread.AllocateDataSlot()\n  fullName: System.Threading.Thread.AllocateDataSlot()\n- uid: System.LocalDataStoreSlot\n  parent: System\n  isExternal: false\n  name: LocalDataStoreSlot\n  nameWithType: LocalDataStoreSlot\n  fullName: System.LocalDataStoreSlot\n- uid: System.Threading.Thread.AllocateNamedDataSlot(System.String)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: AllocateNamedDataSlot(String)\n  nameWithType: Thread.AllocateNamedDataSlot(String)\n  fullName: System.Threading.Thread.AllocateNamedDataSlot(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Threading.Thread.ApartmentState\n  parent: System.Threading.Thread\n  isExternal: false\n  name: ApartmentState\n  nameWithType: Thread.ApartmentState\n  fullName: System.Threading.Thread.ApartmentState\n- uid: System.Threading.ApartmentState\n  parent: System.Threading\n  isExternal: false\n  name: ApartmentState\n  nameWithType: ApartmentState\n  fullName: System.Threading.ApartmentState\n- uid: System.Threading.Thread.BeginCriticalRegion\n  parent: System.Threading.Thread\n  isExternal: false\n  name: BeginCriticalRegion()\n  nameWithType: Thread.BeginCriticalRegion()\n  fullName: System.Threading.Thread.BeginCriticalRegion()\n- uid: System.Threading.Thread.BeginThreadAffinity\n  parent: System.Threading.Thread\n  isExternal: false\n  name: BeginThreadAffinity()\n  nameWithType: Thread.BeginThreadAffinity()\n  fullName: System.Threading.Thread.BeginThreadAffinity()\n- uid: System.Threading.Thread.CurrentContext\n  parent: System.Threading.Thread\n  isExternal: false\n  name: CurrentContext\n  nameWithType: Thread.CurrentContext\n  fullName: System.Threading.Thread.CurrentContext\n- uid: System.Runtime.Remoting.Contexts.Context\n  parent: System.Runtime.Remoting.Contexts\n  isExternal: false\n  name: Context\n  nameWithType: Context\n  fullName: System.Runtime.Remoting.Contexts.Context\n- uid: System.Threading.Thread.CurrentCulture\n  parent: System.Threading.Thread\n  isExternal: false\n  name: CurrentCulture\n  nameWithType: Thread.CurrentCulture\n  fullName: System.Threading.Thread.CurrentCulture\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: true\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Threading.Thread.CurrentPrincipal\n  parent: System.Threading.Thread\n  isExternal: false\n  name: CurrentPrincipal\n  nameWithType: Thread.CurrentPrincipal\n  fullName: System.Threading.Thread.CurrentPrincipal\n- uid: System.Security.Principal.IPrincipal\n  parent: System.Security.Principal\n  isExternal: true\n  name: IPrincipal\n  nameWithType: IPrincipal\n  fullName: System.Security.Principal.IPrincipal\n- uid: System.Threading.Thread.CurrentThread\n  parent: System.Threading.Thread\n  isExternal: false\n  name: CurrentThread\n  nameWithType: Thread.CurrentThread\n  fullName: System.Threading.Thread.CurrentThread\n- uid: System.Threading.Thread\n  parent: System.Threading\n  isExternal: false\n  name: Thread\n  nameWithType: Thread\n  fullName: System.Threading.Thread\n- uid: System.Threading.Thread.CurrentUICulture\n  parent: System.Threading.Thread\n  isExternal: false\n  name: CurrentUICulture\n  nameWithType: Thread.CurrentUICulture\n  fullName: System.Threading.Thread.CurrentUICulture\n- uid: System.Threading.Thread.DisableComObjectEagerCleanup\n  parent: System.Threading.Thread\n  isExternal: false\n  name: DisableComObjectEagerCleanup()\n  nameWithType: Thread.DisableComObjectEagerCleanup()\n  fullName: System.Threading.Thread.DisableComObjectEagerCleanup()\n- uid: System.Threading.Thread.EndCriticalRegion\n  parent: System.Threading.Thread\n  isExternal: false\n  name: EndCriticalRegion()\n  nameWithType: Thread.EndCriticalRegion()\n  fullName: System.Threading.Thread.EndCriticalRegion()\n- uid: System.Threading.Thread.EndThreadAffinity\n  parent: System.Threading.Thread\n  isExternal: false\n  name: EndThreadAffinity()\n  nameWithType: Thread.EndThreadAffinity()\n  fullName: System.Threading.Thread.EndThreadAffinity()\n- uid: System.Threading.Thread.ExecutionContext\n  parent: System.Threading.Thread\n  isExternal: false\n  name: ExecutionContext\n  nameWithType: Thread.ExecutionContext\n  fullName: System.Threading.Thread.ExecutionContext\n- uid: System.Threading.ExecutionContext\n  parent: System.Threading\n  isExternal: true\n  name: ExecutionContext\n  nameWithType: ExecutionContext\n  fullName: System.Threading.ExecutionContext\n- uid: System.Threading.Thread.Finalize\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Finalize()\n  nameWithType: Thread.Finalize()\n  fullName: System.Threading.Thread.Finalize()\n- uid: System.Threading.Thread.FreeNamedDataSlot(System.String)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: FreeNamedDataSlot(String)\n  nameWithType: Thread.FreeNamedDataSlot(String)\n  fullName: System.Threading.Thread.FreeNamedDataSlot(String)\n- uid: System.Threading.Thread.GetApartmentState\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetApartmentState()\n  nameWithType: Thread.GetApartmentState()\n  fullName: System.Threading.Thread.GetApartmentState()\n- uid: System.Threading.Thread.GetCompressedStack\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetCompressedStack()\n  nameWithType: Thread.GetCompressedStack()\n  fullName: System.Threading.Thread.GetCompressedStack()\n- uid: System.Threading.CompressedStack\n  parent: System.Threading\n  isExternal: false\n  name: CompressedStack\n  nameWithType: CompressedStack\n  fullName: System.Threading.CompressedStack\n- uid: System.Threading.Thread.GetData(System.LocalDataStoreSlot)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetData(LocalDataStoreSlot)\n  nameWithType: Thread.GetData(LocalDataStoreSlot)\n  fullName: System.Threading.Thread.GetData(LocalDataStoreSlot)\n- uid: System.Threading.Thread.GetDomain\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetDomain()\n  nameWithType: Thread.GetDomain()\n  fullName: System.Threading.Thread.GetDomain()\n- uid: System.AppDomain\n  parent: System\n  isExternal: false\n  name: AppDomain\n  nameWithType: AppDomain\n  fullName: System.AppDomain\n- uid: System.Threading.Thread.GetDomainID\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetDomainID()\n  nameWithType: Thread.GetDomainID()\n  fullName: System.Threading.Thread.GetDomainID()\n- uid: System.Threading.Thread.GetHashCode\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Thread.GetHashCode()\n  fullName: System.Threading.Thread.GetHashCode()\n- uid: System.Threading.Thread.GetNamedDataSlot(System.String)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetNamedDataSlot(String)\n  nameWithType: Thread.GetNamedDataSlot(String)\n  fullName: System.Threading.Thread.GetNamedDataSlot(String)\n- uid: System.Threading.Thread.Interrupt\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Interrupt()\n  nameWithType: Thread.Interrupt()\n  fullName: System.Threading.Thread.Interrupt()\n- uid: System.Threading.Thread.IsAlive\n  parent: System.Threading.Thread\n  isExternal: false\n  name: IsAlive\n  nameWithType: Thread.IsAlive\n  fullName: System.Threading.Thread.IsAlive\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.Thread.IsBackground\n  parent: System.Threading.Thread\n  isExternal: false\n  name: IsBackground\n  nameWithType: Thread.IsBackground\n  fullName: System.Threading.Thread.IsBackground\n- uid: System.Threading.Thread.IsThreadPoolThread\n  parent: System.Threading.Thread\n  isExternal: false\n  name: IsThreadPoolThread\n  nameWithType: Thread.IsThreadPoolThread\n  fullName: System.Threading.Thread.IsThreadPoolThread\n- uid: System.Threading.Thread.Join\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Join()\n  nameWithType: Thread.Join()\n  fullName: System.Threading.Thread.Join()\n- uid: System.Threading.Thread.Join(System.Int32)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Join(Int32)\n  nameWithType: Thread.Join(Int32)\n  fullName: System.Threading.Thread.Join(Int32)\n- uid: System.Threading.Thread.Join(System.TimeSpan)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Join(TimeSpan)\n  nameWithType: Thread.Join(TimeSpan)\n  fullName: System.Threading.Thread.Join(TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Threading.Thread.ManagedThreadId\n  parent: System.Threading.Thread\n  isExternal: false\n  name: ManagedThreadId\n  nameWithType: Thread.ManagedThreadId\n  fullName: System.Threading.Thread.ManagedThreadId\n- uid: System.Threading.Thread.MemoryBarrier\n  parent: System.Threading.Thread\n  isExternal: false\n  name: MemoryBarrier()\n  nameWithType: Thread.MemoryBarrier()\n  fullName: System.Threading.Thread.MemoryBarrier()\n- uid: System.Threading.Thread.Name\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Name\n  nameWithType: Thread.Name\n  fullName: System.Threading.Thread.Name\n- uid: System.Threading.Thread.Priority\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Priority\n  nameWithType: Thread.Priority\n  fullName: System.Threading.Thread.Priority\n- uid: System.Threading.ThreadPriority\n  parent: System.Threading\n  isExternal: false\n  name: ThreadPriority\n  nameWithType: ThreadPriority\n  fullName: System.Threading.ThreadPriority\n- uid: System.Threading.Thread.ResetAbort\n  parent: System.Threading.Thread\n  isExternal: false\n  name: ResetAbort()\n  nameWithType: Thread.ResetAbort()\n  fullName: System.Threading.Thread.ResetAbort()\n- uid: System.Threading.Thread.Resume\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Resume()\n  nameWithType: Thread.Resume()\n  fullName: System.Threading.Thread.Resume()\n- uid: System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: SetApartmentState(ApartmentState)\n  nameWithType: Thread.SetApartmentState(ApartmentState)\n  fullName: System.Threading.Thread.SetApartmentState(ApartmentState)\n- uid: System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: SetCompressedStack(CompressedStack)\n  nameWithType: Thread.SetCompressedStack(CompressedStack)\n  fullName: System.Threading.Thread.SetCompressedStack(CompressedStack)\n- uid: System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: SetData(LocalDataStoreSlot,Object)\n  nameWithType: Thread.SetData(LocalDataStoreSlot,Object)\n  fullName: System.Threading.Thread.SetData(LocalDataStoreSlot,Object)\n- uid: System.Threading.Thread.Sleep(System.Int32)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Sleep(Int32)\n  nameWithType: Thread.Sleep(Int32)\n  fullName: System.Threading.Thread.Sleep(Int32)\n- uid: System.Threading.Thread.Sleep(System.TimeSpan)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Sleep(TimeSpan)\n  nameWithType: Thread.Sleep(TimeSpan)\n  fullName: System.Threading.Thread.Sleep(TimeSpan)\n- uid: System.Threading.Thread.SpinWait(System.Int32)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: SpinWait(Int32)\n  nameWithType: Thread.SpinWait(Int32)\n  fullName: System.Threading.Thread.SpinWait(Int32)\n- uid: System.Threading.Thread.Start\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Start()\n  nameWithType: Thread.Start()\n  fullName: System.Threading.Thread.Start()\n- uid: System.Threading.Thread.Start(System.Object)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Start(Object)\n  nameWithType: Thread.Start(Object)\n  fullName: System.Threading.Thread.Start(Object)\n- uid: System.Threading.Thread.Suspend\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Suspend()\n  nameWithType: Thread.Suspend()\n  fullName: System.Threading.Thread.Suspend()\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n  fullName: System.Threading.Thread.System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: true\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: System.Runtime.InteropServices._Thread.GetTypeInfo(UInt32,UInt32,IntPtr)\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.GetTypeInfo(UInt32,UInt32,IntPtr)\n  fullName: System.Threading.Thread.System.Runtime.InteropServices._Thread.GetTypeInfo(UInt32,UInt32,IntPtr)\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: System.Runtime.InteropServices._Thread.GetTypeInfoCount(UInt32)\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.GetTypeInfoCount(UInt32)\n  fullName: System.Threading.Thread.System.Runtime.InteropServices._Thread.GetTypeInfoCount(UInt32)\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: System.Runtime.InteropServices._Thread.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n  fullName: System.Threading.Thread.System.Runtime.InteropServices._Thread.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: true\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Threading.Thread.ThreadState\n  parent: System.Threading.Thread\n  isExternal: false\n  name: ThreadState\n  nameWithType: Thread.ThreadState\n  fullName: System.Threading.Thread.ThreadState\n- uid: System.Threading.ThreadState\n  parent: System.Threading\n  isExternal: false\n  name: ThreadState\n  nameWithType: ThreadState\n  fullName: System.Threading.ThreadState\n- uid: System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: TrySetApartmentState(ApartmentState)\n  nameWithType: Thread.TrySetApartmentState(ApartmentState)\n  fullName: System.Threading.Thread.TrySetApartmentState(ApartmentState)\n- uid: System.Threading.Thread.VolatileRead(System.Byte@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(Byte)\n  nameWithType: Thread.VolatileRead(Byte)\n  fullName: System.Threading.Thread.VolatileRead(Byte)\n- uid: System.Byte\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Threading.Thread.VolatileRead(System.Double@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(Double)\n  nameWithType: Thread.VolatileRead(Double)\n  fullName: System.Threading.Thread.VolatileRead(Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Threading.Thread.VolatileRead(System.Int16@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(Int16)\n  nameWithType: Thread.VolatileRead(Int16)\n  fullName: System.Threading.Thread.VolatileRead(Int16)\n- uid: System.Threading.Thread.VolatileRead(System.Int32@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(Int32)\n  nameWithType: Thread.VolatileRead(Int32)\n  fullName: System.Threading.Thread.VolatileRead(Int32)\n- uid: System.Threading.Thread.VolatileRead(System.Int64@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(Int64)\n  nameWithType: Thread.VolatileRead(Int64)\n  fullName: System.Threading.Thread.VolatileRead(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Threading.Thread.VolatileRead(System.IntPtr@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(IntPtr)\n  nameWithType: Thread.VolatileRead(IntPtr)\n  fullName: System.Threading.Thread.VolatileRead(IntPtr)\n- uid: System.Threading.Thread.VolatileRead(System.Object@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(Object)\n  nameWithType: Thread.VolatileRead(Object)\n  fullName: System.Threading.Thread.VolatileRead(Object)\n- uid: System.Threading.Thread.VolatileRead(System.SByte@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(SByte)\n  nameWithType: Thread.VolatileRead(SByte)\n  fullName: System.Threading.Thread.VolatileRead(SByte)\n- uid: System.SByte\n  parent: System\n  isExternal: true\n  name: SByte\n  nameWithType: SByte\n  fullName: System.SByte\n- uid: System.Threading.Thread.VolatileRead(System.Single@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(Single)\n  nameWithType: Thread.VolatileRead(Single)\n  fullName: System.Threading.Thread.VolatileRead(Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Threading.Thread.VolatileRead(System.UInt16@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(UInt16)\n  nameWithType: Thread.VolatileRead(UInt16)\n  fullName: System.Threading.Thread.VolatileRead(UInt16)\n- uid: System.UInt16\n  parent: System\n  isExternal: true\n  name: UInt16\n  nameWithType: UInt16\n  fullName: System.UInt16\n- uid: System.Threading.Thread.VolatileRead(System.UInt32@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(UInt32)\n  nameWithType: Thread.VolatileRead(UInt32)\n  fullName: System.Threading.Thread.VolatileRead(UInt32)\n- uid: System.Threading.Thread.VolatileRead(System.UInt64@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(UInt64)\n  nameWithType: Thread.VolatileRead(UInt64)\n  fullName: System.Threading.Thread.VolatileRead(UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: true\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.Threading.Thread.VolatileRead(System.UIntPtr@)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead(UIntPtr)\n  nameWithType: Thread.VolatileRead(UIntPtr)\n  fullName: System.Threading.Thread.VolatileRead(UIntPtr)\n- uid: System.UIntPtr\n  parent: System\n  isExternal: true\n  name: UIntPtr\n  nameWithType: UIntPtr\n  fullName: System.UIntPtr\n- uid: System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(Byte,Byte)\n  nameWithType: Thread.VolatileWrite(Byte,Byte)\n  fullName: System.Threading.Thread.VolatileWrite(Byte,Byte)\n- uid: System.Threading.Thread.VolatileWrite(System.Double@,System.Double)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(Double,Double)\n  nameWithType: Thread.VolatileWrite(Double,Double)\n  fullName: System.Threading.Thread.VolatileWrite(Double,Double)\n- uid: System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(Int16,Int16)\n  nameWithType: Thread.VolatileWrite(Int16,Int16)\n  fullName: System.Threading.Thread.VolatileWrite(Int16,Int16)\n- uid: System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(Int32,Int32)\n  nameWithType: Thread.VolatileWrite(Int32,Int32)\n  fullName: System.Threading.Thread.VolatileWrite(Int32,Int32)\n- uid: System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(Int64,Int64)\n  nameWithType: Thread.VolatileWrite(Int64,Int64)\n  fullName: System.Threading.Thread.VolatileWrite(Int64,Int64)\n- uid: System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(IntPtr,IntPtr)\n  nameWithType: Thread.VolatileWrite(IntPtr,IntPtr)\n  fullName: System.Threading.Thread.VolatileWrite(IntPtr,IntPtr)\n- uid: System.Threading.Thread.VolatileWrite(System.Object@,System.Object)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(Object,Object)\n  nameWithType: Thread.VolatileWrite(Object,Object)\n  fullName: System.Threading.Thread.VolatileWrite(Object,Object)\n- uid: System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(SByte,SByte)\n  nameWithType: Thread.VolatileWrite(SByte,SByte)\n  fullName: System.Threading.Thread.VolatileWrite(SByte,SByte)\n- uid: System.Threading.Thread.VolatileWrite(System.Single@,System.Single)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(Single,Single)\n  nameWithType: Thread.VolatileWrite(Single,Single)\n  fullName: System.Threading.Thread.VolatileWrite(Single,Single)\n- uid: System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(UInt16,UInt16)\n  nameWithType: Thread.VolatileWrite(UInt16,UInt16)\n  fullName: System.Threading.Thread.VolatileWrite(UInt16,UInt16)\n- uid: System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(UInt32,UInt32)\n  nameWithType: Thread.VolatileWrite(UInt32,UInt32)\n  fullName: System.Threading.Thread.VolatileWrite(UInt32,UInt32)\n- uid: System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(UInt64,UInt64)\n  nameWithType: Thread.VolatileWrite(UInt64,UInt64)\n  fullName: System.Threading.Thread.VolatileWrite(UInt64,UInt64)\n- uid: System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite(UIntPtr,UIntPtr)\n  nameWithType: Thread.VolatileWrite(UIntPtr,UIntPtr)\n  fullName: System.Threading.Thread.VolatileWrite(UIntPtr,UIntPtr)\n- uid: System.Threading.Thread.Yield\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Yield()\n  nameWithType: Thread.Yield()\n  fullName: System.Threading.Thread.Yield()\n- uid: System.Threading.Thread.#ctor*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Thread\n  nameWithType: Thread.Thread\n- uid: System.Threading.Thread.Abort*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Abort\n  nameWithType: Thread.Abort\n- uid: System.Threading.Thread.AllocateDataSlot*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: AllocateDataSlot\n  nameWithType: Thread.AllocateDataSlot\n- uid: System.Threading.Thread.AllocateNamedDataSlot*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: AllocateNamedDataSlot\n  nameWithType: Thread.AllocateNamedDataSlot\n- uid: System.Threading.Thread.ApartmentState*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: ApartmentState\n  nameWithType: Thread.ApartmentState\n- uid: System.Threading.Thread.BeginCriticalRegion*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: BeginCriticalRegion\n  nameWithType: Thread.BeginCriticalRegion\n- uid: System.Threading.Thread.BeginThreadAffinity*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: BeginThreadAffinity\n  nameWithType: Thread.BeginThreadAffinity\n- uid: System.Threading.Thread.CurrentContext*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: CurrentContext\n  nameWithType: Thread.CurrentContext\n- uid: System.Threading.Thread.CurrentCulture*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: CurrentCulture\n  nameWithType: Thread.CurrentCulture\n- uid: System.Threading.Thread.CurrentPrincipal*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: CurrentPrincipal\n  nameWithType: Thread.CurrentPrincipal\n- uid: System.Threading.Thread.CurrentThread*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: CurrentThread\n  nameWithType: Thread.CurrentThread\n- uid: System.Threading.Thread.CurrentUICulture*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: CurrentUICulture\n  nameWithType: Thread.CurrentUICulture\n- uid: System.Threading.Thread.DisableComObjectEagerCleanup*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: DisableComObjectEagerCleanup\n  nameWithType: Thread.DisableComObjectEagerCleanup\n- uid: System.Threading.Thread.EndCriticalRegion*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: EndCriticalRegion\n  nameWithType: Thread.EndCriticalRegion\n- uid: System.Threading.Thread.EndThreadAffinity*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: EndThreadAffinity\n  nameWithType: Thread.EndThreadAffinity\n- uid: System.Threading.Thread.ExecutionContext*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: ExecutionContext\n  nameWithType: Thread.ExecutionContext\n- uid: System.Threading.Thread.Finalize*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Finalize\n  nameWithType: Thread.Finalize\n- uid: System.Threading.Thread.FreeNamedDataSlot*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: FreeNamedDataSlot\n  nameWithType: Thread.FreeNamedDataSlot\n- uid: System.Threading.Thread.GetApartmentState*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetApartmentState\n  nameWithType: Thread.GetApartmentState\n- uid: System.Threading.Thread.GetCompressedStack*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetCompressedStack\n  nameWithType: Thread.GetCompressedStack\n- uid: System.Threading.Thread.GetData*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetData\n  nameWithType: Thread.GetData\n- uid: System.Threading.Thread.GetDomain*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetDomain\n  nameWithType: Thread.GetDomain\n- uid: System.Threading.Thread.GetDomainID*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetDomainID\n  nameWithType: Thread.GetDomainID\n- uid: System.Threading.Thread.GetHashCode*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Thread.GetHashCode\n- uid: System.Threading.Thread.GetNamedDataSlot*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: GetNamedDataSlot\n  nameWithType: Thread.GetNamedDataSlot\n- uid: System.Threading.Thread.Interrupt*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Interrupt\n  nameWithType: Thread.Interrupt\n- uid: System.Threading.Thread.IsAlive*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: IsAlive\n  nameWithType: Thread.IsAlive\n- uid: System.Threading.Thread.IsBackground*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: IsBackground\n  nameWithType: Thread.IsBackground\n- uid: System.Threading.Thread.IsThreadPoolThread*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: IsThreadPoolThread\n  nameWithType: Thread.IsThreadPoolThread\n- uid: System.Threading.Thread.Join*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Join\n  nameWithType: Thread.Join\n- uid: System.Threading.Thread.ManagedThreadId*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: ManagedThreadId\n  nameWithType: Thread.ManagedThreadId\n- uid: System.Threading.Thread.MemoryBarrier*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: MemoryBarrier\n  nameWithType: Thread.MemoryBarrier\n- uid: System.Threading.Thread.Name*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Name\n  nameWithType: Thread.Name\n- uid: System.Threading.Thread.Priority*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Priority\n  nameWithType: Thread.Priority\n- uid: System.Threading.Thread.ResetAbort*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: ResetAbort\n  nameWithType: Thread.ResetAbort\n- uid: System.Threading.Thread.Resume*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Resume\n  nameWithType: Thread.Resume\n- uid: System.Threading.Thread.SetApartmentState*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: SetApartmentState\n  nameWithType: Thread.SetApartmentState\n- uid: System.Threading.Thread.SetCompressedStack*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: SetCompressedStack\n  nameWithType: Thread.SetCompressedStack\n- uid: System.Threading.Thread.SetData*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: SetData\n  nameWithType: Thread.SetData\n- uid: System.Threading.Thread.Sleep*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Sleep\n  nameWithType: Thread.Sleep\n- uid: System.Threading.Thread.SpinWait*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: SpinWait\n  nameWithType: Thread.SpinWait\n- uid: System.Threading.Thread.Start*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Start\n  nameWithType: Thread.Start\n- uid: System.Threading.Thread.Suspend*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Suspend\n  nameWithType: Thread.Suspend\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: System.Runtime.InteropServices._Thread.GetIDsOfNames\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.GetIDsOfNames\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: System.Runtime.InteropServices._Thread.GetTypeInfo\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.GetTypeInfo\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: System.Runtime.InteropServices._Thread.GetTypeInfoCount\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.GetTypeInfoCount\n- uid: System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: System.Runtime.InteropServices._Thread.Invoke\n  nameWithType: Thread.System.Runtime.InteropServices._Thread.Invoke\n- uid: System.Threading.Thread.ThreadState*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: ThreadState\n  nameWithType: Thread.ThreadState\n- uid: System.Threading.Thread.TrySetApartmentState*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: TrySetApartmentState\n  nameWithType: Thread.TrySetApartmentState\n- uid: System.Threading.Thread.VolatileRead*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileRead\n  nameWithType: Thread.VolatileRead\n- uid: System.Threading.Thread.VolatileWrite*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: VolatileWrite\n  nameWithType: Thread.VolatileWrite\n- uid: System.Threading.Thread.Yield*\n  parent: System.Threading.Thread\n  isExternal: false\n  name: Yield\n  nameWithType: Thread.Yield\n"}