{"nodes":[{"pos":[1243,2070],"content":"Provides a threading service that allows the host application creating a workflow instance to donate the <xref href=\"System.Threading.Thread\"></xref> on which the workflow instance is run. Using this threading service, host applications can run a workflow instance on a single <xref href=\"System.Threading.Thread\"></xref> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by [System.Threading.Timer](~/add/includes/ajax-current-ext-md.md)).This mode blocks the execution of the host application until the workflow instance becomes idle. Subsequently, the workflow instance can only be executed using the <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow*> method of this service.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a threading service that allows the host application creating a workflow instance to donate the <bpt id=\"p1\">&lt;xref href=\"System.Threading.Thread\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on which the workflow instance is run.","pos":[0,188],"source":"Provides a threading service that allows the host application creating a workflow instance to donate the <xref href=\"System.Threading.Thread\"></xref> on which the workflow instance is run."},{"content":"Using this threading service, host applications can run a workflow instance on a single <bpt id=\"p1\">&lt;xref href=\"System.Threading.Thread\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by <bpt id=\"p2\">[</bpt>System.Threading.Timer<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>).This mode blocks the execution of the host application until the workflow instance becomes idle.","pos":[189,653],"source":" Using this threading service, host applications can run a workflow instance on a single <xref href=\"System.Threading.Thread\"></xref> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by [System.Threading.Timer](~/add/includes/ajax-current-ext-md.md)).This mode blocks the execution of the host application until the workflow instance becomes idle."},{"content":"Subsequently, the workflow instance can only be executed using the &lt;xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow*&gt; method of this service.","pos":[654,827],"source":" Subsequently, the workflow instance can only be executed using the <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow*> method of this service."}]},{"pos":[2083,2406],"content":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       ManualWorkflowSchedulerService does not automatically run a workflow instance that is in the queue. The host must call <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A> to run a specified workflow.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph><ph id=\"ph2\"> &gt;  </ph><ph id=\"ph3\">[!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]</ph>       ManualWorkflowSchedulerService does not automatically run a workflow instance that is in the queue.","pos":[0,187],"source":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       ManualWorkflowSchedulerService does not automatically run a workflow instance that is in the queue."},{"content":"The host must call &lt;xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A&gt; to run a specified workflow.","pos":[188,320],"source":" The host must call <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A> to run a specified workflow."}]},{"pos":[3811,3935],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class."},{"pos":[4725,4849],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class."},{"pos":[5023,5464],"content":"<xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> that determines how delay activities are handled. If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the host must manually resume the workflow after the delay activities expire.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines how delay activities are handled.","pos":[0,116],"source":"<xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> that determines how delay activities are handled."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer).","pos":[117,296],"source":" If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer)."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the host must manually resume the workflow after the delay activities expire.","pos":[297,441],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the host must manually resume the workflow after the delay activities expire."}]},{"pos":[6278,6402],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class."},{"pos":[6648,7094],"content":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that contains parameters for `useActiveTimers`. If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the host must manually resume the workflow after the delay activities expire.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains parameters for <ph id=\"ph1\">`useActiveTimers`</ph>.","pos":[0,121],"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that contains parameters for `useActiveTimers`."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer).","pos":[122,301],"source":" If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer)."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the host must manually resume the workflow after the delay activities expire.","pos":[302,446],"source":" If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the host must manually resume the workflow after the delay activities expire."}]},{"pos":[7708,7767],"content":"Cancels the specified existing workflow instance work item.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels the specified existing workflow instance work item.","pos":[0,59]}]},{"pos":[7915,7997],"content":"The <xref:System.Guid> associated with the existing scheduled work item to cancel.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Guid&gt; associated with the existing scheduled work item to cancel.","pos":[0,82],"source":"The <xref:System.Guid> associated with the existing scheduled work item to cancel."}]},{"pos":[8589,9053],"content":"Overloaded from &lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=fullName&gt;. This method is called whenever &lt;xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A?displayProperty=fullName&gt; is called and is used by the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Overloaded from <ph id=\"ph1\">&amp;lt;</ph>xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,122],"source":"Overloaded from &lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=fullName&gt;."},{"content":"This method is called whenever <ph id=\"ph1\">&amp;lt;</ph>xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> is called and is used by the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to do work that is needed when the <bpt id=\"p2\">&lt;xref href=\"System.Workflow.Runtime.WorkflowRuntime\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> starts.","pos":[123,464],"source":" This method is called whenever &lt;xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A?displayProperty=fullName&gt; is called and is used by the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> starts."}]},{"pos":[9776,9813],"content":"Runs the specified workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Runs the specified workflow instance.","pos":[0,37]}]},{"pos":[9825,9990],"content":"This is a synchronous call that uses the current thread to run the workflow. It does not return until the workflow idles, suspends, completes, terminates, or aborts.","needQuote":true,"needEscape":true,"nodes":[{"content":"This is a synchronous call that uses the current thread to run the workflow. It does not return until the workflow idles, suspends, completes, terminates, or aborts.","pos":[0,165],"nodes":[{"content":"This is a synchronous call that uses the current thread to run the workflow.","pos":[0,76]},{"content":"It does not return until the workflow idles, suspends, completes, terminates, or aborts.","pos":[77,165]}]}]},{"pos":[10153,10209],"content":"The <xref:System.Guid> for the workflow instance to run.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Guid&gt; for the workflow instance to run.","pos":[0,56],"source":"The <xref:System.Guid> for the workflow instance to run."}]},{"pos":[10268,10435],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the workflow starts running; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the workflow starts running; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10632,10681],"content":"<ph id=\"ph1\">&lt;code&gt;workflowInstanceId&lt;/code&gt;</ph> is an empty GUID.","needQuote":true,"needEscape":true,"source":"<code>workflowInstanceId</code> is an empty GUID."},{"pos":[11305,11439],"content":"Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate.","pos":[0,134]}]},{"pos":[11659,11765],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Threading.WaitCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> multicast delegate that represents the method to run.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Threading.WaitCallback\"></xref> multicast delegate that represents the method to run."},{"pos":[11838,11897],"content":"A <xref:System.Guid> that represents the workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Guid&gt; that represents the workflow instance.","pos":[0,59],"source":"A <xref:System.Guid> that represents the workflow instance."}]},{"pos":[12099,12232],"content":"<ph id=\"ph1\">&lt;code&gt;callback&lt;/code&gt;</ph> contains a null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in Visual Basic).","needQuote":true,"needEscape":true,"source":"<code>callback</code> contains a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic)."},{"pos":[12954,13095],"content":"Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <xref:System.DateTime> and GUIDs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, &lt;xref:System.DateTime&gt; and GUIDs.","pos":[0,141],"source":"Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <xref:System.DateTime> and GUIDs."}]},{"pos":[13347,13453],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Threading.WaitCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> multicast delegate that represents the method to run.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Threading.WaitCallback\"></xref> multicast delegate that represents the method to run."},{"pos":[13526,13585],"content":"A <xref:System.Guid> that represents the workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Guid&gt; that represents the workflow instance.","pos":[0,59],"source":"A <xref:System.Guid> that represents the workflow instance."}]},{"pos":[13651,13730],"content":"The <xref:System.DateTime> that indicates the time to begin running the thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; that indicates the time to begin running the thread.","pos":[0,79],"source":"The <xref:System.DateTime> that indicates the time to begin running the thread."}]},{"pos":[13792,13850],"content":"A <xref:System.Guid> that represents the scheduled thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Guid&gt; that represents the scheduled thread.","pos":[0,58],"source":"A <xref:System.Guid> that represents the scheduled thread."}]},{"pos":[14052,14185],"content":"<ph id=\"ph1\">&lt;code&gt;callback&lt;/code&gt;</ph> contains a null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in Visual Basic).","needQuote":true,"needEscape":true,"source":"<code>callback</code> contains a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic)."},{"pos":[14280,14353],"content":"<ph id=\"ph1\">&lt;code&gt;workflowInstanceId&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;timerId&lt;/code&gt;</ph> is an empty GUID.","needQuote":true,"needEscape":true,"source":"<code>workflowInstanceId</code> or <code>timerId</code> is an empty GUID."},{"pos":[14820,15145],"content":"Overloaded from &lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A?displayProperty=fullName&gt;. The <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> uses this method to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> stops.","needQuote":true,"needEscape":true,"nodes":[{"content":"Overloaded from <ph id=\"ph1\">&amp;lt;</ph>xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,117],"source":"Overloaded from &lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A?displayProperty=fullName&gt;."},{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> uses this method to do work that is needed when the <bpt id=\"p2\">&lt;xref href=\"System.Workflow.Runtime.WorkflowRuntime\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> stops.","pos":[118,325],"source":" The <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> uses this method to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> stops."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  id: ManualWorkflowSchedulerService\n  children:\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Boolean)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(System.Guid)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop\n  langs:\n  - csharp\n  name: ManualWorkflowSchedulerService\n  nameWithType: ManualWorkflowSchedulerService\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  type: Class\n  summary: Provides a threading service that allows the host application creating a workflow instance to donate the <xref href=\"System.Threading.Thread\"></xref> on which the workflow instance is run. Using this threading service, host applications can run a workflow instance on a single <xref href=\"System.Threading.Thread\"></xref> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by [System.Threading.Timer](~/add/includes/ajax-current-ext-md.md)).This mode blocks the execution of the host application until the workflow instance becomes idle. Subsequently, the workflow instance can only be executed using the <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow*> method of this service.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n ManualWorkflowSchedulerService does not automatically run a workflow instance that is in the queue. The host must call <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A> to run a specified workflow.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      public class ManualWorkflowSchedulerService : System.Workflow.Runtime.Hosting.WorkflowSchedulerService\n  inheritance:\n  - System.Object\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  - System.Workflow.Runtime.Hosting.WorkflowSchedulerService\n  implements: []\n  inheritedMembers:\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\n  platform:\n  - net462\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor\n  id: '#ctor'\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: ManualWorkflowSchedulerService()\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService()\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.ManualWorkflowSchedulerService()\n  type: Constructor\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class.\n  syntax:\n    content: public ManualWorkflowSchedulerService ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: ManualWorkflowSchedulerService(Boolean)\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(Boolean)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(Boolean)\n  type: Constructor\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class.\n  syntax:\n    content: public ManualWorkflowSchedulerService (bool useActiveTimers);\n    parameters:\n    - id: useActiveTimers\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> that determines how delay activities are handled. If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the host must manually resume the workflow after the delay activities expire.\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)\n  id: '#ctor(System.Collections.Specialized.NameValueCollection)'\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: ManualWorkflowSchedulerService(NameValueCollection)\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(NameValueCollection)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(NameValueCollection)\n  type: Constructor\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class.\n  syntax:\n    content: public ManualWorkflowSchedulerService (System.Collections.Specialized.NameValueCollection parameters);\n    parameters:\n    - id: parameters\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that contains parameters for `useActiveTimers`. If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the host must manually resume the workflow after the delay activities expire.\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(System.Guid)\n  id: Cancel(System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: Cancel(Guid)\n  nameWithType: ManualWorkflowSchedulerService.Cancel(Guid)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(Guid)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Cancels the specified existing workflow instance work item.\n  syntax:\n    content: protected override void Cancel (Guid timerId);\n    parameters:\n    - id: timerId\n      type: System.Guid\n      description: The <xref:System.Guid> associated with the existing scheduled work item to cancel.\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted\n  id: OnStarted\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: OnStarted()\n  nameWithType: ManualWorkflowSchedulerService.OnStarted()\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Overloaded from &lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=fullName&gt;. This method is called whenever &lt;xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A?displayProperty=fullName&gt; is called and is used by the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> starts.\n  syntax:\n    content: protected override void OnStarted ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\n  id: RunWorkflow(System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: RunWorkflow(Guid)\n  nameWithType: ManualWorkflowSchedulerService.RunWorkflow(Guid)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(Guid)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Runs the specified workflow instance.\n  remarks: This is a synchronous call that uses the current thread to run the workflow. It does not return until the workflow idles, suspends, completes, terminates, or aborts.\n  syntax:\n    content: public bool RunWorkflow (Guid workflowInstanceId);\n    parameters:\n    - id: workflowInstanceId\n      type: System.Guid\n      description: The <xref:System.Guid> for the workflow instance to run.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the workflow starts running; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>workflowInstanceId</code> is an empty GUID.\n  platform:\n  - net462\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)\n  id: Schedule(System.Threading.WaitCallback,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: Schedule(WaitCallback,Guid)\n  nameWithType: ManualWorkflowSchedulerService.Schedule(WaitCallback,Guid)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(WaitCallback,Guid)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate.\n  syntax:\n    content: protected override void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId);\n    parameters:\n    - id: callback\n      type: System.Threading.WaitCallback\n      description: A <xref href=\"System.Threading.WaitCallback\"></xref> multicast delegate that represents the method to run.\n    - id: workflowInstanceId\n      type: System.Guid\n      description: A <xref:System.Guid> that represents the workflow instance.\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>callback</code> contains a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic).\n  platform:\n  - net462\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)\n  id: Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: Schedule(WaitCallback,Guid,DateTime,Guid)\n  nameWithType: ManualWorkflowSchedulerService.Schedule(WaitCallback,Guid,DateTime,Guid)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(WaitCallback,Guid,DateTime,Guid)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <xref:System.DateTime> and GUIDs.\n  syntax:\n    content: protected override void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);\n    parameters:\n    - id: callback\n      type: System.Threading.WaitCallback\n      description: A <xref href=\"System.Threading.WaitCallback\"></xref> multicast delegate that represents the method to run.\n    - id: workflowInstanceId\n      type: System.Guid\n      description: A <xref:System.Guid> that represents the workflow instance.\n    - id: whenUtc\n      type: System.DateTime\n      description: The <xref:System.DateTime> that indicates the time to begin running the thread.\n    - id: timerId\n      type: System.Guid\n      description: A <xref:System.Guid> that represents the scheduled thread.\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>callback</code> contains a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic).\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>workflowInstanceId</code> or <code>timerId</code> is an empty GUID.\n  platform:\n  - net462\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop\n  id: Stop\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: ManualWorkflowSchedulerService.Stop()\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Overloaded from &lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A?displayProperty=fullName&gt;. The <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> uses this method to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> stops.\n  syntax:\n    content: protected override void Stop ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Workflow.Runtime.Hosting.WorkflowSchedulerService\n  isExternal: false\n  name: System.Workflow.Runtime.Hosting.WorkflowSchedulerService\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: ManualWorkflowSchedulerService()\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService()\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.ManualWorkflowSchedulerService()\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Boolean)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: ManualWorkflowSchedulerService(Boolean)\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(Boolean)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: ManualWorkflowSchedulerService(NameValueCollection)\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(NameValueCollection)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(NameValueCollection)\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Cancel(Guid)\n  nameWithType: ManualWorkflowSchedulerService.Cancel(Guid)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(Guid)\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: OnStarted()\n  nameWithType: ManualWorkflowSchedulerService.OnStarted()\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted()\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: RunWorkflow(Guid)\n  nameWithType: ManualWorkflowSchedulerService.RunWorkflow(Guid)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(Guid)\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Schedule(WaitCallback,Guid)\n  nameWithType: ManualWorkflowSchedulerService.Schedule(WaitCallback,Guid)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(WaitCallback,Guid)\n- uid: System.Threading.WaitCallback\n  parent: System.Threading\n  isExternal: false\n  name: WaitCallback\n  nameWithType: WaitCallback\n  fullName: System.Threading.WaitCallback\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Schedule(WaitCallback,Guid,DateTime,Guid)\n  nameWithType: ManualWorkflowSchedulerService.Schedule(WaitCallback,Guid,DateTime,Guid)\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(WaitCallback,Guid,DateTime,Guid)\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Stop()\n  nameWithType: ManualWorkflowSchedulerService.Stop()\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop()\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: ManualWorkflowSchedulerService\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Cancel\n  nameWithType: ManualWorkflowSchedulerService.Cancel\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: OnStarted\n  nameWithType: ManualWorkflowSchedulerService.OnStarted\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: RunWorkflow\n  nameWithType: ManualWorkflowSchedulerService.RunWorkflow\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Schedule\n  nameWithType: ManualWorkflowSchedulerService.Schedule\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Stop\n  nameWithType: ManualWorkflowSchedulerService.Stop\n"}