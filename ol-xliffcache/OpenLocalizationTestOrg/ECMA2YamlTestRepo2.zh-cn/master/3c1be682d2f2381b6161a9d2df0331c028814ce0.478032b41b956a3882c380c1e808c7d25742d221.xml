{"nodes":[{"pos":[1479,1623],"content":"Provides a set of methods and properties that enable applications to trace the execution of code and associate trace messages with their source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a set of methods and properties that enable applications to trace the execution of code and associate trace messages with their source.","pos":[0,144]}]},{"pos":[8561,8694],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, using the specified name for the source.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.TraceSource\"></xref> class, using the specified name for the source."},{"pos":[8707,9194],"content":"The source name is used to identify traces. It is used by a <xref:System.Diagnostics.SourceFilter> to determine whether a trace listener should produce the trace. The recommended practice is to use the name of the application for the source name.      > [!NOTE] >  It is not necessary to create a new <xref:System.Diagnostics.TraceSource> instance for each trace request. Create one <xref:System.Diagnostics.TraceSource> instance and use it for all trace requests for the application.","needQuote":false,"needEscape":true,"nodes":[{"content":"The source name is used to identify traces.","pos":[0,43]},{"content":"It is used by a &lt;xref:System.Diagnostics.SourceFilter&gt; to determine whether a trace listener should produce the trace.","pos":[44,162],"source":" It is used by a <xref:System.Diagnostics.SourceFilter> to determine whether a trace listener should produce the trace."},{"content":"The recommended practice is to use the name of the application for the source name.","pos":[163,246]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  It is not necessary to create a new &lt;xref:System.Diagnostics.TraceSource&gt; instance for each trace request.","pos":[252,371],"source":"      > [!NOTE] >  It is not necessary to create a new <xref:System.Diagnostics.TraceSource> instance for each trace request."},{"content":"Create one &lt;xref:System.Diagnostics.TraceSource&gt; instance and use it for all trace requests for the application.","pos":[372,484],"source":" Create one <xref:System.Diagnostics.TraceSource> instance and use it for all trace requests for the application."}]},{"pos":[9813,9877],"content":"The name of the source (typically, the name of the application).","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the source (typically, the name of the application).","pos":[0,64]}]},{"pos":[10044,10126],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[10221,10263],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is an empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>name</code> is an empty string (\"\")."},{"pos":[10766,10957],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, using the specified name for the source and the default source level at which tracing is to occur.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.TraceSource\"></xref> class, using the specified name for the source and the default source level at which tracing is to occur."},{"pos":[10970,11612],"content":"The source name is used to identify traces. It can be used by a <xref:System.Diagnostics.SourceSwitch> to determine if tracing is to occur and by a <xref:System.Diagnostics.SourceFilter> to determine whether to produce the trace. The default source level is used by an <xref:System.Diagnostics.EventTypeFilter> to determine if tracing is to occur based on the source level of the message to be traced.      > [!NOTE] >  It is not necessary to create a new <xref:System.Diagnostics.TraceSource> instance for each trace request. Create one <xref:System.Diagnostics.TraceSource> instance and use it for all trace requests for the application.","needQuote":false,"needEscape":true,"nodes":[{"content":"The source name is used to identify traces.","pos":[0,43]},{"content":"It can be used by a &lt;xref:System.Diagnostics.SourceSwitch&gt; to determine if tracing is to occur and by a &lt;xref:System.Diagnostics.SourceFilter&gt; to determine whether to produce the trace.","pos":[44,229],"source":" It can be used by a <xref:System.Diagnostics.SourceSwitch> to determine if tracing is to occur and by a <xref:System.Diagnostics.SourceFilter> to determine whether to produce the trace."},{"content":"The default source level is used by an &lt;xref:System.Diagnostics.EventTypeFilter&gt; to determine if tracing is to occur based on the source level of the message to be traced.","pos":[230,401],"source":" The default source level is used by an <xref:System.Diagnostics.EventTypeFilter> to determine if tracing is to occur based on the source level of the message to be traced."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  It is not necessary to create a new &lt;xref:System.Diagnostics.TraceSource&gt; instance for each trace request.","pos":[407,526],"source":"      > [!NOTE] >  It is not necessary to create a new <xref:System.Diagnostics.TraceSource> instance for each trace request."},{"content":"Create one &lt;xref:System.Diagnostics.TraceSource&gt; instance and use it for all trace requests for the application.","pos":[527,639],"source":" Create one <xref:System.Diagnostics.TraceSource> instance and use it for all trace requests for the application."}]},{"pos":[11793,11855],"content":"The name of the source, typically the name of the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the source, typically the name of the application.","pos":[0,62]}]},{"pos":[11942,12048],"content":"A bitwise combination of the enumeration values that specifies the default source level at which to trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values that specifies the default source level at which to trace.","pos":[0,106]}]},{"pos":[12215,12297],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12392,12434],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is an empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>name</code> is an empty string (\"\")."},{"pos":[12782,12862],"content":"Gets the custom switch attributes defined in the application configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the custom switch attributes defined in the application configuration file.","pos":[0,80]}]},{"pos":[12875,13648],"content":"The Attributes property identifies the custom attributes referenced in the application's configuration file. Unreferenced custom attributes are not enumerated. Classes that inherit from the <xref:System.Diagnostics.TraceSource> class can add custom attributes by overriding the <xref:System.Diagnostics.Switch.GetSupportedAttributes%2A?displayProperty=fullName> method and returning a string array of custom attribute names.       The following is a sample of a trace source element specifying the custom attribute `SecondTraceSourceAttribute`:      ```   <sources>     <source name=\"TraceTest\" switchName=\"TestSourceSwitch\"        switchType=\"Testing.MySourceSwitch, TraceSample\"        SecondTraceSourceAttribute=\"two\">     </source>   </sources>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"The Attributes property identifies the custom attributes referenced in the application's configuration file.","pos":[0,108]},{"content":"Unreferenced custom attributes are not enumerated.","pos":[109,159]},{"content":"Classes that inherit from the &lt;xref:System.Diagnostics.TraceSource&gt; class can add custom attributes by overriding the &lt;xref:System.Diagnostics.Switch.GetSupportedAttributes%2A?displayProperty=fullName&gt; method and returning a string array of custom attribute names.","pos":[160,424],"source":" Classes that inherit from the <xref:System.Diagnostics.TraceSource> class can add custom attributes by overriding the <xref:System.Diagnostics.Switch.GetSupportedAttributes%2A?displayProperty=fullName> method and returning a string array of custom attribute names."},{"content":"The following is a sample of a trace source element specifying the custom attribute <ph id=\"ph1\">`SecondTraceSourceAttribute`</ph>:      <ph id=\"ph2\">```   &lt;sources&gt;     &lt;source name=\"TraceTest\" switchName=\"TestSourceSwitch\"        switchType=\"Testing.MySourceSwitch, TraceSample\"        SecondTraceSourceAttribute=\"two\"&gt;     &lt;/source&gt;   &lt;/sources&gt;   ```</ph>","pos":[431,754],"source":"       The following is a sample of a trace source element specifying the custom attribute `SecondTraceSourceAttribute`:      ```   <sources>     <source name=\"TraceTest\" switchName=\"TestSourceSwitch\"        switchType=\"Testing.MySourceSwitch, TraceSample\"        SecondTraceSourceAttribute=\"two\">     </source>   </sources>   ```"}]},{"pos":[14304,14429],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the custom attributes for the trace switch.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.StringDictionary\"></xref> containing the custom attributes for the trace switch."},{"pos":[14828,14892],"content":"Closes all the trace listeners in the trace listener collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes all the trace listeners in the trace listener collection.","pos":[0,64]}]},{"pos":[14904,15079],"content":"The Close method calls the <xref:System.Diagnostics.TraceListener.Close%2A> method of each trace listener in the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Close method calls the &lt;xref:System.Diagnostics.TraceListener.Close%2A&gt; method of each trace listener in the &lt;xref:System.Diagnostics.TraceSource.Listeners%2A&gt; collection.","pos":[0,175],"source":"The Close method calls the <xref:System.Diagnostics.TraceListener.Close%2A> method of each trace listener in the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection."}]},{"pos":[16001,16066],"content":"Flushes all the trace listeners in the trace listener collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flushes all the trace listeners in the trace listener collection.","pos":[0,65]}]},{"pos":[16078,16253],"content":"The Flush method calls the <xref:System.Diagnostics.TraceListener.Flush%2A> method of each trace listener in the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Flush method calls the &lt;xref:System.Diagnostics.TraceListener.Flush%2A&gt; method of each trace listener in the &lt;xref:System.Diagnostics.TraceSource.Listeners%2A&gt; collection.","pos":[0,175],"source":"The Flush method calls the <xref:System.Diagnostics.TraceListener.Flush%2A> method of each trace listener in the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection."}]},{"pos":[16952,17010],"content":"An attempt was made to trace an event during finalization.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to trace an event during finalization.","pos":[0,58]}]},{"pos":[17422,17479],"content":"Gets the custom attributes supported by the trace source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the custom attributes supported by the trace source.","pos":[0,57]}]},{"pos":[17491,17560],"content":"The default implementation for GetSupportedAttributes returns <ph id=\"ph1\">`null`</ph>.","needQuote":true,"needEscape":true,"source":"The default implementation for GetSupportedAttributes returns `null`."},{"pos":[18103,18276],"content":"A string array naming the custom attributes supported by the trace source, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if there are no custom attributes.","needQuote":true,"needEscape":true,"source":"A string array naming the custom attributes supported by the trace source, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there are no custom attributes."},{"pos":[18703,18763],"content":"Gets the collection of trace listeners for the trace source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of trace listeners for the trace source.","pos":[0,60]}]},{"pos":[18775,18849],"content":"Use this property to access and perform operations on the trace listeners.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this property to access and perform operations on the trace listeners.","pos":[0,74]}]},{"pos":[19028,19162],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the active trace listeners associated with the source.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> that contains the active trace listeners associated with the source."},{"pos":[19551,19585],"content":"Gets the name of the trace source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the trace source.","pos":[0,34]}]},{"pos":[19598,20051],"content":"The name is set by the `name` parameter passed to the constructor. You can refer to the trace source by using the `name` attribute in the configuration file.       The following XML element shows referring to a trace source in the configuration file.      ```   <configuration>     <system.diagnostics>       <sources>         <source name=\"TraceTest\">         </source>       </sources>     </system.diagnostics>   </configuration>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"The name is set by the <ph id=\"ph1\">`name`</ph> parameter passed to the constructor.","pos":[0,66],"source":"The name is set by the `name` parameter passed to the constructor."},{"content":"You can refer to the trace source by using the <ph id=\"ph1\">`name`</ph> attribute in the configuration file.","pos":[67,157],"source":" You can refer to the trace source by using the `name` attribute in the configuration file."},{"content":"The following XML element shows referring to a trace source in the configuration file.","pos":[164,250]}]},{"pos":[20594,20623],"content":"The name of the trace source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the trace source.","pos":[0,29]}]},{"pos":[21017,21054],"content":"Gets or sets the source switch value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the source switch value.","pos":[0,37]}]},{"pos":[21067,21489],"content":"The Switch property allows the filtering of messages before the trace source calls the listeners.       The switch is used to check whether trace calls should be generated or ignored. Each trace method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> to determine whether to proceed with the trace. If the call returns `true`, the listeners are called.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Switch property allows the filtering of messages before the trace source calls the listeners.","pos":[0,97]},{"content":"The switch is used to check whether trace calls should be generated or ignored.","pos":[104,183]},{"content":"Each trace method calls the &lt;xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A&gt; method of the &lt;xref:System.Diagnostics.SourceSwitch&gt; to determine whether to proceed with the trace.","pos":[184,366],"source":" Each trace method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> to determine whether to proceed with the trace."},{"content":"If the call returns <ph id=\"ph1\">`true`</ph>, the listeners are called.","pos":[367,420],"source":" If the call returns `true`, the listeners are called."}]},{"pos":[21649,21748],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.SourceSwitch\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object representing the source switch value.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.SourceSwitch\"></xref> object representing the source switch value."},{"pos":[21916,21994],"content":"Switch is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Switch is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22546,22719],"content":"Writes trace data to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and trace data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace data to the trace listeners in the &lt;xref:System.Diagnostics.TraceSource.Listeners*&gt; collection using the specified event type, event identifier, and trace data.","pos":[0,173],"source":"Writes trace data to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and trace data."}]},{"pos":[22732,23714],"content":"The TraceData method, like the <xref:System.Diagnostics.TraceSource.TraceEvent%2A> method, is intended for automated tools, but it also allows the attaching of an additional object, such as an exception instance, to the trace.       The TraceData method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A?displayProperty=fullName> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property. If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceData calls the corresponding <xref:System.Diagnostics.TraceListener.TraceData%2A> method on all listeners. Otherwise, TraceData returns without calling the listeners' methods.      > [!NOTE] >  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535. If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> object uses 65,535.","needQuote":false,"needEscape":true,"nodes":[{"content":"The TraceData method, like the &lt;xref:System.Diagnostics.TraceSource.TraceEvent%2A&gt; method, is intended for automated tools, but it also allows the attaching of an additional object, such as an exception instance, to the trace.","pos":[0,226],"source":"The TraceData method, like the <xref:System.Diagnostics.TraceSource.TraceEvent%2A> method, is intended for automated tools, but it also allows the attaching of an additional object, such as an exception instance, to the trace."},{"content":"The TraceData method calls the &lt;xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A?displayProperty=fullName&gt; method of the &lt;xref:System.Diagnostics.SourceSwitch&gt; object returned by the &lt;xref:System.Diagnostics.TraceSource.Switch%2A&gt; property.","pos":[233,476],"source":"       The TraceData method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A?displayProperty=fullName> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property."},{"content":"If &lt;xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A&gt; returns <ph id=\"ph1\">`true`</ph>, TraceData calls the corresponding &lt;xref:System.Diagnostics.TraceListener.TraceData%2A&gt; method on all listeners.","pos":[477,661],"source":" If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceData calls the corresponding <xref:System.Diagnostics.TraceListener.TraceData%2A> method on all listeners."},{"content":"Otherwise, TraceData returns without calling the listeners' methods.","pos":[662,730]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Diagnostics.EventLogTraceListener&gt; object is limited to a maximum <ph id=\"ph2\">`id`</ph> value of 65,535.","pos":[736,853],"source":"      > [!NOTE] >  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535."},{"content":"If the <ph id=\"ph1\">`id`</ph> value specified is greater than 65,535, the &lt;xref:System.Diagnostics.EventLogTraceListener&gt; object uses 65,535.","pos":[854,977],"source":" If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> object uses 65,535."}]},{"pos":[24397,24475],"content":"One of the enumeration values that specifies the event type of the trace data.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the event type of the trace data.","pos":[0,78]}]},{"pos":[24533,24568],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[24629,24644],"content":"The trace data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The trace data.","pos":[0,15]}]},{"pos":[24819,24877],"content":"An attempt was made to trace an event during finalization.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to trace an event during finalization.","pos":[0,58]}]},{"pos":[25439,25618],"content":"Writes trace data to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and trace data array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace data to the trace listeners in the &lt;xref:System.Diagnostics.TraceSource.Listeners*&gt; collection using the specified event type, event identifier, and trace data array.","pos":[0,179],"source":"Writes trace data to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and trace data array."}]},{"pos":[25631,26604],"content":"The TraceData method, like the <xref:System.Diagnostics.TraceSource.TraceEvent%2A> method, is intended for automated tools, but it also allows the attaching of additional objects, such as an exception instance and a stack trace, to the trace.       The TraceData method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property. If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceData calls the corresponding <xref:System.Diagnostics.TraceListener.TraceData%2A> method on all listeners. Otherwise, TraceData returns without calling the listeners' methods.      > [!NOTE] >  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535. If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> object uses 65,535.","needQuote":false,"needEscape":true,"nodes":[{"content":"The TraceData method, like the &lt;xref:System.Diagnostics.TraceSource.TraceEvent%2A&gt; method, is intended for automated tools, but it also allows the attaching of additional objects, such as an exception instance and a stack trace, to the trace.","pos":[0,242],"source":"The TraceData method, like the <xref:System.Diagnostics.TraceSource.TraceEvent%2A> method, is intended for automated tools, but it also allows the attaching of additional objects, such as an exception instance and a stack trace, to the trace."},{"content":"The TraceData method calls the &lt;xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A&gt; method of the &lt;xref:System.Diagnostics.SourceSwitch&gt; object returned by the &lt;xref:System.Diagnostics.TraceSource.Switch%2A&gt; property.","pos":[249,467],"source":"       The TraceData method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property."},{"content":"If &lt;xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A&gt; returns <ph id=\"ph1\">`true`</ph>, TraceData calls the corresponding &lt;xref:System.Diagnostics.TraceListener.TraceData%2A&gt; method on all listeners.","pos":[468,652],"source":" If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceData calls the corresponding <xref:System.Diagnostics.TraceListener.TraceData%2A> method on all listeners."},{"content":"Otherwise, TraceData returns without calling the listeners' methods.","pos":[653,721]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Diagnostics.EventLogTraceListener&gt; object is limited to a maximum <ph id=\"ph2\">`id`</ph> value of 65,535.","pos":[727,844],"source":"      > [!NOTE] >  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535."},{"content":"If the <ph id=\"ph1\">`id`</ph> value specified is greater than 65,535, the &lt;xref:System.Diagnostics.EventLogTraceListener&gt; object uses 65,535.","pos":[845,968],"source":" If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> object uses 65,535."}]},{"pos":[26822,26900],"content":"One of the enumeration values that specifies the event type of the trace data.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the event type of the trace data.","pos":[0,78]}]},{"pos":[26958,26993],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[27056,27098],"content":"An object array containing the trace data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object array containing the trace data.","pos":[0,42]}]},{"pos":[27273,27331],"content":"An attempt was made to trace an event during finalization.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to trace an event during finalization.","pos":[0,58]}]},{"pos":[27839,28010],"content":"Writes a trace event message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type and event identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a trace event message to the trace listeners in the &lt;xref:System.Diagnostics.TraceSource.Listeners*&gt; collection using the specified event type and event identifier.","pos":[0,171],"source":"Writes a trace event message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type and event identifier."}]},{"pos":[28023,29300],"content":"The TraceEvent method is intended to trace events that can be processed automatically by tools. For example, a monitoring tool can notify an administrator if a specific event is traced by a specific source.       The TraceEvent method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property. If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceEvent calls the corresponding <xref:System.Diagnostics.TraceListener.TraceEvent%2A> method of each listener. Otherwise, TraceEvent returns without calling the listeners' methods.       The trace content is listener specific. If the method is not overridden by the listener implementation, the default output is the name of the trace source, its numeric identity, and the event type.  Additional trace content is dependent upon the listener's <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property value.      > [!NOTE] >  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535. If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> uses 65,535.","needQuote":false,"needEscape":true,"nodes":[{"content":"The TraceEvent method is intended to trace events that can be processed automatically by tools.","pos":[0,95]},{"content":"For example, a monitoring tool can notify an administrator if a specific event is traced by a specific source.","pos":[96,206]},{"content":"The TraceEvent method calls the &lt;xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A&gt; method of the &lt;xref:System.Diagnostics.SourceSwitch&gt; object returned by the &lt;xref:System.Diagnostics.TraceSource.Switch%2A&gt; property.","pos":[213,432],"source":"       The TraceEvent method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property."},{"content":"If &lt;xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A&gt; returns <ph id=\"ph1\">`true`</ph>, TraceEvent calls the corresponding &lt;xref:System.Diagnostics.TraceListener.TraceEvent%2A&gt; method of each listener.","pos":[433,619],"source":" If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceEvent calls the corresponding <xref:System.Diagnostics.TraceListener.TraceEvent%2A> method of each listener."},{"content":"Otherwise, TraceEvent returns without calling the listeners' methods.","pos":[620,689]},{"content":"The trace content is listener specific.","pos":[696,735]},{"content":"If the method is not overridden by the listener implementation, the default output is the name of the trace source, its numeric identity, and the event type.","pos":[736,893]},{"content":"Additional trace content is dependent upon the listener's &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property value.","pos":[895,1030],"source":"  Additional trace content is dependent upon the listener's <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property value."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Diagnostics.EventLogTraceListener&gt; object is limited to a maximum <ph id=\"ph2\">`id`</ph> value of 65,535.","pos":[1036,1153],"source":"      > [!NOTE] >  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535."},{"content":"If the <ph id=\"ph1\">`id`</ph> value specified is greater than 65,535, the &lt;xref:System.Diagnostics.EventLogTraceListener&gt; uses 65,535.","pos":[1154,1270],"source":" If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> uses 65,535."}]},{"pos":[29956,30034],"content":"One of the enumeration values that specifies the event type of the trace data.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the event type of the trace data.","pos":[0,78]}]},{"pos":[30092,30127],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[30303,30361],"content":"An attempt was made to trace an event during finalization.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to trace an event during finalization.","pos":[0,58]}]},{"pos":[30918,31099],"content":"Writes a trace event message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a trace event message to the trace listeners in the &lt;xref:System.Diagnostics.TraceSource.Listeners*&gt; collection using the specified event type, event identifier, and message.","pos":[0,181],"source":"Writes a trace event message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and message."}]},{"pos":[31112,32409],"content":"The TraceEvent method is intended to trace events that can be processed automatically by tools. For example, a monitoring tool can notify an administrator if a specific event is traced by a specific source.       The TraceEvent method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property. If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceEvent calls the corresponding <xref:System.Diagnostics.TraceListener.TraceEvent%2A> method of each listener. Otherwise, TraceEvent returns without calling the listeners' methods.       The trace content is listener specific. If the method is not overridden by the listener implementation, the default output is the name of the trace source, its numeric identity, the event type, and the message.  Additional trace content is dependent upon the listener's <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property value.      > [!NOTE] >  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535. If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> object uses 65,535.","needQuote":false,"needEscape":true,"nodes":[{"content":"The TraceEvent method is intended to trace events that can be processed automatically by tools.","pos":[0,95]},{"content":"For example, a monitoring tool can notify an administrator if a specific event is traced by a specific source.","pos":[96,206]},{"content":"The TraceEvent method calls the &lt;xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A&gt; method of the &lt;xref:System.Diagnostics.SourceSwitch&gt; object returned by the &lt;xref:System.Diagnostics.TraceSource.Switch%2A&gt; property.","pos":[213,432],"source":"       The TraceEvent method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property."},{"content":"If &lt;xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A&gt; returns <ph id=\"ph1\">`true`</ph>, TraceEvent calls the corresponding &lt;xref:System.Diagnostics.TraceListener.TraceEvent%2A&gt; method of each listener.","pos":[433,619],"source":" If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceEvent calls the corresponding <xref:System.Diagnostics.TraceListener.TraceEvent%2A> method of each listener."},{"content":"Otherwise, TraceEvent returns without calling the listeners' methods.","pos":[620,689]},{"content":"The trace content is listener specific.","pos":[696,735]},{"content":"If the method is not overridden by the listener implementation, the default output is the name of the trace source, its numeric identity, the event type, and the message.","pos":[736,906]},{"content":"Additional trace content is dependent upon the listener's &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property value.","pos":[908,1043],"source":"  Additional trace content is dependent upon the listener's <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property value."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Diagnostics.EventLogTraceListener&gt; object is limited to a maximum <ph id=\"ph2\">`id`</ph> value of 65,535.","pos":[1049,1166],"source":"      > [!NOTE] >  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535."},{"content":"If the <ph id=\"ph1\">`id`</ph> value specified is greater than 65,535, the &lt;xref:System.Diagnostics.EventLogTraceListener&gt; object uses 65,535.","pos":[1167,1290],"source":" If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> object uses 65,535."}]},{"pos":[33173,33251],"content":"One of the enumeration values that specifies the event type of the trace data.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the event type of the trace data.","pos":[0,78]}]},{"pos":[33309,33344],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[33408,33435],"content":"The trace message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The trace message to write.","pos":[0,27]}]},{"pos":[33611,33669],"content":"An attempt was made to trace an event during finalization.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to trace an event during finalization.","pos":[0,58]}]},{"pos":[34285,34476],"content":"Writes a trace event to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and argument array and format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a trace event to the trace listeners in the &lt;xref:System.Diagnostics.TraceSource.Listeners*&gt; collection using the specified event type, event identifier, and argument array and format.","pos":[0,191],"source":"Writes a trace event to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and argument array and format."}]},{"pos":[37179,37257],"content":"One of the enumeration values that specifies the event type of the trace data.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the event type of the trace data.","pos":[0,78]}]},{"pos":[37315,37350],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[37413,37563],"content":"A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <ph id=\"ph1\">`args`</ph> array.","needQuote":true,"needEscape":true,"source":"A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the `args` array."},{"pos":[37626,37742],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array containing zero or more objects to format.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format."},{"pos":[37914,37998],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[38090,38280],"content":"<code>format</code> is invalid.       -or-       The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","pos":[0,31],"source":"<code>format</code> is invalid."},{"content":"-or-       The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.","pos":[38,186]}]},{"pos":[38388,38446],"content":"An attempt was made to trace an event during finalization.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to trace an event during finalization.","pos":[0,58]}]},{"pos":[38876,39026],"content":"Writes an informational message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an informational message to the trace listeners in the &lt;xref:System.Diagnostics.TraceSource.Listeners*&gt; collection using the specified message.","pos":[0,150],"source":"Writes an informational message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified message."}]},{"pos":[39039,39810],"content":"The TraceInformation method provides an informational message intended to be read by users and not by tools.       TraceInformation calls the <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> method, setting `eventType` to <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> and passing the informative message as the message string. The <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> method in turn calls the <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> method of each trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"The TraceInformation method provides an informational message intended to be read by users and not by tools.","pos":[0,108]},{"content":"TraceInformation calls the &lt;xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29&gt; method, setting <ph id=\"ph1\">`eventType`</ph> to &lt;xref:System.Diagnostics.TraceEventType?displayProperty=fullName&gt; and passing the informative message as the message string.","pos":[115,416],"source":"       TraceInformation calls the <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> method, setting `eventType` to <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> and passing the informative message as the message string."},{"content":"The &lt;xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29&gt; method in turn calls the &lt;xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29&gt; method of each trace listener.","pos":[417,769],"source":" The <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> method in turn calls the <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> method of each trace listener."}]},{"pos":[39961,39994],"content":"The informative message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The informative message to write.","pos":[0,33]}]},{"pos":[40176,40234],"content":"An attempt was made to trace an event during finalization.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to trace an event during finalization.","pos":[0,58]}]},{"pos":[40723,40905],"content":"Writes an informational message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified object array and formatting information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an informational message to the trace listeners in the &lt;xref:System.Diagnostics.TraceSource.Listeners*&gt; collection using the specified object array and formatting information.","pos":[0,182],"source":"Writes an informational message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified object array and formatting information."}]},{"pos":[42348,42498],"content":"A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <ph id=\"ph1\">`args`</ph> array.","needQuote":true,"needEscape":true,"source":"A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the `args` array."},{"pos":[42561,42612],"content":"An array containing zero or more objects to format.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array containing zero or more objects to format.","pos":[0,51]}]},{"pos":[42790,42874],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[42966,43156],"content":"<code>format</code> is invalid.       -or-       The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","pos":[0,31],"source":"<code>format</code> is invalid."},{"content":"-or-       The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.","pos":[38,186]}]},{"pos":[43264,43322],"content":"An attempt was made to trace an event during finalization.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to trace an event during finalization.","pos":[0,58]}]},{"pos":[43820,44023],"content":"Writes a trace transfer message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified numeric identifier, message, and related activity identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a trace transfer message to the trace listeners in the &lt;xref:System.Diagnostics.TraceSource.Listeners*&gt; collection using the specified numeric identifier, message, and related activity identifier.","pos":[0,203],"source":"Writes a trace transfer message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified numeric identifier, message, and related activity identifier."}]},{"pos":[44036,45460],"content":"The TraceTransfer method calls the <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> method of each trace listener in the <xref:System.Diagnostics.TraceSource.Listeners%2A> property to write the trace information. The default <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> method in the base <xref:System.Diagnostics.TraceListener> class calls the <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29?displayProperty=fullName> method to process the call, setting `eventType` to <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> and appending a string representation of the `relatedActivityId` GUID to `message`.       TraceTransfer is intended to be used with the logical operations of a <xref:System.Diagnostics.CorrelationManager>. The `relatedActivityId` parameter relates to the <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> property of a <xref:System.Diagnostics.CorrelationManager> object. If a logical operation begins in one activity and transfers to another, the second activity logs the transfer by calling the TraceTransfer method. The TraceTransfer call relates the new activity identity to the previous identity. The most likely consumer of this functionality is a trace viewer that can report logical operations that span multiple activities.","needQuote":false,"needEscape":true,"nodes":[{"content":"The TraceTransfer method calls the &lt;xref:System.Diagnostics.TraceListener.TraceTransfer%2A&gt; method of each trace listener in the &lt;xref:System.Diagnostics.TraceSource.Listeners%2A&gt; property to write the trace information.","pos":[0,220],"source":"The TraceTransfer method calls the <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> method of each trace listener in the <xref:System.Diagnostics.TraceSource.Listeners%2A> property to write the trace information."},{"content":"The default &lt;xref:System.Diagnostics.TraceListener.TraceTransfer%2A&gt; method in the base &lt;xref:System.Diagnostics.TraceListener&gt; class calls the &lt;xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29?displayProperty=fullName&gt; method to process the call, setting <ph id=\"ph1\">`eventType`</ph> to &lt;xref:System.Diagnostics.TraceEventType?displayProperty=fullName&gt; and appending a string representation of the <ph id=\"ph2\">`relatedActivityId`</ph> GUID to <ph id=\"ph3\">`message`</ph>.","pos":[221,764],"source":" The default <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> method in the base <xref:System.Diagnostics.TraceListener> class calls the <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29?displayProperty=fullName> method to process the call, setting `eventType` to <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> and appending a string representation of the `relatedActivityId` GUID to `message`."},{"content":"TraceTransfer is intended to be used with the logical operations of a &lt;xref:System.Diagnostics.CorrelationManager&gt;.","pos":[771,886],"source":"       TraceTransfer is intended to be used with the logical operations of a <xref:System.Diagnostics.CorrelationManager>."},{"content":"The <ph id=\"ph1\">`relatedActivityId`</ph> parameter relates to the &lt;xref:System.Diagnostics.CorrelationManager.ActivityId%2A&gt; property of a &lt;xref:System.Diagnostics.CorrelationManager&gt; object.","pos":[887,1061],"source":" The `relatedActivityId` parameter relates to the <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> property of a <xref:System.Diagnostics.CorrelationManager> object."},{"content":"If a logical operation begins in one activity and transfers to another, the second activity logs the transfer by calling the TraceTransfer method.","pos":[1062,1208]},{"content":"The TraceTransfer call relates the new activity identity to the previous identity.","pos":[1209,1291]},{"content":"The most likely consumer of this functionality is a trace viewer that can report logical operations that span multiple activities.","pos":[1292,1422]}]},{"pos":[45634,45669],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[45733,45760],"content":"The trace message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The trace message to write.","pos":[0,27]}]},{"pos":[45832,45881],"content":"A structure that identifies the related activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"A structure that identifies the related activity.","pos":[0,49]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.TraceSource\n  id: TraceSource\n  children:\n  - System.Diagnostics.TraceSource.#ctor(System.String)\n  - System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)\n  - System.Diagnostics.TraceSource.Attributes\n  - System.Diagnostics.TraceSource.Close\n  - System.Diagnostics.TraceSource.Flush\n  - System.Diagnostics.TraceSource.GetSupportedAttributes\n  - System.Diagnostics.TraceSource.Listeners\n  - System.Diagnostics.TraceSource.Name\n  - System.Diagnostics.TraceSource.Switch\n  - System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)\n  - System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  - System.Diagnostics.TraceSource.TraceInformation(System.String)\n  - System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])\n  - System.Diagnostics.TraceSource.TraceTransfer(System.Int32,System.String,System.Guid)\n  langs:\n  - csharp\n  name: TraceSource\n  nameWithType: TraceSource\n  fullName: System.Diagnostics.TraceSource\n  type: Class\n  summary: Provides a set of methods and properties that enable applications to trace the execution of code and associate trace messages with their source.\n  remarks: \"The TraceSource class is used by applications to produce traces that can be associated with the application. TraceSource provides tracing methods that allow you to easily trace events, trace data, and issue informational traces. Trace output from TraceSource can be controlled by configuration file settings. The configuration file is located in the folder with the application executable and has the name of the application with the .config file name extension added. For example, the name of the configuration file for TraceSourceSample.exe is TraceSourceSample.exe.config. The configuration file can be used to determine where the trace information is to be sent and what levels of activity are to be traced. The following example shows the contents of a sample application configuration file.  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <sources>  \\n      <source name=\\\"TraceTest\\\" switchName=\\\"SourceSwitch\\\"   \\n        switchType=\\\"System.Diagnostics.SourceSwitch\\\" >  \\n        <listeners>  \\n          <add name=\\\"console\\\" />  \\n          <remove name =\\\"Default\\\" />  \\n        </listeners>  \\n      </source>  \\n    </sources>  \\n    <switches>  \\n      <!-- You can set the level at which tracing is to occur -->  \\n      <add name=\\\"SourceSwitch\\\" value=\\\"Warning\\\" />  \\n        <!-- You can turn tracing off -->  \\n        <!--add name=\\\"SourceSwitch\\\" value=\\\"Off\\\" -->  \\n    </switches>  \\n    <sharedListeners>  \\n      <add name=\\\"console\\\"   \\n        type=\\\"System.Diagnostics.ConsoleTraceListener\\\"   \\n        initializeData=\\\"false\\\"/>  \\n    </sharedListeners>  \\n    <trace autoflush=\\\"true\\\" indentsize=\\\"4\\\">  \\n      <listeners>  \\n        <add name=\\\"console\\\" />  \\n      </listeners>  \\n    </trace>  \\n  </system.diagnostics>  \\n</configuration>  \\n```  \\n  \\n The TraceSource class is identified by the name of a source, typically the name of the application.  The trace messages coming from a particular component can be initiated by a particular trace source, allowing all messages coming from that component to be easily identified.  \\n  \\n TraceSource defines tracing methods but does not actually provide any specific mechanism for generating and storing tracing data. The tracing data is produced by trace listeners, which are plug-ins that can be loaded by trace sources.  \\n  \\n> [!NOTE]\\n>  You should not call the tracing methods during finalization. Doing so can result in an <xref:System.ObjectDisposedException> being thrown.  \\n  \\n You can customize the tracing output's target by adding or removing <xref:System.Diagnostics.TraceListener> instances to or from the collection stored in the <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName> property. By default, trace output is produced using an instance of the <xref:System.Diagnostics.DefaultTraceListener> class. The preceding configuration file example demonstrates removing the <xref:System.Diagnostics.DefaultTraceListener> and adding a <xref:System.Diagnostics.ConsoleTraceListener> to produce the trace output for the trace source. For more information, see [\\\\&lt;listeners\\\\&gt;](../Topic/%3Clisteners%3E%20Element%20for%20%3Csource%3E.md) and [\\\\&lt;sharedListeners\\\\&gt;](../Topic/%3CsharedListeners%3E%20Element.md).  \\n  \\n> [!NOTE]\\n>  Adding a trace listener to the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available. The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic. It may be useful to place calls to the TraceSource methods in `try`/`catch` blocks to detect and handle any exceptions from trace listeners.  \\n  \\n The <xref:System.Diagnostics.SourceSwitch> class provides the means to dynamically control the tracing output. The preceding configuration file example shows how you can turn off tracing from a trace source and control the level at which tracing occurs.  You can modify the value of the source switch without recompiling your application. For information on using the configuration file to set a switch, see <xref:System.Diagnostics.Switch> and [How to: Create, Initialize and Configure Trace Switches](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  If you modify a configuration file while an application is executing, the application must be stopped and restarted or the <xref:System.Diagnostics.Trace.Refresh%2A> method must be called before the new settings take effect.  \\n  \\n The <xref:System.Diagnostics.TraceEventType> enumeration is used to define the event type of the trace message. Trace filters use the <xref:System.Diagnostics.TraceEventType> to determine if a trace listener should produce the trace message.  \\n  \\n The trace listeners can optionally have an additional layer of filtering through a trace filter.  If a trace listener has an associated filter, the listener calls the <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> method on that filter to determine whether or not to produce the trace information.  \\n  \\n The trace listeners use the values of the <xref:System.Diagnostics.Trace> class properties <xref:System.Diagnostics.Trace.Indent%2A>, <xref:System.Diagnostics.Trace.IndentSize%2A>, and <xref:System.Diagnostics.Trace.AutoFlush%2A> to format trace output. You can use configuration file attributes to set the <xref:System.Diagnostics.Trace.Indent%2A>, <xref:System.Diagnostics.Trace.IndentSize%2A>, and <xref:System.Diagnostics.Trace.AutoFlush%2A> properties. The following example sets the <xref:System.Diagnostics.Trace.AutoFlush%2A> property to `false` and the <xref:System.Diagnostics.Trace.IndentSize%2A> property to 3.  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <trace autoflush=\\\"false\\\" indentsize=\\\"3\\\" />  \\n  </system.diagnostics>  \\n</configuration>  \\n```\"\n  example:\n  - \"The following code example shows the use of the TraceSource class to forward traces to listeners.  The example also demonstrates switch and filter usage.  \\n  \\n [!code-cpp[System.Diagnostics.TraceSource2#1](~/add/codesnippet/cpp/t-system.diagnostics.tra_3_1.cpp)]\\n [!code-cs[System.Diagnostics.TraceSource2#1](~/add/codesnippet/csharp/t-system.diagnostics.tra_3_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#1](~/add/codesnippet/visualbasic/t-system.diagnostics.tra_3_1.vb)]\"\n  syntax:\n    content: public class TraceSource\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: TraceSource(String)\n  nameWithType: TraceSource.TraceSource(String)\n  fullName: System.Diagnostics.TraceSource.TraceSource(String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.TraceSource\"></xref> class, using the specified name for the source.\n  remarks: \"The source name is used to identify traces. It is used by a <xref:System.Diagnostics.SourceFilter> to determine whether a trace listener should produce the trace. The recommended practice is to use the name of the application for the source name.  \\n  \\n> [!NOTE]\\n>  It is not necessary to create a new <xref:System.Diagnostics.TraceSource> instance for each trace request. Create one <xref:System.Diagnostics.TraceSource> instance and use it for all trace requests for the application.\"\n  example:\n  - \"The following code example shows the use of the TraceSource constructor to create a new <xref:System.Diagnostics.TraceSource> object. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource2#9](~/add/codesnippet/csharp/m-system.diagnostics.tra_28_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#9](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_28_1.vb)]\"\n  syntax:\n    content: public TraceSource (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the source (typically, the name of the application).\n  overload: System.Diagnostics.TraceSource.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>name</code> is an empty string (\"\").\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)\n  id: '#ctor(System.String,System.Diagnostics.SourceLevels)'\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: TraceSource(String,SourceLevels)\n  nameWithType: TraceSource.TraceSource(String,SourceLevels)\n  fullName: System.Diagnostics.TraceSource.TraceSource(String,SourceLevels)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.TraceSource\"></xref> class, using the specified name for the source and the default source level at which tracing is to occur.\n  remarks: \"The source name is used to identify traces. It can be used by a <xref:System.Diagnostics.SourceSwitch> to determine if tracing is to occur and by a <xref:System.Diagnostics.SourceFilter> to determine whether to produce the trace. The default source level is used by an <xref:System.Diagnostics.EventTypeFilter> to determine if tracing is to occur based on the source level of the message to be traced.  \\n  \\n> [!NOTE]\\n>  It is not necessary to create a new <xref:System.Diagnostics.TraceSource> instance for each trace request. Create one <xref:System.Diagnostics.TraceSource> instance and use it for all trace requests for the application.\"\n  syntax:\n    content: public TraceSource (string name, System.Diagnostics.SourceLevels defaultLevel);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the source, typically the name of the application.\n    - id: defaultLevel\n      type: System.Diagnostics.SourceLevels\n      description: A bitwise combination of the enumeration values that specifies the default source level at which to trace.\n  overload: System.Diagnostics.TraceSource.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>name</code> is an empty string (\"\").\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.Attributes\n  id: Attributes\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: TraceSource.Attributes\n  fullName: System.Diagnostics.TraceSource.Attributes\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the custom switch attributes defined in the application configuration file.\n  remarks: \"The Attributes property identifies the custom attributes referenced in the application's configuration file. Unreferenced custom attributes are not enumerated. Classes that inherit from the <xref:System.Diagnostics.TraceSource> class can add custom attributes by overriding the <xref:System.Diagnostics.Switch.GetSupportedAttributes%2A?displayProperty=fullName> method and returning a string array of custom attribute names.  \\n  \\n The following is a sample of a trace source element specifying the custom attribute `SecondTraceSourceAttribute`:  \\n  \\n```  \\n<sources>  \\n  <source name=\\\"TraceTest\\\" switchName=\\\"TestSourceSwitch\\\"   \\n    switchType=\\\"Testing.MySourceSwitch, TraceSample\\\"   \\n    SecondTraceSourceAttribute=\\\"two\\\">  \\n  </source>  \\n</sources>  \\n```\"\n  example:\n  - \"The following code sample shows how to display the custom attributes for a <xref:System.Diagnostics.TraceSource>.  This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource2#14](~/add/codesnippet/csharp/p-system.diagnostics.tra_7_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#14](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_7_1.vb)]\"\n  syntax:\n    content: public System.Collections.Specialized.StringDictionary Attributes { get; }\n    return:\n      type: System.Collections.Specialized.StringDictionary\n      description: A <xref href=\"System.Collections.Specialized.StringDictionary\"></xref> containing the custom attributes for the trace switch.\n  overload: System.Diagnostics.TraceSource.Attributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.Close\n  id: Close\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: TraceSource.Close()\n  fullName: System.Diagnostics.TraceSource.Close()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Closes all the trace listeners in the trace listener collection.\n  remarks: The Close method calls the <xref:System.Diagnostics.TraceListener.Close%2A> method of each trace listener in the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.\n  example:\n  - \"The following code example shows how you can use the Close method to close all the listeners in the collection. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource2#33](~/add/codesnippet/csharp/m-system.diagnostics.tra_21_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#33](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_21_1.vb)]\"\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Diagnostics.TraceSource.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.Flush\n  id: Flush\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: TraceSource.Flush()\n  fullName: System.Diagnostics.TraceSource.Flush()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Flushes all the trace listeners in the trace listener collection.\n  remarks: The Flush method calls the <xref:System.Diagnostics.TraceListener.Flush%2A> method of each trace listener in the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.\n  example:\n  - \"The following code example shows how you can use the Flush method to flush all the listeners in the collection. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource2#33](~/add/codesnippet/csharp/m-system.diagnostics.tra_15_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#33](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_15_1.vb)]\"\n  syntax:\n    content: public void Flush ();\n    parameters: []\n  overload: System.Diagnostics.TraceSource.Flush*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An attempt was made to trace an event during finalization.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.GetSupportedAttributes\n  id: GetSupportedAttributes\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: GetSupportedAttributes()\n  nameWithType: TraceSource.GetSupportedAttributes()\n  fullName: System.Diagnostics.TraceSource.GetSupportedAttributes()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the custom attributes supported by the trace source.\n  remarks: The default implementation for GetSupportedAttributes returns `null`.\n  example:\n  - \"The following code example shows an override of the GetSupportedAttributes method to identify the custom attributes for the `MyTraceSource` class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource#33](~/add/codesnippet/csharp/m-system.diagnostics.tra_0_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource#33](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_0_1.vb)]\"\n  syntax:\n    content: protected virtual string[] GetSupportedAttributes ();\n    parameters: []\n    return:\n      type: System.String[]\n      description: A string array naming the custom attributes supported by the trace source, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there are no custom attributes.\n  overload: System.Diagnostics.TraceSource.GetSupportedAttributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.Listeners\n  id: Listeners\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: Listeners\n  nameWithType: TraceSource.Listeners\n  fullName: System.Diagnostics.TraceSource.Listeners\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the collection of trace listeners for the trace source.\n  remarks: Use this property to access and perform operations on the trace listeners.\n  syntax:\n    content: public System.Diagnostics.TraceListenerCollection Listeners { get; }\n    return:\n      type: System.Diagnostics.TraceListenerCollection\n      description: A <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> that contains the active trace listeners associated with the source.\n  overload: System.Diagnostics.TraceSource.Listeners*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.Name\n  id: Name\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: Name\n  nameWithType: TraceSource.Name\n  fullName: System.Diagnostics.TraceSource.Name\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the name of the trace source.\n  remarks: \"The name is set by the `name` parameter passed to the constructor. You can refer to the trace source by using the `name` attribute in the configuration file.  \\n  \\n The following XML element shows referring to a trace source in the configuration file.  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <sources>  \\n      <source name=\\\"TraceTest\\\">  \\n      </source>  \\n    </sources>  \\n  </system.diagnostics>  \\n</configuration>  \\n```\"\n  example:\n  - \"The following code sample shows how to name a trace source in the constructor call.  This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource2#9](~/add/codesnippet/csharp/p-system.diagnostics.tra_0_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#9](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_0_1.vb)]\"\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: The name of the trace source.\n  overload: System.Diagnostics.TraceSource.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.Switch\n  id: Switch\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: Switch\n  nameWithType: TraceSource.Switch\n  fullName: System.Diagnostics.TraceSource.Switch\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the source switch value.\n  remarks: \"The Switch property allows the filtering of messages before the trace source calls the listeners.  \\n  \\n The switch is used to check whether trace calls should be generated or ignored. Each trace method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> to determine whether to proceed with the trace. If the call returns `true`, the listeners are called.\"\n  syntax:\n    content: public System.Diagnostics.SourceSwitch Switch { get; set; }\n    return:\n      type: System.Diagnostics.SourceSwitch\n      description: A <xref href=\"System.Diagnostics.SourceSwitch\"></xref> object representing the source switch value.\n  overload: System.Diagnostics.TraceSource.Switch*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Switch is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  id: TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: TraceData(TraceEventType,Int32,Object)\n  nameWithType: TraceSource.TraceData(TraceEventType,Int32,Object)\n  fullName: System.Diagnostics.TraceSource.TraceData(TraceEventType,Int32,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace data to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and trace data.\n  remarks: \"The TraceData method, like the <xref:System.Diagnostics.TraceSource.TraceEvent%2A> method, is intended for automated tools, but it also allows the attaching of an additional object, such as an exception instance, to the trace.  \\n  \\n The TraceData method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A?displayProperty=fullName> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property. If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceData calls the corresponding <xref:System.Diagnostics.TraceListener.TraceData%2A> method on all listeners. Otherwise, TraceData returns without calling the listeners' methods.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535. If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> object uses 65,535.\"\n  example:\n  - \"The following code example shows the use of the TraceData method to filter and forward a trace message to the listeners. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource2#28](~/add/codesnippet/csharp/65c1aeb6-b0df-4e32-8afc-_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#28](~/add/codesnippet/visualbasic/65c1aeb6-b0df-4e32-8afc-_1.vb)]\"\n  syntax:\n    content: public void TraceData (System.Diagnostics.TraceEventType eventType, int id, object data);\n    parameters:\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the enumeration values that specifies the event type of the trace data.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object\n      description: The trace data.\n  overload: System.Diagnostics.TraceSource.TraceData*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An attempt was made to trace an event during finalization.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  id: TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: TraceData(TraceEventType,Int32,Object[])\n  nameWithType: TraceSource.TraceData(TraceEventType,Int32,Object[])\n  fullName: System.Diagnostics.TraceSource.TraceData(TraceEventType,Int32,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace data to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and trace data array.\n  remarks: \"The TraceData method, like the <xref:System.Diagnostics.TraceSource.TraceEvent%2A> method, is intended for automated tools, but it also allows the attaching of additional objects, such as an exception instance and a stack trace, to the trace.  \\n  \\n The TraceData method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property. If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceData calls the corresponding <xref:System.Diagnostics.TraceListener.TraceData%2A> method on all listeners. Otherwise, TraceData returns without calling the listeners' methods.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535. If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> object uses 65,535.\"\n  syntax:\n    content: public void TraceData (System.Diagnostics.TraceEventType eventType, int id, object[] data);\n    parameters:\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the enumeration values that specifies the event type of the trace data.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object[]\n      description: An object array containing the trace data.\n  overload: System.Diagnostics.TraceSource.TraceData*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An attempt was made to trace an event during finalization.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)\n  id: TraceEvent(System.Diagnostics.TraceEventType,System.Int32)\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventType,Int32)\n  nameWithType: TraceSource.TraceEvent(TraceEventType,Int32)\n  fullName: System.Diagnostics.TraceSource.TraceEvent(TraceEventType,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a trace event message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type and event identifier.\n  remarks: \"The TraceEvent method is intended to trace events that can be processed automatically by tools. For example, a monitoring tool can notify an administrator if a specific event is traced by a specific source.  \\n  \\n The TraceEvent method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property. If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceEvent calls the corresponding <xref:System.Diagnostics.TraceListener.TraceEvent%2A> method of each listener. Otherwise, TraceEvent returns without calling the listeners' methods.  \\n  \\n The trace content is listener specific. If the method is not overridden by the listener implementation, the default output is the name of the trace source, its numeric identity, and the event type.  Additional trace content is dependent upon the listener's <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property value.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535. If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> uses 65,535.\"\n  example:\n  - \"The following code example shows the use of the TraceEvent method to pass a trace event to the listeners. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource2#17](~/add/codesnippet/csharp/b6759a68-e7ea-4d5d-941c-_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#17](~/add/codesnippet/visualbasic/b6759a68-e7ea-4d5d-941c-_1.vb)]\"\n  syntax:\n    content: public void TraceEvent (System.Diagnostics.TraceEventType eventType, int id);\n    parameters:\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the enumeration values that specifies the event type of the trace data.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n  overload: System.Diagnostics.TraceSource.TraceEvent*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An attempt was made to trace an event during finalization.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)\n  id: TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventType,Int32,String)\n  nameWithType: TraceSource.TraceEvent(TraceEventType,Int32,String)\n  fullName: System.Diagnostics.TraceSource.TraceEvent(TraceEventType,Int32,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a trace event message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and message.\n  remarks: \"The TraceEvent method is intended to trace events that can be processed automatically by tools. For example, a monitoring tool can notify an administrator if a specific event is traced by a specific source.  \\n  \\n The TraceEvent method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property. If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceEvent calls the corresponding <xref:System.Diagnostics.TraceListener.TraceEvent%2A> method of each listener. Otherwise, TraceEvent returns without calling the listeners' methods.  \\n  \\n The trace content is listener specific. If the method is not overridden by the listener implementation, the default output is the name of the trace source, its numeric identity, the event type, and the message.  Additional trace content is dependent upon the listener's <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property value.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535. If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> object uses 65,535.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%29> method to pass a trace event to the listeners. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource2#18](~/add/codesnippet/csharp/8dfa18b2-1bd6-4ef8-88ea-_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#18](~/add/codesnippet/visualbasic/8dfa18b2-1bd6-4ef8-88ea-_1.vb)]\"\n  syntax:\n    content: public void TraceEvent (System.Diagnostics.TraceEventType eventType, int id, string message);\n    parameters:\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the enumeration values that specifies the event type of the trace data.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: message\n      type: System.String\n      description: The trace message to write.\n  overload: System.Diagnostics.TraceSource.TraceEvent*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An attempt was made to trace an event during finalization.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  id: TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventType,Int32,String,Object[])\n  nameWithType: TraceSource.TraceEvent(TraceEventType,Int32,String,Object[])\n  fullName: System.Diagnostics.TraceSource.TraceEvent(TraceEventType,Int32,String,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a trace event to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified event type, event identifier, and argument array and format.\n  remarks: \"For more information about the `format` parameter, see [Composite Formatting](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The TraceEvent method is intended to trace events that can be processed automatically by tools. For example, a monitoring tool can notify an administrator if a specific event is traced by a specific source.  \\n  \\n The TraceEvent method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method of the <xref:System.Diagnostics.SourceSwitch> object returned by the <xref:System.Diagnostics.TraceSource.Switch%2A> property. If <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> returns `true`, TraceEvent calls the corresponding <xref:System.Diagnostics.TraceListener.TraceEvent%2A> method of each listener. Otherwise, TraceEvent returns without calling the listeners' methods.  \\n  \\n The trace content is listener specific. The default [TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object\\\\[\\\\])](assetId:///M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) method writes the source name, event type, and numeric identity in the trace header, then calls the [String.Format(IFormatProvider, String, Object\\\\[\\\\])](assetId:///M:System.String.Format(System.IFormatProvider,System.String,System.Object[])?qualifyHint=True&autoUpgrade=False) method, passing the `format` string and `args` array and using the <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName> property to format the string as the message output.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Diagnostics.EventLogTraceListener> object is limited to a maximum `id` value of 65,535. If the `id` value specified is greater than 65,535, the <xref:System.Diagnostics.EventLogTraceListener> object uses 65,535.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%29> method to pass a trace event to the listeners. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \\n  \\n [!code-cs[System.Diagnostics.TraceSource2#24](~/add/codesnippet/csharp/9afa3050-f770-4c89-8f1f-_1.cs)]\\n [!code-vb[System.Diagnostics.TraceSource2#24](~/add/codesnippet/visualbasic/9afa3050-f770-4c89-8f1f-_1.vb)]\"\n  syntax:\n    content: public void TraceEvent (System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);\n    parameters:\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the enumeration values that specifies the event type of the trace data.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the `args` array.\n    - id: args\n      type: System.Object[]\n      description: An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format.\n  overload: System.Diagnostics.TraceSource.TraceEvent*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An attempt was made to trace an event during finalization.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.TraceInformation(System.String)\n  id: TraceInformation(System.String)\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: TraceInformation(String)\n  nameWithType: TraceSource.TraceInformation(String)\n  fullName: System.Diagnostics.TraceSource.TraceInformation(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes an informational message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified message.\n  remarks: \"The TraceInformation method provides an informational message intended to be read by users and not by tools.  \\n  \\n TraceInformation calls the <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> method, setting `eventType` to <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> and passing the informative message as the message string. The <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> method in turn calls the <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> method of each trace listener.\"\n  syntax:\n    content: public void TraceInformation (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The informative message to write.\n  overload: System.Diagnostics.TraceSource.TraceInformation*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An attempt was made to trace an event during finalization.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])\n  id: TraceInformation(System.String,System.Object[])\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: TraceInformation(String,Object[])\n  nameWithType: TraceSource.TraceInformation(String,Object[])\n  fullName: System.Diagnostics.TraceSource.TraceInformation(String,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes an informational message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified object array and formatting information.\n  remarks: \"For more information about the `format` parameter, see [Composite Formatting](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The TraceInformation method provides an informational message intended to be read by users and not by tools.  \\n  \\n TraceInformation calls the [TraceEvent(TraceEventType, Int32, String, Object\\\\[\\\\])](assetId:///M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) method, setting `eventType` to <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> and passing the message content as an object array with formatting information. The [TraceEvent(TraceEventType, Int32, String, Object\\\\[\\\\])](assetId:///M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) method in turn calls the [TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object\\\\[\\\\])](assetId:///M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) method of each trace listener.\"\n  syntax:\n    content: public void TraceInformation (string format, object[] args);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the `args` array.\n    - id: args\n      type: System.Object[]\n      description: An array containing zero or more objects to format.\n  overload: System.Diagnostics.TraceSource.TraceInformation*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An attempt was made to trace an event during finalization.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceSource.TraceTransfer(System.Int32,System.String,System.Guid)\n  id: TraceTransfer(System.Int32,System.String,System.Guid)\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  name: TraceTransfer(Int32,String,Guid)\n  nameWithType: TraceSource.TraceTransfer(Int32,String,Guid)\n  fullName: System.Diagnostics.TraceSource.TraceTransfer(Int32,String,Guid)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a trace transfer message to the trace listeners in the <xref:System.Diagnostics.TraceSource.Listeners*> collection using the specified numeric identifier, message, and related activity identifier.\n  remarks: \"The TraceTransfer method calls the <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> method of each trace listener in the <xref:System.Diagnostics.TraceSource.Listeners%2A> property to write the trace information. The default <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> method in the base <xref:System.Diagnostics.TraceListener> class calls the <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29?displayProperty=fullName> method to process the call, setting `eventType` to <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> and appending a string representation of the `relatedActivityId` GUID to `message`.  \\n  \\n TraceTransfer is intended to be used with the logical operations of a <xref:System.Diagnostics.CorrelationManager>. The `relatedActivityId` parameter relates to the <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> property of a <xref:System.Diagnostics.CorrelationManager> object. If a logical operation begins in one activity and transfers to another, the second activity logs the transfer by calling the TraceTransfer method. The TraceTransfer call relates the new activity identity to the previous identity. The most likely consumer of this functionality is a trace viewer that can report logical operations that span multiple activities.\"\n  syntax:\n    content: public void TraceTransfer (int id, string message, Guid relatedActivityId);\n    parameters:\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: message\n      type: System.String\n      description: The trace message to write.\n    - id: relatedActivityId\n      type: System.Guid\n      description: A structure that identifies the related activity.\n  overload: System.Diagnostics.TraceSource.TraceTransfer*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.FormatException\n  isExternal: true\n  name: System.FormatException\n- uid: System.Diagnostics.TraceSource.#ctor(System.String)\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceSource(String)\n  nameWithType: TraceSource.TraceSource(String)\n  fullName: System.Diagnostics.TraceSource.TraceSource(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceSource(String,SourceLevels)\n  nameWithType: TraceSource.TraceSource(String,SourceLevels)\n  fullName: System.Diagnostics.TraceSource.TraceSource(String,SourceLevels)\n- uid: System.Diagnostics.SourceLevels\n  parent: System.Diagnostics\n  isExternal: false\n  name: SourceLevels\n  nameWithType: SourceLevels\n  fullName: System.Diagnostics.SourceLevels\n- uid: System.Diagnostics.TraceSource.Attributes\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Attributes\n  nameWithType: TraceSource.Attributes\n  fullName: System.Diagnostics.TraceSource.Attributes\n- uid: System.Collections.Specialized.StringDictionary\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: StringDictionary\n  nameWithType: StringDictionary\n  fullName: System.Collections.Specialized.StringDictionary\n- uid: System.Diagnostics.TraceSource.Close\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Close()\n  nameWithType: TraceSource.Close()\n  fullName: System.Diagnostics.TraceSource.Close()\n- uid: System.Diagnostics.TraceSource.Flush\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Flush()\n  nameWithType: TraceSource.Flush()\n  fullName: System.Diagnostics.TraceSource.Flush()\n- uid: System.Diagnostics.TraceSource.GetSupportedAttributes\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: GetSupportedAttributes()\n  nameWithType: TraceSource.GetSupportedAttributes()\n  fullName: System.Diagnostics.TraceSource.GetSupportedAttributes()\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.TraceSource.Listeners\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Listeners\n  nameWithType: TraceSource.Listeners\n  fullName: System.Diagnostics.TraceSource.Listeners\n- uid: System.Diagnostics.TraceListenerCollection\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceListenerCollection\n  nameWithType: TraceListenerCollection\n  fullName: System.Diagnostics.TraceListenerCollection\n- uid: System.Diagnostics.TraceSource.Name\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Name\n  nameWithType: TraceSource.Name\n  fullName: System.Diagnostics.TraceSource.Name\n- uid: System.Diagnostics.TraceSource.Switch\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Switch\n  nameWithType: TraceSource.Switch\n  fullName: System.Diagnostics.TraceSource.Switch\n- uid: System.Diagnostics.SourceSwitch\n  parent: System.Diagnostics\n  isExternal: false\n  name: SourceSwitch\n  nameWithType: SourceSwitch\n  fullName: System.Diagnostics.SourceSwitch\n- uid: System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceData(TraceEventType,Int32,Object)\n  nameWithType: TraceSource.TraceData(TraceEventType,Int32,Object)\n  fullName: System.Diagnostics.TraceSource.TraceData(TraceEventType,Int32,Object)\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceData(TraceEventType,Int32,Object[])\n  nameWithType: TraceSource.TraceData(TraceEventType,Int32,Object[])\n  fullName: System.Diagnostics.TraceSource.TraceData(TraceEventType,Int32,Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceEvent(TraceEventType,Int32)\n  nameWithType: TraceSource.TraceEvent(TraceEventType,Int32)\n  fullName: System.Diagnostics.TraceSource.TraceEvent(TraceEventType,Int32)\n- uid: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceEvent(TraceEventType,Int32,String)\n  nameWithType: TraceSource.TraceEvent(TraceEventType,Int32,String)\n  fullName: System.Diagnostics.TraceSource.TraceEvent(TraceEventType,Int32,String)\n- uid: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceEvent(TraceEventType,Int32,String,Object[])\n  nameWithType: TraceSource.TraceEvent(TraceEventType,Int32,String,Object[])\n  fullName: System.Diagnostics.TraceSource.TraceEvent(TraceEventType,Int32,String,Object[])\n- uid: System.Diagnostics.TraceSource.TraceInformation(System.String)\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceInformation(String)\n  nameWithType: TraceSource.TraceInformation(String)\n  fullName: System.Diagnostics.TraceSource.TraceInformation(String)\n- uid: System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceInformation(String,Object[])\n  nameWithType: TraceSource.TraceInformation(String,Object[])\n  fullName: System.Diagnostics.TraceSource.TraceInformation(String,Object[])\n- uid: System.Diagnostics.TraceSource.TraceTransfer(System.Int32,System.String,System.Guid)\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceTransfer(Int32,String,Guid)\n  nameWithType: TraceSource.TraceTransfer(Int32,String,Guid)\n  fullName: System.Diagnostics.TraceSource.TraceTransfer(Int32,String,Guid)\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Diagnostics.TraceSource.#ctor*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceSource\n  nameWithType: TraceSource.TraceSource\n- uid: System.Diagnostics.TraceSource.Attributes*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Attributes\n  nameWithType: TraceSource.Attributes\n- uid: System.Diagnostics.TraceSource.Close*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Close\n  nameWithType: TraceSource.Close\n- uid: System.Diagnostics.TraceSource.Flush*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Flush\n  nameWithType: TraceSource.Flush\n- uid: System.Diagnostics.TraceSource.GetSupportedAttributes*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: GetSupportedAttributes\n  nameWithType: TraceSource.GetSupportedAttributes\n- uid: System.Diagnostics.TraceSource.Listeners*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Listeners\n  nameWithType: TraceSource.Listeners\n- uid: System.Diagnostics.TraceSource.Name*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Name\n  nameWithType: TraceSource.Name\n- uid: System.Diagnostics.TraceSource.Switch*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: Switch\n  nameWithType: TraceSource.Switch\n- uid: System.Diagnostics.TraceSource.TraceData*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceData\n  nameWithType: TraceSource.TraceData\n- uid: System.Diagnostics.TraceSource.TraceEvent*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceEvent\n  nameWithType: TraceSource.TraceEvent\n- uid: System.Diagnostics.TraceSource.TraceInformation*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceInformation\n  nameWithType: TraceSource.TraceInformation\n- uid: System.Diagnostics.TraceSource.TraceTransfer*\n  parent: System.Diagnostics.TraceSource\n  isExternal: false\n  name: TraceTransfer\n  nameWithType: TraceSource.TraceTransfer\n"}