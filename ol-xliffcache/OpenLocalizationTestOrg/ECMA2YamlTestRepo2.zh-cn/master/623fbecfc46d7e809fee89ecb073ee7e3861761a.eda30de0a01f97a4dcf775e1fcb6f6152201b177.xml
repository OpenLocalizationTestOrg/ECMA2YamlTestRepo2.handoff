{"nodes":[{"pos":[925,1003],"content":"Abstract base class to be implemented by all text to speech synthesis engines.","needQuote":true,"needEscape":true,"nodes":[{"content":"Abstract base class to be implemented by all text to speech synthesis engines.","pos":[0,78]}]},{"pos":[1016,3244],"content":"To construct a custom text to speech engine, an application must always implement a class derived from the abstract base class TtsEngineSsml.       A properly registered implementation of TtsEngineSsml can then be used as a `Synthesizer``Voice` by <xref:System.Speech.Synthesis> name space based applications.       Objects inheriting from TtsEngineSsml must override the following members: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.       The most important member of the TtsEngineSsml class to be implemented is the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> method.       The <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> method is called by the infrastructures text parser receiving:      1.  A reference to the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface, which provides access to system services such as even queuing and writing audio output.      2.  An array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance produced from Speech Synthesis Markup Language (SSML) input. In addition to text to be rendered as speech, the parsing of the SSML stores information about the requested attributes of the speech in a <xref:System.Speech.Synthesis.TtsEngine.FragmentState> instance associated with each incoming <xref:System.Speech.Synthesis.TtsEngine.TextFragment> object.       A speech synthesizer application can optionally make requests for a specified output format by implementing <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> to be called by the platform when it tries to provide the correct audio output.       An implementer can also provide support for managing external definitions of pronunciations, or lexicons, by their implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"To construct a custom text to speech engine, an application must always implement a class derived from the abstract base class TtsEngineSsml.","pos":[0,141]},{"content":"A properly registered implementation of TtsEngineSsml can then be used as a <ph id=\"ph1\">`Synthesizer``Voice`</ph> by &lt;xref:System.Speech.Synthesis&gt; name space based applications.","pos":[148,309],"source":"       A properly registered implementation of TtsEngineSsml can then be used as a `Synthesizer``Voice` by <xref:System.Speech.Synthesis> name space based applications."},{"content":"Objects inheriting from TtsEngineSsml must override the following members: &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A&gt;, &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A&gt;, &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A&gt;, &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A&gt; and &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A&gt;.","pos":[316,743],"source":"       Objects inheriting from TtsEngineSsml must override the following members: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>."},{"content":"The most important member of the TtsEngineSsml class to be implemented is the &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A&gt; method.","pos":[750,899],"source":"       The most important member of the TtsEngineSsml class to be implemented is the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> method."},{"content":"The &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A&gt; method is called by the infrastructures text parser receiving:      1.","pos":[906,1044],"source":"       The <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> method is called by the infrastructures text parser receiving:      1."},{"content":"A reference to the &lt;xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite&gt; interface, which provides access to system services such as even queuing and writing audio output.","pos":[1046,1219],"source":"  A reference to the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface, which provides access to system services such as even queuing and writing audio output."},{"content":"2.","pos":[1225,1227]},{"content":"An array of &lt;xref:System.Speech.Synthesis.TtsEngine.TextFragment&gt; instance produced from Speech Synthesis Markup Language (SSML) input.","pos":[1229,1364],"source":"  An array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance produced from Speech Synthesis Markup Language (SSML) input."},{"content":"In addition to text to be rendered as speech, the parsing of the SSML stores information about the requested attributes of the speech in a &lt;xref:System.Speech.Synthesis.TtsEngine.FragmentState&gt; instance associated with each incoming &lt;xref:System.Speech.Synthesis.TtsEngine.TextFragment&gt; object.","pos":[1365,1659],"source":" In addition to text to be rendered as speech, the parsing of the SSML stores information about the requested attributes of the speech in a <xref:System.Speech.Synthesis.TtsEngine.FragmentState> instance associated with each incoming <xref:System.Speech.Synthesis.TtsEngine.TextFragment> object."},{"content":"A speech synthesizer application can optionally make requests for a specified output format by implementing &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A&gt; to be called by the platform when it tries to provide the correct audio output.","pos":[1666,1927],"source":"       A speech synthesizer application can optionally make requests for a specified output format by implementing <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> to be called by the platform when it tries to provide the correct audio output."},{"content":"An implementer can also provide support for managing external definitions of pronunciations, or lexicons, by their implementation of &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A&gt; and &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A&gt;.","pos":[1934,2212],"source":"       An implementer can also provide support for managing external definitions of pronunciations, or lexicons, by their implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>."}]},{"pos":[3858,4005],"content":"Constructs a new instance of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> based on an appropriate Voice Token registry key.","needQuote":true,"needEscape":true,"source":"Constructs a new instance of <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"></xref> based on an appropriate Voice Token registry key."},{"pos":[4539,4701],"content":"Full name of the registry key for the Voice Token associated with the <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"></xref> implementation. engine.","needQuote":true,"needEscape":true,"nodes":[{"content":"Full name of the registry key for the Voice Token associated with the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> implementation.","pos":[0,154],"source":"Full name of the registry key for the Voice Token associated with the <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"></xref> implementation."},{"content":"engine.","pos":[155,162]}]},{"pos":[5437,5701],"content":"Adds a lexicon to the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Synthesizer\" name=\"Synthesizer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Voice\" name=\"Voice\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> implemented by the current <bpt id=\"p3\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Adds a lexicon to the <xref uid=\"langword_csharp_Synthesizer\" name=\"Synthesizer\" href=\"\"></xref><xref uid=\"langword_csharp_Voice\" name=\"Voice\" href=\"\"></xref> implemented by the current <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"></xref> instance."},{"pos":[5714,6277],"content":"A pronunciation lexicon is a collection of words or phrases together with their pronunciations specified using an appropriate pronunciation alphabet.       This method is typically called by the platform infrastructure in response to a <xref:System.Speech.Synthesis> based applications calling AddLexicon and using the `Synthesizer``Voice` implemented by the current <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance.       The value of `mediaType` is typically a MIME specification, as the SSML specification uses MIME for media specifications.","needQuote":false,"needEscape":true,"nodes":[{"content":"A pronunciation lexicon is a collection of words or phrases together with their pronunciations specified using an appropriate pronunciation alphabet.","pos":[0,149]},{"content":"This method is typically called by the platform infrastructure in response to a &lt;xref:System.Speech.Synthesis&gt; based applications calling AddLexicon and using the <ph id=\"ph1\">`Synthesizer``Voice`</ph> implemented by the current &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml&gt; instance.","pos":[156,431],"source":"       This method is typically called by the platform infrastructure in response to a <xref:System.Speech.Synthesis> based applications calling AddLexicon and using the `Synthesizer``Voice` implemented by the current <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance."},{"content":"The value of <ph id=\"ph1\">`mediaType`</ph> is typically a MIME specification, as the SSML specification uses MIME for media specifications.","pos":[438,559],"source":"       The value of `mediaType` is typically a MIME specification, as the SSML specification uses MIME for media specifications."}]},{"pos":[7304,7448],"content":"A valid instance of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_System.Uri\" name=\"System.Uri\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> indicating the location of the lexicon information.","needQuote":true,"needEscape":true,"source":"A valid instance of <xref uid=\"langword_csharp_System.Uri\" name=\"System.Uri\" href=\"\"></xref> indicating the location of the lexicon information."},{"pos":[7514,7598],"content":"A string containing the media type of the lexicon. Media types are case insensitive.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the media type of the lexicon. Media types are case insensitive.","pos":[0,84],"nodes":[{"content":"A string containing the media type of the lexicon.","pos":[0,50]},{"content":"Media types are case insensitive.","pos":[51,84]}]}]},{"pos":[7694,7842],"content":"A reference to an <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.ITtsEngineSite\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface used to interact with the platform infrastructure.","needQuote":true,"needEscape":true,"source":"A reference to an <xref href=\"System.Speech.Synthesis.TtsEngine.ITtsEngineSite\"></xref> interface used to interact with the platform infrastructure."},{"pos":[8589,8761],"content":"Returns the best matching audio output supported by a given synthesize engine response to a request to the synthesizer engine for the support of a particular output format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the best matching audio output supported by a given synthesize engine response to a request to the synthesizer engine for the support of a particular output format.","pos":[0,172]}]},{"pos":[8774,9314],"content":"The structure used as `targetWaveFormat` and returned by the method should compatible with the `WAVEFORMATEX` available under SAPI, and the returned value should be allocated using `CoTaskMemAlloc`.       The `struct` must provide functionality equivalent to:      ```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"The structure used as <ph id=\"ph1\">`targetWaveFormat`</ph> and returned by the method should compatible with the <ph id=\"ph2\">`WAVEFORMATEX`</ph> available under SAPI, and the returned value should be allocated using <ph id=\"ph3\">`CoTaskMemAlloc`</ph>.","pos":[0,198],"source":"The structure used as `targetWaveFormat` and returned by the method should compatible with the `WAVEFORMATEX` available under SAPI, and the returned value should be allocated using `CoTaskMemAlloc`."},{"content":"The <ph id=\"ph1\">`struct`</ph> must provide functionality equivalent to:      <ph id=\"ph2\">```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```</ph>","pos":[205,525],"source":"       The `struct` must provide functionality equivalent to:      ```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```"}]},{"pos":[10927,11085],"content":"Valid member of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeakOutputFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration indicating the type of requested audio output format.","needQuote":true,"needEscape":true,"source":"Valid member of the <xref href=\"System.Speech.Synthesis.TtsEngine.SpeakOutputFormat\"></xref> enumeration indicating the type of requested audio output format."},{"pos":[11158,11336],"content":"A pointer to a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_struct\" name=\"struct\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing detail setting for the audio format type requested by the <ph id=\"ph1\">`speakOutputFormat`</ph> argument.","needQuote":true,"needEscape":true,"source":"A pointer to a <xref uid=\"langword_csharp_struct\" name=\"struct\" href=\"\"></xref> containing detail setting for the audio format type requested by the `speakOutputFormat` argument."},{"pos":[11394,11620],"content":"Returns a valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance referring to a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_struct\" name=\"struct\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> containing detailed information about the output format.","needQuote":true,"needEscape":true,"source":"Returns a valid <xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"></xref> instance referring to a <xref uid=\"langword_csharp_struct\" name=\"struct\" href=\"\"></xref> containing detailed information about the output format."},{"pos":[12332,12616],"content":"Removes a lexicon currently loaded by the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Synthesizer\" name=\"Synthesizer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Voice\" name=\"Voice\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> implemented by the current <bpt id=\"p3\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Removes a lexicon currently loaded by the <xref uid=\"langword_csharp_Synthesizer\" name=\"Synthesizer\" href=\"\"></xref><xref uid=\"langword_csharp_Voice\" name=\"Voice\" href=\"\"></xref> implemented by the current <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"></xref> instance."},{"pos":[12629,13086],"content":"A pronunciation lexicon is a collection of words or phrases together with their pronunciations specified using an appropriate pronunciation alphabet.       This method is typically called in response to a <xref:System.Speech.Synthesis> based applications calling <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> and using the `Synthesizer``Voice` implemented by the current <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance.","needQuote":false,"needEscape":true,"nodes":[{"content":"A pronunciation lexicon is a collection of words or phrases together with their pronunciations specified using an appropriate pronunciation alphabet.","pos":[0,149]},{"content":"This method is typically called in response to a &lt;xref:System.Speech.Synthesis&gt; based applications calling &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A&gt; and using the <ph id=\"ph1\">`Synthesizer``Voice`</ph> implemented by the current &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml&gt; instance.","pos":[156,455],"source":"       This method is typically called in response to a <xref:System.Speech.Synthesis> based applications calling <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> and using the `Synthesizer``Voice` implemented by the current <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance."}]},{"pos":[14017,14161],"content":"A valid instance of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_System.Uri\" name=\"System.Uri\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> indicating the location of the lexicon information.","needQuote":true,"needEscape":true,"source":"A valid instance of <xref uid=\"langword_csharp_System.Uri\" name=\"System.Uri\" href=\"\"></xref> indicating the location of the lexicon information."},{"pos":[14257,14444],"content":"A reference to an <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.ITtsEngineSite\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface passed in by the platform infrastructure to allow access to the infrastructure resources.","needQuote":true,"needEscape":true,"source":"A reference to an <xref href=\"System.Speech.Synthesis.TtsEngine.ITtsEngineSite\"></xref> interface passed in by the platform infrastructure to allow access to the infrastructure resources."},{"pos":[15272,15395],"content":"Renders specified <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.TextFragment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array in the specified output format.","needQuote":true,"needEscape":true,"source":"Renders specified <xref href=\"System.Speech.Synthesis.TtsEngine.TextFragment\"></xref> array in the specified output format."},{"pos":[15408,15875],"content":"The structure used as `waveHeader` and returned by the method should compatible with the `WAVEFORMATEX` available under SAPI.       The `struct` must provide functionality equivalent to:      ```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"The structure used as <ph id=\"ph1\">`waveHeader`</ph> and returned by the method should compatible with the <ph id=\"ph2\">`WAVEFORMATEX`</ph> available under SAPI.","pos":[0,125],"source":"The structure used as `waveHeader` and returned by the method should compatible with the `WAVEFORMATEX` available under SAPI."},{"content":"The <ph id=\"ph1\">`struct`</ph> must provide functionality equivalent to:      <ph id=\"ph2\">```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```</ph>","pos":[132,452],"source":"       The `struct` must provide functionality equivalent to:      ```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```"}]},{"pos":[19755,19892],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.TextFragment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instances containing the text to be rendered into speech.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Speech.Synthesis.TtsEngine.TextFragment\"></xref> instances containing the text to be rendered into speech."},{"pos":[19959,20082],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> pointing to a structure containing audio output format.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"></xref> pointing to a structure containing audio output format."},{"pos":[20178,20365],"content":"A reference to an <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.ITtsEngineSite\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface passed in by the platform infrastructure to allow access to the infrastructure resources.","needQuote":true,"needEscape":true,"source":"A reference to an <xref href=\"System.Speech.Synthesis.TtsEngine.ITtsEngineSite\"></xref> interface passed in by the platform infrastructure to allow access to the infrastructure resources."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  id: TtsEngineSsml\n  children:\n  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)\n  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)\n  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  langs:\n  - csharp\n  name: TtsEngineSsml\n  nameWithType: TtsEngineSsml\n  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  type: Class\n  summary: Abstract base class to be implemented by all text to speech synthesis engines.\n  remarks: \"To construct a custom text to speech engine, an application must always implement a class derived from the abstract base class TtsEngineSsml.  \\n  \\n A properly registered implementation of TtsEngineSsml can then be used as a `Synthesizer``Voice` by <xref:System.Speech.Synthesis> name space based applications.  \\n  \\n Objects inheriting from TtsEngineSsml must override the following members: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.  \\n  \\n The most important member of the TtsEngineSsml class to be implemented is the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> method.  \\n  \\n The <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> method is called by the infrastructures text parser receiving:  \\n  \\n1.  A reference to the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface, which provides access to system services such as even queuing and writing audio output.  \\n  \\n2.  An array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance produced from Speech Synthesis Markup Language (SSML) input. In addition to text to be rendered as speech, the parsing of the SSML stores information about the requested attributes of the speech in a <xref:System.Speech.Synthesis.TtsEngine.FragmentState> instance associated with each incoming <xref:System.Speech.Synthesis.TtsEngine.TextFragment> object.  \\n  \\n A speech synthesizer application can optionally make requests for a specified output format by implementing <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> to be called by the platform when it tries to provide the correct audio output.  \\n  \\n An implementer can also provide support for managing external definitions of pronunciations, or lexicons, by their implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.\"\n  syntax:\n    content: public abstract class TtsEngineSsml\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  langs:\n  - csharp\n  name: TtsEngineSsml(String)\n  nameWithType: TtsEngineSsml.TtsEngineSsml(String)\n  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.TtsEngineSsml(String)\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Constructs a new instance of <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"></xref> based on an appropriate Voice Token registry key.\n  remarks: \"Calls to this constructor are typically generated by <xref:System.Speech.Synthesis> based applications selecting a `Synthesizer``Voice` to be used by an instance of <xref:System.Speech.Synthesis.SpeechSynthesizer>.  \\n  \\n A <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> must be register under HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\Voices\\\\Tokens.\"\n  syntax:\n    content: protected TtsEngineSsml (string registryKey);\n    parameters:\n    - id: registryKey\n      type: System.String\n      description: Full name of the registry key for the Voice Token associated with the <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"></xref> implementation. engine.\n  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  id: AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  langs:\n  - csharp\n  name: AddLexicon(Uri,String,ITtsEngineSite)\n  nameWithType: TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)\n  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Adds a lexicon to the <xref uid=\"langword_csharp_Synthesizer\" name=\"Synthesizer\" href=\"\"></xref><xref uid=\"langword_csharp_Voice\" name=\"Voice\" href=\"\"></xref> implemented by the current <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"></xref> instance.\n  remarks: \"A pronunciation lexicon is a collection of words or phrases together with their pronunciations specified using an appropriate pronunciation alphabet.  \\n  \\n This method is typically called by the platform infrastructure in response to a <xref:System.Speech.Synthesis> based applications calling AddLexicon and using the `Synthesizer``Voice` implemented by the current <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance.  \\n  \\n The value of `mediaType` is typically a MIME specification, as the SSML specification uses MIME for media specifications.\"\n  example:\n  - \"The implementation of AddLexicon uses the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface passed in to load a lexicon from a resource. It then stores a `System.IO.Stream` to the lexicon in a `System.Collections.Generic.Dictionary` instance, indexed by the lexicon URI.  \\n  \\n```  \\npublic static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  \\n  \\n public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  \\n    Stream stream = site.LoadResource(uri, mediaType);  \\n    _aLexicons.Add(uri, stream);  \\n}  \\n  \\n public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  \\n     Stream stream;  \\n     if (_aLexicons.TryGetValue(uri, out stream)) {  \\n         stream.Close();  \\n         _aLexicons.Remove(uri);  \\n     }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);\n    parameters:\n    - id: uri\n      type: System.Uri\n      description: A valid instance of <xref uid=\"langword_csharp_System.Uri\" name=\"System.Uri\" href=\"\"></xref> indicating the location of the lexicon information.\n    - id: mediaType\n      type: System.String\n      description: A string containing the media type of the lexicon. Media types are case insensitive.\n    - id: site\n      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite\n      description: A reference to an <xref href=\"System.Speech.Synthesis.TtsEngine.ITtsEngineSite\"></xref> interface used to interact with the platform infrastructure.\n  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)\n  id: GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  langs:\n  - csharp\n  name: GetOutputFormat(SpeakOutputFormat,IntPtr)\n  nameWithType: TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)\n  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Returns the best matching audio output supported by a given synthesize engine response to a request to the synthesizer engine for the support of a particular output format.\n  remarks: \"The structure used as `targetWaveFormat` and returned by the method should compatible with the `WAVEFORMATEX` available under SAPI, and the returned value should be allocated using `CoTaskMemAlloc`.  \\n  \\n The `struct` must provide functionality equivalent to:  \\n  \\n```  \\ninternal struct WaveFormat  \\n{  \\n    public Int16 FormatTag;  \\n    public Int16 Channels;  \\n    public int SamplesPerSec;  \\n    public int AvgBytesPerSec;  \\n    public Int16 BlockAlign;  \\n    public Int16 BitsPerSample;  \\n    public Int16 Size;  \\n}  \\n```\"\n  example:\n  - \"The sample implementation below validates selected inputs, using them if they are within tolerances, otherwise using default values.  \\n  \\n```  \\npublic IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  \\n    WaveFormat waveFormat = new WaveFormat();  \\n    WaveFormat rq=new WaveFormat();  \\n    Marshal.PtrToStructure(targetWaveFormat,rq);  \\n  \\n    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  \\n    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  \\n    waveFormat.BlockAlign = 2;  \\n    waveFormat.Channels = 1;  \\n    waveFormat.FormatTag = 1;  \\n    waveFormat.SamplesPerSec = 16000;  \\n    waveFormat.Size = 0;  \\n  \\n    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  \\n    Marshal.StructureToPtr(waveFormat, wfx, false);  \\n  \\n    //Console.WriteLine (\\\"GetOutputFormat called\\\");  \\n    return wfx;  \\n}  \\ninternal struct WaveFormat {  \\n    public Int16 FormatTag;  \\n    public Int16 Channels;  \\n    public int SamplesPerSec;  \\n    public int AvgBytesPerSec;  \\n    public Int16 BlockAlign;  \\n    public Int16 BitsPerSample;  \\n    public Int16 Size;  \\n}  \\n```\"\n  syntax:\n    content: public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);\n    parameters:\n    - id: speakOutputFormat\n      type: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat\n      description: Valid member of the <xref href=\"System.Speech.Synthesis.TtsEngine.SpeakOutputFormat\"></xref> enumeration indicating the type of requested audio output format.\n    - id: targetWaveFormat\n      type: System.IntPtr\n      description: A pointer to a <xref uid=\"langword_csharp_struct\" name=\"struct\" href=\"\"></xref> containing detail setting for the audio format type requested by the `speakOutputFormat` argument.\n    return:\n      type: System.IntPtr\n      description: Returns a valid <xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"></xref> instance referring to a <xref uid=\"langword_csharp_struct\" name=\"struct\" href=\"\"></xref> containing detailed information about the output format.\n  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  id: RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  langs:\n  - csharp\n  name: RemoveLexicon(Uri,ITtsEngineSite)\n  nameWithType: TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)\n  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Removes a lexicon currently loaded by the <xref uid=\"langword_csharp_Synthesizer\" name=\"Synthesizer\" href=\"\"></xref><xref uid=\"langword_csharp_Voice\" name=\"Voice\" href=\"\"></xref> implemented by the current <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEngineSsml\"></xref> instance.\n  remarks: \"A pronunciation lexicon is a collection of words or phrases together with their pronunciations specified using an appropriate pronunciation alphabet.  \\n  \\n This method is typically called in response to a <xref:System.Speech.Synthesis> based applications calling <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> and using the `Synthesizer``Voice` implemented by the current <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance.\"\n  example:\n  - \"The implementation of RemoveLexicon uses the lexicon URI to query an instance `System.Collections.Generic.Dictionary` for the `System.IO.Stream`, closes the stream and removes the uri referring to the lexicon.  \\n  \\n```  \\npublic static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  \\n  \\n public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  \\n    Stream stream = site.LoadResource(uri, mediaType);  \\n    _aLexicons.Add(uri, stream);  \\n}  \\n  \\n public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  \\n     Stream stream;  \\n     if (_aLexicons.TryGetValue(uri, out stream)) {  \\n         stream.Close();  \\n         _aLexicons.Remove(uri);  \\n     }  \\n}  \\n```\"\n  syntax:\n    content: public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);\n    parameters:\n    - id: uri\n      type: System.Uri\n      description: A valid instance of <xref uid=\"langword_csharp_System.Uri\" name=\"System.Uri\" href=\"\"></xref> indicating the location of the lexicon information.\n    - id: site\n      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite\n      description: A reference to an <xref href=\"System.Speech.Synthesis.TtsEngine.ITtsEngineSite\"></xref> interface passed in by the platform infrastructure to allow access to the infrastructure resources.\n  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  id: Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  langs:\n  - csharp\n  name: Speak(TextFragment[],IntPtr,ITtsEngineSite)\n  nameWithType: TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)\n  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Renders specified <xref href=\"System.Speech.Synthesis.TtsEngine.TextFragment\"></xref> array in the specified output format.\n  remarks: \"The structure used as `waveHeader` and returned by the method should compatible with the `WAVEFORMATEX` available under SAPI.  \\n  \\n The `struct` must provide functionality equivalent to:  \\n  \\n```  \\ninternal struct WaveFormat  \\n{  \\n    public Int16 FormatTag;  \\n    public Int16 Channels;  \\n    public int SamplesPerSec;  \\n    public int AvgBytesPerSec;  \\n    public Int16 BlockAlign;  \\n    public Int16 BitsPerSample;  \\n    public Int16 Size;  \\n}  \\n```\"\n  example:\n  - \"The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \\n  \\n The implementation of Speak  \\n  \\n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \\n  \\n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \\n  \\n    -   Translates Americanism to Britishisms in the text to be spoken.  \\n  \\n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \\n  \\n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \\n  \\n```  \\nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \\nprivate readonly char[] spaces = new char[] { ' ', '\\\\t', '\\\\r', '\\\\n' };  \\ninternal struct UsVsUk  \\n{  \\n  internal string UK;  \\n  internal string US;  \\n}  \\n  \\noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \\n{  \\n  TextFragment [] newFrags=new TextFragment[frags.Length];  \\n  \\n  for (int i=0;i<frags.Length;i++){  \\n    newFrags[i].State=frags[i].State;  \\n    //truncate  \\n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \\n                               frags[i].TextLength);  \\n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \\n    newFrags[i].TextOffset = 0;  \\n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \\n      //Us to UK conversion  \\n      foreach (UsVsUk term in TransList) {  \\n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \\n      }  \\n      //Generate progress meter events if supported  \\n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \\n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \\n  \\n      foreach (string s in subs) {  \\n        int offset = newFrags[i].TextOffset;  \\n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \\n                (Int16)EventParameterType.Undefined,   \\n                 s.Length, new IntPtr(offset));  \\n        offset += s.Length;  \\n        if (s.Trim().Length > 0) {  \\n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \\n          events[0] = spEvent;  \\n          site.AddEvents(events, 1);  \\n        }  \\n      }  \\n      }  \\n    }  \\n  }  \\n    _baseSynthesize.Speak(newFrags, wfx, site);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);\n    parameters:\n    - id: fragment\n      type: System.Speech.Synthesis.TtsEngine.TextFragment[]\n      description: An array of <xref href=\"System.Speech.Synthesis.TtsEngine.TextFragment\"></xref> instances containing the text to be rendered into speech.\n    - id: waveHeader\n      type: System.IntPtr\n      description: An <xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"></xref> pointing to a structure containing audio output format.\n    - id: site\n      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite\n      description: A reference to an <xref href=\"System.Speech.Synthesis.TtsEngine.ITtsEngineSite\"></xref> interface passed in by the platform infrastructure to allow access to the infrastructure resources.\n  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  isExternal: false\n  name: TtsEngineSsml(String)\n  nameWithType: TtsEngineSsml.TtsEngineSsml(String)\n  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.TtsEngineSsml(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  isExternal: false\n  name: AddLexicon(Uri,String,ITtsEngineSite)\n  nameWithType: TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)\n  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)\n- uid: System.Uri\n  parent: System\n  isExternal: true\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.Speech.Synthesis.TtsEngine.ITtsEngineSite\n  parent: System.Speech.Synthesis.TtsEngine\n  isExternal: false\n  name: ITtsEngineSite\n  nameWithType: ITtsEngineSite\n  fullName: System.Speech.Synthesis.TtsEngine.ITtsEngineSite\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  isExternal: false\n  name: GetOutputFormat(SpeakOutputFormat,IntPtr)\n  nameWithType: TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)\n  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat\n  parent: System.Speech.Synthesis.TtsEngine\n  isExternal: false\n  name: SpeakOutputFormat\n  nameWithType: SpeakOutputFormat\n  fullName: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  isExternal: false\n  name: RemoveLexicon(Uri,ITtsEngineSite)\n  nameWithType: TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)\n  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  isExternal: false\n  name: Speak(TextFragment[],IntPtr,ITtsEngineSite)\n  nameWithType: TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)\n  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment[]\n  parent: System.Speech.Synthesis.TtsEngine\n  isExternal: false\n  name: TextFragment\n  nameWithType: TextFragment\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment[]\n  spec.csharp:\n  - uid: System.Speech.Synthesis.TtsEngine.TextFragment\n    name: TextFragment\n    nameWithType: TextFragment\n    fullName: TextFragment[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor*\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  isExternal: false\n  name: TtsEngineSsml\n  nameWithType: TtsEngineSsml.TtsEngineSsml\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon*\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  isExternal: false\n  name: AddLexicon\n  nameWithType: TtsEngineSsml.AddLexicon\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat*\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  isExternal: false\n  name: GetOutputFormat\n  nameWithType: TtsEngineSsml.GetOutputFormat\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon*\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  isExternal: false\n  name: RemoveLexicon\n  nameWithType: TtsEngineSsml.RemoveLexicon\n- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak*\n  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml\n  isExternal: false\n  name: Speak\n  nameWithType: TtsEngineSsml.Speak\n"}