{"nodes":[{"pos":[1447,1686],"content":"The SearchResultCollection class contains the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instances that the Active Directory hierarchy returned during a <bpt id=\"p2\">&lt;xref href=\"System.DirectoryServices.DirectorySearcher\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> query.","needQuote":true,"needEscape":true,"source":"The SearchResultCollection class contains the <xref href=\"System.DirectoryServices.SearchResult\"></xref> instances that the Active Directory hierarchy returned during a <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref> query."},{"pos":[1698,2019],"content":"Due to implementation restrictions, the SearchResultCollection class cannot release all of its unmanaged resources when it is garbage collected. To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the SearchResultCollection object is no longer needed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Due to implementation restrictions, the SearchResultCollection class cannot release all of its unmanaged resources when it is garbage collected. To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the SearchResultCollection object is no longer needed.","pos":[0,321],"nodes":[{"content":"Due to implementation restrictions, the SearchResultCollection class cannot release all of its unmanaged resources when it is garbage collected.","pos":[0,144]},{"content":"To prevent a memory leak, you must call the &lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt; method when the SearchResultCollection object is no longer needed.","pos":[145,321],"source":" To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the SearchResultCollection object is no longer needed."}]}]},{"pos":[3066,3180],"content":"Determines if a specified <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is in this collection.","needQuote":true,"needEscape":true,"source":"Determines if a specified <xref href=\"System.DirectoryServices.SearchResult\"></xref> object is in this collection."},{"pos":[3375,3453],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to find.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to find."},{"pos":[3512,3701],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified property belongs to this collection; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified property belongs to this collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[4374,4546],"content":"Copies all <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects in this collection to the specific array, starting at the specified index in the target array.","needQuote":true,"needEscape":true,"source":"Copies all <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection to the specific array, starting at the specified index in the target array."},{"pos":[4756,4882],"content":"The array of <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that receives the elements of this collection.","needQuote":true,"needEscape":true,"source":"The array of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects that receives the elements of this collection."},{"pos":[4943,5026],"content":"The zero-based index in <ph id=\"ph1\">`results`</ph> where this method starts copying this collection.","needQuote":true,"needEscape":true,"source":"The zero-based index in `results` where this method starts copying this collection."},{"pos":[5520,5625],"content":"Gets the number of <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects in this collection.","needQuote":true,"needEscape":true,"source":"Gets the number of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection."},{"pos":[5731,5831],"content":"The number of <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects in this collection.","needQuote":true,"needEscape":true,"source":"The number of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection."},{"pos":[6338,6458],"content":"Releases all resources that are used by the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResultCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Releases all resources that are used by the <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> object."},{"pos":[6471,6957],"content":"The Dispose method, it allows the resources that are used by the <xref:System.DirectoryServices.SearchResultCollection> to be reallocated for other purposes. For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).       The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, an application must call the Dispose method explicitly to prevent a memory leak.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Dispose method, it allows the resources that are used by the &lt;xref:System.DirectoryServices.SearchResultCollection&gt; to be reallocated for other purposes.","pos":[0,157],"source":"The Dispose method, it allows the resources that are used by the <xref:System.DirectoryServices.SearchResultCollection> to be reallocated for other purposes."},{"content":"For more information about Dispose, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[158,271],"source":" For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md)."},{"content":"The garbage collector does not release memory for a &lt;xref:System.DirectoryServices.SearchResultCollection&gt; object.","pos":[278,392],"source":"       The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object."},{"content":"Therefore, an application must call the Dispose method explicitly to prevent a memory leak.","pos":[393,484]}]},{"pos":[7586,7762],"content":"Releases the unmanaged resources that are used by the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResultCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources that are used by the <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> object and optionally releases the managed resources."},{"pos":[7775,9098],"content":"This method is called by the public <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> invokes the protected Dispose method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes Dispose with the `disposing` parameter set to `false`.       When the `disposing` parameter is `true`, this method releases all resources that are held by any managed objects that this <xref:System.DirectoryServices.SearchResultCollection> references.       The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.       This method invokes the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method of each object in the collection.       For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose> and <xref:System.Object.Finalize%2A>, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called by the public &lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt; method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,157],"source":"This method is called by the public <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method."},{"content":"&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt; invokes the protected Dispose method with the <ph id=\"ph1\">`disposing`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[158,306],"source":" <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> invokes the protected Dispose method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes Dispose with the <ph id=\"ph1\">`disposing`</ph> parameter set to <ph id=\"ph2\">`false`</ph>.","pos":[307,402],"source":" <xref:System.Object.Finalize%2A> invokes Dispose with the `disposing` parameter set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources that are held by any managed objects that this &lt;xref:System.DirectoryServices.SearchResultCollection&gt; references.","pos":[409,599],"source":"       When the `disposing` parameter is `true`, this method releases all resources that are held by any managed objects that this <xref:System.DirectoryServices.SearchResultCollection> references."},{"content":"The garbage collector does not release memory for a &lt;xref:System.DirectoryServices.SearchResultCollection&gt; object.","pos":[606,720],"source":"       The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object."},{"content":"Therefore, you must call the &lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt; method explicitly to prevent a memory leak.","pos":[721,859],"source":" Therefore, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak."},{"content":"This method invokes the &lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt; method of each object in the collection.","pos":[866,996],"source":"       This method invokes the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method of each object in the collection."},{"content":"For more information about &lt;xref:System.DirectoryServices.SearchResultCollection.Dispose&gt; and &lt;xref:System.Object.Finalize%2A&gt;, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Overriding the Finalize Method<ept id=\"p2\">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.","pos":[1003,1315],"source":"       For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose> and <xref:System.Object.Finalize%2A>, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."}]},{"pos":[9254,9463],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[9977,10062],"content":"Overrides the &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt; method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Overrides the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.Finalize%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method.","pos":[0,85],"source":"Overrides the &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt; method."}]},{"pos":[10672,10746],"content":"Returns an enumerator that you can use to iterate through this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator that you can use to iterate through this collection.","pos":[0,74]}]},{"pos":[10919,11019],"content":"An <xref:System.Collections.IEnumerator> object that you can use to iterate through this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerator&gt; object that you can use to iterate through this collection.","pos":[0,100],"source":"An <xref:System.Collections.IEnumerator> object that you can use to iterate through this collection."}]},{"pos":[11525,12013],"content":"Gets the handle that is returned by the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method that performs the actual search. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the handle that is returned by the <bpt id=\"p1\">[</bpt>IDirectorySearch::ExecuteSearch<ept id=\"p1\">](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)</ept> method that performs the actual search.","pos":[0,218],"source":"Gets the handle that is returned by the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method that performs the actual search."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>IDirectorySearch::ExecuteSearch<ept id=\"p1\">](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)</ept> topic in the MSDN Library at <bpt id=\"p2\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p2\">](http://msdn.microsoft.com/library)</ept>.","pos":[219,488],"source":" For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."}]},{"pos":[12026,13223],"content":"The  <xref:System.DirectoryServices.DirectorySearcher> that created this collection calls the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method, which makes the query results available to the T:System.DirectoryServices.SearchResultCollection object. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).       Each time that a query is performed, a handle for the results of that query is associated with its  <xref:System.DirectoryServices.SearchResultCollection> object. This handle corresponds to the search handle in ADSI. This handle persists until you call the <xref:System.DirectoryServices.SearchResultCollection.Dispose> method on the <xref:System.DirectoryServices.SearchResultCollection> object, so you must call <xref:System.DirectoryServices.SearchResultCollection.Dispose> to prevent a memory leak. The garbage collector does not free memory for this particular object.","needQuote":false,"needEscape":true,"nodes":[{"content":"The  &lt;xref:System.DirectoryServices.DirectorySearcher&gt; that created this collection calls the <bpt id=\"p1\">[</bpt>IDirectorySearch::ExecuteSearch<ept id=\"p1\">](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)</ept> method, which makes the query results available to the T:System.DirectoryServices.SearchResultCollection object.","pos":[0,345],"source":"The  <xref:System.DirectoryServices.DirectorySearcher> that created this collection calls the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method, which makes the query results available to the T:System.DirectoryServices.SearchResultCollection object."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>IDirectorySearch::ExecuteSearch<ept id=\"p1\">](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)</ept> topic in the MSDN Library at <bpt id=\"p2\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p2\">](http://msdn.microsoft.com/library)</ept>.","pos":[346,615],"source":" For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."},{"content":"Each time that a query is performed, a handle for the results of that query is associated with its  &lt;xref:System.DirectoryServices.SearchResultCollection&gt; object.","pos":[622,784],"source":"       Each time that a query is performed, a handle for the results of that query is associated with its  <xref:System.DirectoryServices.SearchResultCollection> object."},{"content":"This handle corresponds to the search handle in ADSI.","pos":[785,838]},{"content":"This handle persists until you call the &lt;xref:System.DirectoryServices.SearchResultCollection.Dispose&gt; method on the &lt;xref:System.DirectoryServices.SearchResultCollection&gt; object, so you must call &lt;xref:System.DirectoryServices.SearchResultCollection.Dispose&gt; to prevent a memory leak.","pos":[839,1124],"source":" This handle persists until you call the <xref:System.DirectoryServices.SearchResultCollection.Dispose> method on the <xref:System.DirectoryServices.SearchResultCollection> object, so you must call <xref:System.DirectoryServices.SearchResultCollection.Dispose> to prevent a memory leak."},{"content":"The garbage collector does not free memory for this particular object.","pos":[1125,1195]}]},{"pos":[13335,13389],"content":"The ADS_SEARCH_HANDLE value that this collection uses.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ADS_SEARCH_HANDLE value that this collection uses.","pos":[0,54]}]},{"pos":[14011,14155],"content":"Returns the index of the first occurrence of the specified <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object in this collection.","needQuote":true,"needEscape":true,"source":"Returns the index of the first occurrence of the specified <xref href=\"System.DirectoryServices.SearchResult\"></xref> object in this collection."},{"pos":[14348,14451],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to search for in this collection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to search for in this collection."},{"pos":[14508,14688],"content":"The zero-based index of the first matching object. Returns -1 if no member of this collection is identical to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the first matching object.","pos":[0,50]},{"content":"Returns -1 if no member of this collection is identical to the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[51,180],"source":" Returns -1 if no member of this collection is identical to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object."}]},{"pos":[15227,15358],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that is located at a specified index in this collection.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object that is located at a specified index in this collection."},{"pos":[15371,15773],"content":"In C#, this property is the indexer for the <xref:System.DirectoryServices.SearchResultCollection> class.       In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <xref:System.String>.","needQuote":false,"needEscape":true,"nodes":[{"content":"In C#, this property is the indexer for the <xref:System.DirectoryServices.SearchResultCollection> class.       In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <xref:System.String>.","pos":[0,400],"nodes":[{"content":"In C#, this property is the indexer for the &lt;xref:System.DirectoryServices.SearchResultCollection&gt; class.","pos":[0,105],"source":"In C#, this property is the indexer for the <xref:System.DirectoryServices.SearchResultCollection> class."},{"content":"In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own.","pos":[112,228]},{"content":"However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of &lt;xref:System.String&gt;.","pos":[229,400],"source":" However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <xref:System.String>."}]}]},{"pos":[15944,16050],"content":"The zero-based index of the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to retrieve.","needQuote":true,"needEscape":true,"source":"The zero-based index of the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to retrieve."},{"pos":[16132,16241],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that is located at the specified index.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object that is located at the specified index."},{"pos":[16788,16923],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.DirectorySearcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> properties that were specified before the search was executed.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref> properties that were specified before the search was executed."},{"pos":[17048,17261],"content":"An array of type <xref:System.String> that contains the properties that were specified in the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> property collection before the search was executed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.String&gt; that contains the properties that were specified in the &lt;xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*&gt; property collection before the search was executed.","pos":[0,213],"source":"An array of type <xref:System.String> that contains the properties that were specified in the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> property collection before the search was executed."}]},{"pos":[18030,18173],"content":"Copies the elements of the <xref:System.Collections.ICollection> to an <xref:System.Array>, starting at a particular <xref:System.Array> index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the elements of the &lt;xref:System.Collections.ICollection&gt; to an &lt;xref:System.Array&gt;, starting at a particular &lt;xref:System.Array&gt; index.","pos":[0,143],"source":"Copies the elements of the <xref:System.Collections.ICollection> to an <xref:System.Array>, starting at a particular <xref:System.Array> index."}]},{"pos":[18323,18508],"content":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref:System.Collections.ICollection>. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref:System.Collections.ICollection>. The <xref:System.Array> must have zero-based indexing.","pos":[0,185],"nodes":[{"content":"The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from &lt;xref:System.Collections.ICollection&gt;.","pos":[0,130],"source":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref:System.Collections.ICollection>."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[131,185],"source":" The <xref:System.Array> must have zero-based indexing."}]}]},{"pos":[18569,18625],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[18841,18924],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19039,19076],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero."},{"pos":[19172,19417],"content":"<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref:System.Collections.ICollection> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","pos":[0,39],"source":"<code>array</code> is multidimensional."},{"content":"-or-       The number of elements in the source <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> is greater than the available space from <ph id=\"ph2\">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id=\"ph3\">&lt;code&gt;array&lt;/code&gt;</ph>.","pos":[46,241],"source":"       -or-       The number of elements in the source <xref:System.Collections.ICollection> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}]},{"pos":[19519,19659],"content":"The type of the source &lt;xref:System.Collections.ICollection&gt; cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination <code>array</code>."},{"pos":[20282,20396],"content":"Gets a value indicating whether access to the <xref:System.Collections.ICollection> is synchronized (thread safe).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether access to the &lt;xref:System.Collections.ICollection&gt; is synchronized (thread safe).","pos":[0,114],"source":"Gets a value indicating whether access to the <xref:System.Collections.ICollection> is synchronized (thread safe)."}]},{"pos":[20409,21776],"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       [Visual Basic, C#]       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:      ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```      ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; returns an object, which can be used to synchronize access to the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,154],"source":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>."},{"content":"Most collection classes in the &lt;xref:System.Collections?displayProperty=fullName&gt; namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.","pos":[161,362],"source":"       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection."},{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[369,447]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[448,585]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[586,767]},{"content":"[Visual Basic, C#]       The following code example shows how to lock the collection using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; during the entire enumeration:      <ph id=\"ph1\">```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```</ph>      <ph id=\"ph2\">```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```</ph>","pos":[774,1340],"source":"       [Visual Basic, C#]       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:      ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```      ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```"}]},{"pos":[21919,22140],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access to the &lt;xref:System.Collections.ICollection&gt; is synchronized (thread safe); otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref:System.Collections.ICollection> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22857,22956],"content":"Gets an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that can be used to synchronize access to the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,99],"source":"Gets an object that can be used to synchronize access to the <xref:System.Collections.ICollection>."}]},{"pos":[22969,25540],"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.       In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:      ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ```       [Visual Basic]      ```   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     ' Some operation on the collection, which is now thread safe.    End SyncLock   ```       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       [Visual Basic, C#]       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:      ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```      ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance.","pos":[0,128]},{"content":"Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's <ph id=\"ph1\">`SyncRoot`</ph> property.","pos":[129,312],"source":" Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property."},{"content":"Most collection classes in the &lt;xref:System.Collections?displayProperty=fullName&gt; namespace also implement a <ph id=\"ph1\">`Synchronized`</ph> method, which provides a synchronized wrapper around the underlying collection.","pos":[319,522],"source":"       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection."},{"content":"However, derived classes can provide their own synchronized version of the collection using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; property.","pos":[523,678],"source":" However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; of the collection, not directly on the collection.","pos":[679,833],"source":" The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[834,915]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","pos":[916,1048]},{"content":"In the absence of a <ph id=\"ph1\">`Synchronized`</ph> method on a collection, the expected usage for &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; looks like this:      <ph id=\"ph2\">```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ```</ph>       [Visual Basic]      <ph id=\"ph3\">```   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     ' Some operation on the collection, which is now thread safe.    End SyncLock   ```</ph>       Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[1055,1634],"source":"       In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:      ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ```       [Visual Basic]      ```   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     ' Some operation on the collection, which is now thread safe.    End SyncLock   ```       Enumerating through a collection is intrinsically not a thread safe procedure."},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[1635,1772]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[1773,1954]},{"content":"[Visual Basic, C#]       The following code example shows how to lock the collection using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; during the entire enumeration:      <ph id=\"ph1\">```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```</ph>      <ph id=\"ph2\">```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```</ph>","pos":[1961,2526],"source":"       [Visual Basic, C#]       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:      ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```      ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     ' Insert your code here.     Next item    End SyncLock   ```"}]},{"pos":[25678,25772],"content":"An object that can be used to synchronize access to the <xref:System.Collections.ICollection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that can be used to synchronize access to the &lt;xref:System.Collections.ICollection&gt;.","pos":[0,94],"source":"An object that can be used to synchronize access to the <xref:System.Collections.ICollection>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.DirectoryServices.SearchResultCollection\n  id: SearchResultCollection\n  children:\n  - System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)\n  - System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)\n  - System.DirectoryServices.SearchResultCollection.Count\n  - System.DirectoryServices.SearchResultCollection.Dispose\n  - System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)\n  - System.DirectoryServices.SearchResultCollection.Finalize\n  - System.DirectoryServices.SearchResultCollection.GetEnumerator\n  - System.DirectoryServices.SearchResultCollection.Handle\n  - System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)\n  - System.DirectoryServices.SearchResultCollection.Item(System.Int32)\n  - System.DirectoryServices.SearchResultCollection.PropertiesLoaded\n  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized\n  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot\n  langs:\n  - csharp\n  name: SearchResultCollection\n  nameWithType: SearchResultCollection\n  fullName: System.DirectoryServices.SearchResultCollection\n  type: Class\n  summary: The SearchResultCollection class contains the <xref href=\"System.DirectoryServices.SearchResult\"></xref> instances that the Active Directory hierarchy returned during a <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref> query.\n  remarks: Due to implementation restrictions, the SearchResultCollection class cannot release all of its unmanaged resources when it is garbage collected. To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the SearchResultCollection object is no longer needed.\n  syntax:\n    content: 'public class SearchResultCollection : MarshalByRefObject, IDisposable, System.Collections.ICollection'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.Collections.ICollection\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)\n  id: Contains(System.DirectoryServices.SearchResult)\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Contains(SearchResult)\n  nameWithType: SearchResultCollection.Contains(SearchResult)\n  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Determines if a specified <xref href=\"System.DirectoryServices.SearchResult\"></xref> object is in this collection.\n  syntax:\n    content: public bool Contains (System.DirectoryServices.SearchResult result);\n    parameters:\n    - id: result\n      type: System.DirectoryServices.SearchResult\n      description: The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to find.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified property belongs to this collection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.SearchResultCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)\n  id: CopyTo(System.DirectoryServices.SearchResult[],System.Int32)\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: CopyTo(SearchResult[],Int32)\n  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)\n  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Copies all <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection to the specific array, starting at the specified index in the target array.\n  syntax:\n    content: public void CopyTo (System.DirectoryServices.SearchResult[] results, int index);\n    parameters:\n    - id: results\n      type: System.DirectoryServices.SearchResult[]\n      description: The array of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects that receives the elements of this collection.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `results` where this method starts copying this collection.\n  overload: System.DirectoryServices.SearchResultCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.Count\n  id: Count\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: SearchResultCollection.Count\n  fullName: System.DirectoryServices.SearchResultCollection.Count\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the number of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection.\n  overload: System.DirectoryServices.SearchResultCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.Dispose\n  id: Dispose\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SearchResultCollection.Dispose()\n  fullName: System.DirectoryServices.SearchResultCollection.Dispose()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Releases all resources that are used by the <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> object.\n  remarks: \"The Dispose method, it allows the resources that are used by the <xref:System.DirectoryServices.SearchResultCollection> to be reallocated for other purposes. For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, an application must call the Dispose method explicitly to prevent a memory leak.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.DirectoryServices.SearchResultCollection.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SearchResultCollection.Dispose(Boolean)\n  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Releases the unmanaged resources that are used by the <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> object and optionally releases the managed resources.\n  remarks: \"This method is called by the public <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> invokes the protected Dispose method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes Dispose with the `disposing` parameter set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources that are held by any managed objects that this <xref:System.DirectoryServices.SearchResultCollection> references.  \\n  \\n The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.  \\n  \\n This method invokes the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method of each object in the collection.  \\n  \\n For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose> and <xref:System.Object.Finalize%2A>, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.DirectoryServices.SearchResultCollection.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.Finalize\n  id: Finalize\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: SearchResultCollection.Finalize()\n  fullName: System.DirectoryServices.SearchResultCollection.Finalize()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Overrides the &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt; method.\n  syntax:\n    content: ~SearchResultCollection ();\n    parameters: []\n  overload: System.DirectoryServices.SearchResultCollection.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: SearchResultCollection.GetEnumerator()\n  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns an enumerator that you can use to iterate through this collection.\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> object that you can use to iterate through this collection.\n  overload: System.DirectoryServices.SearchResultCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.Handle\n  id: Handle\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Handle\n  nameWithType: SearchResultCollection.Handle\n  fullName: System.DirectoryServices.SearchResultCollection.Handle\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the handle that is returned by the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method that performs the actual search. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).\n  remarks: \"The  <xref:System.DirectoryServices.DirectorySearcher> that created this collection calls the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method, which makes the query results available to the T:System.DirectoryServices.SearchResultCollection object. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).  \\n  \\n Each time that a query is performed, a handle for the results of that query is associated with its  <xref:System.DirectoryServices.SearchResultCollection> object. This handle corresponds to the search handle in ADSI. This handle persists until you call the <xref:System.DirectoryServices.SearchResultCollection.Dispose> method on the <xref:System.DirectoryServices.SearchResultCollection> object, so you must call <xref:System.DirectoryServices.SearchResultCollection.Dispose> to prevent a memory leak. The garbage collector does not free memory for this particular object.\"\n  syntax:\n    content: public IntPtr Handle { get; }\n    return:\n      type: System.IntPtr\n      description: The ADS_SEARCH_HANDLE value that this collection uses.\n  overload: System.DirectoryServices.SearchResultCollection.Handle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)\n  id: IndexOf(System.DirectoryServices.SearchResult)\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: IndexOf(SearchResult)\n  nameWithType: SearchResultCollection.IndexOf(SearchResult)\n  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns the index of the first occurrence of the specified <xref href=\"System.DirectoryServices.SearchResult\"></xref> object in this collection.\n  syntax:\n    content: public int IndexOf (System.DirectoryServices.SearchResult result);\n    parameters:\n    - id: result\n      type: System.DirectoryServices.SearchResult\n      description: The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to search for in this collection.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first matching object. Returns -1 if no member of this collection is identical to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object.\n  overload: System.DirectoryServices.SearchResultCollection.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: SearchResultCollection.Item(Int32)\n  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object that is located at a specified index in this collection.\n  remarks: \"In C#, this property is the indexer for the <xref:System.DirectoryServices.SearchResultCollection> class.  \\n  \\n In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <xref:System.String>.\"\n  syntax:\n    content: public System.DirectoryServices.SearchResult this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to retrieve.\n    return:\n      type: System.DirectoryServices.SearchResult\n      description: The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object that is located at the specified index.\n  overload: System.DirectoryServices.SearchResultCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded\n  id: PropertiesLoaded\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: PropertiesLoaded\n  nameWithType: SearchResultCollection.PropertiesLoaded\n  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref> properties that were specified before the search was executed.\n  syntax:\n    content: public string[] PropertiesLoaded { get; }\n    return:\n      type: System.String[]\n      description: An array of type <xref:System.String> that contains the properties that were specified in the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> property collection before the search was executed.\n  overload: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Copies the elements of the <xref:System.Collections.ICollection> to an <xref:System.Array>, starting at a particular <xref:System.Array> index.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref:System.Collections.ICollection>. The <xref:System.Array> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref:System.Collections.ICollection> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination <code>array</code>.\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a value indicating whether access to the <xref:System.Collections.ICollection> is synchronized (thread safe).\n  remarks: \"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n [Visual Basic, C#]  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n```c#  \\nICollection myCollection = new ICollection();  \\n  lock(myCollection.SyncRoot) {  \\n  foreach (Object item in myCollection) {  \\n  // Insert your code here.  \\n  }  \\n }  \\n```  \\n  \\n```vb#  \\nDim myCollection As New ICollection()  \\n Dim item As Object  \\n SyncLock myCollection.SyncRoot  \\n  For Each item In myCollection  \\n  ' Insert your code here.  \\n  Next item  \\n End SyncLock  \\n```\"\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref:System.Collections.ICollection> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.\n  remarks: \"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.  \\n  \\n In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:  \\n  \\n```c#  \\nICollection MyCollection =...  \\n lock(MyCollection.SyncRoot) {  \\n  // Some operation on the collection, which is now thread safe.  \\n }  \\n```  \\n  \\n [Visual Basic]  \\n  \\n```  \\nDim myCollection as New ICollection()  \\n SyncLock myCollection.SyncRoot  \\n  ' Some operation on the collection, which is now thread safe.  \\n End SyncLock  \\n```  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n [Visual Basic, C#]  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n```c#  \\nICollection myCollection = new ICollection();  \\n lock(myCollection.SyncRoot) {  \\n  foreach (Object item in myCollection) {  \\n  // Insert your code here.  \\n  }  \\n }  \\n```  \\n  \\n```vb#  \\nDim myCollection As New ICollection()  \\n Dim item As Object  \\n SyncLock myCollection.SyncRoot  \\n  For Each item In myCollection  \\n  ' Insert your code here.  \\n  Next item  \\n End SyncLock  \\n```\"\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref:System.Collections.ICollection>.\n  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Contains(SearchResult)\n  nameWithType: SearchResultCollection.Contains(SearchResult)\n  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.DirectoryServices.SearchResult\n  parent: System.DirectoryServices\n  isExternal: false\n  name: SearchResult\n  nameWithType: SearchResult\n  fullName: System.DirectoryServices.SearchResult\n- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: CopyTo(SearchResult[],Int32)\n  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)\n  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)\n- uid: System.DirectoryServices.SearchResult[]\n  parent: System.DirectoryServices\n  isExternal: false\n  name: SearchResult\n  nameWithType: SearchResult\n  fullName: System.DirectoryServices.SearchResult[]\n  spec.csharp:\n  - uid: System.DirectoryServices.SearchResult\n    name: SearchResult\n    nameWithType: SearchResult\n    fullName: SearchResult[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.DirectoryServices.SearchResultCollection.Count\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Count\n  nameWithType: SearchResultCollection.Count\n  fullName: System.DirectoryServices.SearchResultCollection.Count\n- uid: System.DirectoryServices.SearchResultCollection.Dispose\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Dispose()\n  nameWithType: SearchResultCollection.Dispose()\n  fullName: System.DirectoryServices.SearchResultCollection.Dispose()\n- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SearchResultCollection.Dispose(Boolean)\n  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)\n- uid: System.DirectoryServices.SearchResultCollection.Finalize\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Finalize()\n  nameWithType: SearchResultCollection.Finalize()\n  fullName: System.DirectoryServices.SearchResultCollection.Finalize()\n- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: SearchResultCollection.GetEnumerator()\n  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.DirectoryServices.SearchResultCollection.Handle\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Handle\n  nameWithType: SearchResultCollection.Handle\n  fullName: System.DirectoryServices.SearchResultCollection.Handle\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: IndexOf(SearchResult)\n  nameWithType: SearchResultCollection.IndexOf(SearchResult)\n  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)\n- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: SearchResultCollection.Item(Int32)\n  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)\n- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: PropertiesLoaded\n  nameWithType: SearchResultCollection.PropertiesLoaded\n  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.DirectoryServices.SearchResultCollection.Contains*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Contains\n  nameWithType: SearchResultCollection.Contains\n- uid: System.DirectoryServices.SearchResultCollection.CopyTo*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: SearchResultCollection.CopyTo\n- uid: System.DirectoryServices.SearchResultCollection.Count*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Count\n  nameWithType: SearchResultCollection.Count\n- uid: System.DirectoryServices.SearchResultCollection.Dispose*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Dispose\n  nameWithType: SearchResultCollection.Dispose\n- uid: System.DirectoryServices.SearchResultCollection.Finalize*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Finalize\n  nameWithType: SearchResultCollection.Finalize\n- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: SearchResultCollection.GetEnumerator\n- uid: System.DirectoryServices.SearchResultCollection.Handle*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Handle\n  nameWithType: SearchResultCollection.Handle\n- uid: System.DirectoryServices.SearchResultCollection.IndexOf*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: IndexOf\n  nameWithType: SearchResultCollection.IndexOf\n- uid: System.DirectoryServices.SearchResultCollection.Item*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Item\n  nameWithType: SearchResultCollection.Item\n- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: PropertiesLoaded\n  nameWithType: SearchResultCollection.PropertiesLoaded\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot\n"}