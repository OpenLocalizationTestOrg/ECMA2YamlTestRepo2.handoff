{"nodes":[{"pos":[441,561],"content":"Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.","pos":[0,120]}]},{"pos":[574,1504],"content":"User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native` or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.       <xref:Microsoft.SqlServer.Server.Format>.`Native` allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle. <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` allows user-defined types and aggregates to handle their own serialization. User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the IBinarySerialize interface.       Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.","needQuote":false,"needEscape":true,"nodes":[{"content":"User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either &lt;xref:Microsoft.SqlServer.Server.Format&gt;.<ph id=\"ph1\">`Native`</ph>","pos":[0,164],"source":"User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native`"},{"content":"or &lt;xref:Microsoft.SqlServer.Server.Format&gt;.<ph id=\"ph1\">`UserDefined`</ph>.","pos":[165,223],"source":" or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`."},{"content":"&lt;xref:Microsoft.SqlServer.Server.Format&gt;.<ph id=\"ph1\">`Native`</ph>","pos":[230,279],"source":"       <xref:Microsoft.SqlServer.Server.Format>.`Native`"},{"content":"allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle.","pos":[280,424]},{"content":"&lt;xref:Microsoft.SqlServer.Server.Format&gt;.<ph id=\"ph1\">`UserDefined`</ph>","pos":[425,479],"source":" <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`"},{"content":"allows user-defined types and aggregates to handle their own serialization.","pos":[480,555]},{"content":"User-defined types and aggregates must be marked with &lt;xref:Microsoft.SqlServer.Server.Format&gt;.<ph id=\"ph1\">`UserDefined`</ph>","pos":[556,664],"source":" User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`"},{"content":"in the <ph id=\"ph1\">`SqlUserDefinedType`</ph> or <ph id=\"ph2\">`SqlUserDefinedAggregate`</ph> attribute, and must implement the IBinarySerialize interface.","pos":[665,783],"source":" in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the IBinarySerialize interface."},{"content":"Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.","pos":[790,926]}]},{"pos":[2042,2125],"content":"Generates a user-defined type (UDT) or user-defined aggregate from its binary form.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates a user-defined type (UDT) or user-defined aggregate from its binary form.","pos":[0,83]}]},{"pos":[2137,2287],"content":"The Read method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Read method must reconstitute your object using the information written by the &lt;xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A&gt; method.","pos":[0,150],"source":"The Read method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method."}]},{"pos":[2939,3018],"content":"The <xref:System.IO.BinaryReader> stream from which the object is deserialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.BinaryReader&gt; stream from which the object is deserialized.","pos":[0,79],"source":"The <xref:System.IO.BinaryReader> stream from which the object is deserialized."}]},{"pos":[3565,3677],"content":"Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.","pos":[0,112]}]},{"pos":[3689,3869],"content":"Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Write sufficient information to the binary stream to allow the &lt;xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A&gt; method to reconstitute your UDT or user-defined aggregate.","pos":[0,180],"source":"Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate."}]},{"pos":[4716,4814],"content":"The <xref:System.IO.BinaryWriter> stream to which the UDT or user-defined aggregate is serialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.BinaryWriter&gt; stream to which the UDT or user-defined aggregate is serialized.","pos":[0,98],"source":"The <xref:System.IO.BinaryWriter> stream to which the UDT or user-defined aggregate is serialized."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.SqlServer.Server.IBinarySerialize\n  id: IBinarySerialize\n  children:\n  - Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)\n  - Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)\n  langs:\n  - csharp\n  name: IBinarySerialize\n  nameWithType: IBinarySerialize\n  fullName: Microsoft.SqlServer.Server.IBinarySerialize\n  type: Interface\n  summary: Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.\n  remarks: \"User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native` or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.  \\n  \\n <xref:Microsoft.SqlServer.Server.Format>.`Native` allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle. <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` allows user-defined types and aggregates to handle their own serialization. User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the IBinarySerialize interface.  \\n  \\n Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.\"\n  syntax:\n    content: public interface IBinarySerialize\n  implements: []\n  platform:\n  - net462\n- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)\n  id: Read(System.IO.BinaryReader)\n  parent: Microsoft.SqlServer.Server.IBinarySerialize\n  langs:\n  - csharp\n  name: Read(BinaryReader)\n  nameWithType: IBinarySerialize.Read(BinaryReader)\n  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Read(BinaryReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: Microsoft.SqlServer.Server\n  summary: Generates a user-defined type (UDT) or user-defined aggregate from its binary form.\n  remarks: The Read method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.\n  example:\n  - \"The following example shows the implementation of the Read method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT. This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.  \\n  \\n [!code-cs[DataWorks IBinarySerialize Samples#1](~/add/codesnippet/csharp/m-microsoft.sqlserver.se_1_1.cs)]\\n [!code-vb[DataWorks IBinarySerialize Samples#1](~/add/codesnippet/visualbasic/m-microsoft.sqlserver.se_1_1.vb)]\"\n  syntax:\n    content: public void Read (System.IO.BinaryReader r);\n    parameters:\n    - id: r\n      type: System.IO.BinaryReader\n      description: The <xref:System.IO.BinaryReader> stream from which the object is deserialized.\n  overload: Microsoft.SqlServer.Server.IBinarySerialize.Read*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)\n  id: Write(System.IO.BinaryWriter)\n  parent: Microsoft.SqlServer.Server.IBinarySerialize\n  langs:\n  - csharp\n  name: Write(BinaryWriter)\n  nameWithType: IBinarySerialize.Write(BinaryWriter)\n  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Write(BinaryWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: Microsoft.SqlServer.Server\n  summary: Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.\n  remarks: Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.\n  example:\n  - \"The following example shows the implementation of the Writemethod of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format. The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.  \\n  \\n [!code-cs[DataWorks IBinarySerialize Samples#2](~/add/codesnippet/csharp/m-microsoft.sqlserver.se_0_1.cs)]\\n [!code-vb[DataWorks IBinarySerialize Samples#2](~/add/codesnippet/visualbasic/m-microsoft.sqlserver.se_0_1.vb)]\"\n  syntax:\n    content: public void Write (System.IO.BinaryWriter w);\n    parameters:\n    - id: w\n      type: System.IO.BinaryWriter\n      description: The <xref:System.IO.BinaryWriter> stream to which the UDT or user-defined aggregate is serialized.\n  overload: Microsoft.SqlServer.Server.IBinarySerialize.Write*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)\n  parent: Microsoft.SqlServer.Server.IBinarySerialize\n  isExternal: false\n  name: Read(BinaryReader)\n  nameWithType: IBinarySerialize.Read(BinaryReader)\n  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Read(BinaryReader)\n- uid: System.IO.BinaryReader\n  parent: System.IO\n  isExternal: true\n  name: BinaryReader\n  nameWithType: BinaryReader\n  fullName: System.IO.BinaryReader\n- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)\n  parent: Microsoft.SqlServer.Server.IBinarySerialize\n  isExternal: false\n  name: Write(BinaryWriter)\n  nameWithType: IBinarySerialize.Write(BinaryWriter)\n  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Write(BinaryWriter)\n- uid: System.IO.BinaryWriter\n  parent: System.IO\n  isExternal: true\n  name: BinaryWriter\n  nameWithType: BinaryWriter\n  fullName: System.IO.BinaryWriter\n- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read*\n  parent: Microsoft.SqlServer.Server.IBinarySerialize\n  isExternal: false\n  name: Read\n  nameWithType: IBinarySerialize.Read\n- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write*\n  parent: Microsoft.SqlServer.Server.IBinarySerialize\n  isExternal: false\n  name: Write\n  nameWithType: IBinarySerialize.Write\n"}