{"nodes":[{"pos":[2329,2440],"content":"Represents a span of continuous text in a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.TextPattern\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> container.","needQuote":true,"needEscape":true,"source":"Represents a span of continuous text in a <xref href=\"System.Windows.Automation.TextPattern\"></xref> container."},{"pos":[2453,3025],"content":"A TextPatternRange can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.       A TextPatternRange will become invalid if one of the following occurs: the text in the <xref:System.Windows.Automation.TextPattern> container changes because of some user activity, or the <xref:System.Windows.Automation.ValuePattern.SetValue%2A> method of <xref:System.Windows.Automation.ValuePattern> is used to programmatically change the value of the text in the <xref:System.Windows.Automation.TextPattern> container.","needQuote":false,"needEscape":true,"nodes":[{"content":"A TextPatternRange can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.       A TextPatternRange will become invalid if one of the following occurs: the text in the <xref:System.Windows.Automation.TextPattern> container changes because of some user activity, or the <xref:System.Windows.Automation.ValuePattern.SetValue%2A> method of <xref:System.Windows.Automation.ValuePattern> is used to programmatically change the value of the text in the <xref:System.Windows.Automation.TextPattern> container.","pos":[0,570],"nodes":[{"content":"A TextPatternRange can represent an insertion point, a subset, or all of the text in a &lt;xref:System.Windows.Automation.TextPattern&gt; container.","pos":[0,142],"source":"A TextPatternRange can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container."},{"content":"A TextPatternRange will become invalid if one of the following occurs: the text in the &lt;xref:System.Windows.Automation.TextPattern&gt; container changes because of some user activity, or the &lt;xref:System.Windows.Automation.ValuePattern.SetValue%2A&gt; method of &lt;xref:System.Windows.Automation.ValuePattern&gt; is used to programmatically change the value of the text in the &lt;xref:System.Windows.Automation.TextPattern&gt; container.","pos":[149,570],"source":"       A TextPatternRange will become invalid if one of the following occurs: the text in the <xref:System.Windows.Automation.TextPattern> container changes because of some user activity, or the <xref:System.Windows.Automation.ValuePattern.SetValue%2A> method of <xref:System.Windows.Automation.ValuePattern> is used to programmatically change the value of the text in the <xref:System.Windows.Automation.TextPattern> container."}]}]},{"pos":[3604,3711],"content":"Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.","pos":[0,107]}]},{"pos":[3724,3857],"content":"The text insertion point moves to the area of the new selection.       Providing a degenerate text range moves the insertion point.","needQuote":false,"needEscape":true,"nodes":[{"content":"The text insertion point moves to the area of the new selection.       Providing a degenerate text range moves the insertion point.","pos":[0,131],"nodes":[{"content":"The text insertion point moves to the area of the new selection.","pos":[0,64]},{"content":"Providing a degenerate text range moves the insertion point.","pos":[71,131]}]}]},{"pos":[4132,4370],"content":"If text provider does not support multiple, disjoint selections (for example, &lt;xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt; must have a value of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"If text provider does not support multiple, disjoint selections (for example, <xref:System.Windows.Automation.TextPattern.SupportedTextSelection*> must have a value of <xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"></xref>)."},{"pos":[4777,5003],"content":"Retrieves a new <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> identical to the original <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRange\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and inheriting all properties of the original.","needQuote":true,"needEscape":true,"source":"Retrieves a new <xref href=\"System.Windows.Automation.Text.TextPatternRange\"></xref> identical to the original <xref href=\"System.Windows.Automation.Text.TextPatternRange\"></xref> and inheriting all properties of the original."},{"pos":[5016,5321],"content":"Alternatively, create a new <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> from the <xref:System.Windows.Automation.TextPattern> and move the two endpoints to correspond with the endpoints of the original text range.       The new range can be manipulated independently from the original.","needQuote":false,"needEscape":true,"nodes":[{"content":"Alternatively, create a new <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> from the <xref:System.Windows.Automation.TextPattern> and move the two endpoints to correspond with the endpoints of the original text range.       The new range can be manipulated independently from the original.","pos":[0,303],"nodes":[{"content":"Alternatively, create a new &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; from the &lt;xref:System.Windows.Automation.TextPattern&gt; and move the two endpoints to correspond with the endpoints of the original text range.","pos":[0,231],"source":"Alternatively, create a new <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> from the <xref:System.Windows.Automation.TextPattern> and move the two endpoints to correspond with the endpoints of the original text range."},{"content":"The new range can be manipulated independently from the original.","pos":[238,303]}]}]},{"pos":[5759,5962],"content":"The new text range. A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]) is never returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new text range.","pos":[0,19]},{"content":"A null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in <ph id=\"ph1\">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>) is never returned.","pos":[20,203],"source":" A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]) is never returned."}]},{"pos":[6609,6910],"content":"Returns a &lt;xref:System.Boolean&gt; value indicating whether the span (the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> endpoint to the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> endpoint) of a text range is the same as another text range.","needQuote":true,"needEscape":true,"source":"Returns a <xref:System.Boolean> value indicating whether the span (the <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint to the <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint) of a text range is the same as another text range."},{"pos":[7374,7398],"content":"A text range to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"A text range to compare.","pos":[0,24]}]},{"pos":[7457,7637],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the span of both text ranges is identical; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the span of both text ranges is identical; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7815,7885],"content":"If the range being compared does not come from the same text provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the range being compared does not come from the same text provider.","pos":[0,70]}]},{"pos":[8867,8958],"content":"Returns an <xref:System.Int32> indicating whether two text ranges have identical endpoints.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an &lt;xref:System.Int32&gt; indicating whether two text ranges have identical endpoints.","pos":[0,91],"source":"Returns an <xref:System.Int32> indicating whether two text ranges have identical endpoints."}]},{"pos":[8970,9145],"content":"By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.","needQuote":true,"needEscape":true,"nodes":[{"content":"By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.","pos":[0,175]}]},{"pos":[9758,9942],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> endpoint of the caller.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> or <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint of the caller."},{"pos":[10044,10076],"content":"The target range for comparison.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target range for comparison.","pos":[0,32]}]},{"pos":[10189,10373],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> endpoint of the target.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> or <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint of the target."},{"pos":[10431,10736],"content":"Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.       Returns zero if the caller's endpoint is at the same location as the target endpoint.       Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.       Returns zero if the caller's endpoint is at the same location as the target endpoint.       Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.","pos":[0,301],"nodes":[{"content":"Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.","pos":[0,102]},{"content":"Returns zero if the caller's endpoint is at the same location as the target endpoint.","pos":[109,194]},{"content":"Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.","pos":[201,301]}]}]},{"pos":[10932,11109],"content":"If range is a null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in <ph id=\"ph1\">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).","needQuote":true,"needEscape":true,"source":"If range is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])."},{"pos":[11204,11239],"content":"If range is from another container.","needQuote":true,"needEscape":true,"nodes":[{"content":"If range is from another container.","pos":[0,35]}]},{"pos":[11832,11933],"content":"Expands the text range to the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Expands the text range to the specified <xref href=\"System.Windows.Automation.Text.TextUnit\"></xref>."},{"pos":[11946,14543],"content":"If the range is already an exact quantity of the specified units then it remains unchanged.       In order for the ExpandToEnclosingUnit method to execute successfully, a sequence of actions is performed behind the scenes.      1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, making the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints.      2.  The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.      3.  The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.      4.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.       ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()      > [!NOTE] >  These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.       ExpandToEnclosingUnit respects both hidden and visible text. The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.       ExpandToEnclosingUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.       The order, from smallest unit to largest, is listed below.      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>","needQuote":false,"needEscape":true,"nodes":[{"content":"If the range is already an exact quantity of the specified units then it remains unchanged.","pos":[0,91]},{"content":"In order for the ExpandToEnclosingUnit method to execute successfully, a sequence of actions is performed behind the scenes.","pos":[98,222]},{"content":"1.","pos":[228,230]},{"content":"The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, making the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.","pos":[232,496],"source":"  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, making the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous."},{"content":"This step is necessary to remove ambiguity in situations where a text range spans <ph id=\"ph1\">`unit`</ph> boundaries; for example, \"{The U}RL <bpt id=\"p1\">[</bpt>http://www.microsoft.com<ept id=\"p1\">](http://www.microsoft.com)</ept> is embedded in text\" where \"{\" and \"}\" are the text range endpoints.","pos":[497,743],"source":" This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints."},{"content":"2.","pos":[749,751]},{"content":"The resulting range is moved backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to the beginning of the requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[753,910],"source":"  The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary."},{"content":"3.","pos":[916,918]},{"content":"The range is moved forward or backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; by the requested number of <ph id=\"ph1\">`unit`</ph> boundaries.","pos":[920,1073],"source":"  The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries."},{"content":"4.","pos":[1079,1081]},{"content":"The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[1083,1259],"source":"  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary."},{"content":"<bpt id=\"p1\">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/uia-textpattern-moveandexpand-examples.png \"</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p2\">\")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()      &gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.","pos":[1266,1701],"source":"![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()      > [!NOTE] >  These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position."},{"content":"ExpandToEnclosingUnit respects both hidden and visible text.","pos":[1708,1768]},{"content":"The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.","pos":[1769,1891],"source":" The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility."},{"content":"ExpandToEnclosingUnit defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.","pos":[1898,2096],"source":"       ExpandToEnclosingUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control."},{"content":"The order, from smallest unit to largest, is listed below.","pos":[2103,2161]},{"content":"-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;","pos":[2167,2553],"source":"      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>"}]},{"pos":[14990,15007],"content":"The textual unit.","needQuote":true,"needEscape":true,"nodes":[{"content":"The textual unit.","pos":[0,17]}]},{"pos":[15828,15895],"content":"Returns a text range subset that has the specified attribute value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a text range subset that has the specified attribute value.","pos":[0,67]}]},{"pos":[15908,16205],"content":"There is no differentiation between hidden and visible text. UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.      > [!NOTE] >  Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.","needQuote":false,"needEscape":true,"nodes":[{"content":"There is no differentiation between hidden and visible text.","pos":[0,60]},{"content":"UI Automation clients can use &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; to check text visibility.","pos":[61,179],"source":" UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Use &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to search the entire document.","pos":[185,294],"source":"      > [!NOTE] >  Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document."}]},{"pos":[16746,16774],"content":"The attribute to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attribute to search for.","pos":[0,28]}]},{"pos":[16836,16930],"content":"The attribute value to search for. This value must match the type specified for the attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attribute value to search for. This value must match the type specified for the attribute.","pos":[0,94],"nodes":[{"content":"The attribute value to search for.","pos":[0,34]},{"content":"This value must match the type specified for the attribute.","pos":[35,94]}]}]},{"pos":[16996,17204],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the last occurring text range should be returned instead of the first; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the last occurring text range should be returned instead of the first; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17296,17521],"content":"A text range having a matching attribute and attribute value; otherwise null (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in <ph id=\"ph1\">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).","needQuote":true,"needEscape":true,"source":"A text range having a matching attribute and attribute value; otherwise null (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])."},{"pos":[18191,18252],"content":"Returns a text range subset that contains the specified text.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a text range subset that contains the specified text.","pos":[0,61]}]},{"pos":[18265,18562],"content":"There is no differentiation between hidden and visible text. UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.      > [!NOTE] >  Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.","needQuote":false,"needEscape":true,"nodes":[{"content":"There is no differentiation between hidden and visible text.","pos":[0,60]},{"content":"UI Automation clients can use &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; to check text visibility.","pos":[61,179],"source":" UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Use &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to search the entire document.","pos":[185,294],"source":"      > [!NOTE] >  Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document."}]},{"pos":[19012,19042],"content":"The text string to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text string to search for.","pos":[0,30]}]},{"pos":[19108,19316],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the last occurring text range should be returned instead of the first; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the last occurring text range should be returned instead of the first; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19384,19545],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if case should be ignored; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if case should be ignored; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19637,19842],"content":"A text range matching the specified text; otherwise null (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in <ph id=\"ph1\">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).","needQuote":true,"needEscape":true,"source":"A text range matching the specified text; otherwise null (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])."},{"pos":[20567,20641],"content":"Returns the value of the specified attribute across the entire text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the value of the specified attribute across the entire text range.","pos":[0,74]}]},{"pos":[20653,20832],"content":"There is no differentiation between hidden and visible text. UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is no differentiation between hidden and visible text. UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.","pos":[0,179],"nodes":[{"content":"There is no differentiation between hidden and visible text.","pos":[0,60]},{"content":"UI Automation clients can use &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; to check text visibility.","pos":[61,179],"source":" UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility."}]}]},{"pos":[21306,21325],"content":"The text attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text attribute.","pos":[0,19]}]},{"pos":[21384,21989],"content":"Returns the value of the specified attribute. For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.       Returns <xref href=\"System.Windows.Automation.TextPattern.MixedAttributeValue\"></xref> if the value of the specified attribute varies over the text range.       Returns <xref href=\"System.Windows.Automation.AutomationElement.NotSupported\"></xref> if the specified attribute is not supported by the provider or the control.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns the value of the specified attribute.","pos":[0,45]},{"content":"For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.","pos":[46,268]},{"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.TextPattern.MixedAttributeValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the value of the specified attribute varies over the text range.","pos":[275,429],"source":"       Returns <xref href=\"System.Windows.Automation.TextPattern.MixedAttributeValue\"></xref> if the value of the specified attribute varies over the text range."},{"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.AutomationElement.NotSupported\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified attribute is not supported by the provider or the control.","pos":[436,597],"source":"       Returns <xref href=\"System.Windows.Automation.AutomationElement.NotSupported\"></xref> if the specified attribute is not supported by the provider or the control."}]},{"pos":[22178,22218],"content":"If the specified attribute is not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the specified attribute is not valid.","pos":[0,40]}]},{"pos":[22705,22816],"content":"Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.","pos":[0,111]}]},{"pos":[23232,23532],"content":"An array of bounding rectangles for each full or partial line of text in a text range.       An empty array for a degenerate text range.       An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.","needQuote":false,"needEscape":true,"nodes":[{"content":"An array of bounding rectangles for each full or partial line of text in a text range.       An empty array for a degenerate text range.       An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.","pos":[0,296],"nodes":[{"content":"An array of bounding rectangles for each full or partial line of text in a text range.","pos":[0,86]},{"content":"An empty array for a degenerate text range.","pos":[93,136]},{"content":"An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.","pos":[143,296]}]}]},{"pos":[24070,24149],"content":"Retrieves a collection of all embedded objects that fall within the text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves a collection of all embedded objects that fall within the text range.","pos":[0,79]}]},{"pos":[25155,25397],"content":"A collection of all child objects that fall within the range. Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.       Returns an empty collection if there are no child objects.","needQuote":false,"needEscape":true,"nodes":[{"content":"A collection of all child objects that fall within the range. Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.       Returns an empty collection if there are no child objects.","pos":[0,240],"nodes":[{"content":"A collection of all child objects that fall within the range.","pos":[0,61]},{"content":"Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.","pos":[62,175]},{"content":"Returns an empty collection if there are no child objects.","pos":[182,240]}]}]},{"pos":[25965,26081],"content":"Returns the innermost <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.AutomationElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that encloses the text range.","needQuote":true,"needEscape":true,"source":"Returns the innermost <xref href=\"System.Windows.Automation.AutomationElement\"></xref> that encloses the text range."},{"pos":[26093,26371],"content":"The enclosing <xref:System.Windows.Automation.AutomationElement>, typically the text provider that supplies the text range. However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"The enclosing <xref:System.Windows.Automation.AutomationElement>, typically the text provider that supplies the text range. However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.","pos":[0,278],"nodes":[{"content":"The enclosing &lt;xref:System.Windows.Automation.AutomationElement&gt;, typically the text provider that supplies the text range.","pos":[0,123],"source":"The enclosing <xref:System.Windows.Automation.AutomationElement>, typically the text provider that supplies the text range."},{"content":"However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.","pos":[124,278]}]}]},{"pos":[26814,26857],"content":"The innermost element enclosing the caller.","needQuote":true,"needEscape":true,"nodes":[{"content":"The innermost element enclosing the caller.","pos":[0,43]}]},{"pos":[27415,27456],"content":"Returns the plain text of the text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the plain text of the text range.","pos":[0,41]}]},{"pos":[27469,27980],"content":"GetText respects both hidden and visible text. The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.       If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.       GetText will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.","needQuote":false,"needEscape":true,"nodes":[{"content":"GetText respects both hidden and visible text.","pos":[0,46]},{"content":"The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.","pos":[47,169],"source":" The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility."},{"content":"If <ph id=\"ph1\">`maxLength`</ph> is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.","pos":[176,311],"source":"       If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range."},{"content":"GetText will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.","pos":[318,507]}]},{"pos":[28362,28439],"content":"The maximum length of the string to return. Use `-1` if no limit is required.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum length of the string to return.","pos":[0,43]},{"content":"Use <ph id=\"ph1\">`-1`</ph> if no limit is required.","pos":[44,77],"source":" Use `-1` if no limit is required."}]},{"pos":[28497,28590],"content":"The plain text of the text range, possibly truncated at the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxLength</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The plain text of the text range, possibly truncated at the specified <code>maxLength</code>."},{"pos":[28788,28830],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">maxLength</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than -1.","needQuote":true,"needEscape":true,"source":"If <code>maxLength</code> is less than -1."},{"pos":[29382,29438],"content":"Moves the text range the specified number of text units.","needQuote":true,"needEscape":true,"nodes":[{"content":"Moves the text range the specified number of text units.","pos":[0,56]}]},{"pos":[29451,33071],"content":"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the Move method to execute successfully.      1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints.      2.  The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.      3.  The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.      4.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.       ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored. If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects. This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.       ![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png \"Text ranges spanned by embedded objects.\")   Example of a text stream with embedded objects and their range spans       Move respects both hidden and visible text. The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.       Move defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.       The order, from smallest unit to largest, is listed below.      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      > [!NOTE] >  The text is not altered in any way as the text range just spans a different part of the text.","needQuote":false,"needEscape":true,"nodes":[{"content":"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the Move method to execute successfully.","pos":[0,164]},{"content":"1.","pos":[170,172]},{"content":"The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, which makes the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.","pos":[174,443],"source":"  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous."},{"content":"This step is necessary to remove ambiguity in situations where a text range spans <ph id=\"ph1\">`unit`</ph> boundaries; for example, \"{The U}RL <bpt id=\"p1\">[</bpt>http://www.microsoft.com<ept id=\"p1\">](http://www.microsoft.com)</ept> is embedded in text\" where \"{\" and \"}\" are the text range endpoints.","pos":[444,690],"source":" This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints."},{"content":"2.","pos":[696,698]},{"content":"The resulting range is moved backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to the beginning of the requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[700,857],"source":"  The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary."},{"content":"3.","pos":[863,865]},{"content":"The range is moved forward or backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; by the requested number of <ph id=\"ph1\">`unit`</ph> boundaries.","pos":[867,1020],"source":"  The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries."},{"content":"4.","pos":[1026,1028]},{"content":"The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[1030,1206],"source":"  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary."},{"content":"<bpt id=\"p1\">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/uia-textpattern-moveandexpand-examples.png \"</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p2\">\")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.","pos":[1213,1795],"source":"![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored."},{"content":"If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.","pos":[1796,2032]},{"content":"This can be accomplished by calling &lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt; to obtain an &lt;xref:System.Windows.Automation.AutomationElement&gt; for each embedded object and then calling &lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt; to obtain a text range for each element; this is done recursively until all textual content has been retrieved.","pos":[2033,2419],"source":" This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved."},{"content":"<bpt id=\"p1\">![</bpt>Text ranges spanned by embedded objects.<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/uia-textpattern-embeddedobjecttextranges.png \"</bpt>Text ranges spanned by embedded objects.<ept id=\"p2\">\")</ept>","pos":[2426,2570],"source":"![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png \"Text ranges spanned by embedded objects.\")"},{"content":"Example of a text stream with embedded objects and their range spans       Move respects both hidden and visible text.","pos":[2573,2691]},{"content":"The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.","pos":[2692,2814],"source":" The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility."},{"content":"Move defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.","pos":[2821,3002],"source":"       Move defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control."},{"content":"The order, from smallest unit to largest, is listed below.","pos":[3009,3067]},{"content":"-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      &gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The text is not altered in any way as the text range just spans a different part of the text.","pos":[3073,3571],"source":"      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      > [!NOTE] >  The text is not altered in any way as the text range just spans a different part of the text."}]},{"pos":[34043,34066],"content":"The text unit boundary.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text unit boundary.","pos":[0,23]}]},{"pos":[34127,34276],"content":"The number of text units to move. A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of text units to move. A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.","pos":[0,149],"nodes":[{"content":"The number of text units to move.","pos":[0,33]},{"content":"A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.","pos":[34,149]}]}]},{"pos":[34333,34557],"content":"The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <xref:System.Windows.Automation.TextPattern.DocumentRange*> endpoints.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <xref:System.Windows.Automation.TextPattern.DocumentRange*> endpoints.","pos":[0,224],"nodes":[{"content":"The number of units actually moved.","pos":[0,35]},{"content":"This can be less than the number requested if either of the new text range endpoints is greater than or less than the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange*&gt; endpoints.","pos":[36,224],"source":" This can be less than the number requested if either of the new text range endpoints is greater than or less than the <xref:System.Windows.Automation.TextPattern.DocumentRange*> endpoints."}]}]},{"pos":[35637,35721],"content":"Moves one endpoint of a text range to the specified endpoint of a second text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Moves one endpoint of a text range to the specified endpoint of a second text range.","pos":[0,84]}]},{"pos":[35733,36103],"content":"If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>).","needQuote":true,"needEscape":true,"nodes":[{"content":"If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; is always less than or equal to &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;).","pos":[0,370],"source":"If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>)."}]},{"pos":[36720,36741],"content":"The endpoint to move.","needQuote":true,"needEscape":true,"nodes":[{"content":"The endpoint to move.","pos":[0,21]}]},{"pos":[36843,36885],"content":"Another range from the same text provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Another range from the same text provider.","pos":[0,42]}]},{"pos":[36998,37029],"content":"An endpoint on the other range.","needQuote":true,"needEscape":true,"nodes":[{"content":"An endpoint on the other range.","pos":[0,31]}]},{"pos":[37936,38085],"content":"Moves one endpoint of the text range the specified number of <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>s within the document range.","needQuote":true,"needEscape":true,"source":"Moves one endpoint of the text range the specified number of <xref href=\"System.Windows.Automation.Text.TextUnit\"></xref>s within the document range."},{"pos":[38098,41335],"content":"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.      1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints.      2.  The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.      3.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.       ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored. If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects. This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.       ![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png \"Text ranges spanned by embedded objects.\")   Example of a text stream with embedded objects and their range spans       MoveEndpointByUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.       The order, from smallest unit to largest, is listed below.      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>","needQuote":false,"needEscape":true,"nodes":[{"content":"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the &lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt; method to execute successfully.","pos":[0,222],"source":"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully."},{"content":"1.","pos":[228,230]},{"content":"The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, which makes the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.","pos":[232,501],"source":"  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous."},{"content":"This step is necessary to remove ambiguity in situations where a text range spans <ph id=\"ph1\">`unit`</ph> boundaries; for example, \"{The U}RL <bpt id=\"p1\">[</bpt>http://www.microsoft.com<ept id=\"p1\">](http://www.microsoft.com)</ept> is embedded in text\" where \"{\" and \"}\" are the text range endpoints.","pos":[502,748],"source":" This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\" where \"{\" and \"}\" are the text range endpoints."},{"content":"2.","pos":[754,756]},{"content":"The resulting range is moved backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to the beginning of the requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[758,915],"source":"  The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary."},{"content":"3.","pos":[921,923]},{"content":"The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id=\"ph1\">`unit`</ph> boundary.","pos":[925,1101],"source":"  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary."},{"content":"<bpt id=\"p1\">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/uia-textpattern-moveandexpand-examples.png \"</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id=\"p2\">\")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.","pos":[1108,1690],"source":"![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \"Range adjustments by Move & ExpandToEnclosingUnit\")   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored."},{"content":"If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.","pos":[1691,1927]},{"content":"This can be accomplished by calling &lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt; to obtain an &lt;xref:System.Windows.Automation.AutomationElement&gt; for each embedded object and then calling &lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt; to obtain a text range for each element; this is done recursively until all textual content has been retrieved.","pos":[1928,2314],"source":" This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved."},{"content":"<bpt id=\"p1\">![</bpt>Text ranges spanned by embedded objects.<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/uia-textpattern-embeddedobjecttextranges.png \"</bpt>Text ranges spanned by embedded objects.<ept id=\"p2\">\")</ept>","pos":[2321,2465],"source":"![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png \"Text ranges spanned by embedded objects.\")"},{"content":"Example of a text stream with embedded objects and their range spans       MoveEndpointByUnit defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.","pos":[2468,2738],"source":"   Example of a text stream with embedded objects and their range spans       MoveEndpointByUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control."},{"content":"The order, from smallest unit to largest, is listed below.","pos":[2745,2803]},{"content":"-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;","pos":[2809,3195],"source":"      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>"}]},{"pos":[41875,41896],"content":"The endpoint to move.","needQuote":true,"needEscape":true,"nodes":[{"content":"The endpoint to move.","pos":[0,21]}]},{"pos":[41983,42011],"content":"The textual unit for moving.","needQuote":true,"needEscape":true,"nodes":[{"content":"The textual unit for moving.","pos":[0,28]}]},{"pos":[42072,42206],"content":"The number of units to move. A positive count moves the endpoint forward. A negative count moves backward. A count of 0 has no effect.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of units to move. A positive count moves the endpoint forward. A negative count moves backward. A count of 0 has no effect.","pos":[0,134],"nodes":[{"content":"The number of units to move.","pos":[0,28]},{"content":"A positive count moves the endpoint forward.","pos":[29,73]},{"content":"A negative count moves backward.","pos":[74,106]},{"content":"A count of 0 has no effect.","pos":[107,134]}]}]},{"pos":[42263,42413],"content":"The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.","pos":[0,150]}]},{"pos":[42987,43347],"content":"Removes a highlighted section of text, corresponding to the calling text range <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.","needQuote":true,"needEscape":true,"source":"Removes a highlighted section of text, corresponding to the calling text range <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> and <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections."},{"pos":[43360,43505],"content":"The text insertion point will move to the area of the removed highlight.       Providing a degenerate text range will move the insertion point.","needQuote":false,"needEscape":true,"nodes":[{"content":"The text insertion point will move to the area of the removed highlight.       Providing a degenerate text range will move the insertion point.","pos":[0,143],"nodes":[{"content":"The text insertion point will move to the area of the removed highlight.","pos":[0,72]},{"content":"Providing a degenerate text range will move the insertion point.","pos":[79,143]}]}]},{"pos":[43790,44028],"content":"If text provider does not support multiple, disjoint selections (for example, &lt;xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt; must have a value of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"If text provider does not support multiple, disjoint selections (for example, <xref:System.Windows.Automation.TextPattern.SupportedTextSelection*> must have a value of <xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"></xref>)."},{"pos":[44533,44626],"content":"Causes the text control to scroll vertically until the text range is visible in the viewport.","needQuote":true,"needEscape":true,"nodes":[{"content":"Causes the text control to scroll vertically until the text range is visible in the viewport.","pos":[0,93]}]},{"pos":[44638,44927],"content":"ScrollIntoView respects both hidden and visible text. The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility. If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.","needQuote":true,"needEscape":true,"nodes":[{"content":"ScrollIntoView respects both hidden and visible text. The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility. If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.","pos":[0,289],"nodes":[{"content":"ScrollIntoView respects both hidden and visible text.","pos":[0,53]},{"content":"The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.","pos":[54,176],"source":" The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility."},{"content":"If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.","pos":[177,289]}]}]},{"pos":[45318,45592],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the text control should be scrolled so the text range is flush with the top of the viewport; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if it should be flush with the bottom of the viewport.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the text control should be scrolled so the text range is flush with the top of the viewport; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it should be flush with the bottom of the viewport."},{"pos":[45793,45838],"content":"If scrolling is not supported by the control.","needQuote":true,"needEscape":true,"nodes":[{"content":"If scrolling is not supported by the control.","pos":[0,45]}]},{"pos":[46250,46486],"content":"Highlights text in the text control corresponding to the text range <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> endpoints.","needQuote":true,"needEscape":true,"source":"Highlights text in the text control corresponding to the text range <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> and <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoints."},{"pos":[46498,46670],"content":"If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint of the text range.","needQuote":true,"needEscape":true,"nodes":[{"content":"If a degenerate text range is provided, the text insertion point will move to the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint of the text range.","pos":[0,172],"source":"If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint of the text range."}]},{"pos":[47166,47230],"content":"Occurs when text selection is not supported by the text control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when text selection is not supported by the text control.","pos":[0,64]}]},{"pos":[47663,47762],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.TextPattern\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with the text range.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Windows.Automation.TextPattern\"></xref> associated with the text range."},{"pos":[48185,48203],"content":"The text provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text provider.","pos":[0,18]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Automation.Text.TextPatternRange\n  id: TextPatternRange\n  children:\n  - System.Windows.Automation.Text.TextPatternRange.AddToSelection\n  - System.Windows.Automation.Text.TextPatternRange.Clone\n  - System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)\n  - System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  - System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)\n  - System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)\n  - System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)\n  - System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)\n  - System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles\n  - System.Windows.Automation.Text.TextPatternRange.GetChildren\n  - System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement\n  - System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)\n  - System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)\n  - System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  - System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)\n  - System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection\n  - System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)\n  - System.Windows.Automation.Text.TextPatternRange.Select\n  - System.Windows.Automation.Text.TextPatternRange.TextPattern\n  langs:\n  - csharp\n  name: TextPatternRange\n  nameWithType: TextPatternRange\n  fullName: System.Windows.Automation.Text.TextPatternRange\n  type: Class\n  summary: Represents a span of continuous text in a <xref href=\"System.Windows.Automation.TextPattern\"></xref> container.\n  remarks: \"A TextPatternRange can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.  \\n  \\n A TextPatternRange will become invalid if one of the following occurs: the text in the <xref:System.Windows.Automation.TextPattern> container changes because of some user activity, or the <xref:System.Windows.Automation.ValuePattern.SetValue%2A> method of <xref:System.Windows.Automation.ValuePattern> is used to programmatically change the value of the text in the <xref:System.Windows.Automation.TextPattern> container.\"\n  syntax:\n    content: public class TextPatternRange\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.AddToSelection\n  id: AddToSelection\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: AddToSelection()\n  nameWithType: TextPatternRange.AddToSelection()\n  fullName: System.Windows.Automation.Text.TextPatternRange.AddToSelection()\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.\n  remarks: \"The text insertion point moves to the area of the new selection.  \\n  \\n Providing a degenerate text range moves the insertion point.\"\n  syntax:\n    content: public void AddToSelection ();\n    parameters: []\n  overload: System.Windows.Automation.Text.TextPatternRange.AddToSelection*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: If text provider does not support multiple, disjoint selections (for example, <xref:System.Windows.Automation.TextPattern.SupportedTextSelection*> must have a value of <xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"></xref>).\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.Clone\n  id: Clone\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: TextPatternRange.Clone()\n  fullName: System.Windows.Automation.Text.TextPatternRange.Clone()\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Retrieves a new <xref href=\"System.Windows.Automation.Text.TextPatternRange\"></xref> identical to the original <xref href=\"System.Windows.Automation.Text.TextPatternRange\"></xref> and inheriting all properties of the original.\n  remarks: \"Alternatively, create a new <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> from the <xref:System.Windows.Automation.TextPattern> and move the two endpoints to correspond with the endpoints of the original text range.  \\n  \\n The new range can be manipulated independently from the original.\"\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1060](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1060)]  \\n  \\n [!code-vb[UIATextPattern_snip#2060](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2060)]\"\n  syntax:\n    content: public System.Windows.Automation.Text.TextPatternRange Clone ();\n    parameters: []\n    return:\n      type: System.Windows.Automation.Text.TextPatternRange\n      description: The new text range. A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]) is never returned.\n  overload: System.Windows.Automation.Text.TextPatternRange.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)\n  id: Compare(System.Windows.Automation.Text.TextPatternRange)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: Compare(TextPatternRange)\n  nameWithType: TextPatternRange.Compare(TextPatternRange)\n  fullName: System.Windows.Automation.Text.TextPatternRange.Compare(TextPatternRange)\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Returns a <xref:System.Boolean> value indicating whether the span (the <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint to the <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint) of a text range is the same as another text range.\n  remarks: ''\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1061](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1061)]  \\n  \\n [!code-vb[UIATextPattern_snip#2061](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2061)]\"\n  syntax:\n    content: public bool Compare (System.Windows.Automation.Text.TextPatternRange range);\n    parameters:\n    - id: range\n      type: System.Windows.Automation.Text.TextPatternRange\n      description: A text range to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the span of both text ranges is identical; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Automation.Text.TextPatternRange.Compare*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: If the range being compared does not come from the same text provider.\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  id: CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n  nameWithType: TextPatternRange.CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n  fullName: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Returns an <xref:System.Int32> indicating whether two text ranges have identical endpoints.\n  remarks: By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1062](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1062)]  \\n  \\n [!code-vb[UIATextPattern_snip#2062](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2062)]\"\n  syntax:\n    content: public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);\n    parameters:\n    - id: endpoint\n      type: System.Windows.Automation.Text.TextPatternRangeEndpoint\n      description: The <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> or <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint of the caller.\n    - id: targetRange\n      type: System.Windows.Automation.Text.TextPatternRange\n      description: The target range for comparison.\n    - id: targetEndpoint\n      type: System.Windows.Automation.Text.TextPatternRangeEndpoint\n      description: The <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> or <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoint of the target.\n    return:\n      type: System.Int32\n      description: \"Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.  \\n  \\n Returns zero if the caller's endpoint is at the same location as the target endpoint.  \\n  \\n Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.\"\n  overload: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: If range is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]).\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: If range is from another container.\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)\n  id: ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: ExpandToEnclosingUnit(TextUnit)\n  nameWithType: TextPatternRange.ExpandToEnclosingUnit(TextUnit)\n  fullName: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(TextUnit)\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Expands the text range to the specified <xref href=\"System.Windows.Automation.Text.TextUnit\"></xref>.\n  remarks: \"If the range is already an exact quantity of the specified units then it remains unchanged.  \\n  \\n In order for the ExpandToEnclosingUnit method to execute successfully, a sequence of actions is performed behind the scenes.  \\n  \\n1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, making the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \\\"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\\\" where \\\"{\\\" and \\\"}\\\" are the text range endpoints.  \\n  \\n2.  The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.  \\n  \\n3.  The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.  \\n  \\n4.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.  \\n  \\n ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \\\"Range adjustments by Move & ExpandToEnclosingUnit\\\")  \\nExamples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()  \\n  \\n> [!NOTE]\\n>  These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.  \\n  \\n ExpandToEnclosingUnit respects both hidden and visible text. The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.  \\n  \\n ExpandToEnclosingUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.  \\n  \\n The order, from smallest unit to largest, is listed below.  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>\"\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1063](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1063)]  \\n  \\n [!code-vb[UIATextPattern_snip#2063](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2063)]\"\n  syntax:\n    content: public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);\n    parameters:\n    - id: unit\n      type: System.Windows.Automation.Text.TextUnit\n      description: The textual unit.\n  overload: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)\n  id: FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: FindAttribute(AutomationTextAttribute,Object,Boolean)\n  nameWithType: TextPatternRange.FindAttribute(AutomationTextAttribute,Object,Boolean)\n  fullName: System.Windows.Automation.Text.TextPatternRange.FindAttribute(AutomationTextAttribute,Object,Boolean)\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Returns a text range subset that has the specified attribute value.\n  remarks: \"There is no differentiation between hidden and visible text. UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.  \\n  \\n> [!NOTE]\\n>  Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.\"\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1064](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1064)]  \\n  \\n [!code-vb[UIATextPattern_snip#2064](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2064)]\"\n  syntax:\n    content: public System.Windows.Automation.Text.TextPatternRange FindAttribute (System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward);\n    parameters:\n    - id: attribute\n      type: System.Windows.Automation.AutomationTextAttribute\n      description: The attribute to search for.\n    - id: value\n      type: System.Object\n      description: The attribute value to search for. This value must match the type specified for the attribute.\n    - id: backward\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the last occurring text range should be returned instead of the first; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Windows.Automation.Text.TextPatternRange\n      description: A text range having a matching attribute and attribute value; otherwise null (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]).\n  overload: System.Windows.Automation.Text.TextPatternRange.FindAttribute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)\n  id: FindText(System.String,System.Boolean,System.Boolean)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: FindText(String,Boolean,Boolean)\n  nameWithType: TextPatternRange.FindText(String,Boolean,Boolean)\n  fullName: System.Windows.Automation.Text.TextPatternRange.FindText(String,Boolean,Boolean)\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Returns a text range subset that contains the specified text.\n  remarks: \"There is no differentiation between hidden and visible text. UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.  \\n  \\n> [!NOTE]\\n>  Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.\"\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1065](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1065)]  \\n  \\n [!code-vb[UIATextPattern_snip#2065](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2065)]\"\n  syntax:\n    content: public System.Windows.Automation.Text.TextPatternRange FindText (string text, bool backward, bool ignoreCase);\n    parameters:\n    - id: text\n      type: System.String\n      description: The text string to search for.\n    - id: backward\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the last occurring text range should be returned instead of the first; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: ignoreCase\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if case should be ignored; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Windows.Automation.Text.TextPatternRange\n      description: A text range matching the specified text; otherwise null (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]).\n  overload: System.Windows.Automation.Text.TextPatternRange.FindText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)\n  id: GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: GetAttributeValue(AutomationTextAttribute)\n  nameWithType: TextPatternRange.GetAttributeValue(AutomationTextAttribute)\n  fullName: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(AutomationTextAttribute)\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Returns the value of the specified attribute across the entire text range.\n  remarks: There is no differentiation between hidden and visible text. UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1066](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1066)]  \\n  \\n [!code-vb[UIATextPattern_snip#2066](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2066)]\"\n  syntax:\n    content: public object GetAttributeValue (System.Windows.Automation.AutomationTextAttribute attribute);\n    parameters:\n    - id: attribute\n      type: System.Windows.Automation.AutomationTextAttribute\n      description: The text attribute.\n    return:\n      type: System.Object\n      description: \"Returns the value of the specified attribute. For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.  \\n  \\n Returns <xref href=\\\"System.Windows.Automation.TextPattern.MixedAttributeValue\\\"></xref> if the value of the specified attribute varies over the text range.  \\n  \\n Returns <xref href=\\\"System.Windows.Automation.AutomationElement.NotSupported\\\"></xref> if the specified attribute is not supported by the provider or the control.\"\n  overload: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: If the specified attribute is not valid.\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles\n  id: GetBoundingRectangles\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: GetBoundingRectangles()\n  nameWithType: TextPatternRange.GetBoundingRectangles()\n  fullName: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles()\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.\n  remarks: ''\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1067](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1067)]  \\n  \\n [!code-vb[UIATextPattern_snip#2067](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2067)]\"\n  syntax:\n    content: public System.Windows.Rect[] GetBoundingRectangles ();\n    parameters: []\n    return:\n      type: System.Windows.Rect[]\n      description: \"An array of bounding rectangles for each full or partial line of text in a text range.  \\n  \\n An empty array for a degenerate text range.  \\n  \\n An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.\"\n  overload: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.GetChildren\n  id: GetChildren\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: GetChildren()\n  nameWithType: TextPatternRange.GetChildren()\n  fullName: System.Windows.Automation.Text.TextPatternRange.GetChildren()\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Retrieves a collection of all embedded objects that fall within the text range.\n  remarks: ''\n  example:\n  - \"[!code-vb[UIATextPattern_snip#StartTarget](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#starttarget)]\\n [!code-cs[UIATextPattern_snip#StartTarget](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#starttarget)]  \\n[!code-vb[UIATextPattern_snip#GetTextElement](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#gettextelement)]\\n[!code-cs[UIATextPattern_snip#GetTextElement](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#gettextelement)]  \\n[!code-vb[UIATextPattern_snip#GetEmbeddedObjects](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#getembeddedobjects)]\\n[!code-cs[UIATextPattern_snip#GetEmbeddedObjects](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#getembeddedobjects)]\"\n  syntax:\n    content: public System.Windows.Automation.AutomationElement[] GetChildren ();\n    parameters: []\n    return:\n      type: System.Windows.Automation.AutomationElement[]\n      description: \"A collection of all child objects that fall within the range. Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.  \\n  \\n Returns an empty collection if there are no child objects.\"\n  overload: System.Windows.Automation.Text.TextPatternRange.GetChildren*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement\n  id: GetEnclosingElement\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: GetEnclosingElement()\n  nameWithType: TextPatternRange.GetEnclosingElement()\n  fullName: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement()\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Returns the innermost <xref href=\"System.Windows.Automation.AutomationElement\"></xref> that encloses the text range.\n  remarks: The enclosing <xref:System.Windows.Automation.AutomationElement>, typically the text provider that supplies the text range. However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1069](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1069)]  \\n  \\n [!code-vb[UIATextPattern_snip#2069](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2069)]\"\n  syntax:\n    content: public System.Windows.Automation.AutomationElement GetEnclosingElement ();\n    parameters: []\n    return:\n      type: System.Windows.Automation.AutomationElement\n      description: The innermost element enclosing the caller.\n  overload: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)\n  id: GetText(System.Int32)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: GetText(Int32)\n  nameWithType: TextPatternRange.GetText(Int32)\n  fullName: System.Windows.Automation.Text.TextPatternRange.GetText(Int32)\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Returns the plain text of the text range.\n  remarks: \"GetText respects both hidden and visible text. The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.  \\n  \\n If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.  \\n  \\n GetText will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.\"\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1070](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1070)]  \\n  \\n [!code-vb[UIATextPattern_snip#2070](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2070)]\"\n  syntax:\n    content: public string GetText (int maxLength);\n    parameters:\n    - id: maxLength\n      type: System.Int32\n      description: The maximum length of the string to return. Use `-1` if no limit is required.\n    return:\n      type: System.String\n      description: The plain text of the text range, possibly truncated at the specified <code>maxLength</code>.\n  overload: System.Windows.Automation.Text.TextPatternRange.GetText*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: If <code>maxLength</code> is less than -1.\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)\n  id: Move(System.Windows.Automation.Text.TextUnit,System.Int32)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: Move(TextUnit,Int32)\n  nameWithType: TextPatternRange.Move(TextUnit,Int32)\n  fullName: System.Windows.Automation.Text.TextPatternRange.Move(TextUnit,Int32)\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Moves the text range the specified number of text units.\n  remarks: \"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the Move method to execute successfully.  \\n  \\n1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \\\"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\\\" where \\\"{\\\" and \\\"}\\\" are the text range endpoints.  \\n  \\n2.  The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.  \\n  \\n3.  The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.  \\n  \\n4.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.  \\n  \\n ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \\\"Range adjustments by Move & ExpandToEnclosingUnit\\\")  \\nExamples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()  \\n  \\n The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored. If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects. This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.  \\n  \\n ![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png \\\"Text ranges spanned by embedded objects.\\\")  \\nExample of a text stream with embedded objects and their range spans  \\n  \\n Move respects both hidden and visible text. The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.  \\n  \\n Move defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.  \\n  \\n The order, from smallest unit to largest, is listed below.  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n> [!NOTE]\\n>  The text is not altered in any way as the text range just spans a different part of the text.\"\n  example:\n  - \"[!code-vb[UIATextPattern_snip#StartTarget](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#starttarget)]\\n [!code-cs[UIATextPattern_snip#StartTarget](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#starttarget)]  \\n[!code-vb[UIATextPattern_snip#GetTextElement](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#gettextelement)]\\n[!code-cs[UIATextPattern_snip#GetTextElement](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#gettextelement)]  \\n[!code-vb[UIATextPattern_snip#MoveSelection](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#moveselection)]\\n[!code-cs[UIATextPattern_snip#MoveSelection](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#moveselection)]\"\n  syntax:\n    content: public int Move (System.Windows.Automation.Text.TextUnit unit, int count);\n    parameters:\n    - id: unit\n      type: System.Windows.Automation.Text.TextUnit\n      description: The text unit boundary.\n    - id: count\n      type: System.Int32\n      description: The number of text units to move. A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.\n    return:\n      type: System.Int32\n      description: The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <xref:System.Windows.Automation.TextPattern.DocumentRange*> endpoints.\n  overload: System.Windows.Automation.Text.TextPatternRange.Move*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  id: MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n  nameWithType: TextPatternRange.MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n  fullName: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Moves one endpoint of a text range to the specified endpoint of a second text range.\n  remarks: If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>).\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1072](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1072)]  \\n  \\n [!code-vb[UIATextPattern_snip#2072](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2072)]\"\n  syntax:\n    content: public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);\n    parameters:\n    - id: endpoint\n      type: System.Windows.Automation.Text.TextPatternRangeEndpoint\n      description: The endpoint to move.\n    - id: targetRange\n      type: System.Windows.Automation.Text.TextPatternRange\n      description: Another range from the same text provider.\n    - id: targetEndpoint\n      type: System.Windows.Automation.Text.TextPatternRangeEndpoint\n      description: An endpoint on the other range.\n  overload: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)\n  id: MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n  nameWithType: TextPatternRange.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n  fullName: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Moves one endpoint of the text range the specified number of <xref href=\"System.Windows.Automation.Text.TextUnit\"></xref>s within the document range.\n  remarks: \"When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.  \\n  \\n1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, \\\"{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text\\\" where \\\"{\\\" and \\\"}\\\" are the text range endpoints.  \\n  \\n2.  The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.  \\n  \\n3.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.  \\n  \\n ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png \\\"Range adjustments by Move & ExpandToEnclosingUnit\\\")  \\nExamples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()  \\n  \\n The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored. If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects. This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.  \\n  \\n ![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png \\\"Text ranges spanned by embedded objects.\\\")  \\nExample of a text stream with embedded objects and their range spans  \\n  \\n MoveEndpointByUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.  \\n  \\n The order, from smallest unit to largest, is listed below.  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>  \\n  \\n-   <xref:System.Windows.Automation.Text.TextUnit>\"\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1073](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1073)]  \\n  \\n [!code-vb[UIATextPattern_snip#2073](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2073)]\"\n  syntax:\n    content: public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);\n    parameters:\n    - id: endpoint\n      type: System.Windows.Automation.Text.TextPatternRangeEndpoint\n      description: The endpoint to move.\n    - id: unit\n      type: System.Windows.Automation.Text.TextUnit\n      description: The textual unit for moving.\n    - id: count\n      type: System.Int32\n      description: The number of units to move. A positive count moves the endpoint forward. A negative count moves backward. A count of 0 has no effect.\n    return:\n      type: System.Int32\n      description: The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.\n  overload: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection\n  id: RemoveFromSelection\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: RemoveFromSelection()\n  nameWithType: TextPatternRange.RemoveFromSelection()\n  fullName: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection()\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Removes a highlighted section of text, corresponding to the calling text range <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> and <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.\n  remarks: \"The text insertion point will move to the area of the removed highlight.  \\n  \\n Providing a degenerate text range will move the insertion point.\"\n  syntax:\n    content: public void RemoveFromSelection ();\n    parameters: []\n  overload: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: If text provider does not support multiple, disjoint selections (for example, <xref:System.Windows.Automation.TextPattern.SupportedTextSelection*> must have a value of <xref uid=\"langword_csharp_Multiple\" name=\"Multiple\" href=\"\"></xref>).\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)\n  id: ScrollIntoView(System.Boolean)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: ScrollIntoView(Boolean)\n  nameWithType: TextPatternRange.ScrollIntoView(Boolean)\n  fullName: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(Boolean)\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Causes the text control to scroll vertically until the text range is visible in the viewport.\n  remarks: ScrollIntoView respects both hidden and visible text. The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility. If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1074](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1074)]  \\n  \\n [!code-vb[UIATextPattern_snip#2074](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2074)]\"\n  syntax:\n    content: public void ScrollIntoView (bool alignToTop);\n    parameters:\n    - id: alignToTop\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the text control should be scrolled so the text range is flush with the top of the viewport; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it should be flush with the bottom of the viewport.\n  overload: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: If scrolling is not supported by the control.\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.Select\n  id: Select\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: Select()\n  nameWithType: TextPatternRange.Select()\n  fullName: System.Windows.Automation.Text.TextPatternRange.Select()\n  type: Method\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Highlights text in the text control corresponding to the text range <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> and <xref href=\"System.Windows.Automation.Text.TextPatternRangeEndpoint\"></xref> endpoints.\n  remarks: If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint of the text range.\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1075](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1075)]  \\n  \\n [!code-vb[UIATextPattern_snip#2075](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2075)]\"\n  syntax:\n    content: public void Select ();\n    parameters: []\n  overload: System.Windows.Automation.Text.TextPatternRange.Select*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Occurs when text selection is not supported by the text control.\n  platform:\n  - net462\n- uid: System.Windows.Automation.Text.TextPatternRange.TextPattern\n  id: TextPattern\n  parent: System.Windows.Automation.Text.TextPatternRange\n  langs:\n  - csharp\n  name: TextPattern\n  nameWithType: TextPatternRange.TextPattern\n  fullName: System.Windows.Automation.Text.TextPatternRange.TextPattern\n  type: Property\n  assemblies:\n  - UIAutomationClient\n  namespace: System.Windows.Automation.Text\n  summary: Gets the <xref href=\"System.Windows.Automation.TextPattern\"></xref> associated with the text range.\n  remarks: ''\n  example:\n  - \"[!code-cs[UIATextPattern_snip#1076](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1076)]  \\n  \\n [!code-vb[UIATextPattern_snip#2076](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2076)]\"\n  syntax:\n    content: public System.Windows.Automation.TextPattern TextPattern { get; }\n    return:\n      type: System.Windows.Automation.TextPattern\n      description: The text provider.\n  overload: System.Windows.Automation.Text.TextPatternRange.TextPattern*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Windows.Automation.Text.TextPatternRange.AddToSelection\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: AddToSelection()\n  nameWithType: TextPatternRange.AddToSelection()\n  fullName: System.Windows.Automation.Text.TextPatternRange.AddToSelection()\n- uid: System.Windows.Automation.Text.TextPatternRange.Clone\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: Clone()\n  nameWithType: TextPatternRange.Clone()\n  fullName: System.Windows.Automation.Text.TextPatternRange.Clone()\n- uid: System.Windows.Automation.Text.TextPatternRange\n  parent: System.Windows.Automation.Text\n  isExternal: false\n  name: TextPatternRange\n  nameWithType: TextPatternRange\n  fullName: System.Windows.Automation.Text.TextPatternRange\n- uid: System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: Compare(TextPatternRange)\n  nameWithType: TextPatternRange.Compare(TextPatternRange)\n  fullName: System.Windows.Automation.Text.TextPatternRange.Compare(TextPatternRange)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n  nameWithType: TextPatternRange.CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n  fullName: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Automation.Text.TextPatternRangeEndpoint\n  parent: System.Windows.Automation.Text\n  isExternal: false\n  name: TextPatternRangeEndpoint\n  nameWithType: TextPatternRangeEndpoint\n  fullName: System.Windows.Automation.Text.TextPatternRangeEndpoint\n- uid: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: ExpandToEnclosingUnit(TextUnit)\n  nameWithType: TextPatternRange.ExpandToEnclosingUnit(TextUnit)\n  fullName: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(TextUnit)\n- uid: System.Windows.Automation.Text.TextUnit\n  parent: System.Windows.Automation.Text\n  isExternal: false\n  name: TextUnit\n  nameWithType: TextUnit\n  fullName: System.Windows.Automation.Text.TextUnit\n- uid: System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: FindAttribute(AutomationTextAttribute,Object,Boolean)\n  nameWithType: TextPatternRange.FindAttribute(AutomationTextAttribute,Object,Boolean)\n  fullName: System.Windows.Automation.Text.TextPatternRange.FindAttribute(AutomationTextAttribute,Object,Boolean)\n- uid: System.Windows.Automation.AutomationTextAttribute\n  parent: System.Windows.Automation\n  isExternal: false\n  name: AutomationTextAttribute\n  nameWithType: AutomationTextAttribute\n  fullName: System.Windows.Automation.AutomationTextAttribute\n- uid: System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: FindText(String,Boolean,Boolean)\n  nameWithType: TextPatternRange.FindText(String,Boolean,Boolean)\n  fullName: System.Windows.Automation.Text.TextPatternRange.FindText(String,Boolean,Boolean)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: GetAttributeValue(AutomationTextAttribute)\n  nameWithType: TextPatternRange.GetAttributeValue(AutomationTextAttribute)\n  fullName: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(AutomationTextAttribute)\n- uid: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: GetBoundingRectangles()\n  nameWithType: TextPatternRange.GetBoundingRectangles()\n  fullName: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles()\n- uid: System.Windows.Rect[]\n  parent: System.Windows\n  isExternal: false\n  name: Rect\n  nameWithType: Rect\n  fullName: System.Windows.Rect[]\n  spec.csharp:\n  - uid: System.Windows.Rect\n    name: Rect\n    nameWithType: Rect\n    fullName: Rect[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Automation.Text.TextPatternRange.GetChildren\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: GetChildren()\n  nameWithType: TextPatternRange.GetChildren()\n  fullName: System.Windows.Automation.Text.TextPatternRange.GetChildren()\n- uid: System.Windows.Automation.AutomationElement[]\n  parent: System.Windows.Automation\n  isExternal: false\n  name: AutomationElement\n  nameWithType: AutomationElement\n  fullName: System.Windows.Automation.AutomationElement[]\n  spec.csharp:\n  - uid: System.Windows.Automation.AutomationElement\n    name: AutomationElement\n    nameWithType: AutomationElement\n    fullName: AutomationElement[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: GetEnclosingElement()\n  nameWithType: TextPatternRange.GetEnclosingElement()\n  fullName: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement()\n- uid: System.Windows.Automation.AutomationElement\n  parent: System.Windows.Automation\n  isExternal: false\n  name: AutomationElement\n  nameWithType: AutomationElement\n  fullName: System.Windows.Automation.AutomationElement\n- uid: System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: GetText(Int32)\n  nameWithType: TextPatternRange.GetText(Int32)\n  fullName: System.Windows.Automation.Text.TextPatternRange.GetText(Int32)\n- uid: System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: Move(TextUnit,Int32)\n  nameWithType: TextPatternRange.Move(TextUnit,Int32)\n  fullName: System.Windows.Automation.Text.TextPatternRange.Move(TextUnit,Int32)\n- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n  nameWithType: TextPatternRange.MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n  fullName: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)\n- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n  nameWithType: TextPatternRange.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n  fullName: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)\n- uid: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: RemoveFromSelection()\n  nameWithType: TextPatternRange.RemoveFromSelection()\n  fullName: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection()\n- uid: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: ScrollIntoView(Boolean)\n  nameWithType: TextPatternRange.ScrollIntoView(Boolean)\n  fullName: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(Boolean)\n- uid: System.Windows.Automation.Text.TextPatternRange.Select\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: Select()\n  nameWithType: TextPatternRange.Select()\n  fullName: System.Windows.Automation.Text.TextPatternRange.Select()\n- uid: System.Windows.Automation.Text.TextPatternRange.TextPattern\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: TextPattern\n  nameWithType: TextPatternRange.TextPattern\n  fullName: System.Windows.Automation.Text.TextPatternRange.TextPattern\n- uid: System.Windows.Automation.TextPattern\n  parent: System.Windows.Automation\n  isExternal: false\n  name: TextPattern\n  nameWithType: TextPattern\n  fullName: System.Windows.Automation.TextPattern\n- uid: System.Windows.Automation.Text.TextPatternRange.AddToSelection*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: AddToSelection\n  nameWithType: TextPatternRange.AddToSelection\n- uid: System.Windows.Automation.Text.TextPatternRange.Clone*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: Clone\n  nameWithType: TextPatternRange.Clone\n- uid: System.Windows.Automation.Text.TextPatternRange.Compare*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: Compare\n  nameWithType: TextPatternRange.Compare\n- uid: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: CompareEndpoints\n  nameWithType: TextPatternRange.CompareEndpoints\n- uid: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: ExpandToEnclosingUnit\n  nameWithType: TextPatternRange.ExpandToEnclosingUnit\n- uid: System.Windows.Automation.Text.TextPatternRange.FindAttribute*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: FindAttribute\n  nameWithType: TextPatternRange.FindAttribute\n- uid: System.Windows.Automation.Text.TextPatternRange.FindText*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: FindText\n  nameWithType: TextPatternRange.FindText\n- uid: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: GetAttributeValue\n  nameWithType: TextPatternRange.GetAttributeValue\n- uid: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: GetBoundingRectangles\n  nameWithType: TextPatternRange.GetBoundingRectangles\n- uid: System.Windows.Automation.Text.TextPatternRange.GetChildren*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: GetChildren\n  nameWithType: TextPatternRange.GetChildren\n- uid: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: GetEnclosingElement\n  nameWithType: TextPatternRange.GetEnclosingElement\n- uid: System.Windows.Automation.Text.TextPatternRange.GetText*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: GetText\n  nameWithType: TextPatternRange.GetText\n- uid: System.Windows.Automation.Text.TextPatternRange.Move*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: Move\n  nameWithType: TextPatternRange.Move\n- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: MoveEndpointByRange\n  nameWithType: TextPatternRange.MoveEndpointByRange\n- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: MoveEndpointByUnit\n  nameWithType: TextPatternRange.MoveEndpointByUnit\n- uid: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: RemoveFromSelection\n  nameWithType: TextPatternRange.RemoveFromSelection\n- uid: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: ScrollIntoView\n  nameWithType: TextPatternRange.ScrollIntoView\n- uid: System.Windows.Automation.Text.TextPatternRange.Select*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: Select\n  nameWithType: TextPatternRange.Select\n- uid: System.Windows.Automation.Text.TextPatternRange.TextPattern*\n  parent: System.Windows.Automation.Text.TextPatternRange\n  isExternal: false\n  name: TextPattern\n  nameWithType: TextPatternRange.TextPattern\n"}