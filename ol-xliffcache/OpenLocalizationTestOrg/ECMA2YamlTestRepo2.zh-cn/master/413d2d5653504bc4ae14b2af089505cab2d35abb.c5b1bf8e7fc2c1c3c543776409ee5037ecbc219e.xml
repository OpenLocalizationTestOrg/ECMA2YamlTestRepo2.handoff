{"nodes":[{"pos":[2412,2447],"content":"Represents a collection of strings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a collection of strings.","pos":[0,35]}]},{"pos":[2460,2706],"content":"StringCollection accepts `null` as a valid value and allows duplicate elements.       String comparisons are case-sensitive.       Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.","needQuote":false,"needEscape":true,"nodes":[{"content":"StringCollection accepts <ph id=\"ph1\">`null`</ph> as a valid value and allows duplicate elements.","pos":[0,79],"source":"StringCollection accepts `null` as a valid value and allows duplicate elements."},{"content":"String comparisons are case-sensitive.","pos":[86,124]},{"content":"Elements in this collection can be accessed using an integer index.","pos":[131,198]},{"content":"Indexes in this collection are zero-based.","pos":[200,242]}]},{"pos":[3818,3927],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> class."},{"pos":[3939,3977],"content":"This constructor is an O(1) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]},{"pos":[4564,4665],"content":"Adds a string to the end of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds a string to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[4678,5120],"content":"<xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements.       If <xref:System.Collections.Specialized.StringCollection.Count%2A> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Collections.Specialized.StringCollection&gt; accepts <ph id=\"ph1\">`null`</ph> as a valid value and allows duplicate elements.","pos":[0,117],"source":"<xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements."},{"content":"If &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt; is less than the capacity, this method is an O(1) operation.","pos":[124,251],"source":"       If <xref:System.Collections.Specialized.StringCollection.Count%2A> is less than the capacity, this method is an O(1) operation."},{"content":"If the capacity needs to be increased to accommodate the new element, this method becomes an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[252,440],"source":" If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."}]},{"pos":[5766,5950],"content":"The string to add to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to add to the end of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,105],"source":"The string to add to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[106,184],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[6007,6065],"content":"The zero-based index at which the new element is inserted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index at which the new element is inserted.","pos":[0,58]}]},{"pos":[6615,6740],"content":"Copies the elements of a string array to the end of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Copies the elements of a string array to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[6753,7333],"content":"<xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements.       If the <xref:System.Collections.Specialized.StringCollection> can accommodate the new elements without increasing the capacity, this method is an O(`n`) operation, where `n` is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Collections.Specialized.StringCollection&gt; accepts <ph id=\"ph1\">`null`</ph> as a valid value and allows duplicate elements.","pos":[0,117],"source":"<xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements."},{"content":"If the &lt;xref:System.Collections.Specialized.StringCollection&gt; can accommodate the new elements without increasing the capacity, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements to be added.","pos":[124,336],"source":"       If the <xref:System.Collections.Specialized.StringCollection> can accommodate the new elements without increasing the capacity, this method is an O(`n`) operation, where `n` is the number of elements to be added."},{"content":"If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<ph id=\"ph1\">`n`</ph><ph id=\"ph2\"> + </ph><ph id=\"ph3\">`m`</ph>) operation, where <ph id=\"ph4\">`n`</ph> is the number of elements to be added and <ph id=\"ph5\">`m`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[337,578],"source":" If the capacity needs to be increased to accommodate the new elements, this method becomes an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."}]},{"pos":[7986,8288],"content":"An array of strings to add to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The array itself can not be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> but it can contain elements that are <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of strings to add to the end of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,114],"source":"An array of strings to add to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"content":"The array itself can not be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> but it can contain elements that are <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[115,302],"source":" The array itself can not be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> but it can contain elements that are <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[8475,8558],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8953,9055],"content":"Removes all the strings from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes all the strings from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[9068,9352],"content":"<xref:System.Collections.Specialized.StringCollection.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt; is set to zero, and references to other objects from elements of the collection are also released.","pos":[0,162],"source":"<xref:System.Collections.Specialized.StringCollection.Count%2A> is set to zero, and references to other objects from elements of the collection are also released."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[169,282],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."}]},{"pos":[10479,10598],"content":"Determines whether the specified string is in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines whether the specified string is in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[10611,11467],"content":"The Contains method can confirm the existence of a string before performing further operations.       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>. String comparisons are case-sensitive.       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Contains method can confirm the existence of a string before performing further operations.","pos":[0,95]},{"content":"This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[102,201],"source":"       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"String comparisons are case-sensitive.","pos":[202,240]},{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[247,409],"source":"       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."},{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id=\"ph1\">`item`</ph> to determine whether item exists.","pos":[416,622],"source":"       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id=\"ph1\">`item`</ph> parameter on the objects in the collection.","pos":[623,850],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]},{"pos":[12137,12313],"content":"The string to locate in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,97],"source":"The string to locate in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[98,176],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[12372,12615],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found in the <bpt id=\"p3\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> is found in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13204,13389],"content":"Copies the entire <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values to a one-dimensional array of strings, starting at the specified index of the target array.","needQuote":true,"needEscape":true,"source":"Copies the entire <xref href=\"System.Collections.Specialized.StringCollection\"></xref> values to a one-dimensional array of strings, starting at the specified index of the target array."},{"pos":[13402,13813],"content":"The specified array must be of a compatible type.       The elements are copied to the <xref:System.Array> in the same order in which the enumerator of the <xref:System.Collections.Specialized.StringCollection> iterates through the <xref:System.Collections.Specialized.StringCollection>.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The specified array must be of a compatible type.","pos":[0,49]},{"content":"The elements are copied to the &lt;xref:System.Array&gt; in the same order in which the enumerator of the &lt;xref:System.Collections.Specialized.StringCollection&gt; iterates through the &lt;xref:System.Collections.Specialized.StringCollection&gt;.","pos":[56,287],"source":"       The elements are copied to the <xref:System.Array> in the same order in which the enumerator of the <xref:System.Collections.Specialized.StringCollection> iterates through the <xref:System.Collections.Specialized.StringCollection>."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[294,407],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."}]},{"pos":[14474,14687],"content":"The one-dimensional array of strings that is the destination of the elements copied from <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional array of strings that is the destination of the elements copied from <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,158],"source":"The one-dimensional array of strings that is the destination of the elements copied from <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[159,213],"source":" The <xref:System.Array> must have zero-based indexing."}]},{"pos":[14748,14804],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[14989,15072],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15187,15224],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero."},{"pos":[15320,15598],"content":"<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","pos":[0,39],"source":"<code>array</code> is multidimensional."},{"content":"-or-       The number of elements in the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is greater than the available space from <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","pos":[46,272],"source":"       -or-       The number of elements in the source <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}]},{"pos":[15700,15871],"content":"The type of the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of the source <xref href=\"System.Collections.Specialized.StringCollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."},{"pos":[16262,16375],"content":"Gets the number of strings contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the number of strings contained in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[16387,16446],"content":"Retrieving the value of this property is an O(1) operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]},{"pos":[17070,17178],"content":"The number of strings contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of strings contained in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[17697,17871],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringEnumerator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that iterates through the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Collections.Specialized.StringEnumerator\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[17884,20783],"content":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.       <xref:System.Collections.Specialized.StringEnumerator.Current%2A> returns the same object until either <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called. <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> sets <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the next element.       If <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> is undefined. To set <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> followed by <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Visual Basic, C#]       The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,137],"source":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[139,230],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[237,357]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[364,447]},{"content":"&lt;xref:System.Collections.Specialized.StringEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[448,561],"source":" <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt; is undefined.","pos":[563,660],"source":"  At this position, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt;.","pos":[661,912],"source":" Therefore, you must call <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Specialized.StringEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.Specialized.StringEnumerator.Reset%2A&gt; is called.","pos":[919,1166],"source":"       <xref:System.Collections.Specialized.StringEnumerator.Current%2A> returns the same object until either <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt; to the next element.","pos":[1167,1325],"source":" <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> sets <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1332,1593],"source":"       If <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1594,1742],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt; is undefined.","pos":[1743,1927],"source":" If the last call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> is undefined."},{"content":"To set &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.Specialized.StringEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt;.","pos":[1928,2203],"source":" To set <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> followed by <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[2210,2282]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[2283,2445]},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.","pos":[2452,2606]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[2608,2713]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[2715,2843]},{"content":"This method is an O(1) operation.","pos":[2850,2883]}]},{"pos":[20991,21139],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringEnumerator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.StringEnumerator\"></xref> for the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[21684,21855],"content":"Searches for the specified string and returns the zero-based index of the first occurrence within the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Searches for the specified string and returns the zero-based index of the first occurrence within the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[21868,22620],"content":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>. String comparisons are case-sensitive.       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[0,99],"source":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"String comparisons are case-sensitive.","pos":[100,138]},{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[145,307],"source":"       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."},{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id=\"ph1\">`item`</ph> to determine whether item exists.","pos":[314,520],"source":"       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id=\"ph1\">`item`</ph> parameter on the objects in the collection.","pos":[521,748],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]},{"pos":[23285,23385],"content":"The string to locate. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to locate.","pos":[0,21]},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[22,100],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[23442,23610],"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, if found; otherwise, -1.","needQuote":true,"needEscape":true,"source":"The zero-based index of the first occurrence of <code>value</code> in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>, if found; otherwise, -1."},{"pos":[24188,24306],"content":"Inserts a string into the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index.","needQuote":true,"needEscape":true,"source":"Inserts a string into the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> at the specified index."},{"pos":[24319,25072],"content":"Duplicate strings are allowed in <xref:System.Collections.Specialized.StringCollection>.       If `index` is equal to <xref:System.Collections.Specialized.StringCollection.Count%2A>, `value` is added to the end of <xref:System.Collections.Specialized.StringCollection>.       In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Duplicate strings are allowed in &lt;xref:System.Collections.Specialized.StringCollection&gt;.","pos":[0,88],"source":"Duplicate strings are allowed in <xref:System.Collections.Specialized.StringCollection>."},{"content":"If <ph id=\"ph1\">`index`</ph> is equal to &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;, <ph id=\"ph2\">`value`</ph> is added to the end of &lt;xref:System.Collections.Specialized.StringCollection&gt;.","pos":[95,269],"source":"       If `index` is equal to <xref:System.Collections.Specialized.StringCollection.Count%2A>, `value` is added to the end of <xref:System.Collections.Specialized.StringCollection>."},{"content":"In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.","pos":[276,416]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[417,507]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[508,627]},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[634,747],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."}]},{"pos":[25723,25773],"content":"The zero-based index at which <ph id=\"ph1\">`value`</ph> is inserted.","needQuote":true,"needEscape":true,"source":"The zero-based index at which `value` is inserted."},{"pos":[25835,25935],"content":"The string to insert. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to insert.","pos":[0,21]},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[22,100],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[26133,26286],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> greater than <xref:System.Collections.Specialized.StringCollection.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> greater than <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.StringCollection.Count*&gt;</ph>.","pos":[44,149],"source":"       -or-       <code>index</code> greater than <xref:System.Collections.Specialized.StringCollection.Count*>."}]},{"pos":[26703,26821],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is read-only."},{"pos":[26834,27548],"content":"<xref:System.Collections.Specialized.StringCollection> implements the IsReadOnly property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface.       A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       A <xref:System.Collections.Specialized.StringCollection> instance is always writable.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref:System.Collections.Specialized.StringCollection> implements the IsReadOnly property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface.       A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       A <xref:System.Collections.Specialized.StringCollection> instance is always writable.       Retrieving the value of this property is an O(1) operation.","pos":[0,706],"nodes":[{"content":"&lt;xref:System.Collections.Specialized.StringCollection&gt; implements the IsReadOnly property because it is required by the &lt;xref:System.Collections.IList?displayProperty=fullName&gt; interface.","pos":[0,187],"source":"<xref:System.Collections.Specialized.StringCollection> implements the IsReadOnly property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface."},{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[194,323]},{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[330,548]},{"content":"A &lt;xref:System.Collections.Specialized.StringCollection&gt; instance is always writable.","pos":[555,640],"source":"       A <xref:System.Collections.Specialized.StringCollection> instance is always writable."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[647,706]}]}]},{"pos":[27663,27755],"content":"This property always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[28280,28425],"content":"Gets a value indicating whether access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is synchronized (thread safe).","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether access to the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is synchronized (thread safe)."},{"pos":[28438,29643],"content":"<xref:System.Collections.Specialized.StringCollection> implements the IsSynchronized property because it is required by the <xref:System.Collections.ICollection> interface.       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.StringCollection.SyncRoot%2A> during the entire enumeration:       [!code-cpp[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/cpp/p-system.collections.spe_23_1.cpp)]  [!code-cs[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/csharp/p-system.collections.spe_23_1.cs)]  [!code-vb[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_23_1.vb)]       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Collections.Specialized.StringCollection&gt; implements the IsSynchronized property because it is required by the &lt;xref:System.Collections.ICollection&gt; interface.","pos":[0,172],"source":"<xref:System.Collections.Specialized.StringCollection> implements the IsSynchronized property because it is required by the <xref:System.Collections.ICollection> interface."},{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[179,257]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[258,395]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[396,577]},{"content":"The following code example shows how to lock the collection using the &lt;xref:System.Collections.Specialized.StringCollection.SyncRoot%2A&gt; during the entire enumeration:       <bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Collections.Specialized.StringCollection2#2<ept id=\"p2\">](~/add/codesnippet/cpp/p-system.collections.spe_23_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Collections.Specialized.StringCollection2#2<ept id=\"p4\">](~/add/codesnippet/csharp/p-system.collections.spe_23_1.cs)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Collections.Specialized.StringCollection2#2<ept id=\"p6\">](~/add/codesnippet/visualbasic/p-system.collections.spe_23_1.vb)</ept><ept id=\"p5\">]</ept>       Retrieving the value of this property is an O(1) operation.","pos":[584,1195],"source":"       The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.StringCollection.SyncRoot%2A> during the entire enumeration:       [!code-cpp[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/cpp/p-system.collections.spe_23_1.cpp)]  [!code-cs[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/csharp/p-system.collections.spe_23_1.cs)]  [!code-vb[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_23_1.vb)]       Retrieving the value of this property is an O(1) operation."}]},{"pos":[29762,29854],"content":"This property always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[30382,30430],"content":"Gets or sets the element at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the element at the specified index.","pos":[0,48]}]},{"pos":[30443,31028],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.       <xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements.       The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.       Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[index]`</ph>.","pos":[0,135],"source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`."},{"content":"&lt;xref:System.Collections.Specialized.StringCollection&gt; accepts <ph id=\"ph1\">`null`</ph> as a valid value and allows duplicate elements.","pos":[142,259],"source":"       <xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements."},{"content":"The C# language uses the  keyword to define the indexers instead of implementing the Item property.","pos":[266,365]},{"content":"Visual Basic implements Item as a default property, which provides the same indexing functionality.","pos":[366,465]},{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[472,579]}]},{"pos":[31173,31221],"content":"The zero-based index of the entry to get or set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the entry to get or set.","pos":[0,48]}]},{"pos":[31279,31314],"content":"The element at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element at the specified index.","pos":[0,35]}]},{"pos":[31510,31678],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.Specialized.StringCollection.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.StringCollection.Count*&gt;</ph>.","pos":[44,164],"source":"       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.Specialized.StringCollection.Count*>."}]},{"pos":[32127,32255],"content":"Removes the first occurrence of a specific string from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes the first occurrence of a specific string from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[32268,33462],"content":"Duplicate strings are allowed in <xref:System.Collections.Specialized.StringCollection>. Only the first occurrence is removed. To remove all occurrences of the specified string, use `RemoveAt(IndexOf(value))` repeatedly while <xref:System.Collections.Specialized.StringCollection.IndexOf%2A> does not return -1.       If the <xref:System.Collections.Specialized.StringCollection> does not contain the specified object, the <xref:System.Collections.Specialized.StringCollection> remains unchanged. No exception is thrown.       In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>. String comparisons are case-sensitive.       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Duplicate strings are allowed in &lt;xref:System.Collections.Specialized.StringCollection&gt;.","pos":[0,88],"source":"Duplicate strings are allowed in <xref:System.Collections.Specialized.StringCollection>."},{"content":"Only the first occurrence is removed.","pos":[89,126]},{"content":"To remove all occurrences of the specified string, use <ph id=\"ph1\">`RemoveAt(IndexOf(value))`</ph> repeatedly while &lt;xref:System.Collections.Specialized.StringCollection.IndexOf%2A&gt; does not return -1.","pos":[127,311],"source":" To remove all occurrences of the specified string, use `RemoveAt(IndexOf(value))` repeatedly while <xref:System.Collections.Specialized.StringCollection.IndexOf%2A> does not return -1."},{"content":"If the &lt;xref:System.Collections.Specialized.StringCollection&gt; does not contain the specified object, the &lt;xref:System.Collections.Specialized.StringCollection&gt; remains unchanged.","pos":[318,496],"source":"       If the <xref:System.Collections.Specialized.StringCollection> does not contain the specified object, the <xref:System.Collections.Specialized.StringCollection> remains unchanged."},{"content":"No exception is thrown.","pos":[497,520]},{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[527,661]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[662,752]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[753,872]},{"content":"This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[879,978],"source":"       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"String comparisons are case-sensitive.","pos":[979,1017]},{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[1024,1186],"source":"       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."}]},{"pos":[34122,34300],"content":"The string to remove from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to remove from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,99],"source":"The string to remove from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[100,178],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[34838,34956],"content":"Removes the string at the specified index of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes the string at the specified index of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[34969,35436],"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[0,134]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[135,225]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[226,345]},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[352,465],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."}]},{"pos":[36094,36139],"content":"The zero-based index of the string to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the string to remove.","pos":[0,45]}]},{"pos":[36339,36507],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.Specialized.StringCollection.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.StringCollection.Count*&gt;</ph>.","pos":[44,164],"source":"       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.Specialized.StringCollection.Count*>."}]},{"pos":[36914,37044],"content":"Gets an object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[37057,38637],"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.StringCollection> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Specialized.StringCollection>, not directly on the <xref:System.Collections.Specialized.StringCollection>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.StringCollection> object.       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The following code example shows how to lock the collection using the SyncRoot during the entire enumeration:       [!code-cpp[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/cpp/p-system.collections.spe_3_1.cpp)]  [!code-cs[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/csharp/p-system.collections.spe_3_1.cs)]  [!code-vb[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_3_1.vb)]       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Derived classes can provide their own synchronized version of the &lt;xref:System.Collections.Specialized.StringCollection&gt; using the SyncRoot property.","pos":[0,149],"source":"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.StringCollection> using the SyncRoot property."},{"content":"The synchronizing code must perform operations on the SyncRoot of the &lt;xref:System.Collections.Specialized.StringCollection&gt;, not directly on the &lt;xref:System.Collections.Specialized.StringCollection&gt;.","pos":[150,351],"source":" The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Specialized.StringCollection>, not directly on the <xref:System.Collections.Specialized.StringCollection>."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[352,433]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.Specialized.StringCollection&gt; object.","pos":[434,608],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.StringCollection> object."},{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[615,693]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[694,831]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[832,1013]},{"content":"The following code example shows how to lock the collection using the SyncRoot during the entire enumeration:       <bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Collections.Specialized.StringCollection2#2<ept id=\"p2\">](~/add/codesnippet/cpp/p-system.collections.spe_3_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Collections.Specialized.StringCollection2#2<ept id=\"p4\">](~/add/codesnippet/csharp/p-system.collections.spe_3_1.cs)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Collections.Specialized.StringCollection2#2<ept id=\"p6\">](~/add/codesnippet/visualbasic/p-system.collections.spe_3_1.vb)</ept><ept id=\"p5\">]</ept>       Retrieving the value of this property is an O(1) operation.","pos":[1020,1570],"source":"       The following code example shows how to lock the collection using the SyncRoot during the entire enumeration:       [!code-cpp[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/cpp/p-system.collections.spe_3_1.cpp)]  [!code-cs[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/csharp/p-system.collections.spe_3_1.cs)]  [!code-vb[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_3_1.vb)]       Retrieving the value of this property is an O(1) operation."}]},{"pos":[38751,38876],"content":"An object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[39619,39811],"content":"Copies the entire <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the specified index of the target array.","needQuote":true,"needEscape":true,"source":"Copies the entire <xref href=\"System.Collections.Specialized.StringCollection\"></xref> to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array."},{"pos":[39824,40095],"content":"The specified array must be of a compatible type.       This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The specified array must be of a compatible type.","pos":[0,49]},{"content":"This method uses &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt; to copy the elements.","pos":[56,147],"source":"       This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[154,267],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."}]},{"pos":[40246,40462],"content":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,161],"source":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[162,216],"source":" The <xref:System.Array> must have zero-based indexing."}]},{"pos":[40523,40579],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[40795,40878],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[40993,41030],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero."},{"pos":[41126,41404],"content":"<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","pos":[0,39],"source":"<code>array</code> is multidimensional."},{"content":"-or-       The number of elements in the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is greater than the available space from <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","pos":[46,272],"source":"       -or-       The number of elements in the source <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}]},{"pos":[41506,41677],"content":"The type of the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of the source <xref href=\"System.Collections.Specialized.StringCollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."},{"pos":[42281,42424],"content":"Returns a &lt;xref:System.Collections.IEnumerator&gt; that iterates through the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a <xref:System.Collections.IEnumerator> that iterates through the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[42437,45577],"content":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Visual Basic, C#]       The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,137],"source":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[139,230],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[237,357]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[364,447]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[448,544],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[545,640],"source":" At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[641,858],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[865,1061],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1062,1186],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1193,1420],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1421,1552],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[1553,1718],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1719,1943],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1950,2022]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[2023,2326],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the element that it is set to, even if the enumerator is already invalidated.","pos":[2327,2603],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated."},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.","pos":[2610,2764]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[2765,2902]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[2903,3084]},{"content":"This method is an O(1) operation.","pos":[3091,3124]}]},{"pos":[45756,45873],"content":"A &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[46568,46670],"content":"Adds an object to the end of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds an object to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[46683,47454],"content":"<xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements.       If <xref:System.Collections.Specialized.StringCollection.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Specialized.StringCollection> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.       If <xref:System.Collections.Specialized.StringCollection.Count%2A> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Collections.Specialized.StringCollection&gt; accepts <ph id=\"ph1\">`null`</ph> as a valid value and allows duplicate elements.","pos":[0,117],"source":"<xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements."},{"content":"If &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt; already equals the capacity, the capacity of the &lt;xref:System.Collections.Specialized.StringCollection&gt; is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","pos":[124,444],"source":"       If <xref:System.Collections.Specialized.StringCollection.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Specialized.StringCollection> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added."},{"content":"If &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt; is less than the capacity, this method is an O(1) operation.","pos":[451,578],"source":"       If <xref:System.Collections.Specialized.StringCollection.Count%2A> is less than the capacity, this method is an O(1) operation."},{"content":"If the capacity needs to be increased to accommodate the new element, this method becomes an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[579,767],"source":" If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."}]},{"pos":[47586,47789],"content":"The <xref:System.Object> to be added to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to be added to the end of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,124],"source":"The <xref:System.Object> to be added to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[125,203],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[47846,47972],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> index at which the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> has been added.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> index at which the <code>value</code> has been added."},{"pos":[48180,48382],"content":"The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is read-only.       -or-       The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","pos":[0,86],"source":"The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is read-only."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","pos":[93,194],"source":"       -or-       The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> has a fixed size."}]},{"pos":[48980,49089],"content":"Determines whether an element is in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines whether an element is in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[49102,49815],"content":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[0,99],"source":"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[106,268],"source":"       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."},{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id=\"ph1\">`item`</ph> to determine whether item exists.","pos":[275,481],"source":"       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id=\"ph1\">`item`</ph> parameter on the objects in the collection.","pos":[482,709],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]},{"pos":[49953,50143],"content":"The <xref:System.Object> to locate in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,111],"source":"The <xref:System.Object> to locate in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[112,190],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[50202,50445],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found in the <bpt id=\"p3\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> is found in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[51149,51341],"content":"Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the first occurrence within the entire <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Searches for the specified <xref:System.Object> and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[51354,52216],"content":"The <xref:System.Collections.Specialized.StringCollection> is searched forward starting at the first element and ending at the last element.       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.Specialized.StringCollection&gt; is searched forward starting at the first element and ending at the last element.","pos":[0,140],"source":"The <xref:System.Collections.Specialized.StringCollection> is searched forward starting at the first element and ending at the last element."},{"content":"This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[147,246],"source":"       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[253,415],"source":"       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."},{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id=\"ph1\">`item`</ph> to determine whether item exists.","pos":[422,628],"source":"       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id=\"ph1\">`item`</ph> parameter on the objects in the collection.","pos":[629,856],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]},{"pos":[52352,52542],"content":"The <xref:System.Object> to locate in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,111],"source":"The <xref:System.Object> to locate in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[112,190],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[52599,52778],"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the entire <bpt id=\"p2\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, if found; otherwise, -1.","needQuote":true,"needEscape":true,"source":"The zero-based index of the first occurrence of <code>value</code> within the entire <xref href=\"System.Collections.Specialized.StringCollection\"></xref>, if found; otherwise, -1."},{"pos":[53520,53640],"content":"Inserts an element into the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index.","needQuote":true,"needEscape":true,"source":"Inserts an element into the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> at the specified index."},{"pos":[53653,54638],"content":"If <xref:System.Collections.Specialized.StringCollection.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Specialized.StringCollection> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.       If `index` is equal to <xref:System.Collections.Specialized.StringCollection.Count%2A>, `value` is added to the end of <xref:System.Collections.Specialized.StringCollection>.       In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"If &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt; already equals the capacity, the capacity of the &lt;xref:System.Collections.Specialized.StringCollection&gt; is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","pos":[0,320],"source":"If <xref:System.Collections.Specialized.StringCollection.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Specialized.StringCollection> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added."},{"content":"If <ph id=\"ph1\">`index`</ph> is equal to &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;, <ph id=\"ph2\">`value`</ph> is added to the end of &lt;xref:System.Collections.Specialized.StringCollection&gt;.","pos":[327,501],"source":"       If `index` is equal to <xref:System.Collections.Specialized.StringCollection.Count%2A>, `value` is added to the end of <xref:System.Collections.Specialized.StringCollection>."},{"content":"In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.","pos":[508,648]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[649,739]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[740,859]},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[866,979],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."}]},{"pos":[54784,54841],"content":"The zero-based index at which <ph id=\"ph1\">`value`</ph> should be inserted.","needQuote":true,"needEscape":true,"source":"The zero-based index at which `value` should be inserted."},{"pos":[54903,55017],"content":"The <xref:System.Object> to insert. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to insert.","pos":[0,35],"source":"The <xref:System.Object> to insert."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[36,114],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[55240,55396],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is greater than <xref:System.Collections.Specialized.StringCollection.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.StringCollection.Count*&gt;</ph>.","pos":[44,152],"source":"       -or-       <code>index</code> is greater than <xref:System.Collections.Specialized.StringCollection.Count*>."}]},{"pos":[55501,55703],"content":"The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is read-only.       -or-       The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","pos":[0,86],"source":"The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is read-only."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","pos":[93,194],"source":"       -or-       The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> has a fixed size."}]},{"pos":[56264,56393],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has a fixed size.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> object has a fixed size."},{"pos":[56406,56921],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","pos":[0,511],"nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.","pos":[0,168]},{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[175,445]},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[452,511]}]}]},{"pos":[57055,57370],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> object has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object has a fixed size; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,236],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> object has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[237,315],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[58040,58165],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is read-only.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> object is read-only."},{"pos":[58178,58602],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","pos":[0,420],"nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]},{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[136,354]},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[361,420]}]}]},{"pos":[58735,59046],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> object is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object is read-only; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,232],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> object is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[233,311],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[59734,59782],"content":"Gets or sets the element at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the element at the specified index.","pos":[0,48]}]},{"pos":[59795,60434],"content":"Thismethod provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.       The C# language uses the [this](~/add/includes/ajax-current-ext-md.md) keyword to define the indexers instead of implementing the IList.Item property. Visual Basic implements IList.Item as a default property, which provides the same indexing functionality.       <xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements.       Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Thismethod provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[index]`</ph>.","pos":[0,132],"source":"Thismethod provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`."},{"content":"The C# language uses the <bpt id=\"p1\">[</bpt>this<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> keyword to define the indexers instead of implementing the IList.Item property.","pos":[139,289],"source":"       The C# language uses the [this](~/add/includes/ajax-current-ext-md.md) keyword to define the indexers instead of implementing the IList.Item property."},{"content":"Visual Basic implements IList.Item as a default property, which provides the same indexing functionality.","pos":[290,395]},{"content":"&lt;xref:System.Collections.Specialized.StringCollection&gt; accepts <ph id=\"ph1\">`null`</ph> as a valid value and allows duplicate elements.","pos":[402,519],"source":"       <xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements."},{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[526,633]}]},{"pos":[60597,60647],"content":"The zero-based index of the element to get or set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the element to get or set.","pos":[0,50]}]},{"pos":[60705,60740],"content":"The element at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element at the specified index.","pos":[0,35]}]},{"pos":[60961,61129],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.Specialized.StringCollection.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.StringCollection.Count*&gt;</ph>.","pos":[44,164],"source":"       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.Specialized.StringCollection.Count*>."}]},{"pos":[61717,61845],"content":"Removes the first occurrence of a specific object from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes the first occurrence of a specific object from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[61858,62693],"content":"If the <xref:System.Collections.Specialized.StringCollection> does not contain the specified object, the <xref:System.Collections.Specialized.StringCollection> remains unchanged. No exception is thrown.       In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the &lt;xref:System.Collections.Specialized.StringCollection&gt; does not contain the specified object, the &lt;xref:System.Collections.Specialized.StringCollection&gt; remains unchanged.","pos":[0,178],"source":"If the <xref:System.Collections.Specialized.StringCollection> does not contain the specified object, the <xref:System.Collections.Specialized.StringCollection> remains unchanged."},{"content":"No exception is thrown.","pos":[179,202]},{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[209,343]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[344,434]},{"content":"This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.","pos":[435,554]},{"content":"This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[561,660],"source":"       This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Specialized.StringCollection.Count%2A&gt;.","pos":[667,829],"source":"       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>."}]},{"pos":[62829,63021],"content":"The <xref:System.Object> to remove from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to remove from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,113],"source":"The <xref:System.Object> to remove from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[114,192],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[63232,63434],"content":"The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is read-only.       -or-       The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","pos":[0,86],"source":"The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is read-only."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","pos":[93,194],"source":"       -or-       The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> has a fixed size."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Specialized.StringCollection\n  id: StringCollection\n  children:\n  - System.Collections.Specialized.StringCollection.#ctor\n  - System.Collections.Specialized.StringCollection.Add(System.String)\n  - System.Collections.Specialized.StringCollection.AddRange(System.String[])\n  - System.Collections.Specialized.StringCollection.Clear\n  - System.Collections.Specialized.StringCollection.Contains(System.String)\n  - System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)\n  - System.Collections.Specialized.StringCollection.Count\n  - System.Collections.Specialized.StringCollection.GetEnumerator\n  - System.Collections.Specialized.StringCollection.IndexOf(System.String)\n  - System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)\n  - System.Collections.Specialized.StringCollection.IsReadOnly\n  - System.Collections.Specialized.StringCollection.IsSynchronized\n  - System.Collections.Specialized.StringCollection.Item(System.Int32)\n  - System.Collections.Specialized.StringCollection.Remove(System.String)\n  - System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)\n  - System.Collections.Specialized.StringCollection.SyncRoot\n  - System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Specialized.StringCollection.System#Collections#IList#Add(System.Object)\n  - System.Collections.Specialized.StringCollection.System#Collections#IList#Contains(System.Object)\n  - System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.Specialized.StringCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize\n  - System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly\n  - System.Collections.Specialized.StringCollection.System#Collections#IList#Item(System.Int32)\n  - System.Collections.Specialized.StringCollection.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  name: StringCollection\n  nameWithType: StringCollection\n  fullName: System.Collections.Specialized.StringCollection\n  type: Class\n  summary: Represents a collection of strings.\n  remarks: \"StringCollection accepts `null` as a valid value and allows duplicate elements.  \\n  \\n String comparisons are case-sensitive.  \\n  \\n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.\"\n  example:\n  - \"The following code example demonstrates several of the properties and methods of StringCollection.  \\n  \\n [!code-cpp[System.Collections.Specialized.StringCollection2#1](~/add/codesnippet/cpp/t-system.collections.spe_2_1.cpp)]\\n [!code-cs[System.Collections.Specialized.StringCollection2#1](~/add/codesnippet/csharp/t-system.collections.spe_2_1.cs)]\\n [!code-vb[System.Collections.Specialized.StringCollection2#1](~/add/codesnippet/visualbasic/t-system.collections.spe_2_1.vb)]\"\n  syntax:\n    content: 'public class StringCollection : System.Collections.IList'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IList\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.#ctor\n  id: '#ctor'\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: StringCollection()\n  nameWithType: StringCollection.StringCollection()\n  fullName: System.Collections.Specialized.StringCollection.StringCollection()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> class.\n  remarks: This constructor is an O(1) operation.\n  syntax:\n    content: public StringCollection ();\n    parameters: []\n  overload: System.Collections.Specialized.StringCollection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.Add(System.String)\n  id: Add(System.String)\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: Add(String)\n  nameWithType: StringCollection.Add(String)\n  fullName: System.Collections.Specialized.StringCollection.Add(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Adds a string to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"<xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n If <xref:System.Collections.Specialized.StringCollection.Count%2A> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.\"\n  example:\n  - \"The following code example adds new elements to the <xref:System.Collections.Specialized.StringCollection>.  \\n  \\n [!code-cpp[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/cpp/m-system.collections.spe_39_1.cpp)]\\n [!code-cs[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/csharp/m-system.collections.spe_39_1.cs)]\\n [!code-vb[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/visualbasic/m-system.collections.spe_39_1.vb)]\"\n  syntax:\n    content: public int Add (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to add to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Int32\n      description: The zero-based index at which the new element is inserted.\n  overload: System.Collections.Specialized.StringCollection.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.AddRange(System.String[])\n  id: AddRange(System.String[])\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: AddRange(String[])\n  nameWithType: StringCollection.AddRange(String[])\n  fullName: System.Collections.Specialized.StringCollection.AddRange(String[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Copies the elements of a string array to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"<xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n If the <xref:System.Collections.Specialized.StringCollection> can accommodate the new elements without increasing the capacity, this method is an O(`n`) operation, where `n` is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.\"\n  example:\n  - \"The following code example adds new elements to the <xref:System.Collections.Specialized.StringCollection>.  \\n  \\n [!code-cpp[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/cpp/m-system.collections.spe_4_1.cpp)]\\n [!code-cs[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/csharp/m-system.collections.spe_4_1.cs)]\\n [!code-vb[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/visualbasic/m-system.collections.spe_4_1.vb)]\"\n  syntax:\n    content: public void AddRange (string[] value);\n    parameters:\n    - id: value\n      type: System.String[]\n      description: An array of strings to add to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The array itself can not be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> but it can contain elements that are <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.AddRange*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.Clear\n  id: Clear\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: StringCollection.Clear()\n  fullName: System.Collections.Specialized.StringCollection.Clear()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Removes all the strings from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"<xref:System.Collections.Specialized.StringCollection.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.\"\n  example:\n  - \"The following code example removes elements from the <xref:System.Collections.Specialized.StringCollection>.  \\n  \\n [!code-cpp[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_2_1.cpp)]\\n [!code-cs[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_2_1.cs)]\\n [!code-vb[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_2_1.vb)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Collections.Specialized.StringCollection.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.Contains(System.String)\n  id: Contains(System.String)\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: Contains(String)\n  nameWithType: StringCollection.Contains(String)\n  fullName: System.Collections.Specialized.StringCollection.Contains(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Determines whether the specified string is in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"The Contains method can confirm the existence of a string before performing further operations.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>. String comparisons are case-sensitive.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example searches the <xref:System.Collections.Specialized.StringCollection> for an element.  \\n  \\n [!code-cs[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/csharp/m-system.collections.spe_28_1.cs)]\\n [!code-cpp[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/cpp/m-system.collections.spe_28_1.cpp)]\\n [!code-vb[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_28_1.vb)]\"\n  syntax:\n    content: public bool Contains (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to locate in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> is found in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)\n  id: CopyTo(System.String[],System.Int32)\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: CopyTo(String[],Int32)\n  nameWithType: StringCollection.CopyTo(String[],Int32)\n  fullName: System.Collections.Specialized.StringCollection.CopyTo(String[],Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Copies the entire <xref href=\"System.Collections.Specialized.StringCollection\"></xref> values to a one-dimensional array of strings, starting at the specified index of the target array.\n  remarks: \"The specified array must be of a compatible type.  \\n  \\n The elements are copied to the <xref:System.Array> in the same order in which the enumerator of the <xref:System.Collections.Specialized.StringCollection> iterates through the <xref:System.Collections.Specialized.StringCollection>.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.\"\n  example:\n  - \"The following code example copies a <xref:System.Collections.Specialized.StringCollection> to an array.  \\n  \\n [!code-cs[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/csharp/6398d0a9-11dc-4566-8dea-_1.cs)]\\n [!code-cpp[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/cpp/6398d0a9-11dc-4566-8dea-_1.cpp)]\\n [!code-vb[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/visualbasic/6398d0a9-11dc-4566-8dea-_1.vb)]\"\n  syntax:\n    content: public void CopyTo (string[] array, int index);\n    parameters:\n    - id: array\n      type: System.String[]\n      description: The one-dimensional array of strings that is the destination of the elements copied from <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The <xref:System.Array> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Collections.Specialized.StringCollection.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.Specialized.StringCollection\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.Specialized.StringCollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.Count\n  id: Count\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: StringCollection.Count\n  fullName: System.Collections.Specialized.StringCollection.Count\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets the number of strings contained in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: Retrieving the value of this property is an O(1) operation.\n  example:\n  - \"The following code example copies a <xref:System.Collections.Specialized.StringCollection> to an array.  \\n  \\n [!code-cs[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/csharp/p-system.collections.spe_15_1.cs)]\\n [!code-cpp[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/cpp/p-system.collections.spe_15_1.cpp)]\\n [!code-vb[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/visualbasic/p-system.collections.spe_15_1.vb)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of strings contained in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: StringCollection.GetEnumerator()\n  fullName: System.Collections.Specialized.StringCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Returns a <xref href=\"System.Collections.Specialized.StringEnumerator\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.Specialized.StringEnumerator.Current%2A> returns the same object until either <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called. <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> sets <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> is undefined. To set <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> followed by <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public System.Collections.Specialized.StringEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Specialized.StringEnumerator\n      description: A <xref href=\"System.Collections.Specialized.StringEnumerator\"></xref> for the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.IndexOf(System.String)\n  id: IndexOf(System.String)\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: IndexOf(String)\n  nameWithType: StringCollection.IndexOf(String)\n  fullName: System.Collections.Specialized.StringCollection.IndexOf(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Searches for the specified string and returns the zero-based index of the first occurrence within the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>. String comparisons are case-sensitive.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example searches the <xref:System.Collections.Specialized.StringCollection> for an element.  \\n  \\n [!code-cs[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/csharp/m-system.collections.spe_7_1.cs)]\\n [!code-cpp[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/cpp/m-system.collections.spe_7_1.cpp)]\\n [!code-vb[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_7_1.vb)]\"\n  syntax:\n    content: public int IndexOf (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to locate. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code> in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>, if found; otherwise, -1.\n  overload: System.Collections.Specialized.StringCollection.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)\n  id: Insert(System.Int32,System.String)\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: Insert(Int32,String)\n  nameWithType: StringCollection.Insert(Int32,String)\n  fullName: System.Collections.Specialized.StringCollection.Insert(Int32,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Inserts a string into the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> at the specified index.\n  remarks: \"Duplicate strings are allowed in <xref:System.Collections.Specialized.StringCollection>.  \\n  \\n If `index` is equal to <xref:System.Collections.Specialized.StringCollection.Count%2A>, `value` is added to the end of <xref:System.Collections.Specialized.StringCollection>.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.\"\n  example:\n  - \"The following code example adds new elements to the <xref:System.Collections.Specialized.StringCollection>.  \\n  \\n [!code-cpp[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/cpp/5308ad74-fbfb-4390-83de-_1.cpp)]\\n [!code-cs[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/csharp/5308ad74-fbfb-4390-83de-_1.cs)]\\n [!code-vb[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/visualbasic/5308ad74-fbfb-4390-83de-_1.vb)]\"\n  syntax:\n    content: public void Insert (int index, string value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which `value` is inserted.\n    - id: value\n      type: System.String\n      description: The string to insert. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> greater than <xref:System.Collections.Specialized.StringCollection.Count*>.\"\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: StringCollection.IsReadOnly\n  fullName: System.Collections.Specialized.StringCollection.IsReadOnly\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is read-only.\n  remarks: \"<xref:System.Collections.Specialized.StringCollection> implements the IsReadOnly property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface.  \\n  \\n A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n A <xref:System.Collections.Specialized.StringCollection> instance is always writable.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: StringCollection.IsSynchronized\n  fullName: System.Collections.Specialized.StringCollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> is synchronized (thread safe).\n  remarks: \"<xref:System.Collections.Specialized.StringCollection> implements the IsSynchronized property because it is required by the <xref:System.Collections.ICollection> interface.  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.StringCollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n [!code-cpp[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/cpp/p-system.collections.spe_23_1.cpp)]\\n [!code-cs[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/csharp/p-system.collections.spe_23_1.cs)]\\n [!code-vb[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_23_1.vb)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: StringCollection.Item(Int32)\n  fullName: System.Collections.Specialized.StringCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets or sets the element at the specified index.\n  remarks: \"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \\n  \\n <xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.\"\n  syntax:\n    content: public string this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the entry to get or set.\n    return:\n      type: System.String\n      description: The element at the specified index.\n  overload: System.Collections.Specialized.StringCollection.Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref:System.Collections.Specialized.StringCollection.Count*>.\"\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: Remove(String)\n  nameWithType: StringCollection.Remove(String)\n  fullName: System.Collections.Specialized.StringCollection.Remove(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Removes the first occurrence of a specific string from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"Duplicate strings are allowed in <xref:System.Collections.Specialized.StringCollection>. Only the first occurrence is removed. To remove all occurrences of the specified string, use `RemoveAt(IndexOf(value))` repeatedly while <xref:System.Collections.Specialized.StringCollection.IndexOf%2A> does not return -1.  \\n  \\n If the <xref:System.Collections.Specialized.StringCollection> does not contain the specified object, the <xref:System.Collections.Specialized.StringCollection> remains unchanged. No exception is thrown.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>. String comparisons are case-sensitive.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.\"\n  example:\n  - \"The following code example removes elements from the <xref:System.Collections.Specialized.StringCollection>.  \\n  \\n [!code-cpp[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_20_1.cpp)]\\n [!code-cs[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_20_1.cs)]\\n [!code-vb[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_20_1.vb)]\"\n  syntax:\n    content: public void Remove (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to remove from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: StringCollection.RemoveAt(Int32)\n  fullName: System.Collections.Specialized.StringCollection.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Removes the string at the specified index of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.\"\n  example:\n  - \"The following code example removes elements from the <xref:System.Collections.Specialized.StringCollection>.  \\n  \\n [!code-cpp[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_16_1.cpp)]\\n [!code-cs[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_16_1.cs)]\\n [!code-vb[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_16_1.vb)]\"\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the string to remove.\n  overload: System.Collections.Specialized.StringCollection.RemoveAt*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref:System.Collections.Specialized.StringCollection.Count*>.\"\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: StringCollection.SyncRoot\n  fullName: System.Collections.Specialized.StringCollection.SyncRoot\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.StringCollection> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Specialized.StringCollection>, not directly on the <xref:System.Collections.Specialized.StringCollection>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.StringCollection> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the SyncRoot during the entire enumeration:  \\n  \\n [!code-cpp[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/cpp/p-system.collections.spe_3_1.cpp)]\\n [!code-cs[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/csharp/p-system.collections.spe_3_1.cs)]\\n [!code-vb[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_3_1.vb)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: StringCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Copies the entire <xref href=\"System.Collections.Specialized.StringCollection\"></xref> to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array.\n  remarks: \"The specified array must be of a compatible type.  \\n  \\n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.\"\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The <xref:System.Array> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.Specialized.StringCollection\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.Specialized.StringCollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: StringCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Returns a <xref:System.Collections.IEnumerator> that iterates through the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: A <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: StringCollection.System.Collections.IList.Add(Object)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Adds an object to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"<xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n If <xref:System.Collections.Specialized.StringCollection.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Specialized.StringCollection> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \\n  \\n If <xref:System.Collections.Specialized.StringCollection.Count%2A> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.\"\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to be added to the end of the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Int32\n      description: The <xref href=\"System.Collections.Specialized.StringCollection\"></xref> index at which the <code>value</code> has been added.\n  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#Add*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.Specialized.StringCollection\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.Specialized.StringCollection\\\"></xref> has a fixed size.\"\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: StringCollection.System.Collections.IList.Contains(Object)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Determines whether an element is in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to locate in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> is found in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: StringCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Searches for the specified <xref:System.Object> and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"The <xref:System.Collections.Specialized.StringCollection> is searched forward starting at the first element and ending at the last element.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to locate in the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code> within the entire <xref href=\"System.Collections.Specialized.StringCollection\"></xref>, if found; otherwise, -1.\n  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: StringCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Inserts an element into the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> at the specified index.\n  remarks: \"If <xref:System.Collections.Specialized.StringCollection.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Specialized.StringCollection> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \\n  \\n If `index` is equal to <xref:System.Collections.Specialized.StringCollection.Count%2A>, `value` is added to the end of <xref:System.Collections.Specialized.StringCollection>.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.\"\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which `value` should be inserted.\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to insert. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than <xref:System.Collections.Specialized.StringCollection.Count*>.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.Specialized.StringCollection\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.Specialized.StringCollection\\\"></xref> has a fixed size.\"\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: StringCollection.System.Collections.IList.IsFixedSize\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> object has a fixed size.\n  remarks: \"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> object has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: StringCollection.System.Collections.IList.IsReadOnly\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> object is read-only.\n  remarks: \"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Specialized.StringCollection\"></xref> object is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: StringCollection.System.Collections.IList.Item(Int32)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets or sets the element at the specified index.\n  remarks: \"Thismethod provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \\n  \\n The C# language uses the [this](~/add/includes/ajax-current-ext-md.md) keyword to define the indexers instead of implementing the IList.Item property. Visual Basic implements IList.Item as a default property, which provides the same indexing functionality.  \\n  \\n <xref:System.Collections.Specialized.StringCollection> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.\"\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to get or set.\n    return:\n      type: System.Object\n      description: The element at the specified index.\n  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref:System.Collections.Specialized.StringCollection.Count*>.\"\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.Specialized.StringCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: StringCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Removes the first occurrence of a specific object from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"If the <xref:System.Collections.Specialized.StringCollection> does not contain the specified object, the <xref:System.Collections.Specialized.StringCollection> remains unchanged. No exception is thrown.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \\n  \\n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.StringCollection.Count%2A>.\"\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Object> to remove from the <xref href=\"System.Collections.Specialized.StringCollection\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#Remove*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.Specialized.StringCollection\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.Specialized.StringCollection\\\"></xref> has a fixed size.\"\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Collections.Specialized.StringCollection.#ctor\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: StringCollection()\n  nameWithType: StringCollection.StringCollection()\n  fullName: System.Collections.Specialized.StringCollection.StringCollection()\n- uid: System.Collections.Specialized.StringCollection.Add(System.String)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Add(String)\n  nameWithType: StringCollection.Add(String)\n  fullName: System.Collections.Specialized.StringCollection.Add(String)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Specialized.StringCollection.AddRange(System.String[])\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: AddRange(String[])\n  nameWithType: StringCollection.AddRange(String[])\n  fullName: System.Collections.Specialized.StringCollection.AddRange(String[])\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Specialized.StringCollection.Clear\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: StringCollection.Clear()\n  fullName: System.Collections.Specialized.StringCollection.Clear()\n- uid: System.Collections.Specialized.StringCollection.Contains(System.String)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Contains(String)\n  nameWithType: StringCollection.Contains(String)\n  fullName: System.Collections.Specialized.StringCollection.Contains(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: CopyTo(String[],Int32)\n  nameWithType: StringCollection.CopyTo(String[],Int32)\n  fullName: System.Collections.Specialized.StringCollection.CopyTo(String[],Int32)\n- uid: System.Collections.Specialized.StringCollection.Count\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Count\n  nameWithType: StringCollection.Count\n  fullName: System.Collections.Specialized.StringCollection.Count\n- uid: System.Collections.Specialized.StringCollection.GetEnumerator\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: StringCollection.GetEnumerator()\n  fullName: System.Collections.Specialized.StringCollection.GetEnumerator()\n- uid: System.Collections.Specialized.StringEnumerator\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: StringEnumerator\n  nameWithType: StringEnumerator\n  fullName: System.Collections.Specialized.StringEnumerator\n- uid: System.Collections.Specialized.StringCollection.IndexOf(System.String)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: IndexOf(String)\n  nameWithType: StringCollection.IndexOf(String)\n  fullName: System.Collections.Specialized.StringCollection.IndexOf(String)\n- uid: System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Insert(Int32,String)\n  nameWithType: StringCollection.Insert(Int32,String)\n  fullName: System.Collections.Specialized.StringCollection.Insert(Int32,String)\n- uid: System.Collections.Specialized.StringCollection.IsReadOnly\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: StringCollection.IsReadOnly\n  fullName: System.Collections.Specialized.StringCollection.IsReadOnly\n- uid: System.Collections.Specialized.StringCollection.IsSynchronized\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: StringCollection.IsSynchronized\n  fullName: System.Collections.Specialized.StringCollection.IsSynchronized\n- uid: System.Collections.Specialized.StringCollection.Item(System.Int32)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: StringCollection.Item(Int32)\n  fullName: System.Collections.Specialized.StringCollection.Item(Int32)\n- uid: System.Collections.Specialized.StringCollection.Remove(System.String)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Remove(String)\n  nameWithType: StringCollection.Remove(String)\n  fullName: System.Collections.Specialized.StringCollection.Remove(String)\n- uid: System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: StringCollection.RemoveAt(Int32)\n  fullName: System.Collections.Specialized.StringCollection.RemoveAt(Int32)\n- uid: System.Collections.Specialized.StringCollection.SyncRoot\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: StringCollection.SyncRoot\n  fullName: System.Collections.Specialized.StringCollection.SyncRoot\n- uid: System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: StringCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: StringCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Add(System.Object)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: StringCollection.System.Collections.IList.Add(Object)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Add(Object)\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Contains(System.Object)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: StringCollection.System.Collections.IList.Contains(Object)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Contains(Object)\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: StringCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IndexOf(Object)\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: StringCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Insert(Int32,Object)\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: StringCollection.System.Collections.IList.IsFixedSize\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IsFixedSize\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: StringCollection.System.Collections.IList.IsReadOnly\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IsReadOnly\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Item(System.Int32)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: StringCollection.System.Collections.IList.Item(Int32)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Item(Int32)\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Remove(System.Object)\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: StringCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Remove(Object)\n- uid: System.Collections.Specialized.StringCollection.#ctor*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: StringCollection\n  nameWithType: StringCollection.StringCollection\n- uid: System.Collections.Specialized.StringCollection.Add*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Add\n  nameWithType: StringCollection.Add\n- uid: System.Collections.Specialized.StringCollection.AddRange*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: AddRange\n  nameWithType: StringCollection.AddRange\n- uid: System.Collections.Specialized.StringCollection.Clear*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Clear\n  nameWithType: StringCollection.Clear\n- uid: System.Collections.Specialized.StringCollection.Contains*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Contains\n  nameWithType: StringCollection.Contains\n- uid: System.Collections.Specialized.StringCollection.CopyTo*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: StringCollection.CopyTo\n- uid: System.Collections.Specialized.StringCollection.Count*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Count\n  nameWithType: StringCollection.Count\n- uid: System.Collections.Specialized.StringCollection.GetEnumerator*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: StringCollection.GetEnumerator\n- uid: System.Collections.Specialized.StringCollection.IndexOf*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: IndexOf\n  nameWithType: StringCollection.IndexOf\n- uid: System.Collections.Specialized.StringCollection.Insert*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Insert\n  nameWithType: StringCollection.Insert\n- uid: System.Collections.Specialized.StringCollection.IsReadOnly*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: StringCollection.IsReadOnly\n- uid: System.Collections.Specialized.StringCollection.IsSynchronized*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: StringCollection.IsSynchronized\n- uid: System.Collections.Specialized.StringCollection.Item*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Item\n  nameWithType: StringCollection.Item\n- uid: System.Collections.Specialized.StringCollection.Remove*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: Remove\n  nameWithType: StringCollection.Remove\n- uid: System.Collections.Specialized.StringCollection.RemoveAt*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: RemoveAt\n  nameWithType: StringCollection.RemoveAt\n- uid: System.Collections.Specialized.StringCollection.SyncRoot*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: StringCollection.SyncRoot\n- uid: System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: StringCollection.System.Collections.ICollection.CopyTo\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: StringCollection.System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Add*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: StringCollection.System.Collections.IList.Add\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Contains*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: StringCollection.System.Collections.IList.Contains\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: StringCollection.System.Collections.IList.IndexOf\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Insert*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: StringCollection.System.Collections.IList.Insert\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: StringCollection.System.Collections.IList.IsFixedSize\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: StringCollection.System.Collections.IList.IsReadOnly\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Item*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: StringCollection.System.Collections.IList.Item\n- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Remove*\n  parent: System.Collections.Specialized.StringCollection\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: StringCollection.System.Collections.IList.Remove\n"}