{"nodes":[{"pos":[424,478],"content":"Controls what kind of dependent transaction to create.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls what kind of dependent transaction to create.","pos":[0,54]}]},{"pos":[490,881],"content":"A dependent transaction can be obtained using the <xref:System.Transactions.Transaction.DependentClone%2A> method, with the DependentCloneOption parameter controlling what kind of dependent transaction to create.  For more information on how this enumeration is used, see [Managing Concurrency with DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab).","needQuote":true,"needEscape":true,"nodes":[{"content":"A dependent transaction can be obtained using the &lt;xref:System.Transactions.Transaction.DependentClone%2A&gt; method, with the DependentCloneOption parameter controlling what kind of dependent transaction to create.","pos":[0,212],"source":"A dependent transaction can be obtained using the <xref:System.Transactions.Transaction.DependentClone%2A> method, with the DependentCloneOption parameter controlling what kind of dependent transaction to create."},{"content":"For more information on how this enumeration is used, see <bpt id=\"p1\">[</bpt>Managing Concurrency with DependentTransaction<ept id=\"p1\">](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab)</ept>.","pos":[214,391],"source":"  For more information on how this enumeration is used, see [Managing Concurrency with DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab)."}]},{"pos":[1713,1992],"content":"The dependent transaction blocks the commit process of the transaction until the parent transaction times out, or <xref:System.Transactions.DependentTransaction.Complete*> is called. In this case, additional work can be done on the transaction and new enlistments can be created.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dependent transaction blocks the commit process of the transaction until the parent transaction times out, or <xref:System.Transactions.DependentTransaction.Complete*> is called. In this case, additional work can be done on the transaction and new enlistments can be created.","pos":[0,279],"nodes":[{"content":"The dependent transaction blocks the commit process of the transaction until the parent transaction times out, or &lt;xref:System.Transactions.DependentTransaction.Complete*&gt; is called.","pos":[0,182],"source":"The dependent transaction blocks the commit process of the transaction until the parent transaction times out, or <xref:System.Transactions.DependentTransaction.Complete*> is called."},{"content":"In this case, additional work can be done on the transaction and new enlistments can be created.","pos":[183,279]}]}]},{"pos":[2125,2137],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2607,2791],"content":"The dependent transaction automatically aborts the transaction if Commit is called on the parent transaction before <xref:System.Transactions.DependentTransaction.Complete*> is called.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dependent transaction automatically aborts the transaction if Commit is called on the parent transaction before &lt;xref:System.Transactions.DependentTransaction.Complete*&gt; is called.","pos":[0,184],"source":"The dependent transaction automatically aborts the transaction if Commit is called on the parent transaction before <xref:System.Transactions.DependentTransaction.Complete*> is called."}]},{"pos":[2921,2933],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Transactions.DependentCloneOption\n  id: DependentCloneOption\n  children:\n  - System.Transactions.DependentCloneOption.BlockCommitUntilComplete\n  - System.Transactions.DependentCloneOption.RollbackIfNotComplete\n  langs:\n  - csharp\n  name: DependentCloneOption\n  nameWithType: DependentCloneOption\n  fullName: System.Transactions.DependentCloneOption\n  type: Enum\n  summary: Controls what kind of dependent transaction to create.\n  remarks: A dependent transaction can be obtained using the <xref:System.Transactions.Transaction.DependentClone%2A> method, with the DependentCloneOption parameter controlling what kind of dependent transaction to create.  For more information on how this enumeration is used, see [Managing Concurrency with DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab).\n  example:\n  - \"The following example shows you how to create a dependent transaction.  \\n  \\n [!code-vb[Tx_DependentTx#1](~/add/codesnippet/visualbasic/t-system.transactions.de_1_1.vb)]\\n [!code-cs[Tx_DependentTx#1](~/add/codesnippet/csharp/t-system.transactions.de_1_1.cs)]\"\n  syntax:\n    content: public enum DependentCloneOption\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Transactions.DependentCloneOption.BlockCommitUntilComplete\n  id: BlockCommitUntilComplete\n  parent: System.Transactions.DependentCloneOption\n  langs:\n  - csharp\n  name: BlockCommitUntilComplete\n  nameWithType: DependentCloneOption.BlockCommitUntilComplete\n  fullName: System.Transactions.DependentCloneOption.BlockCommitUntilComplete\n  type: Field\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: The dependent transaction blocks the commit process of the transaction until the parent transaction times out, or <xref:System.Transactions.DependentTransaction.Complete*> is called. In this case, additional work can be done on the transaction and new enlistments can be created.\n  syntax:\n    content: BlockCommitUntilComplete\n    return:\n      type: System.Transactions.DependentCloneOption\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.DependentCloneOption.RollbackIfNotComplete\n  id: RollbackIfNotComplete\n  parent: System.Transactions.DependentCloneOption\n  langs:\n  - csharp\n  name: RollbackIfNotComplete\n  nameWithType: DependentCloneOption.RollbackIfNotComplete\n  fullName: System.Transactions.DependentCloneOption.RollbackIfNotComplete\n  type: Field\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: The dependent transaction automatically aborts the transaction if Commit is called on the parent transaction before <xref:System.Transactions.DependentTransaction.Complete*> is called.\n  syntax:\n    content: RollbackIfNotComplete\n    return:\n      type: System.Transactions.DependentCloneOption\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Transactions.DependentCloneOption.BlockCommitUntilComplete\n  parent: System.Transactions.DependentCloneOption\n  isExternal: false\n  name: BlockCommitUntilComplete\n  nameWithType: DependentCloneOption.BlockCommitUntilComplete\n  fullName: System.Transactions.DependentCloneOption.BlockCommitUntilComplete\n- uid: System.Transactions.DependentCloneOption\n  parent: System.Transactions\n  isExternal: false\n  name: DependentCloneOption\n  nameWithType: DependentCloneOption\n  fullName: System.Transactions.DependentCloneOption\n- uid: System.Transactions.DependentCloneOption.RollbackIfNotComplete\n  parent: System.Transactions.DependentCloneOption\n  isExternal: false\n  name: RollbackIfNotComplete\n  nameWithType: DependentCloneOption.RollbackIfNotComplete\n  fullName: System.Transactions.DependentCloneOption.RollbackIfNotComplete\n"}