{"nodes":[{"pos":[1278,1349],"content":"Manages the collection of space reservations made in a record sequence.","needQuote":true,"needEscape":true,"nodes":[{"content":"Manages the collection of space reservations made in a record sequence.","pos":[0,71]}]},{"pos":[1362,4818],"content":"This class represents a set of reservation areas that are made in a record sequence. Adding items to the collection allocates new reservations. Removing items from the collection frees those reservations.       An application reserves space in the log when it has data that is to be written to the log in the future, but cannot write it immediately. Reservations provide a guarantee that the data can be written to the log when the data is available to be written. When using logs, applications often reserve one or more log records in a marshalling area. You must reserve records prior to appending them.       Reservations can be used to guarantee that an operation can be completed before the data is committed; otherwise, the changes are rolled back. It can also be used to record an \"undo action\" in the log. During a rollback operation, a transactional resource manager (RM) must be able to recover its state if the RM is interrupted during the rollback operation. By using a reservation area, an RM can reserve space in a log before it is used.       The <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method can either reserve space or append data, or both, depending on the parameters that are specified when making the call. As work progresses in a transaction, an application can append the undo information and reserve space for compensation records. During a rollback operation, compensation records that are created indicate what has been undone on the disk. The records are appended using space that has been previously reserved. This guarantees that an RM does not run out of log space, which is a fatal condition, while performing a rollback operation. If a log fills up during a transaction, an application can safely roll back a transaction without corrupting durable data.       CLFS is an ARIES-compliant logging system, meant for write-ahead logging. In write-ahead logging, an application writes an undo record before it performs the operation, reserving the amount of space it takes in the log to write a compensating record, which may be used during rollback. Later, the reserved space is used when the compensation record is actually written.       Applications can either reserve or access long space at any given time (they are mutually exclusive operations). After a commit record is written to the log, an application can free up the reservations for the compensation records. This action can be done by calling either the <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> or <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method. Calling the <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method guarantees that the operation is atomic, while calling the <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> method does not.       When you free records, you must free the same records that you reserved together in a previous call to the <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method.      > [!NOTE] >  Your implementation of <xref:System.IO.Log.IRecordSequence> must implement the <xref:System.IO.Log.ReservationCollection.MakeReservation%2A> and <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> methods to perform the actual reservation allocation and deallocation. In addition, your implementation must also call <xref:System.IO.Log.ReservationCollection.ReservationFreed%2A> when a record is written into a reserved space.","needQuote":false,"needEscape":true,"nodes":[{"content":"This class represents a set of reservation areas that are made in a record sequence.","pos":[0,84]},{"content":"Adding items to the collection allocates new reservations.","pos":[85,143]},{"content":"Removing items from the collection frees those reservations.","pos":[144,204]},{"content":"An application reserves space in the log when it has data that is to be written to the log in the future, but cannot write it immediately.","pos":[211,349]},{"content":"Reservations provide a guarantee that the data can be written to the log when the data is available to be written.","pos":[350,464]},{"content":"When using logs, applications often reserve one or more log records in a marshalling area.","pos":[465,555]},{"content":"You must reserve records prior to appending them.","pos":[556,605]},{"content":"Reservations can be used to guarantee that an operation can be completed before the data is committed; otherwise, the changes are rolled back.","pos":[612,754]},{"content":"It can also be used to record an \"undo action\" in the log.","pos":[755,813]},{"content":"During a rollback operation, a transactional resource manager (RM) must be able to recover its state if the RM is interrupted during the rollback operation.","pos":[814,970]},{"content":"By using a reservation area, an RM can reserve space in a log before it is used.","pos":[971,1051]},{"content":"The &lt;xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A&gt; method can either reserve space or append data, or both, depending on the parameters that are specified when making the call.","pos":[1058,1244],"source":"       The <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method can either reserve space or append data, or both, depending on the parameters that are specified when making the call."},{"content":"As work progresses in a transaction, an application can append the undo information and reserve space for compensation records.","pos":[1245,1372]},{"content":"During a rollback operation, compensation records that are created indicate what has been undone on the disk.","pos":[1373,1482]},{"content":"The records are appended using space that has been previously reserved.","pos":[1483,1554]},{"content":"This guarantees that an RM does not run out of log space, which is a fatal condition, while performing a rollback operation.","pos":[1555,1679]},{"content":"If a log fills up during a transaction, an application can safely roll back a transaction without corrupting durable data.","pos":[1680,1802]},{"content":"CLFS is an ARIES-compliant logging system, meant for write-ahead logging.","pos":[1809,1882]},{"content":"In write-ahead logging, an application writes an undo record before it performs the operation, reserving the amount of space it takes in the log to write a compensating record, which may be used during rollback.","pos":[1883,2094]},{"content":"Later, the reserved space is used when the compensation record is actually written.","pos":[2095,2178]},{"content":"Applications can either reserve or access long space at any given time (they are mutually exclusive operations).","pos":[2185,2297]},{"content":"After a commit record is written to the log, an application can free up the reservations for the compensation records.","pos":[2298,2416]},{"content":"This action can be done by calling either the &lt;xref:System.IO.Log.ReservationCollection.FreeReservation%2A&gt; or &lt;xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A&gt; method.","pos":[2417,2592],"source":" This action can be done by calling either the <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> or <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method."},{"content":"Calling the &lt;xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A&gt; method guarantees that the operation is atomic, while calling the &lt;xref:System.IO.Log.ReservationCollection.FreeReservation%2A&gt; method does not.","pos":[2593,2806],"source":" Calling the <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method guarantees that the operation is atomic, while calling the <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> method does not."},{"content":"When you free records, you must free the same records that you reserved together in a previous call to the &lt;xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A&gt; method.","pos":[2813,2984],"source":"       When you free records, you must free the same records that you reserved together in a previous call to the <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Your implementation of &lt;xref:System.IO.Log.IRecordSequence&gt; must implement the &lt;xref:System.IO.Log.ReservationCollection.MakeReservation%2A&gt; and &lt;xref:System.IO.Log.ReservationCollection.FreeReservation%2A&gt; methods to perform the actual reservation allocation and deallocation.","pos":[2990,3280],"source":"      > [!NOTE] >  Your implementation of <xref:System.IO.Log.IRecordSequence> must implement the <xref:System.IO.Log.ReservationCollection.MakeReservation%2A> and <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> methods to perform the actual reservation allocation and deallocation."},{"content":"In addition, your implementation must also call &lt;xref:System.IO.Log.ReservationCollection.ReservationFreed%2A&gt; when a record is written into a reserved space.","pos":[3281,3439],"source":" In addition, your implementation must also call <xref:System.IO.Log.ReservationCollection.ReservationFreed%2A> when a record is written into a reserved space."}]},{"pos":[7235,7332],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.Log.ReservationCollection\"></xref> class."},{"pos":[7869,7956],"content":"Allocates a reservation and adds it to the collection. This method cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allocates a reservation and adds it to the collection. This method cannot be inherited.","pos":[0,87],"nodes":[{"content":"Allocates a reservation and adds it to the collection.","pos":[0,54]},{"content":"This method cannot be inherited.","pos":[55,87]}]}]},{"pos":[8751,8799],"content":"The size of the requested reservation, in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the requested reservation, in bytes.","pos":[0,48]}]},{"pos":[8981,9073],"content":"<ph id=\"ph1\">&lt;code&gt;archiveTail&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","needQuote":true,"needEscape":true,"source":"<code>archiveTail</code> is not between the base and last sequence numbers of this sequence."},{"pos":[9168,9233],"content":"<ph id=\"ph1\">&lt;code&gt;size&lt;/code&gt;</ph> is invalid or exceeds maximum reservation size.","needQuote":true,"needEscape":true,"source":"<code>size</code> is invalid or exceeds maximum reservation size."},{"pos":[9322,9377],"content":"An I/O error occurs when creating the archive snapshot.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurs when creating the archive snapshot.","pos":[0,55]}]},{"pos":[9484,9546],"content":"The method was called after the sequence has been disposed of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]},{"pos":[9647,9715],"content":"There is not enough memory to continue the execution of the program.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]},{"pos":[9830,9899],"content":"Access for the specified log store is denied by the operating system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Access for the specified log store is denied by the operating system.","pos":[0,69]}]},{"pos":[10016,10044],"content":"The record sequence is full.","needQuote":true,"needEscape":true,"nodes":[{"content":"The record sequence is full.","pos":[0,28]}]},{"pos":[10398,10482],"content":"Releases all of the reservations in the collection. This method cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases all of the reservations in the collection. This method cannot be inherited.","pos":[0,84],"nodes":[{"content":"Releases all of the reservations in the collection.","pos":[0,51]},{"content":"This method cannot be inherited.","pos":[52,84]}]}]},{"pos":[10710,10775],"content":"<ph id=\"ph1\">&lt;code&gt;size&lt;/code&gt;</ph> is invalid or exceeds maximum reservation size.","needQuote":true,"needEscape":true,"source":"<code>size</code> is invalid or exceeds maximum reservation size."},{"pos":[10864,10919],"content":"An I/O error occurs when creating the archive snapshot.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurs when creating the archive snapshot.","pos":[0,55]}]},{"pos":[11026,11088],"content":"The method was called after the sequence has been disposed of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]},{"pos":[11189,11257],"content":"There is not enough memory to continue the execution of the program.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]},{"pos":[11374,11402],"content":"The record sequence is full.","needQuote":true,"needEscape":true,"nodes":[{"content":"The record sequence is full.","pos":[0,28]}]},{"pos":[11517,11586],"content":"Access for the specified log store is denied by the operating system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Access for the specified log store is denied by the operating system.","pos":[0,69]}]},{"pos":[11998,12100],"content":"Determines whether a reservation of the specified size has been made. This method cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a reservation of the specified size has been made. This method cannot be inherited.","pos":[0,102],"nodes":[{"content":"Determines whether a reservation of the specified size has been made.","pos":[0,69]},{"content":"This method cannot be inherited.","pos":[70,102]}]}]},{"pos":[12233,12270],"content":"The size to locate in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size to locate in the collection.","pos":[0,37]}]},{"pos":[12329,12529],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if at least one reservation of the specified size has been made; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if at least one reservation of the specified size has been made; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12708,12770],"content":"The method was called after the sequence has been disposed of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]},{"pos":[12871,12939],"content":"There is not enough memory to continue the execution of the program.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]},{"pos":[13054,13123],"content":"Access for the specified log store is denied by the operating system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Access for the specified log store is denied by the operating system.","pos":[0,69]}]},{"pos":[13579,13721],"content":"Copies the entire collection to a one-dimensional array, starting at the specified index of the target array. This method cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the entire collection to a one-dimensional array, starting at the specified index of the target array. This method cannot be inherited.","pos":[0,142],"nodes":[{"content":"Copies the entire collection to a one-dimensional array, starting at the specified index of the target array.","pos":[0,109]},{"content":"This method cannot be inherited.","pos":[110,142]}]}]},{"pos":[13874,13920],"content":"The array that is the destination of the copy.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array that is the destination of the copy.","pos":[0,46]}]},{"pos":[13986,14044],"content":"The zero-based index in the array at which copying begins.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index in the array at which copying begins.","pos":[0,58]}]},{"pos":[14217,14327],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> or <code>arrayIndex</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[14442,14546],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than zero, or greater than or equal to the length of <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>arrayIndex</code> is less than zero, or greater than or equal to the length of <code>array</code>."},{"pos":[14642,14842],"content":"There is not enough space in the specified array to copy the data.       -or-       <code>array</code> is not a single dimensional array, which is the only type supported for the requested action.","needQuote":false,"needEscape":true,"nodes":[{"content":"There is not enough space in the specified array to copy the data.","pos":[0,66]},{"content":"-or-       <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a single dimensional array, which is the only type supported for the requested action.","pos":[73,196],"source":"       -or-       <code>array</code> is not a single dimensional array, which is the only type supported for the requested action."}]},{"pos":[14950,15012],"content":"The method was called after the sequence has been disposed of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]},{"pos":[15113,15181],"content":"There is not enough memory to continue the execution of the program.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]},{"pos":[15296,15365],"content":"Access for the specified log store is denied by the operating system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Access for the specified log store is denied by the operating system.","pos":[0,69]}]},{"pos":[15715,15765],"content":"Gets the number of reservations in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of reservations in the collection.","pos":[0,50]}]},{"pos":[15871,15916],"content":"The number of reservations in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of reservations in the collection.","pos":[0,45]}]},{"pos":[16357,16491],"content":"Allows the <bpt id=\"p1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to free resources before it is destroyed by the garbage collector.","needQuote":true,"needEscape":true,"source":"Allows the <xref href=\"System.IO.Log.ReservationCollection\"></xref> to free resources before it is destroyed by the garbage collector."},{"pos":[17082,17163],"content":"When overridden in a derived class, releases a reservation of the specified size.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, releases a reservation of the specified size.","pos":[0,81]}]},{"pos":[17315,17354],"content":"The size of the reservation to release.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the reservation to release.","pos":[0,39]}]},{"pos":[17938,18026],"content":"When overridden in a derived class, gets the best matching reservation for a given size.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets the best matching reservation for a given size.","pos":[0,88]}]},{"pos":[18038,18518],"content":"This method is typically called when appending a record from reserved space to a record sequence. When it returns, a reservation of the returned size has been removed from the collection. If, for some reason, the reserved space is not actually accessed, the <xref:System.IO.Log.ReservationCollection.ReservationMade%2A> method should be called to ensure that the <xref:System.IO.Log.ReservationCollection> accurately represents the amount of reserved space in the record sequence.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is typically called when appending a record from reserved space to a record sequence. When it returns, a reservation of the returned size has been removed from the collection. If, for some reason, the reserved space is not actually accessed, the <xref:System.IO.Log.ReservationCollection.ReservationMade%2A> method should be called to ensure that the <xref:System.IO.Log.ReservationCollection> accurately represents the amount of reserved space in the record sequence.","pos":[0,480],"nodes":[{"content":"This method is typically called when appending a record from reserved space to a record sequence.","pos":[0,97]},{"content":"When it returns, a reservation of the returned size has been removed from the collection.","pos":[98,187]},{"content":"If, for some reason, the reserved space is not actually accessed, the &lt;xref:System.IO.Log.ReservationCollection.ReservationMade%2A&gt; method should be called to ensure that the &lt;xref:System.IO.Log.ReservationCollection&gt; accurately represents the amount of reserved space in the record sequence.","pos":[188,480],"source":" If, for some reason, the reserved space is not actually accessed, the <xref:System.IO.Log.ReservationCollection.ReservationMade%2A> method should be called to ensure that the <xref:System.IO.Log.ReservationCollection> accurately represents the amount of reserved space in the record sequence."}]}]},{"pos":[18672,18717],"content":"The size of the reservation that must be fit.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the reservation that must be fit.","pos":[0,45]}]},{"pos":[18774,18897],"content":"A reservation from the collection that is greater than or equal to the specified size, or -1 if no such reservation exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reservation from the collection that is greater than or equal to the specified size, or -1 if no such reservation exists.","pos":[0,123]}]},{"pos":[19384,19525],"content":"Returns an enumerator that can iterate through the <xref href=\"System.IO.Log.ReservationCollection\"></xref>. This method cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator that can iterate through the <bpt id=\"p1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,108],"source":"Returns an enumerator that can iterate through the <xref href=\"System.IO.Log.ReservationCollection\"></xref>."},{"content":"This method cannot be inherited.","pos":[109,141]}]},{"pos":[19734,19834],"content":"An enumerator that can iterate through the <bpt id=\"p1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An enumerator that can iterate through the <xref href=\"System.IO.Log.ReservationCollection\"></xref>."},{"pos":[20023,20285],"content":"The operation is invalid for one of the following reasons:      -   The enumeration has ended.      -   The collection has been modified.      -   The enumeration has not been started. A call to <xref:System.Collections.IEnumerator.MoveNext*> must be made.","needQuote":false,"needEscape":true,"nodes":[{"content":"The operation is invalid for one of the following reasons:      -   The enumeration has ended.      -   The collection has been modified.      -   The enumeration has not been started. A call to <xref:System.Collections.IEnumerator.MoveNext*> must be made.","pos":[0,256],"nodes":[{"content":"The operation is invalid for one of the following reasons:      -   The enumeration has ended.","pos":[0,94]},{"content":"-   The collection has been modified.","pos":[100,137]},{"content":"-   The enumeration has not been started.","pos":[143,184]},{"content":"A call to &lt;xref:System.Collections.IEnumerator.MoveNext*&gt; must be made.","pos":[185,256],"source":" A call to <xref:System.Collections.IEnumerator.MoveNext*> must be made."}]}]},{"pos":[20393,20455],"content":"The method was called after the sequence has been disposed of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]},{"pos":[20556,20624],"content":"There is not enough memory to continue the execution of the program.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]},{"pos":[20739,20808],"content":"Access for the specified log store is denied by the operating system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Access for the specified log store is denied by the operating system.","pos":[0,69]}]},{"pos":[21183,21247],"content":"Gets a value that indicates whether the collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the collection is read-only.","pos":[0,64]}]},{"pos":[21259,21323],"content":"A <xref:System.IO.Log.ReservationCollection> is never read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Log.ReservationCollection&gt; is never read-only.","pos":[0,64],"source":"A <xref:System.IO.Log.ReservationCollection> is never read-only."}]},{"pos":[21437,21529],"content":"This property always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22053,22135],"content":"When overridden in a derived class, allocates a reservation of the specified size.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, allocates a reservation of the specified size.","pos":[0,82]}]},{"pos":[22287,22327],"content":"The size of the reservation to allocate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the reservation to allocate.","pos":[0,40]}]},{"pos":[22811,22911],"content":"Releases a reservation of the specified size, if one has been made. This method cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases a reservation of the specified size, if one has been made. This method cannot be inherited.","pos":[0,100],"nodes":[{"content":"Releases a reservation of the specified size, if one has been made.","pos":[0,67]},{"content":"This method cannot be inherited.","pos":[68,100]}]}]},{"pos":[23709,23748],"content":"The size of the reservation to release.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the reservation to release.","pos":[0,39]}]},{"pos":[23807,24004],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a reservation of the specified size was found and removed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a reservation of the specified size was found and removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24169,24277],"content":"No reservation large enough to fit the provided record can be found in the specified reservation collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"No reservation large enough to fit the provided record can be found in the specified reservation collection.","pos":[0,108]}]},{"pos":[24366,24421],"content":"An I/O error occurs when creating the archive snapshot.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurs when creating the archive snapshot.","pos":[0,55]}]},{"pos":[24528,24590],"content":"The method was called after the sequence has been disposed of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]},{"pos":[24691,24759],"content":"There is not enough memory to continue the execution of the program.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]},{"pos":[24876,24904],"content":"The record sequence is full.","needQuote":true,"needEscape":true,"nodes":[{"content":"The record sequence is full.","pos":[0,28]}]},{"pos":[25019,25088],"content":"Access for the specified log store is denied by the operating system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Access for the specified log store is denied by the operating system.","pos":[0,69]}]},{"pos":[25540,25623],"content":"When overridden in a derived class, indicates that a reservation has been released.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, indicates that a reservation has been released.","pos":[0,83]}]},{"pos":[25635,25814],"content":"When you inherit from <xref:System.IO.Log.ReservationCollection>, you must call this method when a reservation is released for a reason other than removing it from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"When you inherit from &lt;xref:System.IO.Log.ReservationCollection&gt;, you must call this method when a reservation is released for a reason other than removing it from the collection.","pos":[0,179],"source":"When you inherit from <xref:System.IO.Log.ReservationCollection>, you must call this method when a reservation is released for a reason other than removing it from the collection."}]},{"pos":[25958,26009],"content":"The size of the reservation that has been released.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the reservation that has been released.","pos":[0,51]}]},{"pos":[26539,26618],"content":"When overridden in a derived class, indicates that a reservation has been made.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, indicates that a reservation has been made.","pos":[0,79]}]},{"pos":[26630,26820],"content":"When you inherit from <xref:System.IO.Log.ReservationCollection>, you must call this method when a reservation is made outside of a call to <xref:System.IO.Log.ReservationCollection.Add%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"When you inherit from &lt;xref:System.IO.Log.ReservationCollection&gt;, you must call this method when a reservation is made outside of a call to &lt;xref:System.IO.Log.ReservationCollection.Add%2A&gt;.","pos":[0,190],"source":"When you inherit from <xref:System.IO.Log.ReservationCollection>, you must call this method when a reservation is made outside of a call to <xref:System.IO.Log.ReservationCollection.Add%2A>."}]},{"pos":[26963,27010],"content":"The size of the reservation that has been made.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the reservation that has been made.","pos":[0,47]}]},{"pos":[27655,27796],"content":"Returns an enumerator that can iterate through the <xref href=\"System.IO.Log.ReservationCollection\"></xref>. This method cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator that can iterate through the <bpt id=\"p1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,108],"source":"Returns an enumerator that can iterate through the <xref href=\"System.IO.Log.ReservationCollection\"></xref>."},{"content":"This method cannot be inherited.","pos":[109,141]}]},{"pos":[27974,28074],"content":"An enumerator that can iterate through the <bpt id=\"p1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An enumerator that can iterate through the <xref href=\"System.IO.Log.ReservationCollection\"></xref>."},{"pos":[28294,28556],"content":"The operation is invalid for one of the following reasons:      -   The enumeration has ended.      -   The collection has been modified.      -   The enumeration has not been started. A call to <xref:System.Collections.IEnumerator.MoveNext*> must be made.","needQuote":false,"needEscape":true,"nodes":[{"content":"The operation is invalid for one of the following reasons:      -   The enumeration has ended.      -   The collection has been modified.      -   The enumeration has not been started. A call to <xref:System.Collections.IEnumerator.MoveNext*> must be made.","pos":[0,256],"nodes":[{"content":"The operation is invalid for one of the following reasons:      -   The enumeration has ended.","pos":[0,94]},{"content":"-   The collection has been modified.","pos":[100,137]},{"content":"-   The enumeration has not been started.","pos":[143,184]},{"content":"A call to &lt;xref:System.Collections.IEnumerator.MoveNext*&gt; must be made.","pos":[185,256],"source":" A call to <xref:System.Collections.IEnumerator.MoveNext*> must be made."}]}]},{"pos":[28664,28726],"content":"The method was called after the sequence has been disposed of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]},{"pos":[28827,28895],"content":"There is not enough memory to continue the execution of the program.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]},{"pos":[29010,29079],"content":"Access for the specified log store is denied by the operating system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Access for the specified log store is denied by the operating system.","pos":[0,69]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.Log.ReservationCollection\n  id: ReservationCollection\n  children:\n  - System.IO.Log.ReservationCollection.#ctor\n  - System.IO.Log.ReservationCollection.Add(System.Int64)\n  - System.IO.Log.ReservationCollection.Clear\n  - System.IO.Log.ReservationCollection.Contains(System.Int64)\n  - System.IO.Log.ReservationCollection.CopyTo(System.Int64[],System.Int32)\n  - System.IO.Log.ReservationCollection.Count\n  - System.IO.Log.ReservationCollection.Finalize\n  - System.IO.Log.ReservationCollection.FreeReservation(System.Int64)\n  - System.IO.Log.ReservationCollection.GetBestMatchingReservation(System.Int64)\n  - System.IO.Log.ReservationCollection.GetEnumerator\n  - System.IO.Log.ReservationCollection.IsReadOnly\n  - System.IO.Log.ReservationCollection.MakeReservation(System.Int64)\n  - System.IO.Log.ReservationCollection.Remove(System.Int64)\n  - System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)\n  - System.IO.Log.ReservationCollection.ReservationMade(System.Int64)\n  - System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: ReservationCollection\n  nameWithType: ReservationCollection\n  fullName: System.IO.Log.ReservationCollection\n  type: Class\n  summary: Manages the collection of space reservations made in a record sequence.\n  remarks: \"This class represents a set of reservation areas that are made in a record sequence. Adding items to the collection allocates new reservations. Removing items from the collection frees those reservations.  \\n  \\n An application reserves space in the log when it has data that is to be written to the log in the future, but cannot write it immediately. Reservations provide a guarantee that the data can be written to the log when the data is available to be written. When using logs, applications often reserve one or more log records in a marshalling area. You must reserve records prior to appending them.  \\n  \\n Reservations can be used to guarantee that an operation can be completed before the data is committed; otherwise, the changes are rolled back. It can also be used to record an \\\"undo action\\\" in the log. During a rollback operation, a transactional resource manager (RM) must be able to recover its state if the RM is interrupted during the rollback operation. By using a reservation area, an RM can reserve space in a log before it is used.  \\n  \\n The <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method can either reserve space or append data, or both, depending on the parameters that are specified when making the call. As work progresses in a transaction, an application can append the undo information and reserve space for compensation records. During a rollback operation, compensation records that are created indicate what has been undone on the disk. The records are appended using space that has been previously reserved. This guarantees that an RM does not run out of log space, which is a fatal condition, while performing a rollback operation. If a log fills up during a transaction, an application can safely roll back a transaction without corrupting durable data.  \\n  \\n CLFS is an ARIES-compliant logging system, meant for write-ahead logging. In write-ahead logging, an application writes an undo record before it performs the operation, reserving the amount of space it takes in the log to write a compensating record, which may be used during rollback. Later, the reserved space is used when the compensation record is actually written.  \\n  \\n Applications can either reserve or access long space at any given time (they are mutually exclusive operations). After a commit record is written to the log, an application can free up the reservations for the compensation records. This action can be done by calling either the <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> or <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method. Calling the <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method guarantees that the operation is atomic, while calling the <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> method does not.  \\n  \\n When you free records, you must free the same records that you reserved together in a previous call to the <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method.  \\n  \\n> [!NOTE]\\n>  Your implementation of <xref:System.IO.Log.IRecordSequence> must implement the <xref:System.IO.Log.ReservationCollection.MakeReservation%2A> and <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> methods to perform the actual reservation allocation and deallocation. In addition, your implementation must also call <xref:System.IO.Log.ReservationCollection.ReservationFreed%2A> when a record is written into a reserved space.\"\n  example:\n  - \"Reservations can be performed in two ways as shown in the following examples. You can adopt the practices in the samples for robust processing. Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.  \\n  \\n```  \\n//Using the ReserveAndAppend Method  \\nReservationCollection reservations = recordSequence.CreateReservationCollection();  \\nlong[] lengthOfUndoRecords = new long[] { 1000 };  \\nrecordSequence.ReserveAndAppend(recordData,  \\n                                                     userSqn,  \\n                                                     previousSqn,  \\n                                                     RecordSequenceAppendOptions.None,  \\n                                                     reservations,  \\n                                                     lengthOfUndoRecords);  \\nrecordSequence.Append(undoRecordData,    // If necessary …  \\n                                    userSqn,  \\n                                    previousSqn,  \\n                                    RecordSequenceAppendOptions.ForceFlush,  \\n                                    reservations);  \\n  \\n// Using the Manual Approach  \\nReservationCollection reservations = recordSequence.CreateReservationCollection();  \\nreservations.Add(lengthOfUndoRecord);  \\ntry  \\n{  \\n   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  \\n}  \\ncatch (Exception)  \\n{  \\n   reservations.Remove(lengthOfUndoRecord);  \\n   throw;  \\n}  \\n  \\nrecordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  \\n```\"\n  syntax:\n    content: 'public abstract class ReservationCollection : System.Collections.Generic.ICollection<long>, System.Collections.Generic.IEnumerable<long>'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<System.Int64>\n  - System.Collections.Generic.IEnumerable<System.Int64>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.#ctor\n  id: '#ctor'\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: ReservationCollection()\n  nameWithType: ReservationCollection.ReservationCollection()\n  fullName: System.IO.Log.ReservationCollection.ReservationCollection()\n  type: Constructor\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Initializes a new instance of the <xref href=\"System.IO.Log.ReservationCollection\"></xref> class.\n  syntax:\n    content: protected ReservationCollection ();\n    parameters: []\n  overload: System.IO.Log.ReservationCollection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.Add(System.Int64)\n  id: Add(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: Add(Int64)\n  nameWithType: ReservationCollection.Add(Int64)\n  fullName: System.IO.Log.ReservationCollection.Add(Int64)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Allocates a reservation and adds it to the collection. This method cannot be inherited.\n  remarks: ''\n  example:\n  - \"The following example shows how to manually make a reservation. Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.  \\n  \\n```  \\nReservationCollection reservations = recordSequence.CreateReservationCollection();  \\nreservations.Add(lengthOfUndoRecord);  \\ntry  \\n{  \\n   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  \\n}  \\ncatch (Exception)  \\n{  \\n   reservations.Remove(lengthOfUndoRecord);  \\n   throw;  \\n}  \\n  \\nrecordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  \\n```\"\n  syntax:\n    content: public void Add (long size);\n    parameters:\n    - id: size\n      type: System.Int64\n      description: The size of the requested reservation, in bytes.\n  overload: System.IO.Log.ReservationCollection.Add*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>archiveTail</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>size</code> is invalid or exceeds maximum reservation size.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs when creating the archive snapshot.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log store is denied by the operating system.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.Clear\n  id: Clear\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ReservationCollection.Clear()\n  fullName: System.IO.Log.ReservationCollection.Clear()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Releases all of the reservations in the collection. This method cannot be inherited.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.IO.Log.ReservationCollection.Clear*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>size</code> is invalid or exceeds maximum reservation size.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs when creating the archive snapshot.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log store is denied by the operating system.\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.Contains(System.Int64)\n  id: Contains(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: Contains(Int64)\n  nameWithType: ReservationCollection.Contains(Int64)\n  fullName: System.IO.Log.ReservationCollection.Contains(Int64)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Determines whether a reservation of the specified size has been made. This method cannot be inherited.\n  syntax:\n    content: public bool Contains (long size);\n    parameters:\n    - id: size\n      type: System.Int64\n      description: The size to locate in the collection.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if at least one reservation of the specified size has been made; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.Log.ReservationCollection.Contains*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log store is denied by the operating system.\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.CopyTo(System.Int64[],System.Int32)\n  id: CopyTo(System.Int64[],System.Int32)\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: CopyTo(Int64[],Int32)\n  nameWithType: ReservationCollection.CopyTo(Int64[],Int32)\n  fullName: System.IO.Log.ReservationCollection.CopyTo(Int64[],Int32)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Copies the entire collection to a one-dimensional array, starting at the specified index of the target array. This method cannot be inherited.\n  syntax:\n    content: public void CopyTo (long[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Int64[]\n      description: The array that is the destination of the copy.\n    - id: arrayIndex\n      type: System.Int32\n      description: The zero-based index in the array at which copying begins.\n  overload: System.IO.Log.ReservationCollection.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> or <code>arrayIndex</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>arrayIndex</code> is less than zero, or greater than or equal to the length of <code>array</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"There is not enough space in the specified array to copy the data.  \\n  \\n -or-  \\n  \\n <code>array</code> is not a single dimensional array, which is the only type supported for the requested action.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log store is denied by the operating system.\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.Count\n  id: Count\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ReservationCollection.Count\n  fullName: System.IO.Log.ReservationCollection.Count\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the number of reservations in the collection.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of reservations in the collection.\n  overload: System.IO.Log.ReservationCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.Finalize\n  id: Finalize\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: ReservationCollection.Finalize()\n  fullName: System.IO.Log.ReservationCollection.Finalize()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Allows the <xref href=\"System.IO.Log.ReservationCollection\"></xref> to free resources before it is destroyed by the garbage collector.\n  syntax:\n    content: ~ReservationCollection ();\n    parameters: []\n  overload: System.IO.Log.ReservationCollection.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.FreeReservation(System.Int64)\n  id: FreeReservation(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: FreeReservation(Int64)\n  nameWithType: ReservationCollection.FreeReservation(Int64)\n  fullName: System.IO.Log.ReservationCollection.FreeReservation(Int64)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: When overridden in a derived class, releases a reservation of the specified size.\n  syntax:\n    content: protected abstract void FreeReservation (long size);\n    parameters:\n    - id: size\n      type: System.Int64\n      description: The size of the reservation to release.\n  overload: System.IO.Log.ReservationCollection.FreeReservation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.GetBestMatchingReservation(System.Int64)\n  id: GetBestMatchingReservation(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: GetBestMatchingReservation(Int64)\n  nameWithType: ReservationCollection.GetBestMatchingReservation(Int64)\n  fullName: System.IO.Log.ReservationCollection.GetBestMatchingReservation(Int64)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: When overridden in a derived class, gets the best matching reservation for a given size.\n  remarks: This method is typically called when appending a record from reserved space to a record sequence. When it returns, a reservation of the returned size has been removed from the collection. If, for some reason, the reserved space is not actually accessed, the <xref:System.IO.Log.ReservationCollection.ReservationMade%2A> method should be called to ensure that the <xref:System.IO.Log.ReservationCollection> accurately represents the amount of reserved space in the record sequence.\n  syntax:\n    content: protected long GetBestMatchingReservation (long size);\n    parameters:\n    - id: size\n      type: System.Int64\n      description: The size of the reservation that must be fit.\n    return:\n      type: System.Int64\n      description: A reservation from the collection that is greater than or equal to the specified size, or -1 if no such reservation exists.\n  overload: System.IO.Log.ReservationCollection.GetBestMatchingReservation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ReservationCollection.GetEnumerator()\n  fullName: System.IO.Log.ReservationCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Returns an enumerator that can iterate through the <xref href=\"System.IO.Log.ReservationCollection\"></xref>. This method cannot be inherited.\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<long> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Int64}\n      description: An enumerator that can iterate through the <xref href=\"System.IO.Log.ReservationCollection\"></xref>.\n  overload: System.IO.Log.ReservationCollection.GetEnumerator*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The operation is invalid for one of the following reasons:  \\n  \\n-   The enumeration has ended.  \\n  \\n-   The collection has been modified.  \\n  \\n-   The enumeration has not been started. A call to <xref:System.Collections.IEnumerator.MoveNext*> must be made.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log store is denied by the operating system.\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.IsReadOnly\n  id: IsReadOnly\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: ReservationCollection.IsReadOnly\n  fullName: System.IO.Log.ReservationCollection.IsReadOnly\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets a value that indicates whether the collection is read-only.\n  remarks: A <xref:System.IO.Log.ReservationCollection> is never read-only.\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.Log.ReservationCollection.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.MakeReservation(System.Int64)\n  id: MakeReservation(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: MakeReservation(Int64)\n  nameWithType: ReservationCollection.MakeReservation(Int64)\n  fullName: System.IO.Log.ReservationCollection.MakeReservation(Int64)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: When overridden in a derived class, allocates a reservation of the specified size.\n  syntax:\n    content: protected abstract void MakeReservation (long size);\n    parameters:\n    - id: size\n      type: System.Int64\n      description: The size of the reservation to allocate.\n  overload: System.IO.Log.ReservationCollection.MakeReservation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.Remove(System.Int64)\n  id: Remove(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: Remove(Int64)\n  nameWithType: ReservationCollection.Remove(Int64)\n  fullName: System.IO.Log.ReservationCollection.Remove(Int64)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Releases a reservation of the specified size, if one has been made. This method cannot be inherited.\n  remarks: ''\n  example:\n  - \"The following example shows how to manually make a reservation. Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.  \\n  \\n```  \\nReservationCollection reservations = recordSequence.CreateReservationCollection();  \\nreservations.Add(lengthOfUndoRecord);  \\ntry  \\n{  \\n   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  \\n}  \\ncatch (Exception)  \\n{  \\n   reservations.Remove(lengthOfUndoRecord);  \\n   throw;  \\n}  \\n  \\nrecordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  \\n```\"\n  syntax:\n    content: public bool Remove (long item);\n    parameters:\n    - id: item\n      type: System.Int64\n      description: The size of the reservation to release.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a reservation of the specified size was found and removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.Log.ReservationCollection.Remove*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: No reservation large enough to fit the provided record can be found in the specified reservation collection.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs when creating the archive snapshot.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log store is denied by the operating system.\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)\n  id: ReservationFreed(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: ReservationFreed(Int64)\n  nameWithType: ReservationCollection.ReservationFreed(Int64)\n  fullName: System.IO.Log.ReservationCollection.ReservationFreed(Int64)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: When overridden in a derived class, indicates that a reservation has been released.\n  remarks: When you inherit from <xref:System.IO.Log.ReservationCollection>, you must call this method when a reservation is released for a reason other than removing it from the collection.\n  syntax:\n    content: protected void ReservationFreed (long size);\n    parameters:\n    - id: size\n      type: System.Int64\n      description: The size of the reservation that has been released.\n  overload: System.IO.Log.ReservationCollection.ReservationFreed*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.ReservationMade(System.Int64)\n  id: ReservationMade(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: ReservationMade(Int64)\n  nameWithType: ReservationCollection.ReservationMade(Int64)\n  fullName: System.IO.Log.ReservationCollection.ReservationMade(Int64)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: When overridden in a derived class, indicates that a reservation has been made.\n  remarks: When you inherit from <xref:System.IO.Log.ReservationCollection>, you must call this method when a reservation is made outside of a call to <xref:System.IO.Log.ReservationCollection.Add%2A>.\n  syntax:\n    content: protected void ReservationMade (long size);\n    parameters:\n    - id: size\n      type: System.Int64\n      description: The size of the reservation that has been made.\n  overload: System.IO.Log.ReservationCollection.ReservationMade*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.IO.Log.ReservationCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ReservationCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.IO.Log.ReservationCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Returns an enumerator that can iterate through the <xref href=\"System.IO.Log.ReservationCollection\"></xref>. This method cannot be inherited.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator that can iterate through the <xref href=\"System.IO.Log.ReservationCollection\"></xref>.\n  overload: System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The operation is invalid for one of the following reasons:  \\n  \\n-   The enumeration has ended.  \\n  \\n-   The collection has been modified.  \\n  \\n-   The enumeration has not been started. A call to <xref:System.Collections.IEnumerator.MoveNext*> must be made.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log store is denied by the operating system.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.OutOfMemoryException\n  isExternal: true\n  name: System.OutOfMemoryException\n- uid: System.UnauthorizedAccessException\n  isExternal: true\n  name: System.UnauthorizedAccessException\n- uid: System.IO.Log.SequenceFullException\n  parent: System.IO.Log\n  isExternal: false\n  name: SequenceFullException\n  nameWithType: SequenceFullException\n  fullName: System.IO.Log.SequenceFullException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.IO.Log.ReservationCollection.#ctor\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: ReservationCollection()\n  nameWithType: ReservationCollection.ReservationCollection()\n  fullName: System.IO.Log.ReservationCollection.ReservationCollection()\n- uid: System.IO.Log.ReservationCollection.Add(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Add(Int64)\n  nameWithType: ReservationCollection.Add(Int64)\n  fullName: System.IO.Log.ReservationCollection.Add(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.IO.Log.ReservationCollection.Clear\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: ReservationCollection.Clear()\n  fullName: System.IO.Log.ReservationCollection.Clear()\n- uid: System.IO.Log.ReservationCollection.Contains(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Contains(Int64)\n  nameWithType: ReservationCollection.Contains(Int64)\n  fullName: System.IO.Log.ReservationCollection.Contains(Int64)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.Log.ReservationCollection.CopyTo(System.Int64[],System.Int32)\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: CopyTo(Int64[],Int32)\n  nameWithType: ReservationCollection.CopyTo(Int64[],Int32)\n  fullName: System.IO.Log.ReservationCollection.CopyTo(Int64[],Int32)\n- uid: System.Int64[]\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64[]\n  spec.csharp:\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: Int64[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IO.Log.ReservationCollection.Count\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Count\n  nameWithType: ReservationCollection.Count\n  fullName: System.IO.Log.ReservationCollection.Count\n- uid: System.IO.Log.ReservationCollection.Finalize\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Finalize()\n  nameWithType: ReservationCollection.Finalize()\n  fullName: System.IO.Log.ReservationCollection.Finalize()\n- uid: System.IO.Log.ReservationCollection.FreeReservation(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: FreeReservation(Int64)\n  nameWithType: ReservationCollection.FreeReservation(Int64)\n  fullName: System.IO.Log.ReservationCollection.FreeReservation(Int64)\n- uid: System.IO.Log.ReservationCollection.GetBestMatchingReservation(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: GetBestMatchingReservation(Int64)\n  nameWithType: ReservationCollection.GetBestMatchingReservation(Int64)\n  fullName: System.IO.Log.ReservationCollection.GetBestMatchingReservation(Int64)\n- uid: System.IO.Log.ReservationCollection.GetEnumerator\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ReservationCollection.GetEnumerator()\n  fullName: System.IO.Log.ReservationCollection.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{System.Int64}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<Int64>\n  nameWithType: IEnumerator<Int64>\n  fullName: System.Collections.Generic.IEnumerator<System.Int64>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<System.Int64>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.Log.ReservationCollection.IsReadOnly\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ReservationCollection.IsReadOnly\n  fullName: System.IO.Log.ReservationCollection.IsReadOnly\n- uid: System.IO.Log.ReservationCollection.MakeReservation(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: MakeReservation(Int64)\n  nameWithType: ReservationCollection.MakeReservation(Int64)\n  fullName: System.IO.Log.ReservationCollection.MakeReservation(Int64)\n- uid: System.IO.Log.ReservationCollection.Remove(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Remove(Int64)\n  nameWithType: ReservationCollection.Remove(Int64)\n  fullName: System.IO.Log.ReservationCollection.Remove(Int64)\n- uid: System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: ReservationFreed(Int64)\n  nameWithType: ReservationCollection.ReservationFreed(Int64)\n  fullName: System.IO.Log.ReservationCollection.ReservationFreed(Int64)\n- uid: System.IO.Log.ReservationCollection.ReservationMade(System.Int64)\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: ReservationMade(Int64)\n  nameWithType: ReservationCollection.ReservationMade(Int64)\n  fullName: System.IO.Log.ReservationCollection.ReservationMade(Int64)\n- uid: System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ReservationCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.IO.Log.ReservationCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.IO.Log.ReservationCollection.#ctor*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: ReservationCollection\n  nameWithType: ReservationCollection.ReservationCollection\n- uid: System.IO.Log.ReservationCollection.Add*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Add\n  nameWithType: ReservationCollection.Add\n- uid: System.IO.Log.ReservationCollection.Clear*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Clear\n  nameWithType: ReservationCollection.Clear\n- uid: System.IO.Log.ReservationCollection.Contains*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Contains\n  nameWithType: ReservationCollection.Contains\n- uid: System.IO.Log.ReservationCollection.CopyTo*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: ReservationCollection.CopyTo\n- uid: System.IO.Log.ReservationCollection.Count*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Count\n  nameWithType: ReservationCollection.Count\n- uid: System.IO.Log.ReservationCollection.Finalize*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Finalize\n  nameWithType: ReservationCollection.Finalize\n- uid: System.IO.Log.ReservationCollection.FreeReservation*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: FreeReservation\n  nameWithType: ReservationCollection.FreeReservation\n- uid: System.IO.Log.ReservationCollection.GetBestMatchingReservation*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: GetBestMatchingReservation\n  nameWithType: ReservationCollection.GetBestMatchingReservation\n- uid: System.IO.Log.ReservationCollection.GetEnumerator*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ReservationCollection.GetEnumerator\n- uid: System.IO.Log.ReservationCollection.IsReadOnly*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ReservationCollection.IsReadOnly\n- uid: System.IO.Log.ReservationCollection.MakeReservation*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: MakeReservation\n  nameWithType: ReservationCollection.MakeReservation\n- uid: System.IO.Log.ReservationCollection.Remove*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: Remove\n  nameWithType: ReservationCollection.Remove\n- uid: System.IO.Log.ReservationCollection.ReservationFreed*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: ReservationFreed\n  nameWithType: ReservationCollection.ReservationFreed\n- uid: System.IO.Log.ReservationCollection.ReservationMade*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: ReservationMade\n  nameWithType: ReservationCollection.ReservationMade\n- uid: System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.IO.Log.ReservationCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ReservationCollection.System.Collections.IEnumerable.GetEnumerator\n"}