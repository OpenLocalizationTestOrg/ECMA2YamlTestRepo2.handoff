{"nodes":[{"pos":[770,870],"content":"Provides data for the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSource.Inserting\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Provides data for the <xref href=\"System.Web.UI.WebControls.LinqDataSource.Inserting\"></xref> event."},{"pos":[883,2256],"content":"The LinqDataSourceInsertEventArgs object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. The <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property contains the data that will be inserted.       You can use the LinqDataSourceInsertEventArgs object to examine the data before the insert operation is executed in the data source. You can then validate the data, examine validation errors from the data class, or change a value before the update. You can also cancel the insert operation.       If the object that represents the data source throws a validation exception before it inserts the data, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class. You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property. If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> property contains `null`. If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> property to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The LinqDataSourceInsertEventArgs object is passed to any event handler for the &lt;xref:System.Web.UI.WebControls.LinqDataSource.Inserting&gt; event.","pos":[0,144],"source":"The LinqDataSourceInsertEventArgs object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event."},{"content":"The &lt;xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A&gt; property contains the data that will be inserted.","pos":[145,274],"source":" The <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property contains the data that will be inserted."},{"content":"You can use the LinqDataSourceInsertEventArgs object to examine the data before the insert operation is executed in the data source.","pos":[281,413]},{"content":"You can then validate the data, examine validation errors from the data class, or change a value before the update.","pos":[414,529]},{"content":"You can also cancel the insert operation.","pos":[530,571]},{"content":"If the object that represents the data source throws a validation exception before it inserts the data, the &lt;xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A&gt; property contains an instance of the &lt;xref:System.Web.UI.WebControls.LinqDataSourceValidationException&gt; class.","pos":[578,872],"source":"       If the object that represents the data source throws a validation exception before it inserts the data, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class."},{"content":"You can retrieve all the validation exceptions through the &lt;xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A&gt; property.","pos":[873,1027],"source":" You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property."},{"content":"If no validation exception is thrown, the &lt;xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A&gt; property contains <ph id=\"ph1\">`null`</ph>.","pos":[1028,1171],"source":" If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> property contains `null`."},{"content":"If you handle the validation exceptions and do not want the exception to be re-thrown, set the &lt;xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[1172,1369],"source":" If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> property to `true`."}]},{"pos":[4883,5000],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\"></xref> class."},{"pos":[5162,5205],"content":"An object that contains the data to insert.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains the data to insert.","pos":[0,43]}]},{"pos":[6039,6193],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and specifies the provided exception.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\"></xref> class and specifies the provided exception."},{"pos":[6454,6526],"content":"The exception that occurred when the data to insert was being validated.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception that occurred when the data to insert was being validated.","pos":[0,72]}]},{"pos":[7076,7174],"content":"Gets the exception that was thrown while the data was being validated before the insert operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the exception that was thrown while the data was being validated before the insert operation.","pos":[0,98]}]},{"pos":[7186,7463],"content":"If a validation exception is thrown before the insert operation is performed, the exception is stored in the Exception property. In a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you can retrieve the exception through the Exception property.","needQuote":true,"needEscape":true,"nodes":[{"content":"If a validation exception is thrown before the insert operation is performed, the exception is stored in the Exception property. In a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you can retrieve the exception through the Exception property.","pos":[0,277],"nodes":[{"content":"If a validation exception is thrown before the insert operation is performed, the exception is stored in the Exception property.","pos":[0,128]},{"content":"In a handler for the &lt;xref:System.Web.UI.WebControls.LinqDataSource.Inserting&gt; event, you can retrieve the exception through the Exception property.","pos":[129,277],"source":" In a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you can retrieve the exception through the Exception property."}]}]},{"pos":[8908,9017],"content":"The exception, if an error occurred; otherwise, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The exception, if an error occurred; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9606,9715],"content":"Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.","pos":[0,109]}]},{"pos":[9727,10153],"content":"You can create event handlers for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event to examine validation exceptions that occurred before the insert operation. If you handle the exception and do not want it to be thrown again, set the ExceptionHandled property to `true`. If you do not set the ExceptionHandled property to `true`, the exception will be propagated to the next event handler in the call stack.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can create event handlers for the &lt;xref:System.Web.UI.WebControls.LinqDataSource.Inserting&gt; event to examine validation exceptions that occurred before the insert operation.","pos":[0,177],"source":"You can create event handlers for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event to examine validation exceptions that occurred before the insert operation."},{"content":"If you handle the exception and do not want it to be thrown again, set the ExceptionHandled property to <ph id=\"ph1\">`true`</ph>.","pos":[178,289],"source":" If you handle the exception and do not want it to be thrown again, set the ExceptionHandled property to `true`."},{"content":"If you do not set the ExceptionHandled property to <ph id=\"ph1\">`true`</ph>, the exception will be propagated to the next event handler in the call stack.","pos":[290,426],"source":" If you do not set the ExceptionHandled property to `true`, the exception will be propagated to the next event handler in the call stack."}]},{"pos":[11517,11682],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the exception was handled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the exception was handled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12243,12292],"content":"Gets the object that contains the data to insert.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the object that contains the data to insert.","pos":[0,49]}]},{"pos":[12305,12787],"content":"The NewObject property contains the data that will be inserted into the data source. Create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event and retrieve the NewObject property in order to validate the data, change the data, or cancel the insert operation before the data operation is executed.       The NewObject property returns an object of type <xref:System.Object>. You can cast this object to the type of the class that represents the data.","needQuote":false,"needEscape":true,"nodes":[{"content":"The NewObject property contains the data that will be inserted into the data source. Create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event and retrieve the NewObject property in order to validate the data, change the data, or cancel the insert operation before the data operation is executed.       The NewObject property returns an object of type <xref:System.Object>. You can cast this object to the type of the class that represents the data.","pos":[0,480],"nodes":[{"content":"The NewObject property contains the data that will be inserted into the data source.","pos":[0,84]},{"content":"Create a handler for the &lt;xref:System.Web.UI.WebControls.LinqDataSource.Inserting&gt; event and retrieve the NewObject property in order to validate the data, change the data, or cancel the insert operation before the data operation is executed.","pos":[85,327],"source":" Create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event and retrieve the NewObject property in order to validate the data, change the data, or cancel the insert operation before the data operation is executed."},{"content":"The NewObject property returns an object of type &lt;xref:System.Object&gt;.","pos":[334,404],"source":"       The NewObject property returns an object of type <xref:System.Object>."},{"content":"You can cast this object to the type of the class that represents the data.","pos":[405,480]}]}]},{"pos":[13458,13501],"content":"An object that contains the data to insert.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains the data to insert.","pos":[0,43]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  id: LinqDataSourceInsertEventArgs\n  children:\n  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)\n  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)\n  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception\n  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled\n  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject\n  langs:\n  - csharp\n  name: LinqDataSourceInsertEventArgs\n  nameWithType: LinqDataSourceInsertEventArgs\n  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  type: Class\n  summary: Provides data for the <xref href=\"System.Web.UI.WebControls.LinqDataSource.Inserting\"></xref> event.\n  remarks: \"The LinqDataSourceInsertEventArgs object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. The <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property contains the data that will be inserted.  \\n  \\n You can use the LinqDataSourceInsertEventArgs object to examine the data before the insert operation is executed in the data source. You can then validate the data, examine validation errors from the data class, or change a value before the update. You can also cancel the insert operation.  \\n  \\n If the object that represents the data source throws a validation exception before it inserts the data, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class. You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property. If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> property contains `null`. If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> property to `true`.\"\n  example:\n  - \"The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \\n  \\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_258_1.cs)]\\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_258_1.vb)]  \\n  \\n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \\n  \\n```vb#  \\nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \\n        ByVal e As LinqDataSourceInsertEventArgs)  \\n    If (e.Exception IsNot Nothing) Then  \\n        For Each innerException As KeyValuePair(Of String, Exception) _  \\n               In e.Exception.InnerExceptions  \\n            Label1.Text &= innerException.Key & \\\": \\\" & _  \\n                innerException.Value.Message + \\\"<br />\\\"  \\n        Next  \\n        e.ExceptionHandled = True  \\n    End If  \\nEnd Sub  \\n```  \\n  \\n [C#]  \\n  \\n```  \\nprotected void LinqDataSource_Inserting(object sender,   \\n        LinqDataSourceInsertEventArgs e)  \\n{  \\n    if (e.Exception != null)  \\n    {  \\n        foreach (KeyValuePair<string, Exception> innerException in   \\n             e.Exception.InnerExceptions)  \\n        {  \\n        Label1.Text += innerException.Key + \\\": \\\" +   \\n            innerException.Value.Message + \\\"<br />\\\";  \\n        }  \\n        e.ExceptionHandled = true;  \\n    }  \\n}  \\n```\"\n  syntax:\n    content: 'public class LinqDataSourceInsertEventArgs : System.ComponentModel.CancelEventArgs'\n  inheritance:\n  - System.ComponentModel.CancelEventArgs\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  langs:\n  - csharp\n  name: LinqDataSourceInsertEventArgs(Object)\n  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)\n  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\"></xref> class.\n  syntax:\n    content: public LinqDataSourceInsertEventArgs (object newObject);\n    parameters:\n    - id: newObject\n      type: System.Object\n      description: An object that contains the data to insert.\n  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)\n  id: '#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)'\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  langs:\n  - csharp\n  name: LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)\n  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)\n  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\"></xref> class and specifies the provided exception.\n  syntax:\n    content: public LinqDataSourceInsertEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);\n    parameters:\n    - id: exception\n      type: System.Web.UI.WebControls.LinqDataSourceValidationException\n      description: The exception that occurred when the data to insert was being validated.\n  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception\n  id: Exception\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  langs:\n  - csharp\n  name: Exception\n  nameWithType: LinqDataSourceInsertEventArgs.Exception\n  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets the exception that was thrown while the data was being validated before the insert operation.\n  remarks: If a validation exception is thrown before the insert operation is performed, the exception is stored in the Exception property. In a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you can retrieve the exception through the Exception property.\n  example:\n  - \"The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \\n  \\n```vb#  \\nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \\n        ByVal e As LinqDataSourceInsertEventArgs)  \\n    If (e.Exception IsNot Nothing) Then  \\n        For Each innerException As KeyValuePair(Of String, Exception) _  \\n               In e.Exception.InnerExceptions  \\n            Label1.Text &= innerException.Key & \\\": \\\" & _  \\n                innerException.Value.Message + \\\"<br />\\\"  \\n        Next  \\n        e.ExceptionHandled = True  \\n    End If  \\nEnd Sub  \\n```  \\n  \\n [C#]  \\n  \\n```  \\nprotected void LinqDataSource_Inserting(object sender,   \\n        LinqDataSourceInsertEventArgs e)  \\n{  \\n    if (e.Exception != null)  \\n    {  \\n        foreach (KeyValuePair<string, Exception> innerException in   \\n             e.Exception.InnerExceptions)  \\n        {  \\n        Label1.Text += innerException.Key + \\\": \\\" +   \\n            innerException.Value.Message + \\\"<br />\\\";  \\n        }  \\n        e.ExceptionHandled = true;  \\n    }  \\n}  \\n```\"\n  syntax:\n    content: public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }\n    return:\n      type: System.Web.UI.WebControls.LinqDataSourceValidationException\n      description: The exception, if an error occurred; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled\n  id: ExceptionHandled\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  langs:\n  - csharp\n  name: ExceptionHandled\n  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled\n  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.\n  remarks: You can create event handlers for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event to examine validation exceptions that occurred before the insert operation. If you handle the exception and do not want it to be thrown again, set the ExceptionHandled property to `true`. If you do not set the ExceptionHandled property to `true`, the exception will be propagated to the next event handler in the call stack.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \\n  \\n```vb#  \\nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \\n        ByVal e As LinqDataSourceInsertEventArgs)  \\n    If (e.Exception IsNot Nothing) Then  \\n        For Each innerException As KeyValuePair(Of String, Exception) _  \\n               In e.Exception.InnerExceptions  \\n            Label1.Text &= innerException.Key & \\\": \\\" & _  \\n                innerException.Value.Message + \\\"<br />\\\"  \\n        Next  \\n        e.ExceptionHandled = True  \\n    End If  \\nEnd Sub  \\n```  \\n  \\n [C#]  \\n  \\n```  \\nprotected void LinqDataSource_Inserting(object sender,   \\n        LinqDataSourceInsertEventArgs e)  \\n{  \\n    if (e.Exception != null)  \\n    {  \\n        foreach (KeyValuePair<string, Exception> innerException in   \\n             e.Exception.InnerExceptions)  \\n        {  \\n        Label1.Text += innerException.Key + \\\": \\\" +   \\n            innerException.Value.Message + \\\"<br />\\\";  \\n        }  \\n        e.ExceptionHandled = true;  \\n    }  \\n}  \\n```\"\n  syntax:\n    content: public bool ExceptionHandled { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the exception was handled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject\n  id: NewObject\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  langs:\n  - csharp\n  name: NewObject\n  nameWithType: LinqDataSourceInsertEventArgs.NewObject\n  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets the object that contains the data to insert.\n  remarks: \"The NewObject property contains the data that will be inserted into the data source. Create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event and retrieve the NewObject property in order to validate the data, change the data, or cancel the insert operation before the data operation is executed.  \\n  \\n The NewObject property returns an object of type <xref:System.Object>. You can cast this object to the type of the class that represents the data.\"\n  example:\n  - \"The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. The object from the NewObject property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \\n  \\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_170_1.cs)]\\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_170_1.vb)]\"\n  syntax:\n    content: public object NewObject { get; }\n    return:\n      type: System.Object\n      description: An object that contains the data to insert.\n  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.CancelEventArgs\n  isExternal: false\n  name: System.ComponentModel.CancelEventArgs\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  isExternal: false\n  name: LinqDataSourceInsertEventArgs(Object)\n  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)\n  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  isExternal: false\n  name: LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)\n  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)\n  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException\n  parent: System.Web.UI.WebControls\n  isExternal: false\n  name: LinqDataSourceValidationException\n  nameWithType: LinqDataSourceValidationException\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: LinqDataSourceInsertEventArgs.Exception\n  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  isExternal: false\n  name: ExceptionHandled\n  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled\n  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  isExternal: false\n  name: NewObject\n  nameWithType: LinqDataSourceInsertEventArgs.NewObject\n  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  isExternal: false\n  name: LinqDataSourceInsertEventArgs\n  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception*\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: LinqDataSourceInsertEventArgs.Exception\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled*\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  isExternal: false\n  name: ExceptionHandled\n  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled\n- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject*\n  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs\n  isExternal: false\n  name: NewObject\n  nameWithType: LinqDataSourceInsertEventArgs.NewObject\n"}