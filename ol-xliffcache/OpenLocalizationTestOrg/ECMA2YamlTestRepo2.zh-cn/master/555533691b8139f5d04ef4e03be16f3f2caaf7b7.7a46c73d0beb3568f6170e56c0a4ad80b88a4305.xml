{"nodes":[{"pos":[1248,1406],"content":"Used to specify the type of event, and its arguments (if any)  to be generated as part of the rendering of text to speech by a custom synthetic speech engine.","needQuote":true,"needEscape":true,"nodes":[{"content":"Used to specify the type of event, and its arguments (if any)  to be generated as part of the rendering of text to speech by a custom synthetic speech engine.","pos":[0,158]}]},{"pos":[1418,1965],"content":"A custom speech synthesis engine requests the generation of events under the Speech Platform by providing an appropriate SpeechEventInfo instance to <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.AddEvents%2A> member of the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> engine site object passed to implementations of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A custom speech synthesis engine requests the generation of events under the Speech Platform by providing an appropriate SpeechEventInfo instance to &lt;xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.AddEvents%2A&gt; member of the &lt;xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite&gt; engine site object passed to implementations of &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A&gt;, &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A&gt;, and &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A&gt;.","pos":[0,547],"source":"A custom speech synthesis engine requests the generation of events under the Speech Platform by providing an appropriate SpeechEventInfo instance to <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.AddEvents%2A> member of the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> engine site object passed to implementations of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>."}]},{"pos":[6450,6546],"content":"Constucts an appropriate <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Constucts an appropriate <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref>."},{"pos":[6559,7290],"content":"Permitted values used for `parameterType`, `param1`, and `param2` and their meaning is dictated by the type of event being requested, as specified by the member of <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> used for `eventId`.       For detailed information on appropriate values for `parameterType`, `param1`, and `param2`, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>       The type of the events which can be handled by the Speech platform infrastructure can be obtained through the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the synthesizer engine site implementation of <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Permitted values used for <ph id=\"ph1\">`parameterType`</ph>, <ph id=\"ph2\">`param1`</ph>, and <ph id=\"ph3\">`param2`</ph> and their meaning is dictated by the type of event being requested, as specified by the member of &lt;xref:System.Speech.Synthesis.TtsEngine.TtsEventId&gt; used for <ph id=\"ph4\">`eventId`</ph>.","pos":[0,235],"source":"Permitted values used for `parameterType`, `param1`, and `param2` and their meaning is dictated by the type of event being requested, as specified by the member of <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> used for `eventId`."},{"content":"For detailed information on appropriate values for <ph id=\"ph1\">`parameterType`</ph>, <ph id=\"ph2\">`param1`</ph>, and <ph id=\"ph3\">`param2`</ph>, see documentation for &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A&gt;       The type of the events which can be handled by the Speech platform infrastructure can be obtained through the &lt;xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A&gt; property on the synthesizer engine site implementation of &lt;xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite&gt;.","pos":[242,727],"source":"       For detailed information on appropriate values for `parameterType`, `param1`, and `param2`, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>       The type of the events which can be handled by the Speech platform infrastructure can be obtained through the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the synthesizer engine site implementation of <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>."}]},{"pos":[11119,11340],"content":"An instance of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.TtsEventId\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> indicating the sort of Speech platform event the <bpt id=\"p2\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object is to handle.","needQuote":true,"needEscape":true,"source":"An instance of <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEventId\"></xref> indicating the sort of Speech platform event the <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object is to handle."},{"pos":[11409,11681],"content":"An instance of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.EventParameterType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> indicating how the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> reference of <ph id=\"ph1\">`param2`</ph> is to be interpreted, and, by implication, the use of <ph id=\"ph2\">`param1`</ph>.","needQuote":true,"needEscape":true,"source":"An instance of <xref href=\"System.Speech.Synthesis.TtsEngine.EventParameterType\"></xref> indicating how the <xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"></xref> reference of `param2` is to be interpreted, and, by implication, the use of `param1`."},{"pos":[11744,12045],"content":"An integer value to be passed to the Speech platform when the event requested by the instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> to be constructed is generated.       The exact meaning of this integer is implicitly determined by the value of `parameterType`.","needQuote":false,"needEscape":true,"nodes":[{"content":"An integer value to be passed to the Speech platform when the event requested by the instance of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be constructed is generated.","pos":[0,199],"source":"An integer value to be passed to the Speech platform when the event requested by the instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> to be constructed is generated."},{"content":"The exact meaning of this integer is implicitly determined by the value of <ph id=\"ph1\">`parameterType`</ph>.","pos":[206,297],"source":"       The exact meaning of this integer is implicitly determined by the value of `parameterType`."}]},{"pos":[12110,12613],"content":"A <xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"></xref> instance referencing an object. to be passed to the Speech platform when the event requested by the instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> to be constructed is generated.       The type which must be referenced is explicitly defined by the value `parameterType`. The value <xref uid=\"langword_csharp_System.IntPtr.Zero\" name=\"System.IntPtr.Zero\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance referencing an object.","pos":[0,112],"source":"A <xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"></xref> instance referencing an object."},{"content":"to be passed to the Speech platform when the event requested by the instance of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be constructed is generated.","pos":[113,295],"source":" to be passed to the Speech platform when the event requested by the instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> to be constructed is generated."},{"content":"The type which must be referenced is explicitly defined by the value <ph id=\"ph1\">`parameterType`</ph>.","pos":[302,387],"source":"       The type which must be referenced is explicitly defined by the value `parameterType`."},{"content":"The value <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_System.IntPtr.Zero\" name=\"System.IntPtr.Zero\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[388,487],"source":" The value <xref uid=\"langword_csharp_System.IntPtr.Zero\" name=\"System.IntPtr.Zero\" href=\"\"></xref>."}]},{"pos":[13163,13292],"content":"Determines whether a specified object is an instance of <ph id=\"ph1\">`SpeechEventInfo`</ph> and equal to the current instance of <ph id=\"ph2\">`SpeechEventInfo`</ph>.","needQuote":true,"needEscape":true,"source":"Determines whether a specified object is an instance of `SpeechEventInfo` and equal to the current instance of `SpeechEventInfo`."},{"pos":[13433,13456],"content":"The object to evaluate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to evaluate.","pos":[0,23]}]},{"pos":[13515,13773],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> is equal to the current <bpt id=\"p3\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is equal to the current <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14422,14532],"content":"Determines whether a specified <ph id=\"ph1\">`SpeechEventInfo`</ph> object is equal to the current instance of <ph id=\"ph2\">`SpeechEventInfo`</ph>.","needQuote":true,"needEscape":true,"source":"Determines whether a specified `SpeechEventInfo` object is equal to the current instance of `SpeechEventInfo`."},{"pos":[14747,14841],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to evaluate.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object to evaluate."},{"pos":[14900,15160],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p2\">&lt;/code&gt;</ept> is equal to the current <bpt id=\"p3\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>other</code> is equal to the current <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15663,15813],"content":"Gets and set the Speech platform event which an instance of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is used to request.","needQuote":true,"needEscape":true,"source":"Gets and set the Speech platform event which an instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> is used to request."},{"pos":[19941,20219],"content":"Returns a member of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.TtsEventId\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_short\" name=\"short\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, indicating the event type the <bpt id=\"p3\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object is to generate.","needQuote":true,"needEscape":true,"source":"Returns a member of <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEventId\"></xref> as a <xref uid=\"langword_csharp_short\" name=\"short\" href=\"\"></xref>, indicating the event type the <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object is to generate."},{"pos":[20747,20799],"content":"Provides a hash code for a <ph id=\"ph1\">`SpeechEventInfo`</ph> object.","needQuote":true,"needEscape":true,"source":"Provides a hash code for a `SpeechEventInfo` object."},{"pos":[20934,21030],"content":"A hash code for a <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A hash code for a <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object."},{"pos":[21859,21923],"content":"Determines whether two instances of <ph id=\"ph1\">`SpeechEventInfo`</ph> are equal.","needQuote":true,"needEscape":true,"source":"Determines whether two instances of `SpeechEventInfo` are equal."},{"pos":[22210,22315],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to compare to <ph id=\"ph1\">`event2`</ph>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object to compare to `event2`."},{"pos":[22414,22519],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to compare to <ph id=\"ph1\">`event1`</ph>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object to compare to `event1`."},{"pos":[22578,22772],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">event1</ph><ept id=\"p2\">&lt;/code&gt;</ept> is the same as <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">event2</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>event1</code> is the same as <code>event2</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[23611,23679],"content":"Determines whether two instances of <ph id=\"ph1\">`SpeechEventInfo`</ph> are not equal.","needQuote":true,"needEscape":true,"source":"Determines whether two instances of `SpeechEventInfo` are not equal."},{"pos":[23968,24073],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to compare to <ph id=\"ph1\">`event2`</ph>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object to compare to `event2`."},{"pos":[24172,24277],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to compare to <ph id=\"ph1\">`event1`</ph>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object to compare to `event1`."},{"pos":[24336,24533],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">event1</ph><ept id=\"p2\">&lt;/code&gt;</ept> is different from <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">event2</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>event1</code> is different from <code>event2</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[25038,25340],"content":"Gets and set the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_integer\" name=\"integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">param1</ph><ept id=\"p2\">&lt;/code&gt;</ept> in the constructor) to be passed to the Speech platform to generate an event the current instance of <bpt id=\"p3\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> is used to request.","needQuote":true,"needEscape":true,"source":"Gets and set the <xref uid=\"langword_csharp_integer\" name=\"integer\" href=\"\"></xref> value (<code>param1</code> in the constructor) to be passed to the Speech platform to generate an event the current instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> is used to request."},{"pos":[25353,25876],"content":"The requirements and meaning of Param1 property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance.       For detailed information on how use Param1, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The requirements and meaning of Param1 property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance.       For detailed information on how use Param1, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.","pos":[0,521],"nodes":[{"content":"The requirements and meaning of Param1 property of &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt; are uniquely determined by the values of the &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A&gt; and &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A&gt; properties the &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt; instance.","pos":[0,380],"source":"The requirements and meaning of Param1 property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance."},{"content":"For detailed information on how use Param1, see documentation for &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A&gt;.","pos":[387,521],"source":"       For detailed information on how use Param1, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>."}]}]},{"pos":[29987,30234],"content":"Returns the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_integer\" name=\"integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be passed to Speech platform when the event specified by the current instance of <bpt id=\"p2\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is generated.","needQuote":true,"needEscape":true,"source":"Returns the <xref uid=\"langword_csharp_integer\" name=\"integer\" href=\"\"></xref> to be passed to Speech platform when the event specified by the current instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> is generated."},{"pos":[30732,31072],"content":"Gets and set the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">param2</ph><ept id=\"p2\">&lt;/code&gt;</ept> in the constructor) referencing the object to be passed to the Speech platform to generate an event the current instance of <bpt id=\"p3\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> is used to request.","needQuote":true,"needEscape":true,"source":"Gets and set the <xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"></xref> instance (<code>param2</code> in the constructor) referencing the object to be passed to the Speech platform to generate an event the current instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> is used to request."},{"pos":[31085,31633],"content":"The requirements on the `System.IntPtr` reference of the Param2 property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance.       For detailed information on how use Param2, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The requirements on the <ph id=\"ph1\">`System.IntPtr`</ph> reference of the Param2 property of &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt; are uniquely determined by the values of the &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A&gt; and &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A&gt; properties the &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt; instance.","pos":[0,405],"source":"The requirements on the `System.IntPtr` reference of the Param2 property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance."},{"content":"For detailed information on how use Param2, see documentation for &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A&gt;.","pos":[412,546],"source":"       For detailed information on how use Param2, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>."}]},{"pos":[35748,36030],"content":"Returns the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> referencing the object to be passed to Speech platform when the event specified by the current instance of <bpt id=\"p2\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is generated.","needQuote":true,"needEscape":true,"source":"Returns the <xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"></xref> referencing the object to be passed to Speech platform when the event specified by the current instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> is generated."},{"pos":[36563,36866],"content":"Returns the data type of the object pointed to by the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> returned by the &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*&gt; parameter on the current <bpt id=\"p2\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns the data type of the object pointed to by the <xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"></xref> returned by the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*> parameter on the current <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object."},{"pos":[36879,37487],"content":"The requirements on the `System.IntPtr` reference of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A> property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and ParameterType properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance.       For detailed information on how use <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The requirements on the <ph id=\"ph1\">`System.IntPtr`</ph> reference of the &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A&gt; property of &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt; are uniquely determined by the values of the &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A&gt; and ParameterType properties the &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt; instance.","pos":[0,405],"source":"The requirements on the `System.IntPtr` reference of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A> property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and ParameterType properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance."},{"content":"For detailed information on how use &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A&gt;, see documentation for &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A&gt;.","pos":[412,606],"source":"       For detailed information on how use <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>."}]},{"pos":[41614,42166],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_short\" name=\"short\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value corresponding to a member of the <bpt id=\"p2\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.EventParameterType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> enumeration and indicating the data type of the object pointed to by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> returned by the &lt;xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*&gt; parameter and used as the second argument for the constructor of the current <bpt id=\"p4\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_short\" name=\"short\" href=\"\"></xref> value corresponding to a member of the <xref href=\"System.Speech.Synthesis.TtsEngine.EventParameterType\"></xref> enumeration and indicating the data type of the object pointed to by the <xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"></xref> returned by the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*> parameter and used as the second argument for the constructor of the current <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  id: SpeechEventInfo\n  children:\n  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor(System.Int16,System.Int16,System.Int32,System.IntPtr)\n  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Object)\n  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId\n  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode\n  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1\n  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2\n  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType\n  langs:\n  - csharp\n  name: SpeechEventInfo\n  nameWithType: SpeechEventInfo\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  type: Struct\n  summary: Used to specify the type of event, and its arguments (if any)  to be generated as part of the rendering of text to speech by a custom synthetic speech engine.\n  remarks: A custom speech synthesis engine requests the generation of events under the Speech Platform by providing an appropriate SpeechEventInfo instance to <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.AddEvents%2A> member of the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> engine site object passed to implementations of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.\n  example:\n  - \"The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, SpeechEventInfo, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \\n  \\n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \\n  \\n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \\n  \\n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \\n  \\n    -   Translates Americanism to Britishisms in the text to be spoken.  \\n  \\n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a SpeechEventInfo instance is used to create an event to drive a synthesizer progress meter is created.  \\n  \\n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \\n  \\n```  \\nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \\nprivate readonly char[] spaces = new char[] { ' ', '\\\\t', '\\\\r', '\\\\n' };  \\ninternal struct UsVsUk  \\n{  \\n  internal string UK;  \\n  internal string US;  \\n}  \\n  \\noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \\n{  \\n  TextFragment [] newFrags=new TextFragment[frags.Length];  \\n  \\n  for (int i=0;i<frags.Length;i++){  \\n    newFrags[i].State=frags[i].State;  \\n    //truncate  \\n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \\n                               frags[i].TextLength);  \\n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \\n    newFrags[i].TextOffset = 0;  \\n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \\n      //Us to UK conversion  \\n      foreach (UsVsUk term in TransList) {  \\n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \\n      }  \\n      //Generate progress meter events if supported  \\n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \\n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \\n  \\n      foreach (string s in subs) {  \\n        int offset = newFrags[i].TextOffset;  \\n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \\n                (Int16)EventParameterType.Undefined,   \\n                 s.Length, new IntPtr(offset));  \\n        offset += s.Length;  \\n        if (s.Trim().Length > 0) {  \\n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \\n          events[0] = spEvent;  \\n          site.AddEvents(events, 1);  \\n        }  \\n      }  \\n      }  \\n    }  \\n  }  \\n  \\n  _baseSynthesize.Speak(newFrags, wfx, site);  \\n  \\n}  \\n```\"\n  syntax:\n    content: >-\n      [System.ComponentModel.ImmutableObject(true)]\n\n      public struct SpeechEventInfo : IEquatable<System.Speech.Synthesis.TtsEngine.SpeechEventInfo>\n  inheritance:\n  - System.ValueType\n  implements:\n  - System.IEquatable<System.Speech.Synthesis.TtsEngine.SpeechEventInfo>\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor(System.Int16,System.Int16,System.Int32,System.IntPtr)\n  id: '#ctor(System.Int16,System.Int16,System.Int32,System.IntPtr)'\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  langs:\n  - csharp\n  name: SpeechEventInfo(Int16,Int16,Int32,IntPtr)\n  nameWithType: SpeechEventInfo.SpeechEventInfo(Int16,Int16,Int32,IntPtr)\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.SpeechEventInfo(Int16,Int16,Int32,IntPtr)\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Constucts an appropriate <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref>.\n  remarks: \"Permitted values used for `parameterType`, `param1`, and `param2` and their meaning is dictated by the type of event being requested, as specified by the member of <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> used for `eventId`.  \\n  \\n For detailed information on appropriate values for `parameterType`, `param1`, and `param2`, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>  \\n  \\n The type of the events which can be handled by the Speech platform infrastructure can be obtained through the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the synthesizer engine site implementation of <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>.\"\n  example:\n  - \"The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \\n  \\n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \\n  \\n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \\n  \\n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \\n  \\n    -   Translates Americanism to Britishisms in the text to be spoken.  \\n  \\n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \\n  \\n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \\n  \\n```  \\nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \\nprivate readonly char[] spaces = new char[] { ' ', '\\\\t', '\\\\r', '\\\\n' };  \\ninternal struct UsVsUk  \\n{  \\n  internal string UK;  \\n  internal string US;  \\n}  \\n  \\noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \\n{  \\n  TextFragment [] newFrags=new TextFragment[frags.Length];  \\n  \\n  for (int i=0;i<frags.Length;i++){  \\n    newFrags[i].State=frags[i].State;  \\n    //truncate  \\n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \\n                               frags[i].TextLength);  \\n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \\n    newFrags[i].TextOffset = 0;  \\n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \\n      //Us to UK conversion  \\n      foreach (UsVsUk term in TransList) {  \\n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \\n      }  \\n      //Generate progress meter events if supported  \\n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \\n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \\n  \\n      foreach (string s in subs) {  \\n        int offset = newFrags[i].TextOffset;  \\n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \\n                (Int16)EventParameterType.Undefined,   \\n                 s.Length, new IntPtr(offset));  \\n        offset += s.Length;  \\n        if (s.Trim().Length > 0) {  \\n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \\n          events[0] = spEvent;  \\n          site.AddEvents(events, 1);  \\n        }  \\n      }  \\n      }  \\n    }  \\n  }  \\n  \\n  _baseSynthesize.Speak(newFrags, wfx, site);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public SpeechEventInfo (short eventId, short parameterType, int param1, IntPtr param2);\n    parameters:\n    - id: eventId\n      type: System.Int16\n      description: An instance of <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEventId\"></xref> indicating the sort of Speech platform event the <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object is to handle.\n    - id: parameterType\n      type: System.Int16\n      description: An instance of <xref href=\"System.Speech.Synthesis.TtsEngine.EventParameterType\"></xref> indicating how the <xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"></xref> reference of `param2` is to be interpreted, and, by implication, the use of `param1`.\n    - id: param1\n      type: System.Int32\n      description: \"An integer value to be passed to the Speech platform when the event requested by the instance of <xref href=\\\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\\\"></xref> to be constructed is generated.  \\n  \\n The exact meaning of this integer is implicitly determined by the value of `parameterType`.\"\n    - id: param2\n      type: System.IntPtr\n      description: \"A <xref uid=\\\"langword_csharp_System.IntPtr\\\" name=\\\"System.IntPtr\\\" href=\\\"\\\"></xref> instance referencing an object. to be passed to the Speech platform when the event requested by the instance of <xref href=\\\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\\\"></xref> to be constructed is generated.  \\n  \\n The type which must be referenced is explicitly defined by the value `parameterType`. The value <xref uid=\\\"langword_csharp_System.IntPtr.Zero\\\" name=\\\"System.IntPtr.Zero\\\" href=\\\"\\\"></xref>.\"\n  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: SpeechEventInfo.Equals(Object)\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Determines whether a specified object is an instance of `SpeechEventInfo` and equal to the current instance of `SpeechEventInfo`.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to evaluate.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is equal to the current <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  id: Equals(System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  langs:\n  - csharp\n  name: Equals(SpeechEventInfo)\n  nameWithType: SpeechEventInfo.Equals(SpeechEventInfo)\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(SpeechEventInfo)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Determines whether a specified `SpeechEventInfo` object is equal to the current instance of `SpeechEventInfo`.\n  syntax:\n    content: public bool Equals (System.Speech.Synthesis.TtsEngine.SpeechEventInfo other);\n    parameters:\n    - id: other\n      type: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n      description: The <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object to evaluate.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>other</code> is equal to the current <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId\n  id: EventId\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  langs:\n  - csharp\n  name: EventId\n  nameWithType: SpeechEventInfo.EventId\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Gets and set the Speech platform event which an instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> is used to request.\n  remarks: ''\n  example:\n  - \"The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \\n  \\n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \\n  \\n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \\n  \\n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \\n  \\n    -   Translates Americanism to Britishisms in the text to be spoken.  \\n  \\n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \\n  \\n         The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including EventId are used to log the event generated through the `LogSpeechEvent` method.  \\n  \\n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \\n  \\n```  \\nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \\nprivate readonly char[] spaces = new char[] { ' ', '\\\\t', '\\\\r', '\\\\n' };  \\ninternal struct UsVsUk  \\n{  \\n  internal string UK;  \\n  internal string US;  \\n}  \\n  \\noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \\n{  \\n  TextFragment [] newFrags=new TextFragment[frags.Length];  \\n  \\n  for (int i=0;i<frags.Length;i++){  \\n    newFrags[i].State=frags[i].State;  \\n    //truncate  \\n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \\n                               frags[i].TextLength);  \\n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \\n    newFrags[i].TextOffset = 0;  \\n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \\n      //Us to UK conversion  \\n      foreach (UsVsUk term in TransList) {  \\n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \\n      }  \\n      //Generate progress meter events if supported  \\n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \\n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \\n  \\n      foreach (string s in subs) {  \\n        int offset = newFrags[i].TextOffset;  \\n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \\n                (Int16)EventParameterType.Undefined,   \\n                 s.Length, new IntPtr(offset));  \\n         LogSpeechEvent(spEvent.EventId,   \\n                        spEvent.ParameterType,   \\n                        spEvent.Param1,  \\n                        spEvent.Param2);  \\n        offset += s.Length;  \\n        if (s.Trim().Length > 0) {  \\n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \\n          events[0] = spEvent;  \\n          site.AddEvents(events, 1);  \\n        }  \\n      }  \\n      }  \\n    }  \\n  }  \\n  \\n  _baseSynthesize.Speak(newFrags, wfx, site);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public short EventId { get; }\n    return:\n      type: System.Int16\n      description: Returns a member of <xref href=\"System.Speech.Synthesis.TtsEngine.TtsEventId\"></xref> as a <xref uid=\"langword_csharp_short\" name=\"short\" href=\"\"></xref>, indicating the event type the <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object is to generate.\n  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: SpeechEventInfo.GetHashCode()\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Provides a hash code for a `SpeechEventInfo` object.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for a <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object.\n  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  id: op_Equality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  langs:\n  - csharp\n  name: op_Equality(SpeechEventInfo,SpeechEventInfo)\n  nameWithType: SpeechEventInfo.op_Equality(SpeechEventInfo,SpeechEventInfo)\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(SpeechEventInfo,SpeechEventInfo)\n  type: Operator\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Determines whether two instances of `SpeechEventInfo` are equal.\n  syntax:\n    content: public static bool op_Equality (System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2);\n    parameters:\n    - id: event1\n      type: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n      description: The <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object to compare to `event2`.\n    - id: event2\n      type: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n      description: The <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object to compare to `event1`.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>event1</code> is the same as <code>event2</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  id: op_Inequality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  langs:\n  - csharp\n  name: op_Inequality(SpeechEventInfo,SpeechEventInfo)\n  nameWithType: SpeechEventInfo.op_Inequality(SpeechEventInfo,SpeechEventInfo)\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(SpeechEventInfo,SpeechEventInfo)\n  type: Operator\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Determines whether two instances of `SpeechEventInfo` are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2);\n    parameters:\n    - id: event1\n      type: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n      description: The <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object to compare to `event2`.\n    - id: event2\n      type: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n      description: The <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object to compare to `event1`.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>event1</code> is different from <code>event2</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1\n  id: Param1\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  langs:\n  - csharp\n  name: Param1\n  nameWithType: SpeechEventInfo.Param1\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Gets and set the <xref uid=\"langword_csharp_integer\" name=\"integer\" href=\"\"></xref> value (<code>param1</code> in the constructor) to be passed to the Speech platform to generate an event the current instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> is used to request.\n  remarks: \"The requirements and meaning of Param1 property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance.  \\n  \\n For detailed information on how use Param1, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.\"\n  example:\n  - \"The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \\n  \\n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \\n  \\n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \\n  \\n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \\n  \\n    -   Translates Americanism to Britishisms in the text to be spoken.  \\n  \\n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \\n  \\n         The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including Param1 are used to log the event generated through the `LogSpeechEvent` method.  \\n  \\n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \\n  \\n```  \\nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \\nprivate readonly char[] spaces = new char[] { ' ', '\\\\t', '\\\\r', '\\\\n' };  \\ninternal struct UsVsUk  \\n{  \\n  internal string UK;  \\n  internal string US;  \\n}  \\n  \\noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \\n{  \\n  TextFragment [] newFrags=new TextFragment[frags.Length];  \\n  \\n  for (int i=0;i<frags.Length;i++){  \\n    newFrags[i].State=frags[i].State;  \\n    //truncate  \\n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \\n                               frags[i].TextLength);  \\n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \\n    newFrags[i].TextOffset = 0;  \\n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \\n      //Us to UK conversion  \\n      foreach (UsVsUk term in TransList) {  \\n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \\n      }  \\n      //Generate progress meter events if supported  \\n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \\n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \\n  \\n      foreach (string s in subs) {  \\n        int offset = newFrags[i].TextOffset;  \\n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \\n                (Int16)EventParameterType.Undefined,   \\n                 s.Length, new IntPtr(offset));  \\n         LogSpeechEvent(spEvent.EventId,   \\n                        spEvent.ParameterType,   \\n                        spEvent.Param1,  \\n                        spEvent.Param2);  \\n        offset += s.Length;  \\n        if (s.Trim().Length > 0) {  \\n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \\n          events[0] = spEvent;  \\n          site.AddEvents(events, 1);  \\n        }  \\n      }  \\n      }  \\n    }  \\n  }  \\n  \\n  _baseSynthesize.Speak(newFrags, wfx, site);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public int Param1 { get; }\n    return:\n      type: System.Int32\n      description: Returns the <xref uid=\"langword_csharp_integer\" name=\"integer\" href=\"\"></xref> to be passed to Speech platform when the event specified by the current instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> is generated.\n  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2\n  id: Param2\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  langs:\n  - csharp\n  name: Param2\n  nameWithType: SpeechEventInfo.Param2\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Gets and set the <xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"></xref> instance (<code>param2</code> in the constructor) referencing the object to be passed to the Speech platform to generate an event the current instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> is used to request.\n  remarks: \"The requirements on the `System.IntPtr` reference of the Param2 property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance.  \\n  \\n For detailed information on how use Param2, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.\"\n  example:\n  - \"The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \\n  \\n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \\n  \\n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \\n  \\n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \\n  \\n    -   Translates Americanism to Britishisms in the text to be spoken.  \\n  \\n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \\n  \\n         The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including Param2 are used to log the event generated through the `LogSpeechEvent` method.  \\n  \\n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \\n  \\n```  \\nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \\nprivate readonly char[] spaces = new char[] { ' ', '\\\\t', '\\\\r', '\\\\n' };  \\ninternal struct UsVsUk  \\n{  \\n  internal string UK;  \\n  internal string US;  \\n}  \\n  \\noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \\n{  \\n  TextFragment [] newFrags=new TextFragment[frags.Length];  \\n  \\n  for (int i=0;i<frags.Length;i++){  \\n    newFrags[i].State=frags[i].State;  \\n    //truncate  \\n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \\n                               frags[i].TextLength);  \\n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \\n    newFrags[i].TextOffset = 0;  \\n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \\n      //Us to UK conversion  \\n      foreach (UsVsUk term in TransList) {  \\n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \\n      }  \\n      //Generate progress meter events if supported  \\n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \\n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \\n  \\n      foreach (string s in subs) {  \\n        int offset = newFrags[i].TextOffset;  \\n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \\n                (Int16)EventParameterType.Undefined,   \\n                 s.Length, new IntPtr(offset));  \\n         LogSpeechEvent(spEvent.EventId,   \\n                        spEvent.ParameterType,   \\n                        spEvent.Param1,  \\n                        spEvent.Param2);  \\n        offset += s.Length;  \\n        if (s.Trim().Length > 0) {  \\n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \\n          events[0] = spEvent;  \\n          site.AddEvents(events, 1);  \\n        }  \\n      }  \\n      }  \\n    }  \\n  }  \\n  \\n  _baseSynthesize.Speak(newFrags, wfx, site);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public IntPtr Param2 { get; }\n    return:\n      type: System.IntPtr\n      description: Returns the <xref uid=\"langword_csharp_System.IntPtr\" name=\"System.IntPtr\" href=\"\"></xref> referencing the object to be passed to Speech platform when the event specified by the current instance of <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> is generated.\n  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType\n  id: ParameterType\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  langs:\n  - csharp\n  name: ParameterType\n  nameWithType: SpeechEventInfo.ParameterType\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Returns the data type of the object pointed to by the <xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"></xref> returned by the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*> parameter on the current <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object.\n  remarks: \"The requirements on the `System.IntPtr` reference of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A> property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and ParameterType properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance.  \\n  \\n For detailed information on how use <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.\"\n  example:\n  - \"The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \\n  \\n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \\n  \\n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \\n  \\n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \\n  \\n    -   Translates Americanism to Britishisms in the text to be spoken.  \\n  \\n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \\n  \\n         The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including ParameterType are used to log the event generated through the `LogSpeechEvent` method.  \\n  \\n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \\n  \\n```  \\nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \\nprivate readonly char[] spaces = new char[] { ' ', '\\\\t', '\\\\r', '\\\\n' };  \\ninternal struct UsVsUk  \\n{  \\n  internal string UK;  \\n  internal string US;  \\n}  \\n  \\noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \\n{  \\n  TextFragment [] newFrags=new TextFragment[frags.Length];  \\n  \\n  for (int i=0;i<frags.Length;i++){  \\n    newFrags[i].State=frags[i].State;  \\n    //truncate  \\n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \\n                               frags[i].TextLength);  \\n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \\n    newFrags[i].TextOffset = 0;  \\n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \\n      //Us to UK conversion  \\n      foreach (UsVsUk term in TransList) {  \\n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \\n      }  \\n      //Generate progress meter events if supported  \\n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \\n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \\n  \\n      foreach (string s in subs) {  \\n        int offset = newFrags[i].TextOffset;  \\n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \\n                (Int16)EventParameterType.Undefined,   \\n                 s.Length, new IntPtr(offset));  \\n         LogSpeechEvent(spEvent.EventId,   \\n                        spEvent.ParameterType,   \\n                        spEvent.Param1,  \\n                        spEvent.Param2);  \\n        offset += s.Length;  \\n        if (s.Trim().Length > 0) {  \\n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \\n          events[0] = spEvent;  \\n          site.AddEvents(events, 1);  \\n        }  \\n      }  \\n      }  \\n    }  \\n  }  \\n  \\n  _baseSynthesize.Speak(newFrags, wfx, site);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public short ParameterType { get; }\n    return:\n      type: System.Int16\n      description: A <xref uid=\"langword_csharp_short\" name=\"short\" href=\"\"></xref> value corresponding to a member of the <xref href=\"System.Speech.Synthesis.TtsEngine.EventParameterType\"></xref> enumeration and indicating the data type of the object pointed to by the <xref uid=\"langword_csharp_IntPtr\" name=\"IntPtr\" href=\"\"></xref> returned by the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*> parameter and used as the second argument for the constructor of the current <xref href=\"System.Speech.Synthesis.TtsEngine.SpeechEventInfo\"></xref> object.\n  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor(System.Int16,System.Int16,System.Int32,System.IntPtr)\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: SpeechEventInfo(Int16,Int16,Int32,IntPtr)\n  nameWithType: SpeechEventInfo.SpeechEventInfo(Int16,Int16,Int32,IntPtr)\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.SpeechEventInfo(Int16,Int16,Int32,IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: true\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Object)\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: SpeechEventInfo.Equals(Object)\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: Equals(SpeechEventInfo)\n  nameWithType: SpeechEventInfo.Equals(SpeechEventInfo)\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(SpeechEventInfo)\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  parent: System.Speech.Synthesis.TtsEngine\n  isExternal: false\n  name: SpeechEventInfo\n  nameWithType: SpeechEventInfo\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: EventId\n  nameWithType: SpeechEventInfo.EventId\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: SpeechEventInfo.GetHashCode()\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode()\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: op_Equality(SpeechEventInfo,SpeechEventInfo)\n  nameWithType: SpeechEventInfo.op_Equality(SpeechEventInfo,SpeechEventInfo)\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(SpeechEventInfo,SpeechEventInfo)\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: op_Inequality(SpeechEventInfo,SpeechEventInfo)\n  nameWithType: SpeechEventInfo.op_Inequality(SpeechEventInfo,SpeechEventInfo)\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(SpeechEventInfo,SpeechEventInfo)\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: Param1\n  nameWithType: SpeechEventInfo.Param1\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: Param2\n  nameWithType: SpeechEventInfo.Param2\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: ParameterType\n  nameWithType: SpeechEventInfo.ParameterType\n  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor*\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: SpeechEventInfo\n  nameWithType: SpeechEventInfo.SpeechEventInfo\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals*\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: Equals\n  nameWithType: SpeechEventInfo.Equals\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId*\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: EventId\n  nameWithType: SpeechEventInfo.EventId\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode*\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: GetHashCode\n  nameWithType: SpeechEventInfo.GetHashCode\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality*\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: op_Equality\n  nameWithType: SpeechEventInfo.op_Equality\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality*\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: op_Inequality\n  nameWithType: SpeechEventInfo.op_Inequality\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1*\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: Param1\n  nameWithType: SpeechEventInfo.Param1\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: Param2\n  nameWithType: SpeechEventInfo.Param2\n- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType*\n  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo\n  isExternal: false\n  name: ParameterType\n  nameWithType: SpeechEventInfo.ParameterType\n"}