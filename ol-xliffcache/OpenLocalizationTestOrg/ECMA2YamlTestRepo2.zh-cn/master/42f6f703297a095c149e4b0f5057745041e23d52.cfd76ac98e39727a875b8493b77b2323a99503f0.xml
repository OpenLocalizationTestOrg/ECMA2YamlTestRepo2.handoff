{"nodes":[{"pos":[1009,1236],"content":"Enables shared control of the message pump between <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> in interoperation scenarios.","needQuote":true,"needEscape":true,"source":"Enables shared control of the message pump between [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] and [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] in interoperation scenarios."},{"pos":[1249,2450],"content":"Although the class itself is static, all members of ComponentDispatcher are specific to a particular thread. For example, if you examine the value of <xref:System.Windows.Interop.ComponentDispatcher.IsThreadModal%2A> on two different threads, you might get different values.       The methods are static but they are backed by per-thread data structures.  The static methods allow singleton access but the ComponentDispatcher is sorting out the appropriate per-thread operations.       The owner of the message pump is defined by the code that calls the [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] function  [GetMessage](http://msdn.microsoft.com/library/ms644936.aspx). The owner calls <xref:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage%2A> for every keyboard message. This method raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage> event with the messages contained in the event data. If that event is not handled, the owner raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage> event with the messages contained in the event argument.      > [!NOTE] >  Only keyboard messages are supported.","needQuote":false,"needEscape":true,"nodes":[{"content":"Although the class itself is static, all members of ComponentDispatcher are specific to a particular thread.","pos":[0,108]},{"content":"For example, if you examine the value of &lt;xref:System.Windows.Interop.ComponentDispatcher.IsThreadModal%2A&gt; on two different threads, you might get different values.","pos":[109,274],"source":" For example, if you examine the value of <xref:System.Windows.Interop.ComponentDispatcher.IsThreadModal%2A> on two different threads, you might get different values."},{"content":"The methods are static but they are backed by per-thread data structures.","pos":[281,354]},{"content":"The static methods allow singleton access but the ComponentDispatcher is sorting out the appropriate per-thread operations.","pos":[356,479]},{"content":"The owner of the message pump is defined by the code that calls the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> function  <bpt id=\"p1\">[</bpt>GetMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/ms644936.aspx)</ept>.","pos":[486,694],"source":"       The owner of the message pump is defined by the code that calls the [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] function  [GetMessage](http://msdn.microsoft.com/library/ms644936.aspx)."},{"content":"The owner calls &lt;xref:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage%2A&gt; for every keyboard message.","pos":[695,810],"source":" The owner calls <xref:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage%2A> for every keyboard message."},{"content":"This method raises the &lt;xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage&gt; event with the messages contained in the event data.","pos":[811,956],"source":" This method raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage> event with the messages contained in the event data."},{"content":"If that event is not handled, the owner raises the &lt;xref:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage&gt; event with the messages contained in the event argument.","pos":[957,1138],"source":" If that event is not handled, the owner raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage> event with the messages contained in the event argument."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Only keyboard messages are supported.","pos":[1144,1194],"source":"      > [!NOTE] >  Only keyboard messages are supported."}]},{"pos":[3048,3086],"content":"Gets the last message that was raised.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the last message that was raised.","pos":[0,38]}]},{"pos":[3253,3270],"content":"The last message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The last message.","pos":[0,17]}]},{"pos":[3794,3829],"content":"Occurs when a thread becomes modal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a thread becomes modal.","pos":[0,35]}]},{"pos":[3967,3979],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4412,4468],"content":"Gets a value that indicates whether the thread is modal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the thread is modal.","pos":[0,56]}]},{"pos":[4592,4751],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the thread is modal; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the thread is modal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5266,5310],"content":"Occurs when a modal thread becomes nonmodal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a modal thread becomes nonmodal.","pos":[0,44]}]},{"pos":[5448,5460],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5872,5930],"content":"Called to indicate that a modal thread is no longer modal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called to indicate that a modal thread is no longer modal.","pos":[0,58]}]},{"pos":[6486,6530],"content":"Called to indicate that the thread is modal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called to indicate that the thread is modal.","pos":[0,44]}]},{"pos":[7088,7129],"content":"Called to indicate that a thread is idle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called to indicate that a thread is idle.","pos":[0,41]}]},{"pos":[7799,7863],"content":"Indicates that a new message is available for possible handling.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates that a new message is available for possible handling.","pos":[0,64]}]},{"pos":[7875,7956],"content":"The owner of the message pump should call this method for every keyboard message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The owner of the message pump should call this method for every keyboard message.","pos":[0,81]}]},{"pos":[8144,8180],"content":"The message and its associated data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message and its associated data.","pos":[0,36]}]},{"pos":[8239,8815],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if one of the modules listening to the message loop processed the message. The owner of the message loop should ignore the message. <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, if the message was not processed. In this case, the owner of the message pump should call the [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] function [TranslateMessage](http://msdn.microsoft.com/library/ms644955.aspx) followed by [DispatchMessage](http://msdn.microsoft.com/library/ms644934.aspx).","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if one of the modules listening to the message loop processed the message.","pos":[0,136],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if one of the modules listening to the message loop processed the message."},{"content":"The owner of the message loop should ignore the message.","pos":[137,193]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if the message was not processed.","pos":[194,291],"source":"<xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, if the message was not processed."},{"content":"In this case, the owner of the message pump should call the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> function <bpt id=\"p1\">[</bpt>TranslateMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/ms644955.aspx)</ept> followed by <bpt id=\"p2\">[</bpt>DispatchMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/ms644934.aspx)</ept>.","pos":[292,576],"source":" In this case, the owner of the message pump should call the [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] function [TranslateMessage](http://msdn.microsoft.com/library/ms644955.aspx) followed by [DispatchMessage](http://msdn.microsoft.com/library/ms644934.aspx)."}]},{"pos":[9350,9407],"content":"Occurs when the message pump receives a keyboard message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the message pump receives a keyboard message.","pos":[0,57]}]},{"pos":[9613,9625],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10040,10071],"content":"Occurs when the thread is idle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the thread is idle.","pos":[0,31]}]},{"pos":[10083,10214],"content":"If there are no messages in the queue, then the idle state announced by the ThreadIdle event is an efficient time to do processing.","needQuote":true,"needEscape":true,"nodes":[{"content":"If there are no messages in the queue, then the idle state announced by the ThreadIdle event is an efficient time to do processing.","pos":[0,131]}]},{"pos":[10346,10358],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10838,10895],"content":"Occurs when the message pump receives a keyboard message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the message pump receives a keyboard message.","pos":[0,57]}]},{"pos":[10907,11041],"content":"This event should be raised after <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage>, if that event is not handled.","needQuote":true,"needEscape":true,"nodes":[{"content":"This event should be raised after &lt;xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage&gt;, if that event is not handled.","pos":[0,134],"source":"This event should be raised after <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage>, if that event is not handled."}]},{"pos":[11251,11263],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Interop.ComponentDispatcher\n  id: ComponentDispatcher\n  children:\n  - System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage\n  - System.Windows.Interop.ComponentDispatcher.EnterThreadModal\n  - System.Windows.Interop.ComponentDispatcher.IsThreadModal\n  - System.Windows.Interop.ComponentDispatcher.LeaveThreadModal\n  - System.Windows.Interop.ComponentDispatcher.PopModal\n  - System.Windows.Interop.ComponentDispatcher.PushModal\n  - System.Windows.Interop.ComponentDispatcher.RaiseIdle\n  - System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)\n  - System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage\n  - System.Windows.Interop.ComponentDispatcher.ThreadIdle\n  - System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage\n  langs:\n  - csharp\n  name: ComponentDispatcher\n  nameWithType: ComponentDispatcher\n  fullName: System.Windows.Interop.ComponentDispatcher\n  type: Class\n  summary: Enables shared control of the message pump between [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] and [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] in interoperation scenarios.\n  remarks: \"Although the class itself is static, all members of ComponentDispatcher are specific to a particular thread. For example, if you examine the value of <xref:System.Windows.Interop.ComponentDispatcher.IsThreadModal%2A> on two different threads, you might get different values.  \\n  \\n The methods are static but they are backed by per-thread data structures.  The static methods allow singleton access but the ComponentDispatcher is sorting out the appropriate per-thread operations.  \\n  \\n The owner of the message pump is defined by the code that calls the [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] function  [GetMessage](http://msdn.microsoft.com/library/ms644936.aspx). The owner calls <xref:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage%2A> for every keyboard message. This method raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage> event with the messages contained in the event data. If that event is not handled, the owner raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage> event with the messages contained in the event argument.  \\n  \\n> [!NOTE]\\n>  Only keyboard messages are supported.\"\n  syntax:\n    content: public static class ComponentDispatcher\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage\n  id: CurrentKeyboardMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: CurrentKeyboardMessage\n  nameWithType: ComponentDispatcher.CurrentKeyboardMessage\n  fullName: System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Gets the last message that was raised.\n  syntax:\n    content: public static System.Windows.Interop.MSG CurrentKeyboardMessage { get; }\n    return:\n      type: System.Windows.Interop.MSG\n      description: The last message.\n  overload: System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.ComponentDispatcher.EnterThreadModal\n  id: EnterThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: EnterThreadModal\n  nameWithType: ComponentDispatcher.EnterThreadModal\n  fullName: System.Windows.Interop.ComponentDispatcher.EnterThreadModal\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Occurs when a thread becomes modal.\n  syntax:\n    content: public static event EventHandler EnterThreadModal;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.ComponentDispatcher.IsThreadModal\n  id: IsThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: IsThreadModal\n  nameWithType: ComponentDispatcher.IsThreadModal\n  fullName: System.Windows.Interop.ComponentDispatcher.IsThreadModal\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Gets a value that indicates whether the thread is modal.\n  syntax:\n    content: public static bool IsThreadModal { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the thread is modal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Interop.ComponentDispatcher.IsThreadModal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.ComponentDispatcher.LeaveThreadModal\n  id: LeaveThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: LeaveThreadModal\n  nameWithType: ComponentDispatcher.LeaveThreadModal\n  fullName: System.Windows.Interop.ComponentDispatcher.LeaveThreadModal\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Occurs when a modal thread becomes nonmodal.\n  syntax:\n    content: public static event EventHandler LeaveThreadModal;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.ComponentDispatcher.PopModal\n  id: PopModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: PopModal()\n  nameWithType: ComponentDispatcher.PopModal()\n  fullName: System.Windows.Interop.ComponentDispatcher.PopModal()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Called to indicate that a modal thread is no longer modal.\n  syntax:\n    content: public static void PopModal ();\n    parameters: []\n  overload: System.Windows.Interop.ComponentDispatcher.PopModal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.ComponentDispatcher.PushModal\n  id: PushModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: PushModal()\n  nameWithType: ComponentDispatcher.PushModal()\n  fullName: System.Windows.Interop.ComponentDispatcher.PushModal()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Called to indicate that the thread is modal.\n  syntax:\n    content: public static void PushModal ();\n    parameters: []\n  overload: System.Windows.Interop.ComponentDispatcher.PushModal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseIdle\n  id: RaiseIdle\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: RaiseIdle()\n  nameWithType: ComponentDispatcher.RaiseIdle()\n  fullName: System.Windows.Interop.ComponentDispatcher.RaiseIdle()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Called to indicate that a thread is idle.\n  syntax:\n    content: public static void RaiseIdle ();\n    parameters: []\n  overload: System.Windows.Interop.ComponentDispatcher.RaiseIdle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)\n  id: RaiseThreadMessage(System.Windows.Interop.MSG@)\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: RaiseThreadMessage(MSG)\n  nameWithType: ComponentDispatcher.RaiseThreadMessage(MSG)\n  fullName: System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(MSG)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Indicates that a new message is available for possible handling.\n  remarks: The owner of the message pump should call this method for every keyboard message.\n  syntax:\n    content: public static bool RaiseThreadMessage (ref System.Windows.Interop.MSG msg);\n    parameters:\n    - id: msg\n      type: System.Windows.Interop.MSG\n      description: The message and its associated data.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if one of the modules listening to the message loop processed the message. The owner of the message loop should ignore the message. <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, if the message was not processed. In this case, the owner of the message pump should call the [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] function [TranslateMessage](http://msdn.microsoft.com/library/ms644955.aspx) followed by [DispatchMessage](http://msdn.microsoft.com/library/ms644934.aspx).\n  overload: System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage\n  id: ThreadFilterMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: ThreadFilterMessage\n  nameWithType: ComponentDispatcher.ThreadFilterMessage\n  fullName: System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Occurs when the message pump receives a keyboard message.\n  syntax:\n    content: public static event System.Windows.Interop.ThreadMessageEventHandler ThreadFilterMessage;\n    return:\n      type: System.Windows.Interop.ThreadMessageEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadIdle\n  id: ThreadIdle\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: ThreadIdle\n  nameWithType: ComponentDispatcher.ThreadIdle\n  fullName: System.Windows.Interop.ComponentDispatcher.ThreadIdle\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Occurs when the thread is idle.\n  remarks: If there are no messages in the queue, then the idle state announced by the ThreadIdle event is an efficient time to do processing.\n  syntax:\n    content: public static event EventHandler ThreadIdle;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage\n  id: ThreadPreprocessMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: ThreadPreprocessMessage\n  nameWithType: ComponentDispatcher.ThreadPreprocessMessage\n  fullName: System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Occurs when the message pump receives a keyboard message.\n  remarks: This event should be raised after <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage>, if that event is not handled.\n  syntax:\n    content: public static event System.Windows.Interop.ThreadMessageEventHandler ThreadPreprocessMessage;\n    return:\n      type: System.Windows.Interop.ThreadMessageEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: CurrentKeyboardMessage\n  nameWithType: ComponentDispatcher.CurrentKeyboardMessage\n  fullName: System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage\n- uid: System.Windows.Interop.MSG\n  parent: System.Windows.Interop\n  isExternal: false\n  name: MSG\n  nameWithType: MSG\n  fullName: System.Windows.Interop.MSG\n- uid: System.Windows.Interop.ComponentDispatcher.EnterThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: EnterThreadModal\n  nameWithType: ComponentDispatcher.EnterThreadModal\n  fullName: System.Windows.Interop.ComponentDispatcher.EnterThreadModal\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Interop.ComponentDispatcher.IsThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: IsThreadModal\n  nameWithType: ComponentDispatcher.IsThreadModal\n  fullName: System.Windows.Interop.ComponentDispatcher.IsThreadModal\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Interop.ComponentDispatcher.LeaveThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: LeaveThreadModal\n  nameWithType: ComponentDispatcher.LeaveThreadModal\n  fullName: System.Windows.Interop.ComponentDispatcher.LeaveThreadModal\n- uid: System.Windows.Interop.ComponentDispatcher.PopModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: PopModal()\n  nameWithType: ComponentDispatcher.PopModal()\n  fullName: System.Windows.Interop.ComponentDispatcher.PopModal()\n- uid: System.Windows.Interop.ComponentDispatcher.PushModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: PushModal()\n  nameWithType: ComponentDispatcher.PushModal()\n  fullName: System.Windows.Interop.ComponentDispatcher.PushModal()\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseIdle\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: RaiseIdle()\n  nameWithType: ComponentDispatcher.RaiseIdle()\n  fullName: System.Windows.Interop.ComponentDispatcher.RaiseIdle()\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: RaiseThreadMessage(MSG)\n  nameWithType: ComponentDispatcher.RaiseThreadMessage(MSG)\n  fullName: System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(MSG)\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: ThreadFilterMessage\n  nameWithType: ComponentDispatcher.ThreadFilterMessage\n  fullName: System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage\n- uid: System.Windows.Interop.ThreadMessageEventHandler\n  parent: System.Windows.Interop\n  isExternal: false\n  name: ThreadMessageEventHandler\n  nameWithType: ThreadMessageEventHandler\n  fullName: System.Windows.Interop.ThreadMessageEventHandler\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadIdle\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: ThreadIdle\n  nameWithType: ComponentDispatcher.ThreadIdle\n  fullName: System.Windows.Interop.ComponentDispatcher.ThreadIdle\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: ThreadPreprocessMessage\n  nameWithType: ComponentDispatcher.ThreadPreprocessMessage\n  fullName: System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage\n- uid: System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: CurrentKeyboardMessage\n  nameWithType: ComponentDispatcher.CurrentKeyboardMessage\n- uid: System.Windows.Interop.ComponentDispatcher.IsThreadModal*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: IsThreadModal\n  nameWithType: ComponentDispatcher.IsThreadModal\n- uid: System.Windows.Interop.ComponentDispatcher.PopModal*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: PopModal\n  nameWithType: ComponentDispatcher.PopModal\n- uid: System.Windows.Interop.ComponentDispatcher.PushModal*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: PushModal\n  nameWithType: ComponentDispatcher.PushModal\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseIdle*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: RaiseIdle\n  nameWithType: ComponentDispatcher.RaiseIdle\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: RaiseThreadMessage\n  nameWithType: ComponentDispatcher.RaiseThreadMessage\n"}