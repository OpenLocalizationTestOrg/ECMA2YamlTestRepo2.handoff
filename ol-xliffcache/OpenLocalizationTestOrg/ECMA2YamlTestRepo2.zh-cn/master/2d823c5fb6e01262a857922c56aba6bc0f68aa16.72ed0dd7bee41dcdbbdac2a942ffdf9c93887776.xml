{"nodes":[{"pos":[357,408],"content":"Specifies constants that define the state of a key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies constants that define the state of a key.","pos":[0,51]}]},{"pos":[420,676],"content":"The KeyStates class is a bit field (flagwise) enumeration. Therefore, a key can be in multiple states.  For example, a key could be in the Down state as well as in the Toggled state.  Use bit operations to determine the exact state or states the key is in.","needQuote":true,"needEscape":true,"nodes":[{"content":"The KeyStates class is a bit field (flagwise) enumeration. Therefore, a key can be in multiple states.  For example, a key could be in the Down state as well as in the Toggled state.  Use bit operations to determine the exact state or states the key is in.","pos":[0,256],"nodes":[{"content":"The KeyStates class is a bit field (flagwise) enumeration.","pos":[0,58]},{"content":"Therefore, a key can be in multiple states.","pos":[59,102]},{"content":"For example, a key could be in the Down state as well as in the Toggled state.","pos":[104,182]},{"content":"Use bit operations to determine the exact state or states the key is in.","pos":[184,256]}]}]},{"pos":[1817,1836],"content":"The key is pressed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key is pressed.","pos":[0,19]}]},{"pos":[1939,1951],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2293,2316],"content":"The key is not pressed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key is not pressed.","pos":[0,23]}]},{"pos":[2419,2431],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2788,2807],"content":"The key is toggled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key is toggled.","pos":[0,19]}]},{"pos":[2913,2925],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.KeyStates\n  id: KeyStates\n  children:\n  - System.Windows.Input.KeyStates.Down\n  - System.Windows.Input.KeyStates.None\n  - System.Windows.Input.KeyStates.Toggled\n  langs:\n  - csharp\n  name: KeyStates\n  nameWithType: KeyStates\n  fullName: System.Windows.Input.KeyStates\n  type: Enum\n  summary: Specifies constants that define the state of a key.\n  remarks: The KeyStates class is a bit field (flagwise) enumeration. Therefore, a key can be in multiple states.  For example, a key could be in the Down state as well as in the Toggled state.  Use bit operations to determine the exact state or states the key is in.\n  example:\n  - \"The following example changes the color of a <xref:System.Windows.Controls.Button> if the KeyStates of the key passed in the <xref:System.Windows.Input.KeyEventArgs> is Down. The state of the key is determined by using a bitwise `AND` operation.  The same technique can be used to determine whether a key has multiple states, such as being in the Toggled state and the Down state.  \\n  \\n [!code-cs[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargskeystatesdown)]\\n [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargskeystatesdown)]\"\n  syntax:\n    content: >-\n      [System.Flags]\n\n      public enum KeyStates\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyStates.Down\n  id: Down\n  parent: System.Windows.Input.KeyStates\n  langs:\n  - csharp\n  name: Down\n  nameWithType: KeyStates.Down\n  fullName: System.Windows.Input.KeyStates.Down\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: The key is pressed.\n  syntax:\n    content: Down\n    return:\n      type: System.Windows.Input.KeyStates\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyStates.None\n  id: None\n  parent: System.Windows.Input.KeyStates\n  langs:\n  - csharp\n  name: None\n  nameWithType: KeyStates.None\n  fullName: System.Windows.Input.KeyStates.None\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: The key is not pressed.\n  syntax:\n    content: None\n    return:\n      type: System.Windows.Input.KeyStates\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyStates.Toggled\n  id: Toggled\n  parent: System.Windows.Input.KeyStates\n  langs:\n  - csharp\n  name: Toggled\n  nameWithType: KeyStates.Toggled\n  fullName: System.Windows.Input.KeyStates.Toggled\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: The key is toggled.\n  syntax:\n    content: Toggled\n    return:\n      type: System.Windows.Input.KeyStates\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Windows.Input.KeyStates.Down\n  parent: System.Windows.Input.KeyStates\n  isExternal: false\n  name: Down\n  nameWithType: KeyStates.Down\n  fullName: System.Windows.Input.KeyStates.Down\n- uid: System.Windows.Input.KeyStates\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyStates\n  nameWithType: KeyStates\n  fullName: System.Windows.Input.KeyStates\n- uid: System.Windows.Input.KeyStates.None\n  parent: System.Windows.Input.KeyStates\n  isExternal: false\n  name: None\n  nameWithType: KeyStates.None\n  fullName: System.Windows.Input.KeyStates.None\n- uid: System.Windows.Input.KeyStates.Toggled\n  parent: System.Windows.Input.KeyStates\n  isExternal: false\n  name: Toggled\n  nameWithType: KeyStates.Toggled\n  fullName: System.Windows.Input.KeyStates.Toggled\n"}