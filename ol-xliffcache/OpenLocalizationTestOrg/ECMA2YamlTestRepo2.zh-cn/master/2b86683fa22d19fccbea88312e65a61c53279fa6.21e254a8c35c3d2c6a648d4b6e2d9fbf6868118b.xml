{"nodes":[{"pos":[1132,1316],"content":"Controls access to non-public types and members through the <xref href=\"System.Reflection\"></xref> APIs. Controls some features of the <xref href=\"System.Reflection.Emit\"></xref> APIs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls access to non-public types and members through the <bpt id=\"p1\">&lt;xref href=\"System.Reflection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> APIs.","pos":[0,104],"source":"Controls access to non-public types and members through the <xref href=\"System.Reflection\"></xref> APIs."},{"content":"Controls some features of the <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> APIs.","pos":[105,184],"source":" Controls some features of the <xref href=\"System.Reflection.Emit\"></xref> APIs."}]},{"pos":[1329,2470],"content":"Without ReflectionPermission, code can use reflection to access only the public members of objects. Code with ReflectionPermission and the appropriate <xref:System.Security.Permissions.ReflectionPermissionFlag> flags can access the `protected` and `private` members of objects.      > [!CAUTION] >  Because ReflectionPermission can provide access to non-public types and members, we recommend that you do not grant ReflectionPermission to Internet code, except with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. <xref:System.Security.Permissions.ReflectionPermissionFlag> allows access to non-public members, with the restriction that the grant set of the non-public members must be equal to, or a subset of, the grant set of the code that accesses the non-public members.       Certain features of reflection emit, such as emitting debug symbols, require ReflectionPermission with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.       For more information, see the <xref:System.Security.Permissions.ReflectionPermissionFlag> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"Without ReflectionPermission, code can use reflection to access only the public members of objects.","pos":[0,99]},{"content":"Code with ReflectionPermission and the appropriate &lt;xref:System.Security.Permissions.ReflectionPermissionFlag&gt; flags can access the <ph id=\"ph1\">`protected`</ph> and <ph id=\"ph2\">`private`</ph> members of objects.","pos":[100,277],"source":" Code with ReflectionPermission and the appropriate <xref:System.Security.Permissions.ReflectionPermissionFlag> flags can access the `protected` and `private` members of objects."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  Because ReflectionPermission can provide access to non-public types and members, we recommend that you do not grant ReflectionPermission to Internet code, except with the &lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt; flag.","pos":[283,560],"source":"      > [!CAUTION] >  Because ReflectionPermission can provide access to non-public types and members, we recommend that you do not grant ReflectionPermission to Internet code, except with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"&lt;xref:System.Security.Permissions.ReflectionPermissionFlag&gt; allows access to non-public members, with the restriction that the grant set of the non-public members must be equal to, or a subset of, the grant set of the code that accesses the non-public members.","pos":[561,821],"source":" <xref:System.Security.Permissions.ReflectionPermissionFlag> allows access to non-public members, with the restriction that the grant set of the non-public members must be equal to, or a subset of, the grant set of the code that accesses the non-public members."},{"content":"Certain features of reflection emit, such as emitting debug symbols, require ReflectionPermission with the &lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt; flag.","pos":[828,1025],"source":"       Certain features of reflection emit, such as emitting debug symbols, require ReflectionPermission with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"For more information, see the &lt;xref:System.Security.Permissions.ReflectionPermissionFlag&gt; enumeration.","pos":[1032,1134],"source":"       For more information, see the <xref:System.Security.Permissions.ReflectionPermissionFlag> enumeration."}]},{"pos":[4020,4199],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with either fully restricted or unrestricted permission as specified.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> class with either fully restricted or unrestricted permission as specified."},{"pos":[4211,4289],"content":"Creates either fully restricted (<ph id=\"ph1\">`None`</ph>) or <ph id=\"ph2\">`Unrestricted`</ph> access to metadata.","needQuote":true,"needEscape":true,"source":"Creates either fully restricted (`None`) or `Unrestricted` access to metadata."},{"pos":[4974,5057],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values."},{"pos":[5234,5356],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>."},{"pos":[5989,6125],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified access.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> class with the specified access."},{"pos":[6840,6932],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref> values."},{"pos":[7109,7239],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">flag</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>flag</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref>."},{"pos":[7635,7699],"content":"Creates and returns an identical copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns an identical copy of the current permission.","pos":[0,64]}]},{"pos":[7711,7801],"content":"A copy of a permission represents the same access to resources as the original permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of a permission represents the same access to resources as the original permission.","pos":[0,90]}]},{"pos":[8675,8708],"content":"A copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of the current permission.","pos":[0,33]}]},{"pos":[9189,9260],"content":"Gets or sets the type of reflection allowed for the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the type of reflection allowed for the current permission.","pos":[0,71]}]},{"pos":[9933,9974],"content":"The set flags for the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The set flags for the current permission.","pos":[0,41]}]},{"pos":[10151,10311],"content":"An attempt is made to set this property to an invalid value. See <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref> for the valid values.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt is made to set this property to an invalid value.","pos":[0,60]},{"content":"See <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the valid values.","pos":[61,160],"source":" See <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref> for the valid values."}]},{"pos":[10833,10903],"content":"Reconstructs a permission with a specified state from an XML encoding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reconstructs a permission with a specified state from an XML encoding.","pos":[0,70]}]},{"pos":[11808,11862],"content":"The XML encoding to use to reconstruct the permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML encoding to use to reconstruct the permission.","pos":[0,54]}]},{"pos":[12049,12144],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>esd</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12240,12388],"content":"The <code>esd</code> parameter is not a valid permission element.       -or-       The <code>esd</code> parameter's version number is not valid.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid permission element.","pos":[0,65],"source":"The <code>esd</code> parameter is not a valid permission element."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's version number is not valid.","pos":[72,144],"source":"       -or-       The <code>esd</code> parameter's version number is not valid."}]},{"pos":[12901,13014],"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,113]}]},{"pos":[13026,13224],"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","pos":[0,198],"nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common.","pos":[0,118]},{"content":"Only a demand that passes both original permissions will pass the intersection.","pos":[119,198]}]}]},{"pos":[14140,14249],"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","pos":[0,109],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be of the same type as the current permission.","pos":[55,109]}]}]},{"pos":[14321,14540],"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission that represents the intersection of the current permission and the specified permission.","pos":[0,105]},{"content":"This new permission is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the intersection is empty.","pos":[106,219],"source":" This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty."}]},{"pos":[14721,14877],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"pos":[15394,15476],"content":"Determines whether the current permission is a subset of the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the current permission is a subset of the specified permission.","pos":[0,82]}]},{"pos":[15488,15929],"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.","pos":[0,172]},{"content":"For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:<ph id=\"ph1\">\\\\</ph>.","pos":[173,299],"source":" For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\."},{"content":"If this method returns <ph id=\"ph1\">`true`</ph>, the current permission represents no more access to the protected resource than does the specified permission.","pos":[300,441],"source":" If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission."}]},{"pos":[16824,16954],"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","pos":[0,130],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be of the same type as the current permission.","pos":[63,130]}]}]},{"pos":[17013,17215],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current permission is a subset of the specified permission; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17397,17553],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"pos":[17999,18073],"content":"Returns a value indicating whether the current permission is unrestricted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value indicating whether the current permission is unrestricted.","pos":[0,74]}]},{"pos":[18085,18183],"content":"An unrestricted permission represents access to any and all resources protected by the permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"An unrestricted permission represents access to any and all resources protected by the permission.","pos":[0,98]}]},{"pos":[18315,18493],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current permission is unrestricted; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is unrestricted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18988,19052],"content":"Creates an XML encoding of the permission and its current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an XML encoding of the permission and its current state.","pos":[0,64]}]},{"pos":[19952,20019],"content":"An XML encoding of the permission, including any state information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML encoding of the permission, including any state information.","pos":[0,67]}]},{"pos":[20596,20690],"content":"Creates a permission that is the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a permission that is the union of the current permission and the specified permission.","pos":[0,94]}]},{"pos":[20702,20916],"content":"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","needQuote":true,"needEscape":true,"nodes":[{"content":"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","pos":[0,214],"nodes":[{"content":"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission.","pos":[0,153]},{"content":"Any demand that passes either permission passes their union.","pos":[154,214]}]}]},{"pos":[21822,21929],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]},{"pos":[22001,22099],"content":"A new permission that represents the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission that represents the union of the current permission and the specified permission.","pos":[0,98]}]},{"pos":[22276,22431],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>other</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.ReflectionPermission\n  id: ReflectionPermission\n  children:\n  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)\n  - System.Security.Permissions.ReflectionPermission.Copy\n  - System.Security.Permissions.ReflectionPermission.Flags\n  - System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.ReflectionPermission.IsUnrestricted\n  - System.Security.Permissions.ReflectionPermission.ToXml\n  - System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: ReflectionPermission\n  nameWithType: ReflectionPermission\n  fullName: System.Security.Permissions.ReflectionPermission\n  type: Class\n  summary: Controls access to non-public types and members through the <xref href=\"System.Reflection\"></xref> APIs. Controls some features of the <xref href=\"System.Reflection.Emit\"></xref> APIs.\n  remarks: \"Without ReflectionPermission, code can use reflection to access only the public members of objects. Code with ReflectionPermission and the appropriate <xref:System.Security.Permissions.ReflectionPermissionFlag> flags can access the `protected` and `private` members of objects.  \\n  \\n> [!CAUTION]\\n>  Because ReflectionPermission can provide access to non-public types and members, we recommend that you do not grant ReflectionPermission to Internet code, except with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. <xref:System.Security.Permissions.ReflectionPermissionFlag> allows access to non-public members, with the restriction that the grant set of the non-public members must be equal to, or a subset of, the grant set of the code that accesses the non-public members.  \\n  \\n Certain features of reflection emit, such as emitting debug symbols, require ReflectionPermission with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.  \\n  \\n For more information, see the <xref:System.Security.Permissions.ReflectionPermissionFlag> enumeration.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class ReflectionPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: ReflectionPermission(PermissionState)\n  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)\n  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> class with either fully restricted or unrestricted permission as specified.\n  remarks: Creates either fully restricted (`None`) or `Unrestricted` access to metadata.\n  example:\n  - \"The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \\n  \\n [!code-vb[System.Security.Permissions.ReflectionPermission#7](~/add/codesnippet/visualbasic/a6514c98-a52a-4b79-a783-_1.vb)]\\n [!code-cs[System.Security.Permissions.ReflectionPermission#7](~/add/codesnippet/csharp/a6514c98-a52a-4b79-a783-_1.cs)]\"\n  syntax:\n    content: public ReflectionPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.\n  overload: System.Security.Permissions.ReflectionPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)\n  id: '#ctor(System.Security.Permissions.ReflectionPermissionFlag)'\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: ReflectionPermission(ReflectionPermissionFlag)\n  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)\n  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> class with the specified access.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \\n  \\n [!code-vb[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/visualbasic/d03b017b-73f9-4633-80a5-_1.vb)]\\n [!code-cs[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/csharp/d03b017b-73f9-4633-80a5-_1.cs)]\"\n  syntax:\n    content: public ReflectionPermission (System.Security.Permissions.ReflectionPermissionFlag flag);\n    parameters:\n    - id: flag\n      type: System.Security.Permissions.ReflectionPermissionFlag\n      description: One of the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref> values.\n  overload: System.Security.Permissions.ReflectionPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>flag</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: ReflectionPermission.Copy()\n  fullName: System.Security.Permissions.ReflectionPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns an identical copy of the current permission.\n  remarks: A copy of a permission represents the same access to resources as the original permission.\n  example:\n  - \"The following code example shows the behavior of the Copy method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.ReflectionPermission#5](~/add/codesnippet/visualbasic/m-system.security.permis_6_1.vb)]\\n [!code-cs[System.Security.Permissions.ReflectionPermission#5](~/add/codesnippet/csharp/m-system.security.permis_6_1.cs)]\"\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission.\n  overload: System.Security.Permissions.ReflectionPermission.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermission.Flags\n  id: Flags\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: Flags\n  nameWithType: ReflectionPermission.Flags\n  fullName: System.Security.Permissions.ReflectionPermission.Flags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets the type of reflection allowed for the current permission.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the Flags property. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \\n  \\n [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/visualbasic/p-system.security.permis_7_1.vb)]\\n [!code-cs[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/csharp/p-system.security.permis_7_1.cs)]\"\n  syntax:\n    content: public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }\n    return:\n      type: System.Security.Permissions.ReflectionPermissionFlag\n      description: The set flags for the current permission.\n  overload: System.Security.Permissions.ReflectionPermission.Flags*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An attempt is made to set this property to an invalid value. See <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref> for the valid values.\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: ReflectionPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Reconstructs a permission with a specified state from an XML encoding.\n  remarks: ''\n  example:\n  - \"The following code example shows the behavior of the FromXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/visualbasic/31379e48-984f-4b70-8613-_1.vb)]\\n [!code-cs[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/csharp/31379e48-984f-4b70-8613-_1.cs)]\"\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement esd);\n    parameters:\n    - id: esd\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the permission.\n  overload: System.Security.Permissions.ReflectionPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>esd</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>esd</code> parameter is not a valid permission element.  \\n  \\n -or-  \\n  \\n The <code>esd</code> parameter's version number is not valid.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: ReflectionPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.\n  remarks: The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.\n  example:\n  - \"The following code example shows the behavior of the Intersect method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.ReflectionPermission#4](~/add/codesnippet/visualbasic/0231533f-ad3c-4735-a9a6-_1.vb)]\\n [!code-cs[System.Security.Permissions.ReflectionPermission#4](~/add/codesnippet/csharp/0231533f-ad3c-4735-a9a6-_1.cs)]\"\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.\n  overload: System.Security.Permissions.ReflectionPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Determines whether the current permission is a subset of the specified permission.\n  remarks: The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.\n  example:\n  - \"The following code example shows the behavior of the IsSubsetOf method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/visualbasic/4d20fd34-7dad-48da-8000-_1.vb)]\\n [!code-cs[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/csharp/4d20fd34-7dad-48da-8000-_1.cs)]\"\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.ReflectionPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: ReflectionPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Returns a value indicating whether the current permission is unrestricted.\n  remarks: An unrestricted permission represents access to any and all resources protected by the permission.\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is unrestricted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.ReflectionPermission.IsUnrestricted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: ReflectionPermission.ToXml()\n  fullName: System.Security.Permissions.ReflectionPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates an XML encoding of the permission and its current state.\n  remarks: ''\n  example:\n  - \"The following code example shows the behavior of the ToXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/visualbasic/m-system.security.permis_18_1.vb)]\\n [!code-cs[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/csharp/m-system.security.permis_18_1.cs)]\"\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the permission, including any state information.\n  overload: System.Security.Permissions.ReflectionPermission.ToXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: ReflectionPermission.Union(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates a permission that is the union of the current permission and the specified permission.\n  remarks: The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.\n  example:\n  - \"The following code example shows the behavior of the Union method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.ReflectionPermission#3](~/add/codesnippet/visualbasic/e04a2468-b512-4092-a730-_1.vb)]\\n [!code-cs[System.Security.Permissions.ReflectionPermission#3](~/add/codesnippet/csharp/e04a2468-b512-4092-a730-_1.cs)]\"\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission other);\n    parameters:\n    - id: other\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the union of the current permission and the specified permission.\n  overload: System.Security.Permissions.ReflectionPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>other</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.CodeAccessPermission\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: ReflectionPermission(PermissionState)\n  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)\n  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: ReflectionPermission(ReflectionPermissionFlag)\n  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)\n  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)\n- uid: System.Security.Permissions.ReflectionPermissionFlag\n  parent: System.Security.Permissions\n  isExternal: false\n  name: ReflectionPermissionFlag\n  nameWithType: ReflectionPermissionFlag\n  fullName: System.Security.Permissions.ReflectionPermissionFlag\n- uid: System.Security.Permissions.ReflectionPermission.Copy\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: ReflectionPermission.Copy()\n  fullName: System.Security.Permissions.ReflectionPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.ReflectionPermission.Flags\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Flags\n  nameWithType: ReflectionPermission.Flags\n  fullName: System.Security.Permissions.ReflectionPermission.Flags\n- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: ReflectionPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: ReflectionPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)\n- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: ReflectionPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()\n- uid: System.Security.Permissions.ReflectionPermission.ToXml\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: ReflectionPermission.ToXml()\n  fullName: System.Security.Permissions.ReflectionPermission.ToXml()\n- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: ReflectionPermission.Union(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)\n- uid: System.Security.Permissions.ReflectionPermission.#ctor*\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: ReflectionPermission\n  nameWithType: ReflectionPermission.ReflectionPermission\n- uid: System.Security.Permissions.ReflectionPermission.Copy*\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Copy\n  nameWithType: ReflectionPermission.Copy\n- uid: System.Security.Permissions.ReflectionPermission.Flags*\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Flags\n  nameWithType: ReflectionPermission.Flags\n- uid: System.Security.Permissions.ReflectionPermission.FromXml*\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: ReflectionPermission.FromXml\n- uid: System.Security.Permissions.ReflectionPermission.Intersect*\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: ReflectionPermission.Intersect\n- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf*\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: ReflectionPermission.IsSubsetOf\n- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted*\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: ReflectionPermission.IsUnrestricted\n- uid: System.Security.Permissions.ReflectionPermission.ToXml*\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: ReflectionPermission.ToXml\n- uid: System.Security.Permissions.ReflectionPermission.Union*\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Union\n  nameWithType: ReflectionPermission.Union\n"}