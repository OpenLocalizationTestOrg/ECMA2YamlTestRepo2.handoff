{"nodes":[{"pos":[392,536],"content":"Computes a Hash-based Message Authentication Code (HMAC) by using the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RIPEMD160\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> hash function.","needQuote":true,"needEscape":true,"source":"Computes a Hash-based Message Authentication Code (HMAC) by using the <xref href=\"System.Security.Cryptography.RIPEMD160\"></xref> hash function."},{"pos":[549,2088],"content":"HMACRIPEMD160 is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits in length.       An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.       Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.       HMACRIPEMD160 accepts keys of any size, and produces a hash sequence that is 160 bits long.       The RIPEMD hash algorithm and its successors were developed by the European RIPE project. The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160. The RIPEMD-160 hash algorithm produces a 160-bit hash value. The algorithm's designers have placed it in the public domain.","needQuote":false,"needEscape":true,"nodes":[{"content":"HMACRIPEMD160 is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits in length.       An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.       Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.       HMACRIPEMD160 accepts keys of any size, and produces a hash sequence that is 160 bits long.       The RIPEMD hash algorithm and its successors were developed by the European RIPE project. The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160. The RIPEMD-160 hash algorithm produces a 160-bit hash value. The algorithm's designers have placed it in the public domain.","pos":[0,1531],"nodes":[{"content":"HMACRIPEMD160 is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).","pos":[0,162]},{"content":"The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.","pos":[163,362]},{"content":"The output hash is 160 bits in length.","pos":[363,401]},{"content":"An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.","pos":[408,570]},{"content":"The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.","pos":[571,700]},{"content":"The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.","pos":[701,829]},{"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.","pos":[836,1007]},{"content":"Therefore, if the original and computed hash values match, the message is authenticated.","pos":[1008,1096]},{"content":"HMACRIPEMD160 accepts keys of any size, and produces a hash sequence that is 160 bits long.","pos":[1103,1194]},{"content":"The RIPEMD hash algorithm and its successors were developed by the European RIPE project.","pos":[1201,1290]},{"content":"The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.","pos":[1291,1407]},{"content":"The RIPEMD-160 hash algorithm produces a 160-bit hash value.","pos":[1408,1468]},{"content":"The algorithm's designers have placed it in the public domain.","pos":[1469,1531]}]}]},{"pos":[4962,5104],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HMACRIPEMD160\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a randomly generated 64-byte key.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref> class with a randomly generated 64-byte key."},{"pos":[5117,5620],"content":"<xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bytes in length.       This constructor uses a 64-byte, randomly generated key.","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bytes in length.       This constructor uses a 64-byte, randomly generated key.","pos":[0,501],"nodes":[{"content":"&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt; is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).","pos":[0,198],"source":"<xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC)."},{"content":"The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.","pos":[199,398]},{"content":"The output hash is 160 bytes in length.","pos":[399,438]},{"content":"This constructor uses a 64-byte, randomly generated key.","pos":[445,501]}]}]},{"pos":[6223,6355],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HMACRIPEMD160\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified key data.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref> class with the specified key data."},{"pos":[6367,6805],"content":"<xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bytes in length.","needQuote":true,"needEscape":true,"nodes":[{"content":"<xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bytes in length.","pos":[0,438],"nodes":[{"content":"&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt; is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).","pos":[0,198],"source":"<xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC)."},{"content":"The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.","pos":[199,398]},{"content":"The output hash is 160 bytes in length.","pos":[399,438]}]}]},{"pos":[7066,7339],"content":"The secret key for <xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The secret key for <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HMACRIPEMD160\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> encryption.","pos":[0,94],"source":"The secret key for <xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref> encryption."},{"content":"The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.","pos":[95,210]},{"content":"Therefore, the recommended size of the secret key is 64 bytes.","pos":[211,273]}]},{"pos":[7518,7613],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>key</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.HMACRIPEMD160\n  id: HMACRIPEMD160\n  children:\n  - System.Security.Cryptography.HMACRIPEMD160.#ctor\n  - System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])\n  langs:\n  - csharp\n  name: HMACRIPEMD160\n  nameWithType: HMACRIPEMD160\n  fullName: System.Security.Cryptography.HMACRIPEMD160\n  type: Class\n  summary: Computes a Hash-based Message Authentication Code (HMAC) by using the <xref href=\"System.Security.Cryptography.RIPEMD160\"></xref> hash function.\n  remarks: \"HMACRIPEMD160 is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits in length.  \\n  \\n An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.  \\n  \\n Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.  \\n  \\n HMACRIPEMD160 accepts keys of any size, and produces a hash sequence that is 160 bits long.  \\n  \\n The RIPEMD hash algorithm and its successors were developed by the European RIPE project. The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160. The RIPEMD-160 hash algorithm produces a 160-bit hash value. The algorithm's designers have placed it in the public domain.\"\n  example:\n  - \"The following example shows how to sign a file by using the HMACRIPEMD160 object and then how to verify the file.  \\n  \\n [!code-vb[HMACRIPEMD160#1](~/add/codesnippet/visualbasic/t-system.security.crypto_102_1.vb)]\\n [!code-cpp[HMACRIPEMD160#1](~/add/codesnippet/cpp/t-system.security.crypto_102_1.cpp)]\\n [!code-cs[HMACRIPEMD160#1](~/add/codesnippet/csharp/t-system.security.crypto_102_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class HMACRIPEMD160 : System.Security.Cryptography.HMAC\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.KeyedHashAlgorithm\n  - System.Security.Cryptography.HMAC\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMAC.BlockSizeValue\n  - System.Security.Cryptography.HMAC.Create\n  - System.Security.Cryptography.HMAC.Create(System.String)\n  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMAC.HashFinal\n  - System.Security.Cryptography.HMAC.HashName\n  - System.Security.Cryptography.HMAC.Initialize\n  - System.Security.Cryptography.HMAC.Key\n  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.HMACRIPEMD160\n  langs:\n  - csharp\n  name: HMACRIPEMD160()\n  nameWithType: HMACRIPEMD160.HMACRIPEMD160()\n  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref> class with a randomly generated 64-byte key.\n  remarks: \"<xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bytes in length.  \\n  \\n This constructor uses a 64-byte, randomly generated key.\"\n  syntax:\n    content: public HMACRIPEMD160 ();\n    parameters: []\n  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.HMACRIPEMD160\n  langs:\n  - csharp\n  name: HMACRIPEMD160(Byte[])\n  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])\n  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref> class with the specified key data.\n  remarks: <xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bytes in length.\n  example:\n  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.\n  syntax:\n    content: public HMACRIPEMD160 (byte[] key);\n    parameters:\n    - id: key\n      type: System.Byte[]\n      description: The secret key for <xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes.\n  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>key</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: System.Security.Cryptography.HMAC\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor\n  parent: System.Security.Cryptography.HMACRIPEMD160\n  isExternal: false\n  name: HMACRIPEMD160()\n  nameWithType: HMACRIPEMD160.HMACRIPEMD160()\n  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()\n- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])\n  parent: System.Security.Cryptography.HMACRIPEMD160\n  isExternal: false\n  name: HMACRIPEMD160(Byte[])\n  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])\n  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor*\n  parent: System.Security.Cryptography.HMACRIPEMD160\n  isExternal: false\n  name: HMACRIPEMD160\n  nameWithType: HMACRIPEMD160.HMACRIPEMD160\n"}