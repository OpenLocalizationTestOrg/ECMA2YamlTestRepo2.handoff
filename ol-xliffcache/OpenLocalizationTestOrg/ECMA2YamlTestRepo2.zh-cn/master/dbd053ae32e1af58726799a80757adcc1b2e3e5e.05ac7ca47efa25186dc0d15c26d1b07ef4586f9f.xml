{"nodes":[{"pos":[9392,9474],"content":"Represents a series of connected lines and curves. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a series of connected lines and curves. This class cannot be inherited.","pos":[0,82],"nodes":[{"content":"Represents a series of connected lines and curves.","pos":[0,50]},{"content":"This class cannot be inherited.","pos":[51,82]}]}]},{"pos":[9487,11822],"content":"Applications use paths to draw outlines of shapes, fill the interiors of shapes, and create clipping regions. The graphics engine maintains the coordinates of geometric shapes in a path in world coordinate space.       A path may be composed of any number of figures (subpaths). Each figure is either composed of a sequence of connected lines and curves or a geometric shape primitive. The starting point of a figure is the first point in the sequence of connected lines and curves. The ending point is the last point in the sequence. The starting and ending points of a geometric shape primitive are defined by the primitive specification.       A figure that consists of a sequence of connected lines and curves (whose starting and ending points may be coincident) is an open figure, unless it is closed explicitly. A figure can be closed explicitly, by using the <xref:System.Drawing.Drawing2D.GraphicsPath.CloseFigure%2A> method, which closes the current figure by connecting a line from the ending point to the starting point. A figure that consists of a geometric shape primitive is a closed figure.       For purposes of filling and clipping (for example, if a path is rendered using <xref:System.Drawing.Graphics.FillPath%2A>), all open figures are closed by adding a line from the figure's first point to its last point.       A new figure is implicitly started when a path is created or when a figure is closed. A new figure is explicitly created when the <xref:System.Drawing.Drawing2D.GraphicsPath.StartFigure%2A> method is called.       When a geometric shape primitive is added to a path, it adds a figure containing the geometric shape, and also implicitly starts a new figure. Consequently, there is always a current figure in a path. When lines and curves are added to a path, an implicit line is added as needed to connect the ending point of the current figure to the starting point of the new lines and curves to form a sequence of connected lines and curves.       A figure has a direction that describes how line and curve segments are traced between the starting point and the ending point. The direction is defined in the order that lines and curves are added to a figure, or is defined by the geometric shape primitive. The direction is used in determining the path interiors for clipping and fill.","needQuote":false,"needEscape":true,"nodes":[{"content":"Applications use paths to draw outlines of shapes, fill the interiors of shapes, and create clipping regions. The graphics engine maintains the coordinates of geometric shapes in a path in world coordinate space.       A path may be composed of any number of figures (subpaths). Each figure is either composed of a sequence of connected lines and curves or a geometric shape primitive. The starting point of a figure is the first point in the sequence of connected lines and curves. The ending point is the last point in the sequence. The starting and ending points of a geometric shape primitive are defined by the primitive specification.       A figure that consists of a sequence of connected lines and curves (whose starting and ending points may be coincident) is an open figure, unless it is closed explicitly. A figure can be closed explicitly, by using the <xref:System.Drawing.Drawing2D.GraphicsPath.CloseFigure%2A> method, which closes the current figure by connecting a line from the ending point to the starting point. A figure that consists of a geometric shape primitive is a closed figure.       For purposes of filling and clipping (for example, if a path is rendered using <xref:System.Drawing.Graphics.FillPath%2A>), all open figures are closed by adding a line from the figure's first point to its last point.       A new figure is implicitly started when a path is created or when a figure is closed. A new figure is explicitly created when the <xref:System.Drawing.Drawing2D.GraphicsPath.StartFigure%2A> method is called.       When a geometric shape primitive is added to a path, it adds a figure containing the geometric shape, and also implicitly starts a new figure. Consequently, there is always a current figure in a path. When lines and curves are added to a path, an implicit line is added as needed to connect the ending point of the current figure to the starting point of the new lines and curves to form a sequence of connected lines and curves.       A figure has a direction that describes how line and curve segments are traced between the starting point and the ending point. The direction is defined in the order that lines and curves are added to a figure, or is defined by the geometric shape primitive. The direction is used in determining the path interiors for clipping and fill.","pos":[0,2323],"nodes":[{"content":"Applications use paths to draw outlines of shapes, fill the interiors of shapes, and create clipping regions.","pos":[0,109]},{"content":"The graphics engine maintains the coordinates of geometric shapes in a path in world coordinate space.","pos":[110,212]},{"content":"A path may be composed of any number of figures (subpaths).","pos":[219,278]},{"content":"Each figure is either composed of a sequence of connected lines and curves or a geometric shape primitive.","pos":[279,385]},{"content":"The starting point of a figure is the first point in the sequence of connected lines and curves.","pos":[386,482]},{"content":"The ending point is the last point in the sequence.","pos":[483,534]},{"content":"The starting and ending points of a geometric shape primitive are defined by the primitive specification.","pos":[535,640]},{"content":"A figure that consists of a sequence of connected lines and curves (whose starting and ending points may be coincident) is an open figure, unless it is closed explicitly.","pos":[647,817]},{"content":"A figure can be closed explicitly, by using the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.CloseFigure%2A&gt; method, which closes the current figure by connecting a line from the ending point to the starting point.","pos":[818,1031],"source":" A figure can be closed explicitly, by using the <xref:System.Drawing.Drawing2D.GraphicsPath.CloseFigure%2A> method, which closes the current figure by connecting a line from the ending point to the starting point."},{"content":"A figure that consists of a geometric shape primitive is a closed figure.","pos":[1032,1105]},{"content":"For purposes of filling and clipping (for example, if a path is rendered using &lt;xref:System.Drawing.Graphics.FillPath%2A&gt;), all open figures are closed by adding a line from the figure's first point to its last point.","pos":[1112,1329],"source":"       For purposes of filling and clipping (for example, if a path is rendered using <xref:System.Drawing.Graphics.FillPath%2A>), all open figures are closed by adding a line from the figure's first point to its last point."},{"content":"A new figure is implicitly started when a path is created or when a figure is closed.","pos":[1336,1421]},{"content":"A new figure is explicitly created when the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.StartFigure%2A&gt; method is called.","pos":[1422,1543],"source":" A new figure is explicitly created when the <xref:System.Drawing.Drawing2D.GraphicsPath.StartFigure%2A> method is called."},{"content":"When a geometric shape primitive is added to a path, it adds a figure containing the geometric shape, and also implicitly starts a new figure.","pos":[1550,1692]},{"content":"Consequently, there is always a current figure in a path.","pos":[1693,1750]},{"content":"When lines and curves are added to a path, an implicit line is added as needed to connect the ending point of the current figure to the starting point of the new lines and curves to form a sequence of connected lines and curves.","pos":[1751,1979]},{"content":"A figure has a direction that describes how line and curve segments are traced between the starting point and the ending point.","pos":[1986,2113]},{"content":"The direction is defined in the order that lines and curves are added to a figure, or is defined by the geometric shape primitive.","pos":[2114,2244]},{"content":"The direction is used in determining the path interiors for clipping and fill.","pos":[2245,2323]}]}]},{"pos":[12683,12908],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a &lt;xref:System.Drawing.Drawing2D.GraphicsPath.FillMode*&gt; value of <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> class with a <xref:System.Drawing.Drawing2D.GraphicsPath.FillMode*> value of <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref>."},{"pos":[13533,13718],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> enumeration.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> class with the specified <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration."},{"pos":[13908,14089],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines how the interior of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is filled.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the interior of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> is filled."},{"pos":[14672,14903],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.PathPointType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> arrays.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> class with the specified <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> and <xref href=\"System.Drawing.Point\"></xref> arrays."},{"pos":[15075,15260],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that defines the coordinates of the points that make up this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that defines the coordinates of the points that make up this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[15322,15486],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.PathPointType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration elements that specifies the type of each corresponding point in the <ph id=\"ph1\">`pts`</ph> array.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> enumeration elements that specifies the type of each corresponding point in the `pts` array."},{"pos":[16074,16306],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.PathPointType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> arrays.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> array with the specified <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> and <xref href=\"System.Drawing.PointF\"></xref> arrays."},{"pos":[16480,16666],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that defines the coordinates of the points that make up this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that defines the coordinates of the points that make up this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[16728,16892],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.PathPointType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration elements that specifies the type of each corresponding point in the <ph id=\"ph1\">`pts`</ph> array.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> enumeration elements that specifies the type of each corresponding point in the `pts` array."},{"pos":[17570,17899],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.PathPointType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> arrays and with the specified <bpt id=\"p4\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> enumeration element.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> class with the specified <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> and <xref href=\"System.Drawing.Point\"></xref> arrays and with the specified <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration element."},{"pos":[18115,18300],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that defines the coordinates of the points that make up this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that defines the coordinates of the points that make up this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[18362,18526],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.PathPointType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration elements that specifies the type of each corresponding point in the <ph id=\"ph1\">`pts`</ph> array.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> enumeration elements that specifies the type of each corresponding point in the `pts` array."},{"pos":[18611,18801],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies how the interiors of shapes in this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> are filled.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that specifies how the interiors of shapes in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> are filled."},{"pos":[19484,19814],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.PathPointType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> arrays and with the specified <bpt id=\"p4\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> enumeration element.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> array with the specified <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> and <xref href=\"System.Drawing.PointF\"></xref> arrays and with the specified <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration element."},{"pos":[20032,20218],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that defines the coordinates of the points that make up this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that defines the coordinates of the points that make up this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[20280,20444],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.PathPointType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration elements that specifies the type of each corresponding point in the <ph id=\"ph1\">`pts`</ph> array.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> enumeration elements that specifies the type of each corresponding point in the `pts` array."},{"pos":[20529,20719],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies how the interiors of shapes in this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> are filled.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that specifies how the interiors of shapes in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> are filled."},{"pos":[21338,21386],"content":"Appends an elliptical arc to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Appends an elliptical arc to the current figure.","pos":[0,48]}]},{"pos":[21399,22079],"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.       The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","needQuote":false,"needEscape":true,"nodes":[{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.       The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","pos":[0,678],"nodes":[{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.","pos":[0,145]},{"content":"The arc is traced along the perimeter of the ellipse bounded by the specified rectangle.","pos":[152,240]},{"content":"The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle.","pos":[241,407]},{"content":"The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle.","pos":[408,533]},{"content":"If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","pos":[534,678]}]}]},{"pos":[23165,23295],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the rectangular bounds of the ellipse from which the arc is taken.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Rectangle\"></xref> that represents the rectangular bounds of the ellipse from which the arc is taken."},{"pos":[23362,23439],"content":"The starting angle of the arc, measured in degrees clockwise from the x-axis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting angle of the arc, measured in degrees clockwise from the x-axis.","pos":[0,77]}]},{"pos":[23506,23560],"content":"The angle between <ph id=\"ph1\">`startAngle`</ph> and the end of the arc.","needQuote":true,"needEscape":true,"source":"The angle between `startAngle` and the end of the arc."},{"pos":[24185,24233],"content":"Appends an elliptical arc to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Appends an elliptical arc to the current figure.","pos":[0,48]}]},{"pos":[24246,24926],"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.       The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","needQuote":false,"needEscape":true,"nodes":[{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.       The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","pos":[0,678],"nodes":[{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.","pos":[0,145]},{"content":"The arc is traced along the perimeter of the ellipse bounded by the specified rectangle.","pos":[152,240]},{"content":"The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle.","pos":[241,407]},{"content":"The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle.","pos":[408,533]},{"content":"If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","pos":[534,678]}]}]},{"pos":[25278,25409],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the rectangular bounds of the ellipse from which the arc is taken.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangular bounds of the ellipse from which the arc is taken."},{"pos":[25476,25553],"content":"The starting angle of the arc, measured in degrees clockwise from the x-axis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting angle of the arc, measured in degrees clockwise from the x-axis.","pos":[0,77]}]},{"pos":[25620,25674],"content":"The angle between <ph id=\"ph1\">`startAngle`</ph> and the end of the arc.","needQuote":true,"needEscape":true,"source":"The angle between `startAngle` and the end of the arc."},{"pos":[26390,26438],"content":"Appends an elliptical arc to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Appends an elliptical arc to the current figure.","pos":[0,48]}]},{"pos":[26451,27131],"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.       The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","needQuote":false,"needEscape":true,"nodes":[{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.       The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","pos":[0,678],"nodes":[{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.","pos":[0,145]},{"content":"The arc is traced along the perimeter of the ellipse bounded by the specified rectangle.","pos":[152,240]},{"content":"The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle.","pos":[241,407]},{"content":"The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle.","pos":[408,533]},{"content":"If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","pos":[534,678]}]}]},{"pos":[27472,27593],"content":"The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.","pos":[0,121]}]},{"pos":[27650,27771],"content":"The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.","pos":[0,121]}]},{"pos":[27832,27921],"content":"The width of the rectangular region that defines the ellipse from which the arc is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the rectangular region that defines the ellipse from which the arc is drawn.","pos":[0,89]}]},{"pos":[27983,28073],"content":"The height of the rectangular region that defines the ellipse from which the arc is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the rectangular region that defines the ellipse from which the arc is drawn.","pos":[0,90]}]},{"pos":[28140,28217],"content":"The starting angle of the arc, measured in degrees clockwise from the x-axis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting angle of the arc, measured in degrees clockwise from the x-axis.","pos":[0,77]}]},{"pos":[28284,28338],"content":"The angle between <ph id=\"ph1\">`startAngle`</ph> and the end of the arc.","needQuote":true,"needEscape":true,"source":"The angle between `startAngle` and the end of the arc."},{"pos":[29074,29122],"content":"Appends an elliptical arc to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Appends an elliptical arc to the current figure.","pos":[0,48]}]},{"pos":[29135,29815],"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.       The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","needQuote":false,"needEscape":true,"nodes":[{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.       The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","pos":[0,678],"nodes":[{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.","pos":[0,145]},{"content":"The arc is traced along the perimeter of the ellipse bounded by the specified rectangle.","pos":[152,240]},{"content":"The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle.","pos":[241,407]},{"content":"The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle.","pos":[408,533]},{"content":"If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.","pos":[534,678]}]}]},{"pos":[30165,30286],"content":"The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.","pos":[0,121]}]},{"pos":[30344,30465],"content":"The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.","pos":[0,121]}]},{"pos":[30527,30616],"content":"The width of the rectangular region that defines the ellipse from which the arc is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the rectangular region that defines the ellipse from which the arc is drawn.","pos":[0,89]}]},{"pos":[30679,30769],"content":"The height of the rectangular region that defines the ellipse from which the arc is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the rectangular region that defines the ellipse from which the arc is drawn.","pos":[0,90]}]},{"pos":[30836,30913],"content":"The starting angle of the arc, measured in degrees clockwise from the x-axis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting angle of the arc, measured in degrees clockwise from the x-axis.","pos":[0,77]}]},{"pos":[30980,31034],"content":"The angle between <ph id=\"ph1\">`startAngle`</ph> and the end of the arc.","needQuote":true,"needEscape":true,"source":"The angle between `startAngle` and the end of the arc."},{"pos":[31731,31779],"content":"Adds a cubic Bézier curve to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a cubic Bézier curve to the current figure.","pos":[0,48]}]},{"pos":[31792,32093],"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.       If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","needQuote":false,"needEscape":true,"nodes":[{"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.       If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","pos":[0,299],"nodes":[{"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.","pos":[0,127]},{"content":"If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","pos":[134,299]}]}]},{"pos":[32542,32634],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the starting point of the curve.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> that represents the starting point of the curve."},{"pos":[32701,32799],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the first control point for the curve.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> that represents the first control point for the curve."},{"pos":[32866,32965],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the second control point for the curve.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> that represents the second control point for the curve."},{"pos":[33032,33118],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the endpoint of the curve.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> that represents the endpoint of the curve."},{"pos":[33838,33886],"content":"Adds a cubic Bézier curve to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a cubic Bézier curve to the current figure.","pos":[0,48]}]},{"pos":[33899,34200],"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.       If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","needQuote":false,"needEscape":true,"nodes":[{"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.       If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","pos":[0,299],"nodes":[{"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.","pos":[0,127]},{"content":"If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","pos":[134,299]}]}]},{"pos":[34654,34747],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the starting point of the curve.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the starting point of the curve."},{"pos":[34815,34914],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the first control point for the curve.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the first control point for the curve."},{"pos":[34982,35082],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the second control point for the curve.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the second control point for the curve."},{"pos":[35150,35237],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the endpoint of the curve.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the endpoint of the curve."},{"pos":[36049,36097],"content":"Adds a cubic Bézier curve to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a cubic Bézier curve to the current figure.","pos":[0,48]}]},{"pos":[36110,36411],"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.       If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","needQuote":false,"needEscape":true,"nodes":[{"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.       If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","pos":[0,299],"nodes":[{"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.","pos":[0,127]},{"content":"If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","pos":[134,299]}]}]},{"pos":[37441,37493],"content":"The x-coordinate of the starting point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the starting point of the curve.","pos":[0,52]}]},{"pos":[37551,37603],"content":"The y-coordinate of the starting point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the starting point of the curve.","pos":[0,52]}]},{"pos":[37661,37719],"content":"The x-coordinate of the first control point for the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the first control point for the curve.","pos":[0,58]}]},{"pos":[37777,37835],"content":"The y-coordinate of the first control point for the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the first control point for the curve.","pos":[0,58]}]},{"pos":[37893,37952],"content":"The x-coordinate of the second control point for the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the second control point for the curve.","pos":[0,59]}]},{"pos":[38010,38069],"content":"The y-coordinate of the second control point for the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the second control point for the curve.","pos":[0,59]}]},{"pos":[38127,38173],"content":"The x-coordinate of the endpoint of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the endpoint of the curve.","pos":[0,46]}]},{"pos":[38231,38277],"content":"The y-coordinate of the endpoint of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the endpoint of the curve.","pos":[0,46]}]},{"pos":[39129,39177],"content":"Adds a cubic Bézier curve to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a cubic Bézier curve to the current figure.","pos":[0,48]}]},{"pos":[39190,39491],"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.       If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","needQuote":false,"needEscape":true,"nodes":[{"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.       If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","pos":[0,299],"nodes":[{"content":"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.","pos":[0,127]},{"content":"If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.","pos":[134,299]}]}]},{"pos":[39908,39960],"content":"The x-coordinate of the starting point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the starting point of the curve.","pos":[0,52]}]},{"pos":[40019,40071],"content":"The y-coordinate of the starting point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the starting point of the curve.","pos":[0,52]}]},{"pos":[40130,40188],"content":"The x-coordinate of the first control point for the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the first control point for the curve.","pos":[0,58]}]},{"pos":[40247,40305],"content":"The y-coordinate of the first control point for the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the first control point for the curve.","pos":[0,58]}]},{"pos":[40364,40423],"content":"The x-coordinate of the second control point for the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the second control point for the curve.","pos":[0,59]}]},{"pos":[40482,40541],"content":"The y-coordinate of the second control point for the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the second control point for the curve.","pos":[0,59]}]},{"pos":[40600,40646],"content":"The x-coordinate of the endpoint of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the endpoint of the curve.","pos":[0,46]}]},{"pos":[40705,40751],"content":"The y-coordinate of the endpoint of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the endpoint of the curve.","pos":[0,46]}]},{"pos":[41286,41357],"content":"Adds a sequence of connected cubic Bézier curves to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a sequence of connected cubic Bézier curves to the current figure.","pos":[0,71]}]},{"pos":[41370,42036],"content":"The `points` parameter specifies an array of endpoints and control points of the connected curves. The first curve is constructed from the first point to the fourth point in the `points` array by using the second and third points as control points. In addition to the endpoint of the previous curve, each subsequent curve in the sequence needs exactly three more points: the next two points in the sequence are control points, and the third is the endpoint for the added curve.       If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the first cubic curve in the sequence.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`points`</ph> parameter specifies an array of endpoints and control points of the connected curves.","pos":[0,98],"source":"The `points` parameter specifies an array of endpoints and control points of the connected curves."},{"content":"The first curve is constructed from the first point to the fourth point in the <ph id=\"ph1\">`points`</ph> array by using the second and third points as control points.","pos":[99,248],"source":" The first curve is constructed from the first point to the fourth point in the `points` array by using the second and third points as control points."},{"content":"In addition to the endpoint of the previous curve, each subsequent curve in the sequence needs exactly three more points: the next two points in the sequence are control points, and the third is the endpoint for the added curve.","pos":[249,477]},{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the first cubic curve in the sequence.","pos":[484,664]}]},{"pos":[43051,43166],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curves.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curves."},{"pos":[43707,43778],"content":"Adds a sequence of connected cubic Bézier curves to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a sequence of connected cubic Bézier curves to the current figure.","pos":[0,71]}]},{"pos":[43791,44457],"content":"The `points` parameter specifies an array of endpoints and control points of the connected curves. The first curve is constructed from the first point to the fourth point in the `points` array by using the second and third points as control points. In addition to the endpoint of the previous curve, each subsequent curve in the sequence needs exactly three more points: the next two points in the sequence are control points, and the third is the endpoint for the added curve.       If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the first cubic curve in the sequence.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`points`</ph> parameter specifies an array of endpoints and control points of the connected curves.","pos":[0,98],"source":"The `points` parameter specifies an array of endpoints and control points of the connected curves."},{"content":"The first curve is constructed from the first point to the fourth point in the <ph id=\"ph1\">`points`</ph> array by using the second and third points as control points.","pos":[99,248],"source":" The first curve is constructed from the first point to the fourth point in the `points` array by using the second and third points as control points."},{"content":"In addition to the endpoint of the previous curve, each subsequent curve in the sequence needs exactly three more points: the next two points in the sequence are control points, and the third is the endpoint for the added curve.","pos":[249,477]},{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the first cubic curve in the sequence.","pos":[484,664]}]},{"pos":[44821,44937],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curves.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curves."},{"pos":[45493,45625],"content":"Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[0,132],"nodes":[{"content":"Adds a closed curve to this path.","pos":[0,33]},{"content":"A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[34,132]}]}]},{"pos":[45637,46067],"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points. The tension value cannot be set for this method, and defaults to a value equivalent to 0.5.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user must keep the original points if they are needed.","pos":[0,58]},{"content":"The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[59,202]},{"content":"If the first point and the last point in the <ph id=\"ph1\">`points`</ph> array are not the same point, the curve is closed by connecting these two points.","pos":[203,338],"source":" If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points."},{"content":"The tension value cannot be set for this method, and defaults to a value equivalent to 0.5.","pos":[339,430]}]},{"pos":[46451,46565],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curve.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curve."},{"pos":[47130,47262],"content":"Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[0,132],"nodes":[{"content":"Adds a closed curve to this path.","pos":[0,33]},{"content":"A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[34,132]}]}]},{"pos":[47274,47704],"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points. The tension value cannot be set for this method, and defaults to a value equivalent to 0.5.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user must keep the original points if they are needed.","pos":[0,58]},{"content":"The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[59,202]},{"content":"If the first point and the last point in the <ph id=\"ph1\">`points`</ph> array are not the same point, the curve is closed by connecting these two points.","pos":[203,338],"source":" If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points."},{"content":"The tension value cannot be set for this method, and defaults to a value equivalent to 0.5.","pos":[339,430]}]},{"pos":[48090,48205],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curve.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curve."},{"pos":[48814,48946],"content":"Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[0,132],"nodes":[{"content":"Adds a closed curve to this path.","pos":[0,33]},{"content":"A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[34,132]}]}]},{"pos":[48958,49296],"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user must keep the original points if they are needed.","pos":[0,58]},{"content":"The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[59,202]},{"content":"If the first point and the last point in the <ph id=\"ph1\">`points`</ph> array are not the same point, the curve is closed by connecting these two points.","pos":[203,338],"source":" If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points."}]},{"pos":[50406,50520],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curve.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curve."},{"pos":[50584,50762],"content":"A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.","pos":[0,178]}]},{"pos":[51376,51508],"content":"Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[0,132],"nodes":[{"content":"Adds a closed curve to this path.","pos":[0,33]},{"content":"A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[34,132]}]}]},{"pos":[51520,51858],"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user must keep the original points if they are needed.","pos":[0,58]},{"content":"The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[59,202]},{"content":"If the first point and the last point in the <ph id=\"ph1\">`points`</ph> array are not the same point, the curve is closed by connecting these two points.","pos":[203,338],"source":" If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points."}]},{"pos":[52259,52374],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curve.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curve."},{"pos":[52438,52616],"content":"A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.","pos":[0,178]}]},{"pos":[53146,53287],"content":"Adds a spline curve to the current figure. A cardinal spline curve is used because the curve travels through each of the points in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a spline curve to the current figure. A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[0,141],"nodes":[{"content":"Adds a spline curve to the current figure.","pos":[0,42]},{"content":"A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[43,141]}]}]},{"pos":[53299,53501],"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[0,202],"nodes":[{"content":"The user must keep the original points if they are needed.","pos":[0,58]},{"content":"The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[59,202]}]}]},{"pos":[53879,53993],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curve.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curve."},{"pos":[54522,54663],"content":"Adds a spline curve to the current figure. A cardinal spline curve is used because the curve travels through each of the points in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a spline curve to the current figure. A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[0,141],"nodes":[{"content":"Adds a spline curve to the current figure.","pos":[0,42]},{"content":"A cardinal spline curve is used because the curve travels through each of the points in the array.","pos":[43,141]}]}]},{"pos":[54675,54877],"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[0,202],"nodes":[{"content":"The user must keep the original points if they are needed.","pos":[0,58]},{"content":"The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[59,202]}]}]},{"pos":[55285,55400],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curve.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curve."},{"pos":[55973,56015],"content":"Adds a spline curve to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a spline curve to the current figure.","pos":[0,42]}]},{"pos":[56027,56229],"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[0,202],"nodes":[{"content":"The user must keep the original points if they are needed.","pos":[0,58]},{"content":"The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[59,202]}]}]},{"pos":[56622,56736],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curve.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curve."},{"pos":[56800,56931],"content":"A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.","pos":[0,131],"nodes":[{"content":"A value that specifies the amount that the curve bends between control points.","pos":[0,78]},{"content":"Values greater than 1 produce unpredictable results.","pos":[79,131]}]}]},{"pos":[57509,57551],"content":"Adds a spline curve to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a spline curve to the current figure.","pos":[0,42]}]},{"pos":[57563,57765],"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[0,202],"nodes":[{"content":"The user must keep the original points if they are needed.","pos":[0,58]},{"content":"The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[59,202]}]}]},{"pos":[58188,58303],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curve.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curve."},{"pos":[58367,58498],"content":"A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.","pos":[0,131],"nodes":[{"content":"A value that specifies the amount that the curve bends between control points.","pos":[0,78]},{"content":"Values greater than 1 produce unpredictable results.","pos":[79,131]}]}]},{"pos":[59159,59201],"content":"Adds a spline curve to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a spline curve to the current figure.","pos":[0,42]}]},{"pos":[59214,59581],"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.       The curve begins at the point in the array specified by the `offset` parameter and includes the number of points (segments) specified by `numberOfSegments`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The user must keep the original points if they are needed.","pos":[0,58]},{"content":"The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[59,202]},{"content":"The curve begins at the point in the array specified by the <ph id=\"ph1\">`offset`</ph> parameter and includes the number of points (segments) specified by <ph id=\"ph2\">`numberOfSegments`</ph>.","pos":[209,365],"source":"       The curve begins at the point in the array specified by the `offset` parameter and includes the number of points (segments) specified by `numberOfSegments`."}]},{"pos":[60844,60958],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curve.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curve."},{"pos":[61020,61112],"content":"The index of the element in the <ph id=\"ph1\">`points`</ph> array that is used as the first point in the curve.","needQuote":true,"needEscape":true,"source":"The index of the element in the `points` array that is used as the first point in the curve."},{"pos":[61184,61315],"content":"A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.","pos":[0,131],"nodes":[{"content":"A value that specifies the amount that the curve bends between control points.","pos":[0,78]},{"content":"Values greater than 1 produce unpredictable results.","pos":[79,131]}]}]},{"pos":[61379,61510],"content":"A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.","pos":[0,131],"nodes":[{"content":"A value that specifies the amount that the curve bends between control points.","pos":[0,78]},{"content":"Values greater than 1 produce unpredictable results.","pos":[79,131]}]}]},{"pos":[62176,62218],"content":"Adds a spline curve to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a spline curve to the current figure.","pos":[0,42]}]},{"pos":[62231,62585],"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.       The curve begins at the point in the array specified by `offset`, and includes the number of points (segments) specified by `numberOfSegments`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The user must keep the original points if they are needed.","pos":[0,58]},{"content":"The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[59,202]},{"content":"The curve begins at the point in the array specified by <ph id=\"ph1\">`offset`</ph>, and includes the number of points (segments) specified by <ph id=\"ph2\">`numberOfSegments`</ph>.","pos":[209,352],"source":"       The curve begins at the point in the array specified by `offset`, and includes the number of points (segments) specified by `numberOfSegments`."}]},{"pos":[63043,63158],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the curve.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curve."},{"pos":[63220,63312],"content":"The index of the element in the <ph id=\"ph1\">`points`</ph> array that is used as the first point in the curve.","needQuote":true,"needEscape":true,"source":"The index of the element in the `points` array that is used as the first point in the curve."},{"pos":[63384,63491],"content":"The number of segments used to draw the curve. A segment can be thought of as a line connecting two points.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of segments used to draw the curve. A segment can be thought of as a line connecting two points.","pos":[0,107],"nodes":[{"content":"The number of segments used to draw the curve.","pos":[0,46]},{"content":"A segment can be thought of as a line connecting two points.","pos":[47,107]}]}]},{"pos":[63555,63686],"content":"A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.","pos":[0,131],"nodes":[{"content":"A value that specifies the amount that the curve bends between control points.","pos":[0,78]},{"content":"Values greater than 1 produce unpredictable results.","pos":[79,131]}]}]},{"pos":[64230,64266],"content":"Adds an ellipse to the current path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an ellipse to the current path.","pos":[0,36]}]},{"pos":[65243,65355],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Rectangle\"></xref> that represents the bounding rectangle that defines the ellipse."},{"pos":[65906,65942],"content":"Adds an ellipse to the current path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an ellipse to the current path.","pos":[0,36]}]},{"pos":[66247,66360],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the bounding rectangle that defines the ellipse."},{"pos":[67002,67038],"content":"Adds an ellipse to the current path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an ellipse to the current path.","pos":[0,36]}]},{"pos":[67332,67425],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[67482,67575],"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[67636,67697],"content":"The width of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the bounding rectangle that defines the ellipse.","pos":[0,61]}]},{"pos":[67759,67821],"content":"The height of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the bounding rectangle that defines the ellipse.","pos":[0,62]}]},{"pos":[68483,68519],"content":"Adds an ellipse to the current path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an ellipse to the current path.","pos":[0,36]}]},{"pos":[68822,68915],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[68973,69066],"content":"The y-coordinate of the upper left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[69128,69189],"content":"The width of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the bounding rectangle that defines the ellipse.","pos":[0,61]}]},{"pos":[69252,69314],"content":"The height of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the bounding rectangle that defines the ellipse.","pos":[0,62]}]},{"pos":[69885,69975],"content":"Appends a line segment to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Appends a line segment to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[69987,70314],"content":"This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","pos":[0,327],"nodes":[{"content":"This method adds the line segment defined by the specified points to the end of this &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;.","pos":[0,130],"source":"This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>."},{"content":"If there are previous lines or curves in the &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","pos":[131,327],"source":" If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment."}]}]},{"pos":[70646,70737],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the starting point of the line.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> that represents the starting point of the line."},{"pos":[70804,70889],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the endpoint of the line.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> that represents the endpoint of the line."},{"pos":[71467,71557],"content":"Appends a line segment to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Appends a line segment to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[71569,71896],"content":"This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","pos":[0,327],"nodes":[{"content":"This method adds the line segment defined by the specified points to the end of this &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;.","pos":[0,130],"source":"This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>."},{"content":"If there are previous lines or curves in the &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","pos":[131,327],"source":" If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment."}]}]},{"pos":[72231,72323],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the starting point of the line.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the starting point of the line."},{"pos":[72391,72477],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the endpoint of the line.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the endpoint of the line."},{"pos":[73101,73146],"content":"Appends a line segment to the current figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Appends a line segment to the current figure.","pos":[0,45]}]},{"pos":[73158,73454],"content":"This method adds the line segment defined by the specified points to the end of the current figure. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method adds the line segment defined by the specified points to the end of the current figure. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","pos":[0,296],"nodes":[{"content":"This method adds the line segment defined by the specified points to the end of the current figure.","pos":[0,99]},{"content":"If there are previous lines or curves in the &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","pos":[100,296],"source":" If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment."}]}]},{"pos":[74301,74352],"content":"The x-coordinate of the starting point of the line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the starting point of the line.","pos":[0,51]}]},{"pos":[74410,74461],"content":"The y-coordinate of the starting point of the line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the starting point of the line.","pos":[0,51]}]},{"pos":[74519,74564],"content":"The x-coordinate of the endpoint of the line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the endpoint of the line.","pos":[0,45]}]},{"pos":[74622,74667],"content":"The y-coordinate of the endpoint of the line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the endpoint of the line.","pos":[0,45]}]},{"pos":[75311,75401],"content":"Appends a line segment to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Appends a line segment to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[75413,75740],"content":"This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","pos":[0,327],"nodes":[{"content":"This method adds the line segment defined by the specified points to the end of this &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;.","pos":[0,130],"source":"This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>."},{"content":"If there are previous lines or curves in the &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;, a line segment is drawn to connect the last point in the path to the first point in the new line segment.","pos":[131,327],"source":" If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment."}]}]},{"pos":[76052,76103],"content":"The x-coordinate of the starting point of the line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the starting point of the line.","pos":[0,51]}]},{"pos":[76162,76213],"content":"The y-coordinate of the starting point of the line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the starting point of the line.","pos":[0,51]}]},{"pos":[76272,76317],"content":"The x-coordinate of the endpoint of the line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the endpoint of the line.","pos":[0,45]}]},{"pos":[76376,76421],"content":"The y-coordinate of the endpoint of the line.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the endpoint of the line.","pos":[0,45]}]},{"pos":[76944,77066],"content":"Appends a series of connected line segments to the end of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Appends a series of connected line segments to the end of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[77078,77442],"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment the starting point of the line. The `points` parameter specifies an array of endpoints. The first two specify the first line. Each additional point specifies the endpoint of a line segment whose starting point is the endpoint of the previous line.","needQuote":true,"needEscape":true,"nodes":[{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment the starting point of the line.","pos":[0,148]},{"content":"The <ph id=\"ph1\">`points`</ph> parameter specifies an array of endpoints.","pos":[149,204],"source":" The `points` parameter specifies an array of endpoints."},{"content":"The first two specify the first line.","pos":[205,242]},{"content":"Each additional point specifies the endpoint of a line segment whose starting point is the endpoint of the previous line.","pos":[243,364]}]},{"pos":[78544,78673],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the line segments to add.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the line segments to add."},{"pos":[79202,79324],"content":"Appends a series of connected line segments to the end of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Appends a series of connected line segments to the end of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[79336,79700],"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment the starting point of the line. The `points` parameter specifies an array of endpoints. The first two specify the first line. Each additional point specifies the endpoint of a line segment whose starting point is the endpoint of the previous line.","needQuote":true,"needEscape":true,"nodes":[{"content":"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment the starting point of the line.","pos":[0,148]},{"content":"The <ph id=\"ph1\">`points`</ph> parameter specifies an array of endpoints.","pos":[149,204],"source":" The `points` parameter specifies an array of endpoints."},{"content":"The first two specify the first line.","pos":[205,242]},{"content":"Each additional point specifies the endpoint of a line segment whose starting point is the endpoint of the previous line.","pos":[243,364]}]},{"pos":[80046,80176],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points that define the line segments to add.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the line segments to add."},{"pos":[80794,80888],"content":"Appends the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to this path.","needQuote":true,"needEscape":true,"source":"Appends the specified <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> to this path."},{"pos":[81947,82017],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to add.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> to add."},{"pos":[82082,82544],"content":"A Boolean value that specifies whether the first figure in the added path is part of the last figure in this path. A value of <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> specifies that (if possible) the first figure in the added path is part of the last figure in this path. A value of <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> specifies that the first figure in the added path is separate from the last figure in this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value that specifies whether the first figure in the added path is part of the last figure in this path.","pos":[0,114]},{"content":"A value of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specifies that (if possible) the first figure in the added path is part of the last figure in this path.","pos":[115,291],"source":" A value of <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> specifies that (if possible) the first figure in the added path is part of the last figure in this path."},{"content":"A value of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specifies that the first figure in the added path is separate from the last figure in this path.","pos":[292,462],"source":" A value of <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> specifies that the first figure in the added path is separate from the last figure in this path."}]},{"pos":[83165,83210],"content":"Adds the outline of a pie shape to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the outline of a pie shape to this path.","pos":[0,45]}]},{"pos":[83222,83480],"content":"The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline. The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline.","pos":[0,137]},{"content":"The partial outline begins at <ph id=\"ph1\">`startAngle`</ph> (measured clockwise from the x-axis) and ends at <ph id=\"ph2\">`startAngle`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`sweepAngle`</ph>.","pos":[138,258],"source":" The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`."}]},{"pos":[83862,84002],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the bounding rectangle that defines the ellipse from which the pie is drawn.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Rectangle\"></xref> that represents the bounding rectangle that defines the ellipse from which the pie is drawn."},{"pos":[84069,84155],"content":"The starting angle for the pie section, measured in degrees clockwise from the x-axis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting angle for the pie section, measured in degrees clockwise from the x-axis.","pos":[0,86]}]},{"pos":[84222,84333],"content":"The angle between <ph id=\"ph1\">`startAngle`</ph> and the end of the pie section, measured in degrees clockwise from <ph id=\"ph2\">`startAngle`</ph>.","needQuote":true,"needEscape":true,"source":"The angle between `startAngle` and the end of the pie section, measured in degrees clockwise from `startAngle`."},{"pos":[85049,85094],"content":"Adds the outline of a pie shape to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the outline of a pie shape to this path.","pos":[0,45]}]},{"pos":[85106,85364],"content":"The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline. The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline.","pos":[0,137]},{"content":"The partial outline begins at <ph id=\"ph1\">`startAngle`</ph> (measured clockwise from the x-axis) and ends at <ph id=\"ph2\">`startAngle`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`sweepAngle`</ph>.","pos":[138,258],"source":" The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`."}]},{"pos":[86243,86364],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.","pos":[0,121]}]},{"pos":[86421,86542],"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.","pos":[0,121]}]},{"pos":[86603,86692],"content":"The width of the bounding rectangle that defines the ellipse from which the pie is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the bounding rectangle that defines the ellipse from which the pie is drawn.","pos":[0,89]}]},{"pos":[86754,86844],"content":"The height of the bounding rectangle that defines the ellipse from which the pie is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the bounding rectangle that defines the ellipse from which the pie is drawn.","pos":[0,90]}]},{"pos":[86911,86997],"content":"The starting angle for the pie section, measured in degrees clockwise from the x-axis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting angle for the pie section, measured in degrees clockwise from the x-axis.","pos":[0,86]}]},{"pos":[87064,87175],"content":"The angle between <ph id=\"ph1\">`startAngle`</ph> and the end of the pie section, measured in degrees clockwise from <ph id=\"ph2\">`startAngle`</ph>.","needQuote":true,"needEscape":true,"source":"The angle between `startAngle` and the end of the pie section, measured in degrees clockwise from `startAngle`."},{"pos":[87911,87956],"content":"Adds the outline of a pie shape to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the outline of a pie shape to this path.","pos":[0,45]}]},{"pos":[87968,88226],"content":"The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline. The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline.","pos":[0,137]},{"content":"The partial outline begins at <ph id=\"ph1\">`startAngle`</ph> (measured clockwise from the x-axis) and ends at <ph id=\"ph2\">`startAngle`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`sweepAngle`</ph>.","pos":[138,258],"source":" The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`."}]},{"pos":[88608,88729],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.","pos":[0,121]}]},{"pos":[88787,88908],"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.","pos":[0,121]}]},{"pos":[88970,89059],"content":"The width of the bounding rectangle that defines the ellipse from which the pie is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the bounding rectangle that defines the ellipse from which the pie is drawn.","pos":[0,89]}]},{"pos":[89122,89212],"content":"The height of the bounding rectangle that defines the ellipse from which the pie is drawn.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the bounding rectangle that defines the ellipse from which the pie is drawn.","pos":[0,90]}]},{"pos":[89279,89365],"content":"The starting angle for the pie section, measured in degrees clockwise from the x-axis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting angle for the pie section, measured in degrees clockwise from the x-axis.","pos":[0,86]}]},{"pos":[89432,89543],"content":"The angle between <ph id=\"ph1\">`startAngle`</ph> and the end of the pie section, measured in degrees clockwise from <ph id=\"ph2\">`startAngle`</ph>.","needQuote":true,"needEscape":true,"source":"The angle between `startAngle` and the end of the pie section, measured in degrees clockwise from `startAngle`."},{"pos":[90075,90103],"content":"Adds a polygon to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a polygon to this path.","pos":[0,28]}]},{"pos":[90115,90302],"content":"The points in the `points` array specify the vertices of a polygon. If the first point in the array is not the same as the last point, those two points are connected to close the polygon.","needQuote":true,"needEscape":true,"nodes":[{"content":"The points in the <ph id=\"ph1\">`points`</ph> array specify the vertices of a polygon.","pos":[0,67],"source":"The points in the `points` array specify the vertices of a polygon."},{"content":"If the first point in the array is not the same as the last point, those two points are connected to close the polygon.","pos":[68,187]}]},{"pos":[91278,91375],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that defines the polygon to add.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Point\"></xref> structures that defines the polygon to add."},{"pos":[91916,91944],"content":"Adds a polygon to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a polygon to this path.","pos":[0,28]}]},{"pos":[91956,92143],"content":"The points in the `points` array specify the vertices of a polygon. If the first point in the array is not the same as the last point, those two points are connected to close the polygon.","needQuote":true,"needEscape":true,"nodes":[{"content":"The points in the <ph id=\"ph1\">`points`</ph> array specify the vertices of a polygon.","pos":[0,67],"source":"The points in the `points` array specify the vertices of a polygon."},{"content":"If the first point in the array is not the same as the last point, those two points are connected to close the polygon.","pos":[68,187]}]},{"pos":[92495,92593],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that defines the polygon to add.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that defines the polygon to add."},{"pos":[93149,93179],"content":"Adds a rectangle to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a rectangle to this path.","pos":[0,30]}]},{"pos":[94143,94228],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the rectangle to add.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Rectangle\"></xref> that represents the rectangle to add."},{"pos":[94791,94821],"content":"Adds a rectangle to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a rectangle to this path.","pos":[0,30]}]},{"pos":[95130,95216],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the rectangle to add.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle to add."},{"pos":[95789,95830],"content":"Adds a series of rectangles to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a series of rectangles to this path.","pos":[0,41]}]},{"pos":[96804,96911],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the rectangles to add.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.Rectangle\"></xref> structures that represents the rectangles to add."},{"pos":[97490,97531],"content":"Adds a series of rectangles to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a series of rectangles to this path.","pos":[0,41]}]},{"pos":[97920,98028],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the rectangles to add.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.RectangleF\"></xref> structures that represents the rectangles to add."},{"pos":[98874,98906],"content":"Adds a text string to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a text string to this path.","pos":[0,32]}]},{"pos":[100650,100682],"content":"The <xref:System.String> to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.String&gt; to add.","pos":[0,32],"source":"The <xref:System.String> to add."}]},{"pos":[100757,100872],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.FontFamily\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the name of the font with which the test is drawn.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.FontFamily\"></xref> that represents the name of the font with which the test is drawn."},{"pos":[100933,101146],"content":"A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.FontStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that represents style information about the text (bold, italic, and so on).","pos":[0,135],"source":"A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on)."},{"content":"This must be cast as an integer (see the example code later in this section).","pos":[136,213]}]},{"pos":[101209,101267],"content":"The height of the em square box that bounds the character.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the em square box that bounds the character.","pos":[0,58]}]},{"pos":[101337,101429],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the point where the text starts.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> that represents the point where the text starts."},{"pos":[101506,101636],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies text formatting information, such as line spacing and alignment.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.StringFormat\"></xref> that specifies text formatting information, such as line spacing and alignment."},{"pos":[102483,102515],"content":"Adds a text string to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a text string to this path.","pos":[0,32]}]},{"pos":[103007,103039],"content":"The <xref:System.String> to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.String&gt; to add.","pos":[0,32],"source":"The <xref:System.String> to add."}]},{"pos":[103114,103229],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.FontFamily\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the name of the font with which the test is drawn.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.FontFamily\"></xref> that represents the name of the font with which the test is drawn."},{"pos":[103290,103503],"content":"A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.FontStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that represents style information about the text (bold, italic, and so on).","pos":[0,135],"source":"A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on)."},{"content":"This must be cast as an integer (see the example code later in this section).","pos":[136,213]}]},{"pos":[103566,103624],"content":"The height of the em square box that bounds the character.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the em square box that bounds the character.","pos":[0,58]}]},{"pos":[103695,103788],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the point where the text starts.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the point where the text starts."},{"pos":[103865,103995],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies text formatting information, such as line spacing and alignment.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.StringFormat\"></xref> that specifies text formatting information, such as line spacing and alignment."},{"pos":[104857,104889],"content":"Adds a text string to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a text string to this path.","pos":[0,32]}]},{"pos":[105388,105420],"content":"The <xref:System.String> to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.String&gt; to add.","pos":[0,32],"source":"The <xref:System.String> to add."}]},{"pos":[105495,105610],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.FontFamily\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the name of the font with which the test is drawn.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.FontFamily\"></xref> that represents the name of the font with which the test is drawn."},{"pos":[105671,105884],"content":"A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.FontStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that represents style information about the text (bold, italic, and so on).","pos":[0,135],"source":"A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on)."},{"content":"This must be cast as an integer (see the example code later in this section).","pos":[136,213]}]},{"pos":[105947,106005],"content":"The height of the em square box that bounds the character.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the em square box that bounds the character.","pos":[0,58]}]},{"pos":[106083,106182],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the rectangle that bounds the text.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Rectangle\"></xref> that represents the rectangle that bounds the text."},{"pos":[106259,106389],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies text formatting information, such as line spacing and alignment.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.StringFormat\"></xref> that specifies text formatting information, such as line spacing and alignment."},{"pos":[107256,107288],"content":"Adds a text string to this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a text string to this path.","pos":[0,32]}]},{"pos":[107788,107820],"content":"The <xref:System.String> to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.String&gt; to add.","pos":[0,32],"source":"The <xref:System.String> to add."}]},{"pos":[107895,108010],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.FontFamily\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the name of the font with which the test is drawn.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.FontFamily\"></xref> that represents the name of the font with which the test is drawn."},{"pos":[108071,108284],"content":"A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.FontStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that represents style information about the text (bold, italic, and so on).","pos":[0,135],"source":"A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on)."},{"content":"This must be cast as an integer (see the example code later in this section).","pos":[136,213]}]},{"pos":[108347,108405],"content":"The height of the em square box that bounds the character.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the em square box that bounds the character.","pos":[0,58]}]},{"pos":[108484,108584],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the rectangle that bounds the text.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle that bounds the text."},{"pos":[108661,108791],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies text formatting information, such as line spacing and alignment.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.StringFormat\"></xref> that specifies text formatting information, such as line spacing and alignment."},{"pos":[109267,109301],"content":"Clears all markers from this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clears all markers from this path.","pos":[0,34]}]},{"pos":[109314,109730],"content":"Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to create a marker at the current location in a <xref:System.Drawing.Drawing2D.GraphicsPath>. Use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> method to iterate through the existing markers in a path.       Markers are used to separate groups of subpaths. One or more subpaths can be contained between two markers.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to create a marker at the current location in a <xref:System.Drawing.Drawing2D.GraphicsPath>. Use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> method to iterate through the existing markers in a path.       Markers are used to separate groups of subpaths. One or more subpaths can be contained between two markers.","pos":[0,414],"nodes":[{"content":"Use the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A&gt; method to create a marker at the current location in a &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;.","pos":[0,167],"source":"Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to create a marker at the current location in a <xref:System.Drawing.Drawing2D.GraphicsPath>."},{"content":"Use the &lt;xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A&gt; method to iterate through the existing markers in a path.","pos":[168,300],"source":" Use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> method to iterate through the existing markers in a path."},{"content":"Markers are used to separate groups of subpaths.","pos":[307,355]},{"content":"One or more subpaths can be contained between two markers.","pos":[356,414]}]}]},{"pos":[111087,111122],"content":"Creates an exact copy of this path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an exact copy of this path.","pos":[0,35]}]},{"pos":[112210,112312],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> this method creates, cast as an object.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> this method creates, cast as an object."},{"pos":[112799,112949],"content":"Closes all open figures in this path and starts a new figure. It closes each open figure by connecting a line from its endpoint to its starting point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes all open figures in this path and starts a new figure. It closes each open figure by connecting a line from its endpoint to its starting point.","pos":[0,150],"nodes":[{"content":"Closes all open figures in this path and starts a new figure.","pos":[0,61]},{"content":"It closes each open figure by connecting a line from its endpoint to its starting point.","pos":[62,150]}]}]},{"pos":[114321,114533],"content":"Closes the current figure and starts a new figure. If the current figure contains a sequence of connected lines and curves, the method closes the loop by connecting a line from the endpoint to the starting point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the current figure and starts a new figure. If the current figure contains a sequence of connected lines and curves, the method closes the loop by connecting a line from the endpoint to the starting point.","pos":[0,212],"nodes":[{"content":"Closes the current figure and starts a new figure.","pos":[0,50]},{"content":"If the current figure contains a sequence of connected lines and curves, the method closes the loop by connecting a line from the endpoint to the starting point.","pos":[51,212]}]}]},{"pos":[115877,115972],"content":"Releases all resources used by this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[115984,116116],"content":"Calling Dispose allows the resources used by this <xref:System.Drawing.Drawing2D.GraphicsPath> to be reallocated for other purposes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calling Dispose allows the resources used by this &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt; to be reallocated for other purposes.","pos":[0,132],"source":"Calling Dispose allows the resources used by this <xref:System.Drawing.Drawing2D.GraphicsPath> to be reallocated for other purposes."}]},{"pos":[116632,116836],"content":"Gets or sets a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines how the interiors of shapes in this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> are filled.","needQuote":true,"needEscape":true,"source":"Gets or sets a <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the interiors of shapes in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> are filled."},{"pos":[117001,117191],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies how the interiors of shapes in this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> are filled.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that specifies how the interiors of shapes in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> are filled."},{"pos":[117646,117770],"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","pos":[0,124]}]},{"pos":[118280,118356],"content":"Converts each curve in this path into a sequence of connected line segments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts each curve in this path into a sequence of connected line segments.","pos":[0,76]}]},{"pos":[119111,119282],"content":"Applies the specified transform and then converts each curve in this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> into a sequence of connected line segments.","needQuote":true,"needEscape":true,"source":"Applies the specified transform and then converts each curve in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> into a sequence of connected line segments."},{"pos":[119620,119779],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by which to transform this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> before flattening.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by which to transform this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> before flattening."},{"pos":[120361,120491],"content":"Converts each curve in this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> into a sequence of connected line segments.","needQuote":true,"needEscape":true,"source":"Converts each curve in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> into a sequence of connected line segments."},{"pos":[121720,121879],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by which to transform this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> before flattening.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by which to transform this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> before flattening."},{"pos":[121944,122156],"content":"Specifies the maximum permitted error between the curve and its flattened approximation. A value of 0.25 is the default. Reducing the flatness value will increase the number of line segments in the approximation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the maximum permitted error between the curve and its flattened approximation. A value of 0.25 is the default. Reducing the flatness value will increase the number of line segments in the approximation.","pos":[0,212],"nodes":[{"content":"Specifies the maximum permitted error between the curve and its flattened approximation.","pos":[0,88]},{"content":"A value of 0.25 is the default.","pos":[89,120]},{"content":"Reducing the flatness value will increase the number of line segments in the approximation.","pos":[121,212]}]}]},{"pos":[122615,122711],"content":"Returns a rectangle that bounds this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[122724,123082],"content":"The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.","needQuote":false,"needEscape":true,"nodes":[{"content":"The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.","pos":[0,358],"nodes":[{"content":"The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path.","pos":[0,172]},{"content":"The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.","pos":[173,358]}]}]},{"pos":[124551,124704],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents a rectangle that bounds this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> that represents a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[125249,125445],"content":"Returns a rectangle that bounds this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when this path is transformed by the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when this path is transformed by the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[125458,125816],"content":"The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.","needQuote":false,"needEscape":true,"nodes":[{"content":"The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.","pos":[0,358],"nodes":[{"content":"The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path.","pos":[0,172]},{"content":"The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.","pos":[173,358]}]}]},{"pos":[126113,126405],"content":"The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a transformation to be applied to this path before the bounding rectangle is calculated. This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies a transformation to be applied to this path before the bounding rectangle is calculated.","pos":[0,160],"source":"The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a transformation to be applied to this path before the bounding rectangle is calculated."},{"content":"This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle.","pos":[161,292]}]},{"pos":[126475,126628],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents a rectangle that bounds this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> that represents a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[127223,127495],"content":"Returns a rectangle that bounds this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the current path is transformed by the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and drawn with the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when the current path is transformed by the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> and drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[127508,127866],"content":"The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.","needQuote":false,"needEscape":true,"nodes":[{"content":"The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.","pos":[0,358],"nodes":[{"content":"The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path.","pos":[0,172]},{"content":"The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.","pos":[173,358]}]}]},{"pos":[128187,128479],"content":"The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a transformation to be applied to this path before the bounding rectangle is calculated. This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies a transformation to be applied to this path before the bounding rectangle is calculated.","pos":[0,160],"source":"The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a transformation to be applied to this path before the bounding rectangle is calculated."},{"content":"This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle.","pos":[161,292]}]},{"pos":[128544,128670],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with which to draw the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Pen\"></xref> with which to draw the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[128740,128893],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents a rectangle that bounds this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> that represents a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[129369,129526],"content":"Gets the last point in the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*&gt; array of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the last point in the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> array of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[130391,130534],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the last point in this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the last point in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[131142,131357],"content":"Indicates whether the specified point is contained within (under) the outline of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[131369,131468],"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","pos":[0,99]}]},{"pos":[131837,131917],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the location to test.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> that specifies the location to test."},{"pos":[131982,132034],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to test.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Pen\"></xref> to test."},{"pos":[132093,132441],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within the outline of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[133058,133273],"content":"Indicates whether the specified point is contained within (under) the outline of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[133285,133384],"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","pos":[0,99]}]},{"pos":[133755,133836],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the location to test.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that specifies the location to test."},{"pos":[133901,133953],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to test.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Pen\"></xref> to test."},{"pos":[134012,134360],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within the outline of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[135047,135331],"content":"Indicates whether the specified point is contained within (under) the outline of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and using the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref> and using the specified <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[135343,135605],"content":"This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of `graphics` is temporarily applied before testing for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","pos":[0,99]},{"content":"The coordinates of the point to be tested are given in world coordinates.","pos":[100,173]},{"content":"The transform matrix of <ph id=\"ph1\">`graphics`</ph> is temporarily applied before testing for visibility.","pos":[174,262],"source":" The transform matrix of `graphics` is temporarily applied before testing for visibility."}]},{"pos":[136002,136082],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the location to test.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> that specifies the location to test."},{"pos":[136147,136199],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to test.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Pen\"></xref> to test."},{"pos":[136274,136352],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which to test visibility.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility."},{"pos":[136411,136757],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within the outline of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> as drawn with the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> as drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[137449,137733],"content":"Indicates whether the specified point is contained within (under) the outline of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and using the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref> and using the specified <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[137745,138007],"content":"This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of `graphics` is temporarily applied before testing for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","pos":[0,99]},{"content":"The coordinates of the point to be tested are given in world coordinates.","pos":[100,173]},{"content":"The transform matrix of <ph id=\"ph1\">`graphics`</ph> is temporarily applied before testing for visibility.","pos":[174,262],"source":" The transform matrix of `graphics` is temporarily applied before testing for visibility."}]},{"pos":[138406,138487],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the location to test.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that specifies the location to test."},{"pos":[138552,138604],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to test.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Pen\"></xref> to test."},{"pos":[138679,138757],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which to test visibility.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility."},{"pos":[138816,139170],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within (under) the outline of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> as drawn with the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> as drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[139810,140025],"content":"Indicates whether the specified point is contained within (under) the outline of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[140037,140136],"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","pos":[0,99]}]},{"pos":[140479,140517],"content":"The x-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point to test.","pos":[0,38]}]},{"pos":[140574,140612],"content":"The y-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point to test.","pos":[0,38]}]},{"pos":[140677,140729],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to test.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Pen\"></xref> to test."},{"pos":[140788,141136],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within the outline of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[141786,142001],"content":"Indicates whether the specified point is contained within (under) the outline of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[142013,142112],"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","pos":[0,99]}]},{"pos":[142460,142498],"content":"The x-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point to test.","pos":[0,38]}]},{"pos":[142556,142594],"content":"The y-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point to test.","pos":[0,38]}]},{"pos":[142659,142711],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to test.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Pen\"></xref> to test."},{"pos":[142770,143118],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within the outline of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[143833,144117],"content":"Indicates whether the specified point is contained within (under) the outline of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and using the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref> and using the specified <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[144129,144391],"content":"This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of `graphics` is temporarily applied before testing for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","pos":[0,99]},{"content":"The coordinates of the point to be tested are given in world coordinates.","pos":[100,173]},{"content":"The transform matrix of <ph id=\"ph1\">`graphics`</ph> is temporarily applied before testing for visibility.","pos":[174,262],"source":" The transform matrix of `graphics` is temporarily applied before testing for visibility."}]},{"pos":[145636,145674],"content":"The x-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point to test.","pos":[0,38]}]},{"pos":[145731,145769],"content":"The y-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point to test.","pos":[0,38]}]},{"pos":[145834,145886],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to test.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Pen\"></xref> to test."},{"pos":[145961,146039],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which to test visibility.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility."},{"pos":[146098,146444],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within the outline of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> as drawn with the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> as drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[147169,147453],"content":"Indicates whether the specified point is contained within (under) the outline of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when drawn with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and using the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref> and using the specified <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[147465,147741],"content":"This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method tests to see if the outline of a given path is rendered visible at the specified point.","pos":[0,99]},{"content":"The coordinates of the point to be tested are given in world coordinates.","pos":[100,173]},{"content":"The transform matrix of the <ph id=\"ph1\">`graphics`</ph> parameter is temporarily applied before testing for visibility.","pos":[174,276],"source":" The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility."}]},{"pos":[148123,148161],"content":"The x-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point to test.","pos":[0,38]}]},{"pos":[148219,148257],"content":"The y-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point to test.","pos":[0,38]}]},{"pos":[148322,148374],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to test.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Pen\"></xref> to test."},{"pos":[148449,148527],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which to test visibility.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility."},{"pos":[148586,148940],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within (under) the outline of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> as drawn with the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> as drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[149467,149589],"content":"Indicates whether the specified point is contained within this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[149856,149934],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the point to test.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> that represents the point to test."},{"pos":[149993,150256],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[150781,150903],"content":"Indicates whether the specified point is contained within this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[151229,151308],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the point to test.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the point to test."},{"pos":[151367,151630],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[152225,152347],"content":"Indicates whether the specified point is contained within this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[152359,152535],"content":"The coordinates of the point to be tested are given in world coordinates. The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The coordinates of the point to be tested are given in world coordinates.","pos":[0,73]},{"content":"The transform matrix of the <ph id=\"ph1\">`graphics`</ph> parameter is temporarily applied before testing for visibility.","pos":[74,176],"source":" The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility."}]},{"pos":[152816,152894],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the point to test.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> that represents the point to test."},{"pos":[152969,153047],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which to test visibility.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility."},{"pos":[153106,153369],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[153969,154091],"content":"Indicates whether the specified point is contained within this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[154103,154279],"content":"The coordinates of the point to be tested are given in world coordinates. The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The coordinates of the point to be tested are given in world coordinates.","pos":[0,73]},{"content":"The transform matrix of the <ph id=\"ph1\">`graphics`</ph> parameter is temporarily applied before testing for visibility.","pos":[74,176],"source":" The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility."}]},{"pos":[154619,154698],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the point to test.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.PointF\"></xref> that represents the point to test."},{"pos":[154773,154851],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which to test visibility.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility."},{"pos":[154910,155114],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within this; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[155662,155784],"content":"Indicates whether the specified point is contained within this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[156082,156120],"content":"The x-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point to test.","pos":[0,38]}]},{"pos":[156177,156215],"content":"The y-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point to test.","pos":[0,38]}]},{"pos":[156274,156537],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[157095,157217],"content":"Indicates whether the specified point is contained within this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[157520,157558],"content":"The x-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point to test.","pos":[0,38]}]},{"pos":[157616,157654],"content":"The y-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point to test.","pos":[0,38]}]},{"pos":[157713,157976],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[158599,158787],"content":"Indicates whether the specified point is contained within this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, using the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>, using the specified <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[158799,158961],"content":"The coordinates of the point to be tested are given in world coordinates. The transform matrix of `graphics` is temporarily applied before testing for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The coordinates of the point to be tested are given in world coordinates.","pos":[0,73]},{"content":"The transform matrix of <ph id=\"ph1\">`graphics`</ph> is temporarily applied before testing for visibility.","pos":[74,162],"source":" The transform matrix of `graphics` is temporarily applied before testing for visibility."}]},{"pos":[159948,159986],"content":"The x-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point to test.","pos":[0,38]}]},{"pos":[160043,160081],"content":"The y-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point to test.","pos":[0,38]}]},{"pos":[160156,160234],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which to test visibility.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility."},{"pos":[160293,160556],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[161189,161400],"content":"Indicates whether the specified point is contained within this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the visible clip region of the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> in the visible clip region of the specified <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[161412,161588],"content":"The coordinates of the point to be tested are given in world coordinates. The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The coordinates of the point to be tested are given in world coordinates.","pos":[0,73]},{"content":"The transform matrix of the <ph id=\"ph1\">`graphics`</ph> parameter is temporarily applied before testing for visibility.","pos":[74,176],"source":" The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility."}]},{"pos":[161911,161949],"content":"The x-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point to test.","pos":[0,38]}]},{"pos":[162007,162045],"content":"The y-coordinate of the point to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point to test.","pos":[0,38]}]},{"pos":[162120,162198],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which to test visibility.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility."},{"pos":[162257,162520],"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified point is contained within this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[162972,163190],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.PathData\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that encapsulates arrays of points (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">points</ph><ept id=\"p2\">&lt;/code&gt;</ept>) and types (<bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">types</ph><ept id=\"p3\">&lt;/code&gt;</ept>) for this <bpt id=\"p4\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Drawing.Drawing2D.PathData\"></xref> that encapsulates arrays of points (<code>points</code>) and types (<code>types</code>) for this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[163350,163530],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.PathData\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that encapsulates arrays for both the points and types for this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.PathData\"></xref> that encapsulates arrays for both the points and types for this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[163991,164019],"content":"Gets the points in the path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the points in the path.","pos":[0,28]}]},{"pos":[164161,164248],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that represent the path.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> objects that represent the path."},{"pos":[164706,164819],"content":"Gets the types of the corresponding points in the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the types of the corresponding points in the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*&gt; array.","pos":[0,113],"source":"Gets the types of the corresponding points in the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> array."}]},{"pos":[164832,165650],"content":"The array of bytes returned by the PathTypes property specifies point types and flags for the data points in a path. For each point, bits 0 through 2 indicate the type of a point, and bits 3 through 7 hold a set of flags that specify the attributes of a point. The following table shows possible values and their meanings.      |Value|Meaning|   |-----------|-------------|   |0|Indicates that the point is the start of a figure.|   |1|Indicates that the point is one of the two endpoints of a line.|   |3|Indicates that the point is an endpoint or control point of a cubic Bézier spline.|   |0x7|Masks all bits except for the three low-order bits, which indicate the point type.|   |0x20|Specifies that the point is a marker.|   |0x80|Specifies that the point is the last point in a closed subpath (figure).|","needQuote":false,"needEscape":true,"nodes":[{"content":"The array of bytes returned by the PathTypes property specifies point types and flags for the data points in a path. For each point, bits 0 through 2 indicate the type of a point, and bits 3 through 7 hold a set of flags that specify the attributes of a point. The following table shows possible values and their meanings.      |Value|Meaning|   |-----------|-------------|   |0|Indicates that the point is the start of a figure.|   |1|Indicates that the point is one of the two endpoints of a line.|   |3|Indicates that the point is an endpoint or control point of a cubic Bézier spline.|   |0x7|Masks all bits except for the three low-order bits, which indicate the point type.|   |0x20|Specifies that the point is a marker.|   |0x80|Specifies that the point is the last point in a closed subpath (figure).|","pos":[0,809],"nodes":[{"content":"The array of bytes returned by the PathTypes property specifies point types and flags for the data points in a path.","pos":[0,116]},{"content":"For each point, bits 0 through 2 indicate the type of a point, and bits 3 through 7 hold a set of flags that specify the attributes of a point.","pos":[117,260]},{"content":"The following table shows possible values and their meanings.","pos":[261,322]},{"content":"|Value|Meaning|   |-----------|-------------|   |0|Indicates that the point is the start of a figure.|   |1|Indicates that the point is one of the two endpoints of a line.|   |3|Indicates that the point is an endpoint or control point of a cubic Bézier spline.|   |0x7|Masks all bits except for the three low-order bits, which indicate the point type.|   |0x20|Specifies that the point is a marker.|   |0x80|Specifies that the point is the last point in a closed subpath (figure).|","pos":[328,809]}]}]},{"pos":[165765,165848],"content":"An array of bytes that specifies the types of the corresponding points in the path.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of bytes that specifies the types of the corresponding points in the path.","pos":[0,83]}]},{"pos":[166310,166471],"content":"Gets the number of elements in the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints<bpt id=\"p1\">*</bpt>&gt; or the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes<ept id=\"p1\">*</ept>&gt; array.","needQuote":true,"needEscape":true,"source":"Gets the number of elements in the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> or the <xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes*> array."},{"pos":[166582,166764],"content":"An integer that specifies the number of elements in the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints<bpt id=\"p1\">*</bpt>&gt; or the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes<ept id=\"p1\">*</ept>&gt; array.","needQuote":true,"needEscape":true,"source":"An integer that specifies the number of elements in the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> or the <xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes*> array."},{"pos":[167206,167468],"content":"Empties the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes<ept id=\"p1\">*</ept>&gt; arrays and sets the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Empties the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> and <xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes*> arrays and sets the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> to <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref>."},{"pos":[168969,169135],"content":"Reverses the order of points in the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*&gt; array of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Reverses the order of points in the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> array of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[170591,170672],"content":"Sets a marker on this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Sets a marker on this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[170685,171044],"content":"This method creates a marker on the path that can be used to separate sections of the path. You can then use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> methods to iterate through the markers in the path.       Markers are used to separate groups of subpaths. One or more subpaths can be contained between two markers in the path.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method creates a marker on the path that can be used to separate sections of the path. You can then use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> methods to iterate through the markers in the path.       Markers are used to separate groups of subpaths. One or more subpaths can be contained between two markers in the path.","pos":[0,357],"nodes":[{"content":"This method creates a marker on the path that can be used to separate sections of the path.","pos":[0,91]},{"content":"You can then use the &lt;xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A&gt; methods to iterate through the markers in the path.","pos":[92,231],"source":" You can then use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> methods to iterate through the markers in the path."},{"content":"Markers are used to separate groups of subpaths.","pos":[238,286]},{"content":"One or more subpaths can be contained between two markers in the path.","pos":[287,357]}]}]},{"pos":[172308,172433],"content":"Starts a new figure without closing the current figure. All subsequent points added to the path are added to this new figure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a new figure without closing the current figure. All subsequent points added to the path are added to this new figure.","pos":[0,125],"nodes":[{"content":"Starts a new figure without closing the current figure.","pos":[0,55]},{"content":"All subsequent points added to the path are added to this new figure.","pos":[56,125]}]}]},{"pos":[172446,172858],"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.       This method starts a new subpath in the path. Subpaths allow you to separate a path into sections and use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator> class to iterate through the subpaths.","needQuote":false,"needEscape":true,"nodes":[{"content":"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.       This method starts a new subpath in the path. Subpaths allow you to separate a path into sections and use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator> class to iterate through the subpaths.","pos":[0,410],"nodes":[{"content":"The user must keep the original points if they are needed.","pos":[0,58]},{"content":"The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.","pos":[59,202]},{"content":"This method starts a new subpath in the path.","pos":[209,254]},{"content":"Subpaths allow you to separate a path into sections and use the &lt;xref:System.Drawing.Drawing2D.GraphicsPathIterator&gt; class to iterate through the subpaths.","pos":[255,410],"source":" Subpaths allow you to separate a path into sections and use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator> class to iterate through the subpaths."}]}]},{"pos":[174504,174598],"content":"Applies a transform matrix to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Applies a transform matrix to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[174610,174716],"content":"The transformation can scale, translate, rotate, or skew the <xref:System.Drawing.Drawing2D.GraphicsPath>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformation can scale, translate, rotate, or skew the &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;.","pos":[0,106],"source":"The transformation can scale, translate, rotate, or skew the <xref:System.Drawing.Drawing2D.GraphicsPath>."}]},{"pos":[175885,175984],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the transformation to apply.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that represents the transformation to apply."},{"pos":[176579,176716],"content":"Applies a warp transform, defined by a rectangle and a parallelogram, to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Applies a warp transform, defined by a rectangle and a parallelogram, to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[177253,177579],"content":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram to which the rectangle defined by `srcRect` is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define a parallelogram to which the rectangle defined by <ph id=\"ph1\">`srcRect`</ph> is transformed.","pos":[0,153],"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram to which the rectangle defined by `srcRect` is transformed."},{"content":"The array can contain either three or four elements.","pos":[154,206]},{"content":"If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.","pos":[207,326]}]},{"pos":[177655,177799],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the rectangle that is transformed to the parallelogram defined by <ph id=\"ph1\">`destPoints`</ph>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle that is transformed to the parallelogram defined by `destPoints`."},{"pos":[178474,178611],"content":"Applies a warp transform, defined by a rectangle and a parallelogram, to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Applies a warp transform, defined by a rectangle and a parallelogram, to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[179188,179514],"content":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram to which the rectangle defined by `srcRect` is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define a parallelogram to which the rectangle defined by <ph id=\"ph1\">`srcRect`</ph> is transformed.","pos":[0,153],"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram to which the rectangle defined by `srcRect` is transformed."},{"content":"The array can contain either three or four elements.","pos":[154,206]},{"content":"If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.","pos":[207,326]}]},{"pos":[179590,179734],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the rectangle that is transformed to the parallelogram defined by <ph id=\"ph1\">`destPoints`</ph>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle that is transformed to the parallelogram defined by `destPoints`."},{"pos":[179815,179928],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies a geometric transform to apply to the path.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a geometric transform to apply to the path."},{"pos":[180698,180835],"content":"Applies a warp transform, defined by a rectangle and a parallelogram, to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Applies a warp transform, defined by a rectangle and a parallelogram, to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[181456,181783],"content":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that defines a parallelogram to which the rectangle defined by `srcRect` is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that defines a parallelogram to which the rectangle defined by <ph id=\"ph1\">`srcRect`</ph> is transformed.","pos":[0,154],"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that defines a parallelogram to which the rectangle defined by `srcRect` is transformed."},{"content":"The array can contain either three or four elements.","pos":[155,207]},{"content":"If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.","pos":[208,327]}]},{"pos":[181859,182003],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the rectangle that is transformed to the parallelogram defined by <ph id=\"ph1\">`destPoints`</ph>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle that is transformed to the parallelogram defined by `destPoints`."},{"pos":[182084,182197],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies a geometric transform to apply to the path.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a geometric transform to apply to the path."},{"pos":[182282,182428],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.WarpMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies whether this warp operation uses perspective or bilinear mode.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.WarpMode\"></xref> enumeration that specifies whether this warp operation uses perspective or bilinear mode."},{"pos":[183247,183384],"content":"Applies a warp transform, defined by a rectangle and a parallelogram, to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Applies a warp transform, defined by a rectangle and a parallelogram, to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[184575,184901],"content":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram to which the rectangle defined by `srcRect` is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define a parallelogram to which the rectangle defined by <ph id=\"ph1\">`srcRect`</ph> is transformed.","pos":[0,153],"source":"An array of <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram to which the rectangle defined by `srcRect` is transformed."},{"content":"The array can contain either three or four elements.","pos":[154,206]},{"content":"If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.","pos":[207,326]}]},{"pos":[184977,185121],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the rectangle that is transformed to the parallelogram defined by <ph id=\"ph1\">`destPoints`</ph>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle that is transformed to the parallelogram defined by `destPoints`."},{"pos":[185202,185315],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies a geometric transform to apply to the path.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a geometric transform to apply to the path."},{"pos":[185400,185546],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.WarpMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies whether this warp operation uses perspective or bilinear mode.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.WarpMode\"></xref> enumeration that specifies whether this warp operation uses perspective or bilinear mode."},{"pos":[185611,185775],"content":"A value from 0 through 1 that specifies how flat the resulting path is. For more information, see the <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten*> methods.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value from 0 through 1 that specifies how flat the resulting path is. For more information, see the <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten*> methods.","pos":[0,164],"nodes":[{"content":"A value from 0 through 1 that specifies how flat the resulting path is.","pos":[0,71]},{"content":"For more information, see the &lt;xref:System.Drawing.Drawing2D.GraphicsPath.Flatten*&gt; methods.","pos":[72,164],"source":" For more information, see the <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten*> methods."}]}]},{"pos":[186260,186299],"content":"Adds an additional outline to the path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an additional outline to the path.","pos":[0,39]}]},{"pos":[186311,186739],"content":"This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen. If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen. If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.","pos":[0,428],"nodes":[{"content":"This method creates an outline around the original lines in this &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;, with a distance between the existing lines and the new outline equal to that of the width of the &lt;xref:System.Drawing.Pen&gt; used in the call to Widen.","pos":[0,260],"source":"This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen."},{"content":"If you want to fill the space between the lines you must use the &lt;xref:System.Drawing.Graphics.FillPath%2A&gt; rather then the &lt;xref:System.Drawing.Graphics.DrawPath%2A&gt;.","pos":[261,428],"source":" If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>."}]}]},{"pos":[187048,187196],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the width between the original outline of the path and the new outline this method creates.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Pen\"></xref> that specifies the width between the original outline of the path and the new outline this method creates."},{"pos":[187767,187860],"content":"Adds an additional outline to the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds an additional outline to the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[187872,188300],"content":"This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen. If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen. If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.","pos":[0,428],"nodes":[{"content":"This method creates an outline around the original lines in this &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;, with a distance between the existing lines and the new outline equal to that of the width of the &lt;xref:System.Drawing.Pen&gt; used in the call to Widen.","pos":[0,260],"source":"This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen."},{"content":"If you want to fill the space between the lines you must use the &lt;xref:System.Drawing.Graphics.FillPath%2A&gt; rather then the &lt;xref:System.Drawing.Graphics.DrawPath%2A&gt;.","pos":[261,428],"source":" If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>."}]}]},{"pos":[188649,188797],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the width between the original outline of the path and the new outline this method creates.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Pen\"></xref> that specifies the width between the original outline of the path and the new outline this method creates."},{"pos":[188878,188997],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies a transform to apply to the path before widening.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a transform to apply to the path before widening."},{"pos":[189617,189784],"content":"Replaces this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with curves that enclose the area that is filled when this path is drawn by the specified pen.","needQuote":true,"needEscape":true,"source":"Replaces this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> with curves that enclose the area that is filled when this path is drawn by the specified pen."},{"pos":[189796,190224],"content":"This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen. If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen. If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.","pos":[0,428],"nodes":[{"content":"This method creates an outline around the original lines in this &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;, with a distance between the existing lines and the new outline equal to that of the width of the &lt;xref:System.Drawing.Pen&gt; used in the call to Widen.","pos":[0,260],"source":"This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen."},{"content":"If you want to fill the space between the lines you must use the &lt;xref:System.Drawing.Graphics.FillPath%2A&gt; rather then the &lt;xref:System.Drawing.Graphics.DrawPath%2A&gt;.","pos":[261,428],"source":" If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>."}]}]},{"pos":[191422,191570],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the width between the original outline of the path and the new outline this method creates.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Pen\"></xref> that specifies the width between the original outline of the path and the new outline this method creates."},{"pos":[191651,191770],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies a transform to apply to the path before widening.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a transform to apply to the path before widening."},{"pos":[191835,191882],"content":"A value that specifies the flatness for curves.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that specifies the flatness for curves.","pos":[0,47]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Drawing.Drawing2D.GraphicsPath\n  id: GraphicsPath\n  children:\n  - System.Drawing.Drawing2D.GraphicsPath.#ctor\n  - System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Drawing2D.FillMode)\n  - System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[])\n  - System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[])\n  - System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[],System.Drawing.Drawing2D.FillMode)\n  - System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode)\n  - System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.Rectangle,System.Single,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.RectangleF,System.Single,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)\n  - System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)\n  - System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.Point[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.PointF[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[],System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Int32,System.Int32,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.Rectangle)\n  - System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.RectangleF)\n  - System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.Point,System.Drawing.Point)\n  - System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)\n  - System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.Point[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.PointF[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)\n  - System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Drawing.Rectangle,System.Single,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.Point[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.PointF[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.Rectangle)\n  - System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.RectangleF)\n  - System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.Rectangle[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.RectangleF[])\n  - System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Point,System.Drawing.StringFormat)\n  - System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.PointF,System.Drawing.StringFormat)\n  - System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Rectangle,System.Drawing.StringFormat)\n  - System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  - System.Drawing.Drawing2D.GraphicsPath.ClearMarkers\n  - System.Drawing.Drawing2D.GraphicsPath.Clone\n  - System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures\n  - System.Drawing.Drawing2D.GraphicsPath.CloseFigure\n  - System.Drawing.Drawing2D.GraphicsPath.Dispose\n  - System.Drawing.Drawing2D.GraphicsPath.FillMode\n  - System.Drawing.Drawing2D.GraphicsPath.Finalize\n  - System.Drawing.Drawing2D.GraphicsPath.Flatten\n  - System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix)\n  - System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.GetBounds\n  - System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix)\n  - System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix,System.Drawing.Pen)\n  - System.Drawing.Drawing2D.GraphicsPath.GetLastPoint\n  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen)\n  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen)\n  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen,System.Drawing.Graphics)\n  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen,System.Drawing.Graphics)\n  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen)\n  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen)\n  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Graphics)\n  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen,System.Drawing.Graphics)\n  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point)\n  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF)\n  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point,System.Drawing.Graphics)\n  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)\n  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32)\n  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)\n  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single,System.Drawing.Graphics)\n  - System.Drawing.Drawing2D.GraphicsPath.PathData\n  - System.Drawing.Drawing2D.GraphicsPath.PathPoints\n  - System.Drawing.Drawing2D.GraphicsPath.PathTypes\n  - System.Drawing.Drawing2D.GraphicsPath.PointCount\n  - System.Drawing.Drawing2D.GraphicsPath.Reset\n  - System.Drawing.Drawing2D.GraphicsPath.Reverse\n  - System.Drawing.Drawing2D.GraphicsPath.SetMarkers\n  - System.Drawing.Drawing2D.GraphicsPath.StartFigure\n  - System.Drawing.Drawing2D.GraphicsPath.Transform(System.Drawing.Drawing2D.Matrix)\n  - System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF)\n  - System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)\n  - System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode)\n  - System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)\n  - System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen)\n  - System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix)\n  - System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix,System.Single)\n  langs:\n  - csharp\n  name: GraphicsPath\n  nameWithType: GraphicsPath\n  fullName: System.Drawing.Drawing2D.GraphicsPath\n  type: Class\n  summary: Represents a series of connected lines and curves. This class cannot be inherited.\n  remarks: \"Applications use paths to draw outlines of shapes, fill the interiors of shapes, and create clipping regions. The graphics engine maintains the coordinates of geometric shapes in a path in world coordinate space.  \\n  \\n A path may be composed of any number of figures (subpaths). Each figure is either composed of a sequence of connected lines and curves or a geometric shape primitive. The starting point of a figure is the first point in the sequence of connected lines and curves. The ending point is the last point in the sequence. The starting and ending points of a geometric shape primitive are defined by the primitive specification.  \\n  \\n A figure that consists of a sequence of connected lines and curves (whose starting and ending points may be coincident) is an open figure, unless it is closed explicitly. A figure can be closed explicitly, by using the <xref:System.Drawing.Drawing2D.GraphicsPath.CloseFigure%2A> method, which closes the current figure by connecting a line from the ending point to the starting point. A figure that consists of a geometric shape primitive is a closed figure.  \\n  \\n For purposes of filling and clipping (for example, if a path is rendered using <xref:System.Drawing.Graphics.FillPath%2A>), all open figures are closed by adding a line from the figure's first point to its last point.  \\n  \\n A new figure is implicitly started when a path is created or when a figure is closed. A new figure is explicitly created when the <xref:System.Drawing.Drawing2D.GraphicsPath.StartFigure%2A> method is called.  \\n  \\n When a geometric shape primitive is added to a path, it adds a figure containing the geometric shape, and also implicitly starts a new figure. Consequently, there is always a current figure in a path. When lines and curves are added to a path, an implicit line is added as needed to connect the ending point of the current figure to the starting point of the new lines and curves to form a sequence of connected lines and curves.  \\n  \\n A figure has a direction that describes how line and curve segments are traced between the starting point and the ending point. The direction is defined in the order that lines and curves are added to a figure, or is defined by the geometric shape primitive. The direction is used in determining the path interiors for clipping and fill.\"\n  syntax:\n    content: 'public sealed class GraphicsPath : MarshalByRefObject, ICloneable, IDisposable'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.ICloneable\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor\n  id: '#ctor'\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: GraphicsPath()\n  nameWithType: GraphicsPath.GraphicsPath()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath()\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> class with a <xref:System.Drawing.Drawing2D.GraphicsPath.FillMode*> value of <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref>.\n  syntax:\n    content: public GraphicsPath ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Drawing2D.FillMode)\n  id: '#ctor(System.Drawing.Drawing2D.FillMode)'\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: GraphicsPath(FillMode)\n  nameWithType: GraphicsPath.GraphicsPath(FillMode)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(FillMode)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> class with the specified <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration.\n  syntax:\n    content: public GraphicsPath (System.Drawing.Drawing2D.FillMode fillMode);\n    parameters:\n    - id: fillMode\n      type: System.Drawing.Drawing2D.FillMode\n      description: The <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the interior of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> is filled.\n  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[])\n  id: '#ctor(System.Drawing.Point[],System.Byte[])'\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: GraphicsPath(Point[],Byte[])\n  nameWithType: GraphicsPath.GraphicsPath(Point[],Byte[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(Point[],Byte[])\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> class with the specified <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> and <xref href=\"System.Drawing.Point\"></xref> arrays.\n  syntax:\n    content: public GraphicsPath (System.Drawing.Point[] pts, byte[] types);\n    parameters:\n    - id: pts\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that defines the coordinates of the points that make up this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n    - id: types\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> enumeration elements that specifies the type of each corresponding point in the `pts` array.\n  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[])\n  id: '#ctor(System.Drawing.PointF[],System.Byte[])'\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: GraphicsPath(PointF[],Byte[])\n  nameWithType: GraphicsPath.GraphicsPath(PointF[],Byte[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(PointF[],Byte[])\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> array with the specified <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> and <xref href=\"System.Drawing.PointF\"></xref> arrays.\n  syntax:\n    content: public GraphicsPath (System.Drawing.PointF[] pts, byte[] types);\n    parameters:\n    - id: pts\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that defines the coordinates of the points that make up this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n    - id: types\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> enumeration elements that specifies the type of each corresponding point in the `pts` array.\n  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[],System.Drawing.Drawing2D.FillMode)\n  id: '#ctor(System.Drawing.Point[],System.Byte[],System.Drawing.Drawing2D.FillMode)'\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: GraphicsPath(Point[],Byte[],FillMode)\n  nameWithType: GraphicsPath.GraphicsPath(Point[],Byte[],FillMode)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(Point[],Byte[],FillMode)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> class with the specified <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> and <xref href=\"System.Drawing.Point\"></xref> arrays and with the specified <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration element.\n  syntax:\n    content: public GraphicsPath (System.Drawing.Point[] pts, byte[] types, System.Drawing.Drawing2D.FillMode fillMode);\n    parameters:\n    - id: pts\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that defines the coordinates of the points that make up this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n    - id: types\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> enumeration elements that specifies the type of each corresponding point in the `pts` array.\n    - id: fillMode\n      type: System.Drawing.Drawing2D.FillMode\n      description: A <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that specifies how the interiors of shapes in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> are filled.\n  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode)\n  id: '#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode)'\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: GraphicsPath(PointF[],Byte[],FillMode)\n  nameWithType: GraphicsPath.GraphicsPath(PointF[],Byte[],FillMode)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(PointF[],Byte[],FillMode)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> array with the specified <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> and <xref href=\"System.Drawing.PointF\"></xref> arrays and with the specified <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration element.\n  syntax:\n    content: public GraphicsPath (System.Drawing.PointF[] pts, byte[] types, System.Drawing.Drawing2D.FillMode fillMode);\n    parameters:\n    - id: pts\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that defines the coordinates of the points that make up this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n    - id: types\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Drawing.Drawing2D.PathPointType\"></xref> enumeration elements that specifies the type of each corresponding point in the `pts` array.\n    - id: fillMode\n      type: System.Drawing.Drawing2D.FillMode\n      description: A <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that specifies how the interiors of shapes in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> are filled.\n  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.Rectangle,System.Single,System.Single)\n  id: AddArc(System.Drawing.Rectangle,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddArc(Rectangle,Single,Single)\n  nameWithType: GraphicsPath.AddArc(Rectangle,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Rectangle,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Appends an elliptical arc to the current figure.\n  remarks: \"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.  \\n  \\n The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a rectangle, from which the arc is defined.  \\n  \\n-   Creates a path, `myPath`.  \\n  \\n-   Defines a 180-degree elliptical arc that sweeps from 0 degrees to 180 degrees and appends it to a path.  \\n  \\n-   Draws the path to screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#1](~/add/codesnippet/csharp/e9f8971e-41e5-4f3a-9883-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#1](~/add/codesnippet/cpp/e9f8971e-41e5-4f3a-9883-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#1](~/add/codesnippet/visualbasic/e9f8971e-41e5-4f3a-9883-_1.vb)]\"\n  syntax:\n    content: public void AddArc (System.Drawing.Rectangle rect, float startAngle, float sweepAngle);\n    parameters:\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: A <xref href=\"System.Drawing.Rectangle\"></xref> that represents the rectangular bounds of the ellipse from which the arc is taken.\n    - id: startAngle\n      type: System.Single\n      description: The starting angle of the arc, measured in degrees clockwise from the x-axis.\n    - id: sweepAngle\n      type: System.Single\n      description: The angle between `startAngle` and the end of the arc.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddArc*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.RectangleF,System.Single,System.Single)\n  id: AddArc(System.Drawing.RectangleF,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddArc(RectangleF,Single,Single)\n  nameWithType: GraphicsPath.AddArc(RectangleF,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(RectangleF,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Appends an elliptical arc to the current figure.\n  remarks: \"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.  \\n  \\n The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.\"\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>.\n  syntax:\n    content: public void AddArc (System.Drawing.RectangleF rect, float startAngle, float sweepAngle);\n    parameters:\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangular bounds of the ellipse from which the arc is taken.\n    - id: startAngle\n      type: System.Single\n      description: The starting angle of the arc, measured in degrees clockwise from the x-axis.\n    - id: sweepAngle\n      type: System.Single\n      description: The angle between `startAngle` and the end of the arc.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddArc*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)\n  id: AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddArc(Int32,Int32,Int32,Int32,Single,Single)\n  nameWithType: GraphicsPath.AddArc(Int32,Int32,Int32,Int32,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Int32,Int32,Int32,Int32,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Appends an elliptical arc to the current figure.\n  remarks: \"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.  \\n  \\n The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.\"\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>.\n  syntax:\n    content: public void AddArc (int x, int y, int width, int height, float startAngle, float sweepAngle);\n    parameters:\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.\n    - id: width\n      type: System.Int32\n      description: The width of the rectangular region that defines the ellipse from which the arc is drawn.\n    - id: height\n      type: System.Int32\n      description: The height of the rectangular region that defines the ellipse from which the arc is drawn.\n    - id: startAngle\n      type: System.Single\n      description: The starting angle of the arc, measured in degrees clockwise from the x-axis.\n    - id: sweepAngle\n      type: System.Single\n      description: The angle between `startAngle` and the end of the arc.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddArc*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  id: AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddArc(Single,Single,Single,Single,Single,Single)\n  nameWithType: GraphicsPath.AddArc(Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Single,Single,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Appends an elliptical arc to the current figure.\n  remarks: \"If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.  \\n  \\n The arc is traced along the perimeter of the ellipse bounded by the specified rectangle. The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle. The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle. If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.\"\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>.\n  syntax:\n    content: public void AddArc (float x, float y, float width, float height, float startAngle, float sweepAngle);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.\n    - id: width\n      type: System.Single\n      description: The width of the rectangular region that defines the ellipse from which the arc is drawn.\n    - id: height\n      type: System.Single\n      description: The height of the rectangular region that defines the ellipse from which the arc is drawn.\n    - id: startAngle\n      type: System.Single\n      description: The starting angle of the arc, measured in degrees clockwise from the x-axis.\n    - id: sweepAngle\n      type: System.Single\n      description: The angle between `startAngle` and the end of the arc.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddArc*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)\n  id: AddBezier(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddBezier(Point,Point,Point,Point)\n  nameWithType: GraphicsPath.AddBezier(Point,Point,Point,Point)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Point,Point,Point,Point)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a cubic Bézier curve to the current figure.\n  remarks: \"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.  \\n  \\n If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.\"\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.\n  syntax:\n    content: public void AddBezier (System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);\n    parameters:\n    - id: pt1\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> that represents the starting point of the curve.\n    - id: pt2\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> that represents the first control point for the curve.\n    - id: pt3\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> that represents the second control point for the curve.\n    - id: pt4\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> that represents the endpoint of the curve.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddBezier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)\n  id: AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddBezier(PointF,PointF,PointF,PointF)\n  nameWithType: GraphicsPath.AddBezier(PointF,PointF,PointF,PointF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(PointF,PointF,PointF,PointF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a cubic Bézier curve to the current figure.\n  remarks: \"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.  \\n  \\n If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.\"\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.\n  syntax:\n    content: public void AddBezier (System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);\n    parameters:\n    - id: pt1\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the starting point of the curve.\n    - id: pt2\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the first control point for the curve.\n    - id: pt3\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the second control point for the curve.\n    - id: pt4\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the endpoint of the curve.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddBezier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: GraphicsPath.AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a cubic Bézier curve to the current figure.\n  remarks: \"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.  \\n  \\n If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path.  \\n  \\n-   Adds a cubic Bézier curve defined by the points (50, 50), (70, 0), (100, 120), and (150, 50) to the path.  \\n  \\n-   Closes the curve.  \\n  \\n-   Draws the path to screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#2](~/add/codesnippet/csharp/745fdee9-1ec2-4fd8-a91a-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#2](~/add/codesnippet/cpp/745fdee9-1ec2-4fd8-a91a-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#2](~/add/codesnippet/visualbasic/745fdee9-1ec2-4fd8-a91a-_1.vb)]\"\n  syntax:\n    content: public void AddBezier (int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);\n    parameters:\n    - id: x1\n      type: System.Int32\n      description: The x-coordinate of the starting point of the curve.\n    - id: y1\n      type: System.Int32\n      description: The y-coordinate of the starting point of the curve.\n    - id: x2\n      type: System.Int32\n      description: The x-coordinate of the first control point for the curve.\n    - id: y2\n      type: System.Int32\n      description: The y-coordinate of the first control point for the curve.\n    - id: x3\n      type: System.Int32\n      description: The x-coordinate of the second control point for the curve.\n    - id: y3\n      type: System.Int32\n      description: The y-coordinate of the second control point for the curve.\n    - id: x4\n      type: System.Int32\n      description: The x-coordinate of the endpoint of the curve.\n    - id: y4\n      type: System.Int32\n      description: The y-coordinate of the endpoint of the curve.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddBezier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  id: AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)\n  nameWithType: GraphicsPath.AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a cubic Bézier curve to the current figure.\n  remarks: \"The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.  \\n  \\n If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.\"\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.\n  syntax:\n    content: public void AddBezier (float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);\n    parameters:\n    - id: x1\n      type: System.Single\n      description: The x-coordinate of the starting point of the curve.\n    - id: y1\n      type: System.Single\n      description: The y-coordinate of the starting point of the curve.\n    - id: x2\n      type: System.Single\n      description: The x-coordinate of the first control point for the curve.\n    - id: y2\n      type: System.Single\n      description: The y-coordinate of the first control point for the curve.\n    - id: x3\n      type: System.Single\n      description: The x-coordinate of the second control point for the curve.\n    - id: y3\n      type: System.Single\n      description: The y-coordinate of the second control point for the curve.\n    - id: x4\n      type: System.Single\n      description: The x-coordinate of the endpoint of the curve.\n    - id: y4\n      type: System.Single\n      description: The y-coordinate of the endpoint of the curve.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddBezier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.Point[])\n  id: AddBeziers(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddBeziers(Point[])\n  nameWithType: GraphicsPath.AddBeziers(Point[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a sequence of connected cubic Bézier curves to the current figure.\n  remarks: \"The `points` parameter specifies an array of endpoints and control points of the connected curves. The first curve is constructed from the first point to the fourth point in the `points` array by using the second and third points as control points. In addition to the endpoint of the previous curve, each subsequent curve in the sequence needs exactly three more points: the next two points in the sequence are control points, and the third is the endpoint for the added curve.  \\n  \\n If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the first cubic curve in the sequence.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates an array of seven points (representing two connected Bézier curves).  \\n  \\n-   Creates a path and adds the series of Bézier curve points to the path.  \\n  \\n-   Draws the path to screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#3](~/add/codesnippet/csharp/m-system.drawing.drawing_9_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#3](~/add/codesnippet/cpp/m-system.drawing.drawing_9_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#3](~/add/codesnippet/visualbasic/m-system.drawing.drawing_9_1.vb)]\"\n  syntax:\n    content: public void AddBeziers (System.Drawing.Point[] points);\n    parameters:\n    - id: points\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curves.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddBeziers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.PointF[])\n  id: AddBeziers(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddBeziers(PointF[])\n  nameWithType: GraphicsPath.AddBeziers(PointF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a sequence of connected cubic Bézier curves to the current figure.\n  remarks: \"The `points` parameter specifies an array of endpoints and control points of the connected curves. The first curve is constructed from the first point to the fourth point in the `points` array by using the second and third points as control points. In addition to the endpoint of the previous curve, each subsequent curve in the sequence needs exactly three more points: the next two points in the sequence are control points, and the third is the endpoint for the added curve.  \\n  \\n If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the first cubic curve in the sequence.\"\n  example:\n  - \"For an example see:  \\n  \\n [AddBeziers(Point\\\\[\\\\])](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False)\"\n  syntax:\n    content: public void AddBeziers (System.Drawing.PointF[] points);\n    parameters:\n    - id: points\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curves.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddBeziers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[])\n  id: AddClosedCurve(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddClosedCurve(Point[])\n  nameWithType: GraphicsPath.AddClosedCurve(Point[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.\n  remarks: The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points. The tension value cannot be set for this method, and defaults to a value equivalent to 0.5.\n  example:\n  - For an example, see [AddClosedCurve(Point\\[\\], Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void AddClosedCurve (System.Drawing.Point[] points);\n    parameters:\n    - id: points\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curve.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[])\n  id: AddClosedCurve(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddClosedCurve(PointF[])\n  nameWithType: GraphicsPath.AddClosedCurve(PointF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.\n  remarks: The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points. The tension value cannot be set for this method, and defaults to a value equivalent to 0.5.\n  example:\n  - For an example, see [AddClosedCurve(Point\\[\\], Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void AddClosedCurve (System.Drawing.PointF[] points);\n    parameters:\n    - id: points\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curve.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)\n  id: AddClosedCurve(System.Drawing.Point[],System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddClosedCurve(Point[],Single)\n  nameWithType: GraphicsPath.AddClosedCurve(Point[],Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(Point[],Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.\n  remarks: The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates an array of six points (representing a cardinal spline).  \\n  \\n-   Creates a path and adds the closed cardinal spline curves to the path (closed from the endpoint to the starting point).  \\n  \\n-   Draws the path to screen.  \\n  \\n Notice that a tension of 0.5 is used.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#4](~/add/codesnippet/csharp/1adde1d4-17a0-40d7-b406-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#4](~/add/codesnippet/cpp/1adde1d4-17a0-40d7-b406-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#4](~/add/codesnippet/visualbasic/1adde1d4-17a0-40d7-b406-_1.vb)]\"\n  syntax:\n    content: public void AddClosedCurve (System.Drawing.Point[] points, float tension);\n    parameters:\n    - id: points\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curve.\n    - id: tension\n      type: System.Single\n      description: A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[],System.Single)\n  id: AddClosedCurve(System.Drawing.PointF[],System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddClosedCurve(PointF[],Single)\n  nameWithType: GraphicsPath.AddClosedCurve(PointF[],Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(PointF[],Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.\n  remarks: The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points. If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points.\n  example:\n  - For an example, see [AddClosedCurve(Point\\[\\], Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void AddClosedCurve (System.Drawing.PointF[] points, float tension);\n    parameters:\n    - id: points\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curve.\n    - id: tension\n      type: System.Single\n      description: A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[])\n  id: AddCurve(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddCurve(Point[])\n  nameWithType: GraphicsPath.AddCurve(Point[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a spline curve to the current figure. A cardinal spline curve is used because the curve travels through each of the points in the array.\n  remarks: The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.\n  example:\n  - For an example, see [AddClosedCurve(Point\\[\\], Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void AddCurve (System.Drawing.Point[] points);\n    parameters:\n    - id: points\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curve.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[])\n  id: AddCurve(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddCurve(PointF[])\n  nameWithType: GraphicsPath.AddCurve(PointF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a spline curve to the current figure. A cardinal spline curve is used because the curve travels through each of the points in the array.\n  remarks: The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.\n  example:\n  - For an example, see [AddCurve(Point\\[\\], Int32, Int32, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void AddCurve (System.Drawing.PointF[] points);\n    parameters:\n    - id: points\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curve.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Single)\n  id: AddCurve(System.Drawing.Point[],System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddCurve(Point[],Single)\n  nameWithType: GraphicsPath.AddCurve(Point[],Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[],Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a spline curve to the current figure.\n  remarks: The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.\n  example:\n  - For an example, see [AddClosedCurve(Point\\[\\], Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void AddCurve (System.Drawing.Point[] points, float tension);\n    parameters:\n    - id: points\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curve.\n    - id: tension\n      type: System.Single\n      description: A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Single)\n  id: AddCurve(System.Drawing.PointF[],System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddCurve(PointF[],Single)\n  nameWithType: GraphicsPath.AddCurve(PointF[],Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[],Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a spline curve to the current figure.\n  remarks: The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.\n  example:\n  - For an example, see [AddCurve(Point\\[\\], Int32, Int32, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void AddCurve (System.Drawing.PointF[] points, float tension);\n    parameters:\n    - id: points\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curve.\n    - id: tension\n      type: System.Single\n      description: A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)\n  id: AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddCurve(Point[],Int32,Int32,Single)\n  nameWithType: GraphicsPath.AddCurve(Point[],Int32,Int32,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[],Int32,Int32,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a spline curve to the current figure.\n  remarks: \"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.  \\n  \\n The curve begins at the point in the array specified by the `offset` parameter and includes the number of points (segments) specified by `numberOfSegments`.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates an array of four points (representing a cardinal spline).  \\n  \\n-   Creates a path and using the array of points, adds the curve to the path.  \\n  \\n-   Draws the path to the screen.  \\n  \\n Notice that while the array holds four points, there are only three segments, which is the number specified in the third argument of the call to <xref:System.Drawing.Drawing2D.GraphicsPath.AddCurve%2A>.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#5](~/add/codesnippet/csharp/ceb7a1f2-0262-4010-ad5e-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#5](~/add/codesnippet/cpp/ceb7a1f2-0262-4010-ad5e-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#5](~/add/codesnippet/visualbasic/ceb7a1f2-0262-4010-ad5e-_1.vb)]\"\n  syntax:\n    content: public void AddCurve (System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);\n    parameters:\n    - id: points\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the curve.\n    - id: offset\n      type: System.Int32\n      description: The index of the element in the `points` array that is used as the first point in the curve.\n    - id: numberOfSegments\n      type: System.Int32\n      description: A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.\n    - id: tension\n      type: System.Single\n      description: A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Int32,System.Int32,System.Single)\n  id: AddCurve(System.Drawing.PointF[],System.Int32,System.Int32,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddCurve(PointF[],Int32,Int32,Single)\n  nameWithType: GraphicsPath.AddCurve(PointF[],Int32,Int32,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[],Int32,Int32,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a spline curve to the current figure.\n  remarks: \"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.  \\n  \\n The curve begins at the point in the array specified by `offset`, and includes the number of points (segments) specified by `numberOfSegments`.\"\n  example:\n  - For an example, see [AddCurve(Point\\[\\], Int32, Int32, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void AddCurve (System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);\n    parameters:\n    - id: points\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the curve.\n    - id: offset\n      type: System.Int32\n      description: The index of the element in the `points` array that is used as the first point in the curve.\n    - id: numberOfSegments\n      type: System.Int32\n      description: The number of segments used to draw the curve. A segment can be thought of as a line connecting two points.\n    - id: tension\n      type: System.Single\n      description: A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.Rectangle)\n  id: AddEllipse(System.Drawing.Rectangle)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddEllipse(Rectangle)\n  nameWithType: GraphicsPath.AddEllipse(Rectangle)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds an ellipse to the current path.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n Creates a bounding rectangle that defines an ellipse.  \\n  \\n Creates a path and adds the ellipse to the path.  \\n  \\n Draws the path to screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#6](~/add/codesnippet/csharp/m-system.drawing.drawing_15_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#6](~/add/codesnippet/cpp/m-system.drawing.drawing_15_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#6](~/add/codesnippet/visualbasic/m-system.drawing.drawing_15_1.vb)]\"\n  syntax:\n    content: public void AddEllipse (System.Drawing.Rectangle rect);\n    parameters:\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: A <xref href=\"System.Drawing.Rectangle\"></xref> that represents the bounding rectangle that defines the ellipse.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddEllipse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.RectangleF)\n  id: AddEllipse(System.Drawing.RectangleF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddEllipse(RectangleF)\n  nameWithType: GraphicsPath.AddEllipse(RectangleF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(RectangleF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds an ellipse to the current path.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>.\n  syntax:\n    content: public void AddEllipse (System.Drawing.RectangleF rect);\n    parameters:\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the bounding rectangle that defines the ellipse.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddEllipse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddEllipse(Int32,Int32,Int32,Int32)\n  nameWithType: GraphicsPath.AddEllipse(Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds an ellipse to the current path.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>.\n  syntax:\n    content: public void AddEllipse (int x, int y, int width, int height);\n    parameters:\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.\n    - id: width\n      type: System.Int32\n      description: The width of the bounding rectangle that defines the ellipse.\n    - id: height\n      type: System.Int32\n      description: The height of the bounding rectangle that defines the ellipse.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddEllipse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)\n  id: AddEllipse(System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddEllipse(Single,Single,Single,Single)\n  nameWithType: GraphicsPath.AddEllipse(Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds an ellipse to the current path.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>.\n  syntax:\n    content: public void AddEllipse (float x, float y, float width, float height);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper left corner of the bounding rectangle that defines the ellipse.\n    - id: width\n      type: System.Single\n      description: The width of the bounding rectangle that defines the ellipse.\n    - id: height\n      type: System.Single\n      description: The height of the bounding rectangle that defines the ellipse.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddEllipse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.Point,System.Drawing.Point)\n  id: AddLine(System.Drawing.Point,System.Drawing.Point)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddLine(Point,Point)\n  nameWithType: GraphicsPath.AddLine(Point,Point)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Point,Point)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Appends a line segment to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.\n  syntax:\n    content: public void AddLine (System.Drawing.Point pt1, System.Drawing.Point pt2);\n    parameters:\n    - id: pt1\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> that represents the starting point of the line.\n    - id: pt2\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> that represents the endpoint of the line.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)\n  id: AddLine(System.Drawing.PointF,System.Drawing.PointF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddLine(PointF,PointF)\n  nameWithType: GraphicsPath.AddLine(PointF,PointF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(PointF,PointF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Appends a line segment to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.\n  syntax:\n    content: public void AddLine (System.Drawing.PointF pt1, System.Drawing.PointF pt2);\n    parameters:\n    - id: pt1\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the starting point of the line.\n    - id: pt2\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the endpoint of the line.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: AddLine(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddLine(Int32,Int32,Int32,Int32)\n  nameWithType: GraphicsPath.AddLine(Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Appends a line segment to the current figure.\n  remarks: This method adds the line segment defined by the specified points to the end of the current figure. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code creates a path, adds three lines that form a triangle, and then draws the path to the screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#7](~/add/codesnippet/csharp/d1f4d9ed-8464-43dc-8776-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#7](~/add/codesnippet/cpp/d1f4d9ed-8464-43dc-8776-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#7](~/add/codesnippet/visualbasic/d1f4d9ed-8464-43dc-8776-_1.vb)]\"\n  syntax:\n    content: public void AddLine (int x1, int y1, int x2, int y2);\n    parameters:\n    - id: x1\n      type: System.Int32\n      description: The x-coordinate of the starting point of the line.\n    - id: y1\n      type: System.Int32\n      description: The y-coordinate of the starting point of the line.\n    - id: x2\n      type: System.Int32\n      description: The x-coordinate of the endpoint of the line.\n    - id: y2\n      type: System.Int32\n      description: The y-coordinate of the endpoint of the line.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)\n  id: AddLine(System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddLine(Single,Single,Single,Single)\n  nameWithType: GraphicsPath.AddLine(Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Appends a line segment to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>. If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.\n  syntax:\n    content: public void AddLine (float x1, float y1, float x2, float y2);\n    parameters:\n    - id: x1\n      type: System.Single\n      description: The x-coordinate of the starting point of the line.\n    - id: y1\n      type: System.Single\n      description: The y-coordinate of the starting point of the line.\n    - id: x2\n      type: System.Single\n      description: The x-coordinate of the endpoint of the line.\n    - id: y2\n      type: System.Single\n      description: The y-coordinate of the endpoint of the line.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.Point[])\n  id: AddLines(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddLines(Point[])\n  nameWithType: GraphicsPath.AddLines(Point[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLines(Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Appends a series of connected line segments to the end of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment the starting point of the line. The `points` parameter specifies an array of endpoints. The first two specify the first line. Each additional point specifies the endpoint of a line segment whose starting point is the endpoint of the previous line.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates an array of four points that describe a triangle.  \\n  \\n-   Creates a path and adds the array of lines.  \\n  \\n-   Draws the path to screen.  \\n  \\n Notice that each line after the first point uses the previous point as the starting point and the new point as the endpoint.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#8](~/add/codesnippet/csharp/m-system.drawing.drawing_24_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#8](~/add/codesnippet/cpp/m-system.drawing.drawing_24_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#8](~/add/codesnippet/visualbasic/m-system.drawing.drawing_24_1.vb)]\"\n  syntax:\n    content: public void AddLines (System.Drawing.Point[] points);\n    parameters:\n    - id: points\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points that define the line segments to add.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddLines*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.PointF[])\n  id: AddLines(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddLines(PointF[])\n  nameWithType: GraphicsPath.AddLines(PointF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLines(PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Appends a series of connected line segments to the end of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment the starting point of the line. The `points` parameter specifies an array of endpoints. The first two specify the first line. Each additional point specifies the endpoint of a line segment whose starting point is the endpoint of the previous line.\n  example:\n  - For an example, see [AddLines(Point\\[\\])](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void AddLines (System.Drawing.PointF[] points);\n    parameters:\n    - id: points\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that represents the points that define the line segments to add.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddLines*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)\n  id: AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddPath(GraphicsPath,Boolean)\n  nameWithType: GraphicsPath.AddPath(GraphicsPath,Boolean)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPath(GraphicsPath,Boolean)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Appends the specified <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> to this path.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates two paths one a right-side-up triangle and the other an up-side-down triangle.  \\n  \\n-   Adds the second path to the first.  \\n  \\n-   Draws the resultant path to the screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#9](~/add/codesnippet/csharp/4c3ef7f8-9fc4-4762-b79e-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#9](~/add/codesnippet/cpp/4c3ef7f8-9fc4-4762-b79e-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#9](~/add/codesnippet/visualbasic/4c3ef7f8-9fc4-4762-b79e-_1.vb)]\"\n  syntax:\n    content: public void AddPath (System.Drawing.Drawing2D.GraphicsPath addingPath, bool connect);\n    parameters:\n    - id: addingPath\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: The <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> to add.\n    - id: connect\n      type: System.Boolean\n      description: A Boolean value that specifies whether the first figure in the added path is part of the last figure in this path. A value of <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> specifies that (if possible) the first figure in the added path is part of the last figure in this path. A value of <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> specifies that the first figure in the added path is separate from the last figure in this path.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Drawing.Rectangle,System.Single,System.Single)\n  id: AddPie(System.Drawing.Rectangle,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddPie(Rectangle,Single,Single)\n  nameWithType: GraphicsPath.AddPie(Rectangle,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Rectangle,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds the outline of a pie shape to this path.\n  remarks: The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline. The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddPie%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%2CSystem.Single%29>.\n  syntax:\n    content: public void AddPie (System.Drawing.Rectangle rect, float startAngle, float sweepAngle);\n    parameters:\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: A <xref href=\"System.Drawing.Rectangle\"></xref> that represents the bounding rectangle that defines the ellipse from which the pie is drawn.\n    - id: startAngle\n      type: System.Single\n      description: The starting angle for the pie section, measured in degrees clockwise from the x-axis.\n    - id: sweepAngle\n      type: System.Single\n      description: The angle between `startAngle` and the end of the pie section, measured in degrees clockwise from `startAngle`.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddPie*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)\n  id: AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddPie(Int32,Int32,Int32,Int32,Single,Single)\n  nameWithType: GraphicsPath.AddPie(Int32,Int32,Int32,Int32,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Int32,Int32,Int32,Int32,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds the outline of a pie shape to this path.\n  remarks: The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline. The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code creates a graphics path, adds the pie shape, and then draws the path to the screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#10](~/add/codesnippet/csharp/b8813bf5-5d25-47d2-b607-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#10](~/add/codesnippet/cpp/b8813bf5-5d25-47d2-b607-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#10](~/add/codesnippet/visualbasic/b8813bf5-5d25-47d2-b607-_1.vb)]\"\n  syntax:\n    content: public void AddPie (int x, int y, int width, int height, float startAngle, float sweepAngle);\n    parameters:\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.\n    - id: width\n      type: System.Int32\n      description: The width of the bounding rectangle that defines the ellipse from which the pie is drawn.\n    - id: height\n      type: System.Int32\n      description: The height of the bounding rectangle that defines the ellipse from which the pie is drawn.\n    - id: startAngle\n      type: System.Single\n      description: The starting angle for the pie section, measured in degrees clockwise from the x-axis.\n    - id: sweepAngle\n      type: System.Single\n      description: The angle between `startAngle` and the end of the pie section, measured in degrees clockwise from `startAngle`.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddPie*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  id: AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddPie(Single,Single,Single,Single,Single,Single)\n  nameWithType: GraphicsPath.AddPie(Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Single,Single,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds the outline of a pie shape to this path.\n  remarks: The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline. The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddPie%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%2CSystem.Single%29>.\n  syntax:\n    content: public void AddPie (float x, float y, float width, float height, float startAngle, float sweepAngle);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.\n    - id: width\n      type: System.Single\n      description: The width of the bounding rectangle that defines the ellipse from which the pie is drawn.\n    - id: height\n      type: System.Single\n      description: The height of the bounding rectangle that defines the ellipse from which the pie is drawn.\n    - id: startAngle\n      type: System.Single\n      description: The starting angle for the pie section, measured in degrees clockwise from the x-axis.\n    - id: sweepAngle\n      type: System.Single\n      description: The angle between `startAngle` and the end of the pie section, measured in degrees clockwise from `startAngle`.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddPie*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.Point[])\n  id: AddPolygon(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddPolygon(Point[])\n  nameWithType: GraphicsPath.AddPolygon(Point[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a polygon to this path.\n  remarks: The points in the `points` array specify the vertices of a polygon. If the first point in the array is not the same as the last point, those two points are connected to close the polygon.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates an array of points that defines a polygon.  \\n  \\n-   Creates a path and adds the polygon to the path.  \\n  \\n-   Draws the path to the screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#11](~/add/codesnippet/csharp/m-system.drawing.drawing_14_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#11](~/add/codesnippet/cpp/m-system.drawing.drawing_14_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#11](~/add/codesnippet/visualbasic/m-system.drawing.drawing_14_1.vb)]\"\n  syntax:\n    content: public void AddPolygon (System.Drawing.Point[] points);\n    parameters:\n    - id: points\n      type: System.Drawing.Point[]\n      description: An array of <xref href=\"System.Drawing.Point\"></xref> structures that defines the polygon to add.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddPolygon*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.PointF[])\n  id: AddPolygon(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddPolygon(PointF[])\n  nameWithType: GraphicsPath.AddPolygon(PointF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a polygon to this path.\n  remarks: The points in the `points` array specify the vertices of a polygon. If the first point in the array is not the same as the last point, those two points are connected to close the polygon.\n  example:\n  - For an example, see [AddPolygon(Point\\[\\])](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void AddPolygon (System.Drawing.PointF[] points);\n    parameters:\n    - id: points\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that defines the polygon to add.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddPolygon*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.Rectangle)\n  id: AddRectangle(System.Drawing.Rectangle)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddRectangle(Rectangle)\n  nameWithType: GraphicsPath.AddRectangle(Rectangle)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a rectangle to this path.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path.  \\n  \\n-   Creates a rectangle and adds the rectangle to the path.  \\n  \\n-   Draws the path to the screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#12](~/add/codesnippet/csharp/m-system.drawing.drawing_13_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#12](~/add/codesnippet/cpp/m-system.drawing.drawing_13_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#12](~/add/codesnippet/visualbasic/m-system.drawing.drawing_13_1.vb)]\"\n  syntax:\n    content: public void AddRectangle (System.Drawing.Rectangle rect);\n    parameters:\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: A <xref href=\"System.Drawing.Rectangle\"></xref> that represents the rectangle to add.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddRectangle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.RectangleF)\n  id: AddRectangle(System.Drawing.RectangleF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddRectangle(RectangleF)\n  nameWithType: GraphicsPath.AddRectangle(RectangleF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(RectangleF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a rectangle to this path.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddRectangle%28System.Drawing.Rectangle%29>.\n  syntax:\n    content: public void AddRectangle (System.Drawing.RectangleF rect);\n    parameters:\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle to add.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddRectangle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.Rectangle[])\n  id: AddRectangles(System.Drawing.Rectangle[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddRectangles(Rectangle[])\n  nameWithType: GraphicsPath.AddRectangles(Rectangle[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(Rectangle[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a series of rectangles to this path.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path.  \\n  \\n-   Creates an array of rectangles and adds the rectangles to the path.  \\n  \\n-   Draws the path to the screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#13](~/add/codesnippet/csharp/0c74854d-da2e-4c90-801f-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#13](~/add/codesnippet/cpp/0c74854d-da2e-4c90-801f-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#13](~/add/codesnippet/visualbasic/0c74854d-da2e-4c90-801f-_1.vb)]\"\n  syntax:\n    content: public void AddRectangles (System.Drawing.Rectangle[] rects);\n    parameters:\n    - id: rects\n      type: System.Drawing.Rectangle[]\n      description: An array of <xref href=\"System.Drawing.Rectangle\"></xref> structures that represents the rectangles to add.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddRectangles*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.RectangleF[])\n  id: AddRectangles(System.Drawing.RectangleF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddRectangles(RectangleF[])\n  nameWithType: GraphicsPath.AddRectangles(RectangleF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(RectangleF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a series of rectangles to this path.\n  remarks: ''\n  example:\n  - For an example, see [AddRectangles(Rectangle\\[\\])](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.Rectangle[])?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void AddRectangles (System.Drawing.RectangleF[] rects);\n    parameters:\n    - id: rects\n      type: System.Drawing.RectangleF[]\n      description: An array of <xref href=\"System.Drawing.RectangleF\"></xref> structures that represents the rectangles to add.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddRectangles*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Point,System.Drawing.StringFormat)\n  id: AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Point,System.Drawing.StringFormat)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddString(String,FontFamily,Int32,Single,Point,StringFormat)\n  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,Point,StringFormat)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,Point,StringFormat)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a text string to this path.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path.  \\n  \\n-   Sets up string and font arguments.  \\n  \\n-   Adds the string to the path.  \\n  \\n-   Draws the string to the screen.  \\n  \\n There are two important things to be pointed out. First, notice that the `fontStyle` argument is cast as an integer. The AddString method requires this so that two or more <xref:System.Drawing.FontStyle> members can be combined to create the desired font style (in this case, <xref:System.Drawing.FontStyle> and <xref:System.Drawing.FontStyle>). Secondly, notice that the <xref:System.Drawing.Graphics.FillPath%2A> method is used rather than the <xref:System.Drawing.Graphics.DrawPath%2A> method. If <xref:System.Drawing.Graphics.FillPath%2A> is used, solid text is rendered, whereas if <xref:System.Drawing.Graphics.DrawPath%2A> is used, the text will be an outline style.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#14](~/add/codesnippet/csharp/6c72550e-791b-4037-846e-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#14](~/add/codesnippet/cpp/6c72550e-791b-4037-846e-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#14](~/add/codesnippet/visualbasic/6c72550e-791b-4037-846e-_1.vb)]\"\n  syntax:\n    content: public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.Point origin, System.Drawing.StringFormat format);\n    parameters:\n    - id: s\n      type: System.String\n      description: The <xref:System.String> to add.\n    - id: family\n      type: System.Drawing.FontFamily\n      description: A <xref href=\"System.Drawing.FontFamily\"></xref> that represents the name of the font with which the test is drawn.\n    - id: style\n      type: System.Int32\n      description: A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).\n    - id: emSize\n      type: System.Single\n      description: The height of the em square box that bounds the character.\n    - id: origin\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> that represents the point where the text starts.\n    - id: format\n      type: System.Drawing.StringFormat\n      description: A <xref href=\"System.Drawing.StringFormat\"></xref> that specifies text formatting information, such as line spacing and alignment.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.PointF,System.Drawing.StringFormat)\n  id: AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.PointF,System.Drawing.StringFormat)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddString(String,FontFamily,Int32,Single,PointF,StringFormat)\n  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,PointF,StringFormat)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,PointF,StringFormat)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a text string to this path.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>.\n  syntax:\n    content: public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.PointF origin, System.Drawing.StringFormat format);\n    parameters:\n    - id: s\n      type: System.String\n      description: The <xref:System.String> to add.\n    - id: family\n      type: System.Drawing.FontFamily\n      description: A <xref href=\"System.Drawing.FontFamily\"></xref> that represents the name of the font with which the test is drawn.\n    - id: style\n      type: System.Int32\n      description: A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).\n    - id: emSize\n      type: System.Single\n      description: The height of the em square box that bounds the character.\n    - id: origin\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the point where the text starts.\n    - id: format\n      type: System.Drawing.StringFormat\n      description: A <xref href=\"System.Drawing.StringFormat\"></xref> that specifies text formatting information, such as line spacing and alignment.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Rectangle,System.Drawing.StringFormat)\n  id: AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Rectangle,System.Drawing.StringFormat)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)\n  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a text string to this path.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>.\n  syntax:\n    content: public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.Rectangle layoutRect, System.Drawing.StringFormat format);\n    parameters:\n    - id: s\n      type: System.String\n      description: The <xref:System.String> to add.\n    - id: family\n      type: System.Drawing.FontFamily\n      description: A <xref href=\"System.Drawing.FontFamily\"></xref> that represents the name of the font with which the test is drawn.\n    - id: style\n      type: System.Int32\n      description: A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).\n    - id: emSize\n      type: System.Single\n      description: The height of the em square box that bounds the character.\n    - id: layoutRect\n      type: System.Drawing.Rectangle\n      description: A <xref href=\"System.Drawing.Rectangle\"></xref> that represents the rectangle that bounds the text.\n    - id: format\n      type: System.Drawing.StringFormat\n      description: A <xref href=\"System.Drawing.StringFormat\"></xref> that specifies text formatting information, such as line spacing and alignment.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  id: AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)\n  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds a text string to this path.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>.\n  syntax:\n    content: public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat format);\n    parameters:\n    - id: s\n      type: System.String\n      description: The <xref:System.String> to add.\n    - id: family\n      type: System.Drawing.FontFamily\n      description: A <xref href=\"System.Drawing.FontFamily\"></xref> that represents the name of the font with which the test is drawn.\n    - id: style\n      type: System.Int32\n      description: A <xref href=\"System.Drawing.FontStyle\"></xref> enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section).\n    - id: emSize\n      type: System.Single\n      description: The height of the em square box that bounds the character.\n    - id: layoutRect\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle that bounds the text.\n    - id: format\n      type: System.Drawing.StringFormat\n      description: A <xref href=\"System.Drawing.StringFormat\"></xref> that specifies text formatting information, such as line spacing and alignment.\n  overload: System.Drawing.Drawing2D.GraphicsPath.AddString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers\n  id: ClearMarkers\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: ClearMarkers()\n  nameWithType: GraphicsPath.ClearMarkers()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Clears all markers from this path.\n  remarks: \"Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to create a marker at the current location in a <xref:System.Drawing.Drawing2D.GraphicsPath>. Use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> method to iterate through the existing markers in a path.  \\n  \\n Markers are used to separate groups of subpaths. One or more subpaths can be contained between two markers.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path.  \\n  \\n-   Adds several objects to the path.  \\n  \\n-   Adds markers to the path.  \\n  \\n-   Clears all markers from the path.  \\n  \\n-   Draws the path to the screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#15](~/add/codesnippet/csharp/m-system.drawing.drawing_21_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#15](~/add/codesnippet/cpp/m-system.drawing.drawing_21_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#15](~/add/codesnippet/visualbasic/m-system.drawing.drawing_21_1.vb)]\"\n  syntax:\n    content: public void ClearMarkers ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Clone\n  id: Clone\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: GraphicsPath.Clone()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Clone()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Creates an exact copy of this path.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path.  \\n  \\n-   Adds several figures to the path.  \\n  \\n-   Draws the path to the screen.  \\n  \\n-   Clones a copy of that path.  \\n  \\n-   Draws the new path to the screen.  \\n  \\n Notice that the call the Clone method must be cast as a <xref:System.Drawing.Drawing2D.GraphicsPath>.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#16](~/add/codesnippet/csharp/m-system.drawing.drawing_2_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#16](~/add/codesnippet/cpp/m-system.drawing.drawing_2_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#16](~/add/codesnippet/visualbasic/m-system.drawing.drawing_2_1.vb)]\"\n  syntax:\n    content: public object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> this method creates, cast as an object.\n  overload: System.Drawing.Drawing2D.GraphicsPath.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures\n  id: CloseAllFigures\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: CloseAllFigures()\n  nameWithType: GraphicsPath.CloseAllFigures()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Closes all open figures in this path and starts a new figure. It closes each open figure by connecting a line from its endpoint to its starting point.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path.  \\n  \\n-   Adds several open figures to the path.  \\n  \\n-   Closes all figures in the path.  \\n  \\n-   Draws the path to the screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#17](~/add/codesnippet/csharp/m-system.drawing.drawing_23_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#17](~/add/codesnippet/cpp/m-system.drawing.drawing_23_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#17](~/add/codesnippet/visualbasic/m-system.drawing.drawing_23_1.vb)]\"\n  syntax:\n    content: public void CloseAllFigures ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.CloseFigure\n  id: CloseFigure\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: CloseFigure()\n  nameWithType: GraphicsPath.CloseFigure()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.CloseFigure()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Closes the current figure and starts a new figure. If the current figure contains a sequence of connected lines and curves, the method closes the loop by connecting a line from the endpoint to the starting point.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code creates a triangle by creating a new path, starting a figure, adding two intersecting lines to the figure, and then closing the figure to form a triangle. The path is then drawn to the screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#18](~/add/codesnippet/csharp/m-system.drawing.drawing_19_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#18](~/add/codesnippet/cpp/m-system.drawing.drawing_19_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#18](~/add/codesnippet/visualbasic/m-system.drawing.drawing_19_1.vb)]\"\n  syntax:\n    content: public void CloseFigure ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPath.CloseFigure*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Dispose\n  id: Dispose\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: GraphicsPath.Dispose()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Dispose()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Releases all resources used by this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: Calling Dispose allows the resources used by this <xref:System.Drawing.Drawing2D.GraphicsPath> to be reallocated for other purposes.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPath.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.FillMode\n  id: FillMode\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: FillMode\n  nameWithType: GraphicsPath.FillMode\n  fullName: System.Drawing.Drawing2D.GraphicsPath.FillMode\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets or sets a <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the interiors of shapes in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> are filled.\n  syntax:\n    content: public System.Drawing.Drawing2D.FillMode FillMode { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.FillMode\n      description: A <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that specifies how the interiors of shapes in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> are filled.\n  overload: System.Drawing.Drawing2D.GraphicsPath.FillMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Finalize\n  id: Finalize\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: GraphicsPath.Finalize()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Finalize()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.\n  syntax:\n    content: ~GraphicsPath ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPath.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten\n  id: Flatten\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Flatten()\n  nameWithType: GraphicsPath.Flatten()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Converts each curve in this path into a sequence of connected line segments.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%28System.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.\n  syntax:\n    content: public void Flatten ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPath.Flatten*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix)\n  id: Flatten(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Flatten(Matrix)\n  nameWithType: GraphicsPath.Flatten(Matrix)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten(Matrix)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies the specified transform and then converts each curve in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> into a sequence of connected line segments.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%28System.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.\n  syntax:\n    content: public void Flatten (System.Drawing.Drawing2D.Matrix matrix);\n    parameters:\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by which to transform this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> before flattening.\n  overload: System.Drawing.Drawing2D.GraphicsPath.Flatten*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix,System.Single)\n  id: Flatten(System.Drawing.Drawing2D.Matrix,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Flatten(Matrix,Single)\n  nameWithType: GraphicsPath.Flatten(Matrix,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten(Matrix,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Converts each curve in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> into a sequence of connected line segments.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a graphics path and a translation matrix.  \\n  \\n-   Adds a curve to the path using four points.  \\n  \\n-   Draws the path (curve) to the screen, using a black pen.  \\n  \\n-   Shifts the curve down 10 pixels and flattens it.  \\n  \\n-   Draws the curve to the screen using, a red pen.  \\n  \\n Notice that the red curve has flattened lines connecting the points.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#19](~/add/codesnippet/csharp/3641dbbe-5db3-4043-b7d1-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#19](~/add/codesnippet/cpp/3641dbbe-5db3-4043-b7d1-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#19](~/add/codesnippet/visualbasic/3641dbbe-5db3-4043-b7d1-_1.vb)]\"\n  syntax:\n    content: public void Flatten (System.Drawing.Drawing2D.Matrix matrix, float flatness);\n    parameters:\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by which to transform this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> before flattening.\n    - id: flatness\n      type: System.Single\n      description: Specifies the maximum permitted error between the curve and its flattened approximation. A value of 0.25 is the default. Reducing the flatness value will increase the number of line segments in the approximation.\n  overload: System.Drawing.Drawing2D.GraphicsPath.Flatten*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds\n  id: GetBounds\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: GetBounds()\n  nameWithType: GraphicsPath.GetBounds()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Returns a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: 'The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.'\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a graphics path.  \\n  \\n-   Adds an ellipse (circle) to it and draws it to the screen.  \\n  \\n-   Retrieves the bounding rectangle for the circle with a call to GetBounds and draws the rectangle to the screen.  \\n  \\n-   Creates a second graphics path.  \\n  \\n-   Adds a circle and widens the path to a width of 10.  \\n  \\n-   Draws the path to the screen.  \\n  \\n-   Retrieves the bounding rectangle for the second circle.  \\n  \\n-   Draws the bounding rectangle to the screen.  \\n  \\n-   Displays the rectangle size in a dialog box.  \\n  \\n Notice that the bounding rectangle on the right is larger (to account for the extra width of the line).  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#20](~/add/codesnippet/csharp/m-system.drawing.drawing_4_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#20](~/add/codesnippet/cpp/m-system.drawing.drawing_4_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#20](~/add/codesnippet/visualbasic/m-system.drawing.drawing_4_1.vb)]\"\n  syntax:\n    content: public System.Drawing.RectangleF GetBounds ();\n    parameters: []\n    return:\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> that represents a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.GetBounds*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix)\n  id: GetBounds(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: GetBounds(Matrix)\n  nameWithType: GraphicsPath.GetBounds(Matrix)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds(Matrix)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Returns a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when this path is transformed by the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  remarks: 'The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.'\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.GetBounds>.\n  syntax:\n    content: public System.Drawing.RectangleF GetBounds (System.Drawing.Drawing2D.Matrix matrix);\n    parameters:\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a transformation to be applied to this path before the bounding rectangle is calculated. This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle.\n    return:\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> that represents a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.GetBounds*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix,System.Drawing.Pen)\n  id: GetBounds(System.Drawing.Drawing2D.Matrix,System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: GetBounds(Matrix,Pen)\n  nameWithType: GraphicsPath.GetBounds(Matrix,Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds(Matrix,Pen)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Returns a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when the current path is transformed by the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> and drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: 'The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a \"loose fit\" to the bounded path. The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.'\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.GetBounds>.\n  syntax:\n    content: public System.Drawing.RectangleF GetBounds (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Pen pen);\n    parameters:\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a transformation to be applied to this path before the bounding rectangle is calculated. This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle.\n    - id: pen\n      type: System.Drawing.Pen\n      description: The <xref href=\"System.Drawing.Pen\"></xref> with which to draw the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n    return:\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> that represents a rectangle that bounds this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.GetBounds*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint\n  id: GetLastPoint\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: GetLastPoint()\n  nameWithType: GraphicsPath.GetLastPoint()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets the last point in the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> array of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code creates a path, adds a line to the path, and then gets the last point in the path.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#21](~/add/codesnippet/csharp/m-system.drawing.drawing_10_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#21](~/add/codesnippet/cpp/m-system.drawing.drawing_10_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#21](~/add/codesnippet/visualbasic/m-system.drawing.drawing_10_1.vb)]\"\n  syntax:\n    content: public System.Drawing.PointF GetLastPoint ();\n    parameters: []\n    return:\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the last point in this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen)\n  id: IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsOutlineVisible(Point,Pen)\n  nameWithType: GraphicsPath.IsOutlineVisible(Point,Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Point,Pen)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: This method tests to see if the outline of a given path is rendered visible at the specified point.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsOutlineVisible (System.Drawing.Point point, System.Drawing.Pen pen);\n    parameters:\n    - id: point\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> that specifies the location to test.\n    - id: pen\n      type: System.Drawing.Pen\n      description: The <xref href=\"System.Drawing.Pen\"></xref> to test.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen)\n  id: IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsOutlineVisible(PointF,Pen)\n  nameWithType: GraphicsPath.IsOutlineVisible(PointF,Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(PointF,Pen)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: This method tests to see if the outline of a given path is rendered visible at the specified point.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsOutlineVisible (System.Drawing.PointF point, System.Drawing.Pen pen);\n    parameters:\n    - id: point\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that specifies the location to test.\n    - id: pen\n      type: System.Drawing.Pen\n      description: The <xref href=\"System.Drawing.Pen\"></xref> to test.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen,System.Drawing.Graphics)\n  id: IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsOutlineVisible(Point,Pen,Graphics)\n  nameWithType: GraphicsPath.IsOutlineVisible(Point,Pen,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Point,Pen,Graphics)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref> and using the specified <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of `graphics` is temporarily applied before testing for visibility.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsOutlineVisible (System.Drawing.Point pt, System.Drawing.Pen pen, System.Drawing.Graphics graphics);\n    parameters:\n    - id: pt\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> that specifies the location to test.\n    - id: pen\n      type: System.Drawing.Pen\n      description: The <xref href=\"System.Drawing.Pen\"></xref> to test.\n    - id: graphics\n      type: System.Drawing.Graphics\n      description: The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> as drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen,System.Drawing.Graphics)\n  id: IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsOutlineVisible(PointF,Pen,Graphics)\n  nameWithType: GraphicsPath.IsOutlineVisible(PointF,Pen,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(PointF,Pen,Graphics)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref> and using the specified <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of `graphics` is temporarily applied before testing for visibility.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsOutlineVisible (System.Drawing.PointF pt, System.Drawing.Pen pen, System.Drawing.Graphics graphics);\n    parameters:\n    - id: pt\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that specifies the location to test.\n    - id: pen\n      type: System.Drawing.Pen\n      description: The <xref href=\"System.Drawing.Pen\"></xref> to test.\n    - id: graphics\n      type: System.Drawing.Graphics\n      description: The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> as drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen)\n  id: IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsOutlineVisible(Int32,Int32,Pen)\n  nameWithType: GraphicsPath.IsOutlineVisible(Int32,Int32,Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Int32,Int32,Pen)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: This method tests to see if the outline of a given path is rendered visible at the specified point.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsOutlineVisible (int x, int y, System.Drawing.Pen pen);\n    parameters:\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the point to test.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the point to test.\n    - id: pen\n      type: System.Drawing.Pen\n      description: The <xref href=\"System.Drawing.Pen\"></xref> to test.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen)\n  id: IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsOutlineVisible(Single,Single,Pen)\n  nameWithType: GraphicsPath.IsOutlineVisible(Single,Single,Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Single,Single,Pen)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: This method tests to see if the outline of a given path is rendered visible at the specified point.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsOutlineVisible (float x, float y, System.Drawing.Pen pen);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the point to test.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the point to test.\n    - id: pen\n      type: System.Drawing.Pen\n      description: The <xref href=\"System.Drawing.Pen\"></xref> to test.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Graphics)\n  id: IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsOutlineVisible(Int32,Int32,Pen,Graphics)\n  nameWithType: GraphicsPath.IsOutlineVisible(Int32,Int32,Pen,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Int32,Int32,Pen,Graphics)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref> and using the specified <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of `graphics` is temporarily applied before testing for visibility.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event. The code performs the following actions:  \\n  \\n-   Creates a path.  \\n  \\n-   Adds a rectangle to the path.  \\n  \\n-   Creates a wide pen and widens the path with that pen (to make the example clearer),  \\n  \\n-   Tests a point (100, 50) to see if it lies within (under) one of the edges of the rectangle by calling IsOutlineVisible.  \\n  \\n The result is shown in the message box (in this case, true). In other words the edge is rendered over that point.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#22](~/add/codesnippet/csharp/87b60199-549b-488d-9f2b-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#22](~/add/codesnippet/cpp/87b60199-549b-488d-9f2b-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#22](~/add/codesnippet/visualbasic/87b60199-549b-488d-9f2b-_1.vb)]\"\n  syntax:\n    content: public bool IsOutlineVisible (int x, int y, System.Drawing.Pen pen, System.Drawing.Graphics graphics);\n    parameters:\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the point to test.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the point to test.\n    - id: pen\n      type: System.Drawing.Pen\n      description: The <xref href=\"System.Drawing.Pen\"></xref> to test.\n    - id: graphics\n      type: System.Drawing.Graphics\n      description: The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> as drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen,System.Drawing.Graphics)\n  id: IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsOutlineVisible(Single,Single,Pen,Graphics)\n  nameWithType: GraphicsPath.IsOutlineVisible(Single,Single,Pen,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Single,Single,Pen,Graphics)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> when drawn with the specified <xref href=\"System.Drawing.Pen\"></xref> and using the specified <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: This method tests to see if the outline of a given path is rendered visible at the specified point. The coordinates of the point to be tested are given in world coordinates. The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsOutlineVisible (float x, float y, System.Drawing.Pen pen, System.Drawing.Graphics graphics);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the point to test.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the point to test.\n    - id: pen\n      type: System.Drawing.Pen\n      description: The <xref href=\"System.Drawing.Pen\"></xref> to test.\n    - id: graphics\n      type: System.Drawing.Graphics\n      description: The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within (under) the outline of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> as drawn with the specified <xref href=\"System.Drawing.Pen\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point)\n  id: IsVisible(System.Drawing.Point)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsVisible(Point)\n  nameWithType: GraphicsPath.IsVisible(Point)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Point)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: ''\n  example:\n  - For an example, see `GraphicsPath.IsVisible Method (Int32, Int32, Graphics)`.\n  syntax:\n    content: public bool IsVisible (System.Drawing.Point point);\n    parameters:\n    - id: point\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> that represents the point to test.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF)\n  id: IsVisible(System.Drawing.PointF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsVisible(PointF)\n  nameWithType: GraphicsPath.IsVisible(PointF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(PointF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsVisible (System.Drawing.PointF point);\n    parameters:\n    - id: point\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the point to test.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point,System.Drawing.Graphics)\n  id: IsVisible(System.Drawing.Point,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsVisible(Point,Graphics)\n  nameWithType: GraphicsPath.IsVisible(Point,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Point,Graphics)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: The coordinates of the point to be tested are given in world coordinates. The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.\n  example:\n  - For an example, see `GraphicsPath.IsVisible Method (Int32, Int32, Graphics)`.\n  syntax:\n    content: public bool IsVisible (System.Drawing.Point pt, System.Drawing.Graphics graphics);\n    parameters:\n    - id: pt\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> that represents the point to test.\n    - id: graphics\n      type: System.Drawing.Graphics\n      description: The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)\n  id: IsVisible(System.Drawing.PointF,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsVisible(PointF,Graphics)\n  nameWithType: GraphicsPath.IsVisible(PointF,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(PointF,Graphics)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: The coordinates of the point to be tested are given in world coordinates. The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsVisible (System.Drawing.PointF pt, System.Drawing.Graphics graphics);\n    parameters:\n    - id: pt\n      type: System.Drawing.PointF\n      description: A <xref href=\"System.Drawing.PointF\"></xref> that represents the point to test.\n    - id: graphics\n      type: System.Drawing.Graphics\n      description: The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32)\n  id: IsVisible(System.Int32,System.Int32)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsVisible(Int32,Int32)\n  nameWithType: GraphicsPath.IsVisible(Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsVisible (int x, int y);\n    parameters:\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the point to test.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the point to test.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single)\n  id: IsVisible(System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsVisible(Single,Single)\n  nameWithType: GraphicsPath.IsVisible(Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: ''\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsVisible (float x, float y);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the point to test.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the point to test.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)\n  id: IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsVisible(Int32,Int32,Graphics)\n  nameWithType: GraphicsPath.IsVisible(Int32,Int32,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Int32,Int32,Graphics)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>, using the specified <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The coordinates of the point to be tested are given in world coordinates. The transform matrix of `graphics` is temporarily applied before testing for visibility.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path and adds an ellipse to the path.  \\n  \\n-   Tests whether the specified point is contained within the path.  \\n  \\n-   Displays the result in a dialog box.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#23](~/add/codesnippet/csharp/dcc5e859-c137-4241-9ba4-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#23](~/add/codesnippet/cpp/dcc5e859-c137-4241-9ba4-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#23](~/add/codesnippet/visualbasic/dcc5e859-c137-4241-9ba4-_1.vb)]\"\n  syntax:\n    content: public bool IsVisible (int x, int y, System.Drawing.Graphics graphics);\n    parameters:\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the point to test.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the point to test.\n    - id: graphics\n      type: System.Drawing.Graphics\n      description: The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single,System.Drawing.Graphics)\n  id: IsVisible(System.Single,System.Single,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: IsVisible(Single,Single,Graphics)\n  nameWithType: GraphicsPath.IsVisible(Single,Single,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Single,Single,Graphics)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Indicates whether the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> in the visible clip region of the specified <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The coordinates of the point to be tested are given in world coordinates. The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.\n  syntax:\n    content: public bool IsVisible (float x, float y, System.Drawing.Graphics graphics);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the point to test.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the point to test.\n    - id: graphics\n      type: System.Drawing.Graphics\n      description: The <xref href=\"System.Drawing.Graphics\"></xref> for which to test visibility.\n    return:\n      type: System.Boolean\n      description: This method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified point is contained within this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.PathData\n  id: PathData\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: PathData\n  nameWithType: GraphicsPath.PathData\n  fullName: System.Drawing.Drawing2D.GraphicsPath.PathData\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets a <xref href=\"System.Drawing.Drawing2D.PathData\"></xref> that encapsulates arrays of points (<code>points</code>) and types (<code>types</code>) for this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  syntax:\n    content: public System.Drawing.Drawing2D.PathData PathData { get; }\n    return:\n      type: System.Drawing.Drawing2D.PathData\n      description: A <xref href=\"System.Drawing.Drawing2D.PathData\"></xref> that encapsulates arrays for both the points and types for this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  overload: System.Drawing.Drawing2D.GraphicsPath.PathData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.PathPoints\n  id: PathPoints\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: PathPoints\n  nameWithType: GraphicsPath.PathPoints\n  fullName: System.Drawing.Drawing2D.GraphicsPath.PathPoints\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets the points in the path.\n  syntax:\n    content: public System.Drawing.PointF[] PathPoints { get; }\n    return:\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> objects that represent the path.\n  overload: System.Drawing.Drawing2D.GraphicsPath.PathPoints*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.PathTypes\n  id: PathTypes\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: PathTypes\n  nameWithType: GraphicsPath.PathTypes\n  fullName: System.Drawing.Drawing2D.GraphicsPath.PathTypes\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets the types of the corresponding points in the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> array.\n  remarks: \"The array of bytes returned by the PathTypes property specifies point types and flags for the data points in a path. For each point, bits 0 through 2 indicate the type of a point, and bits 3 through 7 hold a set of flags that specify the attributes of a point. The following table shows possible values and their meanings.  \\n  \\n|Value|Meaning|  \\n|-----------|-------------|  \\n|0|Indicates that the point is the start of a figure.|  \\n|1|Indicates that the point is one of the two endpoints of a line.|  \\n|3|Indicates that the point is an endpoint or control point of a cubic Bézier spline.|  \\n|0x7|Masks all bits except for the three low-order bits, which indicate the point type.|  \\n|0x20|Specifies that the point is a marker.|  \\n|0x80|Specifies that the point is the last point in a closed subpath (figure).|\"\n  syntax:\n    content: public byte[] PathTypes { get; }\n    return:\n      type: System.Byte[]\n      description: An array of bytes that specifies the types of the corresponding points in the path.\n  overload: System.Drawing.Drawing2D.GraphicsPath.PathTypes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.PointCount\n  id: PointCount\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: PointCount\n  nameWithType: GraphicsPath.PointCount\n  fullName: System.Drawing.Drawing2D.GraphicsPath.PointCount\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Gets the number of elements in the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> or the <xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes*> array.\n  syntax:\n    content: public int PointCount { get; }\n    return:\n      type: System.Int32\n      description: An integer that specifies the number of elements in the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> or the <xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes*> array.\n  overload: System.Drawing.Drawing2D.GraphicsPath.PointCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Reset\n  id: Reset\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: GraphicsPath.Reset()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Reset()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Empties the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> and <xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes*> arrays and sets the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> to <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path.  \\n  \\n-   Adds several primitives to it.  \\n  \\n-   Draws the path's points array to the screen.  \\n  \\n-   Resets the path to an empty state.  \\n  \\n-   Re-acquires the points array (if it exists).  \\n  \\n-   Draws the array to the screen.  \\n  \\n Notice that it finds no array following the reset call.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#24](~/add/codesnippet/csharp/m-system.drawing.drawing_8_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#24](~/add/codesnippet/cpp/m-system.drawing.drawing_8_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#24](~/add/codesnippet/visualbasic/m-system.drawing.drawing_8_1.vb)]\"\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPath.Reset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Reverse\n  id: Reverse\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Reverse()\n  nameWithType: GraphicsPath.Reverse()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Reverse()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Reverses the order of points in the <xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*> array of this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path and adds several primitives to the path.  \\n  \\n-   Draws the path's points array to the screen.  \\n  \\n-   Draws the reversed points array to the screen.  \\n  \\n Notice that the second listing of points is in reverse order from the first.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#25](~/add/codesnippet/csharp/m-system.drawing.drawing_22_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#25](~/add/codesnippet/cpp/m-system.drawing.drawing_22_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#25](~/add/codesnippet/visualbasic/m-system.drawing.drawing_22_1.vb)]\"\n  syntax:\n    content: public void Reverse ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPath.Reverse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.SetMarkers\n  id: SetMarkers\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: SetMarkers()\n  nameWithType: GraphicsPath.SetMarkers()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.SetMarkers()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Sets a marker on this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: \"This method creates a marker on the path that can be used to separate sections of the path. You can then use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> methods to iterate through the markers in the path.  \\n  \\n Markers are used to separate groups of subpaths. One or more subpaths can be contained between two markers in the path.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code creates a path and adds several primitives to the path separated by markers, and draws the path to the screen.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#26](~/add/codesnippet/csharp/m-system.drawing.drawing_7_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#26](~/add/codesnippet/cpp/m-system.drawing.drawing_7_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#26](~/add/codesnippet/visualbasic/m-system.drawing.drawing_7_1.vb)]\"\n  syntax:\n    content: public void SetMarkers ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPath.SetMarkers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.StartFigure\n  id: StartFigure\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: StartFigure()\n  nameWithType: GraphicsPath.StartFigure()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.StartFigure()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Starts a new figure without closing the current figure. All subsequent points added to the path are added to this new figure.\n  remarks: \"The user must keep the original points if they are needed. The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.  \\n  \\n This method starts a new subpath in the path. Subpaths allow you to separate a path into sections and use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator> class to iterate through the subpaths.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path.  \\n  \\n-   Adds two sets of figures. The first set of figures combines four primitives into two figures. The second set of figures combines the same four primitives (except that they are offset in the y-axis) into three figures.  \\n  \\n-   Draws all the figures to the screen.  \\n  \\n Notice the difference in the appearance between the two sets of figures.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#27](~/add/codesnippet/csharp/m-system.drawing.drawing_0_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#27](~/add/codesnippet/cpp/m-system.drawing.drawing_0_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#27](~/add/codesnippet/visualbasic/m-system.drawing.drawing_0_1.vb)]\"\n  syntax:\n    content: public void StartFigure ();\n    parameters: []\n  overload: System.Drawing.Drawing2D.GraphicsPath.StartFigure*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Transform(System.Drawing.Drawing2D.Matrix)\n  id: Transform(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Transform(Matrix)\n  nameWithType: GraphicsPath.Transform(Matrix)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Transform(Matrix)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies a transform matrix to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: The transformation can scale, translate, rotate, or skew the <xref:System.Drawing.Drawing2D.GraphicsPath>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path and adds an ellipse to the path.  \\n  \\n-   Draws path to the screen.  \\n  \\n-   Creates a transform matrix to translate the path 100 units in the x-axis direction.  \\n  \\n-   Draws the transformed path to the screen.  \\n  \\n Notice that the original ellipse is drawn in black and the transformed ellipse is drawn in red.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#28](~/add/codesnippet/csharp/40450369-76ad-4f55-a17b-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#28](~/add/codesnippet/cpp/40450369-76ad-4f55-a17b-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#28](~/add/codesnippet/visualbasic/40450369-76ad-4f55-a17b-_1.vb)]\"\n  syntax:\n    content: public void Transform (System.Drawing.Drawing2D.Matrix matrix);\n    parameters:\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that represents the transformation to apply.\n  overload: System.Drawing.Drawing2D.GraphicsPath.Transform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF)\n  id: Warp(System.Drawing.PointF[],System.Drawing.RectangleF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Warp(PointF[],RectangleF)\n  nameWithType: GraphicsPath.Warp(PointF[],RectangleF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies a warp transform, defined by a rectangle and a parallelogram, to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: ''\n  example:\n  - For an example, see [Warp(PointF\\[\\], RectangleF, Matrix, WarpMode, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect);\n    parameters:\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram to which the rectangle defined by `srcRect` is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle that is transformed to the parallelogram defined by `destPoints`.\n  overload: System.Drawing.Drawing2D.GraphicsPath.Warp*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)\n  id: Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Warp(PointF[],RectangleF,Matrix)\n  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies a warp transform, defined by a rectangle and a parallelogram, to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: ''\n  example:\n  - For an example, see [Warp(PointF\\[\\], RectangleF, Matrix, WarpMode, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix);\n    parameters:\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram to which the rectangle defined by `srcRect` is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle that is transformed to the parallelogram defined by `destPoints`.\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a geometric transform to apply to the path.\n  overload: System.Drawing.Drawing2D.GraphicsPath.Warp*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode)\n  id: Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Warp(PointF[],RectangleF,Matrix,WarpMode)\n  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies a warp transform, defined by a rectangle and a parallelogram, to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: ''\n  example:\n  - For an example, see [Warp(PointF\\[\\], RectangleF, Matrix, WarpMode, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)?qualifyHint=False&autoUpgrade=False).\n  syntax:\n    content: public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.WarpMode warpMode);\n    parameters:\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that defines a parallelogram to which the rectangle defined by `srcRect` is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle that is transformed to the parallelogram defined by `destPoints`.\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a geometric transform to apply to the path.\n    - id: warpMode\n      type: System.Drawing.Drawing2D.WarpMode\n      description: A <xref href=\"System.Drawing.Drawing2D.WarpMode\"></xref> enumeration that specifies whether this warp operation uses perspective or bilinear mode.\n  overload: System.Drawing.Drawing2D.GraphicsPath.Warp*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)\n  id: Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Warp(PointF[],RectangleF,Matrix,WarpMode,Single)\n  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Applies a warp transform, defined by a rectangle and a parallelogram, to this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path and adds a rectangle to the path.  \\n  \\n-   Draws that rectangle to the screen in black.  \\n  \\n-   Warps the path with a perspective warp.  \\n  \\n-   Draws the warped rectangle (path) to the screen in red.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#29](~/add/codesnippet/csharp/55b0be67-c94c-4de0-a933-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#29](~/add/codesnippet/cpp/55b0be67-c94c-4de0-a933-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#29](~/add/codesnippet/visualbasic/55b0be67-c94c-4de0-a933-_1.vb)]\"\n  syntax:\n    content: public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.WarpMode warpMode, float flatness);\n    parameters:\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: An array of <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram to which the rectangle defined by `srcRect` is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> that represents the rectangle that is transformed to the parallelogram defined by `destPoints`.\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a geometric transform to apply to the path.\n    - id: warpMode\n      type: System.Drawing.Drawing2D.WarpMode\n      description: A <xref href=\"System.Drawing.Drawing2D.WarpMode\"></xref> enumeration that specifies whether this warp operation uses perspective or bilinear mode.\n    - id: flatness\n      type: System.Single\n      description: A value from 0 through 1 that specifies how flat the resulting path is. For more information, see the <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten*> methods.\n  overload: System.Drawing.Drawing2D.GraphicsPath.Warp*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen)\n  id: Widen(System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Widen(Pen)\n  nameWithType: GraphicsPath.Widen(Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds an additional outline to the path.\n  remarks: This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen. If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%28System.Drawing.Pen%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.\n  syntax:\n    content: public void Widen (System.Drawing.Pen pen);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: A <xref href=\"System.Drawing.Pen\"></xref> that specifies the width between the original outline of the path and the new outline this method creates.\n  overload: System.Drawing.Drawing2D.GraphicsPath.Widen*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix)\n  id: Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Widen(Pen,Matrix)\n  nameWithType: GraphicsPath.Widen(Pen,Matrix)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen,Matrix)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Adds an additional outline to the <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen. If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.\n  example:\n  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%28System.Drawing.Pen%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.\n  syntax:\n    content: public void Widen (System.Drawing.Pen pen, System.Drawing.Drawing2D.Matrix matrix);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: A <xref href=\"System.Drawing.Pen\"></xref> that specifies the width between the original outline of the path and the new outline this method creates.\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a transform to apply to the path before widening.\n  overload: System.Drawing.Drawing2D.GraphicsPath.Widen*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix,System.Single)\n  id: Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  langs:\n  - csharp\n  name: Widen(Pen,Matrix,Single)\n  nameWithType: GraphicsPath.Widen(Pen,Matrix,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen,Matrix,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing.Drawing2D\n  summary: Replaces this <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> with curves that enclose the area that is filled when this path is drawn by the specified pen.\n  remarks: This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to Widen. If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \\n  \\n-   Creates a path and adds two ellipses to the path.  \\n  \\n-   Draws the path in black.  \\n  \\n-   Widens the path.  \\n  \\n-   Draws the path in red.  \\n  \\n Notice that the second rendering uses <xref:System.Drawing.Graphics.FillPath%2A> instead of <xref:System.Drawing.Graphics.DrawPath%2A>, and hence the rendered figure has the outline filled.  \\n  \\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#30](~/add/codesnippet/csharp/baafea63-e45c-4b80-99b6-_1.cs)]\\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#30](~/add/codesnippet/cpp/baafea63-e45c-4b80-99b6-_1.cpp)]\\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#30](~/add/codesnippet/visualbasic/baafea63-e45c-4b80-99b6-_1.vb)]\"\n  syntax:\n    content: public void Widen (System.Drawing.Pen pen, System.Drawing.Drawing2D.Matrix matrix, float flatness);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: A <xref href=\"System.Drawing.Pen\"></xref> that specifies the width between the original outline of the path and the new outline this method creates.\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: A <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that specifies a transform to apply to the path before widening.\n    - id: flatness\n      type: System.Single\n      description: A value that specifies the flatness for curves.\n  overload: System.Drawing.Drawing2D.GraphicsPath.Widen*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GraphicsPath()\n  nameWithType: GraphicsPath.GraphicsPath()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath()\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GraphicsPath(FillMode)\n  nameWithType: GraphicsPath.GraphicsPath(FillMode)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(FillMode)\n- uid: System.Drawing.Drawing2D.FillMode\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: FillMode\n  nameWithType: FillMode\n  fullName: System.Drawing.Drawing2D.FillMode\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GraphicsPath(Point[],Byte[])\n  nameWithType: GraphicsPath.GraphicsPath(Point[],Byte[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(Point[],Byte[])\n- uid: System.Drawing.Point[]\n  parent: System.Drawing\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Drawing.Point[]\n  spec.csharp:\n  - uid: System.Drawing.Point\n    name: Point\n    nameWithType: Point\n    fullName: Point[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GraphicsPath(PointF[],Byte[])\n  nameWithType: GraphicsPath.GraphicsPath(PointF[],Byte[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(PointF[],Byte[])\n- uid: System.Drawing.PointF[]\n  parent: System.Drawing\n  isExternal: false\n  name: PointF\n  nameWithType: PointF\n  fullName: System.Drawing.PointF[]\n  spec.csharp:\n  - uid: System.Drawing.PointF\n    name: PointF\n    nameWithType: PointF\n    fullName: PointF[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[],System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GraphicsPath(Point[],Byte[],FillMode)\n  nameWithType: GraphicsPath.GraphicsPath(Point[],Byte[],FillMode)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(Point[],Byte[],FillMode)\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GraphicsPath(PointF[],Byte[],FillMode)\n  nameWithType: GraphicsPath.GraphicsPath(PointF[],Byte[],FillMode)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(PointF[],Byte[],FillMode)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.Rectangle,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddArc(Rectangle,Single,Single)\n  nameWithType: GraphicsPath.AddArc(Rectangle,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Rectangle,Single,Single)\n- uid: System.Drawing.Rectangle\n  parent: System.Drawing\n  isExternal: false\n  name: Rectangle\n  nameWithType: Rectangle\n  fullName: System.Drawing.Rectangle\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.RectangleF,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddArc(RectangleF,Single,Single)\n  nameWithType: GraphicsPath.AddArc(RectangleF,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(RectangleF,Single,Single)\n- uid: System.Drawing.RectangleF\n  parent: System.Drawing\n  isExternal: false\n  name: RectangleF\n  nameWithType: RectangleF\n  fullName: System.Drawing.RectangleF\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddArc(Int32,Int32,Int32,Int32,Single,Single)\n  nameWithType: GraphicsPath.AddArc(Int32,Int32,Int32,Int32,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Int32,Int32,Int32,Int32,Single,Single)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddArc(Single,Single,Single,Single,Single,Single)\n  nameWithType: GraphicsPath.AddArc(Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Single,Single,Single,Single,Single,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddBezier(Point,Point,Point,Point)\n  nameWithType: GraphicsPath.AddBezier(Point,Point,Point,Point)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Point,Point,Point,Point)\n- uid: System.Drawing.Point\n  parent: System.Drawing\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Drawing.Point\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddBezier(PointF,PointF,PointF,PointF)\n  nameWithType: GraphicsPath.AddBezier(PointF,PointF,PointF,PointF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(PointF,PointF,PointF,PointF)\n- uid: System.Drawing.PointF\n  parent: System.Drawing\n  isExternal: false\n  name: PointF\n  nameWithType: PointF\n  fullName: System.Drawing.PointF\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: GraphicsPath.AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)\n  nameWithType: GraphicsPath.AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddBeziers(Point[])\n  nameWithType: GraphicsPath.AddBeziers(Point[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(Point[])\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddBeziers(PointF[])\n  nameWithType: GraphicsPath.AddBeziers(PointF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(PointF[])\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddClosedCurve(Point[])\n  nameWithType: GraphicsPath.AddClosedCurve(Point[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(Point[])\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddClosedCurve(PointF[])\n  nameWithType: GraphicsPath.AddClosedCurve(PointF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(PointF[])\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddClosedCurve(Point[],Single)\n  nameWithType: GraphicsPath.AddClosedCurve(Point[],Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(Point[],Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[],System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddClosedCurve(PointF[],Single)\n  nameWithType: GraphicsPath.AddClosedCurve(PointF[],Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(PointF[],Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddCurve(Point[])\n  nameWithType: GraphicsPath.AddCurve(Point[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[])\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddCurve(PointF[])\n  nameWithType: GraphicsPath.AddCurve(PointF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[])\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddCurve(Point[],Single)\n  nameWithType: GraphicsPath.AddCurve(Point[],Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[],Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddCurve(PointF[],Single)\n  nameWithType: GraphicsPath.AddCurve(PointF[],Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[],Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddCurve(Point[],Int32,Int32,Single)\n  nameWithType: GraphicsPath.AddCurve(Point[],Int32,Int32,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[],Int32,Int32,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Int32,System.Int32,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddCurve(PointF[],Int32,Int32,Single)\n  nameWithType: GraphicsPath.AddCurve(PointF[],Int32,Int32,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[],Int32,Int32,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.Rectangle)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddEllipse(Rectangle)\n  nameWithType: GraphicsPath.AddEllipse(Rectangle)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Rectangle)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.RectangleF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddEllipse(RectangleF)\n  nameWithType: GraphicsPath.AddEllipse(RectangleF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(RectangleF)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddEllipse(Int32,Int32,Int32,Int32)\n  nameWithType: GraphicsPath.AddEllipse(Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddEllipse(Single,Single,Single,Single)\n  nameWithType: GraphicsPath.AddEllipse(Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Single,Single,Single,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.Point,System.Drawing.Point)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddLine(Point,Point)\n  nameWithType: GraphicsPath.AddLine(Point,Point)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Point,Point)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddLine(PointF,PointF)\n  nameWithType: GraphicsPath.AddLine(PointF,PointF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(PointF,PointF)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddLine(Int32,Int32,Int32,Int32)\n  nameWithType: GraphicsPath.AddLine(Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddLine(Single,Single,Single,Single)\n  nameWithType: GraphicsPath.AddLine(Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Single,Single,Single,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddLines(Point[])\n  nameWithType: GraphicsPath.AddLines(Point[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLines(Point[])\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddLines(PointF[])\n  nameWithType: GraphicsPath.AddLines(PointF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLines(PointF[])\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddPath(GraphicsPath,Boolean)\n  nameWithType: GraphicsPath.AddPath(GraphicsPath,Boolean)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPath(GraphicsPath,Boolean)\n- uid: System.Drawing.Drawing2D.GraphicsPath\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: GraphicsPath\n  nameWithType: GraphicsPath\n  fullName: System.Drawing.Drawing2D.GraphicsPath\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Drawing.Rectangle,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddPie(Rectangle,Single,Single)\n  nameWithType: GraphicsPath.AddPie(Rectangle,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Rectangle,Single,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddPie(Int32,Int32,Int32,Int32,Single,Single)\n  nameWithType: GraphicsPath.AddPie(Int32,Int32,Int32,Int32,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Int32,Int32,Int32,Int32,Single,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddPie(Single,Single,Single,Single,Single,Single)\n  nameWithType: GraphicsPath.AddPie(Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Single,Single,Single,Single,Single,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.Point[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddPolygon(Point[])\n  nameWithType: GraphicsPath.AddPolygon(Point[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(Point[])\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.PointF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddPolygon(PointF[])\n  nameWithType: GraphicsPath.AddPolygon(PointF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(PointF[])\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.Rectangle)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddRectangle(Rectangle)\n  nameWithType: GraphicsPath.AddRectangle(Rectangle)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(Rectangle)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.RectangleF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddRectangle(RectangleF)\n  nameWithType: GraphicsPath.AddRectangle(RectangleF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(RectangleF)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.Rectangle[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddRectangles(Rectangle[])\n  nameWithType: GraphicsPath.AddRectangles(Rectangle[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(Rectangle[])\n- uid: System.Drawing.Rectangle[]\n  parent: System.Drawing\n  isExternal: false\n  name: Rectangle\n  nameWithType: Rectangle\n  fullName: System.Drawing.Rectangle[]\n  spec.csharp:\n  - uid: System.Drawing.Rectangle\n    name: Rectangle\n    nameWithType: Rectangle\n    fullName: Rectangle[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.RectangleF[])\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddRectangles(RectangleF[])\n  nameWithType: GraphicsPath.AddRectangles(RectangleF[])\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(RectangleF[])\n- uid: System.Drawing.RectangleF[]\n  parent: System.Drawing\n  isExternal: false\n  name: RectangleF\n  nameWithType: RectangleF\n  fullName: System.Drawing.RectangleF[]\n  spec.csharp:\n  - uid: System.Drawing.RectangleF\n    name: RectangleF\n    nameWithType: RectangleF\n    fullName: RectangleF[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Point,System.Drawing.StringFormat)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddString(String,FontFamily,Int32,Single,Point,StringFormat)\n  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,Point,StringFormat)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,Point,StringFormat)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Drawing.FontFamily\n  parent: System.Drawing\n  isExternal: false\n  name: FontFamily\n  nameWithType: FontFamily\n  fullName: System.Drawing.FontFamily\n- uid: System.Drawing.StringFormat\n  parent: System.Drawing\n  isExternal: false\n  name: StringFormat\n  nameWithType: StringFormat\n  fullName: System.Drawing.StringFormat\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.PointF,System.Drawing.StringFormat)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddString(String,FontFamily,Int32,Single,PointF,StringFormat)\n  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,PointF,StringFormat)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,PointF,StringFormat)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Rectangle,System.Drawing.StringFormat)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)\n  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)\n  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)\n- uid: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: ClearMarkers()\n  nameWithType: GraphicsPath.ClearMarkers()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers()\n- uid: System.Drawing.Drawing2D.GraphicsPath.Clone\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Clone()\n  nameWithType: GraphicsPath.Clone()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: CloseAllFigures()\n  nameWithType: GraphicsPath.CloseAllFigures()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures()\n- uid: System.Drawing.Drawing2D.GraphicsPath.CloseFigure\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: CloseFigure()\n  nameWithType: GraphicsPath.CloseFigure()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.CloseFigure()\n- uid: System.Drawing.Drawing2D.GraphicsPath.Dispose\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Dispose()\n  nameWithType: GraphicsPath.Dispose()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Dispose()\n- uid: System.Drawing.Drawing2D.GraphicsPath.FillMode\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: FillMode\n  nameWithType: GraphicsPath.FillMode\n  fullName: System.Drawing.Drawing2D.GraphicsPath.FillMode\n- uid: System.Drawing.Drawing2D.GraphicsPath.Finalize\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Finalize()\n  nameWithType: GraphicsPath.Finalize()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Finalize()\n- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Flatten()\n  nameWithType: GraphicsPath.Flatten()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten()\n- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Flatten(Matrix)\n  nameWithType: GraphicsPath.Flatten(Matrix)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten(Matrix)\n- uid: System.Drawing.Drawing2D.Matrix\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: Matrix\n  nameWithType: Matrix\n  fullName: System.Drawing.Drawing2D.Matrix\n- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Flatten(Matrix,Single)\n  nameWithType: GraphicsPath.Flatten(Matrix,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten(Matrix,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GetBounds()\n  nameWithType: GraphicsPath.GetBounds()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds()\n- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GetBounds(Matrix)\n  nameWithType: GraphicsPath.GetBounds(Matrix)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds(Matrix)\n- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix,System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GetBounds(Matrix,Pen)\n  nameWithType: GraphicsPath.GetBounds(Matrix,Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds(Matrix,Pen)\n- uid: System.Drawing.Pen\n  parent: System.Drawing\n  isExternal: false\n  name: Pen\n  nameWithType: Pen\n  fullName: System.Drawing.Pen\n- uid: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GetLastPoint()\n  nameWithType: GraphicsPath.GetLastPoint()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint()\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsOutlineVisible(Point,Pen)\n  nameWithType: GraphicsPath.IsOutlineVisible(Point,Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Point,Pen)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsOutlineVisible(PointF,Pen)\n  nameWithType: GraphicsPath.IsOutlineVisible(PointF,Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(PointF,Pen)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsOutlineVisible(Point,Pen,Graphics)\n  nameWithType: GraphicsPath.IsOutlineVisible(Point,Pen,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Point,Pen,Graphics)\n- uid: System.Drawing.Graphics\n  parent: System.Drawing\n  isExternal: false\n  name: Graphics\n  nameWithType: Graphics\n  fullName: System.Drawing.Graphics\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsOutlineVisible(PointF,Pen,Graphics)\n  nameWithType: GraphicsPath.IsOutlineVisible(PointF,Pen,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(PointF,Pen,Graphics)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsOutlineVisible(Int32,Int32,Pen)\n  nameWithType: GraphicsPath.IsOutlineVisible(Int32,Int32,Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Int32,Int32,Pen)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsOutlineVisible(Single,Single,Pen)\n  nameWithType: GraphicsPath.IsOutlineVisible(Single,Single,Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Single,Single,Pen)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsOutlineVisible(Int32,Int32,Pen,Graphics)\n  nameWithType: GraphicsPath.IsOutlineVisible(Int32,Int32,Pen,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Int32,Int32,Pen,Graphics)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsOutlineVisible(Single,Single,Pen,Graphics)\n  nameWithType: GraphicsPath.IsOutlineVisible(Single,Single,Pen,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Single,Single,Pen,Graphics)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsVisible(Point)\n  nameWithType: GraphicsPath.IsVisible(Point)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Point)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsVisible(PointF)\n  nameWithType: GraphicsPath.IsVisible(PointF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(PointF)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsVisible(Point,Graphics)\n  nameWithType: GraphicsPath.IsVisible(Point,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Point,Graphics)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsVisible(PointF,Graphics)\n  nameWithType: GraphicsPath.IsVisible(PointF,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(PointF,Graphics)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsVisible(Int32,Int32)\n  nameWithType: GraphicsPath.IsVisible(Int32,Int32)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Int32,Int32)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsVisible(Single,Single)\n  nameWithType: GraphicsPath.IsVisible(Single,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Single,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsVisible(Int32,Int32,Graphics)\n  nameWithType: GraphicsPath.IsVisible(Int32,Int32,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Int32,Int32,Graphics)\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single,System.Drawing.Graphics)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsVisible(Single,Single,Graphics)\n  nameWithType: GraphicsPath.IsVisible(Single,Single,Graphics)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Single,Single,Graphics)\n- uid: System.Drawing.Drawing2D.GraphicsPath.PathData\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: PathData\n  nameWithType: GraphicsPath.PathData\n  fullName: System.Drawing.Drawing2D.GraphicsPath.PathData\n- uid: System.Drawing.Drawing2D.PathData\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: PathData\n  nameWithType: PathData\n  fullName: System.Drawing.Drawing2D.PathData\n- uid: System.Drawing.Drawing2D.GraphicsPath.PathPoints\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: PathPoints\n  nameWithType: GraphicsPath.PathPoints\n  fullName: System.Drawing.Drawing2D.GraphicsPath.PathPoints\n- uid: System.Drawing.Drawing2D.GraphicsPath.PathTypes\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: PathTypes\n  nameWithType: GraphicsPath.PathTypes\n  fullName: System.Drawing.Drawing2D.GraphicsPath.PathTypes\n- uid: System.Drawing.Drawing2D.GraphicsPath.PointCount\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: PointCount\n  nameWithType: GraphicsPath.PointCount\n  fullName: System.Drawing.Drawing2D.GraphicsPath.PointCount\n- uid: System.Drawing.Drawing2D.GraphicsPath.Reset\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Reset()\n  nameWithType: GraphicsPath.Reset()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Reset()\n- uid: System.Drawing.Drawing2D.GraphicsPath.Reverse\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Reverse()\n  nameWithType: GraphicsPath.Reverse()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Reverse()\n- uid: System.Drawing.Drawing2D.GraphicsPath.SetMarkers\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: SetMarkers()\n  nameWithType: GraphicsPath.SetMarkers()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.SetMarkers()\n- uid: System.Drawing.Drawing2D.GraphicsPath.StartFigure\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: StartFigure()\n  nameWithType: GraphicsPath.StartFigure()\n  fullName: System.Drawing.Drawing2D.GraphicsPath.StartFigure()\n- uid: System.Drawing.Drawing2D.GraphicsPath.Transform(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Transform(Matrix)\n  nameWithType: GraphicsPath.Transform(Matrix)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Transform(Matrix)\n- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Warp(PointF[],RectangleF)\n  nameWithType: GraphicsPath.Warp(PointF[],RectangleF)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF)\n- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Warp(PointF[],RectangleF,Matrix)\n  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix)\n- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Warp(PointF[],RectangleF,Matrix,WarpMode)\n  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode)\n- uid: System.Drawing.Drawing2D.WarpMode\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: WarpMode\n  nameWithType: WarpMode\n  fullName: System.Drawing.Drawing2D.WarpMode\n- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Warp(PointF[],RectangleF,Matrix,WarpMode,Single)\n  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Widen(Pen)\n  nameWithType: GraphicsPath.Widen(Pen)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen)\n- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Widen(Pen,Matrix)\n  nameWithType: GraphicsPath.Widen(Pen,Matrix)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen,Matrix)\n- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix,System.Single)\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Widen(Pen,Matrix,Single)\n  nameWithType: GraphicsPath.Widen(Pen,Matrix,Single)\n  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen,Matrix,Single)\n- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GraphicsPath\n  nameWithType: GraphicsPath.GraphicsPath\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddArc\n  nameWithType: GraphicsPath.AddArc\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddBezier\n  nameWithType: GraphicsPath.AddBezier\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddBeziers*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddBeziers\n  nameWithType: GraphicsPath.AddBeziers\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddClosedCurve\n  nameWithType: GraphicsPath.AddClosedCurve\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddCurve\n  nameWithType: GraphicsPath.AddCurve\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddEllipse\n  nameWithType: GraphicsPath.AddEllipse\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddLine\n  nameWithType: GraphicsPath.AddLine\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddLines*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddLines\n  nameWithType: GraphicsPath.AddLines\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPath*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddPath\n  nameWithType: GraphicsPath.AddPath\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddPie\n  nameWithType: GraphicsPath.AddPie\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddPolygon*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddPolygon\n  nameWithType: GraphicsPath.AddPolygon\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangle*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddRectangle\n  nameWithType: GraphicsPath.AddRectangle\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangles*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddRectangles\n  nameWithType: GraphicsPath.AddRectangles\n- uid: System.Drawing.Drawing2D.GraphicsPath.AddString*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: AddString\n  nameWithType: GraphicsPath.AddString\n- uid: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: ClearMarkers\n  nameWithType: GraphicsPath.ClearMarkers\n- uid: System.Drawing.Drawing2D.GraphicsPath.Clone*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Clone\n  nameWithType: GraphicsPath.Clone\n- uid: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: CloseAllFigures\n  nameWithType: GraphicsPath.CloseAllFigures\n- uid: System.Drawing.Drawing2D.GraphicsPath.CloseFigure*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: CloseFigure\n  nameWithType: GraphicsPath.CloseFigure\n- uid: System.Drawing.Drawing2D.GraphicsPath.Dispose*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Dispose\n  nameWithType: GraphicsPath.Dispose\n- uid: System.Drawing.Drawing2D.GraphicsPath.FillMode*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: FillMode\n  nameWithType: GraphicsPath.FillMode\n- uid: System.Drawing.Drawing2D.GraphicsPath.Finalize*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Finalize\n  nameWithType: GraphicsPath.Finalize\n- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Flatten\n  nameWithType: GraphicsPath.Flatten\n- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GetBounds\n  nameWithType: GraphicsPath.GetBounds\n- uid: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: GetLastPoint\n  nameWithType: GraphicsPath.GetLastPoint\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsOutlineVisible\n  nameWithType: GraphicsPath.IsOutlineVisible\n- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: IsVisible\n  nameWithType: GraphicsPath.IsVisible\n- uid: System.Drawing.Drawing2D.GraphicsPath.PathData*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: PathData\n  nameWithType: GraphicsPath.PathData\n- uid: System.Drawing.Drawing2D.GraphicsPath.PathPoints*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: PathPoints\n  nameWithType: GraphicsPath.PathPoints\n- uid: System.Drawing.Drawing2D.GraphicsPath.PathTypes*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: PathTypes\n  nameWithType: GraphicsPath.PathTypes\n- uid: System.Drawing.Drawing2D.GraphicsPath.PointCount*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: PointCount\n  nameWithType: GraphicsPath.PointCount\n- uid: System.Drawing.Drawing2D.GraphicsPath.Reset*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Reset\n  nameWithType: GraphicsPath.Reset\n- uid: System.Drawing.Drawing2D.GraphicsPath.Reverse*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Reverse\n  nameWithType: GraphicsPath.Reverse\n- uid: System.Drawing.Drawing2D.GraphicsPath.SetMarkers*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: SetMarkers\n  nameWithType: GraphicsPath.SetMarkers\n- uid: System.Drawing.Drawing2D.GraphicsPath.StartFigure*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: StartFigure\n  nameWithType: GraphicsPath.StartFigure\n- uid: System.Drawing.Drawing2D.GraphicsPath.Transform*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Transform\n  nameWithType: GraphicsPath.Transform\n- uid: System.Drawing.Drawing2D.GraphicsPath.Warp*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Warp\n  nameWithType: GraphicsPath.Warp\n- uid: System.Drawing.Drawing2D.GraphicsPath.Widen*\n  parent: System.Drawing.Drawing2D.GraphicsPath\n  isExternal: false\n  name: Widen\n  nameWithType: GraphicsPath.Widen\n"}