{"nodes":[{"pos":[1891,1984],"content":"Represents the abstract base class from which all implementations of code groups must derive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the abstract base class from which all implementations of code groups must derive.","pos":[0,93]}]},{"pos":[1997,2667],"content":"Code groups are the building blocks of code access security policy. Each policy level consists of a root code group that can have child code groups. Each child code group can have their own child code groups; this behavior extends to any number of levels, forming a tree. Each code group has a membership condition that determines if a given assembly belongs to it based on the evidence for that assembly.       Only those code groups whose membership conditions match a given assembly's evidence will be applied. If a matching code group has child code groups, then those children whose membership conditions also match the supplied evidence will likewise be applied.","needQuote":false,"needEscape":true,"nodes":[{"content":"Code groups are the building blocks of code access security policy. Each policy level consists of a root code group that can have child code groups. Each child code group can have their own child code groups; this behavior extends to any number of levels, forming a tree. Each code group has a membership condition that determines if a given assembly belongs to it based on the evidence for that assembly.       Only those code groups whose membership conditions match a given assembly's evidence will be applied. If a matching code group has child code groups, then those children whose membership conditions also match the supplied evidence will likewise be applied.","pos":[0,668],"nodes":[{"content":"Code groups are the building blocks of code access security policy.","pos":[0,67]},{"content":"Each policy level consists of a root code group that can have child code groups.","pos":[68,148]},{"content":"Each child code group can have their own child code groups; this behavior extends to any number of levels, forming a tree.","pos":[149,271]},{"content":"Each code group has a membership condition that determines if a given assembly belongs to it based on the evidence for that assembly.","pos":[272,405]},{"content":"Only those code groups whose membership conditions match a given assembly's evidence will be applied.","pos":[412,513]},{"content":"If a matching code group has child code groups, then those children whose membership conditions also match the supplied evidence will likewise be applied.","pos":[514,668]}]}]},{"pos":[3494,3578],"content":"Initializes a new instance of <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.CodeGroup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of <xref href=\"System.Security.Policy.CodeGroup\"></xref>."},{"pos":[3590,3799],"content":"This constructor creates a basic code group and should be called from the constructors of custom code groups. You can add child code groups using the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor creates a basic code group and should be called from the constructors of custom code groups. You can add child code groups using the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method.","pos":[0,209],"nodes":[{"content":"This constructor creates a basic code group and should be called from the constructors of custom code groups.","pos":[0,109]},{"content":"You can add child code groups using the &lt;xref:System.Security.Policy.CodeGroup.AddChild%2A&gt; method.","pos":[110,209],"source":" You can add child code groups using the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method."}]}]},{"pos":[4078,4173],"content":"A membership condition that tests evidence to determine whether this code group applies policy.","needQuote":true,"needEscape":true,"nodes":[{"content":"A membership condition that tests evidence to determine whether this code group applies policy.","pos":[0,95]}]},{"pos":[4261,4400],"content":"The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.","needQuote":true,"needEscape":true,"nodes":[{"content":"The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.","pos":[0,139]}]},{"pos":[4569,4680],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">membershipCondition</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>membershipCondition</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[4776,4929],"content":"The type of the <code>membershipCondition</code> parameter is not valid.       -or-       The type of the <code>policy</code> parameter is not valid.","needQuote":false,"needEscape":true,"nodes":[{"content":"The type of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">membershipCondition</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","pos":[0,72],"source":"The type of the <code>membershipCondition</code> parameter is not valid."},{"content":"-or-       The type of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","pos":[79,149],"source":"       -or-       The type of the <code>policy</code> parameter is not valid."}]},{"pos":[5377,5427],"content":"Adds a child code group to the current code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a child code group to the current code group.","pos":[0,50]}]},{"pos":[5610,5707],"content":"The code group to be added as a child. This new child code group is added to the end of the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code group to be added as a child. This new child code group is added to the end of the list.","pos":[0,97],"nodes":[{"content":"The code group to be added as a child.","pos":[0,38]},{"content":"This new child code group is added to the end of the list.","pos":[39,97]}]}]},{"pos":[5879,5976],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">group</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>group</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6071,6130],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">group</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid code group.","needQuote":true,"needEscape":true,"source":"The <code>group</code> parameter is not a valid code group."},{"pos":[6513,6603],"content":"Gets a string representation of the attributes of the policy statement for the code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a string representation of the attributes of the policy statement for the code group.","pos":[0,90]}]},{"pos":[6615,6658],"content":"The string representation is not localized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string representation is not localized.","pos":[0,43]}]},{"pos":[6786,6871],"content":"A string representation of the attributes of the policy statement for the code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representation of the attributes of the policy statement for the code group.","pos":[0,85]}]},{"pos":[7298,7368],"content":"Gets or sets an ordered list of the child code groups of a code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an ordered list of the child code groups of a code group.","pos":[0,70]}]},{"pos":[7381,7656],"content":"The order of child code groups is significant for certain code groups.      > [!NOTE] >  The return value is a copy of the child code list. Do not use the returned list to add a child code group; instead, use the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The order of child code groups is significant for certain code groups.","pos":[0,70]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The return value is a copy of the child code list.","pos":[76,139],"source":"      > [!NOTE] >  The return value is a copy of the child code list."},{"content":"Do not use the returned list to add a child code group; instead, use the &lt;xref:System.Security.Policy.CodeGroup.AddChild%2A&gt; method.","pos":[140,272],"source":" Do not use the returned list to add a child code group; instead, use the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method."}]},{"pos":[7804,7832],"content":"A list of child code groups.","needQuote":true,"needEscape":true,"nodes":[{"content":"A list of child code groups.","pos":[0,28]}]},{"pos":[8004,8108],"content":"An attempt is made to set this property to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An attempt is made to set this property to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8203,8342],"content":"An attempt is made to set this property with a list of children that are not <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.CodeGroup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"An attempt is made to set this property with a list of children that are not <xref href=\"System.Security.Policy.CodeGroup\"></xref> objects."},{"pos":[8674,8754],"content":"When overridden in a derived class, makes a deep copy of the current code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, makes a deep copy of the current code group.","pos":[0,80]}]},{"pos":[8766,8883],"content":"This method makes a deep copy of the code group, so that copies of all objects the code group contains are also made.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method makes a deep copy of the code group, so that copies of all objects the code group contains are also made.","pos":[0,117]}]},{"pos":[9060,9164],"content":"An equivalent copy of the current code group, including its membership conditions and child code groups.","needQuote":true,"needEscape":true,"nodes":[{"content":"An equivalent copy of the current code group, including its membership conditions and child code groups.","pos":[0,104]}]},{"pos":[9806,10013],"content":"When overridden in a derived class, serializes properties and internal state specific to a derived code group and adds the serialization to the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, serializes properties and internal state specific to a derived code group and adds the serialization to the specified <xref href=\"System.Security.SecurityElement\"></xref>."},{"pos":[10026,10635],"content":"<xref:System.Security.Policy.CodeGroup.ToXml%2A> cannot be overridden. If you need to serialize members specific to a particular implementation of <xref:System.Security.Policy.CodeGroup>, you must override CreateXml and serialize your members there. When the code group is serialized, <xref:System.Security.Policy.CodeGroup.ToXml%2A> calls CreateXml and adds your serialization to the <xref:System.Security.SecurityElement> created by <xref:System.Security.Policy.CodeGroup.ToXml%2A>.       The XML created using this method is deserialized by the <xref:System.Security.Policy.CodeGroup.ParseXml%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref:System.Security.Policy.CodeGroup.ToXml%2A> cannot be overridden. If you need to serialize members specific to a particular implementation of <xref:System.Security.Policy.CodeGroup>, you must override CreateXml and serialize your members there. When the code group is serialized, <xref:System.Security.Policy.CodeGroup.ToXml%2A> calls CreateXml and adds your serialization to the <xref:System.Security.SecurityElement> created by <xref:System.Security.Policy.CodeGroup.ToXml%2A>.       The XML created using this method is deserialized by the <xref:System.Security.Policy.CodeGroup.ParseXml%2A> method.","pos":[0,607],"nodes":[{"content":"&lt;xref:System.Security.Policy.CodeGroup.ToXml%2A&gt; cannot be overridden.","pos":[0,70],"source":"<xref:System.Security.Policy.CodeGroup.ToXml%2A> cannot be overridden."},{"content":"If you need to serialize members specific to a particular implementation of &lt;xref:System.Security.Policy.CodeGroup&gt;, you must override CreateXml and serialize your members there.","pos":[71,249],"source":" If you need to serialize members specific to a particular implementation of <xref:System.Security.Policy.CodeGroup>, you must override CreateXml and serialize your members there."},{"content":"When the code group is serialized, &lt;xref:System.Security.Policy.CodeGroup.ToXml%2A&gt; calls CreateXml and adds your serialization to the &lt;xref:System.Security.SecurityElement&gt; created by &lt;xref:System.Security.Policy.CodeGroup.ToXml%2A&gt;.","pos":[250,484],"source":" When the code group is serialized, <xref:System.Security.Policy.CodeGroup.ToXml%2A> calls CreateXml and adds your serialization to the <xref:System.Security.SecurityElement> created by <xref:System.Security.Policy.CodeGroup.ToXml%2A>."},{"content":"The XML created using this method is deserialized by the &lt;xref:System.Security.Policy.CodeGroup.ParseXml%2A&gt; method.","pos":[491,607],"source":"       The XML created using this method is deserialized by the <xref:System.Security.Policy.CodeGroup.ParseXml%2A> method."}]}]},{"pos":[10875,10926],"content":"The XML encoding to which to add the serialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML encoding to which to add the serialization.","pos":[0,51]}]},{"pos":[11009,11061],"content":"The policy level within which the code group exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"The policy level within which the code group exists.","pos":[0,52]}]},{"pos":[11497,11544],"content":"Gets or sets the description of the code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the description of the code group.","pos":[0,47]}]},{"pos":[11665,11699],"content":"The description of the code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"The description of the code group.","pos":[0,34]}]},{"pos":[12164,12248],"content":"Determines whether the specified code group is equivalent to the current code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified code group is equivalent to the current code group.","pos":[0,84]}]},{"pos":[12261,12570],"content":"Two code groups are equivalent if they have the same <xref:System.Security.Policy.CodeGroup.Name%2A>, <xref:System.Security.Policy.CodeGroup.Description%2A>, and <xref:System.Security.Policy.CodeGroup.MembershipCondition%2A>.       This method tests the top-level code group only, not its child code groups.","needQuote":false,"needEscape":true,"nodes":[{"content":"Two code groups are equivalent if they have the same <xref:System.Security.Policy.CodeGroup.Name%2A>, <xref:System.Security.Policy.CodeGroup.Description%2A>, and <xref:System.Security.Policy.CodeGroup.MembershipCondition%2A>.       This method tests the top-level code group only, not its child code groups.","pos":[0,307],"nodes":[{"content":"Two code groups are equivalent if they have the same &lt;xref:System.Security.Policy.CodeGroup.Name%2A&gt;, &lt;xref:System.Security.Policy.CodeGroup.Description%2A&gt;, and &lt;xref:System.Security.Policy.CodeGroup.MembershipCondition%2A&gt;.","pos":[0,225],"source":"Two code groups are equivalent if they have the same <xref:System.Security.Policy.CodeGroup.Name%2A>, <xref:System.Security.Policy.CodeGroup.Description%2A>, and <xref:System.Security.Policy.CodeGroup.MembershipCondition%2A>."},{"content":"This method tests the top-level code group only, not its child code groups.","pos":[232,307]}]}]},{"pos":[12708,12762],"content":"The code group to compare with the current code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code group to compare with the current code group.","pos":[0,54]}]},{"pos":[12821,13025],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified code group is equivalent to the current code group; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified code group is equivalent to the current code group; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13586,13724],"content":"Determines whether the specified code group is equivalent to the current code group, checking the child code groups as well, if specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified code group is equivalent to the current code group, checking the child code groups as well, if specified.","pos":[0,138]}]},{"pos":[13737,14182],"content":"Two code groups are equivalent if they have the same <xref:System.Security.Policy.CodeGroup.Name%2A>, <xref:System.Security.Policy.CodeGroup.Description%2A>, and <xref:System.Security.Policy.CodeGroup.MembershipCondition%2A>.       If the `compareChildren` parameter is `true`, this method will only return `true` if the current code group and all its child code groups are equivalent to the specified code group and all its child code groups.","needQuote":false,"needEscape":true,"nodes":[{"content":"Two code groups are equivalent if they have the same &lt;xref:System.Security.Policy.CodeGroup.Name%2A&gt;, &lt;xref:System.Security.Policy.CodeGroup.Description%2A&gt;, and &lt;xref:System.Security.Policy.CodeGroup.MembershipCondition%2A&gt;.","pos":[0,225],"source":"Two code groups are equivalent if they have the same <xref:System.Security.Policy.CodeGroup.Name%2A>, <xref:System.Security.Policy.CodeGroup.Description%2A>, and <xref:System.Security.Policy.CodeGroup.MembershipCondition%2A>."},{"content":"If the <ph id=\"ph1\">`compareChildren`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method will only return <ph id=\"ph3\">`true`</ph> if the current code group and all its child code groups are equivalent to the specified code group and all its child code groups.","pos":[232,443],"source":"       If the `compareChildren` parameter is `true`, this method will only return `true` if the current code group and all its child code groups are equivalent to the specified code group and all its child code groups."}]},{"pos":[14380,14434],"content":"The code group to compare with the current code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code group to compare with the current code group.","pos":[0,54]}]},{"pos":[14507,14681],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare child code groups, as well; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to compare child code groups, as well; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14740,14944],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified code group is equivalent to the current code group; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified code group is equivalent to the current code group; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15472,15543],"content":"Reconstructs a security object with a given state from an XML encoding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reconstructs a security object with a given state from an XML encoding.","pos":[0,71]}]},{"pos":[15715,15774],"content":"The XML encoding to use to reconstruct the security object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML encoding to use to reconstruct the security object.","pos":[0,59]}]},{"pos":[15945,16038],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">e</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>e</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[16602,16690],"content":"Reconstructs a security object with a given state and policy level from an XML encoding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reconstructs a security object with a given state and policy level from an XML encoding.","pos":[0,88]}]},{"pos":[16702,16779],"content":"The policy level context is provided for resolution of named permission sets.","needQuote":true,"needEscape":true,"nodes":[{"content":"The policy level context is provided for resolution of named permission sets.","pos":[0,77]}]},{"pos":[16993,17052],"content":"The XML encoding to use to reconstruct the security object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML encoding to use to reconstruct the security object.","pos":[0,59]}]},{"pos":[17135,17187],"content":"The policy level within which the code group exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"The policy level within which the code group exists.","pos":[0,52]}]},{"pos":[17358,17451],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">e</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>e</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[17818,17863],"content":"Gets the hash code of the current code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the hash code of the current code group.","pos":[0,45]}]},{"pos":[17998,18038],"content":"The hash code of the current code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash code of the current code group.","pos":[0,40]}]},{"pos":[18516,18567],"content":"Gets or sets the code group's membership condition.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the code group's membership condition.","pos":[0,51]}]},{"pos":[18579,18681],"content":"A membership condition tests evidence and returns a Boolean value that tells whether there is a match.","needQuote":true,"needEscape":true,"nodes":[{"content":"A membership condition tests evidence and returns a Boolean value that tells whether there is a match.","pos":[0,102]}]},{"pos":[18877,18965],"content":"The membership condition that determines to which evidence the code group is applicable.","needQuote":true,"needEscape":true,"nodes":[{"content":"The membership condition that determines to which evidence the code group is applicable.","pos":[0,88]}]},{"pos":[19148,19253],"content":"An attempt is made to set this parameter to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An attempt is made to set this parameter to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19611,19687],"content":"When overridden in a derived class, gets the merge logic for the code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets the merge logic for the code group.","pos":[0,76]}]},{"pos":[19811,19863],"content":"A description of the merge logic for the code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"A description of the merge logic for the code group.","pos":[0,52]}]},{"pos":[20265,20305],"content":"Gets or sets the name of the code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the code group.","pos":[0,40]}]},{"pos":[20419,20446],"content":"The name of the code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the code group.","pos":[0,27]}]},{"pos":[21083,21267],"content":"When overridden in a derived class, reconstructs properties and internal state specific to a derived code group from the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, reconstructs properties and internal state specific to a derived code group from the specified <xref href=\"System.Security.SecurityElement\"></xref>."},{"pos":[21280,21821],"content":"<xref:System.Security.Policy.CodeGroup.FromXml%2A> cannot be overridden. If you need to deserialize members specific to a particular implementation of <xref:System.Security.Policy.CodeGroup>, you must override ParseXml and deserialize your members there. When the code group is deserialized, <xref:System.Security.Policy.CodeGroup.FromXml%2A> calls ParseXml and reconstructs your members from the <xref:System.Security.SecurityElement>.       This method deserializes XML created using <xref:System.Security.Policy.CodeGroup.CreateXml%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref:System.Security.Policy.CodeGroup.FromXml%2A> cannot be overridden. If you need to deserialize members specific to a particular implementation of <xref:System.Security.Policy.CodeGroup>, you must override ParseXml and deserialize your members there. When the code group is deserialized, <xref:System.Security.Policy.CodeGroup.FromXml%2A> calls ParseXml and reconstructs your members from the <xref:System.Security.SecurityElement>.       This method deserializes XML created using <xref:System.Security.Policy.CodeGroup.CreateXml%2A>.","pos":[0,539],"nodes":[{"content":"&lt;xref:System.Security.Policy.CodeGroup.FromXml%2A&gt; cannot be overridden.","pos":[0,72],"source":"<xref:System.Security.Policy.CodeGroup.FromXml%2A> cannot be overridden."},{"content":"If you need to deserialize members specific to a particular implementation of &lt;xref:System.Security.Policy.CodeGroup&gt;, you must override ParseXml and deserialize your members there.","pos":[73,254],"source":" If you need to deserialize members specific to a particular implementation of <xref:System.Security.Policy.CodeGroup>, you must override ParseXml and deserialize your members there."},{"content":"When the code group is deserialized, &lt;xref:System.Security.Policy.CodeGroup.FromXml%2A&gt; calls ParseXml and reconstructs your members from the &lt;xref:System.Security.SecurityElement&gt;.","pos":[255,436],"source":" When the code group is deserialized, <xref:System.Security.Policy.CodeGroup.FromXml%2A> calls ParseXml and reconstructs your members from the <xref:System.Security.SecurityElement>."},{"content":"This method deserializes XML created using &lt;xref:System.Security.Policy.CodeGroup.CreateXml%2A&gt;.","pos":[443,539],"source":"       This method deserializes XML created using <xref:System.Security.Policy.CodeGroup.CreateXml%2A>."}]}]},{"pos":[22048,22107],"content":"The XML encoding to use to reconstruct the security object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML encoding to use to reconstruct the security object.","pos":[0,59]}]},{"pos":[22190,22242],"content":"The policy level within which the code group exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"The policy level within which the code group exists.","pos":[0,52]}]},{"pos":[22707,22768],"content":"Gets the name of the named permission set for the code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the named permission set for the code group.","pos":[0,61]}]},{"pos":[22780,22861],"content":"This property can be <ph id=\"ph1\">`null`</ph> if the code group contains an unnamed permission set.","needQuote":true,"needEscape":true,"source":"This property can be `null` if the code group contains an unnamed permission set."},{"pos":[22991,23046],"content":"The name of a named permission set of the policy level.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of a named permission set of the policy level.","pos":[0,55]}]},{"pos":[23510,23575],"content":"Gets or sets the policy statement associated with the code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the policy statement associated with the code group.","pos":[0,65]}]},{"pos":[23588,23774],"content":"The policy statement applies to code in assemblies when evidence matches the membership condition.       This property can also be set by passing a policy statement to the constructor.","needQuote":false,"needEscape":true,"nodes":[{"content":"The policy statement applies to code in assemblies when evidence matches the membership condition.       This property can also be set by passing a policy statement to the constructor.","pos":[0,184],"nodes":[{"content":"The policy statement applies to code in assemblies when evidence matches the membership condition.","pos":[0,98]},{"content":"This property can also be set by passing a policy statement to the constructor.","pos":[105,184]}]}]},{"pos":[24427,24467],"content":"The policy statement for the code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"The policy statement for the code group.","pos":[0,40]}]},{"pos":[25008,25047],"content":"Removes the specified child code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the specified child code group.","pos":[0,39]}]},{"pos":[25059,25124],"content":"Only immediate child code groups can be removed with this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Only immediate child code groups can be removed with this method.","pos":[0,65]}]},{"pos":[25310,25350],"content":"The code group to be removed as a child.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code group to be removed as a child.","pos":[0,40]}]},{"pos":[25517,25613],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">group</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not an immediate child code group of the current code group.","needQuote":true,"needEscape":true,"source":"The <code>group</code> parameter is not an immediate child code group of the current code group."},{"pos":[26050,26163],"content":"When overridden in a derived class, resolves policy for the code group and its descendants for a set of evidence.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, resolves policy for the code group and its descendants for a set of evidence.","pos":[0,113]}]},{"pos":[26176,27066],"content":"Given evidence for an assembly to be loaded, this method evaluates the code group by checking the membership condition against the specified evidence. If there is a match, this method returns a policy statement for the code group, including evaluation of child code groups.       For a <xref:System.Security.Policy.UnionCodeGroup>, all child code groups whose membership condition match the specified evidence are also resolved, and all resulting policy statements are combined with the policy statement of the parent union code group. Each child code group type determines how all child groups under it are applied, depending on how the Resolve methods of these child groups work.       The .NET Framework security system uses Resolve on the policy levels to determine which permissions to grant to loaded code from the resulting policy statements and the code request on the assembly.","needQuote":false,"needEscape":true,"nodes":[{"content":"Given evidence for an assembly to be loaded, this method evaluates the code group by checking the membership condition against the specified evidence. If there is a match, this method returns a policy statement for the code group, including evaluation of child code groups.       For a <xref:System.Security.Policy.UnionCodeGroup>, all child code groups whose membership condition match the specified evidence are also resolved, and all resulting policy statements are combined with the policy statement of the parent union code group. Each child code group type determines how all child groups under it are applied, depending on how the Resolve methods of these child groups work.       The .NET Framework security system uses Resolve on the policy levels to determine which permissions to grant to loaded code from the resulting policy statements and the code request on the assembly.","pos":[0,886],"nodes":[{"content":"Given evidence for an assembly to be loaded, this method evaluates the code group by checking the membership condition against the specified evidence.","pos":[0,150]},{"content":"If there is a match, this method returns a policy statement for the code group, including evaluation of child code groups.","pos":[151,273]},{"content":"For a &lt;xref:System.Security.Policy.UnionCodeGroup&gt;, all child code groups whose membership condition match the specified evidence are also resolved, and all resulting policy statements are combined with the policy statement of the parent union code group.","pos":[280,535],"source":"       For a <xref:System.Security.Policy.UnionCodeGroup>, all child code groups whose membership condition match the specified evidence are also resolved, and all resulting policy statements are combined with the policy statement of the parent union code group."},{"content":"Each child code group type determines how all child groups under it are applied, depending on how the Resolve methods of these child groups work.","pos":[536,681]},{"content":"The .NET Framework security system uses Resolve on the policy levels to determine which permissions to grant to loaded code from the resulting policy statements and the code request on the assembly.","pos":[688,886]}]}]},{"pos":[27296,27326],"content":"The evidence for the assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"The evidence for the assembly.","pos":[0,30]}]},{"pos":[27409,27675],"content":"A policy statement that consists of the permissions granted by the code group with optional attributes, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the code group does not apply (the membership condition does not match the specified evidence).","needQuote":true,"needEscape":true,"source":"A policy statement that consists of the permissions granted by the code group with optional attributes, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the code group does not apply (the membership condition does not match the specified evidence)."},{"pos":[28273,28339],"content":"When overridden in a derived class, resolves matching code groups.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, resolves matching code groups.","pos":[0,66]}]},{"pos":[28351,28658],"content":"This method has the same evaluation characteristics as <xref:System.Security.Policy.CodeGroup.Resolve%2A>. The code group that is returned contains child code groups, which in turn can have child code groups as necessary to reflect the complete set of code groups that were matched by the evidence provided.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method has the same evaluation characteristics as <xref:System.Security.Policy.CodeGroup.Resolve%2A>. The code group that is returned contains child code groups, which in turn can have child code groups as necessary to reflect the complete set of code groups that were matched by the evidence provided.","pos":[0,307],"nodes":[{"content":"This method has the same evaluation characteristics as &lt;xref:System.Security.Policy.CodeGroup.Resolve%2A&gt;.","pos":[0,106],"source":"This method has the same evaluation characteristics as <xref:System.Security.Policy.CodeGroup.Resolve%2A>."},{"content":"The code group that is returned contains child code groups, which in turn can have child code groups as necessary to reflect the complete set of code groups that were matched by the evidence provided.","pos":[107,307]}]}]},{"pos":[28899,28929],"content":"The evidence for the assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"The evidence for the assembly.","pos":[0,30]}]},{"pos":[29006,29115],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.CodeGroup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is the root of the tree of matching code groups.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Policy.CodeGroup\"></xref> that is the root of the tree of matching code groups."},{"pos":[29541,29610],"content":"Creates an XML encoding of the security object and its current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an XML encoding of the security object and its current state.","pos":[0,69]}]},{"pos":[29777,29849],"content":"An XML encoding of the security object, including any state information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML encoding of the security object, including any state information.","pos":[0,72]}]},{"pos":[30360,30477],"content":"Creates an XML encoding of the security object, its current state, and the policy level within which the code exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an XML encoding of the security object, its current state, and the policy level within which the code exists.","pos":[0,117]}]},{"pos":[30489,30566],"content":"The policy level context is provided for resolution of named permission sets.","needQuote":true,"needEscape":true,"nodes":[{"content":"The policy level context is provided for resolution of named permission sets.","pos":[0,77]}]},{"pos":[30777,30829],"content":"The policy level within which the code group exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"The policy level within which the code group exists.","pos":[0,52]}]},{"pos":[30905,30977],"content":"An XML encoding of the security object, including any state information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML encoding of the security object, including any state information.","pos":[0,72]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Policy.CodeGroup\n  id: CodeGroup\n  children:\n  - System.Security.Policy.CodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)\n  - System.Security.Policy.CodeGroup.AddChild(System.Security.Policy.CodeGroup)\n  - System.Security.Policy.CodeGroup.AttributeString\n  - System.Security.Policy.CodeGroup.Children\n  - System.Security.Policy.CodeGroup.Copy\n  - System.Security.Policy.CodeGroup.CreateXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  - System.Security.Policy.CodeGroup.Description\n  - System.Security.Policy.CodeGroup.Equals(System.Object)\n  - System.Security.Policy.CodeGroup.Equals(System.Security.Policy.CodeGroup,System.Boolean)\n  - System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement)\n  - System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  - System.Security.Policy.CodeGroup.GetHashCode\n  - System.Security.Policy.CodeGroup.MembershipCondition\n  - System.Security.Policy.CodeGroup.MergeLogic\n  - System.Security.Policy.CodeGroup.Name\n  - System.Security.Policy.CodeGroup.ParseXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  - System.Security.Policy.CodeGroup.PermissionSetName\n  - System.Security.Policy.CodeGroup.PolicyStatement\n  - System.Security.Policy.CodeGroup.RemoveChild(System.Security.Policy.CodeGroup)\n  - System.Security.Policy.CodeGroup.Resolve(System.Security.Policy.Evidence)\n  - System.Security.Policy.CodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)\n  - System.Security.Policy.CodeGroup.ToXml\n  - System.Security.Policy.CodeGroup.ToXml(System.Security.Policy.PolicyLevel)\n  langs:\n  - csharp\n  name: CodeGroup\n  nameWithType: CodeGroup\n  fullName: System.Security.Policy.CodeGroup\n  type: Class\n  summary: Represents the abstract base class from which all implementations of code groups must derive.\n  remarks: \"Code groups are the building blocks of code access security policy. Each policy level consists of a root code group that can have child code groups. Each child code group can have their own child code groups; this behavior extends to any number of levels, forming a tree. Each code group has a membership condition that determines if a given assembly belongs to it based on the evidence for that assembly.  \\n  \\n Only those code groups whose membership conditions match a given assembly's evidence will be applied. If a matching code group has child code groups, then those children whose membership conditions also match the supplied evidence will likewise be applied.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class CodeGroup\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)\n  id: '#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)'\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: CodeGroup(IMembershipCondition,PolicyStatement)\n  nameWithType: CodeGroup.CodeGroup(IMembershipCondition,PolicyStatement)\n  fullName: System.Security.Policy.CodeGroup.CodeGroup(IMembershipCondition,PolicyStatement)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Initializes a new instance of <xref href=\"System.Security.Policy.CodeGroup\"></xref>.\n  remarks: This constructor creates a basic code group and should be called from the constructors of custom code groups. You can add child code groups using the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method.\n  syntax:\n    content: protected CodeGroup (System.Security.Policy.IMembershipCondition membershipCondition, System.Security.Policy.PolicyStatement policy);\n    parameters:\n    - id: membershipCondition\n      type: System.Security.Policy.IMembershipCondition\n      description: A membership condition that tests evidence to determine whether this code group applies policy.\n    - id: policy\n      type: System.Security.Policy.PolicyStatement\n      description: The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.\n  overload: System.Security.Policy.CodeGroup.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>membershipCondition</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The type of the <code>membershipCondition</code> parameter is not valid.  \\n  \\n -or-  \\n  \\n The type of the <code>policy</code> parameter is not valid.\"\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.AddChild(System.Security.Policy.CodeGroup)\n  id: AddChild(System.Security.Policy.CodeGroup)\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: AddChild(CodeGroup)\n  nameWithType: CodeGroup.AddChild(CodeGroup)\n  fullName: System.Security.Policy.CodeGroup.AddChild(CodeGroup)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Adds a child code group to the current code group.\n  syntax:\n    content: public void AddChild (System.Security.Policy.CodeGroup group);\n    parameters:\n    - id: group\n      type: System.Security.Policy.CodeGroup\n      description: The code group to be added as a child. This new child code group is added to the end of the list.\n  overload: System.Security.Policy.CodeGroup.AddChild*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>group</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>group</code> parameter is not a valid code group.\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.AttributeString\n  id: AttributeString\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: AttributeString\n  nameWithType: CodeGroup.AttributeString\n  fullName: System.Security.Policy.CodeGroup.AttributeString\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets a string representation of the attributes of the policy statement for the code group.\n  remarks: The string representation is not localized.\n  syntax:\n    content: public virtual string AttributeString { get; }\n    return:\n      type: System.String\n      description: A string representation of the attributes of the policy statement for the code group.\n  overload: System.Security.Policy.CodeGroup.AttributeString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.Children\n  id: Children\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: Children\n  nameWithType: CodeGroup.Children\n  fullName: System.Security.Policy.CodeGroup.Children\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets or sets an ordered list of the child code groups of a code group.\n  remarks: \"The order of child code groups is significant for certain code groups.  \\n  \\n> [!NOTE]\\n>  The return value is a copy of the child code list. Do not use the returned list to add a child code group; instead, use the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method.\"\n  syntax:\n    content: public System.Collections.IList Children { get; set; }\n    return:\n      type: System.Collections.IList\n      description: A list of child code groups.\n  overload: System.Security.Policy.CodeGroup.Children*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: An attempt is made to set this property to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An attempt is made to set this property with a list of children that are not <xref href=\"System.Security.Policy.CodeGroup\"></xref> objects.\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.Copy\n  id: Copy\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: CodeGroup.Copy()\n  fullName: System.Security.Policy.CodeGroup.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: When overridden in a derived class, makes a deep copy of the current code group.\n  remarks: This method makes a deep copy of the code group, so that copies of all objects the code group contains are also made.\n  syntax:\n    content: public abstract System.Security.Policy.CodeGroup Copy ();\n    parameters: []\n    return:\n      type: System.Security.Policy.CodeGroup\n      description: An equivalent copy of the current code group, including its membership conditions and child code groups.\n  overload: System.Security.Policy.CodeGroup.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.CreateXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  id: CreateXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: CreateXml(SecurityElement,PolicyLevel)\n  nameWithType: CodeGroup.CreateXml(SecurityElement,PolicyLevel)\n  fullName: System.Security.Policy.CodeGroup.CreateXml(SecurityElement,PolicyLevel)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: When overridden in a derived class, serializes properties and internal state specific to a derived code group and adds the serialization to the specified <xref href=\"System.Security.SecurityElement\"></xref>.\n  remarks: \"<xref:System.Security.Policy.CodeGroup.ToXml%2A> cannot be overridden. If you need to serialize members specific to a particular implementation of <xref:System.Security.Policy.CodeGroup>, you must override CreateXml and serialize your members there. When the code group is serialized, <xref:System.Security.Policy.CodeGroup.ToXml%2A> calls CreateXml and adds your serialization to the <xref:System.Security.SecurityElement> created by <xref:System.Security.Policy.CodeGroup.ToXml%2A>.  \\n  \\n The XML created using this method is deserialized by the <xref:System.Security.Policy.CodeGroup.ParseXml%2A> method.\"\n  syntax:\n    content: protected virtual void CreateXml (System.Security.SecurityElement element, System.Security.Policy.PolicyLevel level);\n    parameters:\n    - id: element\n      type: System.Security.SecurityElement\n      description: The XML encoding to which to add the serialization.\n    - id: level\n      type: System.Security.Policy.PolicyLevel\n      description: The policy level within which the code group exists.\n  overload: System.Security.Policy.CodeGroup.CreateXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.Description\n  id: Description\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: Description\n  nameWithType: CodeGroup.Description\n  fullName: System.Security.Policy.CodeGroup.Description\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets or sets the description of the code group.\n  syntax:\n    content: public string Description { get; set; }\n    return:\n      type: System.String\n      description: The description of the code group.\n  overload: System.Security.Policy.CodeGroup.Description*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: CodeGroup.Equals(Object)\n  fullName: System.Security.Policy.CodeGroup.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Determines whether the specified code group is equivalent to the current code group.\n  remarks: \"Two code groups are equivalent if they have the same <xref:System.Security.Policy.CodeGroup.Name%2A>, <xref:System.Security.Policy.CodeGroup.Description%2A>, and <xref:System.Security.Policy.CodeGroup.MembershipCondition%2A>.  \\n  \\n This method tests the top-level code group only, not its child code groups.\"\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The code group to compare with the current code group.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified code group is equivalent to the current code group; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Policy.CodeGroup.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.Equals(System.Security.Policy.CodeGroup,System.Boolean)\n  id: Equals(System.Security.Policy.CodeGroup,System.Boolean)\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: Equals(CodeGroup,Boolean)\n  nameWithType: CodeGroup.Equals(CodeGroup,Boolean)\n  fullName: System.Security.Policy.CodeGroup.Equals(CodeGroup,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Determines whether the specified code group is equivalent to the current code group, checking the child code groups as well, if specified.\n  remarks: \"Two code groups are equivalent if they have the same <xref:System.Security.Policy.CodeGroup.Name%2A>, <xref:System.Security.Policy.CodeGroup.Description%2A>, and <xref:System.Security.Policy.CodeGroup.MembershipCondition%2A>.  \\n  \\n If the `compareChildren` parameter is `true`, this method will only return `true` if the current code group and all its child code groups are equivalent to the specified code group and all its child code groups.\"\n  syntax:\n    content: public bool Equals (System.Security.Policy.CodeGroup cg, bool compareChildren);\n    parameters:\n    - id: cg\n      type: System.Security.Policy.CodeGroup\n      description: The code group to compare with the current code group.\n    - id: compareChildren\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to compare child code groups, as well; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified code group is equivalent to the current code group; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Policy.CodeGroup.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: CodeGroup.FromXml(SecurityElement)\n  fullName: System.Security.Policy.CodeGroup.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Reconstructs a security object with a given state from an XML encoding.\n  syntax:\n    content: public void FromXml (System.Security.SecurityElement e);\n    parameters:\n    - id: e\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the security object.\n  overload: System.Security.Policy.CodeGroup.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>e</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  id: FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: FromXml(SecurityElement,PolicyLevel)\n  nameWithType: CodeGroup.FromXml(SecurityElement,PolicyLevel)\n  fullName: System.Security.Policy.CodeGroup.FromXml(SecurityElement,PolicyLevel)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Reconstructs a security object with a given state and policy level from an XML encoding.\n  remarks: The policy level context is provided for resolution of named permission sets.\n  syntax:\n    content: public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);\n    parameters:\n    - id: e\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the security object.\n    - id: level\n      type: System.Security.Policy.PolicyLevel\n      description: The policy level within which the code group exists.\n  overload: System.Security.Policy.CodeGroup.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>e</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: CodeGroup.GetHashCode()\n  fullName: System.Security.Policy.CodeGroup.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets the hash code of the current code group.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code of the current code group.\n  overload: System.Security.Policy.CodeGroup.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.MembershipCondition\n  id: MembershipCondition\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: MembershipCondition\n  nameWithType: CodeGroup.MembershipCondition\n  fullName: System.Security.Policy.CodeGroup.MembershipCondition\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets or sets the code group's membership condition.\n  remarks: A membership condition tests evidence and returns a Boolean value that tells whether there is a match.\n  syntax:\n    content: public System.Security.Policy.IMembershipCondition MembershipCondition { get; set; }\n    return:\n      type: System.Security.Policy.IMembershipCondition\n      description: The membership condition that determines to which evidence the code group is applicable.\n  overload: System.Security.Policy.CodeGroup.MembershipCondition*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: An attempt is made to set this parameter to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.MergeLogic\n  id: MergeLogic\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: MergeLogic\n  nameWithType: CodeGroup.MergeLogic\n  fullName: System.Security.Policy.CodeGroup.MergeLogic\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: When overridden in a derived class, gets the merge logic for the code group.\n  syntax:\n    content: public abstract string MergeLogic { get; }\n    return:\n      type: System.String\n      description: A description of the merge logic for the code group.\n  overload: System.Security.Policy.CodeGroup.MergeLogic*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.Name\n  id: Name\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: Name\n  nameWithType: CodeGroup.Name\n  fullName: System.Security.Policy.CodeGroup.Name\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets or sets the name of the code group.\n  syntax:\n    content: public string Name { get; set; }\n    return:\n      type: System.String\n      description: The name of the code group.\n  overload: System.Security.Policy.CodeGroup.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.ParseXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  id: ParseXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: ParseXml(SecurityElement,PolicyLevel)\n  nameWithType: CodeGroup.ParseXml(SecurityElement,PolicyLevel)\n  fullName: System.Security.Policy.CodeGroup.ParseXml(SecurityElement,PolicyLevel)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: When overridden in a derived class, reconstructs properties and internal state specific to a derived code group from the specified <xref href=\"System.Security.SecurityElement\"></xref>.\n  remarks: \"<xref:System.Security.Policy.CodeGroup.FromXml%2A> cannot be overridden. If you need to deserialize members specific to a particular implementation of <xref:System.Security.Policy.CodeGroup>, you must override ParseXml and deserialize your members there. When the code group is deserialized, <xref:System.Security.Policy.CodeGroup.FromXml%2A> calls ParseXml and reconstructs your members from the <xref:System.Security.SecurityElement>.  \\n  \\n This method deserializes XML created using <xref:System.Security.Policy.CodeGroup.CreateXml%2A>.\"\n  syntax:\n    content: protected virtual void ParseXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);\n    parameters:\n    - id: e\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the security object.\n    - id: level\n      type: System.Security.Policy.PolicyLevel\n      description: The policy level within which the code group exists.\n  overload: System.Security.Policy.CodeGroup.ParseXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.PermissionSetName\n  id: PermissionSetName\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: PermissionSetName\n  nameWithType: CodeGroup.PermissionSetName\n  fullName: System.Security.Policy.CodeGroup.PermissionSetName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets the name of the named permission set for the code group.\n  remarks: This property can be `null` if the code group contains an unnamed permission set.\n  syntax:\n    content: public virtual string PermissionSetName { get; }\n    return:\n      type: System.String\n      description: The name of a named permission set of the policy level.\n  overload: System.Security.Policy.CodeGroup.PermissionSetName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.PolicyStatement\n  id: PolicyStatement\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: PolicyStatement\n  nameWithType: CodeGroup.PolicyStatement\n  fullName: System.Security.Policy.CodeGroup.PolicyStatement\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets or sets the policy statement associated with the code group.\n  remarks: \"The policy statement applies to code in assemblies when evidence matches the membership condition.  \\n  \\n This property can also be set by passing a policy statement to the constructor.\"\n  example:\n  - \"The following example sets the <xref:System.Security.Policy.PolicyStatement> for a code group.  \\n  \\n [!code-cs[Classic CodeGroup.PolicyStatement Example#1](~/add/codesnippet/csharp/p-system.security.policy_7_1.cs)]\\n [!code-cpp[Classic CodeGroup.PolicyStatement Example#1](~/add/codesnippet/cpp/p-system.security.policy_7_1.cpp)]\\n [!code-vb[Classic CodeGroup.PolicyStatement Example#1](~/add/codesnippet/visualbasic/p-system.security.policy_7_1.vb)]\"\n  syntax:\n    content: public System.Security.Policy.PolicyStatement PolicyStatement { get; set; }\n    return:\n      type: System.Security.Policy.PolicyStatement\n      description: The policy statement for the code group.\n  overload: System.Security.Policy.CodeGroup.PolicyStatement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.RemoveChild(System.Security.Policy.CodeGroup)\n  id: RemoveChild(System.Security.Policy.CodeGroup)\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: RemoveChild(CodeGroup)\n  nameWithType: CodeGroup.RemoveChild(CodeGroup)\n  fullName: System.Security.Policy.CodeGroup.RemoveChild(CodeGroup)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Removes the specified child code group.\n  remarks: Only immediate child code groups can be removed with this method.\n  syntax:\n    content: public void RemoveChild (System.Security.Policy.CodeGroup group);\n    parameters:\n    - id: group\n      type: System.Security.Policy.CodeGroup\n      description: The code group to be removed as a child.\n  overload: System.Security.Policy.CodeGroup.RemoveChild*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>group</code> parameter is not an immediate child code group of the current code group.\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.Resolve(System.Security.Policy.Evidence)\n  id: Resolve(System.Security.Policy.Evidence)\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: Resolve(Evidence)\n  nameWithType: CodeGroup.Resolve(Evidence)\n  fullName: System.Security.Policy.CodeGroup.Resolve(Evidence)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: When overridden in a derived class, resolves policy for the code group and its descendants for a set of evidence.\n  remarks: \"Given evidence for an assembly to be loaded, this method evaluates the code group by checking the membership condition against the specified evidence. If there is a match, this method returns a policy statement for the code group, including evaluation of child code groups.  \\n  \\n For a <xref:System.Security.Policy.UnionCodeGroup>, all child code groups whose membership condition match the specified evidence are also resolved, and all resulting policy statements are combined with the policy statement of the parent union code group. Each child code group type determines how all child groups under it are applied, depending on how the Resolve methods of these child groups work.  \\n  \\n The .NET Framework security system uses Resolve on the policy levels to determine which permissions to grant to loaded code from the resulting policy statements and the code request on the assembly.\"\n  syntax:\n    content: public abstract System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);\n    parameters:\n    - id: evidence\n      type: System.Security.Policy.Evidence\n      description: The evidence for the assembly.\n    return:\n      type: System.Security.Policy.PolicyStatement\n      description: A policy statement that consists of the permissions granted by the code group with optional attributes, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the code group does not apply (the membership condition does not match the specified evidence).\n  overload: System.Security.Policy.CodeGroup.Resolve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)\n  id: ResolveMatchingCodeGroups(System.Security.Policy.Evidence)\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: ResolveMatchingCodeGroups(Evidence)\n  nameWithType: CodeGroup.ResolveMatchingCodeGroups(Evidence)\n  fullName: System.Security.Policy.CodeGroup.ResolveMatchingCodeGroups(Evidence)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: When overridden in a derived class, resolves matching code groups.\n  remarks: This method has the same evaluation characteristics as <xref:System.Security.Policy.CodeGroup.Resolve%2A>. The code group that is returned contains child code groups, which in turn can have child code groups as necessary to reflect the complete set of code groups that were matched by the evidence provided.\n  syntax:\n    content: public abstract System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);\n    parameters:\n    - id: evidence\n      type: System.Security.Policy.Evidence\n      description: The evidence for the assembly.\n    return:\n      type: System.Security.Policy.CodeGroup\n      description: A <xref href=\"System.Security.Policy.CodeGroup\"></xref> that is the root of the tree of matching code groups.\n  overload: System.Security.Policy.CodeGroup.ResolveMatchingCodeGroups*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.ToXml\n  id: ToXml\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: CodeGroup.ToXml()\n  fullName: System.Security.Policy.CodeGroup.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Creates an XML encoding of the security object and its current state.\n  syntax:\n    content: public System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the security object, including any state information.\n  overload: System.Security.Policy.CodeGroup.ToXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.CodeGroup.ToXml(System.Security.Policy.PolicyLevel)\n  id: ToXml(System.Security.Policy.PolicyLevel)\n  parent: System.Security.Policy.CodeGroup\n  langs:\n  - csharp\n  name: ToXml(PolicyLevel)\n  nameWithType: CodeGroup.ToXml(PolicyLevel)\n  fullName: System.Security.Policy.CodeGroup.ToXml(PolicyLevel)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Creates an XML encoding of the security object, its current state, and the policy level within which the code exists.\n  remarks: The policy level context is provided for resolution of named permission sets.\n  syntax:\n    content: public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);\n    parameters:\n    - id: level\n      type: System.Security.Policy.PolicyLevel\n      description: The policy level within which the code group exists.\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the security object, including any state information.\n  overload: System.Security.Policy.CodeGroup.ToXml*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Security.Policy.CodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: CodeGroup(IMembershipCondition,PolicyStatement)\n  nameWithType: CodeGroup.CodeGroup(IMembershipCondition,PolicyStatement)\n  fullName: System.Security.Policy.CodeGroup.CodeGroup(IMembershipCondition,PolicyStatement)\n- uid: System.Security.Policy.IMembershipCondition\n  parent: System.Security.Policy\n  isExternal: false\n  name: IMembershipCondition\n  nameWithType: IMembershipCondition\n  fullName: System.Security.Policy.IMembershipCondition\n- uid: System.Security.Policy.PolicyStatement\n  parent: System.Security.Policy\n  isExternal: false\n  name: PolicyStatement\n  nameWithType: PolicyStatement\n  fullName: System.Security.Policy.PolicyStatement\n- uid: System.Security.Policy.CodeGroup.AddChild(System.Security.Policy.CodeGroup)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: AddChild(CodeGroup)\n  nameWithType: CodeGroup.AddChild(CodeGroup)\n  fullName: System.Security.Policy.CodeGroup.AddChild(CodeGroup)\n- uid: System.Security.Policy.CodeGroup\n  parent: System.Security.Policy\n  isExternal: false\n  name: CodeGroup\n  nameWithType: CodeGroup\n  fullName: System.Security.Policy.CodeGroup\n- uid: System.Security.Policy.CodeGroup.AttributeString\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: AttributeString\n  nameWithType: CodeGroup.AttributeString\n  fullName: System.Security.Policy.CodeGroup.AttributeString\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Policy.CodeGroup.Children\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Children\n  nameWithType: CodeGroup.Children\n  fullName: System.Security.Policy.CodeGroup.Children\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: true\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Security.Policy.CodeGroup.Copy\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Copy()\n  nameWithType: CodeGroup.Copy()\n  fullName: System.Security.Policy.CodeGroup.Copy()\n- uid: System.Security.Policy.CodeGroup.CreateXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: CreateXml(SecurityElement,PolicyLevel)\n  nameWithType: CodeGroup.CreateXml(SecurityElement,PolicyLevel)\n  fullName: System.Security.Policy.CodeGroup.CreateXml(SecurityElement,PolicyLevel)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Policy.PolicyLevel\n  parent: System.Security.Policy\n  isExternal: false\n  name: PolicyLevel\n  nameWithType: PolicyLevel\n  fullName: System.Security.Policy.PolicyLevel\n- uid: System.Security.Policy.CodeGroup.Description\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Description\n  nameWithType: CodeGroup.Description\n  fullName: System.Security.Policy.CodeGroup.Description\n- uid: System.Security.Policy.CodeGroup.Equals(System.Object)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CodeGroup.Equals(Object)\n  fullName: System.Security.Policy.CodeGroup.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Policy.CodeGroup.Equals(System.Security.Policy.CodeGroup,System.Boolean)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Equals(CodeGroup,Boolean)\n  nameWithType: CodeGroup.Equals(CodeGroup,Boolean)\n  fullName: System.Security.Policy.CodeGroup.Equals(CodeGroup,Boolean)\n- uid: System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: CodeGroup.FromXml(SecurityElement)\n  fullName: System.Security.Policy.CodeGroup.FromXml(SecurityElement)\n- uid: System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: FromXml(SecurityElement,PolicyLevel)\n  nameWithType: CodeGroup.FromXml(SecurityElement,PolicyLevel)\n  fullName: System.Security.Policy.CodeGroup.FromXml(SecurityElement,PolicyLevel)\n- uid: System.Security.Policy.CodeGroup.GetHashCode\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CodeGroup.GetHashCode()\n  fullName: System.Security.Policy.CodeGroup.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Policy.CodeGroup.MembershipCondition\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: MembershipCondition\n  nameWithType: CodeGroup.MembershipCondition\n  fullName: System.Security.Policy.CodeGroup.MembershipCondition\n- uid: System.Security.Policy.CodeGroup.MergeLogic\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: MergeLogic\n  nameWithType: CodeGroup.MergeLogic\n  fullName: System.Security.Policy.CodeGroup.MergeLogic\n- uid: System.Security.Policy.CodeGroup.Name\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Name\n  nameWithType: CodeGroup.Name\n  fullName: System.Security.Policy.CodeGroup.Name\n- uid: System.Security.Policy.CodeGroup.ParseXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: ParseXml(SecurityElement,PolicyLevel)\n  nameWithType: CodeGroup.ParseXml(SecurityElement,PolicyLevel)\n  fullName: System.Security.Policy.CodeGroup.ParseXml(SecurityElement,PolicyLevel)\n- uid: System.Security.Policy.CodeGroup.PermissionSetName\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: PermissionSetName\n  nameWithType: CodeGroup.PermissionSetName\n  fullName: System.Security.Policy.CodeGroup.PermissionSetName\n- uid: System.Security.Policy.CodeGroup.PolicyStatement\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: PolicyStatement\n  nameWithType: CodeGroup.PolicyStatement\n  fullName: System.Security.Policy.CodeGroup.PolicyStatement\n- uid: System.Security.Policy.CodeGroup.RemoveChild(System.Security.Policy.CodeGroup)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: RemoveChild(CodeGroup)\n  nameWithType: CodeGroup.RemoveChild(CodeGroup)\n  fullName: System.Security.Policy.CodeGroup.RemoveChild(CodeGroup)\n- uid: System.Security.Policy.CodeGroup.Resolve(System.Security.Policy.Evidence)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Resolve(Evidence)\n  nameWithType: CodeGroup.Resolve(Evidence)\n  fullName: System.Security.Policy.CodeGroup.Resolve(Evidence)\n- uid: System.Security.Policy.Evidence\n  parent: System.Security.Policy\n  isExternal: false\n  name: Evidence\n  nameWithType: Evidence\n  fullName: System.Security.Policy.Evidence\n- uid: System.Security.Policy.CodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: ResolveMatchingCodeGroups(Evidence)\n  nameWithType: CodeGroup.ResolveMatchingCodeGroups(Evidence)\n  fullName: System.Security.Policy.CodeGroup.ResolveMatchingCodeGroups(Evidence)\n- uid: System.Security.Policy.CodeGroup.ToXml\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: ToXml()\n  nameWithType: CodeGroup.ToXml()\n  fullName: System.Security.Policy.CodeGroup.ToXml()\n- uid: System.Security.Policy.CodeGroup.ToXml(System.Security.Policy.PolicyLevel)\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: ToXml(PolicyLevel)\n  nameWithType: CodeGroup.ToXml(PolicyLevel)\n  fullName: System.Security.Policy.CodeGroup.ToXml(PolicyLevel)\n- uid: System.Security.Policy.CodeGroup.#ctor*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: CodeGroup\n  nameWithType: CodeGroup.CodeGroup\n- uid: System.Security.Policy.CodeGroup.AddChild*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: AddChild\n  nameWithType: CodeGroup.AddChild\n- uid: System.Security.Policy.CodeGroup.AttributeString*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: AttributeString\n  nameWithType: CodeGroup.AttributeString\n- uid: System.Security.Policy.CodeGroup.Children*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Children\n  nameWithType: CodeGroup.Children\n- uid: System.Security.Policy.CodeGroup.Copy*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Copy\n  nameWithType: CodeGroup.Copy\n- uid: System.Security.Policy.CodeGroup.CreateXml*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: CreateXml\n  nameWithType: CodeGroup.CreateXml\n- uid: System.Security.Policy.CodeGroup.Description*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Description\n  nameWithType: CodeGroup.Description\n- uid: System.Security.Policy.CodeGroup.Equals*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Equals\n  nameWithType: CodeGroup.Equals\n- uid: System.Security.Policy.CodeGroup.FromXml*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: FromXml\n  nameWithType: CodeGroup.FromXml\n- uid: System.Security.Policy.CodeGroup.GetHashCode*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: GetHashCode\n  nameWithType: CodeGroup.GetHashCode\n- uid: System.Security.Policy.CodeGroup.MembershipCondition*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: MembershipCondition\n  nameWithType: CodeGroup.MembershipCondition\n- uid: System.Security.Policy.CodeGroup.MergeLogic*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: MergeLogic\n  nameWithType: CodeGroup.MergeLogic\n- uid: System.Security.Policy.CodeGroup.Name*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Name\n  nameWithType: CodeGroup.Name\n- uid: System.Security.Policy.CodeGroup.ParseXml*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: ParseXml\n  nameWithType: CodeGroup.ParseXml\n- uid: System.Security.Policy.CodeGroup.PermissionSetName*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: PermissionSetName\n  nameWithType: CodeGroup.PermissionSetName\n- uid: System.Security.Policy.CodeGroup.PolicyStatement*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: PolicyStatement\n  nameWithType: CodeGroup.PolicyStatement\n- uid: System.Security.Policy.CodeGroup.RemoveChild*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: RemoveChild\n  nameWithType: CodeGroup.RemoveChild\n- uid: System.Security.Policy.CodeGroup.Resolve*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: Resolve\n  nameWithType: CodeGroup.Resolve\n- uid: System.Security.Policy.CodeGroup.ResolveMatchingCodeGroups*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: ResolveMatchingCodeGroups\n  nameWithType: CodeGroup.ResolveMatchingCodeGroups\n- uid: System.Security.Policy.CodeGroup.ToXml*\n  parent: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: ToXml\n  nameWithType: CodeGroup.ToXml\n"}