{"nodes":[{"pos":[1403,1544],"content":"Represents a data point that is stored in the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPointCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Represents a data point that is stored in the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPointCollection\"></xref> class."},{"pos":[1557,2501],"content":"The DataPoint class stores properties associated with data as well as data point values. For example, a data point has a value, but it also has a color property, background image property, background gradient property, and so forth. For more information about data point properties, see the <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties> class overview topic.       Each data point consists of an X-value and one or more Y-values. The X-value can be zero, or you can set this explicitly.       Only one Y-value per point is required for all chart types except bubble, candlestick and stock charts. These chart types require more than one Y-value because one data point consists of multiple values. For example, to plot one stock chart column, four values are required: high, low, open and close values.       Data can be added at either design time or run time; you can also use data-binding at run time.","needQuote":false,"needEscape":true,"nodes":[{"content":"The DataPoint class stores properties associated with data as well as data point values. For example, a data point has a value, but it also has a color property, background image property, background gradient property, and so forth. For more information about data point properties, see the <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties> class overview topic.       Each data point consists of an X-value and one or more Y-values. The X-value can be zero, or you can set this explicitly.       Only one Y-value per point is required for all chart types except bubble, candlestick and stock charts. These chart types require more than one Y-value because one data point consists of multiple values. For example, to plot one stock chart column, four values are required: high, low, open and close values.       Data can be added at either design time or run time; you can also use data-binding at run time.","pos":[0,938],"nodes":[{"content":"The DataPoint class stores properties associated with data as well as data point values.","pos":[0,88]},{"content":"For example, a data point has a value, but it also has a color property, background image property, background gradient property, and so forth.","pos":[89,232]},{"content":"For more information about data point properties, see the &lt;xref:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties&gt; class overview topic.","pos":[233,393],"source":" For more information about data point properties, see the <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties> class overview topic."},{"content":"Each data point consists of an X-value and one or more Y-values.","pos":[400,464]},{"content":"The X-value can be zero, or you can set this explicitly.","pos":[465,521]},{"content":"Only one Y-value per point is required for all chart types except bubble, candlestick and stock charts.","pos":[528,631]},{"content":"These chart types require more than one Y-value because one data point consists of multiple values.","pos":[632,731]},{"content":"For example, to plot one stock chart column, four values are required: high, low, open and close values.","pos":[732,836]},{"content":"Data can be added at either design time or run time; you can also use data-binding at run time.","pos":[843,938]}]}]},{"pos":[8477,8596],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> class."},{"pos":[8609,8947],"content":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.","pos":[0,336],"nodes":[{"content":"This constructor can be used to create and initialize a new instance of the &lt;xref:System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; class.","pos":[0,147],"source":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class."},{"content":"However, it is highly recommended that you instead add data points at run time, using the &lt;xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A&gt; collection property.","pos":[154,336],"source":"       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property."}]}]},{"pos":[9721,9961],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, and sets the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Forms.DataVisualization.Charting.Series\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> that the data point belongs to.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> class, and sets the <xref href=\"System.Windows.Forms.DataVisualization.Charting.Series\"></xref> that the data point belongs to."},{"pos":[9974,10312],"content":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.","pos":[0,336],"nodes":[{"content":"This constructor can be used to create and initialize a new instance of the &lt;xref:System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; class.","pos":[0,147],"source":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class."},{"content":"However, it is highly recommended that you instead add data points at run time, using the &lt;xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A&gt; collection property.","pos":[154,336],"source":"       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property."}]}]},{"pos":[10538,10656],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DataVisualization.Charting.Series\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that the data point belongs to.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Forms.DataVisualization.Charting.Series\"></xref> object that the data point belongs to."},{"pos":[11333,11485],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified X and Y-value.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> class with the specified X and Y-value."},{"pos":[11498,11836],"content":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.","pos":[0,336],"nodes":[{"content":"This constructor can be used to create and initialize a new instance of the &lt;xref:System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; class.","pos":[0,147],"source":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class."},{"content":"However, it is highly recommended that you instead add data points at run time, using the &lt;xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A&gt; collection property.","pos":[154,336],"source":"       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property."}]}]},{"pos":[11988,12018],"content":"The X-value of the data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X-value of the data point.","pos":[0,30]}]},{"pos":[12081,12111],"content":"The Y-value of the data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Y-value of the data point.","pos":[0,30]}]},{"pos":[12798,12969],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified X-value and an array of Y-values.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> class with the specified X-value and an array of Y-values."},{"pos":[12982,13320],"content":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.","pos":[0,336],"nodes":[{"content":"This constructor can be used to create and initialize a new instance of the &lt;xref:System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; class.","pos":[0,147],"source":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class."},{"content":"However, it is highly recommended that you instead add data points at run time, using the &lt;xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A&gt; collection property.","pos":[154,336],"source":"       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property."}]}]},{"pos":[13475,13505],"content":"The X-value of the data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X-value of the data point.","pos":[0,30]}]},{"pos":[13571,13610],"content":"An array of Y-values of the data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of Y-values of the data point.","pos":[0,39]}]},{"pos":[14287,14446],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified X-value and Y-values.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> class with the specified X-value and Y-values."},{"pos":[14459,14797],"content":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.","pos":[0,336],"nodes":[{"content":"This constructor can be used to create and initialize a new instance of the &lt;xref:System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; class.","pos":[0,147],"source":"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class."},{"content":"However, it is highly recommended that you instead add data points at run time, using the &lt;xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A&gt; collection property.","pos":[154,336],"source":"       However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property."}]}]},{"pos":[14950,14980],"content":"The X-value of the data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X-value of the data point.","pos":[0,30]}]},{"pos":[15044,15157],"content":"A comma-separated <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of Y-values of the data point.","needQuote":true,"needEscape":true,"source":"A comma-separated <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> of Y-values of the data point."},{"pos":[15718,15781],"content":"Returns a new instance that is an exact copy of the data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a new instance that is an exact copy of the data point.","pos":[0,63]}]},{"pos":[15793,15856],"content":"Use the Clone method to obtain an exact copy of the data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the Clone method to obtain an exact copy of the data point.","pos":[0,63]}]},{"pos":[16075,16211],"content":"A cloned <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object  that is an exact copy of the data point.","needQuote":true,"needEscape":true,"source":"A cloned <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> object  that is an exact copy of the data point."},{"pos":[16865,16943],"content":"Returns a data point that is specified by its name. This is a helper function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a data point that is specified by its name. This is a helper function.","pos":[0,78],"nodes":[{"content":"Returns a data point that is specified by its name.","pos":[0,51]},{"content":"This is a helper function.","pos":[52,78]}]}]},{"pos":[17097,17127],"content":"Point value names. X, Y, Y2...","needQuote":true,"needEscape":true,"nodes":[{"content":"Point value names. X, Y, Y2...","pos":[0,30],"nodes":[{"content":"Point value names.","pos":[0,18]},{"content":"X, Y, Y2...","pos":[19,30]}]}]},{"pos":[17185,17287],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents a data point.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents a data point."},{"pos":[17863,17938],"content":"Gets or sets a flag that indicates whether a data point is marked as empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a flag that indicates whether a data point is marked as empty.","pos":[0,75]}]},{"pos":[17951,18358],"content":"Set this property to `true` to mark a data point as an empty point.       Alternatively one of the `InsertEmptyPoints` methods in the <xref:System.Windows.Forms.DataVisualization.Charting.DataManipulator> class can be used to mark missing data as empty points.       The <xref:System.Windows.Forms.DataVisualization.Charting.Series.EmptyPointStyle%2A> property determines how empty points are displayed.","needQuote":false,"needEscape":true,"nodes":[{"content":"Set this property to <ph id=\"ph1\">`true`</ph> to mark a data point as an empty point.","pos":[0,67],"source":"Set this property to `true` to mark a data point as an empty point."},{"content":"Alternatively one of the <ph id=\"ph1\">`InsertEmptyPoints`</ph> methods in the &lt;xref:System.Windows.Forms.DataVisualization.Charting.DataManipulator&gt; class can be used to mark missing data as empty points.","pos":[74,260],"source":"       Alternatively one of the `InsertEmptyPoints` methods in the <xref:System.Windows.Forms.DataVisualization.Charting.DataManipulator> class can be used to mark missing data as empty points."},{"content":"The &lt;xref:System.Windows.Forms.DataVisualization.Charting.Series.EmptyPointStyle%2A&gt; property determines how empty points are displayed.","pos":[267,403],"source":"       The <xref:System.Windows.Forms.DataVisualization.Charting.Series.EmptyPointStyle%2A> property determines how empty points are displayed."}]},{"pos":[18475,18737],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the point is marked as an empty point; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the point is marked as an empty point; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,177],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the point is marked as an empty point; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[178,262],"source":" The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[19291,19331],"content":"Gets or sets the name of the data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the data point.","pos":[0,40]}]},{"pos":[19454,19575],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the text name of the data point.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the text name of the data point."},{"pos":[20267,20327],"content":"Sets the X-value and one or more Y-values of the data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the X-value and one or more Y-values of the data point.","pos":[0,60]}]},{"pos":[20340,20898],"content":"Use the SetValueXY method to set the value(s) of a data point at run-time.       Note that if you set the X-value to a value other than zero (0), a scatter plot will be generated. For further details, see the Remarks section of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue%2A> property.       Refer to the following table for a complete listing of valid .NET Framework types that can be used for the object type parameter.      ||||   |-|-|-|   |String|DateTime|Double|   |Decimal|Single|Int32|   |UInt32|Int64|UInt64|","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the SetValueXY method to set the value(s) of a data point at run-time.       Note that if you set the X-value to a value other than zero (0), a scatter plot will be generated. For further details, see the Remarks section of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue%2A> property.       Refer to the following table for a complete listing of valid .NET Framework types that can be used for the object type parameter.      ||||   |-|-|-|   |String|DateTime|Double|   |Decimal|Single|Int32|   |UInt32|Int64|UInt64|","pos":[0,548],"nodes":[{"content":"Use the SetValueXY method to set the value(s) of a data point at run-time.","pos":[0,74]},{"content":"Note that if you set the X-value to a value other than zero (0), a scatter plot will be generated.","pos":[81,179]},{"content":"For further details, see the Remarks section of the &lt;xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue%2A&gt; property.","pos":[180,316],"source":" For further details, see the Remarks section of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue%2A> property."},{"content":"Refer to the following table for a complete listing of valid .NET Framework types that can be used for the object type parameter.","pos":[323,452]},{"content":"||||   |-|-|-|   |String|DateTime|Double|   |Decimal|Single|Int32|   |UInt32|Int64|UInt64|","pos":[458,548]}]}]},{"pos":[21058,21088],"content":"The X-value of the data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X-value of the data point.","pos":[0,30]}]},{"pos":[21153,21190],"content":"A list of Y-values of the data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"A list of Y-values of the data point.","pos":[0,37]}]},{"pos":[21834,21877],"content":"Sets the Y-value(s) of a single data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the Y-value(s) of a single data point.","pos":[0,43]}]},{"pos":[21890,22983],"content":"The SetValueY property is used to set the Y-value(s) of a data point at run time.       Only one Y-value per point is required for all chart types except for bubble, candlestick and stock charts. These chart types require more than one Y-value because one data point consists of multiple values. For example, to plot one stock chart column, four values are required: high, low, open and close values.       This property returns an array of `double` values when used to retrieve multiple Y-values.      > [!IMPORTANT] >  The <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A> property determines the maximum number of Y-values that all data points in a <xref:System.Windows.Forms.DataVisualization.Charting.Series> can have. If you specify more than the allowable number of Y-values, an exception will be raised.   >    >  Refer to the following table for a complete listing of valid .NET Framework types that can be used for the object type parameter:      ||||   |-|-|-|   |String|DateTime|Double|   |Decimal|Single|Int32|   |UInt32|Int64|UInt64|","needQuote":false,"needEscape":true,"nodes":[{"content":"The SetValueY property is used to set the Y-value(s) of a data point at run time.","pos":[0,81]},{"content":"Only one Y-value per point is required for all chart types except for bubble, candlestick and stock charts.","pos":[88,195]},{"content":"These chart types require more than one Y-value because one data point consists of multiple values.","pos":[196,295]},{"content":"For example, to plot one stock chart column, four values are required: high, low, open and close values.","pos":[296,400]},{"content":"This property returns an array of <ph id=\"ph1\">`double`</ph> values when used to retrieve multiple Y-values.","pos":[407,497],"source":"       This property returns an array of `double` values when used to retrieve multiple Y-values."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  The &lt;xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A&gt; property determines the maximum number of Y-values that all data points in a &lt;xref:System.Windows.Forms.DataVisualization.Charting.Series&gt; can have.","pos":[503,754],"source":"      > [!IMPORTANT] >  The <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A> property determines the maximum number of Y-values that all data points in a <xref:System.Windows.Forms.DataVisualization.Charting.Series> can have."},{"content":"If you specify more than the allowable number of Y-values, an exception will be raised.","pos":[755,842]},{"content":"&gt;    &gt;  Refer to the following table for a complete listing of valid .NET Framework types that can be used for the object type parameter:      ||||   |-|-|-|   |String|DateTime|Double|   |Decimal|Single|Int32|   |UInt32|Int64|UInt64|","pos":[845,1078],"source":"   >    >  Refer to the following table for a complete listing of valid .NET Framework types that can be used for the object type parameter:      ||||   |-|-|-|   |String|DateTime|Double|   |Decimal|Single|Int32|   |UInt32|Int64|UInt64|"}]},{"pos":[23129,23306],"content":"The Y-value(s) of a <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> object in the collection. Formatted as one or more values separated by commas.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Y-value(s) of a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object in the collection.","pos":[0,124],"source":"The Y-value(s) of a <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> object in the collection."},{"content":"Formatted as one or more values separated by commas.","pos":[125,177]}]},{"pos":[23872,23913],"content":"Gets or sets the X-value of a data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the X-value of a data point.","pos":[0,41]}]},{"pos":[23926,24625],"content":"All chart types can be displayed as either scatter plots or as non-scatter plots, because both X-values and Y-values can be set. Setting an X-value will result in a scatter plot, whereas not setting this property—which is equivalent to setting it to zero—will result in a non-scatter plot. For example, to draw a point chart type, add data points that have X-values of zero. To display a traditional scatter chart, add data points that have X-values other than zero.       The X-values of data points are not required to be set. If they are not set, data points are plotted sequentially, using their index values from the <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCollection>.","needQuote":false,"needEscape":true,"nodes":[{"content":"All chart types can be displayed as either scatter plots or as non-scatter plots, because both X-values and Y-values can be set. Setting an X-value will result in a scatter plot, whereas not setting this property—which is equivalent to setting it to zero—will result in a non-scatter plot. For example, to draw a point chart type, add data points that have X-values of zero. To display a traditional scatter chart, add data points that have X-values other than zero.       The X-values of data points are not required to be set. If they are not set, data points are plotted sequentially, using their index values from the <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCollection>.","pos":[0,697],"nodes":[{"content":"All chart types can be displayed as either scatter plots or as non-scatter plots, because both X-values and Y-values can be set.","pos":[0,128]},{"content":"Setting an X-value will result in a scatter plot, whereas not setting this property—which is equivalent to setting it to zero—will result in a non-scatter plot.","pos":[129,289]},{"content":"For example, to draw a point chart type, add data points that have X-values of zero.","pos":[290,374]},{"content":"To display a traditional scatter chart, add data points that have X-values other than zero.","pos":[375,466]},{"content":"The X-values of data points are not required to be set.","pos":[473,528]},{"content":"If they are not set, data points are plotted sequentially, using their index values from the &lt;xref:System.Windows.Forms.DataVisualization.Charting.DataPointCollection&gt;.","pos":[529,697],"source":" If they are not set, data points are plotted sequentially, using their index values from the <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCollection>."}]}]},{"pos":[24742,24853],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the X-value of a data point.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> that represents the X-value of a data point."},{"pos":[25421,25465],"content":"Gets or sets the Y-value(s) of a data point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the Y-value(s) of a data point.","pos":[0,44]}]},{"pos":[25478,26304],"content":"The YValues property is used to set the Y-values of data points.       Only one Y-value per point is required for all chart types except bubble, candlestick and stock charts. These chart types require more than one Y-value because one data point consists of multiple values. For example, to plot one stock chart column, four values are required: high, low, open and close values.       The YValues property returns an array of `double` values when used to retrieve the Y-values.       **Important** The <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A> property determines the maximum number of Y-values that all data points in a <xref:System.Windows.Forms.DataVisualization.Charting.Series> can have. If you specify more than the allowable number of Y-values, an exception will be raised.","needQuote":false,"needEscape":true,"nodes":[{"content":"The YValues property is used to set the Y-values of data points.","pos":[0,64]},{"content":"Only one Y-value per point is required for all chart types except bubble, candlestick and stock charts.","pos":[71,174]},{"content":"These chart types require more than one Y-value because one data point consists of multiple values.","pos":[175,274]},{"content":"For example, to plot one stock chart column, four values are required: high, low, open and close values.","pos":[275,379]},{"content":"The YValues property returns an array of <ph id=\"ph1\">`double`</ph> values when used to retrieve the Y-values.","pos":[386,478],"source":"       The YValues property returns an array of `double` values when used to retrieve the Y-values."},{"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept> The &lt;xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A&gt; property determines the maximum number of Y-values that all data points in a &lt;xref:System.Windows.Forms.DataVisualization.Charting.Series&gt; can have.","pos":[485,732],"source":"**Important** The <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A> property determines the maximum number of Y-values that all data points in a <xref:System.Windows.Forms.DataVisualization.Charting.Series> can have."},{"content":"If you specify more than the allowable number of Y-values, an exception will be raised.","pos":[733,820]}]},{"pos":[26426,26556],"content":"An array of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that represent the Y-value(s) of a data point.","needQuote":true,"needEscape":true,"source":"An array of <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> values that represent the Y-value(s) of a data point."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  id: DataPoint\n  children:\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Windows.Forms.DataVisualization.Charting.Series)\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double)\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double[])\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.String)\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.GetValueByName(System.String)\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.IsEmpty\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.Name\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY(System.Object,System.Object[])\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY(System.Object[])\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue\n  - System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues\n  langs:\n  - csharp\n  name: DataPoint\n  nameWithType: DataPoint\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  type: Class\n  summary: Represents a data point that is stored in the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPointCollection\"></xref> class.\n  remarks: \"The DataPoint class stores properties associated with data as well as data point values. For example, a data point has a value, but it also has a color property, background image property, background gradient property, and so forth. For more information about data point properties, see the <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties> class overview topic.  \\n  \\n Each data point consists of an X-value and one or more Y-values. The X-value can be zero, or you can set this explicitly.  \\n  \\n Only one Y-value per point is required for all chart types except bubble, candlestick and stock charts. These chart types require more than one Y-value because one data point consists of multiple values. For example, to plot one stock chart column, four values are required: high, low, open and close values.  \\n  \\n Data can be added at either design time or run time; you can also use data-binding at run time.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultProperty(\"YValues\")]\n\n      [System.ComponentModel.TypeConverter(\"System.Windows.Forms.Design.DataVisualization.Charting.DataPointConverter, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\")]\n\n      public class DataPoint : System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties\n  inheritance:\n  - System.Object\n  - System.Windows.Forms.DataVisualization.Charting.ChartElement\n  - System.Windows.Forms.DataVisualization.Charting.ChartNamedElement\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties\n  implements: []\n  inheritedMembers:\n  - System.Windows.Forms.DataVisualization.Charting.ChartElement.Dispose\n  - System.Windows.Forms.DataVisualization.Charting.ChartElement.Dispose(System.Boolean)\n  - System.Windows.Forms.DataVisualization.Charting.ChartElement.Equals(System.Object)\n  - System.Windows.Forms.DataVisualization.Charting.ChartElement.GetHashCode\n  - System.Windows.Forms.DataVisualization.Charting.ChartElement.Tag\n  - System.Windows.Forms.DataVisualization.Charting.ChartElement.ToString\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.AxisLabel\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackGradientStyle\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackHatchStyle\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackImage\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackImageAlignment\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackImageTransparentColor\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackImageWrapMode\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackSecondaryColor\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BorderColor\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BorderDashStyle\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BorderWidth\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.Color\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.CustomProperties\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.CustomPropertiesExtended\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.DeleteCustomProperty(System.String)\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.Font\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.GetCustomProperty(System.String)\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.IsCustomPropertySet(System.String)\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.IsValueShownAsLabel\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.IsVisibleInLegend\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.Item(System.Int32)\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.Item(System.String)\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.Label\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelAngle\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelBackColor\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelBorderColor\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelBorderDashStyle\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelBorderWidth\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelForeColor\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelFormat\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelToolTip\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LegendText\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LegendToolTip\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerBorderColor\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerBorderWidth\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerColor\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerImage\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerImageTransparentColor\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerSize\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerStyle\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.ResetIsValueShownAsLabel\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.ResetIsVisibleInLegend\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.SetCustomProperty(System.String,System.String)\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.SetDefault(System.Boolean)\n  - System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.ToolTip\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor\n  id: '#ctor'\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: DataPoint()\n  nameWithType: DataPoint.DataPoint()\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.DataPoint()\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> class.\n  remarks: \"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.  \\n  \\n However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.\"\n  syntax:\n    content: public DataPoint ();\n    parameters: []\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Windows.Forms.DataVisualization.Charting.Series)\n  id: '#ctor(System.Windows.Forms.DataVisualization.Charting.Series)'\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: DataPoint(Series)\n  nameWithType: DataPoint.DataPoint(Series)\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.DataPoint(Series)\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> class, and sets the <xref href=\"System.Windows.Forms.DataVisualization.Charting.Series\"></xref> that the data point belongs to.\n  remarks: \"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.  \\n  \\n However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.\"\n  syntax:\n    content: public DataPoint (System.Windows.Forms.DataVisualization.Charting.Series series);\n    parameters:\n    - id: series\n      type: System.Windows.Forms.DataVisualization.Charting.Series\n      description: The <xref href=\"System.Windows.Forms.DataVisualization.Charting.Series\"></xref> object that the data point belongs to.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double)\n  id: '#ctor(System.Double,System.Double)'\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: DataPoint(Double,Double)\n  nameWithType: DataPoint.DataPoint(Double,Double)\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.DataPoint(Double,Double)\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> class with the specified X and Y-value.\n  remarks: \"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.  \\n  \\n However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.\"\n  syntax:\n    content: public DataPoint (double xValue, double yValue);\n    parameters:\n    - id: xValue\n      type: System.Double\n      description: The X-value of the data point.\n    - id: yValue\n      type: System.Double\n      description: The Y-value of the data point.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double[])\n  id: '#ctor(System.Double,System.Double[])'\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: DataPoint(Double,Double[])\n  nameWithType: DataPoint.DataPoint(Double,Double[])\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.DataPoint(Double,Double[])\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> class with the specified X-value and an array of Y-values.\n  remarks: \"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.  \\n  \\n However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.\"\n  syntax:\n    content: public DataPoint (double xValue, double[] yValues);\n    parameters:\n    - id: xValue\n      type: System.Double\n      description: The X-value of the data point.\n    - id: yValues\n      type: System.Double[]\n      description: An array of Y-values of the data point.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.String)\n  id: '#ctor(System.Double,System.String)'\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: DataPoint(Double,String)\n  nameWithType: DataPoint.DataPoint(Double,String)\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.DataPoint(Double,String)\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> class with the specified X-value and Y-values.\n  remarks: \"This constructor can be used to create and initialize a new instance of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> class.  \\n  \\n However, it is highly recommended that you instead add data points at run time, using the <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> collection property.\"\n  syntax:\n    content: public DataPoint (double xValue, string yValues);\n    parameters:\n    - id: xValue\n      type: System.Double\n      description: The X-value of the data point.\n    - id: yValues\n      type: System.String\n      description: A comma-separated <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> of Y-values of the data point.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone\n  id: Clone\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: DataPoint.Clone()\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone()\n  type: Method\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Returns a new instance that is an exact copy of the data point.\n  remarks: Use the Clone method to obtain an exact copy of the data point.\n  syntax:\n    content: public System.Windows.Forms.DataVisualization.Charting.DataPoint Clone ();\n    parameters: []\n    return:\n      type: System.Windows.Forms.DataVisualization.Charting.DataPoint\n      description: A cloned <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> object  that is an exact copy of the data point.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.GetValueByName(System.String)\n  id: GetValueByName(System.String)\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: GetValueByName(String)\n  nameWithType: DataPoint.GetValueByName(String)\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.GetValueByName(String)\n  type: Method\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Returns a data point that is specified by its name. This is a helper function.\n  syntax:\n    content: public double GetValueByName (string valueName);\n    parameters:\n    - id: valueName\n      type: System.String\n      description: Point value names. X, Y, Y2...\n    return:\n      type: System.Double\n      description: A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents a data point.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.GetValueByName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.IsEmpty\n  id: IsEmpty\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: DataPoint.IsEmpty\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.IsEmpty\n  type: Property\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Gets or sets a flag that indicates whether a data point is marked as empty.\n  remarks: \"Set this property to `true` to mark a data point as an empty point.  \\n  \\n Alternatively one of the `InsertEmptyPoints` methods in the <xref:System.Windows.Forms.DataVisualization.Charting.DataManipulator> class can be used to mark missing data as empty points.  \\n  \\n The <xref:System.Windows.Forms.DataVisualization.Charting.Series.EmptyPointStyle%2A> property determines how empty points are displayed.\"\n  syntax:\n    content: public bool IsEmpty { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the point is marked as an empty point; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.IsEmpty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.Name\n  id: Name\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: Name\n  nameWithType: DataPoint.Name\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.Name\n  type: Property\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Gets or sets the name of the data point.\n  syntax:\n    content: public override string Name { get; set; }\n    return:\n      type: System.String\n      description: A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the text name of the data point.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY(System.Object,System.Object[])\n  id: SetValueXY(System.Object,System.Object[])\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: SetValueXY(Object,Object[])\n  nameWithType: DataPoint.SetValueXY(Object,Object[])\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY(Object,Object[])\n  type: Method\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Sets the X-value and one or more Y-values of the data point.\n  remarks: \"Use the SetValueXY method to set the value(s) of a data point at run-time.  \\n  \\n Note that if you set the X-value to a value other than zero (0), a scatter plot will be generated. For further details, see the Remarks section of the <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue%2A> property.  \\n  \\n Refer to the following table for a complete listing of valid .NET Framework types that can be used for the object type parameter.  \\n  \\n||||  \\n|-|-|-|  \\n|String|DateTime|Double|  \\n|Decimal|Single|Int32|  \\n|UInt32|Int64|UInt64|\"\n  syntax:\n    content: public void SetValueXY (object xValue, object[] yValue);\n    parameters:\n    - id: xValue\n      type: System.Object\n      description: The X-value of the data point.\n    - id: yValue\n      type: System.Object[]\n      description: A list of Y-values of the data point.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY(System.Object[])\n  id: SetValueY(System.Object[])\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: SetValueY(Object[])\n  nameWithType: DataPoint.SetValueY(Object[])\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY(Object[])\n  type: Method\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Sets the Y-value(s) of a single data point.\n  remarks: \"The SetValueY property is used to set the Y-value(s) of a data point at run time.  \\n  \\n Only one Y-value per point is required for all chart types except for bubble, candlestick and stock charts. These chart types require more than one Y-value because one data point consists of multiple values. For example, to plot one stock chart column, four values are required: high, low, open and close values.  \\n  \\n This property returns an array of `double` values when used to retrieve multiple Y-values.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A> property determines the maximum number of Y-values that all data points in a <xref:System.Windows.Forms.DataVisualization.Charting.Series> can have. If you specify more than the allowable number of Y-values, an exception will be raised.  \\n>   \\n>  Refer to the following table for a complete listing of valid .NET Framework types that can be used for the object type parameter:  \\n  \\n||||  \\n|-|-|-|  \\n|String|DateTime|Double|  \\n|Decimal|Single|Int32|  \\n|UInt32|Int64|UInt64|\"\n  syntax:\n    content: public void SetValueY (object[] yValue);\n    parameters:\n    - id: yValue\n      type: System.Object[]\n      description: The Y-value(s) of a <xref href=\"System.Windows.Forms.DataVisualization.Charting.DataPoint\"></xref> object in the collection. Formatted as one or more values separated by commas.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue\n  id: XValue\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: XValue\n  nameWithType: DataPoint.XValue\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue\n  type: Property\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Gets or sets the X-value of a data point.\n  remarks: \"All chart types can be displayed as either scatter plots or as non-scatter plots, because both X-values and Y-values can be set. Setting an X-value will result in a scatter plot, whereas not setting this property—which is equivalent to setting it to zero—will result in a non-scatter plot. For example, to draw a point chart type, add data points that have X-values of zero. To display a traditional scatter chart, add data points that have X-values other than zero.  \\n  \\n The X-values of data points are not required to be set. If they are not set, data points are plotted sequentially, using their index values from the <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCollection>.\"\n  syntax:\n    content: public double XValue { get; set; }\n    return:\n      type: System.Double\n      description: A <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> that represents the X-value of a data point.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues\n  id: YValues\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  langs:\n  - csharp\n  name: YValues\n  nameWithType: DataPoint.YValues\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues\n  type: Property\n  assemblies:\n  - System.Windows.Forms.DataVisualization\n  namespace: System.Windows.Forms.DataVisualization.Charting\n  summary: Gets or sets the Y-value(s) of a data point.\n  remarks: \"The YValues property is used to set the Y-values of data points.  \\n  \\n Only one Y-value per point is required for all chart types except bubble, candlestick and stock charts. These chart types require more than one Y-value because one data point consists of multiple values. For example, to plot one stock chart column, four values are required: high, low, open and close values.  \\n  \\n The YValues property returns an array of `double` values when used to retrieve the Y-values.  \\n  \\n **Important** The <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A> property determines the maximum number of Y-values that all data points in a <xref:System.Windows.Forms.DataVisualization.Charting.Series> can have. If you specify more than the allowable number of Y-values, an exception will be raised.\"\n  syntax:\n    content: public double[] YValues { get; set; }\n    return:\n      type: System.Double[]\n      description: An array of <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> values that represent the Y-value(s) of a data point.\n  overload: System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties\n  isExternal: false\n  name: System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: DataPoint()\n  nameWithType: DataPoint.DataPoint()\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.DataPoint()\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Windows.Forms.DataVisualization.Charting.Series)\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: DataPoint(Series)\n  nameWithType: DataPoint.DataPoint(Series)\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.DataPoint(Series)\n- uid: System.Windows.Forms.DataVisualization.Charting.Series\n  parent: System.Windows.Forms.DataVisualization.Charting\n  isExternal: false\n  name: Series\n  nameWithType: Series\n  fullName: System.Windows.Forms.DataVisualization.Charting.Series\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double)\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: DataPoint(Double,Double)\n  nameWithType: DataPoint.DataPoint(Double,Double)\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.DataPoint(Double,Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double[])\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: DataPoint(Double,Double[])\n  nameWithType: DataPoint.DataPoint(Double,Double[])\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.DataPoint(Double,Double[])\n- uid: System.Double[]\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double[]\n  spec.csharp:\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: Double[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.String)\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: DataPoint(Double,String)\n  nameWithType: DataPoint.DataPoint(Double,String)\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.DataPoint(Double,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: Clone()\n  nameWithType: DataPoint.Clone()\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone()\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  parent: System.Windows.Forms.DataVisualization.Charting\n  isExternal: false\n  name: DataPoint\n  nameWithType: DataPoint\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.GetValueByName(System.String)\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: GetValueByName(String)\n  nameWithType: DataPoint.GetValueByName(String)\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.GetValueByName(String)\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.IsEmpty\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: IsEmpty\n  nameWithType: DataPoint.IsEmpty\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.IsEmpty\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.Name\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: Name\n  nameWithType: DataPoint.Name\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.Name\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY(System.Object,System.Object[])\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: SetValueXY(Object,Object[])\n  nameWithType: DataPoint.SetValueXY(Object,Object[])\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY(Object,Object[])\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY(System.Object[])\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: SetValueY(Object[])\n  nameWithType: DataPoint.SetValueY(Object[])\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY(Object[])\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: XValue\n  nameWithType: DataPoint.XValue\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: YValues\n  nameWithType: DataPoint.YValues\n  fullName: System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor*\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: DataPoint\n  nameWithType: DataPoint.DataPoint\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone*\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: Clone\n  nameWithType: DataPoint.Clone\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.GetValueByName*\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: GetValueByName\n  nameWithType: DataPoint.GetValueByName\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.IsEmpty*\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: IsEmpty\n  nameWithType: DataPoint.IsEmpty\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.Name*\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: Name\n  nameWithType: DataPoint.Name\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY*\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: SetValueXY\n  nameWithType: DataPoint.SetValueXY\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY*\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: SetValueY\n  nameWithType: DataPoint.SetValueY\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue*\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: XValue\n  nameWithType: DataPoint.XValue\n- uid: System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues*\n  parent: System.Windows.Forms.DataVisualization.Charting.DataPoint\n  isExternal: false\n  name: YValues\n  nameWithType: DataPoint.YValues\n"}