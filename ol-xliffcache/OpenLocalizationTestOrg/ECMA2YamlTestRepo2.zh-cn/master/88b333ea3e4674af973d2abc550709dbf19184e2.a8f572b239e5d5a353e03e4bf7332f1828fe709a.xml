{"nodes":[{"pos":[340,455],"content":"Defines the contract that ASP.NET implements to synchronously process HTTP Web requests using custom HTTP handlers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the contract that ASP.NET implements to synchronously process HTTP Web requests using custom HTTP handlers.","pos":[0,115]}]},{"pos":[468,1151],"content":"You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any Common Language Specification (CLS) compliant language. Executable code defined in the `HttpHandler` classes, rather than conventional ASP or ASP.NET Web pages, responds to these specific requests. HTTP handlers give you a means of interacting with the low-level request and response services of the IIS Web server and provide functionality much like ISAPI extensions but with a simpler programming model.       If your handler will access session state values, it must implement the <xref:System.Web.SessionState.IRequiresSessionState> interface (a marker interface with no methods).","needQuote":false,"needEscape":true,"nodes":[{"content":"You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any Common Language Specification (CLS) compliant language.","pos":[0,152]},{"content":"Executable code defined in the <ph id=\"ph1\">`HttpHandler`</ph> classes, rather than conventional ASP or ASP.NET Web pages, responds to these specific requests.","pos":[153,294],"source":" Executable code defined in the `HttpHandler` classes, rather than conventional ASP or ASP.NET Web pages, responds to these specific requests."},{"content":"HTTP handlers give you a means of interacting with the low-level request and response services of the IIS Web server and provide functionality much like ISAPI extensions but with a simpler programming model.","pos":[295,502]},{"content":"If your handler will access session state values, it must implement the &lt;xref:System.Web.SessionState.IRequiresSessionState&gt; interface (a marker interface with no methods).","pos":[509,681],"source":"       If your handler will access session state values, it must implement the <xref:System.Web.SessionState.IRequiresSessionState> interface (a marker interface with no methods)."}]},{"pos":[1546,1660],"content":"Gets a value indicating whether another request can use the <bpt id=\"p1\">&lt;xref href=\"System.Web.IHttpHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether another request can use the <xref href=\"System.Web.IHttpHandler\"></xref> instance."},{"pos":[1672,1813],"content":"You explicitly set the IsReusable property to <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph> by code you provide that overrides the IsReusable property accessor (getter).","needQuote":true,"needEscape":true,"source":"You explicitly set the IsReusable property to `true` or `false` by code you provide that overrides the IsReusable property accessor (getter)."},{"pos":[2478,2687],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Web.IHttpHandler\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance is reusable; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Web.IHttpHandler\"></xref> instance is reusable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3181,3383],"content":"Enables processing of HTTP Web requests by a custom <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_HttpHandler\" name=\"HttpHandler\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that implements the <bpt id=\"p2\">&lt;xref href=\"System.Web.IHttpHandler\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> interface.","needQuote":true,"needEscape":true,"source":"Enables processing of HTTP Web requests by a custom <xref uid=\"langword_csharp_HttpHandler\" name=\"HttpHandler\" href=\"\"></xref> that implements the <xref href=\"System.Web.IHttpHandler\"></xref> interface."},{"pos":[3395,3504],"content":"Place your custom <ph id=\"ph1\">`HttpHandler`</ph> code in the ProcessRequest virtual method, as shown in the following example.","needQuote":true,"needEscape":true,"source":"Place your custom `HttpHandler` code in the ProcessRequest virtual method, as shown in the following example."},{"pos":[4228,4659],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides references to the intrinsic server objects (for example, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Request\" name=\"Request\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Response\" name=\"Response\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_Session\" name=\"Session\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>, and <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_Server\" name=\"Server\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>) used to service HTTP requests.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Web.HttpContext\"></xref> object that provides references to the intrinsic server objects (for example, <xref uid=\"langword_csharp_Request\" name=\"Request\" href=\"\"></xref>, <xref uid=\"langword_csharp_Response\" name=\"Response\" href=\"\"></xref>, <xref uid=\"langword_csharp_Session\" name=\"Session\" href=\"\"></xref>, and <xref uid=\"langword_csharp_Server\" name=\"Server\" href=\"\"></xref>) used to service HTTP requests."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.IHttpHandler\n  id: IHttpHandler\n  children:\n  - System.Web.IHttpHandler.IsReusable\n  - System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)\n  langs:\n  - csharp\n  name: IHttpHandler\n  nameWithType: IHttpHandler\n  fullName: System.Web.IHttpHandler\n  type: Interface\n  summary: Defines the contract that ASP.NET implements to synchronously process HTTP Web requests using custom HTTP handlers.\n  remarks: \"You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any Common Language Specification (CLS) compliant language. Executable code defined in the `HttpHandler` classes, rather than conventional ASP or ASP.NET Web pages, responds to these specific requests. HTTP handlers give you a means of interacting with the low-level request and response services of the IIS Web server and provide functionality much like ISAPI extensions but with a simpler programming model.  \\n  \\n If your handler will access session state values, it must implement the <xref:System.Web.SessionState.IRequiresSessionState> interface (a marker interface with no methods).\"\n  syntax:\n    content: public interface IHttpHandler\n  implements: []\n  platform:\n  - net462\n- uid: System.Web.IHttpHandler.IsReusable\n  id: IsReusable\n  parent: System.Web.IHttpHandler\n  langs:\n  - csharp\n  name: IsReusable\n  nameWithType: IHttpHandler.IsReusable\n  fullName: System.Web.IHttpHandler.IsReusable\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a value indicating whether another request can use the <xref href=\"System.Web.IHttpHandler\"></xref> instance.\n  remarks: You explicitly set the IsReusable property to `true` or `false` by code you provide that overrides the IsReusable property accessor (getter).\n  example:\n  - \"The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx. All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.  \\n  \\n [!code-cs[Classic IHttpHandler.ProcessRequest Example#1](~/add/codesnippet/csharp/p-system.web.ihttphandle_1.cs)]\\n [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/add/codesnippet/visualbasic/p-system.web.ihttphandle_1.vb)]\"\n  syntax:\n    content: public bool IsReusable { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Web.IHttpHandler\"></xref> instance is reusable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.IHttpHandler.IsReusable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)\n  id: ProcessRequest(System.Web.HttpContext)\n  parent: System.Web.IHttpHandler\n  langs:\n  - csharp\n  name: ProcessRequest(HttpContext)\n  nameWithType: IHttpHandler.ProcessRequest(HttpContext)\n  fullName: System.Web.IHttpHandler.ProcessRequest(HttpContext)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Enables processing of HTTP Web requests by a custom <xref uid=\"langword_csharp_HttpHandler\" name=\"HttpHandler\" href=\"\"></xref> that implements the <xref href=\"System.Web.IHttpHandler\"></xref> interface.\n  remarks: Place your custom `HttpHandler` code in the ProcessRequest virtual method, as shown in the following example.\n  example:\n  - \"The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx. All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.  \\n  \\n [!code-cs[Classic IHttpHandler.ProcessRequest Example#1](~/add/codesnippet/csharp/m-system.web.ihttphandle_1.cs)]\\n [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/add/codesnippet/visualbasic/m-system.web.ihttphandle_1.vb)]\"\n  syntax:\n    content: public void ProcessRequest (System.Web.HttpContext context);\n    parameters:\n    - id: context\n      type: System.Web.HttpContext\n      description: An <xref href=\"System.Web.HttpContext\"></xref> object that provides references to the intrinsic server objects (for example, <xref uid=\"langword_csharp_Request\" name=\"Request\" href=\"\"></xref>, <xref uid=\"langword_csharp_Response\" name=\"Response\" href=\"\"></xref>, <xref uid=\"langword_csharp_Session\" name=\"Session\" href=\"\"></xref>, and <xref uid=\"langword_csharp_Server\" name=\"Server\" href=\"\"></xref>) used to service HTTP requests.\n  overload: System.Web.IHttpHandler.ProcessRequest*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.IHttpHandler.IsReusable\n  parent: System.Web.IHttpHandler\n  isExternal: false\n  name: IsReusable\n  nameWithType: IHttpHandler.IsReusable\n  fullName: System.Web.IHttpHandler.IsReusable\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)\n  parent: System.Web.IHttpHandler\n  isExternal: false\n  name: ProcessRequest(HttpContext)\n  nameWithType: IHttpHandler.ProcessRequest(HttpContext)\n  fullName: System.Web.IHttpHandler.ProcessRequest(HttpContext)\n- uid: System.Web.HttpContext\n  parent: System.Web\n  isExternal: false\n  name: HttpContext\n  nameWithType: HttpContext\n  fullName: System.Web.HttpContext\n- uid: System.Web.IHttpHandler.IsReusable*\n  parent: System.Web.IHttpHandler\n  isExternal: false\n  name: IsReusable\n  nameWithType: IHttpHandler.IsReusable\n- uid: System.Web.IHttpHandler.ProcessRequest*\n  parent: System.Web.IHttpHandler\n  isExternal: false\n  name: ProcessRequest\n  nameWithType: IHttpHandler.ProcessRequest\n"}