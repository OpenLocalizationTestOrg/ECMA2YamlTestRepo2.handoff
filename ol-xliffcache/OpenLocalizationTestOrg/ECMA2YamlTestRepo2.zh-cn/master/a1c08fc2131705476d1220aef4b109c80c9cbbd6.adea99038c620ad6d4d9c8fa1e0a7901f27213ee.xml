{"nodes":[{"pos":[1425,1587],"content":"Provides an object that enables two <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> controls to form a connection. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an object that enables two <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> controls to form a connection.","pos":[0,130],"source":"Provides an object that enables two <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> controls to form a connection."},{"content":"This class cannot be inherited.","pos":[131,162]}]},{"pos":[1600,10470],"content":"In the Web Parts control set, a connection is a link or association between two <xref:System.Web.UI.WebControls.WebParts.WebPart> (or other server or user) controls that enables them to share data. This ability to share data allows connected controls to be used in ways that exceed the functionality offered by the isolated controls. For example, if one control provides postal code data, and another control can read that data and provide local weather information based on the postal code, then the connected capability of the two controls provides more value to users. To extend this example, other controls could be created that also display information based on a postal code, such as a control with links to local news, and all these controls that can work with postal code data could share data with the single control that provides a postal code. End users of Web Parts applications can create and manage connections between all such compatible controls directly from a Web browser, using the standard connections user interface (UI) provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control, or using a custom UI provided by a developer.       This WebPartConnection class overview is a general statement of the basic details for creating a connection. For more on specific components and requirements involved in creating connections, see [Web Parts Connections Overview](~/add/includes/ajax-current-ext-md.md), or see the reference classes and code examples mentioned in the following discussion. There are several fundamental aspects of a Web Parts connection:      -   Two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Every Web Parts connection consists of two controls. It is possible for a control to participate in more than one connection simultaneously, but every single connection consists of exactly two controls. The controls can derive directly from the <xref:System.Web.UI.WebControls.WebParts.WebPart> base class, or they can be other server controls, including ASP.NET controls, custom server controls, and user controls. Controls that do not derive from the <xref:System.Web.UI.WebControls.WebParts.WebPart> class, if placed in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone, are automatically wrapped with a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object at run time, which enables them to inherit from the <xref:System.Web.UI.WebControls.WebParts.WebPart> class and function as run-time <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.      -   Controls residing in <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zones. Both <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and any other type of server control must reside in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone to be able to participate in Web Parts connections (and most other Web Parts features).      -   Consumers and providers. In every Web Parts connection there are two controls: a provider of data and a consumer of data. The provider furnishes data to the consumer through a specified callback method that returns data in the form of an interface. (For an example of how to create and specify the callback method, see the Example section of this topic.) This callback method is known as a provider connection point. The details of this connection point (its \"friendly\" name, an ID, and the type of the returned interface) are contained in a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associated with the provider control. The consumer receives the data through a specified method that can accept an instance of the interface. This method is known as a consumer connection point, and the details of the connection point (name, ID, and type of interface) are contained in a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associated with the consumer control.      -   Compatible controls or a valid transformer. For a connection to work, the consumer and provider must either be compatible (meaning that their specified connection point methods can work with the same type of interface), or there must be a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object capable of translating the type offered by the provider into a type understood by the consumer.      -   A WebPartConnection object. For a connection to exist, there must be an instance of the WebPartConnection class that contains references to the provider and consumer controls, along with the details of their connection points. If the provider and consumer are incompatible and instead use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to connect, the connection references the transformer.      -   A means of establishing the connection. After compatible consumer and provider controls have been properly designed with connection point methods and placed in a zone, and a WebPartConnection object is available, the last basic step necessary is to initiate the connection. One way this can happen is for users to create the connection through the UI. If you place an `<asp:connectionszone>` element on the page, and the other required components for a connection are in place, at run time a user can switch the page into connect display mode, click a connect verb on the verbs menu of either the provider or consumer, and a connection UI (based on the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control) will appear. Through this UI, the user can initiate the connection. Another way to initiate the connection is to do it programmatically. In either case, whether through the UI or programmatically, the underlying method that initiates the connection is the same. The application calls the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method (or the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method if using a transformer) on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, passing to it the provider, the consumer, and their respective connection point objects, and the method returns a WebPartConnection object.       The WebPartConnection class defines an object that encapsulates the essential details of a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The class consists almost entirely of properties related to the details of a particular connection. Several properties concern the consumer control in a connection. The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> property references the consumer control itself, and the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> property references the consumer's ID. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, which contains the details of the consumer's connection point, is referenced by the consumer's <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> property. The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> property references the ID of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. All these consumer-related connection properties must have a value assigned to them to create a connection.       The WebPartConnection class also has several properties that relate to the provider control in a connection, and these correspond to the properties for a consumer. The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> property references the provider control itself, while the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> property references its ID. The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> property references the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, and the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> property references the ID of the provider's connection point.       Several properties concern the state of the connection. The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> property indicates whether the connection is active (currently exchanging data) or inactive (still connected but not actively sharing data). The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> property indicates whether the connection is a shared (available to all users of a page) or a user-specific connection, and the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> property indicates whether the control is static (declared in the page markup and thus permanent) or dynamic (created programmatically, meaning that it can be deleted).","needQuote":false,"needEscape":true,"nodes":[{"content":"In the Web Parts control set, a connection is a link or association between two &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; (or other server or user) controls that enables them to share data.","pos":[0,197],"source":"In the Web Parts control set, a connection is a link or association between two <xref:System.Web.UI.WebControls.WebParts.WebPart> (or other server or user) controls that enables them to share data."},{"content":"This ability to share data allows connected controls to be used in ways that exceed the functionality offered by the isolated controls.","pos":[198,333]},{"content":"For example, if one control provides postal code data, and another control can read that data and provide local weather information based on the postal code, then the connected capability of the two controls provides more value to users.","pos":[334,571]},{"content":"To extend this example, other controls could be created that also display information based on a postal code, such as a control with links to local news, and all these controls that can work with postal code data could share data with the single control that provides a postal code.","pos":[572,854]},{"content":"End users of Web Parts applications can create and manage connections between all such compatible controls directly from a Web browser, using the standard connections user interface (UI) provided by the &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionsZone&gt; control, or using a custom UI provided by a developer.","pos":[855,1170],"source":" End users of Web Parts applications can create and manage connections between all such compatible controls directly from a Web browser, using the standard connections user interface (UI) provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control, or using a custom UI provided by a developer."},{"content":"This WebPartConnection class overview is a general statement of the basic details for creating a connection.","pos":[1177,1285]},{"content":"For more on specific components and requirements involved in creating connections, see <bpt id=\"p1\">[</bpt>Web Parts Connections Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>, or see the reference classes and code examples mentioned in the following discussion.","pos":[1286,1531],"source":" For more on specific components and requirements involved in creating connections, see [Web Parts Connections Overview](~/add/includes/ajax-current-ext-md.md), or see the reference classes and code examples mentioned in the following discussion."},{"content":"There are several fundamental aspects of a Web Parts connection:      -   Two &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; controls.","pos":[1532,1669],"source":" There are several fundamental aspects of a Web Parts connection:      -   Two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls."},{"content":"Every Web Parts connection consists of two controls.","pos":[1670,1722]},{"content":"It is possible for a control to participate in more than one connection simultaneously, but every single connection consists of exactly two controls.","pos":[1723,1872]},{"content":"The controls can derive directly from the &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; base class, or they can be other server controls, including ASP.NET controls, custom server controls, and user controls.","pos":[1873,2085],"source":" The controls can derive directly from the <xref:System.Web.UI.WebControls.WebParts.WebPart> base class, or they can be other server controls, including ASP.NET controls, custom server controls, and user controls."},{"content":"Controls that do not derive from the &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; class, if placed in a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase&gt; zone, are automatically wrapped with a &lt;xref:System.Web.UI.WebControls.WebParts.GenericWebPart&gt; object at run time, which enables them to inherit from the &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; class and function as run-time &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; controls.","pos":[2086,2548],"source":" Controls that do not derive from the <xref:System.Web.UI.WebControls.WebParts.WebPart> class, if placed in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone, are automatically wrapped with a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object at run time, which enables them to inherit from the <xref:System.Web.UI.WebControls.WebParts.WebPart> class and function as run-time <xref:System.Web.UI.WebControls.WebParts.WebPart> controls."},{"content":"-   Controls residing in &lt;xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase&gt; zones.","pos":[2554,2643],"source":"      -   Controls residing in <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zones."},{"content":"Both &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; controls and any other type of server control must reside in a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase&gt; zone to be able to participate in Web Parts connections (and most other Web Parts features).","pos":[2644,2912],"source":" Both <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and any other type of server control must reside in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone to be able to participate in Web Parts connections (and most other Web Parts features)."},{"content":"-   Consumers and providers.","pos":[2918,2946]},{"content":"In every Web Parts connection there are two controls: a provider of data and a consumer of data.","pos":[2947,3043]},{"content":"The provider furnishes data to the consumer through a specified callback method that returns data in the form of an interface.","pos":[3044,3170]},{"content":"(For an example of how to create and specify the callback method, see the Example section of this topic.) This callback method is known as a provider connection point.","pos":[3171,3338]},{"content":"The details of this connection point (its \"friendly\" name, an ID, and the type of the returned interface) are contained in a &lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt; object associated with the provider control.","pos":[3339,3574],"source":" The details of this connection point (its \"friendly\" name, an ID, and the type of the returned interface) are contained in a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associated with the provider control."},{"content":"The consumer receives the data through a specified method that can accept an instance of the interface.","pos":[3575,3678]},{"content":"This method is known as a consumer connection point, and the details of the connection point (name, ID, and type of interface) are contained in a &lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt; object associated with the consumer control.","pos":[3679,3935],"source":" This method is known as a consumer connection point, and the details of the connection point (name, ID, and type of interface) are contained in a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associated with the consumer control."},{"content":"-   Compatible controls or a valid transformer.","pos":[3941,3988]},{"content":"For a connection to work, the consumer and provider must either be compatible (meaning that their specified connection point methods can work with the same type of interface), or there must be a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartTransformer&gt; object capable of translating the type offered by the provider into a type understood by the consumer.","pos":[3989,4347],"source":" For a connection to work, the consumer and provider must either be compatible (meaning that their specified connection point methods can work with the same type of interface), or there must be a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object capable of translating the type offered by the provider into a type understood by the consumer."},{"content":"-   A WebPartConnection object.","pos":[4353,4384]},{"content":"For a connection to exist, there must be an instance of the WebPartConnection class that contains references to the provider and consumer controls, along with the details of their connection points.","pos":[4385,4583]},{"content":"If the provider and consumer are incompatible and instead use a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartTransformer&gt; object to connect, the connection references the transformer.","pos":[4584,4770],"source":" If the provider and consumer are incompatible and instead use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to connect, the connection references the transformer."},{"content":"-   A means of establishing the connection.","pos":[4776,4819]},{"content":"After compatible consumer and provider controls have been properly designed with connection point methods and placed in a zone, and a WebPartConnection object is available, the last basic step necessary is to initiate the connection.","pos":[4820,5053]},{"content":"One way this can happen is for users to create the connection through the UI.","pos":[5054,5131]},{"content":"If you place an <ph id=\"ph1\">`&lt;asp:connectionszone&gt;`</ph> element on the page, and the other required components for a connection are in place, at run time a user can switch the page into connect display mode, click a connect verb on the verbs menu of either the provider or consumer, and a connection UI (based on the &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionsZone&gt; control) will appear.","pos":[5132,5512],"source":" If you place an `<asp:connectionszone>` element on the page, and the other required components for a connection are in place, at run time a user can switch the page into connect display mode, click a connect verb on the verbs menu of either the provider or consumer, and a connection UI (based on the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control) will appear."},{"content":"Through this UI, the user can initiate the connection.","pos":[5513,5567]},{"content":"Another way to initiate the connection is to do it programmatically.","pos":[5568,5636]},{"content":"In either case, whether through the UI or programmatically, the underlying method that initiates the connection is the same.","pos":[5637,5761]},{"content":"The application calls the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A&gt; method (or the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A&gt; method if using a transformer) on the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control, passing to it the provider, the consumer, and their respective connection point objects, and the method returns a WebPartConnection object.","pos":[5762,6198],"source":" The application calls the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method (or the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method if using a transformer) on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, passing to it the provider, the consumer, and their respective connection point objects, and the method returns a WebPartConnection object."},{"content":"The WebPartConnection class defines an object that encapsulates the essential details of a connection between two &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; controls.","pos":[6205,6378],"source":"       The WebPartConnection class defines an object that encapsulates the essential details of a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls."},{"content":"The class consists almost entirely of properties related to the details of a particular connection.","pos":[6379,6478]},{"content":"Several properties concern the consumer control in a connection.","pos":[6479,6543]},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A&gt; property references the consumer control itself, and the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A&gt; property references the consumer's ID.","pos":[6544,6789],"source":" The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> property references the consumer control itself, and the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> property references the consumer's ID."},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt; object, which contains the details of the consumer's connection point, is referenced by the consumer's &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A&gt; property.","pos":[6790,7059],"source":" The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, which contains the details of the consumer's connection point, is referenced by the consumer's <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> property."},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A&gt; property references the ID of the &lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt; object.","pos":[7060,7260],"source":" The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> property references the ID of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object."},{"content":"All these consumer-related connection properties must have a value assigned to them to create a connection.","pos":[7261,7368]},{"content":"The WebPartConnection class also has several properties that relate to the provider control in a connection, and these correspond to the properties for a consumer.","pos":[7375,7538]},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A&gt; property references the provider control itself, while the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A&gt; property references its ID.","pos":[7539,7775],"source":" The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> property references the provider control itself, while the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> property references its ID."},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A&gt; property references the &lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt; object, and the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A&gt; property references the ID of the provider's connection point.","pos":[7776,8124],"source":" The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> property references the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, and the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> property references the ID of the provider's connection point."},{"content":"Several properties concern the state of the connection.","pos":[8131,8186]},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A&gt; property indicates whether the connection is active (currently exchanging data) or inactive (still connected but not actively sharing data).","pos":[8187,8403],"source":" The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> property indicates whether the connection is active (currently exchanging data) or inactive (still connected but not actively sharing data)."},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A&gt; property indicates whether the connection is a shared (available to all users of a page) or a user-specific connection, and the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A&gt; property indicates whether the control is static (declared in the page markup and thus permanent) or dynamic (created programmatically, meaning that it can be deleted).","pos":[8404,8848],"source":" The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> property indicates whether the connection is a shared (available to all users of a page) or a user-specific connection, and the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> property indicates whether the control is static (declared in the page markup and thus permanent) or dynamic (created programmatically, meaning that it can be deleted)."}]},{"pos":[19868,19982],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref> class."},{"pos":[19995,22303],"content":"The WebPartConnection constructor is public so that the ASP.NET parser can create an instance when a connection is declared in the markup of a Web page; this constructor is not intended to be used in developer code.       When you want to create a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object programmatically, you should use the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> or the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> method provided in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. These methods handle the many details of creating a connection, and return a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.       The WebPartConnection constructor for the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> class sets the values of the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> and <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> properties to `true`. Thus the default state of a new connection is to be static (meaning that it is declared in the markup of the containing Web page) and shared (visible to all users of the page). This will be the case when you add a connection in the typical scenario, by declaring the connection in the markup of the page with an `<asp:webpartconnection>` element. However, in other circumstances a connection will have different values for these properties. For example, when you add a connection programmatically by creating the connection object in code, and the user is viewing the page in the default user personalization scope, the connection is created as a dynamic, per-user(visible only to the specific user) connection.      > [!NOTE] >  The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> and <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> properties are read-only, and these properties that determine the nature of a connection are set internally by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control depending on how a connection is created (declaratively in the page markup, or programmatically through your code or the user interface).","needQuote":false,"needEscape":true,"nodes":[{"content":"The WebPartConnection constructor is public so that the ASP.NET parser can create an instance when a connection is declared in the markup of a Web page; this constructor is not intended to be used in developer code.","pos":[0,215]},{"content":"When you want to create a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection&gt; object programmatically, you should use the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName&gt; or the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName&gt; method provided in the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control.","pos":[222,649],"source":"       When you want to create a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object programmatically, you should use the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> or the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> method provided in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control."},{"content":"These methods handle the many details of creating a connection, and return a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection&gt; object.","pos":[650,794],"source":" These methods handle the many details of creating a connection, and return a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object."},{"content":"The WebPartConnection constructor for the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection&gt; class sets the values of the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A&gt; and &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A&gt; properties to <ph id=\"ph1\">`true`</ph>.","pos":[801,1101],"source":"       The WebPartConnection constructor for the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> class sets the values of the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> and <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> properties to `true`."},{"content":"Thus the default state of a new connection is to be static (meaning that it is declared in the markup of the containing Web page) and shared (visible to all users of the page).","pos":[1102,1278]},{"content":"This will be the case when you add a connection in the typical scenario, by declaring the connection in the markup of the page with an <ph id=\"ph1\">`&lt;asp:webpartconnection&gt;`</ph> element.","pos":[1279,1448],"source":" This will be the case when you add a connection in the typical scenario, by declaring the connection in the markup of the page with an `<asp:webpartconnection>` element."},{"content":"However, in other circumstances a connection will have different values for these properties.","pos":[1449,1542]},{"content":"For example, when you add a connection programmatically by creating the connection object in code, and the user is viewing the page in the default user personalization scope, the connection is created as a dynamic, per-user(visible only to the specific user) connection.","pos":[1543,1813]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A&gt; and &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A&gt; properties are read-only, and these properties that determine the nature of a connection are set internally by the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control depending on how a connection is created (declaratively in the page markup, or programmatically through your code or the user interface).","pos":[1819,2301],"source":"      > [!NOTE] >  The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> and <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> properties are read-only, and these properties that determine the nature of a connection are set internally by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control depending on how a connection is created (declaratively in the page markup, or programmatically through your code or the user interface)."}]},{"pos":[22894,23027],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that is acting as the consumer control in a connection.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> object that is acting as the consumer control in a connection."},{"pos":[23039,23399],"content":"Every Web Parts connection consists of two controls that share data. One control acts as the provider of data, and the other control acts as a consumer, receiving and processing the data from the provider. The Consumer property gets a reference to the <xref:System.Web.UI.WebControls.WebParts.WebPart> control acting as a consumer in a connection relationship.","needQuote":true,"needEscape":true,"nodes":[{"content":"Every Web Parts connection consists of two controls that share data. One control acts as the provider of data, and the other control acts as a consumer, receiving and processing the data from the provider. The Consumer property gets a reference to the <xref:System.Web.UI.WebControls.WebParts.WebPart> control acting as a consumer in a connection relationship.","pos":[0,360],"nodes":[{"content":"Every Web Parts connection consists of two controls that share data.","pos":[0,68]},{"content":"One control acts as the provider of data, and the other control acts as a consumer, receiving and processing the data from the provider.","pos":[69,205]},{"content":"The Consumer property gets a reference to the &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; control acting as a consumer in a connection relationship.","pos":[206,360],"source":" The Consumer property gets a reference to the <xref:System.Web.UI.WebControls.WebParts.WebPart> control acting as a consumer in a connection relationship."}]}]},{"pos":[27309,27452],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the Web Parts control acting as the consumer in a connection.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> that represents the Web Parts control acting as the consumer in a connection."},{"pos":[27652,27759],"content":"The length of the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*> property is zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*&gt; property is zero.","pos":[0,107],"source":"The length of the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*> property is zero."}]},{"pos":[28264,28373],"content":"Gets the object that serves as a connection point for a control that is acting as a consumer in a connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the object that serves as a connection point for a control that is acting as a consumer in a connection.","pos":[0,109]}]},{"pos":[28386,30150],"content":"One of the required steps for creating a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls is to create connection points for each control. The consumer connection point is an object that contains the information about how to connect to the control acting as a consumer. In the consumer's source code, one of the methods must be identified with the `ConnectionConsumer` attribute. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object that is associated with a consumer control contains details about the method and the attribute, including an ID for the method, a display name for use in the user interface (UI), and what type of interface the method can retrieve. This set of information about the consumer, its method for forming connections, and the type of interface it understands, collectively forms a consumer connection point.       By default, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object can connect to only one <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object at a time. A consumer could have multiple methods identified as possible consumer connection points, but a consumer can only participate in one connection as a consumer (hence, only one of its consumer connection points can be active) at a time. In contrast, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> can connect to any number of <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This default behavior can be changed by overriding the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> property on the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> attribute.","needQuote":false,"needEscape":true,"nodes":[{"content":"One of the required steps for creating a connection between two &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; controls is to create connection points for each control.","pos":[0,171],"source":"One of the required steps for creating a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls is to create connection points for each control."},{"content":"The consumer connection point is an object that contains the information about how to connect to the control acting as a consumer.","pos":[172,302]},{"content":"In the consumer's source code, one of the methods must be identified with the <ph id=\"ph1\">`ConnectionConsumer`</ph> attribute.","pos":[303,412],"source":" In the consumer's source code, one of the methods must be identified with the `ConnectionConsumer` attribute."},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt; object that is associated with a consumer control contains details about the method and the attribute, including an ID for the method, a display name for use in the user interface (UI), and what type of interface the method can retrieve.","pos":[413,720],"source":" The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object that is associated with a consumer control contains details about the method and the attribute, including an ID for the method, a display name for use in the user interface (UI), and what type of interface the method can retrieve."},{"content":"This set of information about the consumer, its method for forming connections, and the type of interface it understands, collectively forms a consumer connection point.","pos":[721,890]},{"content":"By default, a &lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt; object can connect to only one &lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt; object at a time.","pos":[897,1091],"source":"       By default, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object can connect to only one <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object at a time."},{"content":"A consumer could have multiple methods identified as possible consumer connection points, but a consumer can only participate in one connection as a consumer (hence, only one of its consumer connection points can be active) at a time.","pos":[1092,1326]},{"content":"In contrast, a &lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt; can connect to any number of &lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt; objects.","pos":[1327,1511],"source":" In contrast, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> can connect to any number of <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects."},{"content":"This default behavior can be changed by overriding the &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A&gt; property on the &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute&gt; attribute.","pos":[1512,1762],"source":" This default behavior can be changed by overriding the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> property on the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> attribute."}]},{"pos":[34178,34313],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with the consumer control in a connection.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\"></xref> associated with the consumer control in a connection."},{"pos":[34935,35081],"content":"Gets or sets the property value on a connection that references the ID of the object serving as the consumer connection point for that connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the property value on a connection that references the ID of the object serving as the consumer connection point for that connection.","pos":[0,146]}]},{"pos":[35094,37089],"content":"For a static connection declared in the markup of a Web page, developers can specify which consumer connection point will be used for the connection by assigning a value to the `ConsumerConnectionPointID` attribute on the `<asp:webpartconnection>` element. If a value is not assigned to the attribute, the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> property value is used.       When you create dynamic (programmatic) connections, normally you should not set the value of the ConsumerConnectionPointID property. You can simply call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, passing to it the consumer and consumer connection point objects (along with the other required parameters), and that method determines the correct ID to use for the consumer's connection point. Similarly, when you disconnect, you can call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> method without needing to specify the ConsumerConnectionPointID property value.      > [!NOTE] >  The ID of a consumer's connection point can be determined when you designate a <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control as a consumer. You must identify a method in the consumer that retrieves an instance of an interface furnished by either a provider control or a transformer. To identify the method, mark it with the `ConnectionConsumer` code attribute. When you add this attribute, you can add an optional string value parameter that serves as an ID for the consumer's <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. If you supply a value for the optional ID parameter, that value becomes the value of the ConsumerConnectionPointID property for the connection. If you do not supply an ID value, the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> property value is used.","needQuote":false,"needEscape":true,"nodes":[{"content":"For a static connection declared in the markup of a Web page, developers can specify which consumer connection point will be used for the connection by assigning a value to the <ph id=\"ph1\">`ConsumerConnectionPointID`</ph> attribute on the <ph id=\"ph2\">`&lt;asp:webpartconnection&gt;`</ph> element.","pos":[0,256],"source":"For a static connection declared in the markup of a Web page, developers can specify which consumer connection point will be used for the connection by assigning a value to the `ConsumerConnectionPointID` attribute on the `<asp:webpartconnection>` element."},{"content":"If a value is not assigned to the attribute, the &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID&gt; property value is used.","pos":[257,397],"source":" If a value is not assigned to the attribute, the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> property value is used."},{"content":"When you create dynamic (programmatic) connections, normally you should not set the value of the ConsumerConnectionPointID property.","pos":[404,536]},{"content":"You can simply call the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A&gt; method on the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control, passing to it the consumer and consumer connection point objects (along with the other required parameters), and that method determines the correct ID to use for the consumer's connection point.","pos":[537,911],"source":" You can simply call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, passing to it the consumer and consumer connection point objects (along with the other required parameters), and that method determines the correct ID to use for the consumer's connection point."},{"content":"Similarly, when you disconnect, you can call the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A&gt; method without needing to specify the ConsumerConnectionPointID property value.","pos":[912,1119],"source":" Similarly, when you disconnect, you can call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> method without needing to specify the ConsumerConnectionPointID property value."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The ID of a consumer's connection point can be determined when you designate a &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; or other server control as a consumer.","pos":[1125,1305],"source":"      > [!NOTE] >  The ID of a consumer's connection point can be determined when you designate a <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control as a consumer."},{"content":"You must identify a method in the consumer that retrieves an instance of an interface furnished by either a provider control or a transformer.","pos":[1306,1448]},{"content":"To identify the method, mark it with the <ph id=\"ph1\">`ConnectionConsumer`</ph> code attribute.","pos":[1449,1526],"source":" To identify the method, mark it with the `ConnectionConsumer` code attribute."},{"content":"When you add this attribute, you can add an optional string value parameter that serves as an ID for the consumer's &lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt; object.","pos":[1527,1716],"source":" When you add this attribute, you can add an optional string value parameter that serves as an ID for the consumer's <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object."},{"content":"If you supply a value for the optional ID parameter, that value becomes the value of the ConsumerConnectionPointID property for the connection.","pos":[1717,1860]},{"content":"If you do not supply an ID value, the &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID&gt; property value is used.","pos":[1861,1990],"source":" If you do not supply an ID value, the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> property value is used."}]},{"pos":[41117,41181],"content":"A string that contains the ID for the consumer connection point.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that contains the ID for the consumer connection point.","pos":[0,64]}]},{"pos":[41730,41921],"content":"Gets or sets the property value on a connection that references the ID of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control acting as a consumer for that connection.","needQuote":true,"needEscape":true,"source":"Gets or sets the property value on a connection that references the ID of the <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control acting as a consumer for that connection."},{"pos":[41933,42249],"content":"The ConsumerID property value is required when you create a connection between <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. If a value is not assigned to the property, an exception is thrown when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control attempts to activate the connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ConsumerID property value is required when you create a connection between <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. If a value is not assigned to the property, an exception is thrown when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control attempts to activate the connection.","pos":[0,316],"nodes":[{"content":"The ConsumerID property value is required when you create a connection between &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; controls.","pos":[0,138],"source":"The ConsumerID property value is required when you create a connection between <xref:System.Web.UI.WebControls.WebParts.WebPart> controls."},{"content":"If a value is not assigned to the property, an exception is thrown when the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control attempts to activate the connection.","pos":[139,316],"source":" If a value is not assigned to the property, an exception is thrown when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control attempts to activate the connection."}]}]},{"pos":[46118,46200],"content":"A string that contains the ID of the control acting as a consumer in a connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that contains the ID of the control acting as a consumer in a connection.","pos":[0,82]}]},{"pos":[46694,46800],"content":"Gets or sets the ID of a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets the ID of a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref> object."},{"pos":[46813,47595],"content":"Every <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object has a unique value assigned to its ID property. This is to ensure that there is a way to distinguish between multiple connections.       If you create a static connection by declaring an `<asp:webpartconnection>` element in a Web page, and you do not assign a value to the `ID` attribute for the connection, an exception is thrown when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control attempts to activate the connection.       When the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control creates a new dynamic connection, it calls the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> method to generate a unique ID for the connection.","needQuote":false,"needEscape":true,"nodes":[{"content":"Every &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection&gt; object has a unique value assigned to its ID property.","pos":[0,120],"source":"Every <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object has a unique value assigned to its ID property."},{"content":"This is to ensure that there is a way to distinguish between multiple connections.","pos":[121,203]},{"content":"If you create a static connection by declaring an <ph id=\"ph1\">`&lt;asp:webpartconnection&gt;`</ph> element in a Web page, and you do not assign a value to the <ph id=\"ph2\">`ID`</ph> attribute for the connection, an exception is thrown when the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control attempts to activate the connection.","pos":[210,514],"source":"       If you create a static connection by declaring an `<asp:webpartconnection>` element in a Web page, and you do not assign a value to the `ID` attribute for the connection, an exception is thrown when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control attempts to activate the connection."},{"content":"When the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control creates a new dynamic connection, it calls the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A&gt; method to generate a unique ID for the connection.","pos":[521,778],"source":"       When the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control creates a new dynamic connection, it calls the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> method to generate a unique ID for the connection."}]},{"pos":[51547,51656],"content":"A string that contains the ID of a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that contains the ID of a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref>."},{"pos":[52172,52385],"content":"Gets a value that indicates whether a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is currently established and able to exchange data between its provider and consumer controls.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref> object is currently established and able to exchange data between its provider and consumer controls."},{"pos":[52398,53872],"content":"The IsActive property indicates a state of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object. When the connection is in this state, the provider and consumer controls in the connection are communicating and able to exchange data through a common interface or a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object.       When a user views a rendered page that includes an established connection in normal browse mode, the connection is typically active (unless it failed to be activated due to some conflict or other issue when the page loaded). In the early stages of the page and control life cycle, the property value is `false`. The connection is activated just after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control is raised. Specifically, the connection is activated after the consumer has retrieved an instance of the specified interface from the provider or a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object.       It is useful to know whether a connection is active in situations where there might be conflicts or synchronization issues due to multiple connections on a page. For example, if there is some kind of conflict between two connections, the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control has the option of not activating one of the connections to avoid the conflict.","needQuote":false,"needEscape":true,"nodes":[{"content":"The IsActive property indicates a state of a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection&gt; object.","pos":[0,112],"source":"The IsActive property indicates a state of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object."},{"content":"When the connection is in this state, the provider and consumer controls in the connection are communicating and able to exchange data through a common interface or a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartTransformer&gt; object.","pos":[113,348],"source":" When the connection is in this state, the provider and consumer controls in the connection are communicating and able to exchange data through a common interface or a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object."},{"content":"When a user views a rendered page that includes an established connection in normal browse mode, the connection is typically active (unless it failed to be activated due to some conflict or other issue when the page loaded).","pos":[355,579]},{"content":"In the early stages of the page and control life cycle, the property value is <ph id=\"ph1\">`false`</ph>.","pos":[580,666],"source":" In the early stages of the page and control life cycle, the property value is `false`."},{"content":"The connection is activated just after the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated&gt; event on the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control is raised.","pos":[667,876],"source":" The connection is activated just after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control is raised."},{"content":"Specifically, the connection is activated after the consumer has retrieved an instance of the specified interface from the provider or a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartTransformer&gt; object.","pos":[877,1082],"source":" Specifically, the connection is activated after the consumer has retrieved an instance of the specified interface from the provider or a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object."},{"content":"It is useful to know whether a connection is active in situations where there might be conflicts or synchronization issues due to multiple connections on a page.","pos":[1089,1250]},{"content":"For example, if there is some kind of conflict between two connections, the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control has the option of not activating one of the connections to avoid the conflict.","pos":[1251,1470],"source":" For example, if there is some kind of conflict between two connections, the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control has the option of not activating one of the connections to avoid the conflict."}]},{"pos":[56859,57023],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the connection is active; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the connection is active; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[57545,57716],"content":"Gets a value that indicates whether a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is visible to all users or only to the current user.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref> object is visible to all users or only to the current user."},{"pos":[57729,58656],"content":"As with individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object can be a shared or a per-user instance. A shared instance means that the connection is visible to all users of a Web page, and a per-user instance means the connection is visible only to a specific user.       In general, the way a connection is added to a page determines whether the connection is shared. If the connection is declared in the markup of a Web page, then the connection is shared and the IsShared property value is `true`. In addition, if the Web page is in shared personalization scope when a connection is added, the connection is also shared. Typically, when a user uses the `<asp:connectionszone>` user interface (UI) to add a connection, the page is in user personalization scope, so the connection is not shared and the IsShared property value is `false`.","needQuote":false,"needEscape":true,"nodes":[{"content":"As with individual &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; controls, a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection&gt; object can be a shared or a per-user instance.","pos":[0,187],"source":"As with individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object can be a shared or a per-user instance."},{"content":"A shared instance means that the connection is visible to all users of a Web page, and a per-user instance means the connection is visible only to a specific user.","pos":[188,351]},{"content":"In general, the way a connection is added to a page determines whether the connection is shared.","pos":[358,454]},{"content":"If the connection is declared in the markup of a Web page, then the connection is shared and the IsShared property value is <ph id=\"ph1\">`true`</ph>.","pos":[455,586],"source":" If the connection is declared in the markup of a Web page, then the connection is shared and the IsShared property value is `true`."},{"content":"In addition, if the Web page is in shared personalization scope when a connection is added, the connection is also shared.","pos":[587,709]},{"content":"Typically, when a user uses the <ph id=\"ph1\">`&lt;asp:connectionszone&gt;`</ph> user interface (UI) to add a connection, the page is in user personalization scope, so the connection is not shared and the IsShared property value is <ph id=\"ph2\">`false`</ph>.","pos":[710,925],"source":" Typically, when a user uses the `<asp:connectionszone>` user interface (UI) to add a connection, the page is in user personalization scope, so the connection is not shared and the IsShared property value is `false`."}]},{"pos":[63174,63338],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the connection is shared; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the connection is shared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[63860,64048],"content":"Gets a value that indicates whether a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is declared in the markup of a Web page, or created programmatically.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref> object is declared in the markup of a Web page, or created programmatically."},{"pos":[64061,64955],"content":"Connections between Web Parts controls can be either static or dynamic. A static connection is declared in the markup of a Web page, using an `<asp:WebPartConnection>` element. Dynamic connections are created programmatically or when a user creates a connection through the user interface (UI) defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control.       Static connections are shared objects, meaning they are available to all users of the Web page. Also, they are essentially permanent because, like a static <xref:System.Web.UI.WebControls.WebParts.WebPart> control, they cannot be permanently deleted.      > [!NOTE] >  While a static connection object cannot be permanently deleted, it can be permanently disconnected. In this case, the disconnected object would exist on the server, but an end user would never be aware of the object's existence in a page.","needQuote":false,"needEscape":true,"nodes":[{"content":"Connections between Web Parts controls can be either static or dynamic.","pos":[0,71]},{"content":"A static connection is declared in the markup of a Web page, using an <ph id=\"ph1\">`&lt;asp:WebPartConnection&gt;`</ph> element.","pos":[72,176],"source":" A static connection is declared in the markup of a Web page, using an `<asp:WebPartConnection>` element."},{"content":"Dynamic connections are created programmatically or when a user creates a connection through the user interface (UI) defined by the &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionsZone&gt; control.","pos":[177,375],"source":" Dynamic connections are created programmatically or when a user creates a connection through the user interface (UI) defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control."},{"content":"Static connections are shared objects, meaning they are available to all users of the Web page.","pos":[382,477]},{"content":"Also, they are essentially permanent because, like a static &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; control, they cannot be permanently deleted.","pos":[478,632],"source":" Also, they are essentially permanent because, like a static <xref:System.Web.UI.WebControls.WebParts.WebPart> control, they cannot be permanently deleted."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  While a static connection object cannot be permanently deleted, it can be permanently disconnected.","pos":[638,750],"source":"      > [!NOTE] >  While a static connection object cannot be permanently deleted, it can be permanently disconnected."},{"content":"In this case, the disconnected object would exist on the server, but an end user would never be aware of the object's existence in a page.","pos":[751,889]}]},{"pos":[67296,67460],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the connection is static; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the connection is static; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[67982,68113],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control that acts as the provider in a Web Parts connection.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control that acts as the provider in a Web Parts connection."},{"pos":[68126,68638],"content":"Every Web Parts connection consists of two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls--a consumer and a provider--and the Provider property returns a reference to the provider control in a connection.       Like its counterpart in a connection (the consumer control), the provider control is required to establish a connection. Whether you create the connection programmatically, or by declaring it in page persistence format, you must specify a control to act as the provider for a connection.","needQuote":false,"needEscape":true,"nodes":[{"content":"Every Web Parts connection consists of two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls--a consumer and a provider--and the Provider property returns a reference to the provider control in a connection.       Like its counterpart in a connection (the consumer control), the provider control is required to establish a connection. Whether you create the connection programmatically, or by declaring it in page persistence format, you must specify a control to act as the provider for a connection.","pos":[0,510],"nodes":[{"content":"Every Web Parts connection consists of two &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; controls--a consumer and a provider--and the Provider property returns a reference to the provider control in a connection.","pos":[0,216],"source":"Every Web Parts connection consists of two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls--a consumer and a provider--and the Provider property returns a reference to the provider control in a connection."},{"content":"Like its counterpart in a connection (the consumer control), the provider control is required to establish a connection.","pos":[223,343]},{"content":"Whether you create the connection programmatically, or by declaring it in page persistence format, you must specify a control to act as the provider for a connection.","pos":[344,510]}]}]},{"pos":[71255,71355],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that acts as the provider of data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> that acts as the provider of data."},{"pos":[71555,71668],"content":"The length of the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*> property value is zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*&gt; property value is zero.","pos":[0,113],"source":"The length of the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*> property value is zero."}]},{"pos":[72173,72339],"content":"Gets the object that serves as a connection point for a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control acting as a provider for a connection.","needQuote":true,"needEscape":true,"source":"Gets the object that serves as a connection point for a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control acting as a provider for a connection."},{"pos":[72352,74366],"content":"One of the required steps for creating a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls is to create connection points for each control. The provider connection point is an object that contains the information about how to connect to the control acting as a provider. In the provider's source code, one of the methods must be identified with the `ConnectionProvider` attribute. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> that is associated with a provider control contains details about the method and the attribute, including an ID for the method, a display name for use in the user interface (UI), and what type of interface instance the method can return to a consumer control. This set of information about the provider, its method for forming connections, and the type of interface it provides, collectively forms a provider connection point.       By default, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> can connect to only one <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object at a time. A consumer could have multiple methods identified as possible consumer connection points, but a consumer can only participate in one connection as a consumer (hence, only one of its consumer connection points can be active) at a time. In contrast, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> can connect to any number of <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects by default. For example, a provider control that provides a postal code could be connected to multiple consumer controls that use a postal code to create various kinds of data based on a postal code, such as weather data, news, and so on. This default behavior can be changed by overriding the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> property on the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> attribute.","needQuote":false,"needEscape":true,"nodes":[{"content":"One of the required steps for creating a connection between two &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; controls is to create connection points for each control.","pos":[0,171],"source":"One of the required steps for creating a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls is to create connection points for each control."},{"content":"The provider connection point is an object that contains the information about how to connect to the control acting as a provider.","pos":[172,302]},{"content":"In the provider's source code, one of the methods must be identified with the <ph id=\"ph1\">`ConnectionProvider`</ph> attribute.","pos":[303,412],"source":" In the provider's source code, one of the methods must be identified with the `ConnectionProvider` attribute."},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt; that is associated with a provider control contains details about the method and the attribute, including an ID for the method, a display name for use in the user interface (UI), and what type of interface instance the method can return to a consumer control.","pos":[413,742],"source":" The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> that is associated with a provider control contains details about the method and the attribute, including an ID for the method, a display name for use in the user interface (UI), and what type of interface instance the method can return to a consumer control."},{"content":"This set of information about the provider, its method for forming connections, and the type of interface it provides, collectively forms a provider connection point.","pos":[743,909]},{"content":"By default, a &lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt; can connect to only one &lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt; object at a time.","pos":[916,1103],"source":"       By default, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> can connect to only one <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object at a time."},{"content":"A consumer could have multiple methods identified as possible consumer connection points, but a consumer can only participate in one connection as a consumer (hence, only one of its consumer connection points can be active) at a time.","pos":[1104,1338]},{"content":"In contrast, a &lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt; can connect to any number of &lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt; objects by default.","pos":[1339,1534],"source":" In contrast, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> can connect to any number of <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects by default."},{"content":"For example, a provider control that provides a postal code could be connected to multiple consumer controls that use a postal code to create various kinds of data based on a postal code, such as weather data, news, and so on.","pos":[1535,1761]},{"content":"This default behavior can be changed by overriding the &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A&gt; property on the &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute&gt; attribute.","pos":[1762,2012],"source":" This default behavior can be changed by overriding the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> property on the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> attribute."}]},{"pos":[78591,78726],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with the provider control in a connection.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\"></xref> associated with the provider control in a connection."},{"pos":[79348,79494],"content":"Gets or sets the property value on a connection that references the ID of the object serving as the provider connection point for that connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the property value on a connection that references the ID of the object serving as the provider connection point for that connection.","pos":[0,146]}]},{"pos":[79507,81504],"content":"For a static connection declared in the markup of a Web page, developers can specify which provider connection point will be used for the connection by assigning a value to the `ProviderConnectionPointID` attribute on the `<asp:webpartconnection>` element. If a value is not assigned to the attribute, the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> property value is used.       When you create dynamic (programmatic) connections, normally you should not set the value of the ProviderConnectionPointID property. You can simply call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, passing to it the provider and provider connection point objects (along with the other required parameters), and that method determines the correct ID to use for the provider's connection point. Similarly, when you disconnect, you can call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> method without needing to specify the ProviderConnectionPointID property value.      > [!NOTE] >  The ID of a provider's connection point can be determined when you designate a <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control as a provider. You must identify a callback method in the provider that serves an instance of an interface containing data to a consumer. To identify the method, mark it with the `ConnectionProvider` code attribute. When you add this attribute, you can add an optional string value parameter that serves as an ID for the provider's <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. If you supply a value for the optional ID parameter, that value becomes the value of the ProviderConnectionPointID property for the connection. If you do not supply an ID value, the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns a default ID when the object is created.","needQuote":false,"needEscape":true,"nodes":[{"content":"For a static connection declared in the markup of a Web page, developers can specify which provider connection point will be used for the connection by assigning a value to the <ph id=\"ph1\">`ProviderConnectionPointID`</ph> attribute on the <ph id=\"ph2\">`&lt;asp:webpartconnection&gt;`</ph> element.","pos":[0,256],"source":"For a static connection declared in the markup of a Web page, developers can specify which provider connection point will be used for the connection by assigning a value to the `ProviderConnectionPointID` attribute on the `<asp:webpartconnection>` element."},{"content":"If a value is not assigned to the attribute, the &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID&gt; property value is used.","pos":[257,397],"source":" If a value is not assigned to the attribute, the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> property value is used."},{"content":"When you create dynamic (programmatic) connections, normally you should not set the value of the ProviderConnectionPointID property.","pos":[404,536]},{"content":"You can simply call the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A&gt; method on the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control, passing to it the provider and provider connection point objects (along with the other required parameters), and that method determines the correct ID to use for the provider's connection point.","pos":[537,911],"source":" You can simply call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, passing to it the provider and provider connection point objects (along with the other required parameters), and that method determines the correct ID to use for the provider's connection point."},{"content":"Similarly, when you disconnect, you can call the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A&gt; method without needing to specify the ProviderConnectionPointID property value.","pos":[912,1119],"source":" Similarly, when you disconnect, you can call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> method without needing to specify the ProviderConnectionPointID property value."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The ID of a provider's connection point can be determined when you designate a &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; or other server control as a provider.","pos":[1125,1305],"source":"      > [!NOTE] >  The ID of a provider's connection point can be determined when you designate a <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control as a provider."},{"content":"You must identify a callback method in the provider that serves an instance of an interface containing data to a consumer.","pos":[1306,1428]},{"content":"To identify the method, mark it with the <ph id=\"ph1\">`ConnectionProvider`</ph> code attribute.","pos":[1429,1506],"source":" To identify the method, mark it with the `ConnectionProvider` code attribute."},{"content":"When you add this attribute, you can add an optional string value parameter that serves as an ID for the provider's &lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt; object.","pos":[1507,1696],"source":" When you add this attribute, you can add an optional string value parameter that serves as an ID for the provider's <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object."},{"content":"If you supply a value for the optional ID parameter, that value becomes the value of the ProviderConnectionPointID property for the connection.","pos":[1697,1840]},{"content":"If you do not supply an ID value, the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control assigns a default ID when the object is created.","pos":[1841,1992],"source":" If you do not supply an ID value, the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns a default ID when the object is created."}]},{"pos":[85545,85614],"content":"A string that contains the ID for a provider connection point object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that contains the ID for a provider connection point object.","pos":[0,69]}]},{"pos":[86163,86354],"content":"Gets or sets the property value on a connection that references the ID of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control acting as a provider for that connection.","needQuote":true,"needEscape":true,"source":"Gets or sets the property value on a connection that references the ID of the <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control acting as a provider for that connection."},{"pos":[86366,86686],"content":"The ProviderID property value is required when you create a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. If a value is not assigned to the property, an exception is thrown when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control attempts to activate the connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ProviderID property value is required when you create a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. If a value is not assigned to the property, an exception is thrown when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control attempts to activate the connection.","pos":[0,320],"nodes":[{"content":"The ProviderID property value is required when you create a connection between two &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; controls.","pos":[0,142],"source":"The ProviderID property value is required when you create a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls."},{"content":"If a value is not assigned to the property, an exception is thrown when the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control attempts to activate the connection.","pos":[143,320],"source":" If a value is not assigned to the property, an exception is thrown when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control attempts to activate the connection."}]}]},{"pos":[90602,90656],"content":"A string that contains the ID of the provider control.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that contains the ID of the provider control.","pos":[0,54]}]},{"pos":[91184,91302],"content":"Overrides the inherited <xref:System.Object.ToString*> method and returns a short type name for the connection object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Overrides the inherited &lt;xref:System.Object.ToString*&gt; method and returns a short type name for the connection object.","pos":[0,118],"source":"Overrides the inherited <xref:System.Object.ToString*> method and returns a short type name for the connection object."}]},{"pos":[91314,91631],"content":"This method is used mostly for convenience by control designers. It improves how connection objects appear in Design view by using the shorter type name, as opposed to a fully qualified type name. However, the method can be called at any point in your code where you want to know the type name of a connection object.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is used mostly for convenience by control designers. It improves how connection objects appear in Design view by using the shorter type name, as opposed to a fully qualified type name. However, the method can be called at any point in your code where you want to know the type name of a connection object.","pos":[0,317],"nodes":[{"content":"This method is used mostly for convenience by control designers.","pos":[0,64]},{"content":"It improves how connection objects appear in Design view by using the shorter type name, as opposed to a fully qualified type name.","pos":[65,196]},{"content":"However, the method can be called at any point in your code where you want to know the type name of a connection object.","pos":[197,317]}]}]},{"pos":[94073,94209],"content":"A string that contains the short (unqualified) type name of a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that contains the short (unqualified) type name of a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref>."},{"pos":[94746,94945],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that is used to transform data between two otherwise incompatible connection points in a Web Parts connection.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"></xref> object that is used to transform data between two otherwise incompatible connection points in a Web Parts connection."},{"pos":[94958,96542],"content":"In a Web Parts connection, there are two ways in which the provider and consumer controls in the connection can connect. They can connect directly, through their respective <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects and an interface type that is understood by both controls. Or, if they are incompatible, they can connect indirectly, using a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object that transforms an interface instance from a provider into a type understood by a consumer.       When a transformer is needed as part of a connection, the Transformer property provides a reference to the <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object. You can add a transformer for a connection declaratively in the markup of a Web page, by adding a tag for a custom transformer (or one of the transformers provided with the Web Parts control set) within the `<asp:WebPartConnection>` element. You can also add a transformer programmatically, creating an instance of it in your code, and calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control to create the connection, passing to it the transformer object along with the other required parameters.","needQuote":false,"needEscape":true,"nodes":[{"content":"In a Web Parts connection, there are two ways in which the provider and consumer controls in the connection can connect.","pos":[0,120]},{"content":"They can connect directly, through their respective &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint&gt; objects and an interface type that is understood by both controls.","pos":[121,297],"source":" They can connect directly, through their respective <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects and an interface type that is understood by both controls."},{"content":"Or, if they are incompatible, they can connect indirectly, using a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartTransformer&gt; object that transforms an interface instance from a provider into a type understood by a consumer.","pos":[298,524],"source":" Or, if they are incompatible, they can connect indirectly, using a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object that transforms an interface instance from a provider into a type understood by a consumer."},{"content":"When a transformer is needed as part of a connection, the Transformer property provides a reference to the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartTransformer&gt; object.","pos":[531,706],"source":"       When a transformer is needed as part of a connection, the Transformer property provides a reference to the <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object."},{"content":"You can add a transformer for a connection declaratively in the markup of a Web page, by adding a tag for a custom transformer (or one of the transformers provided with the Web Parts control set) within the <ph id=\"ph1\">`&lt;asp:WebPartConnection&gt;`</ph> element.","pos":[707,948],"source":" You can add a transformer for a connection declaratively in the markup of a Web page, by adding a tag for a custom transformer (or one of the transformers provided with the Web Parts control set) within the `<asp:WebPartConnection>` element."},{"content":"You can also add a transformer programmatically, creating an instance of it in your code, and calling the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29&gt; method on the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager&gt; control to create the connection, passing to it the transformer object along with the other required parameters.","pos":[949,1582],"source":" You can also add a transformer programmatically, creating an instance of it in your code, and calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control to create the connection, passing to it the transformer object along with the other required parameters."}]},{"pos":[96746,96906],"content":"A <xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"></xref>. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,77],"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[78,160],"source":" The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[97451,97600],"content":"Gets a collection of <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects used internally by the Web Parts control set.","needQuote":true,"needEscape":true,"source":"Gets a collection of <xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"></xref> objects used internally by the Web Parts control set."},{"pos":[97613,98067],"content":"The Transformers property is never intended for use by developers. To access the transformer associated with a connection, developers should always use the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> property.       The Transformers property is used internally by the Web Parts control set to enable page developers to declare transformer elements within the `<asp:webpartconnection>` element in the markup of a Web page.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Transformers property is never intended for use by developers.","pos":[0,66]},{"content":"To access the transformer associated with a connection, developers should always use the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A&gt; property.","pos":[67,240],"source":" To access the transformer associated with a connection, developers should always use the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> property."},{"content":"The Transformers property is used internally by the Web Parts control set to enable page developers to declare transformer elements within the <ph id=\"ph1\">`&lt;asp:webpartconnection&gt;`</ph> element in the markup of a Web page.","pos":[247,452],"source":"       The Transformers property is used internally by the Web Parts control set to enable page developers to declare transformer elements within the `<asp:webpartconnection>` element in the markup of a Web page."}]},{"pos":[98292,98473],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformerCollection\"></xref> containing <xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"></xref> objects."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection\n  id: WebPartConnection\n  children:\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.ID\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.Provider\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.ToString\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer\n  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers\n  langs:\n  - csharp\n  name: WebPartConnection\n  nameWithType: WebPartConnection\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection\n  type: Class\n  summary: Provides an object that enables two <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> controls to form a connection. This class cannot be inherited.\n  remarks: \"In the Web Parts control set, a connection is a link or association between two <xref:System.Web.UI.WebControls.WebParts.WebPart> (or other server or user) controls that enables them to share data. This ability to share data allows connected controls to be used in ways that exceed the functionality offered by the isolated controls. For example, if one control provides postal code data, and another control can read that data and provide local weather information based on the postal code, then the connected capability of the two controls provides more value to users. To extend this example, other controls could be created that also display information based on a postal code, such as a control with links to local news, and all these controls that can work with postal code data could share data with the single control that provides a postal code. End users of Web Parts applications can create and manage connections between all such compatible controls directly from a Web browser, using the standard connections user interface (UI) provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control, or using a custom UI provided by a developer.  \\n  \\n This WebPartConnection class overview is a general statement of the basic details for creating a connection. For more on specific components and requirements involved in creating connections, see [Web Parts Connections Overview](~/add/includes/ajax-current-ext-md.md), or see the reference classes and code examples mentioned in the following discussion. There are several fundamental aspects of a Web Parts connection:  \\n  \\n-   Two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Every Web Parts connection consists of two controls. It is possible for a control to participate in more than one connection simultaneously, but every single connection consists of exactly two controls. The controls can derive directly from the <xref:System.Web.UI.WebControls.WebParts.WebPart> base class, or they can be other server controls, including ASP.NET controls, custom server controls, and user controls. Controls that do not derive from the <xref:System.Web.UI.WebControls.WebParts.WebPart> class, if placed in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone, are automatically wrapped with a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object at run time, which enables them to inherit from the <xref:System.Web.UI.WebControls.WebParts.WebPart> class and function as run-time <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \\n  \\n-   Controls residing in <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zones. Both <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and any other type of server control must reside in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone to be able to participate in Web Parts connections (and most other Web Parts features).  \\n  \\n-   Consumers and providers. In every Web Parts connection there are two controls: a provider of data and a consumer of data. The provider furnishes data to the consumer through a specified callback method that returns data in the form of an interface. (For an example of how to create and specify the callback method, see the Example section of this topic.) This callback method is known as a provider connection point. The details of this connection point (its \\\"friendly\\\" name, an ID, and the type of the returned interface) are contained in a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associated with the provider control. The consumer receives the data through a specified method that can accept an instance of the interface. This method is known as a consumer connection point, and the details of the connection point (name, ID, and type of interface) are contained in a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associated with the consumer control.  \\n  \\n-   Compatible controls or a valid transformer. For a connection to work, the consumer and provider must either be compatible (meaning that their specified connection point methods can work with the same type of interface), or there must be a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object capable of translating the type offered by the provider into a type understood by the consumer.  \\n  \\n-   A WebPartConnection object. For a connection to exist, there must be an instance of the WebPartConnection class that contains references to the provider and consumer controls, along with the details of their connection points. If the provider and consumer are incompatible and instead use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to connect, the connection references the transformer.  \\n  \\n-   A means of establishing the connection. After compatible consumer and provider controls have been properly designed with connection point methods and placed in a zone, and a WebPartConnection object is available, the last basic step necessary is to initiate the connection. One way this can happen is for users to create the connection through the UI. If you place an `<asp:connectionszone>` element on the page, and the other required components for a connection are in place, at run time a user can switch the page into connect display mode, click a connect verb on the verbs menu of either the provider or consumer, and a connection UI (based on the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control) will appear. Through this UI, the user can initiate the connection. Another way to initiate the connection is to do it programmatically. In either case, whether through the UI or programmatically, the underlying method that initiates the connection is the same. The application calls the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method (or the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method if using a transformer) on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, passing to it the provider, the consumer, and their respective connection point objects, and the method returns a WebPartConnection object.  \\n  \\n The WebPartConnection class defines an object that encapsulates the essential details of a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The class consists almost entirely of properties related to the details of a particular connection. Several properties concern the consumer control in a connection. The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> property references the consumer control itself, and the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> property references the consumer's ID. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, which contains the details of the consumer's connection point, is referenced by the consumer's <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> property. The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> property references the ID of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. All these consumer-related connection properties must have a value assigned to them to create a connection.  \\n  \\n The WebPartConnection class also has several properties that relate to the provider control in a connection, and these correspond to the properties for a consumer. The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> property references the provider control itself, while the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> property references its ID. The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> property references the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, and the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> property references the ID of the provider's connection point.  \\n  \\n Several properties concern the state of the connection. The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> property indicates whether the connection is active (currently exchanging data) or inactive (still connected but not actively sharing data). The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> property indicates whether the connection is a shared (available to all users of a page) or a user-specific connection, and the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> property indicates whether the control is static (declared in the page markup and thus permanent) or dynamic (created programmatically, meaning that it can be deleted).\"\n  example:\n  - \"The following code example demonstrates how to create a simple connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The example demonstrates three ways of forming a connection: declaratively, by placing tags for the connection in the markup of the Web page; programmatically, by creating the connection in code; and through the UI, by placing a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on the page, which enables users to establish a connection.  \\n  \\n The code example has four parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_1.ascx)]\\n [!code-vb[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_1.ascx)]  \\n  \\n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.  \\n  \\n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_2.vb)]\\n [!code-cs[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_2.cs)]  \\n  \\n The third part of the code example is the Web page. Near the top are the `Register` directives for the user control and the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Because the example assumes dynamic compilation of the controls, the source code for the controls should be in an App_Code subfolder; the `Register` tag in the page references only an arbitrary tag prefix and the namespace of the controls. The custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (the provider and consumer) are declared within the Web page's `<asp:webpartzone>` element, inside a `<zonetemplate>` element.  \\n  \\n The page provides three ways to form a connection between the custom controls. The first method is declarative. In the markup for the page, a <`StaticConnections>` element is declared, and within that is an `<asp:WebPartConnections>` element, with the various consumer and provider details of the connection specified as attributes. This is one way to create a connection, by declaring it directly in the Web page, specifically within the `<asp:WebPartManager>` element. Because of this static connection, a connection between the two custom controls is created immediately the first time the page loads.  \\n  \\n A second method for forming a connection between the controls is provided by the `<asp:connectionszone>` element in the page. If a user switches a page into connect display mode at run time, and clicks a connect verb on one of the custom controls, the `<asp:connectionszone>` element automatically renders the UI for creating a connection.  \\n  \\n The page also demonstrates a third way of creating a connection, which is to do it programmatically. In the `Button1_Click` method, the code creates a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object for the provider control, and retrieves its connection point details by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method. It carries out a similar task for the consumer control, calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method. Finally, it creates the new WebPartConnection object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  \\n  \\n [!code-cs[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_3.aspx)]\\n [!code-vb[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_3.aspx)]  \\n  \\n After you load the Web page in a browser, the first connection already exists because it is declared within the `<StaticConnections>` element. Enter some text in the **ZIP Code Provider** control, and it will be displayed in the consumer control. Next, disconnect the two controls. Using the **Display Mode** drop-down list control, change the page to connect display mode. Click the verbs menu (represented by a downward arrow in the title bar) for each of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and notice that each has a **Connect** option. This is a connect verb, which appears in the verbs menu only when the page is in connect mode. Click the connect verb on one of the controls, and the connection UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control appears. Click the **Disconnect** button to end the static connection between the controls. Use the **Display Mode** control to return the page to browse mode. Try to enter some new text in the provider again, and note that because the controls are disconnected, the text fails to update in the consumer control.  \\n  \\n Next, use the same method as above to switch the page into connect display mode again. Click a connect verb on one of the controls. Click the **Create a Connection** link, and use the UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to create a connection between the controls. This is the second method for creating a connection. Note that as soon as the connection is formed, the last string you entered in the provider control (that failed to appear because the controls were disconnected) suddenly appears in the consumer, because the connection has been recreated. Click the **Disconnect** button to end the current connection that you just created. Return the page to browse mode. Enter some new text in the provider to demonstrate that the text is not updated, and that the controls are again disconnected.  \\n  \\n Return the page to connect display mode. Instead of clicking a connect verb, click the **Connect WebPart Controls** button, which illustrates the third method of forming a connection. This approach connects the controls programmatically in one simple step without having to use the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. Note that as the connection is created, the last string you entered in the provider suddenly appears in the consumer control.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]\n\n      [System.Web.UI.ParseChildren(true, \"Transformers\")]\n\n      public sealed class WebPartConnection\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: WebPartConnection()\n  nameWithType: WebPartConnection.WebPartConnection()\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref> class.\n  remarks: \"The WebPartConnection constructor is public so that the ASP.NET parser can create an instance when a connection is declared in the markup of a Web page; this constructor is not intended to be used in developer code.  \\n  \\n When you want to create a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object programmatically, you should use the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> or the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> method provided in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. These methods handle the many details of creating a connection, and return a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \\n  \\n The WebPartConnection constructor for the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> class sets the values of the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> and <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> properties to `true`. Thus the default state of a new connection is to be static (meaning that it is declared in the markup of the containing Web page) and shared (visible to all users of the page). This will be the case when you add a connection in the typical scenario, by declaring the connection in the markup of the page with an `<asp:webpartconnection>` element. However, in other circumstances a connection will have different values for these properties. For example, when you add a connection programmatically by creating the connection object in code, and the user is viewing the page in the default user personalization scope, the connection is created as a dynamic, per-user(visible only to the specific user) connection.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> and <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> properties are read-only, and these properties that determine the nature of a connection are set internally by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control depending on how a connection is created (declaratively in the page markup, or programmatically through your code or the user interface).\"\n  syntax:\n    content: public WebPartConnection ();\n    parameters: []\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer\n  id: Consumer\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: Consumer\n  nameWithType: WebPartConnection.Consumer\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> object that is acting as the consumer control in a connection.\n  remarks: Every Web Parts connection consists of two controls that share data. One control acts as the provider of data, and the other control acts as a consumer, receiving and processing the data from the provider. The Consumer property gets a reference to the <xref:System.Web.UI.WebControls.WebParts.WebPart> control acting as a consumer in a connection relationship.\n  example:\n  - \"The following code example demonstrates the programmatic use of the Consumer property.  \\n  \\n The code example has four parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_1.ascx)]\\n [!code-cs[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_1.ascx)]  \\n  \\n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_2.cs)]\\n [!code-vb[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_2.vb)]  \\n  \\n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the Consumer property. Near the top of the page are the `Register` directives for the user control and the custom controls. Because this example uses dynamic compilation, the `Register` directive for the source file does not need to reference an assembly name; it includes only an arbitrary tag prefix and the namespace of the controls. In the `Button2_Click` method, the code accesses the connection object through the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, and gets a reference to the consumer control.  \\n  \\n [!code-cs[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_3.aspx)]\\n [!code-vb[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_3.aspx)]  \\n  \\n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection user interface (UI), to create a connection between the two controls. Click the **Display Consumer Info** button to run the code that demonstrates the Consumer property.\"\n  syntax:\n    content: public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }\n    return:\n      type: System.Web.UI.WebControls.WebParts.WebPart\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> that represents the Web Parts control acting as the consumer in a connection.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The length of the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*> property is zero.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint\n  id: ConsumerConnectionPoint\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: ConsumerConnectionPoint\n  nameWithType: WebPartConnection.ConsumerConnectionPoint\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets the object that serves as a connection point for a control that is acting as a consumer in a connection.\n  remarks: \"One of the required steps for creating a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls is to create connection points for each control. The consumer connection point is an object that contains the information about how to connect to the control acting as a consumer. In the consumer's source code, one of the methods must be identified with the `ConnectionConsumer` attribute. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object that is associated with a consumer control contains details about the method and the attribute, including an ID for the method, a display name for use in the user interface (UI), and what type of interface the method can retrieve. This set of information about the consumer, its method for forming connections, and the type of interface it understands, collectively forms a consumer connection point.  \\n  \\n By default, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object can connect to only one <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object at a time. A consumer could have multiple methods identified as possible consumer connection points, but a consumer can only participate in one connection as a consumer (hence, only one of its consumer connection points can be active) at a time. In contrast, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> can connect to any number of <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This default behavior can be changed by overriding the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> property on the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> attribute.\"\n  example:\n  - \"The following code example demonstrates the programmatic use of the ConsumerConnectionPoint property.  \\n  \\n The example has four parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_1.ascx)]\\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_1.ascx)]  \\n  \\n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_2.vb)]\\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_2.cs)]  \\n  \\n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ConsumerConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. These objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ConsumerConnectionPoint property and displays some details of the connection point.  \\n  \\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_3.aspx)]\\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_3.aspx)]  \\n  \\n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ConsumerConnectionPoint property.\"\n  syntax:\n    content: public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }\n    return:\n      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\"></xref> associated with the consumer control in a connection.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID\n  id: ConsumerConnectionPointID\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: ConsumerConnectionPointID\n  nameWithType: WebPartConnection.ConsumerConnectionPointID\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets the property value on a connection that references the ID of the object serving as the consumer connection point for that connection.\n  remarks: \"For a static connection declared in the markup of a Web page, developers can specify which consumer connection point will be used for the connection by assigning a value to the `ConsumerConnectionPointID` attribute on the `<asp:webpartconnection>` element. If a value is not assigned to the attribute, the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> property value is used.  \\n  \\n When you create dynamic (programmatic) connections, normally you should not set the value of the ConsumerConnectionPointID property. You can simply call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, passing to it the consumer and consumer connection point objects (along with the other required parameters), and that method determines the correct ID to use for the consumer's connection point. Similarly, when you disconnect, you can call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> method without needing to specify the ConsumerConnectionPointID property value.  \\n  \\n> [!NOTE]\\n>  The ID of a consumer's connection point can be determined when you designate a <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control as a consumer. You must identify a method in the consumer that retrieves an instance of an interface furnished by either a provider control or a transformer. To identify the method, mark it with the `ConnectionConsumer` code attribute. When you add this attribute, you can add an optional string value parameter that serves as an ID for the consumer's <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. If you supply a value for the optional ID parameter, that value becomes the value of the ConsumerConnectionPointID property for the connection. If you do not supply an ID value, the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> property value is used.\"\n  example:\n  - \"The following code example shows the declarative and programmatic use of the ConsumerConnectionPointID property.  \\n  \\n The example has four parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_1.ascx)]\\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_1.ascx)]  \\n  \\n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_2.cs)]\\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_2.vb)]  \\n  \\n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the ConsumerConnectionPointID property.  \\n  \\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_3.aspx)]\\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_3.aspx)]  \\n  \\n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ConsumerConnectionPointID property value. The value is written out in a label below the controls.\"\n  syntax:\n    content: public string ConsumerConnectionPointID { get; set; }\n    return:\n      type: System.String\n      description: A string that contains the ID for the consumer connection point.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID\n  id: ConsumerID\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: ConsumerID\n  nameWithType: WebPartConnection.ConsumerID\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets the property value on a connection that references the ID of the <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control acting as a consumer for that connection.\n  remarks: The ConsumerID property value is required when you create a connection between <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. If a value is not assigned to the property, an exception is thrown when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control attempts to activate the connection.\n  example:\n  - \"The following code example shows the declarative and programmatic use of the ConsumerID property.  \\n  \\n The example has four parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_1.ascx)]\\n [!code-vb[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_1.ascx)]  \\n  \\n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_2.cs)]\\n [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_2.vb)]  \\n  \\n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ConsumerID property and displays it in a label.  \\n  \\n [!code-vb[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_3.aspx)]\\n [!code-cs[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_3.aspx)]  \\n  \\n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ConsumerID property value.\"\n  syntax:\n    content: public string ConsumerID { get; set; }\n    return:\n      type: System.String\n      description: A string that contains the ID of the control acting as a consumer in a connection.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID\n  id: ID\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: ID\n  nameWithType: WebPartConnection.ID\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets the ID of a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref> object.\n  remarks: \"Every <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object has a unique value assigned to its ID property. This is to ensure that there is a way to distinguish between multiple connections.  \\n  \\n If you create a static connection by declaring an `<asp:webpartconnection>` element in a Web page, and you do not assign a value to the `ID` attribute for the connection, an exception is thrown when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control attempts to activate the connection.  \\n  \\n When the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control creates a new dynamic connection, it calls the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> method to generate a unique ID for the connection.\"\n  example:\n  - \"The following code example shows the declarative and programmatic use of the ID property.  \\n  \\n The example has four parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_1.ascx)]\\n [!code-vb[WebParts_WebPartConnection_ID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_1.ascx)]  \\n  \\n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_2.cs)]\\n [!code-vb[WebParts_WebPartConnection_ID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_2.vb)]  \\n  \\n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Here, the ID property is not required, because the connection is dynamic, and the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns an ID to the connection. In the `Button2_Click` method, the code accesses the value of the ID property and displays it in a label.  \\n  \\n [!code-cs[WebParts_WebPartConnection_ID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_3.aspx)]\\n [!code-vb[WebParts_WebPartConnection_ID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_3.aspx)]  \\n  \\n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Connection Details** button to run the code that accesses the ID property value.\"\n  syntax:\n    content: public string ID { get; set; }\n    return:\n      type: System.String\n      description: A string that contains the ID of a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref>.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive\n  id: IsActive\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: IsActive\n  nameWithType: WebPartConnection.IsActive\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets a value that indicates whether a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref> object is currently established and able to exchange data between its provider and consumer controls.\n  remarks: \"The IsActive property indicates a state of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object. When the connection is in this state, the provider and consumer controls in the connection are communicating and able to exchange data through a common interface or a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object.  \\n  \\n When a user views a rendered page that includes an established connection in normal browse mode, the connection is typically active (unless it failed to be activated due to some conflict or other issue when the page loaded). In the early stages of the page and control life cycle, the property value is `false`. The connection is activated just after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control is raised. Specifically, the connection is activated after the consumer has retrieved an instance of the specified interface from the provider or a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object.  \\n  \\n It is useful to know whether a connection is active in situations where there might be conflicts or synchronization issues due to multiple connections on a page. For example, if there is some kind of conflict between two connections, the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control has the option of not activating one of the connections to avoid the conflict.\"\n  example:\n  - \"The following code example demonstrates use of the IsActive property.  \\n  \\n The example has three parts:  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_1.cs)]\\n [!code-vb[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_1.vb)]  \\n  \\n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Within the `<script>` element are four event handlers. Each event handler checks the value of the IsActive property on the static connection, and writes a message to the <xref:System.Web.UI.WebControls.Label> control indicating whether the connection is active or inactive at that state of the page and control life cycle. This demonstrates at what point the connection becomes active, and that it remains active after the page is rendered.  \\n  \\n [!code-cs[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_2.aspx)]\\n [!code-vb[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_2.aspx)]  \\n  \\n Load the page in a browser. The static connection is already created, and messages have already been written to the labels showing whether the connection was active at various points in the page and control life cycle. Click the **Connection Details** button, and note that the connection is not active at that point, but that the connection is reactivated each time after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event, and that it is still active (and will remain so) after the <xref:System.Web.UI.Control.PreRender> event of the page.\"\n  syntax:\n    content: public bool IsActive { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the connection is active; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared\n  id: IsShared\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: IsShared\n  nameWithType: WebPartConnection.IsShared\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets a value that indicates whether a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref> object is visible to all users or only to the current user.\n  remarks: \"As with individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object can be a shared or a per-user instance. A shared instance means that the connection is visible to all users of a Web page, and a per-user instance means the connection is visible only to a specific user.  \\n  \\n In general, the way a connection is added to a page determines whether the connection is shared. If the connection is declared in the markup of a Web page, then the connection is shared and the IsShared property value is `true`. In addition, if the Web page is in shared personalization scope when a connection is added, the connection is also shared. Typically, when a user uses the `<asp:connectionszone>` user interface (UI) to add a connection, the page is in user personalization scope, so the connection is not shared and the IsShared property value is `false`.\"\n  example:\n  - \"The following code example demonstrates programmatic use of the IsShared property.  \\n  \\n The code example has five parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An entry in the Web.config file that is required to run the example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_1.ascx)]\\n [!code-vb[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_1.ascx)]  \\n  \\n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_2.cs)]\\n [!code-vb[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_2.vb)]  \\n  \\n The third part of the code example is the Web page. In the `Button2_Click` method, it checks the IsShared property of the existing connection and displays the result on the page.  \\n  \\n [!code-cs[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_3.aspx)]\\n [!code-vb[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_3.aspx)]  \\n  \\n The fourth part of the code example is an entry in the Web.config file that is required for the user account that will be running the example to be able to edit the page in shared personalization scope. To enable this, you must have an entry in the Web.config file within the `<system.web>` section that looks like the following example.  \\n  \\n```  \\n<webParts>  \\n  <personalization>  \\n    <authorization>  \\n      <allow users=\\\"UserAccount\\\"  \\n             roles=\\\"admin\\\"  \\n             verbs=\\\"enterSharedScope\\\"/>  \\n    </authorization>            \\n  </personalization>  \\n</webParts>  \\n```  \\n  \\n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect display mode. Click the **Connect WebPart Controls** button to form a connection. Next, click the **Connection Details** button to display whether the connection is shared. If you created the connection with the page in the default user personalization scope, the IsShared property value should be `false` for the connection.  \\n  \\n On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (indicated by the downward arrow in the title bar), click the connect verb. When the connection UI appears, click the **Disconnect** button to end the connection. Use the **Display Mode** control to return the page to browse mode.  \\n  \\n In the **Display Mode** control, select the **Shared** option to switch the page into shared personalization scope. Follow the same steps as those above to create a connection, and again click the **Connection Details** button to display whether the connection is shared. In this case, the value of the IsShared property should be `true`.\"\n  syntax:\n    content: public bool IsShared { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the connection is shared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic\n  id: IsStatic\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: IsStatic\n  nameWithType: WebPartConnection.IsStatic\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets a value that indicates whether a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref> object is declared in the markup of a Web page, or created programmatically.\n  remarks: \"Connections between Web Parts controls can be either static or dynamic. A static connection is declared in the markup of a Web page, using an `<asp:WebPartConnection>` element. Dynamic connections are created programmatically or when a user creates a connection through the user interface (UI) defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control.  \\n  \\n Static connections are shared objects, meaning they are available to all users of the Web page. Also, they are essentially permanent because, like a static <xref:System.Web.UI.WebControls.WebParts.WebPart> control, they cannot be permanently deleted.  \\n  \\n> [!NOTE]\\n>  While a static connection object cannot be permanently deleted, it can be permanently disconnected. In this case, the disconnected object would exist on the server, but an end user would never be aware of the object's existence in a page.\"\n  example:\n  - \"The following code example demonstrates the programmatic use of the IsStatic property.  \\n  \\n The code example has three parts:  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_1.cs)]\\n [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_1.vb)]  \\n  \\n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method accesses the IsStatic property to check whether the connection is static.  \\n  \\n [!code-vb[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_2.aspx)]\\n [!code-cs[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_2.aspx)]  \\n  \\n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to display the value of the IsStatic property.\"\n  syntax:\n    content: public bool IsStatic { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the connection is static; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider\n  id: Provider\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: Provider\n  nameWithType: WebPartConnection.Provider\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control that acts as the provider in a Web Parts connection.\n  remarks: \"Every Web Parts connection consists of two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls--a consumer and a provider--and the Provider property returns a reference to the provider control in a connection.  \\n  \\n Like its counterpart in a connection (the consumer control), the provider control is required to establish a connection. Whether you create the connection programmatically, or by declaring it in page persistence format, you must specify a control to act as the provider for a connection.\"\n  example:\n  - \"The following code example demonstrates use of the Provider property.  \\n  \\n The code example has three parts:  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_1.vb)]\\n [!code-cs[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_1.cs)]  \\n  \\n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Notice that in the `<asp:webpartconnection>` element, the `ProviderID` attribute has the ID of the provider control assigned to it. This is required to identify the provider for the static connection. The `Button1_Click` method accesses the Provider property and writes some of its details to a label.  \\n  \\n [!code-cs[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_2.aspx)]\\n [!code-vb[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_2.aspx)]  \\n  \\n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Provider Details** button to display some of the property values accessed through the Provider property.\"\n  syntax:\n    content: public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }\n    return:\n      type: System.Web.UI.WebControls.WebParts.WebPart\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> that acts as the provider of data.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The length of the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*> property value is zero.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint\n  id: ProviderConnectionPoint\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: ProviderConnectionPoint\n  nameWithType: WebPartConnection.ProviderConnectionPoint\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets the object that serves as a connection point for a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control acting as a provider for a connection.\n  remarks: \"One of the required steps for creating a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls is to create connection points for each control. The provider connection point is an object that contains the information about how to connect to the control acting as a provider. In the provider's source code, one of the methods must be identified with the `ConnectionProvider` attribute. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> that is associated with a provider control contains details about the method and the attribute, including an ID for the method, a display name for use in the user interface (UI), and what type of interface instance the method can return to a consumer control. This set of information about the provider, its method for forming connections, and the type of interface it provides, collectively forms a provider connection point.  \\n  \\n By default, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> can connect to only one <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object at a time. A consumer could have multiple methods identified as possible consumer connection points, but a consumer can only participate in one connection as a consumer (hence, only one of its consumer connection points can be active) at a time. In contrast, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> can connect to any number of <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects by default. For example, a provider control that provides a postal code could be connected to multiple consumer controls that use a postal code to create various kinds of data based on a postal code, such as weather data, news, and so on. This default behavior can be changed by overriding the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> property on the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> attribute.\"\n  example:\n  - \"The following code example demonstrates the programmatic use of the ProviderConnectionPoint property.  \\n  \\n The example has four parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_1.ascx)]\\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_1.ascx)]  \\n  \\n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_2.cs)]\\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_2.vb)]  \\n  \\n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ProviderConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. Note the call to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. The various created objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ProviderConnectionPoint property and displays some details of the connection point.  \\n  \\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_3.aspx)]\\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_3.aspx)]  \\n  \\n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ProviderConnectionPoint property.\"\n  syntax:\n    content: public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }\n    return:\n      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\"></xref> associated with the provider control in a connection.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID\n  id: ProviderConnectionPointID\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: ProviderConnectionPointID\n  nameWithType: WebPartConnection.ProviderConnectionPointID\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets the property value on a connection that references the ID of the object serving as the provider connection point for that connection.\n  remarks: \"For a static connection declared in the markup of a Web page, developers can specify which provider connection point will be used for the connection by assigning a value to the `ProviderConnectionPointID` attribute on the `<asp:webpartconnection>` element. If a value is not assigned to the attribute, the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> property value is used.  \\n  \\n When you create dynamic (programmatic) connections, normally you should not set the value of the ProviderConnectionPointID property. You can simply call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, passing to it the provider and provider connection point objects (along with the other required parameters), and that method determines the correct ID to use for the provider's connection point. Similarly, when you disconnect, you can call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> method without needing to specify the ProviderConnectionPointID property value.  \\n  \\n> [!NOTE]\\n>  The ID of a provider's connection point can be determined when you designate a <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control as a provider. You must identify a callback method in the provider that serves an instance of an interface containing data to a consumer. To identify the method, mark it with the `ConnectionProvider` code attribute. When you add this attribute, you can add an optional string value parameter that serves as an ID for the provider's <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. If you supply a value for the optional ID parameter, that value becomes the value of the ProviderConnectionPointID property for the connection. If you do not supply an ID value, the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns a default ID when the object is created.\"\n  example:\n  - \"The following code example shows the declarative and programmatic use of the ProviderConnectionPointID property.  \\n  \\n The example has four parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]\\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]  \\n  \\n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_2.vb)]\\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_2.cs)]  \\n  \\n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point (and the ID) defined in the provider control. Then, in the `Button2_Click` method, the code accesses the ProviderConnectionPointID property.  \\n  \\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]\\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]  \\n  \\n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ProviderConnectionPointID property value. The value is written out in a label below the controls.\"\n  syntax:\n    content: public string ProviderConnectionPointID { get; set; }\n    return:\n      type: System.String\n      description: A string that contains the ID for a provider connection point object.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID\n  id: ProviderID\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: ProviderID\n  nameWithType: WebPartConnection.ProviderID\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets the property value on a connection that references the ID of the <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control acting as a provider for that connection.\n  remarks: The ProviderID property value is required when you create a connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. If a value is not assigned to the property, an exception is thrown when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control attempts to activate the connection.\n  example:\n  - \"The following code example shows the declarative and programmatic use of the ProviderID property.  \\n  \\n The example has four parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_1.ascx)]\\n [!code-vb[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_1.ascx)]  \\n  \\n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_2.vb)]\\n [!code-cs[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_2.cs)]  \\n  \\n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ProviderID property and displays it in a label.  \\n  \\n [!code-cs[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_3.aspx)]\\n [!code-vb[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_3.aspx)]  \\n  \\n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. To do that, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button, and the controls are disconnected. Next, use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ProviderID property value.\"\n  syntax:\n    content: public string ProviderID { get; set; }\n    return:\n      type: System.String\n      description: A string that contains the ID of the provider control.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString\n  id: ToString\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: WebPartConnection.ToString()\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Overrides the inherited <xref:System.Object.ToString*> method and returns a short type name for the connection object.\n  remarks: This method is used mostly for convenience by control designers. It improves how connection objects appear in Design view by using the shorter type name, as opposed to a fully qualified type name. However, the method can be called at any point in your code where you want to know the type name of a connection object.\n  example:\n  - \"The following code example demonstrates how to call the ToString method to return the short type name of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \\n  \\n The code example has three parts:  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_1.cs)]\\n [!code-vb[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_1.vb)]  \\n  \\n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method calls the ToString method to write the type name of the connection to a label.  \\n  \\n [!code-cs[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_2.aspx)]\\n [!code-vb[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_2.aspx)]  \\n  \\n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to execute the ToString method.\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that contains the short (unqualified) type name of a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartConnection\"></xref>.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer\n  id: Transformer\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: Transformer\n  nameWithType: WebPartConnection.Transformer\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"></xref> object that is used to transform data between two otherwise incompatible connection points in a Web Parts connection.\n  remarks: \"In a Web Parts connection, there are two ways in which the provider and consumer controls in the connection can connect. They can connect directly, through their respective <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects and an interface type that is understood by both controls. Or, if they are incompatible, they can connect indirectly, using a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object that transforms an interface instance from a provider into a type understood by a consumer.  \\n  \\n When a transformer is needed as part of a connection, the Transformer property provides a reference to the <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object. You can add a transformer for a connection declaratively in the markup of a Web page, by adding a tag for a custom transformer (or one of the transformers provided with the Web Parts control set) within the `<asp:WebPartConnection>` element. You can also add a transformer programmatically, creating an instance of it in your code, and calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control to create the connection, passing to it the transformer object along with the other required parameters.\"\n  syntax:\n    content: public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }\n    return:\n      type: System.Web.UI.WebControls.WebParts.WebPartTransformer\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"></xref>. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers\n  id: Transformers\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  langs:\n  - csharp\n  name: Transformers\n  nameWithType: WebPartConnection.Transformers\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets a collection of <xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"></xref> objects used internally by the Web Parts control set.\n  remarks: \"The Transformers property is never intended for use by developers. To access the transformer associated with a connection, developers should always use the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> property.  \\n  \\n The Transformers property is used internally by the Web Parts control set to enable page developers to declare transformer elements within the `<asp:webpartconnection>` element in the markup of a Web page.\"\n  syntax:\n    content: public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }\n    return:\n      type: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformerCollection\"></xref> containing <xref href=\"System.Web.UI.WebControls.WebParts.WebPartTransformer\"></xref> objects.\n  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: WebPartConnection()\n  nameWithType: WebPartConnection.WebPartConnection()\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: Consumer\n  nameWithType: WebPartConnection.Consumer\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer\n- uid: System.Web.UI.WebControls.WebParts.WebPart\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: WebPart\n  nameWithType: WebPart\n  fullName: System.Web.UI.WebControls.WebParts.WebPart\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ConsumerConnectionPoint\n  nameWithType: WebPartConnection.ConsumerConnectionPoint\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint\n- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: ConsumerConnectionPoint\n  nameWithType: ConsumerConnectionPoint\n  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ConsumerConnectionPointID\n  nameWithType: WebPartConnection.ConsumerConnectionPointID\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ConsumerID\n  nameWithType: WebPartConnection.ConsumerID\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ID\n  nameWithType: WebPartConnection.ID\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: IsActive\n  nameWithType: WebPartConnection.IsActive\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: IsShared\n  nameWithType: WebPartConnection.IsShared\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: IsStatic\n  nameWithType: WebPartConnection.IsStatic\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: Provider\n  nameWithType: WebPartConnection.Provider\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ProviderConnectionPoint\n  nameWithType: WebPartConnection.ProviderConnectionPoint\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint\n- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: ProviderConnectionPoint\n  nameWithType: ProviderConnectionPoint\n  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ProviderConnectionPointID\n  nameWithType: WebPartConnection.ProviderConnectionPointID\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ProviderID\n  nameWithType: WebPartConnection.ProviderID\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ToString()\n  nameWithType: WebPartConnection.ToString()\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: Transformer\n  nameWithType: WebPartConnection.Transformer\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer\n- uid: System.Web.UI.WebControls.WebParts.WebPartTransformer\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: WebPartTransformer\n  nameWithType: WebPartTransformer\n  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformer\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: Transformers\n  nameWithType: WebPartConnection.Transformers\n  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers\n- uid: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: WebPartTransformerCollection\n  nameWithType: WebPartTransformerCollection\n  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: WebPartConnection\n  nameWithType: WebPartConnection.WebPartConnection\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: Consumer\n  nameWithType: WebPartConnection.Consumer\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ConsumerConnectionPoint\n  nameWithType: WebPartConnection.ConsumerConnectionPoint\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ConsumerConnectionPointID\n  nameWithType: WebPartConnection.ConsumerConnectionPointID\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ConsumerID\n  nameWithType: WebPartConnection.ConsumerID\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ID\n  nameWithType: WebPartConnection.ID\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: IsActive\n  nameWithType: WebPartConnection.IsActive\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: IsShared\n  nameWithType: WebPartConnection.IsShared\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: IsStatic\n  nameWithType: WebPartConnection.IsStatic\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: Provider\n  nameWithType: WebPartConnection.Provider\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ProviderConnectionPoint\n  nameWithType: WebPartConnection.ProviderConnectionPoint\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ProviderConnectionPointID\n  nameWithType: WebPartConnection.ProviderConnectionPointID\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ProviderID\n  nameWithType: WebPartConnection.ProviderID\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: ToString\n  nameWithType: WebPartConnection.ToString\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: Transformer\n  nameWithType: WebPartConnection.Transformer\n- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*\n  parent: System.Web.UI.WebControls.WebParts.WebPartConnection\n  isExternal: false\n  name: Transformers\n  nameWithType: WebPartConnection.Transformers\n"}