{"nodes":[{"pos":[983,1038],"content":"Defines member attribute identifiers for class members.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines member attribute identifiers for class members.","pos":[0,55]}]},{"pos":[1051,2599],"content":"The identifiers defined in the MemberAttributes enumeration can be used to indicate the scope and access attributes of a class member.      > [!NOTE] >  There is no `Virtual` member attribute. A member is declared virtual by setting its member access to Public (`property1.Attributes = MemberAttributes.Public`) without specifying it as Final. The absence of the Final flag makes a member `virtual` in C# (`public virtual`), `overrideable` in Visual Basic (`Public Overrideable`). To avoid declaring the member as `virtual` or `overrideable`, set both the Public and Final flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property. See the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property for more information on setting member attributes.      > [!NOTE] >  The pattern for setting the access flags (flags containing the terms `Public`, `Private`, `Assembly`, or `Family`) is to mask out all access flags using the AccessMask mask and then set the desired access flag. For example, the code statement to identify a constructor (named `constructor1`) as public is `constructor1.Attributes = (constructor1.Attributes & ~MemberAttributes.AccessMask) | MemberAttributes.Public;`. Setting the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property directly to an access flag (for example, `constructor1.Attributes = MemberAttributes.Public;`) erases all other flags that might be set. This pattern should also be used for setting the scope flags (Abstract, Final, Static, Override or Const) using the ScopeMask mask.","needQuote":false,"needEscape":true,"nodes":[{"content":"The identifiers defined in the MemberAttributes enumeration can be used to indicate the scope and access attributes of a class member.","pos":[0,134]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  There is no <ph id=\"ph2\">`Virtual`</ph> member attribute.","pos":[140,192],"source":"      > [!NOTE] >  There is no `Virtual` member attribute."},{"content":"A member is declared virtual by setting its member access to Public (<ph id=\"ph1\">`property1.Attributes = MemberAttributes.Public`</ph>) without specifying it as Final.","pos":[193,343],"source":" A member is declared virtual by setting its member access to Public (`property1.Attributes = MemberAttributes.Public`) without specifying it as Final."},{"content":"The absence of the Final flag makes a member <ph id=\"ph1\">`virtual`</ph> in C# (<ph id=\"ph2\">`public virtual`</ph>), <ph id=\"ph3\">`overrideable`</ph> in Visual Basic (<ph id=\"ph4\">`Public Overrideable`</ph>).","pos":[344,480],"source":" The absence of the Final flag makes a member `virtual` in C# (`public virtual`), `overrideable` in Visual Basic (`Public Overrideable`)."},{"content":"To avoid declaring the member as <ph id=\"ph1\">`virtual`</ph> or <ph id=\"ph2\">`overrideable`</ph>, set both the Public and Final flags in the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property.","pos":[481,646],"source":" To avoid declaring the member as `virtual` or `overrideable`, set both the Public and Final flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property."},{"content":"See the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property for more information on setting member attributes.","pos":[647,765],"source":" See the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property for more information on setting member attributes."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The pattern for setting the access flags (flags containing the terms <ph id=\"ph2\">`Public`</ph>, <ph id=\"ph3\">`Private`</ph>, <ph id=\"ph4\">`Assembly`</ph>, or <ph id=\"ph5\">`Family`</ph>) is to mask out all access flags using the AccessMask mask and then set the desired access flag.","pos":[771,994],"source":"      > [!NOTE] >  The pattern for setting the access flags (flags containing the terms `Public`, `Private`, `Assembly`, or `Family`) is to mask out all access flags using the AccessMask mask and then set the desired access flag."},{"content":"For example, the code statement to identify a constructor (named <ph id=\"ph1\">`constructor1`</ph>) as public is <ph id=\"ph2\">`constructor1.Attributes = (constructor1.Attributes &amp; ~MemberAttributes.AccessMask) | MemberAttributes.Public;`</ph>.","pos":[995,1201],"source":" For example, the code statement to identify a constructor (named `constructor1`) as public is `constructor1.Attributes = (constructor1.Attributes & ~MemberAttributes.AccessMask) | MemberAttributes.Public;`."},{"content":"Setting the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property directly to an access flag (for example, <ph id=\"ph1\">`constructor1.Attributes = MemberAttributes.Public;`</ph>) erases all other flags that might be set.","pos":[1202,1410],"source":" Setting the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property directly to an access flag (for example, `constructor1.Attributes = MemberAttributes.Public;`) erases all other flags that might be set."},{"content":"This pattern should also be used for setting the scope flags (Abstract, Final, Static, Override or Const) using the ScopeMask mask.","pos":[1411,1542]}]},{"pos":[3561,3580],"content":"An abstract member.","needQuote":true,"needEscape":true,"nodes":[{"content":"An abstract member.","pos":[0,19]}]},{"pos":[3688,3700],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4066,4081],"content":"An access mask.","needQuote":true,"needEscape":true,"nodes":[{"content":"An access mask.","pos":[0,15]}]},{"pos":[4191,4203],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4559,4625],"content":"A member that is accessible to any class within the same assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"A member that is accessible to any class within the same assembly.","pos":[0,66]}]},{"pos":[4733,4745],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5086,5104],"content":"A constant member.","needQuote":true,"needEscape":true,"nodes":[{"content":"A constant member.","pos":[0,18]}]},{"pos":[5209,5221],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5567,5646],"content":"A member that is accessible within the family of its class and derived classes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A member that is accessible within the family of its class and derived classes.","pos":[0,79]}]},{"pos":[5752,5764],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6165,6252],"content":"A member that is accessible within its class, and derived classes in the same assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"A member that is accessible within its class, and derived classes in the same assembly.","pos":[0,87]}]},{"pos":[6369,6381],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6777,6895],"content":"A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.","pos":[0,118]}]},{"pos":[7011,7023],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7364,7418],"content":"A member that cannot be overridden in a derived class.","needQuote":true,"needEscape":true,"nodes":[{"content":"A member that cannot be overridden in a derived class.","pos":[0,54]}]},{"pos":[7523,7535],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7866,7879],"content":"A new member.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new member.","pos":[0,13]}]},{"pos":[7982,7994],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8360,8474],"content":"An overloaded member. Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.","needQuote":true,"needEscape":true,"nodes":[{"content":"An overloaded member. Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.","pos":[0,114],"nodes":[{"content":"An overloaded member.","pos":[0,21]},{"content":"Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.","pos":[22,114]}]}]},{"pos":[8584,8596],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8952,8996],"content":"A member that overrides a base class member.","needQuote":true,"needEscape":true,"nodes":[{"content":"A member that overrides a base class member.","pos":[0,44]}]},{"pos":[9104,9116],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9467,9484],"content":"A private member.","needQuote":true,"needEscape":true,"nodes":[{"content":"A private member.","pos":[0,17]}]},{"pos":[9591,9603],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9949,9965],"content":"A public member.","needQuote":true,"needEscape":true,"nodes":[{"content":"A public member.","pos":[0,16]}]},{"pos":[10071,10083],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10444,10457],"content":"A scope mask.","needQuote":true,"needEscape":true,"nodes":[{"content":"A scope mask.","pos":[0,13]}]},{"pos":[10566,10578],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10924,11057],"content":"A static member. In Visual Basic, this is equivalent to the <xref uid=\"langword_csharp_Shared\" name=\"Shared\" href=\"\"></xref> keyword.","needQuote":true,"needEscape":true,"nodes":[{"content":"A static member.","pos":[0,16]},{"content":"In Visual Basic, this is equivalent to the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shared\" name=\"Shared\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> keyword.","pos":[17,133],"source":" In Visual Basic, this is equivalent to the <xref uid=\"langword_csharp_Shared\" name=\"Shared\" href=\"\"></xref> keyword."}]},{"pos":[11163,11175],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11541,11555],"content":"A VTable mask.","needQuote":true,"needEscape":true,"nodes":[{"content":"A VTable mask.","pos":[0,14]}]},{"pos":[11665,11677],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.CodeDom.MemberAttributes\n  id: MemberAttributes\n  children:\n  - System.CodeDom.MemberAttributes.Abstract\n  - System.CodeDom.MemberAttributes.AccessMask\n  - System.CodeDom.MemberAttributes.Assembly\n  - System.CodeDom.MemberAttributes.Const\n  - System.CodeDom.MemberAttributes.Family\n  - System.CodeDom.MemberAttributes.FamilyAndAssembly\n  - System.CodeDom.MemberAttributes.FamilyOrAssembly\n  - System.CodeDom.MemberAttributes.Final\n  - System.CodeDom.MemberAttributes.New\n  - System.CodeDom.MemberAttributes.Overloaded\n  - System.CodeDom.MemberAttributes.Override\n  - System.CodeDom.MemberAttributes.Private\n  - System.CodeDom.MemberAttributes.Public\n  - System.CodeDom.MemberAttributes.ScopeMask\n  - System.CodeDom.MemberAttributes.Static\n  - System.CodeDom.MemberAttributes.VTableMask\n  langs:\n  - csharp\n  name: MemberAttributes\n  nameWithType: MemberAttributes\n  fullName: System.CodeDom.MemberAttributes\n  type: Enum\n  summary: Defines member attribute identifiers for class members.\n  remarks: \"The identifiers defined in the MemberAttributes enumeration can be used to indicate the scope and access attributes of a class member.  \\n  \\n> [!NOTE]\\n>  There is no `Virtual` member attribute. A member is declared virtual by setting its member access to Public (`property1.Attributes = MemberAttributes.Public`) without specifying it as Final. The absence of the Final flag makes a member `virtual` in C# (`public virtual`), `overrideable` in Visual Basic (`Public Overrideable`). To avoid declaring the member as `virtual` or `overrideable`, set both the Public and Final flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property. See the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property for more information on setting member attributes.  \\n  \\n> [!NOTE]\\n>  The pattern for setting the access flags (flags containing the terms `Public`, `Private`, `Assembly`, or `Family`) is to mask out all access flags using the AccessMask mask and then set the desired access flag. For example, the code statement to identify a constructor (named `constructor1`) as public is `constructor1.Attributes = (constructor1.Attributes & ~MemberAttributes.AccessMask) | MemberAttributes.Public;`. Setting the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property directly to an access flag (for example, `constructor1.Attributes = MemberAttributes.Public;`) erases all other flags that might be set. This pattern should also be used for setting the scope flags (Abstract, Final, Static, Override or Const) using the ScopeMask mask.\"\n  example:\n  - \"The following example code demonstrates use of a <xref:System.CodeDom.CodeMemberProperty> to define a `string` property with `get` and `set` accessors.  \\n  \\n [!code-cpp[CodeMemberPropertyExample#3](~/add/codesnippet/cpp/t-system.codedom.membera_1.cpp)]\\n [!code-vb[CodeMemberPropertyExample#3](~/add/codesnippet/visualbasic/t-system.codedom.membera_1.vb)]\\n [!code-cs[CodeMemberPropertyExample#3](~/add/codesnippet/csharp/t-system.codedom.membera_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum MemberAttributes\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.Abstract\n  id: Abstract\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: Abstract\n  nameWithType: MemberAttributes.Abstract\n  fullName: System.CodeDom.MemberAttributes.Abstract\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: An abstract member.\n  syntax:\n    content: Abstract\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.AccessMask\n  id: AccessMask\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: AccessMask\n  nameWithType: MemberAttributes.AccessMask\n  fullName: System.CodeDom.MemberAttributes.AccessMask\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: An access mask.\n  syntax:\n    content: AccessMask\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.Assembly\n  id: Assembly\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: Assembly\n  nameWithType: MemberAttributes.Assembly\n  fullName: System.CodeDom.MemberAttributes.Assembly\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A member that is accessible to any class within the same assembly.\n  syntax:\n    content: Assembly\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.Const\n  id: Const\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: Const\n  nameWithType: MemberAttributes.Const\n  fullName: System.CodeDom.MemberAttributes.Const\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A constant member.\n  syntax:\n    content: Const\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.Family\n  id: Family\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: Family\n  nameWithType: MemberAttributes.Family\n  fullName: System.CodeDom.MemberAttributes.Family\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A member that is accessible within the family of its class and derived classes.\n  syntax:\n    content: Family\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.FamilyAndAssembly\n  id: FamilyAndAssembly\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: FamilyAndAssembly\n  nameWithType: MemberAttributes.FamilyAndAssembly\n  fullName: System.CodeDom.MemberAttributes.FamilyAndAssembly\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A member that is accessible within its class, and derived classes in the same assembly.\n  syntax:\n    content: FamilyAndAssembly\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.FamilyOrAssembly\n  id: FamilyOrAssembly\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: FamilyOrAssembly\n  nameWithType: MemberAttributes.FamilyOrAssembly\n  fullName: System.CodeDom.MemberAttributes.FamilyOrAssembly\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.\n  syntax:\n    content: FamilyOrAssembly\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.Final\n  id: Final\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: Final\n  nameWithType: MemberAttributes.Final\n  fullName: System.CodeDom.MemberAttributes.Final\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A member that cannot be overridden in a derived class.\n  syntax:\n    content: Final\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.New\n  id: New\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: New\n  nameWithType: MemberAttributes.New\n  fullName: System.CodeDom.MemberAttributes.New\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A new member.\n  syntax:\n    content: New\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.Overloaded\n  id: Overloaded\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: Overloaded\n  nameWithType: MemberAttributes.Overloaded\n  fullName: System.CodeDom.MemberAttributes.Overloaded\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: An overloaded member. Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.\n  syntax:\n    content: Overloaded\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.Override\n  id: Override\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: Override\n  nameWithType: MemberAttributes.Override\n  fullName: System.CodeDom.MemberAttributes.Override\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A member that overrides a base class member.\n  syntax:\n    content: Override\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.Private\n  id: Private\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: Private\n  nameWithType: MemberAttributes.Private\n  fullName: System.CodeDom.MemberAttributes.Private\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A private member.\n  syntax:\n    content: Private\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.Public\n  id: Public\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: Public\n  nameWithType: MemberAttributes.Public\n  fullName: System.CodeDom.MemberAttributes.Public\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A public member.\n  syntax:\n    content: Public\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.ScopeMask\n  id: ScopeMask\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: ScopeMask\n  nameWithType: MemberAttributes.ScopeMask\n  fullName: System.CodeDom.MemberAttributes.ScopeMask\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A scope mask.\n  syntax:\n    content: ScopeMask\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.Static\n  id: Static\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: Static\n  nameWithType: MemberAttributes.Static\n  fullName: System.CodeDom.MemberAttributes.Static\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A static member. In Visual Basic, this is equivalent to the <xref uid=\"langword_csharp_Shared\" name=\"Shared\" href=\"\"></xref> keyword.\n  syntax:\n    content: Static\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.MemberAttributes.VTableMask\n  id: VTableMask\n  parent: System.CodeDom.MemberAttributes\n  langs:\n  - csharp\n  name: VTableMask\n  nameWithType: MemberAttributes.VTableMask\n  fullName: System.CodeDom.MemberAttributes.VTableMask\n  type: Field\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: A VTable mask.\n  syntax:\n    content: VTableMask\n    return:\n      type: System.CodeDom.MemberAttributes\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.CodeDom.MemberAttributes.Abstract\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: Abstract\n  nameWithType: MemberAttributes.Abstract\n  fullName: System.CodeDom.MemberAttributes.Abstract\n- uid: System.CodeDom.MemberAttributes\n  parent: System.CodeDom\n  isExternal: false\n  name: MemberAttributes\n  nameWithType: MemberAttributes\n  fullName: System.CodeDom.MemberAttributes\n- uid: System.CodeDom.MemberAttributes.AccessMask\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: AccessMask\n  nameWithType: MemberAttributes.AccessMask\n  fullName: System.CodeDom.MemberAttributes.AccessMask\n- uid: System.CodeDom.MemberAttributes.Assembly\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: Assembly\n  nameWithType: MemberAttributes.Assembly\n  fullName: System.CodeDom.MemberAttributes.Assembly\n- uid: System.CodeDom.MemberAttributes.Const\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: Const\n  nameWithType: MemberAttributes.Const\n  fullName: System.CodeDom.MemberAttributes.Const\n- uid: System.CodeDom.MemberAttributes.Family\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: Family\n  nameWithType: MemberAttributes.Family\n  fullName: System.CodeDom.MemberAttributes.Family\n- uid: System.CodeDom.MemberAttributes.FamilyAndAssembly\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: FamilyAndAssembly\n  nameWithType: MemberAttributes.FamilyAndAssembly\n  fullName: System.CodeDom.MemberAttributes.FamilyAndAssembly\n- uid: System.CodeDom.MemberAttributes.FamilyOrAssembly\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: FamilyOrAssembly\n  nameWithType: MemberAttributes.FamilyOrAssembly\n  fullName: System.CodeDom.MemberAttributes.FamilyOrAssembly\n- uid: System.CodeDom.MemberAttributes.Final\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: Final\n  nameWithType: MemberAttributes.Final\n  fullName: System.CodeDom.MemberAttributes.Final\n- uid: System.CodeDom.MemberAttributes.New\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: New\n  nameWithType: MemberAttributes.New\n  fullName: System.CodeDom.MemberAttributes.New\n- uid: System.CodeDom.MemberAttributes.Overloaded\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: Overloaded\n  nameWithType: MemberAttributes.Overloaded\n  fullName: System.CodeDom.MemberAttributes.Overloaded\n- uid: System.CodeDom.MemberAttributes.Override\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: Override\n  nameWithType: MemberAttributes.Override\n  fullName: System.CodeDom.MemberAttributes.Override\n- uid: System.CodeDom.MemberAttributes.Private\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: Private\n  nameWithType: MemberAttributes.Private\n  fullName: System.CodeDom.MemberAttributes.Private\n- uid: System.CodeDom.MemberAttributes.Public\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: Public\n  nameWithType: MemberAttributes.Public\n  fullName: System.CodeDom.MemberAttributes.Public\n- uid: System.CodeDom.MemberAttributes.ScopeMask\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: ScopeMask\n  nameWithType: MemberAttributes.ScopeMask\n  fullName: System.CodeDom.MemberAttributes.ScopeMask\n- uid: System.CodeDom.MemberAttributes.Static\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: Static\n  nameWithType: MemberAttributes.Static\n  fullName: System.CodeDom.MemberAttributes.Static\n- uid: System.CodeDom.MemberAttributes.VTableMask\n  parent: System.CodeDom.MemberAttributes\n  isExternal: false\n  name: VTableMask\n  nameWithType: MemberAttributes.VTableMask\n  fullName: System.CodeDom.MemberAttributes.VTableMask\n"}