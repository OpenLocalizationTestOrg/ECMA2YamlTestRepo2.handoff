{"nodes":[{"pos":[1007,1074],"content":"Provides information for assessing the health of a running process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides information for assessing the health of a running process.","pos":[0,67]}]},{"pos":[1087,2505],"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.       Instances of the WebProcessStatistics class contain information that is obtained using the <xref:System.Web.Management.WebHeartbeatEvent> type.      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom event class, see the example provided in this topic.       The following is an excerpt of a configuration file you could use to enable ASP.NET to log heartbeat events that contain process statistics.      ```   <healthMonitoring      enabled=\"true\" heartBeatInterval=\"100\">          <rules>         <add            name=\"Process Statistics\"           eventName=\"Heartbeats\"            provider=\"EventLogProvider\"             profile=\"Default\"/>       </rules>      </healthMonitoring>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications.","pos":[0,101]},{"content":"The &lt;xref:System.Web.Management&gt; namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data.","pos":[102,294],"source":" The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data."},{"content":"It also contains supporting types that help during the management of health events.","pos":[295,378]},{"content":"Instances of the WebProcessStatistics class contain information that is obtained using the &lt;xref:System.Web.Management.WebHeartbeatEvent&gt; type.","pos":[385,528],"source":"       Instances of the WebProcessStatistics class contain information that is obtained using the <xref:System.Web.Management.WebHeartbeatEvent> type."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <ph id=\"ph2\">`healthMonitoring`</ph> configuration section.","pos":[534,756],"source":"      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section."},{"content":"You can also derive from the health-monitoring types to create your own custom events and providers.","pos":[757,857]},{"content":"For an example of creating a custom event class, see the example provided in this topic.","pos":[858,946]},{"content":"The following is an excerpt of a configuration file you could use to enable ASP.NET to log heartbeat events that contain process statistics.","pos":[953,1093]}]},{"pos":[4316,4420],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebProcessStatistics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Management.WebProcessStatistics\"></xref> class."},{"pos":[4993,5047],"content":"Gets the number of application domains in the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of application domains in the process.","pos":[0,54]}]},{"pos":[5059,5171],"content":"This property usually refers to the number of ASP.NET applications in the process, including the default domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property usually refers to the number of ASP.NET applications in the process, including the default domain.","pos":[0,112]}]},{"pos":[5620,5654],"content":"The number of application domains.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of application domains.","pos":[0,34]}]},{"pos":[6299,6330],"content":"Formats the process statistics.","needQuote":true,"needEscape":true,"nodes":[{"content":"Formats the process statistics.","pos":[0,31]}]},{"pos":[6342,6622],"content":"The FormatToString method provides a uniform format for event information, which is useful if the event data must be logged and later presented to the user. It is called internally when the provider invokes one of the <xref:System.Web.Management.WebBaseEvent.ToString%2A> methods.","needQuote":true,"needEscape":true,"nodes":[{"content":"The FormatToString method provides a uniform format for event information, which is useful if the event data must be logged and later presented to the user. It is called internally when the provider invokes one of the <xref:System.Web.Management.WebBaseEvent.ToString%2A> methods.","pos":[0,280],"nodes":[{"content":"The FormatToString method provides a uniform format for event information, which is useful if the event data must be logged and later presented to the user.","pos":[0,156]},{"content":"It is called internally when the provider invokes one of the &lt;xref:System.Web.Management.WebBaseEvent.ToString%2A&gt; methods.","pos":[157,280],"source":" It is called internally when the provider invokes one of the <xref:System.Web.Management.WebBaseEvent.ToString%2A> methods."}]}]},{"pos":[7168,7328],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventFormatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the tab and indentation settings used to format the Web health event information.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.Management.WebEventFormatter\"></xref> that contains the tab and indentation settings used to format the Web health event information."},{"pos":[7841,7875],"content":"Gets the size of the managed heap.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the size of the managed heap.","pos":[0,34]}]},{"pos":[8339,8368],"content":"The size of the managed heap.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the managed heap.","pos":[0,29]}]},{"pos":[8877,8943],"content":"Gets the peak working set for the lifetime of the process to date.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the peak working set for the lifetime of the process to date.","pos":[0,66]}]},{"pos":[9405,9441],"content":"The peak working set of the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"The peak working set of the process.","pos":[0,36]}]},{"pos":[9959,9998],"content":"Gets the time when the process started.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the time when the process started.","pos":[0,39]}]},{"pos":[10473,10525],"content":"The <xref:System.DateTime> when the process started.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; when the process started.","pos":[0,52],"source":"The <xref:System.DateTime> when the process started."}]},{"pos":[11050,11098],"content":"Gets the number of requests currently executing.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of requests currently executing.","pos":[0,48]}]},{"pos":[11110,11165],"content":"The RequestsExecuting value is a useful load indicator.","needQuote":true,"needEscape":true,"nodes":[{"content":"The RequestsExecuting value is a useful load indicator.","pos":[0,55]}]},{"pos":[11620,11683],"content":"The number of requests that the process is currently executing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of requests that the process is currently executing.","pos":[0,63]}]},{"pos":[12194,12246],"content":"Gets the number of requests waiting to be processed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of requests waiting to be processed.","pos":[0,52]}]},{"pos":[12258,12310],"content":"The RequestsQueued value is a useful load indicator.","needQuote":true,"needEscape":true,"nodes":[{"content":"The RequestsQueued value is a useful load indicator.","pos":[0,52]}]},{"pos":[12761,12808],"content":"The number of requests waiting to be processed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of requests waiting to be processed.","pos":[0,47]}]},{"pos":[13326,13363],"content":"Gets the number of rejected requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of rejected requests.","pos":[0,37]}]},{"pos":[13375,13467],"content":"This RequestsRejected value is a useful indicator of an overloaded or malfunctioning system.","needQuote":true,"needEscape":true,"nodes":[{"content":"This RequestsRejected value is a useful indicator of an overloaded or malfunctioning system.","pos":[0,92]}]},{"pos":[13920,13952],"content":"The number of rejected requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rejected requests.","pos":[0,32]}]},{"pos":[14447,14491],"content":"Gets the total count of the process threads.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the total count of the process threads.","pos":[0,44]}]},{"pos":[14503,14557],"content":"The count refers to the managed and unmanaged threads.","needQuote":true,"needEscape":true,"nodes":[{"content":"The count refers to the managed and unmanaged threads.","pos":[0,54]}]},{"pos":[15002,15041],"content":"The total count of the process threads.","needQuote":true,"needEscape":true,"nodes":[{"content":"The total count of the process threads.","pos":[0,39]}]},{"pos":[15526,15563],"content":"Gets the working set for the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the working set for the process.","pos":[0,37]}]},{"pos":[16021,16053],"content":"The working set for the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"The working set for the process.","pos":[0,32]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Management.WebProcessStatistics\n  id: WebProcessStatistics\n  children:\n  - System.Web.Management.WebProcessStatistics.#ctor\n  - System.Web.Management.WebProcessStatistics.AppDomainCount\n  - System.Web.Management.WebProcessStatistics.FormatToString(System.Web.Management.WebEventFormatter)\n  - System.Web.Management.WebProcessStatistics.ManagedHeapSize\n  - System.Web.Management.WebProcessStatistics.PeakWorkingSet\n  - System.Web.Management.WebProcessStatistics.ProcessStartTime\n  - System.Web.Management.WebProcessStatistics.RequestsExecuting\n  - System.Web.Management.WebProcessStatistics.RequestsQueued\n  - System.Web.Management.WebProcessStatistics.RequestsRejected\n  - System.Web.Management.WebProcessStatistics.ThreadCount\n  - System.Web.Management.WebProcessStatistics.WorkingSet\n  langs:\n  - csharp\n  name: WebProcessStatistics\n  nameWithType: WebProcessStatistics\n  fullName: System.Web.Management.WebProcessStatistics\n  type: Class\n  summary: Provides information for assessing the health of a running process.\n  remarks: \"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  \\n  \\n Instances of the WebProcessStatistics class contain information that is obtained using the <xref:System.Web.Management.WebHeartbeatEvent> type.  \\n  \\n> [!NOTE]\\n>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom event class, see the example provided in this topic.  \\n  \\n The following is an excerpt of a configuration file you could use to enable ASP.NET to log heartbeat events that contain process statistics.  \\n  \\n```  \\n<healthMonitoring   \\n  enabled=\\\"true\\\" heartBeatInterval=\\\"100\\\">  \\n  \\n    <rules>  \\n      <add   \\n        name=\\\"Process Statistics\\\"  \\n        eventName=\\\"Heartbeats\\\"   \\n        provider=\\\"EventLogProvider\\\"    \\n        profile=\\\"Default\\\"/>  \\n    </rules>  \\n  \\n</healthMonitoring>  \\n```\"\n  example:\n  - \"The following code example has two parts. The first is an excerpt of the configuration file that enables ASP.NET to use a custom event that uses the WebProcessStatistics type. The second shows how to implement this custom event..  \\n  \\n Ensure that your custom event is raised at the proper time, that is, when the equivalent system health event it replaces would be raised.  \\n  \\n```  \\n<healthMonitoring   \\n  enabled=\\\"true\\\" heartBeatInterval=\\\"0\\\">  \\n  \\n    <eventMappings>  \\n      <add  name=\\\"SampleProcessStatistics\\\" type=\\\"SamplesAspNet.SampleWebProcessStatistics, webprocessstatistics, Version=1.0.1585.27289, Culture=neutral, PublicKeyToken=3648e5c763a8239f, processorArchitecture=MSIL\\\"/>  \\n    </eventMappings>  \\n  \\n    <rules>  \\n      <add   \\n        name=\\\"Custom Process Statistics\\\"  \\n        eventName=\\\"SampleProcessStatistics\\\"   \\n        provider=\\\"EventLogProvider\\\"    \\n        profile=\\\"Default\\\"/>  \\n    </rules>  \\n  \\n</healthMonitoring>  \\n```  \\n  \\n [!code-cs[System.Web.Management.WebProcessStatistics#1](~/add/codesnippet/csharp/t-system.web.management._3_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessStatistics#1](~/add/codesnippet/visualbasic/t-system.web.management._3_1.vb)]\"\n  syntax:\n    content: public class WebProcessStatistics\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessStatistics.#ctor\n  id: '#ctor'\n  parent: System.Web.Management.WebProcessStatistics\n  langs:\n  - csharp\n  name: WebProcessStatistics()\n  nameWithType: WebProcessStatistics.WebProcessStatistics()\n  fullName: System.Web.Management.WebProcessStatistics.WebProcessStatistics()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Initializes a new instance of the <xref href=\"System.Web.Management.WebProcessStatistics\"></xref> class.\n  syntax:\n    content: public WebProcessStatistics ();\n    parameters: []\n  overload: System.Web.Management.WebProcessStatistics.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessStatistics.AppDomainCount\n  id: AppDomainCount\n  parent: System.Web.Management.WebProcessStatistics\n  langs:\n  - csharp\n  name: AppDomainCount\n  nameWithType: WebProcessStatistics.AppDomainCount\n  fullName: System.Web.Management.WebProcessStatistics.AppDomainCount\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the number of application domains in the process.\n  remarks: This property usually refers to the number of ASP.NET applications in the process, including the default domain.\n  example:\n  - \"The following code example shows how to get the AppDomainCount value.  \\n  \\n [!code-cs[System.Web.Management.WebProcessStatistics#5](~/add/codesnippet/csharp/p-system.web.management._31_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessStatistics#5](~/add/codesnippet/visualbasic/p-system.web.management._31_1.vb)]\"\n  syntax:\n    content: public int AppDomainCount { get; }\n    return:\n      type: System.Int32\n      description: The number of application domains.\n  overload: System.Web.Management.WebProcessStatistics.AppDomainCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessStatistics.FormatToString(System.Web.Management.WebEventFormatter)\n  id: FormatToString(System.Web.Management.WebEventFormatter)\n  parent: System.Web.Management.WebProcessStatistics\n  langs:\n  - csharp\n  name: FormatToString(WebEventFormatter)\n  nameWithType: WebProcessStatistics.FormatToString(WebEventFormatter)\n  fullName: System.Web.Management.WebProcessStatistics.FormatToString(WebEventFormatter)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Formats the process statistics.\n  remarks: The FormatToString method provides a uniform format for event information, which is useful if the event data must be logged and later presented to the user. It is called internally when the provider invokes one of the <xref:System.Web.Management.WebBaseEvent.ToString%2A> methods.\n  example:\n  - \"The following code example shows how to format custom information.  \\n  \\n [!code-cs[System.Web.Management.WebProcessStatistics#14](~/add/codesnippet/csharp/48042949-8229-44e8-b028-_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessStatistics#14](~/add/codesnippet/visualbasic/48042949-8229-44e8-b028-_1.vb)]\"\n  syntax:\n    content: public virtual void FormatToString (System.Web.Management.WebEventFormatter formatter);\n    parameters:\n    - id: formatter\n      type: System.Web.Management.WebEventFormatter\n      description: The <xref href=\"System.Web.Management.WebEventFormatter\"></xref> that contains the tab and indentation settings used to format the Web health event information.\n  overload: System.Web.Management.WebProcessStatistics.FormatToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessStatistics.ManagedHeapSize\n  id: ManagedHeapSize\n  parent: System.Web.Management.WebProcessStatistics\n  langs:\n  - csharp\n  name: ManagedHeapSize\n  nameWithType: WebProcessStatistics.ManagedHeapSize\n  fullName: System.Web.Management.WebProcessStatistics.ManagedHeapSize\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the size of the managed heap.\n  remarks: ''\n  example:\n  - \"The following code example shows how to get the ManagedHeapSize value.  \\n  \\n [!code-cs[System.Web.Management.WebProcessStatistics#6](~/add/codesnippet/csharp/p-system.web.management._1_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessStatistics#6](~/add/codesnippet/visualbasic/p-system.web.management._1_1.vb)]\"\n  syntax:\n    content: public long ManagedHeapSize { get; }\n    return:\n      type: System.Int64\n      description: The size of the managed heap.\n  overload: System.Web.Management.WebProcessStatistics.ManagedHeapSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessStatistics.PeakWorkingSet\n  id: PeakWorkingSet\n  parent: System.Web.Management.WebProcessStatistics\n  langs:\n  - csharp\n  name: PeakWorkingSet\n  nameWithType: WebProcessStatistics.PeakWorkingSet\n  fullName: System.Web.Management.WebProcessStatistics.PeakWorkingSet\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the peak working set for the lifetime of the process to date.\n  remarks: ''\n  example:\n  - \"The following code example shows how to get the PeakWorkingSet value.  \\n  \\n [!code-cs[System.Web.Management.WebProcessStatistics#7](~/add/codesnippet/csharp/p-system.web.management._5_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessStatistics#7](~/add/codesnippet/visualbasic/p-system.web.management._5_1.vb)]\"\n  syntax:\n    content: public long PeakWorkingSet { get; }\n    return:\n      type: System.Int64\n      description: The peak working set of the process.\n  overload: System.Web.Management.WebProcessStatistics.PeakWorkingSet*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessStatistics.ProcessStartTime\n  id: ProcessStartTime\n  parent: System.Web.Management.WebProcessStatistics\n  langs:\n  - csharp\n  name: ProcessStartTime\n  nameWithType: WebProcessStatistics.ProcessStartTime\n  fullName: System.Web.Management.WebProcessStatistics.ProcessStartTime\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the time when the process started.\n  remarks: ''\n  example:\n  - \"The following code example shows how to get the ProcessStartTime value.  \\n  \\n [!code-cs[System.Web.Management.WebProcessStatistics#8](~/add/codesnippet/csharp/p-system.web.management._42_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessStatistics#8](~/add/codesnippet/visualbasic/p-system.web.management._42_1.vb)]\"\n  syntax:\n    content: public DateTime ProcessStartTime { get; }\n    return:\n      type: System.DateTime\n      description: The <xref:System.DateTime> when the process started.\n  overload: System.Web.Management.WebProcessStatistics.ProcessStartTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessStatistics.RequestsExecuting\n  id: RequestsExecuting\n  parent: System.Web.Management.WebProcessStatistics\n  langs:\n  - csharp\n  name: RequestsExecuting\n  nameWithType: WebProcessStatistics.RequestsExecuting\n  fullName: System.Web.Management.WebProcessStatistics.RequestsExecuting\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the number of requests currently executing.\n  remarks: The RequestsExecuting value is a useful load indicator.\n  example:\n  - \"The following code example shows how to get the RequestsExecuting value.  \\n  \\n [!code-cs[System.Web.Management.WebProcessStatistics#9](~/add/codesnippet/csharp/p-system.web.management._18_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessStatistics#9](~/add/codesnippet/visualbasic/p-system.web.management._18_1.vb)]\"\n  syntax:\n    content: public int RequestsExecuting { get; }\n    return:\n      type: System.Int32\n      description: The number of requests that the process is currently executing.\n  overload: System.Web.Management.WebProcessStatistics.RequestsExecuting*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessStatistics.RequestsQueued\n  id: RequestsQueued\n  parent: System.Web.Management.WebProcessStatistics\n  langs:\n  - csharp\n  name: RequestsQueued\n  nameWithType: WebProcessStatistics.RequestsQueued\n  fullName: System.Web.Management.WebProcessStatistics.RequestsQueued\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the number of requests waiting to be processed.\n  remarks: The RequestsQueued value is a useful load indicator.\n  example:\n  - \"The following code example shows how to get the RequestsQueued value.  \\n  \\n [!code-cs[System.Web.Management.WebProcessStatistics#10](~/add/codesnippet/csharp/p-system.web.management._12_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessStatistics#10](~/add/codesnippet/visualbasic/p-system.web.management._12_1.vb)]\"\n  syntax:\n    content: public int RequestsQueued { get; }\n    return:\n      type: System.Int32\n      description: The number of requests waiting to be processed.\n  overload: System.Web.Management.WebProcessStatistics.RequestsQueued*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessStatistics.RequestsRejected\n  id: RequestsRejected\n  parent: System.Web.Management.WebProcessStatistics\n  langs:\n  - csharp\n  name: RequestsRejected\n  nameWithType: WebProcessStatistics.RequestsRejected\n  fullName: System.Web.Management.WebProcessStatistics.RequestsRejected\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the number of rejected requests.\n  remarks: This RequestsRejected value is a useful indicator of an overloaded or malfunctioning system.\n  example:\n  - \"The following code example shows how to get the RequestsRejected value.  \\n  \\n [!code-cs[System.Web.Management.WebProcessStatistics#11](~/add/codesnippet/csharp/p-system.web.management._8_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessStatistics#11](~/add/codesnippet/visualbasic/p-system.web.management._8_1.vb)]\"\n  syntax:\n    content: public int RequestsRejected { get; }\n    return:\n      type: System.Int32\n      description: The number of rejected requests.\n  overload: System.Web.Management.WebProcessStatistics.RequestsRejected*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessStatistics.ThreadCount\n  id: ThreadCount\n  parent: System.Web.Management.WebProcessStatistics\n  langs:\n  - csharp\n  name: ThreadCount\n  nameWithType: WebProcessStatistics.ThreadCount\n  fullName: System.Web.Management.WebProcessStatistics.ThreadCount\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the total count of the process threads.\n  remarks: The count refers to the managed and unmanaged threads.\n  example:\n  - \"The following code example shows how to get the ThreadCount value.  \\n  \\n [!code-cs[System.Web.Management.WebProcessStatistics#12](~/add/codesnippet/csharp/p-system.web.management._35_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessStatistics#12](~/add/codesnippet/visualbasic/p-system.web.management._35_1.vb)]\"\n  syntax:\n    content: public int ThreadCount { get; }\n    return:\n      type: System.Int32\n      description: The total count of the process threads.\n  overload: System.Web.Management.WebProcessStatistics.ThreadCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebProcessStatistics.WorkingSet\n  id: WorkingSet\n  parent: System.Web.Management.WebProcessStatistics\n  langs:\n  - csharp\n  name: WorkingSet\n  nameWithType: WebProcessStatistics.WorkingSet\n  fullName: System.Web.Management.WebProcessStatistics.WorkingSet\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Gets the working set for the process.\n  remarks: ''\n  example:\n  - \"The following code example shows how to get the WorkingSet value.  \\n  \\n [!code-cs[System.Web.Management.WebProcessStatistics#13](~/add/codesnippet/csharp/p-system.web.management._27_1.cs)]\\n [!code-vb[System.Web.Management.WebProcessStatistics#13](~/add/codesnippet/visualbasic/p-system.web.management._27_1.vb)]\"\n  syntax:\n    content: public long WorkingSet { get; }\n    return:\n      type: System.Int64\n      description: The working set for the process.\n  overload: System.Web.Management.WebProcessStatistics.WorkingSet*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Web.Management.WebProcessStatistics.#ctor\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: WebProcessStatistics()\n  nameWithType: WebProcessStatistics.WebProcessStatistics()\n  fullName: System.Web.Management.WebProcessStatistics.WebProcessStatistics()\n- uid: System.Web.Management.WebProcessStatistics.AppDomainCount\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: AppDomainCount\n  nameWithType: WebProcessStatistics.AppDomainCount\n  fullName: System.Web.Management.WebProcessStatistics.AppDomainCount\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.Management.WebProcessStatistics.FormatToString(System.Web.Management.WebEventFormatter)\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: FormatToString(WebEventFormatter)\n  nameWithType: WebProcessStatistics.FormatToString(WebEventFormatter)\n  fullName: System.Web.Management.WebProcessStatistics.FormatToString(WebEventFormatter)\n- uid: System.Web.Management.WebEventFormatter\n  parent: System.Web.Management\n  isExternal: false\n  name: WebEventFormatter\n  nameWithType: WebEventFormatter\n  fullName: System.Web.Management.WebEventFormatter\n- uid: System.Web.Management.WebProcessStatistics.ManagedHeapSize\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: ManagedHeapSize\n  nameWithType: WebProcessStatistics.ManagedHeapSize\n  fullName: System.Web.Management.WebProcessStatistics.ManagedHeapSize\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Web.Management.WebProcessStatistics.PeakWorkingSet\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: PeakWorkingSet\n  nameWithType: WebProcessStatistics.PeakWorkingSet\n  fullName: System.Web.Management.WebProcessStatistics.PeakWorkingSet\n- uid: System.Web.Management.WebProcessStatistics.ProcessStartTime\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: ProcessStartTime\n  nameWithType: WebProcessStatistics.ProcessStartTime\n  fullName: System.Web.Management.WebProcessStatistics.ProcessStartTime\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Web.Management.WebProcessStatistics.RequestsExecuting\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: RequestsExecuting\n  nameWithType: WebProcessStatistics.RequestsExecuting\n  fullName: System.Web.Management.WebProcessStatistics.RequestsExecuting\n- uid: System.Web.Management.WebProcessStatistics.RequestsQueued\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: RequestsQueued\n  nameWithType: WebProcessStatistics.RequestsQueued\n  fullName: System.Web.Management.WebProcessStatistics.RequestsQueued\n- uid: System.Web.Management.WebProcessStatistics.RequestsRejected\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: RequestsRejected\n  nameWithType: WebProcessStatistics.RequestsRejected\n  fullName: System.Web.Management.WebProcessStatistics.RequestsRejected\n- uid: System.Web.Management.WebProcessStatistics.ThreadCount\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: ThreadCount\n  nameWithType: WebProcessStatistics.ThreadCount\n  fullName: System.Web.Management.WebProcessStatistics.ThreadCount\n- uid: System.Web.Management.WebProcessStatistics.WorkingSet\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: WorkingSet\n  nameWithType: WebProcessStatistics.WorkingSet\n  fullName: System.Web.Management.WebProcessStatistics.WorkingSet\n- uid: System.Web.Management.WebProcessStatistics.#ctor*\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: WebProcessStatistics\n  nameWithType: WebProcessStatistics.WebProcessStatistics\n- uid: System.Web.Management.WebProcessStatistics.AppDomainCount*\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: AppDomainCount\n  nameWithType: WebProcessStatistics.AppDomainCount\n- uid: System.Web.Management.WebProcessStatistics.FormatToString*\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: FormatToString\n  nameWithType: WebProcessStatistics.FormatToString\n- uid: System.Web.Management.WebProcessStatistics.ManagedHeapSize*\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: ManagedHeapSize\n  nameWithType: WebProcessStatistics.ManagedHeapSize\n- uid: System.Web.Management.WebProcessStatistics.PeakWorkingSet*\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: PeakWorkingSet\n  nameWithType: WebProcessStatistics.PeakWorkingSet\n- uid: System.Web.Management.WebProcessStatistics.ProcessStartTime*\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: ProcessStartTime\n  nameWithType: WebProcessStatistics.ProcessStartTime\n- uid: System.Web.Management.WebProcessStatistics.RequestsExecuting*\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: RequestsExecuting\n  nameWithType: WebProcessStatistics.RequestsExecuting\n- uid: System.Web.Management.WebProcessStatistics.RequestsQueued*\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: RequestsQueued\n  nameWithType: WebProcessStatistics.RequestsQueued\n- uid: System.Web.Management.WebProcessStatistics.RequestsRejected*\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: RequestsRejected\n  nameWithType: WebProcessStatistics.RequestsRejected\n- uid: System.Web.Management.WebProcessStatistics.ThreadCount*\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: ThreadCount\n  nameWithType: WebProcessStatistics.ThreadCount\n- uid: System.Web.Management.WebProcessStatistics.WorkingSet*\n  parent: System.Web.Management.WebProcessStatistics\n  isExternal: false\n  name: WorkingSet\n  nameWithType: WebProcessStatistics.WorkingSet\n"}