{"nodes":[{"pos":[417,501],"content":"Used to indicate that a control can be the target of a callback event on the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"Used to indicate that a control can be the target of a callback event on the server.","pos":[0,84]}]},{"pos":[514,3040],"content":"Implement the ICallbackEventHandler interface for any custom control that needs to receive callback events. For more information, see [Implementing Client Callbacks Without Postbacks](~/add/includes/ajax-current-ext-md.md).       Examples of controls that implement the ICallbackEventHandler interface include the <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> controls. When a callback event targets a control that implements the ICallbackEventHandler interface, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is called to handle the event, passing the event argument as a parameter and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the result of the callback.       Controls that retrieve data from a data source control during callback can do so synchronously or asynchronously. ASP.NET controls like <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> are implemented synchronously. Synchronous callbacks do not prevent the user from working in the browser. In synchronous mode, only one callback at a time can execute, with the last callback taking precedence. When a Web control is implemented to support asynchronous behavior, multiple callbacks can be raised simultaneously. For details on asynchronous programming, see [Event-based Asynchronous Pattern (EAP)](~/add/includes/ajax-current-ext-md.md).       You can specify whether callback events originating from the user interface rendered by a control implementing the ICallbackEventHandler interface are validated. Validation of events is a good security practice. However, for performance reasons you can disable it. To control whether event validation is performed on callback events, set the `enableEventValidation` attribute of the [@ Page](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) directive or the `enableEventValidation` attribute of the [pages Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/4123bb66-3fe4-4d62-b70e-33758656b458) of the Web.config file. If you set the <xref:System.Web.UI.Page.EnableEventValidation%2A> property in code, set it in the `Page_Init` phase of page processing. For more information on balancing the security benefit of event validation with its performance cost, see [ASP.NET Performance Overview](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Implement the ICallbackEventHandler interface for any custom control that needs to receive callback events.","pos":[0,107]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Implementing Client Callbacks Without Postbacks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[108,223],"source":" For more information, see [Implementing Client Callbacks Without Postbacks](~/add/includes/ajax-current-ext-md.md)."},{"content":"Examples of controls that implement the ICallbackEventHandler interface include the &lt;xref:System.Web.UI.WebControls.GridView&gt;, &lt;xref:System.Web.UI.WebControls.DetailsView&gt;, and &lt;xref:System.Web.UI.WebControls.TreeView&gt; controls.","pos":[230,458],"source":"       Examples of controls that implement the ICallbackEventHandler interface include the <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> controls."},{"content":"When a callback event targets a control that implements the ICallbackEventHandler interface, the &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt; method is called to handle the event, passing the event argument as a parameter and the &lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt; method returns the result of the callback.","pos":[459,815],"source":" When a callback event targets a control that implements the ICallbackEventHandler interface, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is called to handle the event, passing the event argument as a parameter and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the result of the callback."},{"content":"Controls that retrieve data from a data source control during callback can do so synchronously or asynchronously.","pos":[822,935]},{"content":"ASP.NET controls like &lt;xref:System.Web.UI.WebControls.GridView&gt;, &lt;xref:System.Web.UI.WebControls.DetailsView&gt;, and &lt;xref:System.Web.UI.WebControls.TreeView&gt; are implemented synchronously.","pos":[936,1123],"source":" ASP.NET controls like <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> are implemented synchronously."},{"content":"Synchronous callbacks do not prevent the user from working in the browser.","pos":[1124,1198]},{"content":"In synchronous mode, only one callback at a time can execute, with the last callback taking precedence.","pos":[1199,1302]},{"content":"When a Web control is implemented to support asynchronous behavior, multiple callbacks can be raised simultaneously.","pos":[1303,1419]},{"content":"For details on asynchronous programming, see <bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1420,1545],"source":" For details on asynchronous programming, see [Event-based Asynchronous Pattern (EAP)](~/add/includes/ajax-current-ext-md.md)."},{"content":"You can specify whether callback events originating from the user interface rendered by a control implementing the ICallbackEventHandler interface are validated.","pos":[1552,1713]},{"content":"Validation of events is a good security practice.","pos":[1714,1763]},{"content":"However, for performance reasons you can disable it.","pos":[1764,1816]},{"content":"To control whether event validation is performed on callback events, set the <ph id=\"ph1\">`enableEventValidation`</ph> attribute of the <bpt id=\"p1\">[</bpt>@ Page<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4)</ept> directive or the <ph id=\"ph2\">`enableEventValidation`</ph> attribute of the <bpt id=\"p2\">[</bpt>pages Element (ASP.NET Settings Schema)<ept id=\"p2\">](http://msdn.microsoft.com/en-us/4123bb66-3fe4-4d62-b70e-33758656b458)</ept> of the Web.config file.","pos":[1817,2207],"source":" To control whether event validation is performed on callback events, set the `enableEventValidation` attribute of the [@ Page](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) directive or the `enableEventValidation` attribute of the [pages Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/4123bb66-3fe4-4d62-b70e-33758656b458) of the Web.config file."},{"content":"If you set the &lt;xref:System.Web.UI.Page.EnableEventValidation%2A&gt; property in code, set it in the <ph id=\"ph1\">`Page_Init`</ph> phase of page processing.","pos":[2208,2343],"source":" If you set the <xref:System.Web.UI.Page.EnableEventValidation%2A> property in code, set it in the `Page_Init` phase of page processing."},{"content":"For more information on balancing the security benefit of event validation with its performance cost, see <bpt id=\"p1\">[</bpt>ASP.NET Performance Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2344,2520],"source":" For more information on balancing the security benefit of event validation with its performance cost, see [ASP.NET Performance Overview](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[3531,3594],"content":"Returns the results of a callback event that targets a control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the results of a callback event that targets a control.","pos":[0,63]}]},{"pos":[3606,3980],"content":"Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent GetCallbackResult from being called and returning a result. To prevent GetCallbackResult from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from GetCallbackResult.","needQuote":true,"needEscape":true,"nodes":[{"content":"Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent GetCallbackResult from being called and returning a result. To prevent GetCallbackResult from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from GetCallbackResult.","pos":[0,374],"nodes":[{"content":"Exceptions thrown in &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt; will not prevent GetCallbackResult from being called and returning a result.","pos":[0,162],"source":"Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent GetCallbackResult from being called and returning a result."},{"content":"To prevent GetCallbackResult from returning a result, set a flag when an exception is thrown in &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt; and return an empty string from GetCallbackResult.","pos":[163,374],"source":" To prevent GetCallbackResult from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from GetCallbackResult."}]}]},{"pos":[4116,4143],"content":"The result of the callback.","needQuote":true,"needEscape":true,"nodes":[{"content":"The result of the callback.","pos":[0,27]}]},{"pos":[4691,4741],"content":"Processes a callback event that targets a control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Processes a callback event that targets a control.","pos":[0,50]}]},{"pos":[4754,5435],"content":"When `null` is used as the event argument parameter, the string is serialized to \"null\" and sent back to the server. Because there is no way to distinguish between `null` and \"null\", you should avoid using `null` argument parameters with callbacks.       Exceptions thrown in RaiseCallbackEvent will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result. To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in RaiseCallbackEvent and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"When <ph id=\"ph1\">`null`</ph> is used as the event argument parameter, the string is serialized to \"null\" and sent back to the server.","pos":[0,116],"source":"When `null` is used as the event argument parameter, the string is serialized to \"null\" and sent back to the server."},{"content":"Because there is no way to distinguish between <ph id=\"ph1\">`null`</ph> and \"null\", you should avoid using <ph id=\"ph2\">`null`</ph> argument parameters with callbacks.","pos":[117,248],"source":" Because there is no way to distinguish between `null` and \"null\", you should avoid using `null` argument parameters with callbacks."},{"content":"Exceptions thrown in RaiseCallbackEvent will not prevent &lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt; from being called and returning a result.","pos":[255,417],"source":"       Exceptions thrown in RaiseCallbackEvent will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result."},{"content":"To prevent &lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt; from returning a result, set a flag when an exception is thrown in RaiseCallbackEvent and return an empty string from &lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;.","pos":[418,675],"source":" To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in RaiseCallbackEvent and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>."}]},{"pos":[5600,5672],"content":"A string that represents an event argument to pass to the event handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that represents an event argument to pass to the event handler.","pos":[0,72]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.ICallbackEventHandler\n  id: ICallbackEventHandler\n  children:\n  - System.Web.UI.ICallbackEventHandler.GetCallbackResult\n  - System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)\n  langs:\n  - csharp\n  name: ICallbackEventHandler\n  nameWithType: ICallbackEventHandler\n  fullName: System.Web.UI.ICallbackEventHandler\n  type: Interface\n  summary: Used to indicate that a control can be the target of a callback event on the server.\n  remarks: \"Implement the ICallbackEventHandler interface for any custom control that needs to receive callback events. For more information, see [Implementing Client Callbacks Without Postbacks](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Examples of controls that implement the ICallbackEventHandler interface include the <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> controls. When a callback event targets a control that implements the ICallbackEventHandler interface, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is called to handle the event, passing the event argument as a parameter and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the result of the callback.  \\n  \\n Controls that retrieve data from a data source control during callback can do so synchronously or asynchronously. ASP.NET controls like <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> are implemented synchronously. Synchronous callbacks do not prevent the user from working in the browser. In synchronous mode, only one callback at a time can execute, with the last callback taking precedence. When a Web control is implemented to support asynchronous behavior, multiple callbacks can be raised simultaneously. For details on asynchronous programming, see [Event-based Asynchronous Pattern (EAP)](~/add/includes/ajax-current-ext-md.md).  \\n  \\n You can specify whether callback events originating from the user interface rendered by a control implementing the ICallbackEventHandler interface are validated. Validation of events is a good security practice. However, for performance reasons you can disable it. To control whether event validation is performed on callback events, set the `enableEventValidation` attribute of the [@ Page](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) directive or the `enableEventValidation` attribute of the [pages Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/4123bb66-3fe4-4d62-b70e-33758656b458) of the Web.config file. If you set the <xref:System.Web.UI.Page.EnableEventValidation%2A> property in code, set it in the `Page_Init` phase of page processing. For more information on balancing the security benefit of event validation with its performance cost, see [ASP.NET Performance Overview](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public interface ICallbackEventHandler\n  implements: []\n  platform:\n  - net462\n- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult\n  id: GetCallbackResult\n  parent: System.Web.UI.ICallbackEventHandler\n  langs:\n  - csharp\n  name: GetCallbackResult()\n  nameWithType: ICallbackEventHandler.GetCallbackResult()\n  fullName: System.Web.UI.ICallbackEventHandler.GetCallbackResult()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Returns the results of a callback event that targets a control.\n  remarks: Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent GetCallbackResult from being called and returning a result. To prevent GetCallbackResult from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from GetCallbackResult.\n  syntax:\n    content: public string GetCallbackResult ();\n    parameters: []\n    return:\n      type: System.String\n      description: The result of the callback.\n  overload: System.Web.UI.ICallbackEventHandler.GetCallbackResult*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)\n  id: RaiseCallbackEvent(System.String)\n  parent: System.Web.UI.ICallbackEventHandler\n  langs:\n  - csharp\n  name: RaiseCallbackEvent(String)\n  nameWithType: ICallbackEventHandler.RaiseCallbackEvent(String)\n  fullName: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Processes a callback event that targets a control.\n  remarks: \"When `null` is used as the event argument parameter, the string is serialized to \\\"null\\\" and sent back to the server. Because there is no way to distinguish between `null` and \\\"null\\\", you should avoid using `null` argument parameters with callbacks.  \\n  \\n Exceptions thrown in RaiseCallbackEvent will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result. To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in RaiseCallbackEvent and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.\"\n  syntax:\n    content: public void RaiseCallbackEvent (string eventArgument);\n    parameters:\n    - id: eventArgument\n      type: System.String\n      description: A string that represents an event argument to pass to the event handler.\n  overload: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult\n  parent: System.Web.UI.ICallbackEventHandler\n  isExternal: false\n  name: GetCallbackResult()\n  nameWithType: ICallbackEventHandler.GetCallbackResult()\n  fullName: System.Web.UI.ICallbackEventHandler.GetCallbackResult()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)\n  parent: System.Web.UI.ICallbackEventHandler\n  isExternal: false\n  name: RaiseCallbackEvent(String)\n  nameWithType: ICallbackEventHandler.RaiseCallbackEvent(String)\n  fullName: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(String)\n- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult*\n  parent: System.Web.UI.ICallbackEventHandler\n  isExternal: false\n  name: GetCallbackResult\n  nameWithType: ICallbackEventHandler.GetCallbackResult\n- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*\n  parent: System.Web.UI.ICallbackEventHandler\n  isExternal: false\n  name: RaiseCallbackEvent\n  nameWithType: ICallbackEventHandler.RaiseCallbackEvent\n"}