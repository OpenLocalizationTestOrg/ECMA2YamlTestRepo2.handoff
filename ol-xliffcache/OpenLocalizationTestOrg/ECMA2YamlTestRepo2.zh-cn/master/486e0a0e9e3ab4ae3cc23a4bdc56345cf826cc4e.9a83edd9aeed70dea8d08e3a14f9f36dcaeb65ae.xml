{"nodes":[{"pos":[1198,1252],"content":"Resolves issuer tokens received from service partners.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resolves issuer tokens received from service partners.","pos":[0,54]}]},{"pos":[3154,3263],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.IssuerTokenResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.IssuerTokenResolver\"></xref> class."},{"pos":[3275,3453],"content":"By default, the new instance is initialized with an <xref:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver> that uses the default store (LM.TrustedPeople).        //","needQuote":true,"needEscape":true,"nodes":[{"content":"By default, the new instance is initialized with an <xref:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver> that uses the default store (LM.TrustedPeople).        //","pos":[0,178],"nodes":[{"content":"By default, the new instance is initialized with an &lt;xref:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver&gt; that uses the default store (LM.TrustedPeople).","pos":[0,168],"source":"By default, the new instance is initialized with an <xref:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver> that uses the default store (LM.TrustedPeople)."},{"content":"//","pos":[176,178]}]}]},{"pos":[4239,4386],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.IssuerTokenResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified token resolver.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.IssuerTokenResolver\"></xref> class by using the specified token resolver."},{"pos":[4645,4820],"content":"The security token resolver to be wrapped by this instance. Sets the <xref:System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver*> property in the new instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security token resolver to be wrapped by this instance. Sets the <xref:System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver*> property in the new instance.","pos":[0,175],"nodes":[{"content":"The security token resolver to be wrapped by this instance.","pos":[0,59]},{"content":"Sets the &lt;xref:System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver*&gt; property in the new instance.","pos":[60,175],"source":" Sets the <xref:System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver*> property in the new instance."}]}]},{"pos":[5381,5441],"content":"The default store location for resolving X.509 certificates.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default store location for resolving X.509 certificates.","pos":[0,60]}]},{"pos":[5673,5685],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6159,6210],"content":"The default store for resolving X.509 certificates.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default store for resolving X.509 certificates.","pos":[0,51]}]},{"pos":[6430,6442],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7281,7405],"content":"Attempts to retrieve the key that is referenced in the specified key identifier clause. (Override of the base class method.)","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to retrieve the key that is referenced in the specified key identifier clause. (Override of the base class method.)","pos":[0,124],"nodes":[{"content":"Attempts to retrieve the key that is referenced in the specified key identifier clause.","pos":[0,87]},{"content":"(Override of the base class method.)","pos":[88,124]}]}]},{"pos":[7740,7788],"content":"A key identifier clause to retrieve the key for.","needQuote":true,"needEscape":true,"nodes":[{"content":"A key identifier clause to retrieve the key for.","pos":[0,48]}]},{"pos":[7874,8015],"content":"When this method returns, contains the key that is referenced in the specified key identifier clause. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains the key that is referenced in the specified key identifier clause. This parameter is passed uninitialized.","pos":[0,141],"nodes":[{"content":"When this method returns, contains the key that is referenced in the specified key identifier clause.","pos":[0,101]},{"content":"This parameter is passed uninitialized.","pos":[102,141]}]}]},{"pos":[8074,8278],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when a key can be retrieved for the specified key identifier clause; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when a key can be retrieved for the specified key identifier clause; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9154,9333],"content":"Attempts to retrieve the security token that matches at least one of the key identifier clauses contained within the specified key identifier. (Override of the base class method.)","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to retrieve the security token that matches at least one of the key identifier clauses contained within the specified key identifier. (Override of the base class method.)","pos":[0,179],"nodes":[{"content":"Attempts to retrieve the security token that matches at least one of the key identifier clauses contained within the specified key identifier.","pos":[0,142]},{"content":"(Override of the base class method.)","pos":[143,179]}]}]},{"pos":[9642,9692],"content":"The key identifier to create a security token for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key identifier to create a security token for.","pos":[0,50]}]},{"pos":[9782,9967],"content":"When this method returns, contains a <xref href=\"System.IdentityModel.Tokens.SecurityToken\"></xref> that represents the specified key identifier. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains a <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityToken\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the specified key identifier.","pos":[0,145],"source":"When this method returns, contains a <xref href=\"System.IdentityModel.Tokens.SecurityToken\"></xref> that represents the specified key identifier."},{"content":"This parameter is passed uninitialized.","pos":[146,185]}]},{"pos":[10026,10232],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a security token can be retrieved for the specified key identifier; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a security token can be retrieved for the specified key identifier; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11132,11293],"content":"When overridden in a derived class, attempts to resolve the security token that matches the specified key identifier clause. (Override of the base class method.)","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, attempts to resolve the security token that matches the specified key identifier clause. (Override of the base class method.)","pos":[0,161],"nodes":[{"content":"When overridden in a derived class, attempts to resolve the security token that matches the specified key identifier clause.","pos":[0,124]},{"content":"(Override of the base class method.)","pos":[125,161]}]}]},{"pos":[11626,11683],"content":"The key identifier clause to create a security token for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key identifier clause to create a security token for.","pos":[0,57]}]},{"pos":[11773,11965],"content":"When this method returns, contains a <xref href=\"System.IdentityModel.Tokens.SecurityToken\"></xref> that represents the specified key identifier clause. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains a <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityToken\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the specified key identifier clause.","pos":[0,152],"source":"When this method returns, contains a <xref href=\"System.IdentityModel.Tokens.SecurityToken\"></xref> that represents the specified key identifier clause."},{"content":"This parameter is passed uninitialized.","pos":[153,192]}]},{"pos":[12024,12237],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a security token can be retrieved for the specified key identifier clause; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a security token can be retrieved for the specified key identifier clause; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12815,12873],"content":"Gets the security token resolver wrapped by this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the security token resolver wrapped by this instance.","pos":[0,58]}]},{"pos":[13083,13110],"content":"The wrapped token resolver.","needQuote":true,"needEscape":true,"nodes":[{"content":"The wrapped token resolver.","pos":[0,27]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver\n  id: IssuerTokenResolver\n  children:\n  - System.IdentityModel.Tokens.IssuerTokenResolver.#ctor\n  - System.IdentityModel.Tokens.IssuerTokenResolver.#ctor(System.IdentityModel.Selectors.SecurityTokenResolver)\n  - System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation\n  - System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName\n  - System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  - System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  - System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  - System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver\n  langs:\n  - csharp\n  name: IssuerTokenResolver\n  nameWithType: IssuerTokenResolver\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver\n  type: Class\n  summary: Resolves issuer tokens received from service partners.\n  syntax:\n    content: 'public class IssuerTokenResolver : System.IdentityModel.Selectors.SecurityTokenResolver'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Selectors.SecurityTokenResolver\n  implements: []\n  inheritedMembers:\n  - System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.#ctor\n  id: '#ctor'\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  langs:\n  - csharp\n  name: IssuerTokenResolver()\n  nameWithType: IssuerTokenResolver.IssuerTokenResolver()\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.IssuerTokenResolver()\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.IssuerTokenResolver\"></xref> class.\n  remarks: By default, the new instance is initialized with an <xref:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver> that uses the default store (LM.TrustedPeople).        //\n  syntax:\n    content: public IssuerTokenResolver ();\n    parameters: []\n  overload: System.IdentityModel.Tokens.IssuerTokenResolver.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.#ctor(System.IdentityModel.Selectors.SecurityTokenResolver)\n  id: '#ctor(System.IdentityModel.Selectors.SecurityTokenResolver)'\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  langs:\n  - csharp\n  name: IssuerTokenResolver(SecurityTokenResolver)\n  nameWithType: IssuerTokenResolver.IssuerTokenResolver(SecurityTokenResolver)\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.IssuerTokenResolver(SecurityTokenResolver)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.IssuerTokenResolver\"></xref> class by using the specified token resolver.\n  syntax:\n    content: public IssuerTokenResolver (System.IdentityModel.Selectors.SecurityTokenResolver wrappedTokenResolver);\n    parameters:\n    - id: wrappedTokenResolver\n      type: System.IdentityModel.Selectors.SecurityTokenResolver\n      description: The security token resolver to be wrapped by this instance. Sets the <xref:System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver*> property in the new instance.\n  overload: System.IdentityModel.Tokens.IssuerTokenResolver.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation\n  id: DefaultStoreLocation\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  langs:\n  - csharp\n  name: DefaultStoreLocation\n  nameWithType: IssuerTokenResolver.DefaultStoreLocation\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation\n  type: Field\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: The default store location for resolving X.509 certificates.\n  syntax:\n    content: public static readonly System.Security.Cryptography.X509Certificates.StoreLocation DefaultStoreLocation;\n    return:\n      type: System.Security.Cryptography.X509Certificates.StoreLocation\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName\n  id: DefaultStoreName\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  langs:\n  - csharp\n  name: DefaultStoreName\n  nameWithType: IssuerTokenResolver.DefaultStoreName\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName\n  type: Field\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: The default store for resolving X.509 certificates.\n  syntax:\n    content: public static readonly System.Security.Cryptography.X509Certificates.StoreName DefaultStoreName;\n    return:\n      type: System.Security.Cryptography.X509Certificates.StoreName\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  id: TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  langs:\n  - csharp\n  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  nameWithType: IssuerTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Attempts to retrieve the key that is referenced in the specified key identifier clause. (Override of the base class method.)\n  syntax:\n    content: protected override bool TryResolveSecurityKeyCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityKey key);\n    parameters:\n    - id: keyIdentifierClause\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n      description: A key identifier clause to retrieve the key for.\n    - id: key\n      type: System.IdentityModel.Tokens.SecurityKey\n      description: When this method returns, contains the key that is referenced in the specified key identifier clause. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when a key can be retrieved for the specified key identifier clause; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  id: TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  langs:\n  - csharp\n  name: TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  nameWithType: IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Attempts to retrieve the security token that matches at least one of the key identifier clauses contained within the specified key identifier. (Override of the base class method.)\n  syntax:\n    content: protected override bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier, out System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: keyIdentifier\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifier\n      description: The key identifier to create a security token for.\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: When this method returns, contains a <xref href=\"System.IdentityModel.Tokens.SecurityToken\"></xref> that represents the specified key identifier. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a security token can be retrieved for the specified key identifier; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  id: TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  langs:\n  - csharp\n  name: TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  nameWithType: IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, attempts to resolve the security token that matches the specified key identifier clause. (Override of the base class method.)\n  syntax:\n    content: protected override bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: keyIdentifierClause\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n      description: The key identifier clause to create a security token for.\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: When this method returns, contains a <xref href=\"System.IdentityModel.Tokens.SecurityToken\"></xref> that represents the specified key identifier clause. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a security token can be retrieved for the specified key identifier clause; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver\n  id: WrappedTokenResolver\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  langs:\n  - csharp\n  name: WrappedTokenResolver\n  nameWithType: IssuerTokenResolver.WrappedTokenResolver\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the security token resolver wrapped by this instance.\n  syntax:\n    content: public System.IdentityModel.Selectors.SecurityTokenResolver WrappedTokenResolver { get; }\n    return:\n      type: System.IdentityModel.Selectors.SecurityTokenResolver\n      description: The wrapped token resolver.\n  overload: System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Selectors.SecurityTokenResolver\n  isExternal: false\n  name: System.IdentityModel.Selectors.SecurityTokenResolver\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.#ctor\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: IssuerTokenResolver()\n  nameWithType: IssuerTokenResolver.IssuerTokenResolver()\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.IssuerTokenResolver()\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.#ctor(System.IdentityModel.Selectors.SecurityTokenResolver)\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: IssuerTokenResolver(SecurityTokenResolver)\n  nameWithType: IssuerTokenResolver.IssuerTokenResolver(SecurityTokenResolver)\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.IssuerTokenResolver(SecurityTokenResolver)\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: DefaultStoreLocation\n  nameWithType: IssuerTokenResolver.DefaultStoreLocation\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation\n- uid: System.Security.Cryptography.X509Certificates.StoreLocation\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: StoreLocation\n  nameWithType: StoreLocation\n  fullName: System.Security.Cryptography.X509Certificates.StoreLocation\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: DefaultStoreName\n  nameWithType: IssuerTokenResolver.DefaultStoreName\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName\n- uid: System.Security.Cryptography.X509Certificates.StoreName\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: StoreName\n  nameWithType: StoreName\n  fullName: System.Security.Cryptography.X509Certificates.StoreName\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  nameWithType: IssuerTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifierClause\n  nameWithType: SecurityKeyIdentifierClause\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n- uid: System.IdentityModel.Tokens.SecurityKey\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKey\n  nameWithType: SecurityKey\n  fullName: System.IdentityModel.Tokens.SecurityKey\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  nameWithType: IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifier\n  nameWithType: SecurityKeyIdentifier\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier\n- uid: System.IdentityModel.Tokens.SecurityToken\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityToken\n  nameWithType: SecurityToken\n  fullName: System.IdentityModel.Tokens.SecurityToken\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  nameWithType: IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: WrappedTokenResolver\n  nameWithType: IssuerTokenResolver.WrappedTokenResolver\n  fullName: System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.#ctor*\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: IssuerTokenResolver\n  nameWithType: IssuerTokenResolver.IssuerTokenResolver\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore*\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: TryResolveSecurityKeyCore\n  nameWithType: IssuerTokenResolver.TryResolveSecurityKeyCore\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore*\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: TryResolveTokenCore\n  nameWithType: IssuerTokenResolver.TryResolveTokenCore\n- uid: System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver*\n  parent: System.IdentityModel.Tokens.IssuerTokenResolver\n  isExternal: false\n  name: WrappedTokenResolver\n  nameWithType: IssuerTokenResolver.WrappedTokenResolver\n"}