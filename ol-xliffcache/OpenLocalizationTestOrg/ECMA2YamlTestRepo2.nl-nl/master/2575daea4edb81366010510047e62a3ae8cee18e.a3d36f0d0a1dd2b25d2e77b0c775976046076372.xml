{"nodes":[{"pos":[805,952],"content":"Provides the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> base class for a strongly typed non-generic read-only collection.","needQuote":true,"needEscape":true,"source":"Provides the <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class for a strongly typed non-generic read-only collection."},{"pos":[964,1103],"content":"A ReadOnlyCollectionBase instance is always read-only. See <xref:System.Collections.CollectionBase> for a modifiable version of this class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A ReadOnlyCollectionBase instance is always read-only. See <xref:System.Collections.CollectionBase> for a modifiable version of this class.","pos":[0,139],"nodes":[{"content":"A ReadOnlyCollectionBase instance is always read-only.","pos":[0,54]},{"content":"See &lt;xref:System.Collections.CollectionBase&gt; for a modifiable version of this class.","pos":[55,139],"source":" See <xref:System.Collections.CollectionBase> for a modifiable version of this class."}]}]},{"pos":[2247,2350],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> class."},{"pos":[2362,2400],"content":"This constructor is an O(1) operation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]},{"pos":[2926,3043],"content":"Gets the number of elements contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets the number of elements contained in the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance."},{"pos":[3645,3827],"content":"The number of elements contained in the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The number of elements contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","pos":[0,112],"source":"The number of elements contained in the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[119,178]}]},{"pos":[4319,4439],"content":"Returns an enumerator that iterates through the <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Returns an enumerator that iterates through the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance."},{"pos":[4452,7035],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[212,332]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[339,422]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[423,519],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[521,601],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[602,819],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[826,1022],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1023,1147],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1154,1381],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1382,1513],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[1514,1664],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1665,1889],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1896,1968]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[1969,2131]},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[2138,2292]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[2294,2399]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[2401,2529]},{"content":"This method is an O(1) operation.","pos":[2536,2569]}]},{"pos":[7684,7805],"content":"An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance."},{"pos":[8280,8395],"content":"Gets the list of elements contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets the list of elements contained in the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance."},{"pos":[8407,8466],"content":"Retrieving the value of this property is an O(1) operation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]},{"pos":[9093,9242],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the <bpt id=\"p2\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance itself.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Collections.ArrayList\"></xref> representing the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance itself."},{"pos":[9958,10144],"content":"Copies the entire <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the specified index of the target array.","needQuote":true,"needEscape":true,"source":"Copies the entire <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array."},{"pos":[10157,10422],"content":"The specified array must be of a compatible type.       This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.ReadOnlyCollectionBase.Count%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The specified array must be of a compatible type.","pos":[0,49]},{"content":"This method uses &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt; to copy the elements.","pos":[56,147],"source":"       This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.ReadOnlyCollectionBase.Count%2A&gt;.","pos":[154,261],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.ReadOnlyCollectionBase.Count%2A>."}]},{"pos":[10573,10783],"content":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref>. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,155],"source":"The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref>."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[156,210],"source":" The <xref:System.Array> must have zero-based indexing."}]},{"pos":[10844,10900],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[11110,11193],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11308,11345],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> is less than zero."},{"pos":[11441,11713],"content":"<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","pos":[0,39],"source":"<code>array</code> is multidimensional."},{"content":"-or-       The number of elements in the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is greater than the available space from <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","pos":[46,266],"source":"       -or-       The number of elements in the source <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}]},{"pos":[11815,11980],"content":"The type of the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of the source <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."},{"pos":[12563,12707],"content":"Gets a value indicating whether access to a <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is synchronized (thread safe).","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether access to a <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> object is synchronized (thread safe)."},{"pos":[12720,13388],"content":"A <xref:System.Collections.ReadOnlyCollectionBase> object is not synchronized. Derived classes can provide a synchronized version of the <xref:System.Collections.ReadOnlyCollectionBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <xref:System.Collections.ReadOnlyCollectionBase> object is not synchronized. Derived classes can provide a synchronized version of the <xref:System.Collections.ReadOnlyCollectionBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,666],"nodes":[{"content":"A &lt;xref:System.Collections.ReadOnlyCollectionBase&gt; object is not synchronized.","pos":[0,78],"source":"A <xref:System.Collections.ReadOnlyCollectionBase> object is not synchronized."},{"content":"Derived classes can provide a synchronized version of the &lt;xref:System.Collections.ReadOnlyCollectionBase&gt; class using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; property.","pos":[79,261],"source":" Derived classes can provide a synchronized version of the <xref:System.Collections.ReadOnlyCollectionBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property."},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[268,346]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[347,484]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[485,666]}]}]},{"pos":[14128,14460],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> object is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access to the <bpt id=\"p2\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object is synchronized (thread safe); otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,253],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> object is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[254,332],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[15131,15260],"content":"Gets an object that can be used to synchronize access to a <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets an object that can be used to synchronize access to a <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> object."},{"pos":[15273,16375],"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.ReadOnlyCollectionBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> property of the <xref:System.Collections.ReadOnlyCollectionBase> object, not directly on the <xref:System.Collections.ReadOnlyCollectionBase> object. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.ReadOnlyCollectionBase> object.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.ReadOnlyCollectionBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> property of the <xref:System.Collections.ReadOnlyCollectionBase> object, not directly on the <xref:System.Collections.ReadOnlyCollectionBase> object. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.ReadOnlyCollectionBase> object.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,1100],"nodes":[{"content":"Derived classes can provide their own synchronized version of the &lt;xref:System.Collections.ReadOnlyCollectionBase&gt; class using the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; property.","pos":[0,190],"source":"Derived classes can provide their own synchronized version of the <xref:System.Collections.ReadOnlyCollectionBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the &lt;xref:System.Collections.ICollection.SyncRoot%2A&gt; property of the &lt;xref:System.Collections.ReadOnlyCollectionBase&gt; object, not directly on the &lt;xref:System.Collections.ReadOnlyCollectionBase&gt; object.","pos":[191,444],"source":" The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> property of the <xref:System.Collections.ReadOnlyCollectionBase> object, not directly on the <xref:System.Collections.ReadOnlyCollectionBase> object."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[445,526]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.ReadOnlyCollectionBase&gt; object.","pos":[527,695],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.ReadOnlyCollectionBase> object."},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[702,780]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[781,918]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[919,1100]}]}]},{"pos":[17110,17236],"content":"An object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.ReadOnlyCollectionBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> object."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.ReadOnlyCollectionBase\n  id: ReadOnlyCollectionBase\n  children:\n  - System.Collections.ReadOnlyCollectionBase.#ctor\n  - System.Collections.ReadOnlyCollectionBase.Count\n  - System.Collections.ReadOnlyCollectionBase.GetEnumerator\n  - System.Collections.ReadOnlyCollectionBase.InnerList\n  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized\n  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot\n  langs:\n  - csharp\n  name: ReadOnlyCollectionBase\n  nameWithType: ReadOnlyCollectionBase\n  fullName: System.Collections.ReadOnlyCollectionBase\n  type: Class\n  summary: Provides the <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class for a strongly typed non-generic read-only collection.\n  remarks: A ReadOnlyCollectionBase instance is always read-only. See <xref:System.Collections.CollectionBase> for a modifiable version of this class.\n  example:\n  - \"The following code example implements the ReadOnlyCollectionBase class.  \\n  \\n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/t-system.collections.rea_1.cpp)]\\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/t-system.collections.rea_1.cs)]\\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/t-system.collections.rea_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class ReadOnlyCollectionBase : System.Collections.ICollection\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Collections.ReadOnlyCollectionBase.#ctor\n  id: '#ctor'\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: ReadOnlyCollectionBase()\n  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase()\n  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> class.\n  remarks: This constructor is an O(1) operation.\n  syntax:\n    content: protected ReadOnlyCollectionBase ();\n    parameters: []\n  overload: System.Collections.ReadOnlyCollectionBase.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.ReadOnlyCollectionBase.Count\n  id: Count\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ReadOnlyCollectionBase.Count\n  fullName: System.Collections.ReadOnlyCollectionBase.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets the number of elements contained in the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance.\n  remarks: ''\n  example:\n  - \"The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \\n  \\n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/p-system.collections.rea_1_1.cpp)]\\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/p-system.collections.rea_1_1.cs)]\\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.rea_1_1.vb)]\"\n  syntax:\n    content: public virtual int Count { get; }\n    return:\n      type: System.Int32\n      description: \"The number of elements contained in the <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\"></xref> instance.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  overload: System.Collections.ReadOnlyCollectionBase.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ReadOnlyCollectionBase.GetEnumerator()\n  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns an enumerator that iterates through the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance.\n  remarks: \"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \\n  \\n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/m-system.collections.rea_1.cpp)]\\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/m-system.collections.rea_1.cs)]\\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.rea_1.vb)]\"\n  syntax:\n    content: public virtual System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> for the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance.\n  overload: System.Collections.ReadOnlyCollectionBase.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.ReadOnlyCollectionBase.InnerList\n  id: InnerList\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: InnerList\n  nameWithType: ReadOnlyCollectionBase.InnerList\n  fullName: System.Collections.ReadOnlyCollectionBase.InnerList\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets the list of elements contained in the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance.\n  remarks: Retrieving the value of this property is an O(1) operation.\n  example:\n  - \"The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \\n  \\n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/p-system.collections.rea_0_1.cpp)]\\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/p-system.collections.rea_0_1.cs)]\\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.rea_0_1.vb)]\"\n  syntax:\n    content: protected System.Collections.ArrayList InnerList { get; }\n    return:\n      type: System.Collections.ArrayList\n      description: An <xref href=\"System.Collections.ArrayList\"></xref> representing the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> instance itself.\n  overload: System.Collections.ReadOnlyCollectionBase.InnerList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Copies the entire <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array.\n  remarks: \"The specified array must be of a compatible type.  \\n  \\n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ReadOnlyCollectionBase.Count%2A>.\"\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref>. The <xref:System.Array> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  platform:\n  - net462\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets a value indicating whether access to a <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> object is synchronized (thread safe).\n  remarks: \"A <xref:System.Collections.ReadOnlyCollectionBase> object is not synchronized. Derived classes can provide a synchronized version of the <xref:System.Collections.ReadOnlyCollectionBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \\n  \\n [!code-cpp[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/cpp/b4b4a174-5e26-4494-90e3-_1.cpp)]\\n [!code-cs[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/csharp/b4b4a174-5e26-4494-90e3-_1.cs)]\\n [!code-vb[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/visualbasic/b4b4a174-5e26-4494-90e3-_1.vb)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> object is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets an object that can be used to synchronize access to a <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> object.\n  remarks: \"Derived classes can provide their own synchronized version of the <xref:System.Collections.ReadOnlyCollectionBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> property of the <xref:System.Collections.ReadOnlyCollectionBase> object, not directly on the <xref:System.Collections.ReadOnlyCollectionBase> object. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.ReadOnlyCollectionBase> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \\n  \\n [!code-cpp[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/cpp/87c3d4a6-47b9-4735-a8a0-_1.cpp)]\\n [!code-cs[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/csharp/87c3d4a6-47b9-4735-a8a0-_1.cs)]\\n [!code-vb[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/visualbasic/87c3d4a6-47b9-4735-a8a0-_1.vb)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.ReadOnlyCollectionBase\"></xref> object.\n  overload: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.Collections.ReadOnlyCollectionBase.#ctor\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: ReadOnlyCollectionBase()\n  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase()\n  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()\n- uid: System.Collections.ReadOnlyCollectionBase.Count\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: Count\n  nameWithType: ReadOnlyCollectionBase.Count\n  fullName: System.Collections.ReadOnlyCollectionBase.Count\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ReadOnlyCollectionBase.GetEnumerator()\n  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.ReadOnlyCollectionBase.InnerList\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: InnerList\n  nameWithType: ReadOnlyCollectionBase.InnerList\n  fullName: System.Collections.ReadOnlyCollectionBase.InnerList\n- uid: System.Collections.ArrayList\n  parent: System.Collections\n  isExternal: false\n  name: ArrayList\n  nameWithType: ArrayList\n  fullName: System.Collections.ArrayList\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.ReadOnlyCollectionBase.#ctor*\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: ReadOnlyCollectionBase\n  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase\n- uid: System.Collections.ReadOnlyCollectionBase.Count*\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: Count\n  nameWithType: ReadOnlyCollectionBase.Count\n- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator*\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ReadOnlyCollectionBase.GetEnumerator\n- uid: System.Collections.ReadOnlyCollectionBase.InnerList*\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: InnerList\n  nameWithType: ReadOnlyCollectionBase.InnerList\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo*\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized*\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot*\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot\n"}