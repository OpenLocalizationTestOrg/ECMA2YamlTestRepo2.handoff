{"nodes":[{"pos":[1014,1051],"content":"Defines the method message interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the method message interface.","pos":[0,37]}]},{"pos":[1063,1226],"content":"A method message is used to send information to and from remote methods. For example, messages used for remote method calls implement the IMethodMessage interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A method message is used to send information to and from remote methods. For example, messages used for remote method calls implement the IMethodMessage interface.","pos":[0,163],"nodes":[{"content":"A method message is used to send information to and from remote methods.","pos":[0,72]},{"content":"For example, messages used for remote method calls implement the IMethodMessage interface.","pos":[73,163]}]}]},{"pos":[2387,2437],"content":"Gets the number of arguments passed to the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of arguments passed to the method.","pos":[0,50]}]},{"pos":[3094,3139],"content":"The number of arguments passed to the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of arguments passed to the method.","pos":[0,45]}]},{"pos":[3337,3454],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[3846,3894],"content":"Gets an array of arguments passed to the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an array of arguments passed to the method.","pos":[0,48]}]},{"pos":[3906,4264],"content":"Although the Args property is redundant since the same functionality can be achieved through the <xref:System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount%2A> and <xref:System.Runtime.Remoting.Messaging.IMethodMessage.GetArg%2A>, there might be performance optimization available if the implementer understands when all the arguments will be retrieved.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Although the Args property is redundant since the same functionality can be achieved through the &lt;xref:System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount%2A&gt; and &lt;xref:System.Runtime.Remoting.Messaging.IMethodMessage.GetArg%2A&gt;, there might be performance optimization available if the implementer understands when all the arguments will be retrieved.","pos":[0,358],"source":"Although the Args property is redundant since the same functionality can be achieved through the <xref:System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount%2A> and <xref:System.Runtime.Remoting.Messaging.IMethodMessage.GetArg%2A>, there might be performance optimization available if the implementer understands when all the arguments will be retrieved."}]},{"pos":[4377,4453],"content":"An <xref:System.Object> array containing the arguments passed to the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; array containing the arguments passed to the method.","pos":[0,76],"source":"An <xref:System.Object> array containing the arguments passed to the method."}]},{"pos":[4647,4764],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[5213,5265],"content":"Gets a specific argument as an <xref:System.Object>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a specific argument as an &lt;xref:System.Object&gt;.","pos":[0,52],"source":"Gets a specific argument as an <xref:System.Object>."}]},{"pos":[5401,5438],"content":"The number of the requested argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of the requested argument.","pos":[0,37]}]},{"pos":[5496,5530],"content":"The argument passed to the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument passed to the method.","pos":[0,34]}]},{"pos":[5726,5843],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[6312,6363],"content":"Gets the name of the argument passed to the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the argument passed to the method.","pos":[0,51]}]},{"pos":[6501,6538],"content":"The number of the requested argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of the requested argument.","pos":[0,37]}]},{"pos":[6596,6758],"content":"The name of the specified argument passed to the method, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current method is not implemented.","needQuote":true,"needEscape":true,"source":"The name of the specified argument passed to the method, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the current method is not implemented."},{"pos":[6958,7075],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[7497,7564],"content":"Gets a value indicating whether the message has variable arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the message has variable arguments.","pos":[0,67]}]},{"pos":[8220,8412],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the method can accept a variable number of arguments; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the method can accept a variable number of arguments; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8612,8729],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[9191,9302],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Messaging.LogicalCallContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the current method call.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Runtime.Remoting.Messaging.LogicalCallContext\"></xref> for the current method call."},{"pos":[10024,10135],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Messaging.LogicalCallContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the current method call.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Runtime.Remoting.Messaging.LogicalCallContext\"></xref> for the current method call."},{"pos":[10343,10460],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[10882,10948],"content":"Gets the <xref:System.Reflection.MethodBase> of the called method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the &lt;xref:System.Reflection.MethodBase&gt; of the called method.","pos":[0,66],"source":"Gets the <xref:System.Reflection.MethodBase> of the called method."}]},{"pos":[10960,11088],"content":"This information is not transmitted to a remote location, but is used to cache the method base after it has been looked up once.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This information is not transmitted to a remote location, but is used to cache the method base after it has been looked up once.","pos":[0,128]}]},{"pos":[11240,11301],"content":"The <xref:System.Reflection.MethodBase> of the called method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Reflection.MethodBase&gt; of the called method.","pos":[0,61],"source":"The <xref:System.Reflection.MethodBase> of the called method."}]},{"pos":[11501,11618],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[12040,12076],"content":"Gets the name of the invoked method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the invoked method.","pos":[0,36]}]},{"pos":[12674,12705],"content":"The name of the invoked method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the invoked method.","pos":[0,31]}]},{"pos":[12905,13022],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[13469,13516],"content":"Gets an object containing the method signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object containing the method signature.","pos":[0,47]}]},{"pos":[13528,13710],"content":"All the current implementations of <xref:System.Runtime.Remoting.Messaging.IMethodMessage> return an array of <xref:System.Type> objects containing the parameter types of the method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"All the current implementations of &lt;xref:System.Runtime.Remoting.Messaging.IMethodMessage&gt; return an array of &lt;xref:System.Type&gt; objects containing the parameter types of the method.","pos":[0,182],"source":"All the current implementations of <xref:System.Runtime.Remoting.Messaging.IMethodMessage> return an array of <xref:System.Type> objects containing the parameter types of the method."}]},{"pos":[13830,13872],"content":"An object containing the method signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object containing the method signature.","pos":[0,42]}]},{"pos":[14077,14194],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[14606,14697],"content":"Gets the full <xref:System.Type> name of the specific object that the call is destined for.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the full &lt;xref:System.Type&gt; name of the specific object that the call is destined for.","pos":[0,91],"source":"Gets the full <xref:System.Type> name of the specific object that the call is destined for."}]},{"pos":[14810,14896],"content":"The full <xref:System.Type> name of the specific object that the call is destined for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The full &lt;xref:System.Type&gt; name of the specific object that the call is destined for.","pos":[0,86],"source":"The full <xref:System.Type> name of the specific object that the call is destined for."}]},{"pos":[15094,15211],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[15598,15664],"content":"Gets the URI of the specific object that the call is destined for.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the URI of the specific object that the call is destined for.","pos":[0,66]}]},{"pos":[15772,15834],"content":"The URI of the remote object that contains the invoked method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URI of the remote object that contains the invoked method.","pos":[0,62]}]},{"pos":[16027,16144],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage\n  id: IMethodMessage\n  children:\n  - System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount\n  - System.Runtime.Remoting.Messaging.IMethodMessage.Args\n  - System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(System.Int32)\n  - System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(System.Int32)\n  - System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs\n  - System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext\n  - System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase\n  - System.Runtime.Remoting.Messaging.IMethodMessage.MethodName\n  - System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature\n  - System.Runtime.Remoting.Messaging.IMethodMessage.TypeName\n  - System.Runtime.Remoting.Messaging.IMethodMessage.Uri\n  langs:\n  - csharp\n  name: IMethodMessage\n  nameWithType: IMethodMessage\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage\n  type: Interface\n  summary: Defines the method message interface.\n  remarks: A method message is used to send information to and from remote methods. For example, messages used for remote method calls implement the IMethodMessage interface.\n  example:\n  - \"The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the message information to the console and return immediately without making a remote call.  \\n  \\n [!code-cpp[IMethodMessage_MethodName#1](~/add/codesnippet/cpp/t-system.runtime.remotin_38_1.cpp)]\\n [!code-cs[IMethodMessage_MethodName#1](~/add/codesnippet/csharp/t-system.runtime.remotin_38_1.cs)]\\n [!code-vb[IMethodMessage_MethodName#1](~/add/codesnippet/visualbasic/t-system.runtime.remotin_38_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface IMethodMessage : System.Runtime.Remoting.Messaging.IMessage\n  implements:\n  - System.Runtime.Remoting.Messaging.IMessage\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount\n  id: ArgCount\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  langs:\n  - csharp\n  name: ArgCount\n  nameWithType: IMethodMessage.ArgCount\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the number of arguments passed to the method.\n  remarks: ''\n  example:\n  - \"The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the message information to the console, using the `ArgCount` property to iterate through the arguments.  \\n  \\n [!code-cpp[IMethodMessage_MethodName#2](~/add/codesnippet/cpp/p-system.runtime.remotin_19_1.cpp)]\\n [!code-cs[IMethodMessage_MethodName#2](~/add/codesnippet/csharp/p-system.runtime.remotin_19_1.cs)]\\n [!code-vb[IMethodMessage_MethodName#2](~/add/codesnippet/visualbasic/p-system.runtime.remotin_19_1.vb)]\"\n  syntax:\n    content: public int ArgCount { get; }\n    return:\n      type: System.Int32\n      description: The number of arguments passed to the method.\n  overload: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Args\n  id: Args\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  langs:\n  - csharp\n  name: Args\n  nameWithType: IMethodMessage.Args\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Args\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets an array of arguments passed to the method.\n  remarks: Although the Args property is redundant since the same functionality can be achieved through the <xref:System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount%2A> and <xref:System.Runtime.Remoting.Messaging.IMethodMessage.GetArg%2A>, there might be performance optimization available if the implementer understands when all the arguments will be retrieved.\n  syntax:\n    content: public object[] Args { get; }\n    return:\n      type: System.Object[]\n      description: An <xref:System.Object> array containing the arguments passed to the method.\n  overload: System.Runtime.Remoting.Messaging.IMethodMessage.Args*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(System.Int32)\n  id: GetArg(System.Int32)\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  langs:\n  - csharp\n  name: GetArg(Int32)\n  nameWithType: IMethodMessage.GetArg(Int32)\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets a specific argument as an <xref:System.Object>.\n  syntax:\n    content: public object GetArg (int argNum);\n    parameters:\n    - id: argNum\n      type: System.Int32\n      description: The number of the requested argument.\n    return:\n      type: System.Object\n      description: The argument passed to the method.\n  overload: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(System.Int32)\n  id: GetArgName(System.Int32)\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  langs:\n  - csharp\n  name: GetArgName(Int32)\n  nameWithType: IMethodMessage.GetArgName(Int32)\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the name of the argument passed to the method.\n  syntax:\n    content: public string GetArgName (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The number of the requested argument.\n    return:\n      type: System.String\n      description: The name of the specified argument passed to the method, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the current method is not implemented.\n  overload: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs\n  id: HasVarArgs\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  langs:\n  - csharp\n  name: HasVarArgs\n  nameWithType: IMethodMessage.HasVarArgs\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets a value indicating whether the message has variable arguments.\n  remarks: ''\n  example:\n  - \"The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the message information to the console, including whether the method call has variable arguments.  \\n  \\n [!code-cpp[IMethodMessage_MethodName#2](~/add/codesnippet/cpp/p-system.runtime.remotin_93_1.cpp)]\\n [!code-cs[IMethodMessage_MethodName#2](~/add/codesnippet/csharp/p-system.runtime.remotin_93_1.cs)]\\n [!code-vb[IMethodMessage_MethodName#2](~/add/codesnippet/visualbasic/p-system.runtime.remotin_93_1.vb)]\"\n  syntax:\n    content: public bool HasVarArgs { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the method can accept a variable number of arguments; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext\n  id: LogicalCallContext\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  langs:\n  - csharp\n  name: LogicalCallContext\n  nameWithType: IMethodMessage.LogicalCallContext\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the <xref href=\"System.Runtime.Remoting.Messaging.LogicalCallContext\"></xref> for the current method call.\n  remarks: ''\n  example:\n  - \"The following example code shows how to use the `LogicalCallContext` property to determine whether any values are attached to the logical thread.  \\n  \\n [!code-vb[IMethodMessage_LogicalCallContext#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_66_1.vb)]\\n [!code-cs[IMethodMessage_LogicalCallContext#1](~/add/codesnippet/csharp/p-system.runtime.remotin_66_1.cs)]\\n [!code-cpp[IMethodMessage_LogicalCallContext#1](~/add/codesnippet/cpp/p-system.runtime.remotin_66_1.cpp)]\"\n  syntax:\n    content: public System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext { get; }\n    return:\n      type: System.Runtime.Remoting.Messaging.LogicalCallContext\n      description: Gets the <xref href=\"System.Runtime.Remoting.Messaging.LogicalCallContext\"></xref> for the current method call.\n  overload: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase\n  id: MethodBase\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  langs:\n  - csharp\n  name: MethodBase\n  nameWithType: IMethodMessage.MethodBase\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the <xref:System.Reflection.MethodBase> of the called method.\n  remarks: This information is not transmitted to a remote location, but is used to cache the method base after it has been looked up once.\n  syntax:\n    content: public System.Reflection.MethodBase MethodBase { get; }\n    return:\n      type: System.Reflection.MethodBase\n      description: The <xref:System.Reflection.MethodBase> of the called method.\n  overload: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName\n  id: MethodName\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  langs:\n  - csharp\n  name: MethodName\n  nameWithType: IMethodMessage.MethodName\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the name of the invoked method.\n  remarks: ''\n  example:\n  - \"The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the name of the method to the console.  \\n  \\n [!code-cpp[IMethodMessage_MethodName#2](~/add/codesnippet/cpp/p-system.runtime.remotin_13_1.cpp)]\\n [!code-cs[IMethodMessage_MethodName#2](~/add/codesnippet/csharp/p-system.runtime.remotin_13_1.cs)]\\n [!code-vb[IMethodMessage_MethodName#2](~/add/codesnippet/visualbasic/p-system.runtime.remotin_13_1.vb)]\"\n  syntax:\n    content: public string MethodName { get; }\n    return:\n      type: System.String\n      description: The name of the invoked method.\n  overload: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature\n  id: MethodSignature\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  langs:\n  - csharp\n  name: MethodSignature\n  nameWithType: IMethodMessage.MethodSignature\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets an object containing the method signature.\n  remarks: All the current implementations of <xref:System.Runtime.Remoting.Messaging.IMethodMessage> return an array of <xref:System.Type> objects containing the parameter types of the method.\n  syntax:\n    content: public object MethodSignature { get; }\n    return:\n      type: System.Object\n      description: An object containing the method signature.\n  overload: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName\n  id: TypeName\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  langs:\n  - csharp\n  name: TypeName\n  nameWithType: IMethodMessage.TypeName\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the full <xref:System.Type> name of the specific object that the call is destined for.\n  syntax:\n    content: public string TypeName { get; }\n    return:\n      type: System.String\n      description: The full <xref:System.Type> name of the specific object that the call is destined for.\n  overload: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Uri\n  id: Uri\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  langs:\n  - csharp\n  name: Uri\n  nameWithType: IMethodMessage.Uri\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Uri\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the URI of the specific object that the call is destined for.\n  syntax:\n    content: public string Uri { get; }\n    return:\n      type: System.String\n      description: The URI of the remote object that contains the invoked method.\n  overload: System.Runtime.Remoting.Messaging.IMethodMessage.Uri*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: ArgCount\n  nameWithType: IMethodMessage.ArgCount\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Args\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: Args\n  nameWithType: IMethodMessage.Args\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Args\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(System.Int32)\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: GetArg(Int32)\n  nameWithType: IMethodMessage.GetArg(Int32)\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(Int32)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(System.Int32)\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: GetArgName(Int32)\n  nameWithType: IMethodMessage.GetArgName(Int32)\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(Int32)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: HasVarArgs\n  nameWithType: IMethodMessage.HasVarArgs\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: LogicalCallContext\n  nameWithType: IMethodMessage.LogicalCallContext\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext\n- uid: System.Runtime.Remoting.Messaging.LogicalCallContext\n  parent: System.Runtime.Remoting.Messaging\n  isExternal: false\n  name: LogicalCallContext\n  nameWithType: LogicalCallContext\n  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: MethodBase\n  nameWithType: IMethodMessage.MethodBase\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: true\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: MethodName\n  nameWithType: IMethodMessage.MethodName\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: MethodSignature\n  nameWithType: IMethodMessage.MethodSignature\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: TypeName\n  nameWithType: IMethodMessage.TypeName\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Uri\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: Uri\n  nameWithType: IMethodMessage.Uri\n  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Uri\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount*\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: ArgCount\n  nameWithType: IMethodMessage.ArgCount\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Args*\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: Args\n  nameWithType: IMethodMessage.Args\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg*\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: GetArg\n  nameWithType: IMethodMessage.GetArg\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName*\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: GetArgName\n  nameWithType: IMethodMessage.GetArgName\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs*\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: HasVarArgs\n  nameWithType: IMethodMessage.HasVarArgs\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext*\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: LogicalCallContext\n  nameWithType: IMethodMessage.LogicalCallContext\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase*\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: MethodBase\n  nameWithType: IMethodMessage.MethodBase\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName*\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: MethodName\n  nameWithType: IMethodMessage.MethodName\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature*\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: MethodSignature\n  nameWithType: IMethodMessage.MethodSignature\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName*\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: TypeName\n  nameWithType: IMethodMessage.TypeName\n- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Uri*\n  parent: System.Runtime.Remoting.Messaging.IMethodMessage\n  isExternal: false\n  name: Uri\n  nameWithType: IMethodMessage.Uri\n"}