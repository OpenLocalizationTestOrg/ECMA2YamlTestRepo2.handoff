{"nodes":[{"pos":[2744,2938],"content":"Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <xref href=\"System.Security.Cryptography.DSA\"></xref> algorithm. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> algorithm.","pos":[0,162],"source":"Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <xref href=\"System.Security.Cryptography.DSA\"></xref> algorithm."},{"content":"This class cannot be inherited.","pos":[163,194]}]},{"pos":[2951,4213],"content":"You can use the DSACryptoServiceProvider class to create digital signatures and protect the integrity of your data.       To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can be sure that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender's public key is common knowledge.      > [!NOTE] >  Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class instead of the DSACryptoServiceProvider class. Use DSACryptoServiceProvider only for compatibility with legacy applications and data.       This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use the DSACryptoServiceProvider class to create digital signatures and protect the integrity of your data.","pos":[0,115]},{"content":"To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest.","pos":[122,261]},{"content":"The sender then encrypts the message digest with the sender's private key to create the sender's personal signature.","pos":[262,378]},{"content":"Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used.","pos":[379,591]},{"content":"If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can be sure that the message was not altered while in transit.","pos":[592,777]},{"content":"Note that a signature can be verified by anyone, because the sender's public key is common knowledge.","pos":[778,879]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Newer asymmetric algorithms are available.","pos":[885,940],"source":"      > [!NOTE] >  Newer asymmetric algorithms are available."},{"content":"Consider using the &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt; class instead of the DSACryptoServiceProvider class.","pos":[941,1073],"source":" Consider using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class instead of the DSACryptoServiceProvider class."},{"content":"Use DSACryptoServiceProvider only for compatibility with legacy applications and data.","pos":[1074,1160]},{"content":"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.","pos":[1167,1255]}]},{"pos":[6449,6564],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class."},{"pos":[7260,7403],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified key size.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified key size."},{"pos":[7556,7613],"content":"The size of the key for the asymmetric algorithm in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the key for the asymmetric algorithm in bits.","pos":[0,57]}]},{"pos":[8315,8505],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified parameters for the cryptographic service provider (CSP).","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified parameters for the cryptographic service provider (CSP)."},{"pos":[8729,8756],"content":"The parameters for the CSP.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameters for the CSP.","pos":[0,27]}]},{"pos":[9502,9705],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified key size and parameters for the cryptographic service provider (CSP).","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified key size and parameters for the cryptographic service provider (CSP)."},{"pos":[9913,9973],"content":"The size of the key for the cryptographic algorithm in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the key for the cryptographic algorithm in bits.","pos":[0,60]}]},{"pos":[10069,10096],"content":"The parameters for the CSP.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameters for the CSP.","pos":[0,27]}]},{"pos":[10333,10408],"content":"The CSP cannot be acquired.       -or-       The key cannot be created.","needQuote":false,"needEscape":true,"nodes":[{"content":"The CSP cannot be acquired.       -or-       The key cannot be created.","pos":[0,71],"nodes":[{"content":"The CSP cannot be acquired.","pos":[0,27]},{"content":"-or-       The key cannot be created.","pos":[34,71]}]}]},{"pos":[10524,10563],"content":"<ph id=\"ph1\">&lt;code&gt;dwKeySize&lt;/code&gt;</ph> is out of range.","needQuote":true,"needEscape":true,"source":"<code>dwKeySize</code> is out of range."},{"pos":[11082,11181],"content":"Creates the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> signature for the specified data.","needQuote":true,"needEscape":true,"source":"Creates the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."},{"pos":[11341,11363],"content":"The data to be signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data to be signed.","pos":[0,22]}]},{"pos":[11421,11466],"content":"The digital signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The digital signature for the specified data.","pos":[0,45]}]},{"pos":[12053,12206],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that describes additional information about a cryptographic key pair.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair."},{"pos":[12219,13343],"content":"Use the CspKeyContainerInfo property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.       In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the CspKeyContainerInfo property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>, and so on, before you call the CspKeyContainerInfo property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the CspKeyContainerInfo property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.       In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the CspKeyContainerInfo property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>, and so on, before you call the CspKeyContainerInfo property.","pos":[0,1122],"nodes":[{"content":"Use the CspKeyContainerInfo property to retrieve additional information about a cryptographic key pair.","pos":[0,103]},{"content":"The returned &lt;xref:System.Security.Cryptography.CspKeyContainerInfo&gt; object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.","pos":[105,314],"source":"  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information."},{"content":"In cases where a random key is generated, a key container will not be created until you call a method that uses the key.","pos":[321,441]},{"content":"Some properties of the &lt;xref:System.Security.Cryptography.CspKeyContainerInfo&gt; object returned by the CspKeyContainerInfo property will throw a &lt;xref:System.Security.Cryptography.CryptographicException&gt; if a key container has not been created.","pos":[443,686],"source":"  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the CspKeyContainerInfo property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created."},{"content":"To make sure that a key container has been created, call a method such as &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A&gt;, &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A&gt;, &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A&gt;, &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A&gt;, and so on, before you call the CspKeyContainerInfo property.","pos":[688,1122],"source":"  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>, and so on, before you call the CspKeyContainerInfo property."}]}]},{"pos":[13545,13693],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that describes additional information about a cryptographic key pair.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair."},{"pos":[14425,14437],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15043,15189],"content":"Exports a blob containing the key information associated with a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Exports a blob containing the key information associated with a <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object."},{"pos":[15201,15341],"content":"The ExportCspBlob method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ExportCspBlob method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","pos":[0,140]}]},{"pos":[15523,15686],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to include the private key; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include the private key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15744,15888],"content":"A byte array containing the key information associated with a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A byte array containing the key information associated with a <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object."},{"pos":[16515,16591],"content":"Exports the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSAParameters\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Exports the <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>."},{"pos":[16821,16987],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to include private parameters; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17074,17147],"content":"The parameters for <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>."},{"pos":[17394,17421],"content":"The key cannot be exported.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key cannot be exported.","pos":[0,27]}]},{"pos":[18272,18284],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18387,18399],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18457,18469],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19505,19517],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19579,19591],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19652,19664],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19767,19779],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19837,19849],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20451,20502],"content":"Imports a blob that represents DSA key information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Imports a blob that represents DSA key information.","pos":[0,51]}]},{"pos":[20514,20723],"content":"The ImportCspBlob method initializes the key data of a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ImportCspBlob method initializes the key data of a &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt; object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","pos":[0,209],"source":"The ImportCspBlob method initializes the key data of a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI)."}]},{"pos":[20870,20914],"content":"A byte array that represents a DSA key blob.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte array that represents a DSA key blob.","pos":[0,44]}]},{"pos":[21615,21701],"content":"Imports the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSAParameters\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Imports the specified <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>."},{"pos":[21931,22004],"content":"The parameters for <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>."},{"pos":[22252,22391],"content":"The cryptographic service provider (CSP) cannot be acquired.       -or-       The <code>parameters</code> parameter has missing fields.","needQuote":false,"needEscape":true,"nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter has missing fields.","pos":[67,135],"source":"       -or-       The <code>parameters</code> parameter has missing fields."}]},{"pos":[22884,22928],"content":"Gets the name of the key exchange algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the key exchange algorithm.","pos":[0,44]}]},{"pos":[23062,23101],"content":"The name of the key exchange algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the key exchange algorithm.","pos":[0,39]}]},{"pos":[23633,23699],"content":"Gets the size of the key used by the asymmetric algorithm in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the size of the key used by the asymmetric algorithm in bits.","pos":[0,66]}]},{"pos":[23712,24093],"content":"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.       The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class does not allow you to change key sizes using the KeySize property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.       The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class does not allow you to change key sizes using the KeySize property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.","pos":[0,379],"nodes":[{"content":"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.","pos":[0,88]},{"content":"The &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt; class does not allow you to change key sizes using the KeySize property.","pos":[95,232],"source":"       The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class does not allow you to change key sizes using the KeySize property."},{"content":"Any value written to this property will fail to update the property without error.","pos":[234,316]},{"content":"To change the key size, use one of the constructor overloads.","pos":[318,379]}]}]},{"pos":[24211,24264],"content":"The size of the key used by the asymmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the key used by the asymmetric algorithm.","pos":[0,53]}]},{"pos":[24823,24935],"content":"Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).","pos":[0,112]}]},{"pos":[24947,25015],"content":"Use this property when you want to persist a key in a key container.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this property when you want to persist a key in a key container.","pos":[0,68]}]},{"pos":[25139,25317],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the key should be persisted in the CSP; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key should be persisted in the CSP; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[25859,26008],"content":"Gets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object contains only a public key.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object contains only a public key."},{"pos":[26020,26310],"content":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the PublicOnly property to determine whether the current instance contains only a public key or both a public and private key.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the PublicOnly property to determine whether the current instance contains only a public key or both a public and private key.","pos":[0,290],"nodes":[{"content":"The &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt; class can be initialized either with a public key only or with both a public and private key.","pos":[0,158],"source":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key."},{"content":"Use the PublicOnly property to determine whether the current instance contains only a public key or both a public and private key.","pos":[160,290]}]}]},{"pos":[26424,26676],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object contains only a public key; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object contains only a public key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[27253,27294],"content":"Gets the name of the signature algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the signature algorithm.","pos":[0,41]}]},{"pos":[27426,27462],"content":"The name of the signature algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the signature algorithm.","pos":[0,36]}]},{"pos":[28049,28136],"content":"Computes the hash value of the specified byte array and signs the resulting hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value of the specified byte array and signs the resulting hash value.","pos":[0,87]}]},{"pos":[28149,28412],"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","pos":[0,261],"nodes":[{"content":"This method creates a digital signature that is verified using the &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A&gt; method.","pos":[0,149],"source":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method."},{"content":"&lt;xref:System.Security.Cryptography.DSA&gt; uses the &lt;xref:System.Security.Cryptography.SHA1&gt; hash algorithm.","pos":[156,261],"source":"       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."}]}]},{"pos":[28555,28600],"content":"The input data for which to compute the hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]},{"pos":[28658,28749],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> signature for the specified data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."},{"pos":[29332,29421],"content":"Computes the hash value of the specified input stream and signs the resulting hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value of the specified input stream and signs the resulting hash value.","pos":[0,89]}]},{"pos":[29433,29538],"content":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Security.Cryptography.DSA&gt; uses the &lt;xref:System.Security.Cryptography.SHA1&gt; hash algorithm.","pos":[0,105],"source":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."}]},{"pos":[29703,29748],"content":"The input data for which to compute the hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]},{"pos":[29806,29897],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> signature for the specified data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."},{"pos":[30562,30639],"content":"Signs a byte array from the specified start point to the specified end point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Signs a byte array from the specified start point to the specified end point.","pos":[0,77]}]},{"pos":[30652,30915],"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","pos":[0,261],"nodes":[{"content":"This method creates a digital signature that is verified using the &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A&gt; method.","pos":[0,149],"source":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method."},{"content":"&lt;xref:System.Security.Cryptography.DSA&gt; uses the &lt;xref:System.Security.Cryptography.SHA1&gt; hash algorithm.","pos":[156,261],"source":"       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."}]}]},{"pos":[31081,31104],"content":"The input data to sign.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input data to sign.","pos":[0,23]}]},{"pos":[31166,31223],"content":"The offset into the array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the array from which to begin using data.","pos":[0,57]}]},{"pos":[31284,31332],"content":"The number of bytes in the array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]},{"pos":[31390,31481],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> signature for the specified data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."},{"pos":[32107,32197],"content":"Computes the signature for the specified hash value by encrypting it with the private key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the signature for the specified hash value by encrypting it with the private key.","pos":[0,90]}]},{"pos":[32210,32473],"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A> method.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A> method.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","pos":[0,261],"nodes":[{"content":"This method creates a digital signature that is verified using the &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A&gt; method.","pos":[0,149],"source":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A> method."},{"content":"&lt;xref:System.Security.Cryptography.DSA&gt; uses the &lt;xref:System.Security.Cryptography.SHA1&gt; hash algorithm.","pos":[156,261],"source":"       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."}]}]},{"pos":[32630,32670],"content":"The hash value of the data to be signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash value of the data to be signed.","pos":[0,40]}]},{"pos":[32730,32803],"content":"The name of the hash algorithm used to create the hash value of the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the hash algorithm used to create the hash value of the data.","pos":[0,73]}]},{"pos":[32861,32958],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> signature for the specified hash value.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified hash value."},{"pos":[33151,33250],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbHash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>rgbHash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[33400,33506],"content":"The cryptographic service provider (CSP) cannot be acquired.       -or-       There is no private key.","needQuote":false,"needEscape":true,"nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.       -or-       There is no private key.","pos":[0,102],"nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]},{"content":"-or-       There is no private key.","pos":[67,102]}]}]},{"pos":[33989,34119],"content":"Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.","pos":[0,130]}]},{"pos":[34131,34591],"content":"Setting this property to true is equivalent to passing the UseMachineKeyStore flag to a <xref:System.Security.Cryptography.CspParameters> object. The UseMachineKeyStore property applies to all code in the current application domain, while the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Setting this property to true is equivalent to passing the UseMachineKeyStore flag to a <xref:System.Security.Cryptography.CspParameters> object. The UseMachineKeyStore property applies to all code in the current application domain, while the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded.","pos":[0,460],"nodes":[{"content":"Setting this property to true is equivalent to passing the UseMachineKeyStore flag to a &lt;xref:System.Security.Cryptography.CspParameters&gt; object.","pos":[0,145],"source":"Setting this property to true is equivalent to passing the UseMachineKeyStore flag to a <xref:System.Security.Cryptography.CspParameters> object."},{"content":"The UseMachineKeyStore property applies to all code in the current application domain, while the &lt;xref:System.Security.Cryptography.CspParameters&gt; object applies only to classes that explicitly reference it.","pos":[146,353],"source":" The UseMachineKeyStore property applies to all code in the current application domain, while the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it."},{"content":"These settings are useful when impersonating or running under an account whose user profile is not loaded.","pos":[354,460]}]}]},{"pos":[34725,34918],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the key should be persisted in the computer key store; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key should be persisted in the computer key store; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[35564,35667],"content":"Verifies the specified signature data by comparing it to the signature computed for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies the specified signature data by comparing it to the signature computed for the specified data.","pos":[0,103]}]},{"pos":[35680,35962],"content":"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","pos":[0,280],"nodes":[{"content":"This method verifies the &lt;xref:System.Security.Cryptography.DSA&gt; digital signature produced by &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A&gt;.","pos":[0,168],"source":"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>."},{"content":"&lt;xref:System.Security.Cryptography.DSA&gt; uses the &lt;xref:System.Security.Cryptography.SHA1&gt; hash algorithm.","pos":[175,280],"source":"       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."}]}]},{"pos":[36128,36153],"content":"The data that was signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data that was signed.","pos":[0,25]}]},{"pos":[36222,36256],"content":"The signature data to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]},{"pos":[36315,36486],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature verifies as valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature verifies as valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[37173,37282],"content":"Verifies the specified signature data by comparing it to the signature computed for the specified hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies the specified signature data by comparing it to the signature computed for the specified hash value.","pos":[0,109]}]},{"pos":[37295,37619],"content":"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>.       If the `str` parameter is `null`, the default hash algorithm (SHA1) is used. The valid hash algorithms is <xref:System.Security.Cryptography.SHA1>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method verifies the &lt;xref:System.Security.Cryptography.DSA&gt; digital signature produced by &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A&gt;.","pos":[0,168],"source":"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>."},{"content":"If the <ph id=\"ph1\">`str`</ph> parameter is <ph id=\"ph2\">`null`</ph>, the default hash algorithm (SHA1) is used.","pos":[175,251],"source":"       If the `str` parameter is `null`, the default hash algorithm (SHA1) is used."},{"content":"The valid hash algorithms is &lt;xref:System.Security.Cryptography.SHA1&gt;.","pos":[252,322],"source":" The valid hash algorithms is <xref:System.Security.Cryptography.SHA1>."}]},{"pos":[37797,37837],"content":"The hash value of the data to be signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash value of the data to be signed.","pos":[0,40]}]},{"pos":[37897,37970],"content":"The name of the hash algorithm used to create the hash value of the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the hash algorithm used to create the hash value of the data.","pos":[0,73]}]},{"pos":[38039,38073],"content":"The signature data to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]},{"pos":[38132,38303],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature verifies as valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature verifies as valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[38499,38736],"content":"The <code>rgbHash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       The <code>rgbSignature</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbHash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,99],"source":"The <code>rgbHash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[106,221],"source":"       -or-       The <code>rgbSignature</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[38887,39002],"content":"The cryptographic service provider (CSP) cannot be acquired.       -or-       The signature cannot be verified.","needQuote":false,"needEscape":true,"nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.       -or-       The signature cannot be verified.","pos":[0,111],"nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]},{"content":"-or-       The signature cannot be verified.","pos":[67,111]}]}]},{"pos":[39571,39671],"content":"Verifies the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> signature for the specified data.","needQuote":true,"needEscape":true,"source":"Verifies the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."},{"pos":[39850,39886],"content":"The data signed with <ph id=\"ph1\">`rgbSignature`</ph>.","needQuote":true,"needEscape":true,"source":"The data signed with `rgbSignature`."},{"pos":[39955,39998],"content":"The signature to be verified for <ph id=\"ph1\">`rgbData`</ph>.","needQuote":true,"needEscape":true,"source":"The signature to be verified for `rgbData`."},{"pos":[40057,40320],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbSignature</ph><ept id=\"p2\">&lt;/code&gt;</ept> matches the signature computed using the specified hash algorithm and key on <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">rgbHash</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.DSACryptoServiceProvider\n  id: DSACryptoServiceProvider\n  children:\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  - System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)\n  - System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  - System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)\n  - System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  - System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  - System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  - System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  - System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider\n  nameWithType: DSACryptoServiceProvider\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider\n  type: Class\n  summary: Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <xref href=\"System.Security.Cryptography.DSA\"></xref> algorithm. This class cannot be inherited.\n  remarks: \"You can use the DSACryptoServiceProvider class to create digital signatures and protect the integrity of your data.  \\n  \\n To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can be sure that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender's public key is common knowledge.  \\n  \\n> [!NOTE]\\n>  Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class instead of the DSACryptoServiceProvider class. Use DSACryptoServiceProvider only for compatibility with legacy applications and data.  \\n  \\n This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class DSACryptoServiceProvider : System.Security.Cryptography.DSA, System.Security.Cryptography.ICspAsymmetricAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.DSA\n  implements:\n  - System.Security.Cryptography.ICspAsymmetricAlgorithm\n  inheritedMembers:\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.DSA.Create\n  - System.Security.Cryptography.DSA.Create(System.String)\n  - System.Security.Cryptography.DSA.FromXmlString(System.String)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider()\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class.\n  syntax:\n    content: public DSACryptoServiceProvider ();\n    parameters: []\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider(Int32)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified key size.\n  syntax:\n    content: public DSACryptoServiceProvider (int dwKeySize);\n    parameters:\n    - id: dwKeySize\n      type: System.Int32\n      description: The size of the key for the asymmetric algorithm in bits.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider(CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified parameters for the cryptographic service provider (CSP).\n  syntax:\n    content: public DSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.CspParameters\n      description: The parameters for the CSP.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Int32,System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider(Int32,CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified key size and parameters for the cryptographic service provider (CSP).\n  syntax:\n    content: public DSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);\n    parameters:\n    - id: dwKeySize\n      type: System.Int32\n      description: The size of the key for the cryptographic algorithm in bits.\n    - id: parameters\n      type: System.Security.Cryptography.CspParameters\n      description: The parameters for the CSP.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The CSP cannot be acquired.  \\n  \\n -or-  \\n  \\n The key cannot be created.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>dwKeySize</code> is out of range.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])\n  id: CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: CreateSignature(Byte[])\n  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  syntax:\n    content: public override byte[] CreateSignature (byte[] rgbHash);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The data to be signed.\n    return:\n      type: System.Byte[]\n      description: The digital signature for the specified data.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  id: CspKeyContainerInfo\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: CspKeyContainerInfo\n  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair.\n  remarks: \"Use the CspKeyContainerInfo property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.  \\n  \\n In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the CspKeyContainerInfo property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>, and so on, before you call the CspKeyContainerInfo property.\"\n  syntax:\n    content: public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }\n    return:\n      type: System.Security.Cryptography.CspKeyContainerInfo\n      description: A <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  id: ExportCspBlob(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ExportCspBlob(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Exports a blob containing the key information associated with a <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object.\n  remarks: The ExportCspBlob method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).\n  syntax:\n    content: public byte[] ExportCspBlob (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include the private key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Byte[]\n      description: A byte array containing the key information associated with a <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Exports the <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>.\n  syntax:\n    content: public override System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Security.Cryptography.DSAParameters\n      description: The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key cannot be exported.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: To be added.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: To be added.\n    return:\n      type: System.Byte[]\n      description: To be added.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: To be added.\n    - id: offset\n      type: System.Int32\n      description: To be added.\n    - id: count\n      type: System.Int32\n      description: To be added.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: To be added.\n    return:\n      type: System.Byte[]\n      description: To be added.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  id: ImportCspBlob(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ImportCspBlob(Byte[])\n  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Imports a blob that represents DSA key information.\n  remarks: The ImportCspBlob method initializes the key data of a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).\n  syntax:\n    content: public void ImportCspBlob (byte[] keyBlob);\n    parameters:\n    - id: keyBlob\n      type: System.Byte[]\n      description: A byte array that represents a DSA key blob.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)\n  id: ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Imports the specified <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>.\n  syntax:\n    content: public override void ImportParameters (System.Security.Cryptography.DSAParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.DSAParameters\n      description: The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n The <code>parameters</code> parameter has missing fields.\"\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the key exchange algorithm.\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the key exchange algorithm.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: DSACryptoServiceProvider.KeySize\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the size of the key used by the asymmetric algorithm in bits.\n  remarks: \"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.  \\n  \\n The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class does not allow you to change key sizes using the KeySize property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.\"\n  syntax:\n    content: public override int KeySize { get; }\n    return:\n      type: System.Int32\n      description: The size of the key used by the asymmetric algorithm.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  id: PersistKeyInCsp\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: PersistKeyInCsp\n  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).\n  remarks: Use this property when you want to persist a key in a key container.\n  syntax:\n    content: public bool PersistKeyInCsp { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key should be persisted in the CSP; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  id: PublicOnly\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: PublicOnly\n  nameWithType: DSACryptoServiceProvider.PublicOnly\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value that indicates whether the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object contains only a public key.\n  remarks: The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the PublicOnly property to determine whether the current instance contains only a public key or both a public and private key.\n  syntax:\n    content: public bool PublicOnly { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object contains only a public key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the signature algorithm.\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the signature algorithm.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])\n  id: SignData(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Byte[])\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified byte array and signs the resulting hash value.\n  remarks: \"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.  \\n  \\n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.\"\n  syntax:\n    content: public byte[] SignData (byte[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)\n  id: SignData(System.IO.Stream)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Stream)\n  nameWithType: DSACryptoServiceProvider.SignData(Stream)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified input stream and signs the resulting hash value.\n  remarks: <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.\n  syntax:\n    content: public byte[] SignData (System.IO.Stream inputStream);\n    parameters:\n    - id: inputStream\n      type: System.IO.Stream\n      description: The input data for which to compute the hash.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)\n  id: SignData(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Byte[],Int32,Int32)\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Signs a byte array from the specified start point to the specified end point.\n  remarks: \"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.  \\n  \\n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.\"\n  syntax:\n    content: public byte[] SignData (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The input data to sign.\n    - id: offset\n      type: System.Int32\n      description: The offset into the array from which to begin using data.\n    - id: count\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  id: SignHash(System.Byte[],System.String)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignHash(Byte[],String)\n  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the signature for the specified hash value by encrypting it with the private key.\n  remarks: \"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A> method.  \\n  \\n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.\"\n  syntax:\n    content: public byte[] SignHash (byte[] rgbHash, string str);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The hash value of the data to be signed.\n    - id: str\n      type: System.String\n      description: The name of the hash algorithm used to create the hash value of the data.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified hash value.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>rgbHash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n There is no private key.\"\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  id: UseMachineKeyStore\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: UseMachineKeyStore\n  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.\n  remarks: Setting this property to true is equivalent to passing the UseMachineKeyStore flag to a <xref:System.Security.Cryptography.CspParameters> object. The UseMachineKeyStore property applies to all code in the current application domain, while the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded.\n  syntax:\n    content: public static bool UseMachineKeyStore { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key should be persisted in the computer key store; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])\n  id: VerifyData(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Verifies the specified signature data by comparing it to the signature computed for the specified data.\n  remarks: \"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>.  \\n  \\n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.\"\n  syntax:\n    content: public bool VerifyData (byte[] rgbData, byte[] rgbSignature);\n    parameters:\n    - id: rgbData\n      type: System.Byte[]\n      description: The data that was signed.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature verifies as valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  id: VerifyHash(System.Byte[],System.String,System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifyHash(Byte[],String,Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Verifies the specified signature data by comparing it to the signature computed for the specified hash value.\n  remarks: \"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>.  \\n  \\n If the `str` parameter is `null`, the default hash algorithm (SHA1) is used. The valid hash algorithms is <xref:System.Security.Cryptography.SHA1>.\"\n  syntax:\n    content: public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The hash value of the data to be signed.\n    - id: str\n      type: System.String\n      description: The name of the hash algorithm used to create the hash value of the data.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature verifies as valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>rgbHash</code> parameter is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>rgbSignature</code> parameter is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n The signature cannot be verified.\"\n  platform:\n  - net462\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])\n  id: VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifySignature(Byte[],Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Verifies the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  syntax:\n    content: public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The data signed with `rgbSignature`.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature to be verified for `rgbData`.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.DSA\n  isExternal: false\n  name: System.Security.Cryptography.DSA\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider()\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider(Int32)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider(CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n- uid: System.Security.Cryptography.CspParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspParameters\n  nameWithType: CspParameters\n  fullName: System.Security.Cryptography.CspParameters\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider(Int32,CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: CreateSignature(Byte[])\n  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: CspKeyContainerInfo\n  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n- uid: System.Security.Cryptography.CspKeyContainerInfo\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspKeyContainerInfo\n  nameWithType: CspKeyContainerInfo\n  fullName: System.Security.Cryptography.CspKeyContainerInfo\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ExportCspBlob(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.DSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSAParameters\n  nameWithType: DSAParameters\n  fullName: System.Security.Cryptography.DSAParameters\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ImportCspBlob(Byte[])\n  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: KeySize\n  nameWithType: DSACryptoServiceProvider.KeySize\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: PersistKeyInCsp\n  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: PublicOnly\n  nameWithType: DSACryptoServiceProvider.PublicOnly\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Byte[])\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Stream)\n  nameWithType: DSACryptoServiceProvider.SignData(Stream)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Byte[],Int32,Int32)\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignHash(Byte[],String)\n  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: UseMachineKeyStore\n  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifyData(Byte[],Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifyHash(Byte[],String,Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifySignature(Byte[],Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: CreateSignature\n  nameWithType: DSACryptoServiceProvider.CreateSignature\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: CspKeyContainerInfo\n  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: Dispose\n  nameWithType: DSACryptoServiceProvider.Dispose\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ExportCspBlob\n  nameWithType: DSACryptoServiceProvider.ExportCspBlob\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ExportParameters\n  nameWithType: DSACryptoServiceProvider.ExportParameters\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: HashData\n  nameWithType: DSACryptoServiceProvider.HashData\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ImportCspBlob\n  nameWithType: DSACryptoServiceProvider.ImportCspBlob\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ImportParameters\n  nameWithType: DSACryptoServiceProvider.ImportParameters\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: KeySize\n  nameWithType: DSACryptoServiceProvider.KeySize\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: PersistKeyInCsp\n  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: PublicOnly\n  nameWithType: DSACryptoServiceProvider.PublicOnly\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignData\n  nameWithType: DSACryptoServiceProvider.SignData\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignHash\n  nameWithType: DSACryptoServiceProvider.SignHash\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: UseMachineKeyStore\n  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifyData\n  nameWithType: DSACryptoServiceProvider.VerifyData\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifyHash\n  nameWithType: DSACryptoServiceProvider.VerifyHash\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifySignature\n  nameWithType: DSACryptoServiceProvider.VerifySignature\n"}