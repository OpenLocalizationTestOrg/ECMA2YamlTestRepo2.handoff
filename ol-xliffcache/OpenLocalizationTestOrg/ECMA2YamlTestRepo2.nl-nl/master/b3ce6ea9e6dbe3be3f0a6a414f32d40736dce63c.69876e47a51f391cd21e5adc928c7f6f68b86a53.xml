{"nodes":[{"pos":[2269,2303],"content":"Represents the Gregorian calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the Gregorian calendar.","pos":[0,34]}]},{"pos":[2316,5815],"content":"The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the GregorianCalendar class recognizes only the current era (A.D. or C.E.).      > [!NOTE] >  For information about using the GregorianCalendar class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md).       A leap year in the Gregorian calendar is defined as a year that is evenly divisible by 4, unless it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       The Gregorian calendar has 12 months with 28 to 31 days each: January (31 days), February (28 or 29 days), March (31 days), April (30 days), May (31 days), June (30 days), July (31 days), August (31 days), September (30 days), October (31 days), November (30 days), and December (31 days). February has 29 days during leap years and 28 during common years.      > [!IMPORTANT] >  By default, all <xref:System.DateTime> and <xref:System.DateTimeOffset> values express dates and times in the Gregorian calendar.       The Gregorian calendar was developed as a replacement for the Julian calendar (which is represented by the <xref:System.Globalization.JulianCalendar> class) and was first introduced in a small number of cultures on October 15, 1582. When working with historic dates that precede a culture's adoption of the Gregorian calendar, you should use the original calendar if it is available in the .NET Framework. For example, Denmark changed from the Julian calendar to the Gregorian calendar on February 19 (in the Julian calendar) or March 1 (in the Gregorian calendar) of 1700. In this case, for dates before the adoption of the Gregorian calendar, you should use the Julian calendar. However, note that no culture offers intrinsic support for the <xref:System.Globalization.JulianCalendar> class. You must use the <xref:System.Globalization.JulianCalendar> class as a standalone calendar. For more information, see .       The following example illustrates that February 18, 1700 in the Julian calendar, which is the last day the Julian calendar was officially used in Denmark, is one day earlier than March 1, 1700 in the Gregorian calendar.       [!code-cs[System.Globalization.GregorianCalendar.Class#1](~/add/codesnippet/csharp/t-system.globalization.g_0_1.cs)]  [!code-vb[System.Globalization.GregorianCalendar.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.g_0_1.vb)]       Each <xref:System.Globalization.CultureInfo> supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application can set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property to a new <xref:System.Globalization.Calendar>.       <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> ignores punctuation in abbreviated era names, only if the GregorianCalendar is selected in <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName> and the culture uses \"A.D.\" as the era name, that is, \"A.D.\" is equivalent to \"AD\".","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Gregorian calendar recognizes two eras: B.C.","pos":[0,48]},{"content":"or B.C.E., and A.D.","pos":[49,68]},{"content":"or C.E.","pos":[69,76]},{"content":"This implementation of the GregorianCalendar class recognizes only the current era (A.D.","pos":[77,165]},{"content":"or C.E.).","pos":[166,175]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  For information about using the GregorianCalendar class and the other calendar classes in the .NET Framework, see <bpt id=\"p1\">[</bpt>Working with Calendars<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[181,372],"source":"      > [!NOTE] >  For information about using the GregorianCalendar class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md)."},{"content":"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by 4, unless it is divisible by 100.","pos":[379,499]},{"content":"However, years that are divisible by 400 are leap years.","pos":[500,556]},{"content":"For example, the year 1900 was not a leap year, but the year 2000 was.","pos":[557,627]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[628,684]},{"content":"The Gregorian calendar has 12 months with 28 to 31 days each: January (31 days), February (28 or 29 days), March (31 days), April (30 days), May (31 days), June (30 days), July (31 days), August (31 days), September (30 days), October (31 days), November (30 days), and December (31 days).","pos":[691,980]},{"content":"February has 29 days during leap years and 28 during common years.","pos":[981,1047]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  By default, all &lt;xref:System.DateTime&gt; and &lt;xref:System.DateTimeOffset&gt; values express dates and times in the Gregorian calendar.","pos":[1053,1200],"source":"      > [!IMPORTANT] >  By default, all <xref:System.DateTime> and <xref:System.DateTimeOffset> values express dates and times in the Gregorian calendar."},{"content":"The Gregorian calendar was developed as a replacement for the Julian calendar (which is represented by the &lt;xref:System.Globalization.JulianCalendar&gt; class) and was first introduced in a small number of cultures on October 15, 1582.","pos":[1207,1439],"source":"       The Gregorian calendar was developed as a replacement for the Julian calendar (which is represented by the <xref:System.Globalization.JulianCalendar> class) and was first introduced in a small number of cultures on October 15, 1582."},{"content":"When working with historic dates that precede a culture's adoption of the Gregorian calendar, you should use the original calendar if it is available in the .NET Framework.","pos":[1440,1612]},{"content":"For example, Denmark changed from the Julian calendar to the Gregorian calendar on February 19 (in the Julian calendar) or March 1 (in the Gregorian calendar) of 1700.","pos":[1613,1780]},{"content":"In this case, for dates before the adoption of the Gregorian calendar, you should use the Julian calendar.","pos":[1781,1887]},{"content":"However, note that no culture offers intrinsic support for the &lt;xref:System.Globalization.JulianCalendar&gt; class.","pos":[1888,2000],"source":" However, note that no culture offers intrinsic support for the <xref:System.Globalization.JulianCalendar> class."},{"content":"You must use the &lt;xref:System.Globalization.JulianCalendar&gt; class as a standalone calendar.","pos":[2001,2092],"source":" You must use the <xref:System.Globalization.JulianCalendar> class as a standalone calendar."},{"content":"For more information, see .","pos":[2093,2120]},{"content":"The following example illustrates that February 18, 1700 in the Julian calendar, which is the last day the Julian calendar was officially used in Denmark, is one day earlier than March 1, 1700 in the Gregorian calendar.","pos":[2127,2346]},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Globalization.GregorianCalendar.Class#1<ept id=\"p2\">](~/add/codesnippet/csharp/t-system.globalization.g_0_1.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Globalization.GregorianCalendar.Class#1<ept id=\"p4\">](~/add/codesnippet/visualbasic/t-system.globalization.g_0_1.vb)</ept><ept id=\"p3\">]</ept>       Each &lt;xref:System.Globalization.CultureInfo&gt; supports a set of calendars.","pos":[2353,2672],"source":"[!code-cs[System.Globalization.GregorianCalendar.Class#1](~/add/codesnippet/csharp/t-system.globalization.g_0_1.cs)]  [!code-vb[System.Globalization.GregorianCalendar.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.g_0_1.vb)]       Each <xref:System.Globalization.CultureInfo> supports a set of calendars."},{"content":"The &lt;xref:System.Globalization.CultureInfo.Calendar%2A&gt; property returns the default calendar for the culture, and the &lt;xref:System.Globalization.CultureInfo.OptionalCalendars%2A&gt; property returns an array containing all the calendars supported by the culture.","pos":[2673,2933],"source":" The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture."},{"content":"To change the calendar used by a &lt;xref:System.Globalization.CultureInfo&gt;, the application can set the &lt;xref:System.Globalization.DateTimeFormatInfo.Calendar%2A&gt; property to a new &lt;xref:System.Globalization.Calendar&gt;.","pos":[2934,3150],"source":" To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application can set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property to a new <xref:System.Globalization.Calendar>."},{"content":"&lt;xref:System.Globalization.DateTimeFormatInfo.GetEra%2A&gt; ignores punctuation in abbreviated era names, only if the GregorianCalendar is selected in &lt;xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName&gt; and the culture uses \"A.D.\"","pos":[3157,3416],"source":"       <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> ignores punctuation in abbreviated era names, only if the GregorianCalendar is selected in <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName> and the culture uses \"A.D.\""},{"content":"as the era name, that is, \"A.D.\"","pos":[3417,3449]},{"content":"is equivalent to \"AD\".","pos":[3450,3472]}]},{"pos":[7052,7241],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the default <bpt id=\"p2\">&lt;xref href=\"System.Globalization.GregorianCalendarTypes\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Globalization.GregorianCalendar\"></xref> class using the default <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> value."},{"pos":[7253,7731],"content":"The default <xref:System.Globalization.GregorianCalendarTypes> value is <xref:System.Globalization.GregorianCalendarTypes>. If the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName> property of the <xref:System.Globalization.CultureInfo> is set to a <xref:System.Globalization.GregorianCalendar> that is created with this constructor, the dates and times are localized in the language associated with the <xref:System.Globalization.CultureInfo>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default <xref:System.Globalization.GregorianCalendarTypes> value is <xref:System.Globalization.GregorianCalendarTypes>. If the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName> property of the <xref:System.Globalization.CultureInfo> is set to a <xref:System.Globalization.GregorianCalendar> that is created with this constructor, the dates and times are localized in the language associated with the <xref:System.Globalization.CultureInfo>.","pos":[0,478],"nodes":[{"content":"The default &lt;xref:System.Globalization.GregorianCalendarTypes&gt; value is &lt;xref:System.Globalization.GregorianCalendarTypes&gt;.","pos":[0,123],"source":"The default <xref:System.Globalization.GregorianCalendarTypes> value is <xref:System.Globalization.GregorianCalendarTypes>."},{"content":"If the &lt;xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName&gt; property of the &lt;xref:System.Globalization.CultureInfo&gt; is set to a &lt;xref:System.Globalization.GregorianCalendar&gt; that is created with this constructor, the dates and times are localized in the language associated with the &lt;xref:System.Globalization.CultureInfo&gt;.","pos":[124,478],"source":" If the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName> property of the <xref:System.Globalization.CultureInfo> is set to a <xref:System.Globalization.GregorianCalendar> that is created with this constructor, the dates and times are localized in the language associated with the <xref:System.Globalization.CultureInfo>."}]}]},{"pos":[8962,9153],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified <bpt id=\"p2\">&lt;xref href=\"System.Globalization.GregorianCalendarTypes\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Globalization.GregorianCalendar\"></xref> class using the specified <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> value."},{"pos":[9360,9497],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendarTypes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that denotes which language version of the calendar to create.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> value that denotes which language version of the calendar to create."},{"pos":[9684,9802],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a member of the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendarTypes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","needQuote":true,"needEscape":true,"source":"<code>type</code> is not a member of the <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> enumeration."},{"pos":[10285,10404],"content":"Returns a <xref:System.DateTime> that is the specified number of months away from the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.DateTime&gt; that is the specified number of months away from the specified &lt;xref:System.DateTime&gt;.","pos":[0,119],"source":"Returns a <xref:System.DateTime> that is the specified number of months away from the specified <xref:System.DateTime>."}]},{"pos":[10417,12189],"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.       If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.g_8_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.g_8_1.cs)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The day part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting day is not a valid day in the resulting month of the resulting year.","pos":[0,150],"source":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year."},{"content":"It is changed to the last valid day in the resulting month of the resulting year.","pos":[151,232]},{"content":"The year part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting month is outside the year of the specified &lt;xref:System.DateTime&gt;.","pos":[233,382],"source":" The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>."},{"content":"This implementation supports only the current era.","pos":[383,433]},{"content":"Therefore, &lt;xref:System.ArgumentException&gt; is thrown if the resulting year is outside the era of the specified &lt;xref:System.DateTime&gt;.","pos":[434,568],"source":" Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>."},{"content":"The time-of-day part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[569,687],"source":" The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the <ph id=\"ph1\">`months`</ph> parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.","pos":[694,1012],"source":"       For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April."},{"content":"If the value of the <ph id=\"ph1\">`months`</ph> parameter is negative, the resulting &lt;xref:System.DateTime&gt; is earlier than the specified &lt;xref:System.DateTime&gt;.","pos":[1019,1161],"source":"       If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>."},{"content":"The&lt;xref:System.DateTime.Kind%2A&gt; property of the returned &lt;xref:System.DateTime&gt; value always equals &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[1168,1322],"source":"       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>."},{"content":"You can preserve the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> parameter by calling the &lt;xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName&gt; method, as the following example shows.","pos":[1323,1525],"source":" You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows."},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Globalization.Calendar.AddMethods#5<ept id=\"p2\">](~/add/codesnippet/visualbasic/m-system.globalization.g_8_1.vb)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Globalization.Calendar.AddMethods#5<ept id=\"p4\">](~/add/codesnippet/csharp/m-system.globalization.g_8_1.cs)</ept><ept id=\"p3\">]</ept>","pos":[1532,1763],"source":"[!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.g_8_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.g_8_1.cs)]"}]},{"pos":[12876,12926],"content":"The <xref:System.DateTime> to which to add months.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to which to add months.","pos":[0,50],"source":"The <xref:System.DateTime> to which to add months."}]},{"pos":[12988,13016],"content":"The number of months to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of months to add.","pos":[0,28]}]},{"pos":[13076,13199],"content":"The <xref:System.DateTime> that results from adding the specified number of months to the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; that results from adding the specified number of months to the specified &lt;xref:System.DateTime&gt;.","pos":[0,123],"source":"The <xref:System.DateTime> that results from adding the specified number of months to the specified <xref:System.DateTime>."}]},{"pos":[13370,13438],"content":"The resulting <xref:System.DateTime> is outside the supported range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting &lt;xref:System.DateTime&gt; is outside the supported range.","pos":[0,68],"source":"The resulting <xref:System.DateTime> is outside the supported range."}]},{"pos":[13554,13660],"content":"<code>months</code> is less than -120000.       -or-       <code>months</code> is greater than 120000.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;months&lt;/code&gt;</ph> is less than -120000.","pos":[0,41],"source":"<code>months</code> is less than -120000."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;months&lt;/code&gt;</ph> is greater than 120000.","pos":[48,102],"source":"       -or-       <code>months</code> is greater than 120000."}]},{"pos":[14139,14257],"content":"Returns a <xref:System.DateTime> that is the specified number of years away from the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.DateTime&gt; that is the specified number of years away from the specified &lt;xref:System.DateTime&gt;.","pos":[0,118],"source":"Returns a <xref:System.DateTime> that is the specified number of years away from the specified <xref:System.DateTime>."}]},{"pos":[14270,15910],"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date will be the 28th day of February in the following year.       If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.g_4_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.g_4_1.cs)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The day part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting day is not a valid day in the resulting month of the resulting year.","pos":[0,150],"source":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year."},{"content":"It is changed to the last valid day in the resulting month of the resulting year.","pos":[151,232]},{"content":"The month part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[233,345],"source":" The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"This implementation supports only the current era.","pos":[346,396]},{"content":"Therefore, &lt;xref:System.ArgumentException&gt; is thrown if the resulting year is outside the era of the specified &lt;xref:System.DateTime&gt;.","pos":[397,531],"source":" Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>."},{"content":"The time-of-day part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[532,650],"source":" The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"For example, February has 28 days, except during leap years when it has 29 days.","pos":[657,737]},{"content":"If the specified date is the 29th day of February in a leap year and the value of <ph id=\"ph1\">`years`</ph> is 1, the resulting date will be the 28th day of February in the following year.","pos":[738,908],"source":" If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date will be the 28th day of February in the following year."},{"content":"If <ph id=\"ph1\">`years`</ph> is negative, the resulting &lt;xref:System.DateTime&gt; is earlier than the specified &lt;xref:System.DateTime&gt;.","pos":[915,1029],"source":"       If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>."},{"content":"The&lt;xref:System.DateTime.Kind%2A&gt; property of the returned &lt;xref:System.DateTime&gt; value always equals &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[1036,1190],"source":"       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>."},{"content":"You can preserve the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> parameter by calling the &lt;xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName&gt; method, as the following example shows.","pos":[1191,1393],"source":" You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows."},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Globalization.Calendar.AddMethods#8<ept id=\"p2\">](~/add/codesnippet/visualbasic/m-system.globalization.g_4_1.vb)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Globalization.Calendar.AddMethods#8<ept id=\"p4\">](~/add/codesnippet/csharp/m-system.globalization.g_4_1.cs)</ept><ept id=\"p3\">]</ept>","pos":[1400,1631],"source":"[!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.g_4_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.g_4_1.cs)]"}]},{"pos":[16595,16644],"content":"The <xref:System.DateTime> to which to add years.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to which to add years.","pos":[0,49],"source":"The <xref:System.DateTime> to which to add years."}]},{"pos":[16705,16732],"content":"The number of years to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of years to add.","pos":[0,27]}]},{"pos":[16792,16914],"content":"The <xref:System.DateTime> that results from adding the specified number of years to the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; that results from adding the specified number of years to the specified &lt;xref:System.DateTime&gt;.","pos":[0,122],"source":"The <xref:System.DateTime> that results from adding the specified number of years to the specified <xref:System.DateTime>."}]},{"pos":[17084,17152],"content":"The resulting <xref:System.DateTime> is outside the supported range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting &lt;xref:System.DateTime&gt; is outside the supported range.","pos":[0,68],"source":"The resulting <xref:System.DateTime> is outside the supported range."}]},{"pos":[17506,17557],"content":"Represents the current era. This field is constant.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the current era. This field is constant.","pos":[0,51],"nodes":[{"content":"Represents the current era.","pos":[0,27]},{"content":"This field is constant.","pos":[28,51]}]}]},{"pos":[17570,17802],"content":"The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.). This field always returns 1.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.). This field always returns 1.","pos":[0,232],"nodes":[{"content":"The Gregorian calendar recognizes two eras: B.C.","pos":[0,48]},{"content":"or B.C.E., and A.D.","pos":[49,68]},{"content":"or C.E.","pos":[69,76]},{"content":"This implementation of the &lt;xref:System.Globalization.GregorianCalendar&gt; class recognizes only the current era (A.D.","pos":[77,193],"source":" This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D."},{"content":"or C.E.).","pos":[194,203]},{"content":"This field always returns 1.","pos":[204,232]}]}]},{"pos":[17911,17923],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18337,18448],"content":"Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.","pos":[0,111]}]},{"pos":[19140,19219],"content":"Always returns <bpt id=\"p1\">&lt;xref href=\"System.Globalization.CalendarAlgorithmType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always returns <xref href=\"System.Globalization.CalendarAlgorithmType\"></xref>."},{"pos":[19694,19891],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendarTypes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that denotes the language version of the current <bpt id=\"p2\">&lt;xref href=\"System.Globalization.GregorianCalendar\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> value that denotes the language version of the current <xref href=\"System.Globalization.GregorianCalendar\"></xref>."},{"pos":[20605,20787],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendarTypes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that denotes the language version of the current <bpt id=\"p2\">&lt;xref href=\"System.Globalization.GregorianCalendar\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> value that denotes the language version of the current <xref href=\"System.Globalization.GregorianCalendar\"></xref>."},{"pos":[20981,21120],"content":"The value specified in a set operation is not a member of the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendarTypes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","needQuote":true,"needEscape":true,"source":"The value specified in a set operation is not a member of the <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> enumeration."},{"pos":[21231,21285],"content":"In a set operation, the current instance is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"In a set operation, the current instance is read-only.","pos":[0,54]}]},{"pos":[21637,21726],"content":"Gets the list of eras in the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the list of eras in the <xref href=\"System.Globalization.GregorianCalendar\"></xref>."},{"pos":[21739,22003],"content":"The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.). This property always returns an array with only one element.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.). This property always returns an array with only one element.","pos":[0,264],"nodes":[{"content":"The Gregorian calendar recognizes two eras: B.C.","pos":[0,48]},{"content":"or B.C.E., and A.D.","pos":[49,68]},{"content":"or C.E.","pos":[69,76]},{"content":"This implementation of the &lt;xref:System.Globalization.GregorianCalendar&gt; class recognizes only the current era (A.D.","pos":[77,193],"source":" This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D."},{"content":"or C.E.).","pos":[194,203]},{"content":"This property always returns an array with only one element.","pos":[204,264]}]}]},{"pos":[22122,22235],"content":"An array of integers that represents the eras in the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of integers that represents the eras in the <xref href=\"System.Globalization.GregorianCalendar\"></xref>."},{"pos":[22768,22837],"content":"Returns the day of the month in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the day of the month in the specified &lt;xref:System.DateTime&gt;.","pos":[0,69],"source":"Returns the day of the month in the specified <xref:System.DateTime>."}]},{"pos":[23524,23559],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[23616,23698],"content":"An integer from 1 to 31 that represents the day of the month in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer from 1 to 31 that represents the day of the month in <code>time</code>."},{"pos":[24235,24303],"content":"Returns the day of the week in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the day of the week in the specified &lt;xref:System.DateTime&gt;.","pos":[0,68],"source":"Returns the day of the week in the specified <xref:System.DateTime>."}]},{"pos":[24315,24421],"content":"The <xref:System.DayOfWeek> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.DayOfWeek&gt; values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.","pos":[0,106],"source":"The <xref:System.DayOfWeek> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday."}]},{"pos":[25099,25134],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[25195,25284],"content":"A &lt;xref:System.DayOfWeek&gt; value that represents the day of the week in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.DayOfWeek> value that represents the day of the week in <code>time</code>."},{"pos":[25820,25888],"content":"Returns the day of the year in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the day of the year in the specified &lt;xref:System.DateTime&gt;.","pos":[0,68],"source":"Returns the day of the year in the specified <xref:System.DateTime>."}]},{"pos":[25900,26257],"content":"The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.GregorianCalendar.GetDaysInYear%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.GregorianCalendar.GetDaysInYear%2A>.","pos":[0,357],"nodes":[{"content":"The day of the year is defined as the number of days from the first day of the year.","pos":[0,84]},{"content":"For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by &lt;xref:System.Globalization.GregorianCalendar.GetDaysInYear%2A&gt;.","pos":[85,357],"source":" For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.GregorianCalendar.GetDaysInYear%2A>."}]}]},{"pos":[26929,26964],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[27021,27103],"content":"An integer from 1 to 366 that represents the day of the year in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer from 1 to 366 that represents the day of the year in <code>time</code>."},{"pos":[27722,27815],"content":"Returns the number of days in the specified month in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of days in the specified month in the specified year in the specified era.","pos":[0,93]}]},{"pos":[27827,27940],"content":"For example, this method returns 28 or 29 for February (<ph id=\"ph1\">`month`</ph> = 2), depending on whether <ph id=\"ph2\">`year`</ph> is a leap year.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For example, this method returns 28 or 29 for February (`month` = 2), depending on whether `year` is a leap year."},{"pos":[28615,28651],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[28712,28762],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[28821,28856],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[28913,28998],"content":"The number of days in the specified month in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of days in the specified month in the specified year in the specified era.","pos":[0,85]}]},{"pos":[29195,29434],"content":"<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,64],"source":"<code>era</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[71,147],"source":"       -or-       <code>year</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[154,231],"source":"       -or-       <code>month</code> is outside the range supported by the calendar."}]},{"pos":[29923,29993],"content":"Returns the number of days in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of days in the specified year in the specified era.","pos":[0,70]}]},{"pos":[30005,30093],"content":"For example, this method returns 365 or 366, depending on whether <ph id=\"ph1\">`year`</ph> is a leap year.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For example, this method returns 365 or 366, depending on whether `year` is a leap year."},{"pos":[30724,30760],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[30819,30854],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[30911,30973],"content":"The number of days in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of days in the specified year in the specified era.","pos":[0,62]}]},{"pos":[31169,31320],"content":"<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,64],"source":"<code>era</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[71,147],"source":"       -or-       <code>year</code> is outside the range supported by the calendar."}]},{"pos":[31745,31801],"content":"Returns the era in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the era in the specified &lt;xref:System.DateTime&gt;.","pos":[0,56],"source":"Returns the era in the specified <xref:System.DateTime>."}]},{"pos":[31814,32017],"content":"The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.).","pos":[0,203],"nodes":[{"content":"The Gregorian calendar recognizes two eras: B.C.","pos":[0,48]},{"content":"or B.C.E., and A.D.","pos":[49,68]},{"content":"or C.E.","pos":[69,76]},{"content":"This implementation of the &lt;xref:System.Globalization.GregorianCalendar&gt; class recognizes only the current era (A.D.","pos":[77,193],"source":" This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D."},{"content":"or C.E.).","pos":[194,203]}]}]},{"pos":[32684,32719],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[32776,32832],"content":"An integer that represents the era in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer that represents the era in <code>time</code>."},{"pos":[33391,33446],"content":"Calculates the leap month for a specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the leap month for a specified year and era.","pos":[0,55]}]},{"pos":[33599,33606],"content":"A year.","needQuote":true,"needEscape":true,"nodes":[{"content":"A year.","pos":[0,7]}]},{"pos":[33665,33896],"content":"An era. Specify either <xref href=\"System.Globalization.GregorianCalendar.ADEra\"></xref> or <xref uid=\"langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]\" name=\"GregorianCalendar.Eras[Calendar.CurrentEra]\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An era.","pos":[0,7]},{"content":"Specify either <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendar.ADEra\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]\" name=\"GregorianCalendar.Eras[Calendar.CurrentEra]\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[8,231],"source":" Specify either <xref href=\"System.Globalization.GregorianCalendar.ADEra\"></xref> or <xref uid=\"langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]\" name=\"GregorianCalendar.Eras[Calendar.CurrentEra]\" href=\"\"></xref>."}]},{"pos":[33953,34024],"content":"Always 0 because the Gregorian calendar does not recognize leap months.","needQuote":true,"needEscape":true,"nodes":[{"content":"Always 0 because the Gregorian calendar does not recognize leap months.","pos":[0,71]}]},{"pos":[34219,34591],"content":"<code>year</code> is less than the Gregorian calendar year 1 or greater than the Gregorian calendar year 9999.       -or-       <code>era</code> is not <xref href=\"System.Globalization.GregorianCalendar.ADEra\"></xref> or <xref uid=\"langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]\" name=\"GregorianCalendar.Eras[Calendar.CurrentEra]\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is less than the Gregorian calendar year 1 or greater than the Gregorian calendar year 9999.","pos":[0,110],"source":"<code>year</code> is less than the Gregorian calendar year 1 or greater than the Gregorian calendar year 9999."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is not <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendar.ADEra\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]\" name=\"GregorianCalendar.Eras[Calendar.CurrentEra]\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[117,360],"source":"       -or-       <code>era</code> is not <xref href=\"System.Globalization.GregorianCalendar.ADEra\"></xref> or <xref uid=\"langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]\" name=\"GregorianCalendar.Eras[Calendar.CurrentEra]\" href=\"\"></xref>."}]},{"pos":[35026,35084],"content":"Returns the month in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the month in the specified &lt;xref:System.DateTime&gt;.","pos":[0,58],"source":"Returns the month in the specified <xref:System.DateTime>."}]},{"pos":[35766,35801],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[35858,35929],"content":"An integer from 1 to 12 that represents the month in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer from 1 to 12 that represents the month in <code>time</code>."},{"pos":[36505,36577],"content":"Returns the number of months in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of months in the specified year in the specified era.","pos":[0,72]}]},{"pos":[37232,37268],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[37327,37362],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[37419,37483],"content":"The number of months in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of months in the specified year in the specified era.","pos":[0,64]}]},{"pos":[37681,37832],"content":"<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,64],"source":"<code>era</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[71,147],"source":"       -or-       <code>year</code> is outside the range supported by the calendar."}]},{"pos":[38262,38319],"content":"Returns the year in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the year in the specified &lt;xref:System.DateTime&gt;.","pos":[0,57],"source":"Returns the year in the specified <xref:System.DateTime>."}]},{"pos":[39000,39035],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[39092,39149],"content":"An integer that represents the year in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer that represents the year in <code>time</code>."},{"pos":[39782,39855],"content":"Determines whether the specified date in the specified era is a leap day.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified date in the specified era is a leap day.","pos":[0,73]}]},{"pos":[39868,40314],"content":"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       A leap day is a day that occurs only in a leap year. In the Gregorian calendar, the 29th day of February is the only leap day.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       A leap day is a day that occurs only in a leap year. In the Gregorian calendar, the 29th day of February is the only leap day.","pos":[0,444],"nodes":[{"content":"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100.","pos":[0,126]},{"content":"However, years that are divisible by 400 are leap years.","pos":[127,183]},{"content":"For example, the year 1900 was not a leap year, but the year 2000 was.","pos":[184,254]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[255,311]},{"content":"A leap day is a day that occurs only in a leap year.","pos":[318,370]},{"content":"In the Gregorian calendar, the 29th day of February is the only leap day.","pos":[371,444]}]}]},{"pos":[41003,41039],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[41100,41150],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[41209,41257],"content":"An integer from 1 to 31 that represents the day.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 31 that represents the day.","pos":[0,48]}]},{"pos":[41316,41351],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[41410,41581],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified day is a leap day; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified day is a leap day; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[41773,42098],"content":"<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.       -or-       <code>day</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,64],"source":"<code>era</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[71,147],"source":"       -or-       <code>year</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[154,231],"source":"       -or-       <code>month</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;day&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[238,313],"source":"       -or-       <code>day</code> is outside the range supported by the calendar."}]},{"pos":[42621,42719],"content":"Determines whether the specified month in the specified year in the specified era is a leap month.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified month in the specified year in the specified era is a leap month.","pos":[0,98]}]},{"pos":[42732,43170],"content":"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       A leap month is an entire month that occurs only in a leap year. The Gregorian calendar does not have any leap months.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       A leap month is an entire month that occurs only in a leap year. The Gregorian calendar does not have any leap months.","pos":[0,436],"nodes":[{"content":"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100.","pos":[0,126]},{"content":"However, years that are divisible by 400 are leap years.","pos":[127,183]},{"content":"For example, the year 1900 was not a leap year, but the year 2000 was.","pos":[184,254]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[255,311]},{"content":"A leap month is an entire month that occurs only in a leap year.","pos":[318,382]},{"content":"The Gregorian calendar does not have any leap months.","pos":[383,436]}]}]},{"pos":[43829,43865],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[43926,43976],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[44035,44070],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[44129,44257],"content":"This method always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, unless overridden by a derived class.","needQuote":true,"needEscape":true,"source":"This method always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, unless overridden by a derived class."},{"pos":[44451,44690],"content":"<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,64],"source":"<code>era</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[71,147],"source":"       -or-       <code>year</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[154,231],"source":"       -or-       <code>month</code> is outside the range supported by the calendar."}]},{"pos":[45164,45238],"content":"Determines whether the specified year in the specified era is a leap year.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified year in the specified era is a leap year.","pos":[0,74]}]},{"pos":[45250,45561],"content":"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.","pos":[0,311],"nodes":[{"content":"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100.","pos":[0,126]},{"content":"However, years that are divisible by 400 are leap years.","pos":[127,183]},{"content":"For example, the year 1900 was not a leap year, but the year 2000 was.","pos":[184,254]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[255,311]}]}]},{"pos":[46192,46228],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[46287,46322],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[46381,46554],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified year is a leap year; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified year is a leap year; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[46747,46898],"content":"<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,64],"source":"<code>era</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[71,147],"source":"       -or-       <code>year</code> is outside the range supported by the calendar."}]},{"pos":[47331,47443],"content":"Gets the latest date and time supported by the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type.","needQuote":true,"needEscape":true,"source":"Gets the latest date and time supported by the <xref href=\"System.Globalization.GregorianCalendar\"></xref> type."},{"pos":[48071,48283],"content":"The latest date and time supported by the <xref href=\"System.Globalization.GregorianCalendar\"></xref> type, which is the last moment of December 31, 9999 C.E. and is equivalent to <xref:System.DateTime.MaxValue>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest date and time supported by the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type, which is the last moment of December 31, 9999 C.E.","pos":[0,158],"source":"The latest date and time supported by the <xref href=\"System.Globalization.GregorianCalendar\"></xref> type, which is the last moment of December 31, 9999 C.E."},{"content":"and is equivalent to &lt;xref:System.DateTime.MaxValue&gt;.","pos":[159,212],"source":" and is equivalent to <xref:System.DateTime.MaxValue>."}]},{"pos":[48805,48919],"content":"Gets the earliest date and time supported by the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type.","needQuote":true,"needEscape":true,"source":"Gets the earliest date and time supported by the <xref href=\"System.Globalization.GregorianCalendar\"></xref> type."},{"pos":[48931,49386],"content":"Although the value of the MinSupportedDateTime property is the first moment of January 1, 0001 C.E., the Gregorian calendar was not introduced until October 15, 1582, and its adoption throughout the European continent and worldwide was slow. Until they adopted the Gregorian calendar, most cultures in the European, American, and Australian continents used the Julian calendar, which is represented by the <xref:System.Globalization.JulianCalendar> class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Although the value of the MinSupportedDateTime property is the first moment of January 1, 0001 C.E., the Gregorian calendar was not introduced until October 15, 1582, and its adoption throughout the European continent and worldwide was slow. Until they adopted the Gregorian calendar, most cultures in the European, American, and Australian continents used the Julian calendar, which is represented by the <xref:System.Globalization.JulianCalendar> class.","pos":[0,455],"nodes":[{"content":"Although the value of the MinSupportedDateTime property is the first moment of January 1, 0001 C.E., the Gregorian calendar was not introduced until October 15, 1582, and its adoption throughout the European continent and worldwide was slow.","pos":[0,241]},{"content":"Until they adopted the Gregorian calendar, most cultures in the European, American, and Australian continents used the Julian calendar, which is represented by the &lt;xref:System.Globalization.JulianCalendar&gt; class.","pos":[242,455],"source":" Until they adopted the Gregorian calendar, most cultures in the European, American, and Australian continents used the Julian calendar, which is represented by the <xref:System.Globalization.JulianCalendar> class."}]}]},{"pos":[50000,50213],"content":"The earliest date and time supported by the <xref href=\"System.Globalization.GregorianCalendar\"></xref> type, which is the first moment of January 1, 0001 C.E. and is equivalent to <xref:System.DateTime.MinValue>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The earliest date and time supported by the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.GregorianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type, which is the first moment of January 1, 0001 C.E.","pos":[0,159],"source":"The earliest date and time supported by the <xref href=\"System.Globalization.GregorianCalendar\"></xref> type, which is the first moment of January 1, 0001 C.E."},{"content":"and is equivalent to &lt;xref:System.DateTime.MinValue&gt;.","pos":[160,213],"source":" and is equivalent to <xref:System.DateTime.MinValue>."}]},{"pos":[51040,51137],"content":"Returns a <xref:System.DateTime> that is set to the specified date and time in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.DateTime&gt; that is set to the specified date and time in the specified era.","pos":[0,97],"source":"Returns a <xref:System.DateTime> that is set to the specified date and time in the specified era."}]},{"pos":[51364,51400],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[51461,51511],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[51570,51618],"content":"An integer from 1 to 31 that represents the day.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 31 that represents the day.","pos":[0,48]}]},{"pos":[51678,51727],"content":"An integer from 0 to 23 that represents the hour.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 23 that represents the hour.","pos":[0,49]}]},{"pos":[51789,51840],"content":"An integer from 0 to 59 that represents the minute.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 59 that represents the minute.","pos":[0,51]}]},{"pos":[51902,51953],"content":"An integer from 0 to 59 that represents the second.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 59 that represents the second.","pos":[0,51]}]},{"pos":[52020,52077],"content":"An integer from 0 to 999 that represents the millisecond.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 999 that represents the millisecond.","pos":[0,57]}]},{"pos":[52136,52171],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[52231,52320],"content":"The <xref:System.DateTime> that is set to the specified date and time in the current era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; that is set to the specified date and time in the current era.","pos":[0,89],"source":"The <xref:System.DateTime> that is set to the specified date and time in the current era."}]},{"pos":[52513,53158],"content":"<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.       -or-       <code>day</code> is outside the range supported by the calendar.       -or-       <code>hour</code> is less than zero or greater than 23.       -or-       <code>minute</code> is less than zero or greater than 59.       -or-       <code>second</code> is less than zero or greater than 59.       -or-       <code>millisecond</code> is less than zero or greater than 999.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,64],"source":"<code>era</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[71,147],"source":"       -or-       <code>year</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[154,231],"source":"       -or-       <code>month</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;day&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[238,313],"source":"       -or-       <code>day</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;hour&lt;/code&gt;</ph> is less than zero or greater than 23.","pos":[320,386],"source":"       -or-       <code>hour</code> is less than zero or greater than 23."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;minute&lt;/code&gt;</ph> is less than zero or greater than 59.","pos":[393,461],"source":"       -or-       <code>minute</code> is less than zero or greater than 59."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;second&lt;/code&gt;</ph> is less than zero or greater than 59.","pos":[468,536],"source":"       -or-       <code>second</code> is less than zero or greater than 59."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;millisecond&lt;/code&gt;</ph> is less than zero or greater than 999.","pos":[543,617],"source":"       -or-       <code>millisecond</code> is less than zero or greater than 999."}]},{"pos":[53613,53784],"content":"Converts the specified year to a four-digit year by using the <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax*> property to determine the appropriate century.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts the specified year to a four-digit year by using the &lt;xref:System.Globalization.GregorianCalendar.TwoDigitYearMax*&gt; property to determine the appropriate century.","pos":[0,171],"source":"Converts the specified year to a four-digit year by using the <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax*> property to determine the appropriate century."}]},{"pos":[53797,54934],"content":"<xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> is the last year in the 100-year range that can be represented by a two-digit year. The century is determined by finding the sole occurrence of the two-digit `year` within that 100-year range. For example, if <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.       ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A&gt; is the last year in the 100-year range that can be represented by a two-digit year.","pos":[0,148],"source":"<xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> is the last year in the 100-year range that can be represented by a two-digit year."},{"content":"The century is determined by finding the sole occurrence of the two-digit <ph id=\"ph1\">`year`</ph> within that 100-year range.","pos":[149,257],"source":" The century is determined by finding the sole occurrence of the two-digit `year` within that 100-year range."},{"content":"For example, if &lt;xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A&gt; is set to 2029, the 100-year range is from 1930 to 2029.","pos":[258,395],"source":" For example, if <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> is set to 2029, the 100-year range is from 1930 to 2029."},{"content":"Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.","pos":[396,504]},{"content":"ToFourDigitYear supports either a two-digit year or a four-digit year.","pos":[511,581]},{"content":"Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the &lt;xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A&gt; value representing the appropriate century.","pos":[582,815],"source":" Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> value representing the appropriate century."},{"content":"If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value.","pos":[816,974]},{"content":"If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","pos":[975,1135]}]},{"pos":[55082,55152],"content":"A two-digit or four-digit integer that represents the year to convert.","needQuote":true,"needEscape":true,"nodes":[{"content":"A two-digit or four-digit integer that represents the year to convert.","pos":[0,70]}]},{"pos":[55209,55285],"content":"An integer that contains the four-digit representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">year</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer that contains the four-digit representation of <code>year</code>."},{"pos":[55482,55547],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code> is outside the range supported by the calendar."},{"pos":[55954,56043],"content":"Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.","pos":[0,89]}]},{"pos":[56056,56954],"content":"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.       The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.GregorianCalendar> class does not detect changes in the system settings automatically.       The application should set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.       The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.GregorianCalendar> class does not detect changes in the system settings automatically.       The application should set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.","pos":[0,894],"nodes":[{"content":"This property allows a 2-digit year to be properly translated to a 4-digit year.","pos":[0,80]},{"content":"For example, if this property is set to 2029, the 100-year range is from 1930 to 2029.","pos":[81,167]},{"content":"Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.","pos":[168,276]},{"content":"The initial value of this property is derived from the settings in the regional and language options portion of Control Panel.","pos":[283,409]},{"content":"However, that information can change during the life of the &lt;xref:System.AppDomain&gt;.","pos":[410,494],"source":" However, that information can change during the life of the <xref:System.AppDomain>."},{"content":"The &lt;xref:System.Globalization.GregorianCalendar&gt; class does not detect changes in the system settings automatically.","pos":[495,612],"source":" The <xref:System.Globalization.GregorianCalendar> class does not detect changes in the system settings automatically."},{"content":"The application should set this value to 99 to indicate that 2-digit years are to be taken literally.","pos":[619,720]},{"content":"For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99.","pos":[721,839]},{"content":"Therefore, a 2-digit value of 30 is interpreted as 30.","pos":[840,894]}]}]},{"pos":[57085,57161],"content":"The last year of a 100-year range that can be represented by a 2-digit year.","needQuote":true,"needEscape":true,"nodes":[{"content":"The last year of a 100-year range that can be represented by a 2-digit year.","pos":[0,76]}]},{"pos":[57359,57600],"content":"The value specified in a set operation is less than 99.       -or-       The value specified in a set operation is greater than <xref uid=\"langword_csharp_MaxSupportedDateTime.Year\" name=\"MaxSupportedDateTime.Year\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The value specified in a set operation is less than 99.","pos":[0,55]},{"content":"-or-       The value specified in a set operation is greater than <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_MaxSupportedDateTime.Year\" name=\"MaxSupportedDateTime.Year\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[62,231],"source":"       -or-       The value specified in a set operation is greater than <xref uid=\"langword_csharp_MaxSupportedDateTime.Year\" name=\"MaxSupportedDateTime.Year\" href=\"\"></xref>."}]},{"pos":[57712,57766],"content":"In a set operation, the current instance is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"In a set operation, the current instance is read-only.","pos":[0,54]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Globalization.GregorianCalendar\n  id: GregorianCalendar\n  children:\n  - System.Globalization.GregorianCalendar.#ctor\n  - System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)\n  - System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)\n  - System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)\n  - System.Globalization.GregorianCalendar.ADEra\n  - System.Globalization.GregorianCalendar.AlgorithmType\n  - System.Globalization.GregorianCalendar.CalendarType\n  - System.Globalization.GregorianCalendar.Eras\n  - System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  - System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  - System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  - System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  - System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  - System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  - System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.MaxSupportedDateTime\n  - System.Globalization.GregorianCalendar.MinSupportedDateTime\n  - System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)\n  - System.Globalization.GregorianCalendar.TwoDigitYearMax\n  langs:\n  - csharp\n  name: GregorianCalendar\n  nameWithType: GregorianCalendar\n  fullName: System.Globalization.GregorianCalendar\n  type: Class\n  summary: Represents the Gregorian calendar.\n  remarks: \"The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the GregorianCalendar class recognizes only the current era (A.D. or C.E.).  \\n  \\n> [!NOTE]\\n>  For information about using the GregorianCalendar class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md).  \\n  \\n A leap year in the Gregorian calendar is defined as a year that is evenly divisible by 4, unless it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.  \\n  \\n The Gregorian calendar has 12 months with 28 to 31 days each: January (31 days), February (28 or 29 days), March (31 days), April (30 days), May (31 days), June (30 days), July (31 days), August (31 days), September (30 days), October (31 days), November (30 days), and December (31 days). February has 29 days during leap years and 28 during common years.  \\n  \\n> [!IMPORTANT]\\n>  By default, all <xref:System.DateTime> and <xref:System.DateTimeOffset> values express dates and times in the Gregorian calendar.  \\n  \\n The Gregorian calendar was developed as a replacement for the Julian calendar (which is represented by the <xref:System.Globalization.JulianCalendar> class) and was first introduced in a small number of cultures on October 15, 1582. When working with historic dates that precede a culture's adoption of the Gregorian calendar, you should use the original calendar if it is available in the .NET Framework. For example, Denmark changed from the Julian calendar to the Gregorian calendar on February 19 (in the Julian calendar) or March 1 (in the Gregorian calendar) of 1700. In this case, for dates before the adoption of the Gregorian calendar, you should use the Julian calendar. However, note that no culture offers intrinsic support for the <xref:System.Globalization.JulianCalendar> class. You must use the <xref:System.Globalization.JulianCalendar> class as a standalone calendar. For more information, see .  \\n  \\n The following example illustrates that February 18, 1700 in the Julian calendar, which is the last day the Julian calendar was officially used in Denmark, is one day earlier than March 1, 1700 in the Gregorian calendar.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar.Class#1](~/add/codesnippet/csharp/t-system.globalization.g_0_1.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.g_0_1.vb)]  \\n  \\n Each <xref:System.Globalization.CultureInfo> supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application can set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property to a new <xref:System.Globalization.Calendar>.  \\n  \\n <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> ignores punctuation in abbreviated era names, only if the GregorianCalendar is selected in <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName> and the culture uses \\\"A.D.\\\" as the era name, that is, \\\"A.D.\\\" is equivalent to \\\"AD\\\".\"\n  example:\n  - \"The following code example shows that <xref:System.Globalization.DateTimeFormatInfo> ignores the punctuation in the era name, only if the calendar is Gregorian and the culture uses the era name \\\"A.D.\\\".  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar.GetEra#1](~/add/codesnippet/csharp/t-system.globalization.g_0_2.cs)]\\n [!code-cpp[System.Globalization.GregorianCalendar.GetEra#1](~/add/codesnippet/cpp/t-system.globalization.g_0_2.cpp)]\\n [!code-vb[System.Globalization.GregorianCalendar.GetEra#1](~/add/codesnippet/visualbasic/t-system.globalization.g_0_2.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class GregorianCalendar : System.Globalization.Calendar\n  inheritance:\n  - System.Globalization.Calendar\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.#ctor\n  id: '#ctor'\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GregorianCalendar()\n  nameWithType: GregorianCalendar.GregorianCalendar()\n  fullName: System.Globalization.GregorianCalendar.GregorianCalendar()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Initializes a new instance of the <xref href=\"System.Globalization.GregorianCalendar\"></xref> class using the default <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> value.\n  remarks: The default <xref:System.Globalization.GregorianCalendarTypes> value is <xref:System.Globalization.GregorianCalendarTypes>. If the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName> property of the <xref:System.Globalization.CultureInfo> is set to a <xref:System.Globalization.GregorianCalendar> that is created with this constructor, the dates and times are localized in the language associated with the <xref:System.Globalization.CultureInfo>.\n  example:\n  - \"The following code example prints a <xref:System.DateTime> using a <xref:System.Globalization.GregorianCalendar> that is localized.  \\n  \\n [!code-vb[System.Globalization.GregorianCalendarLocalized#1](~/add/codesnippet/visualbasic/m-system.globalization.g_2_1.vb)]\\n [!code-cs[System.Globalization.GregorianCalendarLocalized#1](~/add/codesnippet/csharp/m-system.globalization.g_2_1.cs)]\\n [!code-cpp[System.Globalization.GregorianCalendarLocalized#1](~/add/codesnippet/cpp/m-system.globalization.g_2_1.cpp)]\"\n  syntax:\n    content: public GregorianCalendar ();\n    parameters: []\n  overload: System.Globalization.GregorianCalendar.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)\n  id: '#ctor(System.Globalization.GregorianCalendarTypes)'\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GregorianCalendar(GregorianCalendarTypes)\n  nameWithType: GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)\n  fullName: System.Globalization.GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Initializes a new instance of the <xref href=\"System.Globalization.GregorianCalendar\"></xref> class using the specified <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> value.\n  syntax:\n    content: public GregorianCalendar (System.Globalization.GregorianCalendarTypes type);\n    parameters:\n    - id: type\n      type: System.Globalization.GregorianCalendarTypes\n      description: The <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> value that denotes which language version of the calendar to create.\n  overload: System.Globalization.GregorianCalendar.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>type</code> is not a member of the <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> enumeration.\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)\n  id: AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: AddMonths(DateTime,Int32)\n  nameWithType: GregorianCalendar.AddMonths(DateTime,Int32)\n  fullName: System.Globalization.GregorianCalendar.AddMonths(DateTime,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns a <xref:System.DateTime> that is the specified number of months away from the specified <xref:System.DateTime>.\n  remarks: \"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \\n  \\n For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.  \\n  \\n If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \\n  \\n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \\n  \\n [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.g_8_1.vb)]\\n [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.g_8_1.cs)]\"\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_8_2.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_8_2.vb)]\\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_8_2.cpp)]\"\n  syntax:\n    content: public override DateTime AddMonths (DateTime time, int months);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to which to add months.\n    - id: months\n      type: System.Int32\n      description: The number of months to add.\n    return:\n      type: System.DateTime\n      description: The <xref:System.DateTime> that results from adding the specified number of months to the specified <xref:System.DateTime>.\n  overload: System.Globalization.GregorianCalendar.AddMonths*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The resulting <xref:System.DateTime> is outside the supported range.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>months</code> is less than -120000.  \\n  \\n -or-  \\n  \\n <code>months</code> is greater than 120000.\"\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)\n  id: AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: AddYears(DateTime,Int32)\n  nameWithType: GregorianCalendar.AddYears(DateTime,Int32)\n  fullName: System.Globalization.GregorianCalendar.AddYears(DateTime,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns a <xref:System.DateTime> that is the specified number of years away from the specified <xref:System.DateTime>.\n  remarks: \"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \\n  \\n For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date will be the 28th day of February in the following year.  \\n  \\n If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \\n  \\n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \\n  \\n [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.g_4_1.vb)]\\n [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.g_4_1.cs)]\"\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_4_2.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_4_2.vb)]\\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_4_2.cpp)]\"\n  syntax:\n    content: public override DateTime AddYears (DateTime time, int years);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to which to add years.\n    - id: years\n      type: System.Int32\n      description: The number of years to add.\n    return:\n      type: System.DateTime\n      description: The <xref:System.DateTime> that results from adding the specified number of years to the specified <xref:System.DateTime>.\n  overload: System.Globalization.GregorianCalendar.AddYears*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The resulting <xref:System.DateTime> is outside the supported range.\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.ADEra\n  id: ADEra\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: ADEra\n  nameWithType: GregorianCalendar.ADEra\n  fullName: System.Globalization.GregorianCalendar.ADEra\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Represents the current era. This field is constant.\n  remarks: 'The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.). This field always returns 1.'\n  syntax:\n    content: public const int ADEra = 1;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.AlgorithmType\n  id: AlgorithmType\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: AlgorithmType\n  nameWithType: GregorianCalendar.AlgorithmType\n  fullName: System.Globalization.GregorianCalendar.AlgorithmType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.\n  remarks: ''\n  example:\n  - \"The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \\n  \\n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.g_2_1.cs)]\\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.g_2_1.vb)]\"\n  syntax:\n    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }\n    return:\n      type: System.Globalization.CalendarAlgorithmType\n      description: Always returns <xref href=\"System.Globalization.CalendarAlgorithmType\"></xref>.\n  overload: System.Globalization.GregorianCalendar.AlgorithmType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.CalendarType\n  id: CalendarType\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: CalendarType\n  nameWithType: GregorianCalendar.CalendarType\n  fullName: System.Globalization.GregorianCalendar.CalendarType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets or sets the <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> value that denotes the language version of the current <xref href=\"System.Globalization.GregorianCalendar\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to determine the GregorianCalendar language version supported by the culture.  \\n  \\n [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/add/codesnippet/visualbasic/p-system.globalization.g_3_1.vb)]\\n [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/add/codesnippet/cpp/p-system.globalization.g_3_1.cpp)]\\n [!code-cs[System.Globalization.GregorianCalendarTypes#1](~/add/codesnippet/csharp/p-system.globalization.g_3_1.cs)]\"\n  syntax:\n    content: public virtual System.Globalization.GregorianCalendarTypes CalendarType { get; set; }\n    return:\n      type: System.Globalization.GregorianCalendarTypes\n      description: A <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> value that denotes the language version of the current <xref href=\"System.Globalization.GregorianCalendar\"></xref>.\n  overload: System.Globalization.GregorianCalendar.CalendarType*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value specified in a set operation is not a member of the <xref href=\"System.Globalization.GregorianCalendarTypes\"></xref> enumeration.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: In a set operation, the current instance is read-only.\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.Eras\n  id: Eras\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: Eras\n  nameWithType: GregorianCalendar.Eras\n  fullName: System.Globalization.GregorianCalendar.Eras\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets the list of eras in the <xref href=\"System.Globalization.GregorianCalendar\"></xref>.\n  remarks: 'The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.). This property always returns an array with only one element.'\n  syntax:\n    content: public override int[] Eras { get; }\n    return:\n      type: System.Int32[]\n      description: An array of integers that represents the eras in the <xref href=\"System.Globalization.GregorianCalendar\"></xref>.\n  overload: System.Globalization.GregorianCalendar.Eras*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  id: GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GetDayOfMonth(DateTime)\n  nameWithType: GregorianCalendar.GetDayOfMonth(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetDayOfMonth(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the day of the month in the specified <xref:System.DateTime>.\n  remarks: ''\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_5_1.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_5_1.vb)]\\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_5_1.cpp)]\"\n  syntax:\n    content: public override int GetDayOfMonth (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 31 that represents the day of the month in <code>time</code>.\n  overload: System.Globalization.GregorianCalendar.GetDayOfMonth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  id: GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GetDayOfWeek(DateTime)\n  nameWithType: GregorianCalendar.GetDayOfWeek(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetDayOfWeek(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the day of the week in the specified <xref:System.DateTime>.\n  remarks: The <xref:System.DayOfWeek> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_0_1.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_0_1.vb)]\\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_0_1.cpp)]\"\n  syntax:\n    content: public override DayOfWeek GetDayOfWeek (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.DayOfWeek\n      description: A <xref:System.DayOfWeek> value that represents the day of the week in <code>time</code>.\n  overload: System.Globalization.GregorianCalendar.GetDayOfWeek*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  id: GetDayOfYear(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GetDayOfYear(DateTime)\n  nameWithType: GregorianCalendar.GetDayOfYear(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetDayOfYear(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the day of the year in the specified <xref:System.DateTime>.\n  remarks: The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.GregorianCalendar.GetDaysInYear%2A>.\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_3_1.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_3_1.vb)]\\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_3_1.cpp)]\"\n  syntax:\n    content: public override int GetDayOfYear (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 366 that represents the day of the year in <code>time</code>.\n  overload: System.Globalization.GregorianCalendar.GetDayOfYear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GetDaysInMonth(Int32,Int32,Int32)\n  nameWithType: GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the number of days in the specified month in the specified year in the specified era.\n  remarks: For example, this method returns 28 or 29 for February (`month` = 2), depending on whether `year` is a leap year.\n  example:\n  - \"The following code example calls GetDaysInMonth for the second month in each of five years in each era.  \\n  \\n [!code-cpp[System.Globalization.GregorianCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/5d22c0c3-8560-4ab0-878f-_1.cpp)]\\n [!code-cs[System.Globalization.GregorianCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/5d22c0c3-8560-4ab0-878f-_1.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/5d22c0c3-8560-4ab0-878f-_1.vb)]\"\n  syntax:\n    content: public override int GetDaysInMonth (int year, int month, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of days in the specified month in the specified year in the specified era.\n  overload: System.Globalization.GregorianCalendar.GetDaysInMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)\n  id: GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GetDaysInYear(Int32,Int32)\n  nameWithType: GregorianCalendar.GetDaysInYear(Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.GetDaysInYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the number of days in the specified year in the specified era.\n  remarks: For example, this method returns 365 or 366, depending on whether `year` is a leap year.\n  example:\n  - \"The following code example calls GetDaysInYear for five years in each era.  \\n  \\n [!code-cpp[System.Globalization.GregorianCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/a71f2fe7-84c1-4827-ac70-_1.cpp)]\\n [!code-cs[System.Globalization.GregorianCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/a71f2fe7-84c1-4827-ac70-_1.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/a71f2fe7-84c1-4827-ac70-_1.vb)]\"\n  syntax:\n    content: public override int GetDaysInYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of days in the specified year in the specified era.\n  overload: System.Globalization.GregorianCalendar.GetDaysInYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  id: GetEra(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GetEra(DateTime)\n  nameWithType: GregorianCalendar.GetEra(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetEra(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the era in the specified <xref:System.DateTime>.\n  remarks: 'The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.).'\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_6_1.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_6_1.vb)]\\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_6_1.cpp)]\"\n  syntax:\n    content: public override int GetEra (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer that represents the era in <code>time</code>.\n  overload: System.Globalization.GregorianCalendar.GetEra*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)\n  id: GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GetLeapMonth(Int32,Int32)\n  nameWithType: GregorianCalendar.GetLeapMonth(Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.GetLeapMonth(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the leap month for a specified year and era.\n  syntax:\n    content: public override int GetLeapMonth (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: A year.\n    - id: era\n      type: System.Int32\n      description: An era. Specify either <xref href=\"System.Globalization.GregorianCalendar.ADEra\"></xref> or <xref uid=\"langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]\" name=\"GregorianCalendar.Eras[Calendar.CurrentEra]\" href=\"\"></xref>.\n    return:\n      type: System.Int32\n      description: Always 0 because the Gregorian calendar does not recognize leap months.\n  overload: System.Globalization.GregorianCalendar.GetLeapMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is less than the Gregorian calendar year 1 or greater than the Gregorian calendar year 9999.  \\n  \\n -or-  \\n  \\n <code>era</code> is not <xref href=\\\"System.Globalization.GregorianCalendar.ADEra\\\"></xref> or <xref uid=\\\"langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]\\\" name=\\\"GregorianCalendar.Eras[Calendar.CurrentEra]\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  id: GetMonth(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GetMonth(DateTime)\n  nameWithType: GregorianCalendar.GetMonth(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetMonth(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the month in the specified <xref:System.DateTime>.\n  remarks: ''\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_9_1.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_9_1.vb)]\\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_9_1.cpp)]\"\n  syntax:\n    content: public override int GetMonth (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month in <code>time</code>.\n  overload: System.Globalization.GregorianCalendar.GetMonth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  id: GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GetMonthsInYear(Int32,Int32)\n  nameWithType: GregorianCalendar.GetMonthsInYear(Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.GetMonthsInYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the number of months in the specified year in the specified era.\n  remarks: ''\n  example:\n  - \"The following code example calls GetMonthsInYear for five years in each era.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/401ca427-6c60-47eb-91ba-_1.cs)]\\n [!code-cpp[System.Globalization.GregorianCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/401ca427-6c60-47eb-91ba-_1.cpp)]\\n [!code-vb[System.Globalization.GregorianCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/401ca427-6c60-47eb-91ba-_1.vb)]\"\n  syntax:\n    content: public override int GetMonthsInYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of months in the specified year in the specified era.\n  overload: System.Globalization.GregorianCalendar.GetMonthsInYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  id: GetYear(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: GetYear(DateTime)\n  nameWithType: GregorianCalendar.GetYear(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetYear(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the year in the specified <xref:System.DateTime>.\n  remarks: ''\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_7_1.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_7_1.vb)]\\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_7_1.cpp)]\"\n  syntax:\n    content: public override int GetYear (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer that represents the year in <code>time</code>.\n  overload: System.Globalization.GregorianCalendar.GetYear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: IsLeapDay(Int32,Int32,Int32,Int32)\n  nameWithType: GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified date in the specified era is a leap day.\n  remarks: \"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.  \\n  \\n A leap day is a day that occurs only in a leap year. In the Gregorian calendar, the 29th day of February is the only leap day.\"\n  example:\n  - \"The following code example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  \\n  \\n [!code-cpp[System.Globalization.GregorianCalendar.IsLeapDay#1](~/add/codesnippet/cpp/f70e7f67-7d6a-4484-9fbf-_1.cpp)]\\n [!code-vb[System.Globalization.GregorianCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/f70e7f67-7d6a-4484-9fbf-_1.vb)]\\n [!code-cs[System.Globalization.GregorianCalendar.IsLeapDay#1](~/add/codesnippet/csharp/f70e7f67-7d6a-4484-9fbf-_1.cs)]\"\n  syntax:\n    content: public override bool IsLeapDay (int year, int month, int day, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: day\n      type: System.Int32\n      description: An integer from 1 to 31 that represents the day.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified day is a leap day; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.GregorianCalendar.IsLeapDay*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>day</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: IsLeapMonth(Int32,Int32,Int32)\n  nameWithType: GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified month in the specified year in the specified era is a leap month.\n  remarks: \"A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.  \\n  \\n A leap month is an entire month that occurs only in a leap year. The Gregorian calendar does not have any leap months.\"\n  example:\n  - \"The following code example calls IsLeapMonth for all the months in five years in the current era.  \\n  \\n [!code-cpp[System.Globalization.GregorianCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/de7e90b6-6a1d-4ed0-8d65-_1.cpp)]\\n [!code-cs[System.Globalization.GregorianCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/de7e90b6-6a1d-4ed0-8d65-_1.cs)]\\n [!code-vb[System.Globalization.GregorianCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/de7e90b6-6a1d-4ed0-8d65-_1.vb)]\"\n  syntax:\n    content: public override bool IsLeapMonth (int year, int month, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: This method always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, unless overridden by a derived class.\n  overload: System.Globalization.GregorianCalendar.IsLeapMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)\n  id: IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: IsLeapYear(Int32,Int32)\n  nameWithType: GregorianCalendar.IsLeapYear(Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.IsLeapYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified year in the specified era is a leap year.\n  remarks: A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.\n  example:\n  - \"The following code example calls IsLeapYear for five years in each of the eras.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.g_1_1.cs)]\\n [!code-cpp[System.Globalization.GregorianCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.g_1_1.cpp)]\\n [!code-vb[System.Globalization.GregorianCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.g_1_1.vb)]\"\n  syntax:\n    content: public override bool IsLeapYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified year is a leap year; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.GregorianCalendar.IsLeapYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.MaxSupportedDateTime\n  id: MaxSupportedDateTime\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: MaxSupportedDateTime\n  nameWithType: GregorianCalendar.MaxSupportedDateTime\n  fullName: System.Globalization.GregorianCalendar.MaxSupportedDateTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets the latest date and time supported by the <xref href=\"System.Globalization.GregorianCalendar\"></xref> type.\n  remarks: ''\n  example:\n  - \"The following code example gets the minimum value and the maximum value of the calendar.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.g_1_1.cs)]\\n [!code-cpp[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.g_1_1.cpp)]\\n [!code-vb[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.g_1_1.vb)]\"\n  syntax:\n    content: public override DateTime MaxSupportedDateTime { get; }\n    return:\n      type: System.DateTime\n      description: The latest date and time supported by the <xref href=\"System.Globalization.GregorianCalendar\"></xref> type, which is the last moment of December 31, 9999 C.E. and is equivalent to <xref:System.DateTime.MaxValue>.\n  overload: System.Globalization.GregorianCalendar.MaxSupportedDateTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.MinSupportedDateTime\n  id: MinSupportedDateTime\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: MinSupportedDateTime\n  nameWithType: GregorianCalendar.MinSupportedDateTime\n  fullName: System.Globalization.GregorianCalendar.MinSupportedDateTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets the earliest date and time supported by the <xref href=\"System.Globalization.GregorianCalendar\"></xref> type.\n  remarks: Although the value of the MinSupportedDateTime property is the first moment of January 1, 0001 C.E., the Gregorian calendar was not introduced until October 15, 1582, and its adoption throughout the European continent and worldwide was slow. Until they adopted the Gregorian calendar, most cultures in the European, American, and Australian continents used the Julian calendar, which is represented by the <xref:System.Globalization.JulianCalendar> class.\n  example:\n  - \"The following code example gets the minimum value and the maximum value of the calendar.  \\n  \\n [!code-cs[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.g_0_1.cs)]\\n [!code-cpp[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.g_0_1.cpp)]\\n [!code-vb[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.g_0_1.vb)]\"\n  syntax:\n    content: public override DateTime MinSupportedDateTime { get; }\n    return:\n      type: System.DateTime\n      description: The earliest date and time supported by the <xref href=\"System.Globalization.GregorianCalendar\"></xref> type, which is the first moment of January 1, 0001 C.E. and is equivalent to <xref:System.DateTime.MinValue>.\n  overload: System.Globalization.GregorianCalendar.MinSupportedDateTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns a <xref:System.DateTime> that is set to the specified date and time in the specified era.\n  syntax:\n    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: day\n      type: System.Int32\n      description: An integer from 1 to 31 that represents the day.\n    - id: hour\n      type: System.Int32\n      description: An integer from 0 to 23 that represents the hour.\n    - id: minute\n      type: System.Int32\n      description: An integer from 0 to 59 that represents the minute.\n    - id: second\n      type: System.Int32\n      description: An integer from 0 to 59 that represents the second.\n    - id: millisecond\n      type: System.Int32\n      description: An integer from 0 to 999 that represents the millisecond.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.DateTime\n      description: The <xref:System.DateTime> that is set to the specified date and time in the current era.\n  overload: System.Globalization.GregorianCalendar.ToDateTime*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>day</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>hour</code> is less than zero or greater than 23.  \\n  \\n -or-  \\n  \\n <code>minute</code> is less than zero or greater than 59.  \\n  \\n -or-  \\n  \\n <code>second</code> is less than zero or greater than 59.  \\n  \\n -or-  \\n  \\n <code>millisecond</code> is less than zero or greater than 999.\"\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)\n  id: ToFourDigitYear(System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: ToFourDigitYear(Int32)\n  nameWithType: GregorianCalendar.ToFourDigitYear(Int32)\n  fullName: System.Globalization.GregorianCalendar.ToFourDigitYear(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Converts the specified year to a four-digit year by using the <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax*> property to determine the appropriate century.\n  remarks: \"<xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> is the last year in the 100-year range that can be represented by a two-digit year. The century is determined by finding the sole occurrence of the two-digit `year` within that 100-year range. For example, if <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.  \\n  \\n ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.\"\n  syntax:\n    content: public override int ToFourDigitYear (int year);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: A two-digit or four-digit integer that represents the year to convert.\n    return:\n      type: System.Int32\n      description: An integer that contains the four-digit representation of <code>year</code>.\n  overload: System.Globalization.GregorianCalendar.ToFourDigitYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code> is outside the range supported by the calendar.\n  platform:\n  - net462\n- uid: System.Globalization.GregorianCalendar.TwoDigitYearMax\n  id: TwoDigitYearMax\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  name: TwoDigitYearMax\n  nameWithType: GregorianCalendar.TwoDigitYearMax\n  fullName: System.Globalization.GregorianCalendar.TwoDigitYearMax\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.\n  remarks: \"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.  \\n  \\n The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.GregorianCalendar> class does not detect changes in the system settings automatically.  \\n  \\n The application should set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.\"\n  syntax:\n    content: public override int TwoDigitYearMax { get; set; }\n    return:\n      type: System.Int32\n      description: The last year of a 100-year range that can be represented by a 2-digit year.\n  overload: System.Globalization.GregorianCalendar.TwoDigitYearMax*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The value specified in a set operation is less than 99.  \\n  \\n -or-  \\n  \\n The value specified in a set operation is greater than <xref uid=\\\"langword_csharp_MaxSupportedDateTime.Year\\\" name=\\\"MaxSupportedDateTime.Year\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: In a set operation, the current instance is read-only.\n  platform:\n  - net462\nreferences:\n- uid: System.Globalization.Calendar\n  isExternal: false\n  name: System.Globalization.Calendar\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Globalization.GregorianCalendar.#ctor\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GregorianCalendar()\n  nameWithType: GregorianCalendar.GregorianCalendar()\n  fullName: System.Globalization.GregorianCalendar.GregorianCalendar()\n- uid: System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GregorianCalendar(GregorianCalendarTypes)\n  nameWithType: GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)\n  fullName: System.Globalization.GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)\n- uid: System.Globalization.GregorianCalendarTypes\n  parent: System.Globalization\n  isExternal: false\n  name: GregorianCalendarTypes\n  nameWithType: GregorianCalendarTypes\n  fullName: System.Globalization.GregorianCalendarTypes\n- uid: System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: AddMonths(DateTime,Int32)\n  nameWithType: GregorianCalendar.AddMonths(DateTime,Int32)\n  fullName: System.Globalization.GregorianCalendar.AddMonths(DateTime,Int32)\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: AddYears(DateTime,Int32)\n  nameWithType: GregorianCalendar.AddYears(DateTime,Int32)\n  fullName: System.Globalization.GregorianCalendar.AddYears(DateTime,Int32)\n- uid: System.Globalization.GregorianCalendar.ADEra\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: ADEra\n  nameWithType: GregorianCalendar.ADEra\n  fullName: System.Globalization.GregorianCalendar.ADEra\n- uid: System.Globalization.GregorianCalendar.AlgorithmType\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: AlgorithmType\n  nameWithType: GregorianCalendar.AlgorithmType\n  fullName: System.Globalization.GregorianCalendar.AlgorithmType\n- uid: System.Globalization.CalendarAlgorithmType\n  parent: System.Globalization\n  isExternal: false\n  name: CalendarAlgorithmType\n  nameWithType: CalendarAlgorithmType\n  fullName: System.Globalization.CalendarAlgorithmType\n- uid: System.Globalization.GregorianCalendar.CalendarType\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: CalendarType\n  nameWithType: GregorianCalendar.CalendarType\n  fullName: System.Globalization.GregorianCalendar.CalendarType\n- uid: System.Globalization.GregorianCalendar.Eras\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: Eras\n  nameWithType: GregorianCalendar.Eras\n  fullName: System.Globalization.GregorianCalendar.Eras\n- uid: System.Int32[]\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: Int32[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetDayOfMonth(DateTime)\n  nameWithType: GregorianCalendar.GetDayOfMonth(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetDayOfMonth(DateTime)\n- uid: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetDayOfWeek(DateTime)\n  nameWithType: GregorianCalendar.GetDayOfWeek(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetDayOfWeek(DateTime)\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: true\n  name: DayOfWeek\n  nameWithType: DayOfWeek\n  fullName: System.DayOfWeek\n- uid: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetDayOfYear(DateTime)\n  nameWithType: GregorianCalendar.GetDayOfYear(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetDayOfYear(DateTime)\n- uid: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetDaysInMonth(Int32,Int32,Int32)\n  nameWithType: GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)\n- uid: System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetDaysInYear(Int32,Int32)\n  nameWithType: GregorianCalendar.GetDaysInYear(Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.GetDaysInYear(Int32,Int32)\n- uid: System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetEra(DateTime)\n  nameWithType: GregorianCalendar.GetEra(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetEra(DateTime)\n- uid: System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetLeapMonth(Int32,Int32)\n  nameWithType: GregorianCalendar.GetLeapMonth(Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.GetLeapMonth(Int32,Int32)\n- uid: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetMonth(DateTime)\n  nameWithType: GregorianCalendar.GetMonth(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetMonth(DateTime)\n- uid: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetMonthsInYear(Int32,Int32)\n  nameWithType: GregorianCalendar.GetMonthsInYear(Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.GetMonthsInYear(Int32,Int32)\n- uid: System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetYear(DateTime)\n  nameWithType: GregorianCalendar.GetYear(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetYear(DateTime)\n- uid: System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: IsLeapDay(Int32,Int32,Int32,Int32)\n  nameWithType: GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: IsLeapMonth(Int32,Int32,Int32)\n  nameWithType: GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)\n- uid: System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: IsLeapYear(Int32,Int32)\n  nameWithType: GregorianCalendar.IsLeapYear(Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.IsLeapYear(Int32,Int32)\n- uid: System.Globalization.GregorianCalendar.MaxSupportedDateTime\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: MaxSupportedDateTime\n  nameWithType: GregorianCalendar.MaxSupportedDateTime\n  fullName: System.Globalization.GregorianCalendar.MaxSupportedDateTime\n- uid: System.Globalization.GregorianCalendar.MinSupportedDateTime\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: MinSupportedDateTime\n  nameWithType: GregorianCalendar.MinSupportedDateTime\n  fullName: System.Globalization.GregorianCalendar.MinSupportedDateTime\n- uid: System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n- uid: System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: ToFourDigitYear(Int32)\n  nameWithType: GregorianCalendar.ToFourDigitYear(Int32)\n  fullName: System.Globalization.GregorianCalendar.ToFourDigitYear(Int32)\n- uid: System.Globalization.GregorianCalendar.TwoDigitYearMax\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: TwoDigitYearMax\n  nameWithType: GregorianCalendar.TwoDigitYearMax\n  fullName: System.Globalization.GregorianCalendar.TwoDigitYearMax\n- uid: System.Globalization.GregorianCalendar.#ctor*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GregorianCalendar\n  nameWithType: GregorianCalendar.GregorianCalendar\n- uid: System.Globalization.GregorianCalendar.AddMonths*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: AddMonths\n  nameWithType: GregorianCalendar.AddMonths\n- uid: System.Globalization.GregorianCalendar.AddYears*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: AddYears\n  nameWithType: GregorianCalendar.AddYears\n- uid: System.Globalization.GregorianCalendar.AlgorithmType*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: AlgorithmType\n  nameWithType: GregorianCalendar.AlgorithmType\n- uid: System.Globalization.GregorianCalendar.CalendarType*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: CalendarType\n  nameWithType: GregorianCalendar.CalendarType\n- uid: System.Globalization.GregorianCalendar.Eras*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: Eras\n  nameWithType: GregorianCalendar.Eras\n- uid: System.Globalization.GregorianCalendar.GetDayOfMonth*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetDayOfMonth\n  nameWithType: GregorianCalendar.GetDayOfMonth\n- uid: System.Globalization.GregorianCalendar.GetDayOfWeek*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetDayOfWeek\n  nameWithType: GregorianCalendar.GetDayOfWeek\n- uid: System.Globalization.GregorianCalendar.GetDayOfYear*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetDayOfYear\n  nameWithType: GregorianCalendar.GetDayOfYear\n- uid: System.Globalization.GregorianCalendar.GetDaysInMonth*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetDaysInMonth\n  nameWithType: GregorianCalendar.GetDaysInMonth\n- uid: System.Globalization.GregorianCalendar.GetDaysInYear*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetDaysInYear\n  nameWithType: GregorianCalendar.GetDaysInYear\n- uid: System.Globalization.GregorianCalendar.GetEra*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetEra\n  nameWithType: GregorianCalendar.GetEra\n- uid: System.Globalization.GregorianCalendar.GetLeapMonth*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetLeapMonth\n  nameWithType: GregorianCalendar.GetLeapMonth\n- uid: System.Globalization.GregorianCalendar.GetMonth*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetMonth\n  nameWithType: GregorianCalendar.GetMonth\n- uid: System.Globalization.GregorianCalendar.GetMonthsInYear*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetMonthsInYear\n  nameWithType: GregorianCalendar.GetMonthsInYear\n- uid: System.Globalization.GregorianCalendar.GetYear*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: GetYear\n  nameWithType: GregorianCalendar.GetYear\n- uid: System.Globalization.GregorianCalendar.IsLeapDay*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: IsLeapDay\n  nameWithType: GregorianCalendar.IsLeapDay\n- uid: System.Globalization.GregorianCalendar.IsLeapMonth*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: IsLeapMonth\n  nameWithType: GregorianCalendar.IsLeapMonth\n- uid: System.Globalization.GregorianCalendar.IsLeapYear*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: IsLeapYear\n  nameWithType: GregorianCalendar.IsLeapYear\n- uid: System.Globalization.GregorianCalendar.MaxSupportedDateTime*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: MaxSupportedDateTime\n  nameWithType: GregorianCalendar.MaxSupportedDateTime\n- uid: System.Globalization.GregorianCalendar.MinSupportedDateTime*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: MinSupportedDateTime\n  nameWithType: GregorianCalendar.MinSupportedDateTime\n- uid: System.Globalization.GregorianCalendar.ToDateTime*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: ToDateTime\n  nameWithType: GregorianCalendar.ToDateTime\n- uid: System.Globalization.GregorianCalendar.ToFourDigitYear*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: ToFourDigitYear\n  nameWithType: GregorianCalendar.ToFourDigitYear\n- uid: System.Globalization.GregorianCalendar.TwoDigitYearMax*\n  parent: System.Globalization.GregorianCalendar\n  isExternal: false\n  name: TwoDigitYearMax\n  nameWithType: GregorianCalendar.TwoDigitYearMax\n"}