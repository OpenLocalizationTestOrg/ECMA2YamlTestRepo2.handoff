{"nodes":[{"pos":[3180,3192],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3969,3981],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5037,5049],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5147,5159],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5809,5821],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5875,5887],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6471,6483],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6535,6547],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7083,7095],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7649,7661],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8635,8647],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8755,8767],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9344,9356],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10402,10414],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11372,11384],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11492,11504],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12067,12079],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13339,13351],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13463,13475],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13583,13595],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15148,15160],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15277,15289],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15405,15417],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15525,15537],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16082,16094],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16655,16667],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17709,17721],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17801,17813],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19169,19181],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19280,19292],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19390,19402],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20389,20401],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20463,20475],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20529,20541],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21845,21857],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21969,21981],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22035,22047],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22155,22167],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22777,22789],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22840,22852],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24485,24497],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25110,25122],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26089,26101],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26209,26221],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27172,27184],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27292,27304],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27916,27928],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28582,28594],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28648,28660],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29202,29214],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29930,29942],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.IDeque`1\n  id: IDeque`1\n  children:\n  - Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)\n  - Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)\n  - Microsoft.VisualC.StlClr.IDeque`1.back\n  - Microsoft.VisualC.StlClr.IDeque`1.back_item\n  - Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  - Microsoft.VisualC.StlClr.IDeque`1.begin_bias\n  - Microsoft.VisualC.StlClr.IDeque`1.clear\n  - Microsoft.VisualC.StlClr.IDeque`1.empty\n  - Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  - Microsoft.VisualC.StlClr.IDeque`1.end_bias\n  - Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.IDeque`1.front\n  - Microsoft.VisualC.StlClr.IDeque`1.front_item\n  - Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)\n  - Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)\n  - Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)\n  - Microsoft.VisualC.StlClr.IDeque`1.pop_back\n  - Microsoft.VisualC.StlClr.IDeque`1.pop_front\n  - Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)\n  - Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)\n  - Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  - Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  - Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)\n  - Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IDeque`1.size\n  - Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque`1)\n  langs:\n  - csharp\n  name: IDeque<TValue>\n  nameWithType: IDeque<TValue>\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>\n  type: Interface\n  syntax:\n    content: 'public interface IDeque<TValue> : ICloneable, Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer<TValue>, System.Collections.ICollection'\n    typeParameters:\n    - id: TValue\n      description: To be added.\n  implements:\n  - Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer<TValue>\n  - System.Collections.ICollection\n  - System.ICloneable\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)\n  id: assign(System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: assign(IEnumerable)\n  nameWithType: IDeque<TValue>.assign(IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.assign(IEnumerable)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (System.Collections.IEnumerable _Right);\n    parameters:\n    - id: _Right\n      type: System.Collections.IEnumerable\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.assign*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IDeque<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);\n    parameters:\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: To be added.\n    - id: _Last\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.assign*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)\n  id: assign(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: assign(Int32,TValue)\n  nameWithType: IDeque<TValue>.assign(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.assign(Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (int _Count, TValue _Val);\n    parameters:\n    - id: _Count\n      type: System.Int32\n      description: To be added.\n    - id: _Val\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.assign*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)\n  id: at(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: at(Int32)\n  nameWithType: IDeque<TValue>.at(Int32)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.at(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue at (int _Pos);\n    parameters:\n    - id: _Pos\n      type: System.Int32\n      description: To be added.\n    return:\n      type: TValue@\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.at*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.back\n  id: back\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: back()\n  nameWithType: IDeque<TValue>.back()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.back()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue back ();\n    parameters: []\n    return:\n      type: TValue@\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.back*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.back_item\n  id: back_item\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: back_item\n  nameWithType: IDeque<TValue>.back_item\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.back_item\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue back_item { get; set; }\n    return:\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.back_item*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  id: begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: begin(ContainerRandomAccessIterator<TValue>)\n  nameWithType: IDeque<TValue>.begin(ContainerRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.begin(ContainerRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.begin*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.begin_bias\n  id: begin_bias\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: begin_bias()\n  nameWithType: IDeque<TValue>.begin_bias()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.begin_bias()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public int begin_bias ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.begin_bias*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.clear\n  id: clear\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: clear()\n  nameWithType: IDeque<TValue>.clear()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.clear()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void clear ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.IDeque`1.clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.empty\n  id: empty\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: empty()\n  nameWithType: IDeque<TValue>.empty()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.empty()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public bool empty ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.empty*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  id: end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: end(ContainerRandomAccessIterator<TValue>)\n  nameWithType: IDeque<TValue>.end(ContainerRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.end(ContainerRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.end*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.end_bias\n  id: end_bias\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: end_bias()\n  nameWithType: IDeque<TValue>.end_bias()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.end_bias()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public int end_bias ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.end_bias*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n  nameWithType: IDeque<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: To be added.\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.erase*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n  nameWithType: IDeque<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Last_iter);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: To be added.\n    - id: _First_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: To be added.\n    - id: _Last_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.erase*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.front\n  id: front\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: front()\n  nameWithType: IDeque<TValue>.front()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.front()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue front ();\n    parameters: []\n    return:\n      type: TValue@\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.front*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.front_item\n  id: front_item\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: front_item\n  nameWithType: IDeque<TValue>.front_item\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.front_item\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue front_item { get; set; }\n    return:\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.front_item*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: insert(ContainerRandomAccessIterator,IEnumerable)\n  nameWithType: IDeque<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where_iter, System.Collections.IEnumerable _Right);\n    parameters:\n    - id: _Where_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: To be added.\n    - id: _Right\n      type: System.Collections.IEnumerable\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IDeque<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: To be added.\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: To be added.\n    - id: _Last\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: insert(ContainerRandomAccessIterator,Int32,TValue)\n  nameWithType: IDeque<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where, int _Count, TValue _Val);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: To be added.\n    - id: _Count\n      type: System.Int32\n      description: To be added.\n    - id: _Val\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n  nameWithType: IDeque<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where, TValue _Val);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: To be added.\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: To be added.\n    - id: _Val\n      type: TValue\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: IDeque<TValue>.Item(Int32)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.Item(Int32)\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue this[int _Pos] { get; set; }\n    parameters:\n    - id: _Pos\n      type: System.Int32\n      description: To be added.\n    return:\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.pop_back\n  id: pop_back\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: pop_back()\n  nameWithType: IDeque<TValue>.pop_back()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.pop_back()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void pop_back ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.IDeque`1.pop_back*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.pop_front\n  id: pop_front\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: pop_front()\n  nameWithType: IDeque<TValue>.pop_front()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.pop_front()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void pop_front ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.IDeque`1.pop_front*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)\n  id: push_back(`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: push_back(TValue)\n  nameWithType: IDeque<TValue>.push_back(TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.push_back(TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void push_back (TValue _Val);\n    parameters:\n    - id: _Val\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.push_back*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)\n  id: push_front(`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: push_front(TValue)\n  nameWithType: IDeque<TValue>.push_front(TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.push_front(TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void push_front (TValue _Val);\n    parameters:\n    - id: _Val\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.push_front*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  id: rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: rbegin(ReverseRandomAccessIterator<TValue>)\n  nameWithType: IDeque<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.rbegin*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  id: rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: rend(ReverseRandomAccessIterator<TValue>)\n  nameWithType: IDeque<TValue>.rend(ReverseRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.rend(ReverseRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1\n      description: To be added.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.rend*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)\n  id: resize(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: resize(Int32)\n  nameWithType: IDeque<TValue>.resize(Int32)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.resize(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void resize (int _Newsize);\n    parameters:\n    - id: _Newsize\n      type: System.Int32\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.resize*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)\n  id: resize(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: resize(Int32,TValue)\n  nameWithType: IDeque<TValue>.resize(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.resize(Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void resize (int _Newsize, TValue _Val);\n    parameters:\n    - id: _Newsize\n      type: System.Int32\n      description: To be added.\n    - id: _Val\n      type: TValue\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.resize*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.size\n  id: size\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: size()\n  nameWithType: IDeque<TValue>.size()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.size()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public int size ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.size*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque`1)\n  id: swap(Microsoft.VisualC.StlClr.IDeque`1)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  langs:\n  - csharp\n  name: swap(IDeque<TValue>)\n  nameWithType: IDeque<TValue>.swap(IDeque<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.swap(IDeque<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void swap (Microsoft.VisualC.StlClr.IDeque<TValue> A_0);\n    parameters:\n    - id: A_0\n      type: Microsoft.VisualC.StlClr.IDeque`1\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.IDeque`1.swap*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: assign(IEnumerable)\n  nameWithType: IDeque<TValue>.assign(IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.assign(IEnumerable)\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n- uid: Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IDeque<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: assign(Int32,TValue)\n  nameWithType: IDeque<TValue>.assign(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.assign(Int32,TValue)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: TValue\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: at(Int32)\n  nameWithType: IDeque<TValue>.at(Int32)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.at(Int32)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.back\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: back()\n  nameWithType: IDeque<TValue>.back()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.back()\n- uid: Microsoft.VisualC.StlClr.IDeque`1.back_item\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: back_item\n  nameWithType: IDeque<TValue>.back_item\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.back_item\n- uid: Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: begin(ContainerRandomAccessIterator<TValue>)\n  nameWithType: IDeque<TValue>.begin(ContainerRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.begin(ContainerRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerRandomAccessIterator<TValue>\n  nameWithType: ContainerRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IDeque`1.begin_bias\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: begin_bias()\n  nameWithType: IDeque<TValue>.begin_bias()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.begin_bias()\n- uid: Microsoft.VisualC.StlClr.IDeque`1.clear\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: clear()\n  nameWithType: IDeque<TValue>.clear()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.clear()\n- uid: Microsoft.VisualC.StlClr.IDeque`1.empty\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: empty()\n  nameWithType: IDeque<TValue>.empty()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.empty()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: end(ContainerRandomAccessIterator<TValue>)\n  nameWithType: IDeque<TValue>.end(ContainerRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.end(ContainerRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.end_bias\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: end_bias()\n  nameWithType: IDeque<TValue>.end_bias()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.end_bias()\n- uid: Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n  nameWithType: IDeque<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerRandomAccessIterator\n  nameWithType: ContainerRandomAccessIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n- uid: Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n  nameWithType: IDeque<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.front\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: front()\n  nameWithType: IDeque<TValue>.front()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.front()\n- uid: Microsoft.VisualC.StlClr.IDeque`1.front_item\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: front_item\n  nameWithType: IDeque<TValue>.front_item\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.front_item\n- uid: Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: insert(ContainerRandomAccessIterator,IEnumerable)\n  nameWithType: IDeque<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IDeque<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: insert(ContainerRandomAccessIterator,Int32,TValue)\n  nameWithType: IDeque<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n  nameWithType: IDeque<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: IDeque<TValue>.Item(Int32)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.Item(Int32)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.pop_back\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: pop_back()\n  nameWithType: IDeque<TValue>.pop_back()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.pop_back()\n- uid: Microsoft.VisualC.StlClr.IDeque`1.pop_front\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: pop_front()\n  nameWithType: IDeque<TValue>.pop_front()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.pop_front()\n- uid: Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: push_back(TValue)\n  nameWithType: IDeque<TValue>.push_back(TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.push_back(TValue)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: push_front(TValue)\n  nameWithType: IDeque<TValue>.push_front(TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.push_front(TValue)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: rbegin(ReverseRandomAccessIterator<TValue>)\n  nameWithType: IDeque<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ReverseRandomAccessIterator<TValue>\n  nameWithType: ReverseRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: rend(ReverseRandomAccessIterator<TValue>)\n  nameWithType: IDeque<TValue>.rend(ReverseRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.rend(ReverseRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: resize(Int32)\n  nameWithType: IDeque<TValue>.resize(Int32)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.resize(Int32)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: resize(Int32,TValue)\n  nameWithType: IDeque<TValue>.resize(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.resize(Int32,TValue)\n- uid: Microsoft.VisualC.StlClr.IDeque`1.size\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: size()\n  nameWithType: IDeque<TValue>.size()\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.size()\n- uid: Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque`1)\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: swap(IDeque<TValue>)\n  nameWithType: IDeque<TValue>.swap(IDeque<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>.swap(IDeque<TValue>)\n- uid: Microsoft.VisualC.StlClr.IDeque`1\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: IDeque<TValue>\n  nameWithType: IDeque<TValue>\n  fullName: Microsoft.VisualC.StlClr.IDeque<TValue>\n- uid: Microsoft.VisualC.StlClr.IDeque`1.assign*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: assign\n  nameWithType: IDeque<TValue>.assign\n- uid: Microsoft.VisualC.StlClr.IDeque`1.at*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: at\n  nameWithType: IDeque<TValue>.at\n- uid: Microsoft.VisualC.StlClr.IDeque`1.back*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: back\n  nameWithType: IDeque<TValue>.back\n- uid: Microsoft.VisualC.StlClr.IDeque`1.back_item*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: back_item\n  nameWithType: IDeque<TValue>.back_item\n- uid: Microsoft.VisualC.StlClr.IDeque`1.begin*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: begin\n  nameWithType: IDeque<TValue>.begin\n- uid: Microsoft.VisualC.StlClr.IDeque`1.begin_bias*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: begin_bias\n  nameWithType: IDeque<TValue>.begin_bias\n- uid: Microsoft.VisualC.StlClr.IDeque`1.clear*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: clear\n  nameWithType: IDeque<TValue>.clear\n- uid: Microsoft.VisualC.StlClr.IDeque`1.empty*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: empty\n  nameWithType: IDeque<TValue>.empty\n- uid: Microsoft.VisualC.StlClr.IDeque`1.end*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: end\n  nameWithType: IDeque<TValue>.end\n- uid: Microsoft.VisualC.StlClr.IDeque`1.end_bias*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: end_bias\n  nameWithType: IDeque<TValue>.end_bias\n- uid: Microsoft.VisualC.StlClr.IDeque`1.erase*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: erase\n  nameWithType: IDeque<TValue>.erase\n- uid: Microsoft.VisualC.StlClr.IDeque`1.front*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: front\n  nameWithType: IDeque<TValue>.front\n- uid: Microsoft.VisualC.StlClr.IDeque`1.front_item*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: front_item\n  nameWithType: IDeque<TValue>.front_item\n- uid: Microsoft.VisualC.StlClr.IDeque`1.insert*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: insert\n  nameWithType: IDeque<TValue>.insert\n- uid: Microsoft.VisualC.StlClr.IDeque`1.Item*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: Item\n  nameWithType: IDeque<TValue>.Item\n- uid: Microsoft.VisualC.StlClr.IDeque`1.pop_back*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: pop_back\n  nameWithType: IDeque<TValue>.pop_back\n- uid: Microsoft.VisualC.StlClr.IDeque`1.pop_front*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: pop_front\n  nameWithType: IDeque<TValue>.pop_front\n- uid: Microsoft.VisualC.StlClr.IDeque`1.push_back*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: push_back\n  nameWithType: IDeque<TValue>.push_back\n- uid: Microsoft.VisualC.StlClr.IDeque`1.push_front*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: push_front\n  nameWithType: IDeque<TValue>.push_front\n- uid: Microsoft.VisualC.StlClr.IDeque`1.rbegin*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: rbegin\n  nameWithType: IDeque<TValue>.rbegin\n- uid: Microsoft.VisualC.StlClr.IDeque`1.rend*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: rend\n  nameWithType: IDeque<TValue>.rend\n- uid: Microsoft.VisualC.StlClr.IDeque`1.resize*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: resize\n  nameWithType: IDeque<TValue>.resize\n- uid: Microsoft.VisualC.StlClr.IDeque`1.size*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: size\n  nameWithType: IDeque<TValue>.size\n- uid: Microsoft.VisualC.StlClr.IDeque`1.swap*\n  parent: Microsoft.VisualC.StlClr.IDeque`1\n  isExternal: false\n  name: swap\n  nameWithType: IDeque<TValue>.swap\n"}