{"nodes":[{"pos":[811,1044],"content":"Represents a build request that has been submitted to the build manager for processing. The methods of this class may be used to execute synchronous or asynchronous build requests and to provide access to the results upon completion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a build request that has been submitted to the build manager for processing. The methods of this class may be used to execute synchronous or asynchronous build requests and to provide access to the results upon completion.","pos":[0,233],"nodes":[{"content":"Represents a build request that has been submitted to the build manager for processing.","pos":[0,87]},{"content":"The methods of this class may be used to execute synchronous or asynchronous build requests and to provide access to the results upon completion.","pos":[88,233]}]}]},{"pos":[1056,1082],"content":"This class is thread-safe.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This class is thread-safe.","pos":[0,26]}]},{"pos":[1618,1739],"content":"Gets or sets the asynchronous context provided to <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*>, if any.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the asynchronous context provided to &lt;xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*&gt;, if any.","pos":[0,121],"source":"Gets or sets the asynchronous context provided to <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*>, if any."}]},{"pos":[1856,2004],"content":"Returns the asynchronous context provided to <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*>. Returns null if no context is provided.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the asynchronous context provided to <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*>. Returns null if no context is provided.","pos":[0,148],"nodes":[{"content":"Returns the asynchronous context provided to &lt;xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*&gt;.","pos":[0,108],"source":"Returns the asynchronous context provided to <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*>."},{"content":"Returns null if no context is provided.","pos":[109,148]}]}]},{"pos":[2500,2572],"content":"Gets or sets the build manager this build submission is associated with.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the build manager this build submission is associated with.","pos":[0,72]}]},{"pos":[2746,2813],"content":"Returns the build manager this build submission is associated with.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the build manager this build submission is associated with.","pos":[0,67]}]},{"pos":[3304,3341],"content":"Gets or sets the result of the build.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the result of the build.","pos":[0,37]}]},{"pos":[3353,3459],"content":"The result is not valid until <xref:Microsoft.Build.Execution.BuildSubmission.WaitHandle%2A> is signalled.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The result is not valid until &lt;xref:Microsoft.Build.Execution.BuildSubmission.WaitHandle%2A&gt; is signalled.","pos":[0,106],"source":"The result is not valid until <xref:Microsoft.Build.Execution.BuildSubmission.WaitHandle%2A> is signalled."}]},{"pos":[3635,3667],"content":"Returns the result of the build.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the result of the build.","pos":[0,32]}]},{"pos":[4141,4216],"content":"Starts a build request synchronously and waits until results are available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a build request synchronously and waits until results are available.","pos":[0,75]}]},{"pos":[4397,4423],"content":"Returns the build request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the build request.","pos":[0,26]}]},{"pos":[4611,4671],"content":"The request has already been started or is already complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"The request has already been started or is already complete.","pos":[0,60]}]},{"pos":[5346,5456],"content":"Starts a build request asynchronously and within the given context. Immediately returns control to the caller.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a build request asynchronously and within the given context. Immediately returns control to the caller.","pos":[0,110],"nodes":[{"content":"Starts a build request asynchronously and within the given context.","pos":[0,67]},{"content":"Immediately returns control to the caller.","pos":[68,110]}]}]},{"pos":[5715,5781],"content":"The callback method to call when the build submission is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"The callback method to call when the build submission is complete.","pos":[0,66]}]},{"pos":[5845,5894],"content":"The context in which the build submission occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"The context in which the build submission occurs.","pos":[0,49]}]},{"pos":[6087,6147],"content":"The request has already been started or is already complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"The request has already been started or is already complete.","pos":[0,60]}]},{"pos":[6553,6606],"content":"Determines whether this build submission is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether this build submission is complete.","pos":[0,53]}]},{"pos":[6721,6788],"content":"Returns true if this build submission is complete; false otherwise.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns true if this build submission is complete; false otherwise.","pos":[0,67]}]},{"pos":[7283,7345],"content":"Gets or sets an ID uniquely identifying this build submission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an ID uniquely identifying this build submission.","pos":[0,62]}]},{"pos":[7357,7461],"content":"This ID is used to distinguish this build submission from other build submissions within the same build.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This ID is used to distinguish this build submission from other build submissions within the same build.","pos":[0,104]}]},{"pos":[7574,7631],"content":"Returns an ID uniquely identifying this build submission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an ID uniquely identifying this build submission.","pos":[0,57]}]},{"pos":[8117,8216],"content":"Gets a <xref:System.Threading.WaitHandle> object that will be signalled when the build is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Threading.WaitHandle&gt; object that will be signalled when the build is complete.","pos":[0,99],"source":"Gets a <xref:System.Threading.WaitHandle> object that will be signalled when the build is complete."}]},{"pos":[8366,8553],"content":"Returns null until &lt;xref:Microsoft.Build.Execution.BuildSubmission.Execute<bpt id=\"p1\">*</bpt>&gt; or &lt;xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync<ept id=\"p1\">*</ept>&gt; returns, then returns the WaitHandle object.","needQuote":true,"needEscape":true,"source":"Returns null until <xref:Microsoft.Build.Execution.BuildSubmission.Execute*> or <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*> returns, then returns the WaitHandle object."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Build.Execution.BuildSubmission\n  id: BuildSubmission\n  children:\n  - Microsoft.Build.Execution.BuildSubmission.AsyncContext\n  - Microsoft.Build.Execution.BuildSubmission.BuildManager\n  - Microsoft.Build.Execution.BuildSubmission.BuildResult\n  - Microsoft.Build.Execution.BuildSubmission.Execute\n  - Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)\n  - Microsoft.Build.Execution.BuildSubmission.IsCompleted\n  - Microsoft.Build.Execution.BuildSubmission.SubmissionId\n  - Microsoft.Build.Execution.BuildSubmission.WaitHandle\n  langs:\n  - csharp\n  name: BuildSubmission\n  nameWithType: BuildSubmission\n  fullName: Microsoft.Build.Execution.BuildSubmission\n  type: Class\n  summary: Represents a build request that has been submitted to the build manager for processing. The methods of this class may be used to execute synchronous or asynchronous build requests and to provide access to the results upon completion.\n  remarks: This class is thread-safe.\n  syntax:\n    content: public class BuildSubmission\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildSubmission.AsyncContext\n  id: AsyncContext\n  parent: Microsoft.Build.Execution.BuildSubmission\n  langs:\n  - csharp\n  name: AsyncContext\n  nameWithType: BuildSubmission.AsyncContext\n  fullName: Microsoft.Build.Execution.BuildSubmission.AsyncContext\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the asynchronous context provided to <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*>, if any.\n  syntax:\n    content: public object AsyncContext { get; }\n    return:\n      type: System.Object\n      description: Returns the asynchronous context provided to <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*>. Returns null if no context is provided.\n  overload: Microsoft.Build.Execution.BuildSubmission.AsyncContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildSubmission.BuildManager\n  id: BuildManager\n  parent: Microsoft.Build.Execution.BuildSubmission\n  langs:\n  - csharp\n  name: BuildManager\n  nameWithType: BuildSubmission.BuildManager\n  fullName: Microsoft.Build.Execution.BuildSubmission.BuildManager\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the build manager this build submission is associated with.\n  syntax:\n    content: public Microsoft.Build.Execution.BuildManager BuildManager { get; }\n    return:\n      type: Microsoft.Build.Execution.BuildManager\n      description: Returns the build manager this build submission is associated with.\n  overload: Microsoft.Build.Execution.BuildSubmission.BuildManager*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildSubmission.BuildResult\n  id: BuildResult\n  parent: Microsoft.Build.Execution.BuildSubmission\n  langs:\n  - csharp\n  name: BuildResult\n  nameWithType: BuildSubmission.BuildResult\n  fullName: Microsoft.Build.Execution.BuildSubmission.BuildResult\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the result of the build.\n  remarks: The result is not valid until <xref:Microsoft.Build.Execution.BuildSubmission.WaitHandle%2A> is signalled.\n  syntax:\n    content: public Microsoft.Build.Execution.BuildResult BuildResult { get; set; }\n    return:\n      type: Microsoft.Build.Execution.BuildResult\n      description: Returns the result of the build.\n  overload: Microsoft.Build.Execution.BuildSubmission.BuildResult*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildSubmission.Execute\n  id: Execute\n  parent: Microsoft.Build.Execution.BuildSubmission\n  langs:\n  - csharp\n  name: Execute()\n  nameWithType: BuildSubmission.Execute()\n  fullName: Microsoft.Build.Execution.BuildSubmission.Execute()\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Starts a build request synchronously and waits until results are available.\n  syntax:\n    content: public Microsoft.Build.Execution.BuildResult Execute ();\n    parameters: []\n    return:\n      type: Microsoft.Build.Execution.BuildResult\n      description: Returns the build request.\n  overload: Microsoft.Build.Execution.BuildSubmission.Execute*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request has already been started or is already complete.\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)\n  id: ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)\n  parent: Microsoft.Build.Execution.BuildSubmission\n  langs:\n  - csharp\n  name: ExecuteAsync(BuildSubmissionCompleteCallback,Object)\n  nameWithType: BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback,Object)\n  fullName: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback,Object)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Starts a build request asynchronously and within the given context. Immediately returns control to the caller.\n  syntax:\n    content: public void ExecuteAsync (Microsoft.Build.Execution.BuildSubmissionCompleteCallback callback, object context);\n    parameters:\n    - id: callback\n      type: Microsoft.Build.Execution.BuildSubmissionCompleteCallback\n      description: The callback method to call when the build submission is complete.\n    - id: context\n      type: System.Object\n      description: The context in which the build submission occurs.\n  overload: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request has already been started or is already complete.\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildSubmission.IsCompleted\n  id: IsCompleted\n  parent: Microsoft.Build.Execution.BuildSubmission\n  langs:\n  - csharp\n  name: IsCompleted\n  nameWithType: BuildSubmission.IsCompleted\n  fullName: Microsoft.Build.Execution.BuildSubmission.IsCompleted\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Determines whether this build submission is complete.\n  syntax:\n    content: public bool IsCompleted { get; }\n    return:\n      type: System.Boolean\n      description: Returns true if this build submission is complete; false otherwise.\n  overload: Microsoft.Build.Execution.BuildSubmission.IsCompleted*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildSubmission.SubmissionId\n  id: SubmissionId\n  parent: Microsoft.Build.Execution.BuildSubmission\n  langs:\n  - csharp\n  name: SubmissionId\n  nameWithType: BuildSubmission.SubmissionId\n  fullName: Microsoft.Build.Execution.BuildSubmission.SubmissionId\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets an ID uniquely identifying this build submission.\n  remarks: This ID is used to distinguish this build submission from other build submissions within the same build.\n  syntax:\n    content: public int SubmissionId { get; }\n    return:\n      type: System.Int32\n      description: Returns an ID uniquely identifying this build submission.\n  overload: Microsoft.Build.Execution.BuildSubmission.SubmissionId*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildSubmission.WaitHandle\n  id: WaitHandle\n  parent: Microsoft.Build.Execution.BuildSubmission\n  langs:\n  - csharp\n  name: WaitHandle\n  nameWithType: BuildSubmission.WaitHandle\n  fullName: Microsoft.Build.Execution.BuildSubmission.WaitHandle\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets a <xref:System.Threading.WaitHandle> object that will be signalled when the build is complete.\n  syntax:\n    content: public System.Threading.WaitHandle WaitHandle { get; }\n    return:\n      type: System.Threading.WaitHandle\n      description: Returns null until <xref:Microsoft.Build.Execution.BuildSubmission.Execute*> or <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*> returns, then returns the WaitHandle object.\n  overload: Microsoft.Build.Execution.BuildSubmission.WaitHandle*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: Microsoft.Build.Execution.BuildSubmission.AsyncContext\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: AsyncContext\n  nameWithType: BuildSubmission.AsyncContext\n  fullName: Microsoft.Build.Execution.BuildSubmission.AsyncContext\n- uid: Microsoft.Build.Execution.BuildSubmission.BuildManager\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: BuildManager\n  nameWithType: BuildSubmission.BuildManager\n  fullName: Microsoft.Build.Execution.BuildSubmission.BuildManager\n- uid: Microsoft.Build.Execution.BuildManager\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: BuildManager\n  nameWithType: BuildManager\n  fullName: Microsoft.Build.Execution.BuildManager\n- uid: Microsoft.Build.Execution.BuildSubmission.BuildResult\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: BuildResult\n  nameWithType: BuildSubmission.BuildResult\n  fullName: Microsoft.Build.Execution.BuildSubmission.BuildResult\n- uid: Microsoft.Build.Execution.BuildResult\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: BuildResult\n  nameWithType: BuildResult\n  fullName: Microsoft.Build.Execution.BuildResult\n- uid: Microsoft.Build.Execution.BuildSubmission.Execute\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: Execute()\n  nameWithType: BuildSubmission.Execute()\n  fullName: Microsoft.Build.Execution.BuildSubmission.Execute()\n- uid: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: ExecuteAsync(BuildSubmissionCompleteCallback,Object)\n  nameWithType: BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback,Object)\n  fullName: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback,Object)\n- uid: Microsoft.Build.Execution.BuildSubmissionCompleteCallback\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: BuildSubmissionCompleteCallback\n  nameWithType: BuildSubmissionCompleteCallback\n  fullName: Microsoft.Build.Execution.BuildSubmissionCompleteCallback\n- uid: Microsoft.Build.Execution.BuildSubmission.IsCompleted\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: IsCompleted\n  nameWithType: BuildSubmission.IsCompleted\n  fullName: Microsoft.Build.Execution.BuildSubmission.IsCompleted\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Build.Execution.BuildSubmission.SubmissionId\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: SubmissionId\n  nameWithType: BuildSubmission.SubmissionId\n  fullName: Microsoft.Build.Execution.BuildSubmission.SubmissionId\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.Build.Execution.BuildSubmission.WaitHandle\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: WaitHandle\n  nameWithType: BuildSubmission.WaitHandle\n  fullName: Microsoft.Build.Execution.BuildSubmission.WaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: true\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: Microsoft.Build.Execution.BuildSubmission.AsyncContext*\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: AsyncContext\n  nameWithType: BuildSubmission.AsyncContext\n- uid: Microsoft.Build.Execution.BuildSubmission.BuildManager*\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: BuildManager\n  nameWithType: BuildSubmission.BuildManager\n- uid: Microsoft.Build.Execution.BuildSubmission.BuildResult*\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: BuildResult\n  nameWithType: BuildSubmission.BuildResult\n- uid: Microsoft.Build.Execution.BuildSubmission.Execute*\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: Execute\n  nameWithType: BuildSubmission.Execute\n- uid: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: ExecuteAsync\n  nameWithType: BuildSubmission.ExecuteAsync\n- uid: Microsoft.Build.Execution.BuildSubmission.IsCompleted*\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: IsCompleted\n  nameWithType: BuildSubmission.IsCompleted\n- uid: Microsoft.Build.Execution.BuildSubmission.SubmissionId*\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: SubmissionId\n  nameWithType: BuildSubmission.SubmissionId\n- uid: Microsoft.Build.Execution.BuildSubmission.WaitHandle*\n  parent: Microsoft.Build.Execution.BuildSubmission\n  isExternal: false\n  name: WaitHandle\n  nameWithType: BuildSubmission.WaitHandle\n"}