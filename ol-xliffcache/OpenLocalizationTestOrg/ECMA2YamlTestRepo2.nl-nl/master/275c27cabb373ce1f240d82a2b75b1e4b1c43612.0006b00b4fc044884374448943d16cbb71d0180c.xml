{"nodes":[{"pos":[2154,2166],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3937,3949],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4033,4045],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4975,4987],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5071,5083],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5169,5181],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5782,5794],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6539,6551],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6629,6641],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7385,7397],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7476,7488],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8402,8414],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8481,8493],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8584,8596],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8705,8717],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9353,9365],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9443,9455],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10217,10229],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10307,10319],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10839,10851],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11479,11491],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12319,12331],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12422,12434],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12512,12524],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13376,13388],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13479,13491],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13600,13612],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14492,14504],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14595,14607],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14696,14708],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15586,15598],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15660,15672],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15763,15775],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15853,15865],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16691,16703],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17545,17557],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17648,17660],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17738,17750],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18484,18496],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18574,18586],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19340,19352],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19430,19442],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20257,20269],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20360,20372],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20450,20462],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Objects.ObjectQuery`1\n  id: ObjectQuery`1\n  children:\n  - System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)\n  - System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)\n  - System.Data.Objects.ObjectQuery`1.Distinct\n  - System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery`1)\n  - System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)\n  - System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])\n  - System.Data.Objects.ObjectQuery`1.Include(System.String)\n  - System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery`1)\n  - System.Data.Objects.ObjectQuery`1.Name\n  - System.Data.Objects.ObjectQuery`1.OfType``1\n  - System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])\n  - System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])\n  - System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])\n  - System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])\n  - System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  - System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])\n  - System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery`1)\n  - System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery`1)\n  - System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])\n  langs:\n  - csharp\n  name: ObjectQuery<T>\n  nameWithType: ObjectQuery<T>\n  fullName: System.Data.Objects.ObjectQuery<T>\n  type: Class\n  syntax:\n    content: 'public class ObjectQuery<T> : System.Data.Objects.ObjectQuery, System.Collections.Generic.IEnumerable<T>, System.ComponentModel.IListSource, System.Linq.IOrderedQueryable<T>, System.Linq.IQueryable<T>'\n    typeParameters:\n    - id: T\n      description: To be added.\n  inheritance:\n  - System.Object\n  - System.Data.Objects.ObjectQuery\n  implements:\n  - System.Collections.Generic.IEnumerable<T>\n  - System.ComponentModel.IListSource\n  - System.Linq.IOrderedQueryable<T>\n  - System.Linq.IQueryable<T>\n  inheritedMembers:\n  - System.Data.Objects.ObjectQuery.CommandText\n  - System.Data.Objects.ObjectQuery.Context\n  - System.Data.Objects.ObjectQuery.EnablePlanCaching\n  - System.Data.Objects.ObjectQuery.GetResultType\n  - System.Data.Objects.ObjectQuery.MergeOption\n  - System.Data.Objects.ObjectQuery.Parameters\n  - System.Data.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator\n  - System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection\n  - System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList\n  - System.Data.Objects.ObjectQuery.System#Linq#IQueryable#ElementType\n  - System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Expression\n  - System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Provider\n  - System.Data.Objects.ObjectQuery.ToTraceString\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)\n  id: '#ctor(System.String,System.Data.Objects.ObjectContext)'\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: ObjectQuery(String,ObjectContext)\n  nameWithType: ObjectQuery<T>.ObjectQuery(String,ObjectContext)\n  fullName: System.Data.Objects.ObjectQuery<T>.ObjectQuery(String,ObjectContext)\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context);\n    parameters:\n    - id: commandText\n      type: System.String\n      description: To be added.\n    - id: context\n      type: System.Data.Objects.ObjectContext\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)\n  id: '#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)'\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: ObjectQuery(String,ObjectContext,MergeOption)\n  nameWithType: ObjectQuery<T>.ObjectQuery(String,ObjectContext,MergeOption)\n  fullName: System.Data.Objects.ObjectQuery<T>.ObjectQuery(String,ObjectContext,MergeOption)\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context, System.Data.Objects.MergeOption mergeOption);\n    parameters:\n    - id: commandText\n      type: System.String\n      description: To be added.\n    - id: context\n      type: System.Data.Objects.ObjectContext\n      description: To be added.\n    - id: mergeOption\n      type: System.Data.Objects.MergeOption\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.Distinct\n  id: Distinct\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: Distinct()\n  nameWithType: ObjectQuery<T>.Distinct()\n  fullName: System.Data.Objects.ObjectQuery<T>.Distinct()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<T> Distinct ();\n    parameters: []\n    return:\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.Distinct*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery`1)\n  id: Except(System.Data.Objects.ObjectQuery`1)\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: Except(ObjectQuery<T>)\n  nameWithType: ObjectQuery<T>.Except(ObjectQuery<T>)\n  fullName: System.Data.Objects.ObjectQuery<T>.Except(ObjectQuery<T>)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<T> Except (System.Data.Objects.ObjectQuery<T> query);\n    parameters:\n    - id: query\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.Except*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)\n  id: Execute(System.Data.Objects.MergeOption)\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: Execute(MergeOption)\n  nameWithType: ObjectQuery<T>.Execute(MergeOption)\n  fullName: System.Data.Objects.ObjectQuery<T>.Execute(MergeOption)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectResult<T> Execute (System.Data.Objects.MergeOption mergeOption);\n    parameters:\n    - id: mergeOption\n      type: System.Data.Objects.MergeOption\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectResult`1\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])\n  id: GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: GroupBy(String,String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.GroupBy(String,String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.GroupBy(String,String,ObjectParameter[])\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<System.Data.Common.DbDataRecord> GroupBy (string keys, string projection, System.Data.Objects.ObjectParameter[] parameters);\n    parameters:\n    - id: keys\n      type: System.String\n      description: To be added.\n    - id: projection\n      type: System.String\n      description: To be added.\n    - id: parameters\n      type: System.Data.Objects.ObjectParameter[]\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery{System.Data.Common.DbDataRecord}\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.GroupBy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.Include(System.String)\n  id: Include(System.String)\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: Include(String)\n  nameWithType: ObjectQuery<T>.Include(String)\n  fullName: System.Data.Objects.ObjectQuery<T>.Include(String)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<T> Include (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.Include*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery`1)\n  id: Intersect(System.Data.Objects.ObjectQuery`1)\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: Intersect(ObjectQuery<T>)\n  nameWithType: ObjectQuery<T>.Intersect(ObjectQuery<T>)\n  fullName: System.Data.Objects.ObjectQuery<T>.Intersect(ObjectQuery<T>)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<T> Intersect (System.Data.Objects.ObjectQuery<T> query);\n    parameters:\n    - id: query\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.Intersect*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.Name\n  id: Name\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: Name\n  nameWithType: ObjectQuery<T>.Name\n  fullName: System.Data.Objects.ObjectQuery<T>.Name\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public string Name { get; set; }\n    return:\n      type: System.String\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.OfType``1\n  id: OfType``1\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: OfType()\n  nameWithType: ObjectQuery<T>.OfType()\n  fullName: System.Data.Objects.ObjectQuery<T>.OfType()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<TResultType> OfType<TResultType> ();\n    parameters: []\n    return:\n      type: System.Data.Objects.ObjectQuery{TResultType}\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.OfType<TResultType>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])\n  id: OrderBy(System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: OrderBy(String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.OrderBy(String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.OrderBy(String,ObjectParameter[])\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<T> OrderBy (string keys, System.Data.Objects.ObjectParameter[] parameters);\n    parameters:\n    - id: keys\n      type: System.String\n      description: To be added.\n    - id: parameters\n      type: System.Data.Objects.ObjectParameter[]\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.OrderBy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])\n  id: Select(System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: Select(String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.Select(String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.Select(String,ObjectParameter[])\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<System.Data.Common.DbDataRecord> Select (string projection, System.Data.Objects.ObjectParameter[] parameters);\n    parameters:\n    - id: projection\n      type: System.String\n      description: To be added.\n    - id: parameters\n      type: System.Data.Objects.ObjectParameter[]\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery{System.Data.Common.DbDataRecord}\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.Select*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])\n  id: SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: SelectValue(String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.SelectValue(String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.SelectValue(String,ObjectParameter[])\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<TResultType> SelectValue<TResultType> (string projection, System.Data.Objects.ObjectParameter[] parameters);\n    parameters:\n    - id: projection\n      type: System.String\n      description: To be added.\n    - id: parameters\n      type: System.Data.Objects.ObjectParameter[]\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery{TResultType}\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.SelectValue<TResultType>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])\n  id: Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: Skip(String,String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.Skip(String,String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.Skip(String,String,ObjectParameter[])\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<T> Skip (string keys, string count, System.Data.Objects.ObjectParameter[] parameters);\n    parameters:\n    - id: keys\n      type: System.String\n      description: To be added.\n    - id: count\n      type: System.String\n      description: To be added.\n    - id: parameters\n      type: System.Data.Objects.ObjectParameter[]\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.Skip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  isEii: true\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: ObjectQuery<T>.System.Collections.Generic.IEnumerable()\n  fullName: System.Data.Objects.ObjectQuery<T>.System.Collections.Generic.IEnumerable()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{T}\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])\n  id: Top(System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: Top(String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.Top(String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.Top(String,ObjectParameter[])\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<T> Top (string count, System.Data.Objects.ObjectParameter[] parameters);\n    parameters:\n    - id: count\n      type: System.String\n      description: To be added.\n    - id: parameters\n      type: System.Data.Objects.ObjectParameter[]\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.Top*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery`1)\n  id: Union(System.Data.Objects.ObjectQuery`1)\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: Union(ObjectQuery<T>)\n  nameWithType: ObjectQuery<T>.Union(ObjectQuery<T>)\n  fullName: System.Data.Objects.ObjectQuery<T>.Union(ObjectQuery<T>)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<T> Union (System.Data.Objects.ObjectQuery<T> query);\n    parameters:\n    - id: query\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.Union*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery`1)\n  id: UnionAll(System.Data.Objects.ObjectQuery`1)\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: UnionAll(ObjectQuery<T>)\n  nameWithType: ObjectQuery<T>.UnionAll(ObjectQuery<T>)\n  fullName: System.Data.Objects.ObjectQuery<T>.UnionAll(ObjectQuery<T>)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<T> UnionAll (System.Data.Objects.ObjectQuery<T> query);\n    parameters:\n    - id: query\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.UnionAll*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])\n  id: Where(System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  langs:\n  - csharp\n  name: Where(String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.Where(String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.Where(String,ObjectParameter[])\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Objects\n  syntax:\n    content: public System.Data.Objects.ObjectQuery<T> Where (string predicate, System.Data.Objects.ObjectParameter[] parameters);\n    parameters:\n    - id: predicate\n      type: System.String\n      description: To be added.\n    - id: parameters\n      type: System.Data.Objects.ObjectParameter[]\n      description: To be added.\n    return:\n      type: System.Data.Objects.ObjectQuery`1\n      description: To be added.\n  overload: System.Data.Objects.ObjectQuery`1.Where*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Data.Objects.ObjectQuery\n  isExternal: false\n  name: System.Data.Objects.ObjectQuery\n- uid: System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: ObjectQuery(String,ObjectContext)\n  nameWithType: ObjectQuery<T>.ObjectQuery(String,ObjectContext)\n  fullName: System.Data.Objects.ObjectQuery<T>.ObjectQuery(String,ObjectContext)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Objects.ObjectContext\n  parent: System.Data.Objects\n  isExternal: false\n  name: ObjectContext\n  nameWithType: ObjectContext\n  fullName: System.Data.Objects.ObjectContext\n- uid: System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: ObjectQuery(String,ObjectContext,MergeOption)\n  nameWithType: ObjectQuery<T>.ObjectQuery(String,ObjectContext,MergeOption)\n  fullName: System.Data.Objects.ObjectQuery<T>.ObjectQuery(String,ObjectContext,MergeOption)\n- uid: System.Data.Objects.MergeOption\n  parent: System.Data.Objects\n  isExternal: false\n  name: MergeOption\n  nameWithType: MergeOption\n  fullName: System.Data.Objects.MergeOption\n- uid: System.Data.Objects.ObjectQuery`1.Distinct\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Distinct()\n  nameWithType: ObjectQuery<T>.Distinct()\n  fullName: System.Data.Objects.ObjectQuery<T>.Distinct()\n- uid: System.Data.Objects.ObjectQuery`1\n  parent: System.Data.Objects\n  isExternal: false\n  name: ObjectQuery<T>\n  nameWithType: ObjectQuery<T>\n  fullName: System.Data.Objects.ObjectQuery<T>\n- uid: System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery`1)\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Except(ObjectQuery<T>)\n  nameWithType: ObjectQuery<T>.Except(ObjectQuery<T>)\n  fullName: System.Data.Objects.ObjectQuery<T>.Except(ObjectQuery<T>)\n- uid: System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Execute(MergeOption)\n  nameWithType: ObjectQuery<T>.Execute(MergeOption)\n  fullName: System.Data.Objects.ObjectQuery<T>.Execute(MergeOption)\n- uid: System.Data.Objects.ObjectResult`1\n  parent: System.Data.Objects\n  isExternal: false\n  name: ObjectResult<T>\n  nameWithType: ObjectResult<T>\n  fullName: System.Data.Objects.ObjectResult<T>\n- uid: System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: GroupBy(String,String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.GroupBy(String,String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.GroupBy(String,String,ObjectParameter[])\n- uid: System.Data.Objects.ObjectQuery{System.Data.Common.DbDataRecord}\n  parent: System.Data.Objects\n  isExternal: false\n  name: ObjectQuery<DbDataRecord>\n  nameWithType: ObjectQuery<DbDataRecord>\n  fullName: System.Data.Objects.ObjectQuery<System.Data.Common.DbDataRecord>\n  spec.csharp:\n  - uid: System.Data.Objects.ObjectQuery`1\n    name: ObjectQuery\n    nameWithType: ObjectQuery\n    fullName: ObjectQuery<System.Data.Common.DbDataRecord>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Common.DbDataRecord\n    name: DbDataRecord\n    nameWithType: DbDataRecord\n    fullName: DbDataRecord\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Objects.ObjectParameter[]\n  parent: System.Data.Objects\n  isExternal: false\n  name: ObjectParameter\n  nameWithType: ObjectParameter\n  fullName: System.Data.Objects.ObjectParameter[]\n  spec.csharp:\n  - uid: System.Data.Objects.ObjectParameter\n    name: ObjectParameter\n    nameWithType: ObjectParameter\n    fullName: ObjectParameter[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.Objects.ObjectQuery`1.Include(System.String)\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Include(String)\n  nameWithType: ObjectQuery<T>.Include(String)\n  fullName: System.Data.Objects.ObjectQuery<T>.Include(String)\n- uid: System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery`1)\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Intersect(ObjectQuery<T>)\n  nameWithType: ObjectQuery<T>.Intersect(ObjectQuery<T>)\n  fullName: System.Data.Objects.ObjectQuery<T>.Intersect(ObjectQuery<T>)\n- uid: System.Data.Objects.ObjectQuery`1.Name\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Name\n  nameWithType: ObjectQuery<T>.Name\n  fullName: System.Data.Objects.ObjectQuery<T>.Name\n- uid: System.Data.Objects.ObjectQuery`1.OfType``1\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: OfType()\n  nameWithType: ObjectQuery<T>.OfType()\n  fullName: System.Data.Objects.ObjectQuery<T>.OfType()\n- uid: System.Data.Objects.ObjectQuery{TResultType}\n  parent: System.Data.Objects\n  isExternal: false\n  name: ObjectQuery<TResultType>\n  nameWithType: ObjectQuery<TResultType>\n  fullName: System.Data.Objects.ObjectQuery<TResultType>\n  spec.csharp:\n  - uid: System.Data.Objects.ObjectQuery`1\n    name: ObjectQuery\n    nameWithType: ObjectQuery\n    fullName: ObjectQuery<TResultType>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResultType\n    name: TResultType\n    nameWithType: TResultType\n    fullName: TResultType\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: OrderBy(String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.OrderBy(String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.OrderBy(String,ObjectParameter[])\n- uid: System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Select(String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.Select(String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.Select(String,ObjectParameter[])\n- uid: System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: SelectValue(String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.SelectValue(String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.SelectValue(String,ObjectParameter[])\n- uid: System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Skip(String,String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.Skip(String,String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.Skip(String,String,ObjectParameter[])\n- uid: System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: ObjectQuery<T>.System.Collections.Generic.IEnumerable()\n  fullName: System.Data.Objects.ObjectQuery<T>.System.Collections.Generic.IEnumerable()\n- uid: System.Collections.Generic.IEnumerator{T}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Top(String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.Top(String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.Top(String,ObjectParameter[])\n- uid: System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery`1)\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Union(ObjectQuery<T>)\n  nameWithType: ObjectQuery<T>.Union(ObjectQuery<T>)\n  fullName: System.Data.Objects.ObjectQuery<T>.Union(ObjectQuery<T>)\n- uid: System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery`1)\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: UnionAll(ObjectQuery<T>)\n  nameWithType: ObjectQuery<T>.UnionAll(ObjectQuery<T>)\n  fullName: System.Data.Objects.ObjectQuery<T>.UnionAll(ObjectQuery<T>)\n- uid: System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Where(String,ObjectParameter[])\n  nameWithType: ObjectQuery<T>.Where(String,ObjectParameter[])\n  fullName: System.Data.Objects.ObjectQuery<T>.Where(String,ObjectParameter[])\n- uid: System.Data.Objects.ObjectQuery`1.#ctor*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: ObjectQuery<T>\n  nameWithType: ObjectQuery<T>.ObjectQuery<T>\n- uid: System.Data.Objects.ObjectQuery`1.Distinct*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Distinct\n  nameWithType: ObjectQuery<T>.Distinct\n- uid: System.Data.Objects.ObjectQuery`1.Except*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Except\n  nameWithType: ObjectQuery<T>.Except\n- uid: System.Data.Objects.ObjectQuery`1.Execute*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Execute\n  nameWithType: ObjectQuery<T>.Execute\n- uid: System.Data.Objects.ObjectQuery`1.GroupBy*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: GroupBy\n  nameWithType: ObjectQuery<T>.GroupBy\n- uid: System.Data.Objects.ObjectQuery`1.Include*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Include\n  nameWithType: ObjectQuery<T>.Include\n- uid: System.Data.Objects.ObjectQuery`1.Intersect*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Intersect\n  nameWithType: ObjectQuery<T>.Intersect\n- uid: System.Data.Objects.ObjectQuery`1.Name*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Name\n  nameWithType: ObjectQuery<T>.Name\n- uid: System.Data.Objects.ObjectQuery`1.OfType<TResultType>*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: OfType<TResultType>\n  nameWithType: ObjectQuery<T>.OfType<TResultType>\n- uid: System.Data.Objects.ObjectQuery`1.OrderBy*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: OrderBy\n  nameWithType: ObjectQuery<T>.OrderBy\n- uid: System.Data.Objects.ObjectQuery`1.Select*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Select\n  nameWithType: ObjectQuery<T>.Select\n- uid: System.Data.Objects.ObjectQuery`1.SelectValue<TResultType>*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: SelectValue<TResultType>\n  nameWithType: ObjectQuery<T>.SelectValue<TResultType>\n- uid: System.Data.Objects.ObjectQuery`1.Skip*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Skip\n  nameWithType: ObjectQuery<T>.Skip\n- uid: System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  nameWithType: ObjectQuery<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator\n- uid: System.Data.Objects.ObjectQuery`1.Top*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Top\n  nameWithType: ObjectQuery<T>.Top\n- uid: System.Data.Objects.ObjectQuery`1.Union*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Union\n  nameWithType: ObjectQuery<T>.Union\n- uid: System.Data.Objects.ObjectQuery`1.UnionAll*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: UnionAll\n  nameWithType: ObjectQuery<T>.UnionAll\n- uid: System.Data.Objects.ObjectQuery`1.Where*\n  parent: System.Data.Objects.ObjectQuery`1\n  isExternal: false\n  name: Where\n  nameWithType: ObjectQuery<T>.Where\n"}