{"nodes":[{"pos":[441,533],"content":"Represents the access control and audit security for a file. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the access control and audit security for a file. This class cannot be inherited.","pos":[0,92],"nodes":[{"content":"Represents the access control and audit security for a file.","pos":[0,60]},{"content":"This class cannot be inherited.","pos":[61,92]}]}]},{"pos":[546,1971],"content":"The FileSecurity class specifies the access rights for a system file and how access attempts are audited.  This class represents access and audit rights as a set of rules. Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object.       The FileSecurity class is an abstraction of the underlying Microsoft Windows file security system. In this system, each file has a discretionary access control list (DACL), which controls access to the file, and a system access control list (SACL), which specifies the access control attempts that are audited.  The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.       The FileSecurity class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.       Use the FileSecurity class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.       To persist new or changed access or audit rules to a file, use the <xref:System.IO.FileInfo.SetAccessControl%2A> method. To retrieve access or audit rules from an existing file, use the <xref:System.IO.FileInfo.GetAccessControl%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The FileSecurity class specifies the access rights for a system file and how access attempts are audited.  This class represents access and audit rights as a set of rules. Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object.       The FileSecurity class is an abstraction of the underlying Microsoft Windows file security system. In this system, each file has a discretionary access control list (DACL), which controls access to the file, and a system access control list (SACL), which specifies the access control attempts that are audited.  The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.       The FileSecurity class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.       Use the FileSecurity class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.       To persist new or changed access or audit rules to a file, use the <xref:System.IO.FileInfo.SetAccessControl%2A> method. To retrieve access or audit rules from an existing file, use the <xref:System.IO.FileInfo.GetAccessControl%2A> method.","pos":[0,1417],"nodes":[{"content":"The FileSecurity class specifies the access rights for a system file and how access attempts are audited.","pos":[0,105]},{"content":"This class represents access and audit rights as a set of rules.","pos":[107,171]},{"content":"Each access rule is represented by a &lt;xref:System.Security.AccessControl.FileSystemAccessRule&gt; object, while each audit rule is represented by a &lt;xref:System.Security.AccessControl.FileSystemAuditRule&gt; object.","pos":[172,381],"source":" Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object."},{"content":"The FileSecurity class is an abstraction of the underlying Microsoft Windows file security system.","pos":[388,486]},{"content":"In this system, each file has a discretionary access control list (DACL), which controls access to the file, and a system access control list (SACL), which specifies the access control attempts that are audited.","pos":[487,698]},{"content":"The &lt;xref:System.Security.AccessControl.FileSystemAccessRule&gt; and &lt;xref:System.Security.AccessControl.FileSystemAuditRule&gt; classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.","pos":[700,915],"source":"  The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs."},{"content":"The FileSecurity class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.","pos":[922,1049]},{"content":"Use the FileSecurity class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.","pos":[1056,1171]},{"content":"To persist new or changed access or audit rules to a file, use the &lt;xref:System.IO.FileInfo.SetAccessControl%2A&gt; method.","pos":[1178,1298],"source":"       To persist new or changed access or audit rules to a file, use the <xref:System.IO.FileInfo.SetAccessControl%2A> method."},{"content":"To retrieve access or audit rules from an existing file, use the &lt;xref:System.IO.FileInfo.GetAccessControl%2A&gt; method.","pos":[1299,1417],"source":" To retrieve access or audit rules from an existing file, use the <xref:System.IO.FileInfo.GetAccessControl%2A> method."}]}]},{"pos":[10841,10945],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.FileSecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> class."},{"pos":[10958,11864],"content":"Use this constructor when you want to create an empty <xref:System.Security.AccessControl.FileSecurity> object that is not based on an existing file.  You can then populate the object with access control information and apply it to a file.       You can add access or audit rules to the <xref:System.Security.AccessControl.FileSecurity> object using the <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A> method. You can remove access or audit rules using the <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A> method.       To persist new or changed access or audit rules to a file, use the <xref:System.IO.File.SetAccessControl%2A> or <xref:System.IO.FileInfo.SetAccessControl%2A> method.  To retrieve access or audit rules from an existing file, use the <xref:System.IO.File.GetAccessControl%2A> or <xref:System.IO.FileInfo.GetAccessControl%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this constructor when you want to create an empty <xref:System.Security.AccessControl.FileSecurity> object that is not based on an existing file.  You can then populate the object with access control information and apply it to a file.       You can add access or audit rules to the <xref:System.Security.AccessControl.FileSecurity> object using the <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A> method. You can remove access or audit rules using the <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A> method.       To persist new or changed access or audit rules to a file, use the <xref:System.IO.File.SetAccessControl%2A> or <xref:System.IO.FileInfo.SetAccessControl%2A> method.  To retrieve access or audit rules from an existing file, use the <xref:System.IO.File.GetAccessControl%2A> or <xref:System.IO.FileInfo.GetAccessControl%2A> method.","pos":[0,902],"nodes":[{"content":"Use this constructor when you want to create an empty &lt;xref:System.Security.AccessControl.FileSecurity&gt; object that is not based on an existing file.","pos":[0,149],"source":"Use this constructor when you want to create an empty <xref:System.Security.AccessControl.FileSecurity> object that is not based on an existing file."},{"content":"You can then populate the object with access control information and apply it to a file.","pos":[151,239]},{"content":"You can add access or audit rules to the &lt;xref:System.Security.AccessControl.FileSecurity&gt; object using the &lt;xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A&gt; method.","pos":[246,434],"source":"       You can add access or audit rules to the <xref:System.Security.AccessControl.FileSecurity> object using the <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A> method."},{"content":"You can remove access or audit rules using the &lt;xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A&gt; method.","pos":[435,565],"source":" You can remove access or audit rules using the <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A> method."},{"content":"To persist new or changed access or audit rules to a file, use the &lt;xref:System.IO.File.SetAccessControl%2A&gt; or &lt;xref:System.IO.FileInfo.SetAccessControl%2A&gt; method.","pos":[572,737],"source":"       To persist new or changed access or audit rules to a file, use the <xref:System.IO.File.SetAccessControl%2A> or <xref:System.IO.FileInfo.SetAccessControl%2A> method."},{"content":"To retrieve access or audit rules from an existing file, use the &lt;xref:System.IO.File.GetAccessControl%2A&gt; or &lt;xref:System.IO.FileInfo.GetAccessControl%2A&gt; method.","pos":[739,902],"source":"  To retrieve access or audit rules from an existing file, use the <xref:System.IO.File.GetAccessControl%2A> or <xref:System.IO.FileInfo.GetAccessControl%2A> method."}]}]},{"pos":[12126,12194],"content":"The current operating system is not Microsoft Windows 2000 or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[0,68]}]},{"pos":[12817,13062],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.FileSecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from a specified file using the specified values of the <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.AccessControlSections\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> enumeration.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> class from a specified file using the specified values of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> enumeration."},{"pos":[13075,14027],"content":"This constructor retrieves the access control information for the specified file and then creates a <xref:System.Security.AccessControl.FileSecurity> object that encapsulates that information.  You can then inspect, add, or delete the access control information for the specified file.       You can add access or audit rules to the <xref:System.Security.AccessControl.FileSecurity> object using the <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A> method. You can remove access or audit rules using the <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A> method.       To persist new or changed access or audit rules to a file, use the <xref:System.IO.File.SetAccessControl%2A> or <xref:System.IO.FileInfo.SetAccessControl%2A> method.  To retrieve access or audit rules from an existing file, use the <xref:System.IO.File.GetAccessControl%2A> or <xref:System.IO.FileInfo.GetAccessControl%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor retrieves the access control information for the specified file and then creates a <xref:System.Security.AccessControl.FileSecurity> object that encapsulates that information.  You can then inspect, add, or delete the access control information for the specified file.       You can add access or audit rules to the <xref:System.Security.AccessControl.FileSecurity> object using the <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A> method. You can remove access or audit rules using the <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A> method.       To persist new or changed access or audit rules to a file, use the <xref:System.IO.File.SetAccessControl%2A> or <xref:System.IO.FileInfo.SetAccessControl%2A> method.  To retrieve access or audit rules from an existing file, use the <xref:System.IO.File.GetAccessControl%2A> or <xref:System.IO.FileInfo.GetAccessControl%2A> method.","pos":[0,948],"nodes":[{"content":"This constructor retrieves the access control information for the specified file and then creates a &lt;xref:System.Security.AccessControl.FileSecurity&gt; object that encapsulates that information.","pos":[0,192],"source":"This constructor retrieves the access control information for the specified file and then creates a <xref:System.Security.AccessControl.FileSecurity> object that encapsulates that information."},{"content":"You can then inspect, add, or delete the access control information for the specified file.","pos":[194,285]},{"content":"You can add access or audit rules to the &lt;xref:System.Security.AccessControl.FileSecurity&gt; object using the &lt;xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A&gt; method.","pos":[292,480],"source":"       You can add access or audit rules to the <xref:System.Security.AccessControl.FileSecurity> object using the <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A> method."},{"content":"You can remove access or audit rules using the &lt;xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A&gt; method.","pos":[481,611],"source":" You can remove access or audit rules using the <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A> method."},{"content":"To persist new or changed access or audit rules to a file, use the &lt;xref:System.IO.File.SetAccessControl%2A&gt; or &lt;xref:System.IO.FileInfo.SetAccessControl%2A&gt; method.","pos":[618,783],"source":"       To persist new or changed access or audit rules to a file, use the <xref:System.IO.File.SetAccessControl%2A> or <xref:System.IO.FileInfo.SetAccessControl%2A> method."},{"content":"To retrieve access or audit rules from an existing file, use the &lt;xref:System.IO.File.GetAccessControl%2A&gt; or &lt;xref:System.IO.FileInfo.GetAccessControl%2A&gt; method.","pos":[785,948],"source":"  To retrieve access or audit rules from an existing file, use the <xref:System.IO.File.GetAccessControl%2A> or <xref:System.IO.FileInfo.GetAccessControl%2A> method."}]}]},{"pos":[14240,14351],"content":"The location of a file to create a <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.FileSecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from.","needQuote":true,"needEscape":true,"source":"The location of a file to create a <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> object from."},{"pos":[14461,14629],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlSections\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that specifies the type of access control list (ACL) information to retrieve.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to retrieve."},{"pos":[14800,14984],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by &lt;xref:System.IO.Path.InvalidPathChars&gt;.","needQuote":true,"needEscape":true,"source":"The <code>fileName</code> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."},{"pos":[15103,15176],"content":"The specified path is invalid, (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path is invalid, (for example, it is on an unmapped drive).","pos":[0,73]}]},{"pos":[15285,15357],"content":"The file specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was not found.","needQuote":true,"needEscape":true,"source":"The file specified in the <code>fileName</code> parameter was not found."},{"pos":[15446,15491],"content":"An I/O error occurred while opening the file.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred while opening the file.","pos":[0,45]}]},{"pos":[15594,15636],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is in an invalid format.","needQuote":true,"needEscape":true,"source":"<code>path</code> is in an invalid format."},{"pos":[15769,15869],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>fileName</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15988,16056],"content":"The current operating system is not Microsoft Windows 2000 or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[0,68]}]},{"pos":[16163,16373],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]},{"pos":[16530,16597],"content":"The current system account does not have administrative privileges.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current system account does not have administrative privileges.","pos":[0,67]}]},{"pos":[16688,16716],"content":"The file could not be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file could not be found.","pos":[0,28]}]},{"pos":[16832,17132],"content":"The <code>fileName</code> parameter specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       The <code>fileName</code> parameter specified a directory.       -or-       The caller does not have the required permission.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specified a file that is read-only.","pos":[0,71],"source":"The <code>fileName</code> parameter specified a file that is read-only."},{"content":"-or-       This operation is not supported on the current platform.","pos":[78,145]},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specified a directory.","pos":[152,221],"source":"       -or-       The <code>fileName</code> parameter specified a directory."},{"content":"-or-       The caller does not have the required permission.","pos":[228,288]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.FileSecurity\n  id: FileSecurity\n  children:\n  - System.Security.AccessControl.FileSecurity.#ctor\n  - System.Security.AccessControl.FileSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  langs:\n  - csharp\n  name: FileSecurity\n  nameWithType: FileSecurity\n  fullName: System.Security.AccessControl.FileSecurity\n  type: Class\n  summary: Represents the access control and audit security for a file. This class cannot be inherited.\n  remarks: \"The FileSecurity class specifies the access rights for a system file and how access attempts are audited.  This class represents access and audit rights as a set of rules. Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object.  \\n  \\n The FileSecurity class is an abstraction of the underlying Microsoft Windows file security system. In this system, each file has a discretionary access control list (DACL), which controls access to the file, and a system access control list (SACL), which specifies the access control attempts that are audited.  The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.  \\n  \\n The FileSecurity class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.  \\n  \\n Use the FileSecurity class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.  \\n  \\n To persist new or changed access or audit rules to a file, use the <xref:System.IO.FileInfo.SetAccessControl%2A> method. To retrieve access or audit rules from an existing file, use the <xref:System.IO.FileInfo.GetAccessControl%2A> method.\"\n  example:\n  - \"The following code example uses the FileSecurity class to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.  \\n  \\n [!code-cs[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/t-system.security.access_2_1.cs)]\\n [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/t-system.security.access_2_1.vb)]\\n [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/t-system.security.access_2_1.cpp)]\"\n  syntax:\n    content: 'public sealed class FileSecurity : System.Security.AccessControl.FileSystemSecurity'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.ObjectSecurity\n  - System.Security.AccessControl.CommonObjectSecurity\n  - System.Security.AccessControl.NativeObjectSecurity\n  - System.Security.AccessControl.FileSystemSecurity\n  implements: []\n  inheritedMembers:\n  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)\n  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)\n  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.AccessRightType\n  - System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.FileSystemSecurity.AccessRuleType\n  - System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.FileSystemSecurity.AuditRuleType\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)\n  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified\n  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.GroupModified\n  - System.Security.AccessControl.ObjectSecurity.IsContainer\n  - System.Security.AccessControl.ObjectSecurity.IsDS\n  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported\n  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.OwnerModified\n  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.ReadLock\n  - System.Security.AccessControl.ObjectSecurity.ReadUnlock\n  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.WriteLock\n  - System.Security.AccessControl.ObjectSecurity.WriteUnlock\n  platform:\n  - net462\n- uid: System.Security.AccessControl.FileSecurity.#ctor\n  id: '#ctor'\n  parent: System.Security.AccessControl.FileSecurity\n  langs:\n  - csharp\n  name: FileSecurity()\n  nameWithType: FileSecurity.FileSecurity()\n  fullName: System.Security.AccessControl.FileSecurity.FileSecurity()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> class.\n  remarks: \"Use this constructor when you want to create an empty <xref:System.Security.AccessControl.FileSecurity> object that is not based on an existing file.  You can then populate the object with access control information and apply it to a file.  \\n  \\n You can add access or audit rules to the <xref:System.Security.AccessControl.FileSecurity> object using the <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A> method. You can remove access or audit rules using the <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A> method.  \\n  \\n To persist new or changed access or audit rules to a file, use the <xref:System.IO.File.SetAccessControl%2A> or <xref:System.IO.FileInfo.SetAccessControl%2A> method.  To retrieve access or audit rules from an existing file, use the <xref:System.IO.File.GetAccessControl%2A> or <xref:System.IO.FileInfo.GetAccessControl%2A> method.\"\n  syntax:\n    content: public FileSecurity ();\n    parameters: []\n  overload: System.Security.AccessControl.FileSecurity.#ctor*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Microsoft Windows 2000 or later.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.FileSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'\n  parent: System.Security.AccessControl.FileSecurity\n  langs:\n  - csharp\n  name: FileSecurity(String,AccessControlSections)\n  nameWithType: FileSecurity.FileSecurity(String,AccessControlSections)\n  fullName: System.Security.AccessControl.FileSecurity.FileSecurity(String,AccessControlSections)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> class from a specified file using the specified values of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> enumeration.\n  remarks: \"This constructor retrieves the access control information for the specified file and then creates a <xref:System.Security.AccessControl.FileSecurity> object that encapsulates that information.  You can then inspect, add, or delete the access control information for the specified file.  \\n  \\n You can add access or audit rules to the <xref:System.Security.AccessControl.FileSecurity> object using the <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A> method. You can remove access or audit rules using the <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A> method.  \\n  \\n To persist new or changed access or audit rules to a file, use the <xref:System.IO.File.SetAccessControl%2A> or <xref:System.IO.FileInfo.SetAccessControl%2A> method.  To retrieve access or audit rules from an existing file, use the <xref:System.IO.File.GetAccessControl%2A> or <xref:System.IO.FileInfo.GetAccessControl%2A> method.\"\n  syntax:\n    content: public FileSecurity (string fileName, System.Security.AccessControl.AccessControlSections includeSections);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The location of a file to create a <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> object from.\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to retrieve.\n  overload: System.Security.AccessControl.FileSecurity.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>fileName</code> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, (for example, it is on an unmapped drive).\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified in the <code>fileName</code> parameter was not found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while opening the file.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> is in an invalid format.\n  - type: System.Runtime.InteropServices.SEHException\n    commentId: T:System.Runtime.InteropServices.SEHException\n    description: The <code>fileName</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Microsoft Windows 2000 or later.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  - type: System.Security.AccessControl.PrivilegeNotHeldException\n    commentId: T:System.Security.AccessControl.PrivilegeNotHeldException\n    description: The current system account does not have administrative privileges.\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The file could not be found.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"The <code>fileName</code> parameter specified a file that is read-only.  \\n  \\n -or-  \\n  \\n This operation is not supported on the current platform.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter specified a directory.  \\n  \\n -or-  \\n  \\n The caller does not have the required permission.\"\n  platform:\n  - net462\nreferences:\n- uid: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: System.Security.AccessControl.FileSystemSecurity\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.IO.DirectoryNotFoundException\n  isExternal: true\n  name: System.IO.DirectoryNotFoundException\n- uid: System.IO.FileNotFoundException\n  isExternal: true\n  name: System.IO.FileNotFoundException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Runtime.InteropServices.SEHException\n  isExternal: true\n  name: System.Runtime.InteropServices.SEHException\n- uid: System.IO.PathTooLongException\n  isExternal: true\n  name: System.IO.PathTooLongException\n- uid: System.Security.AccessControl.PrivilegeNotHeldException\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PrivilegeNotHeldException\n  nameWithType: PrivilegeNotHeldException\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException\n- uid: System.SystemException\n  parent: System\n  isExternal: false\n  name: SystemException\n  nameWithType: SystemException\n  fullName: System.SystemException\n- uid: System.UnauthorizedAccessException\n  isExternal: true\n  name: System.UnauthorizedAccessException\n- uid: System.Security.AccessControl.FileSecurity.#ctor\n  parent: System.Security.AccessControl.FileSecurity\n  isExternal: false\n  name: FileSecurity()\n  nameWithType: FileSecurity.FileSecurity()\n  fullName: System.Security.AccessControl.FileSecurity.FileSecurity()\n- uid: System.Security.AccessControl.FileSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.FileSecurity\n  isExternal: false\n  name: FileSecurity(String,AccessControlSections)\n  nameWithType: FileSecurity.FileSecurity(String,AccessControlSections)\n  fullName: System.Security.AccessControl.FileSecurity.FileSecurity(String,AccessControlSections)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.AccessControlSections\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlSections\n  nameWithType: AccessControlSections\n  fullName: System.Security.AccessControl.AccessControlSections\n- uid: System.Security.AccessControl.FileSecurity.#ctor*\n  parent: System.Security.AccessControl.FileSecurity\n  isExternal: false\n  name: FileSecurity\n  nameWithType: FileSecurity.FileSecurity\n"}