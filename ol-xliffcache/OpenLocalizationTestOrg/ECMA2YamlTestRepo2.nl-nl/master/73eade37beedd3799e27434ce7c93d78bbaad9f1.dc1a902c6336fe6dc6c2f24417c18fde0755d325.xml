{"nodes":[{"pos":[1753,1801],"content":"Keeps track of objects as they are deserialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Keeps track of objects as they are deserialized.","pos":[0,48]}]},{"pos":[1814,3568],"content":"During deserialization, the <xref:System.Runtime.Serialization.Formatter> queries the ObjectManager to determine whether a reference to an object in the serialized stream refers to an object that has already been deserialized (a backward reference), or to an object that has not yet been deserialized (a forward reference). If the reference in the serialized stream is a forward reference, then the <xref:System.Runtime.Serialization.Formatter> can register a fixup with the ObjectManager. If the reference in the serialized stream is a backward reference, the <xref:System.Runtime.Serialization.Formatter> immediately completes the reference. Fixup refers to the process of finalizing object references not already completed during the object deserialization process. After the required object has been deserialized, the ObjectManager will complete the reference.       The ObjectManager follows a set of rules that dictate the fixup order. All objects that implement <xref:System.Runtime.Serialization.ISerializable> or have a <xref:System.Runtime.Serialization.ISerializationSurrogate> can expect to have all the objects that they transmitted through <xref:System.Runtime.Serialization.SerializationInfo> available when the object tree is deserialized. However, a parent object cannot presume that all its child objects will be fully completed when it is fully deserialized. All child objects will be present but not all the grandchild objects will necessarily be present. If an object needs to take certain actions that depend on executing code on its child objects, it can delay these actions, implement the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and execute the code only when it is called back on this interface.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"During deserialization, the <xref:System.Runtime.Serialization.Formatter> queries the ObjectManager to determine whether a reference to an object in the serialized stream refers to an object that has already been deserialized (a backward reference), or to an object that has not yet been deserialized (a forward reference). If the reference in the serialized stream is a forward reference, then the <xref:System.Runtime.Serialization.Formatter> can register a fixup with the ObjectManager. If the reference in the serialized stream is a backward reference, the <xref:System.Runtime.Serialization.Formatter> immediately completes the reference. Fixup refers to the process of finalizing object references not already completed during the object deserialization process. After the required object has been deserialized, the ObjectManager will complete the reference.       The ObjectManager follows a set of rules that dictate the fixup order. All objects that implement <xref:System.Runtime.Serialization.ISerializable> or have a <xref:System.Runtime.Serialization.ISerializationSurrogate> can expect to have all the objects that they transmitted through <xref:System.Runtime.Serialization.SerializationInfo> available when the object tree is deserialized. However, a parent object cannot presume that all its child objects will be fully completed when it is fully deserialized. All child objects will be present but not all the grandchild objects will necessarily be present. If an object needs to take certain actions that depend on executing code on its child objects, it can delay these actions, implement the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and execute the code only when it is called back on this interface.","pos":[0,1752],"nodes":[{"content":"During deserialization, the &lt;xref:System.Runtime.Serialization.Formatter&gt; queries the ObjectManager to determine whether a reference to an object in the serialized stream refers to an object that has already been deserialized (a backward reference), or to an object that has not yet been deserialized (a forward reference).","pos":[0,323],"source":"During deserialization, the <xref:System.Runtime.Serialization.Formatter> queries the ObjectManager to determine whether a reference to an object in the serialized stream refers to an object that has already been deserialized (a backward reference), or to an object that has not yet been deserialized (a forward reference)."},{"content":"If the reference in the serialized stream is a forward reference, then the &lt;xref:System.Runtime.Serialization.Formatter&gt; can register a fixup with the ObjectManager.","pos":[324,489],"source":" If the reference in the serialized stream is a forward reference, then the <xref:System.Runtime.Serialization.Formatter> can register a fixup with the ObjectManager."},{"content":"If the reference in the serialized stream is a backward reference, the &lt;xref:System.Runtime.Serialization.Formatter&gt; immediately completes the reference.","pos":[490,643],"source":" If the reference in the serialized stream is a backward reference, the <xref:System.Runtime.Serialization.Formatter> immediately completes the reference."},{"content":"Fixup refers to the process of finalizing object references not already completed during the object deserialization process.","pos":[644,768]},{"content":"After the required object has been deserialized, the ObjectManager will complete the reference.","pos":[769,864]},{"content":"The ObjectManager follows a set of rules that dictate the fixup order.","pos":[871,941]},{"content":"All objects that implement &lt;xref:System.Runtime.Serialization.ISerializable&gt; or have a &lt;xref:System.Runtime.Serialization.ISerializationSurrogate&gt; can expect to have all the objects that they transmitted through &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; available when the object tree is deserialized.","pos":[942,1255],"source":" All objects that implement <xref:System.Runtime.Serialization.ISerializable> or have a <xref:System.Runtime.Serialization.ISerializationSurrogate> can expect to have all the objects that they transmitted through <xref:System.Runtime.Serialization.SerializationInfo> available when the object tree is deserialized."},{"content":"However, a parent object cannot presume that all its child objects will be fully completed when it is fully deserialized.","pos":[1256,1377]},{"content":"All child objects will be present but not all the grandchild objects will necessarily be present.","pos":[1378,1475]},{"content":"If an object needs to take certain actions that depend on executing code on its child objects, it can delay these actions, implement the &lt;xref:System.Runtime.Serialization.IDeserializationCallback&gt; interface, and execute the code only when it is called back on this interface.","pos":[1476,1752],"source":" If an object needs to take certain actions that depend on executing code on its child objects, it can delay these actions, implement the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and execute the code only when it is called back on this interface."}]}]},{"pos":[4710,4814],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.ObjectManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.Serialization.ObjectManager\"></xref> class."},{"pos":[5088,5408],"content":"The surrogate selector to use. The <xref href=\"System.Runtime.Serialization.ISurrogateSelector\"></xref> determines the correct surrogate to use when deserializing objects of a given type. At deserialization time, the surrogate selector creates a new instance of the object from the information transmitted on the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The surrogate selector to use.","pos":[0,30]},{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.ISurrogateSelector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> determines the correct surrogate to use when deserializing objects of a given type.","pos":[31,187],"source":" The <xref href=\"System.Runtime.Serialization.ISurrogateSelector\"></xref> determines the correct surrogate to use when deserializing objects of a given type."},{"content":"At deserialization time, the surrogate selector creates a new instance of the object from the information transmitted on the stream.","pos":[188,320]}]},{"pos":[5504,5985],"content":"The streaming context. The <xref:System.Runtime.Serialization.StreamingContext> is not used by <xref uid=\"langword_csharp_ObjectManager\" name=\"ObjectManager\" href=\"\"></xref>, but is passed as a parameter to any objects implementing <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or having a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>. These objects can take specific actions depending on the source of the information to deserialize.","needQuote":true,"needEscape":true,"nodes":[{"content":"The streaming context.","pos":[0,22]},{"content":"The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; is not used by <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_ObjectManager\" name=\"ObjectManager\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, but is passed as a parameter to any objects implementing <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.ISerializable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or having a <bpt id=\"p3\">&lt;xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[23,382],"source":" The <xref:System.Runtime.Serialization.StreamingContext> is not used by <xref uid=\"langword_csharp_ObjectManager\" name=\"ObjectManager\" href=\"\"></xref>, but is passed as a parameter to any objects implementing <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or having a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>."},{"content":"These objects can take specific actions depending on the source of the information to deserialize.","pos":[383,481]}]},{"pos":[6174,6223],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[6615,6648],"content":"Performs all the recorded fixups.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs all the recorded fixups.","pos":[0,33]}]},{"pos":[6660,6835],"content":"The fixups are carried out by any appropriate surrogate, the object itself (if it implements <xref:System.Runtime.Serialization.ISerializable>), or the default implementation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The fixups are carried out by any appropriate surrogate, the object itself (if it implements &lt;xref:System.Runtime.Serialization.ISerializable&gt;), or the default implementation.","pos":[0,175],"source":"The fixups are carried out by any appropriate surrogate, the object itself (if it implements <xref:System.Runtime.Serialization.ISerializable>), or the default implementation."}]},{"pos":[7138,7177],"content":"A fixup was not successfully completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"A fixup was not successfully completed.","pos":[0,39]}]},{"pos":[7617,7665],"content":"Returns the object with the specified object ID.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the object with the specified object ID.","pos":[0,48]}]},{"pos":[7677,7823],"content":"An object can be registered and issued an object ID with a call to the <xref:System.Runtime.Serialization.ObjectManager.RegisterObject%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An object can be registered and issued an object ID with a call to the &lt;xref:System.Runtime.Serialization.ObjectManager.RegisterObject%2A&gt; method.","pos":[0,146],"source":"An object can be registered and issued an object ID with a call to the <xref:System.Runtime.Serialization.ObjectManager.RegisterObject%2A> method."}]},{"pos":[7975,8006],"content":"The ID of the requested object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the requested object.","pos":[0,31]}]},{"pos":[8064,8239],"content":"The object with the specified object ID if it has been previously stored or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no such object has been registered.","needQuote":true,"needEscape":true,"source":"The object with the specified object ID if it has been previously stored or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no such object has been registered."},{"pos":[8434,8500],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>objectID</code> parameter is less than or equal to zero."},{"pos":[8977,9126],"content":"Raises the deserialization event to any registered object that implements <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.IDeserializationCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Raises the deserialization event to any registered object that implements <xref href=\"System.Runtime.Serialization.IDeserializationCallback\"></xref>."},{"pos":[9842,9938],"content":"Invokes the method marked with the <xref:System.Runtime.Serialization.OnDeserializingAttribute>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes the method marked with the &lt;xref:System.Runtime.Serialization.OnDeserializingAttribute&gt;.","pos":[0,96],"source":"Invokes the method marked with the <xref:System.Runtime.Serialization.OnDeserializingAttribute>."}]},{"pos":[10089,10153],"content":"The instance of the type that contains the method to be invoked.","needQuote":true,"needEscape":true,"nodes":[{"content":"The instance of the type that contains the method to be invoked.","pos":[0,64]}]},{"pos":[10850,10894],"content":"Records a fixup for one element in an array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Records a fixup for one element in an array.","pos":[0,44]}]},{"pos":[10906,11051],"content":"The fixup is for a specified element of a specified array. The value used during the fixup process is provided in the `objectRequired` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The fixup is for a specified element of a specified array.","pos":[0,58]},{"content":"The value used during the fixup process is provided in the <ph id=\"ph1\">`objectRequired`</ph> parameter.","pos":[59,145],"source":" The value used during the fixup process is provided in the `objectRequired` parameter."}]},{"pos":[11259,11302],"content":"The ID of the array used to record a fixup.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the array used to record a fixup.","pos":[0,43]}]},{"pos":[11363,11423],"content":"The index within <ph id=\"ph1\">`arrayFixup`</ph> that a fixup is requested for.","needQuote":true,"needEscape":true,"source":"The index within `arrayFixup` that a fixup is requested for."},{"pos":[11493,11584],"content":"The ID of the object that the current array element will point to after fixup is completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the object that the current array element will point to after fixup is completed.","pos":[0,91]}]},{"pos":[11793,11896],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arrayToBeFixed</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">objectRequired</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>arrayToBeFixed</code> or <code>objectRequired</code> parameter is less than or equal to zero."},{"pos":[11999,12096],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>index</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12704,12780],"content":"Records fixups for the specified elements in an array, to be executed later.","needQuote":true,"needEscape":true,"nodes":[{"content":"Records fixups for the specified elements in an array, to be executed later.","pos":[0,76]}]},{"pos":[12792,12936],"content":"The fixup is for specified elements of a specified array. The value used during the fixup process is provided in the `objectRequired` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The fixup is for specified elements of a specified array.","pos":[0,57]},{"content":"The value used during the fixup process is provided in the <ph id=\"ph1\">`objectRequired`</ph> parameter.","pos":[58,144],"source":" The value used during the fixup process is provided in the `objectRequired` parameter."}]},{"pos":[13148,13191],"content":"The ID of the array used to record a fixup.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the array used to record a fixup.","pos":[0,43]}]},{"pos":[13256,13332],"content":"The indexes within the multidimensional array that a fixup is requested for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The indexes within the multidimensional array that a fixup is requested for.","pos":[0,76]}]},{"pos":[13402,13481],"content":"The ID of the object the array elements will point to after fixup is completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the object the array elements will point to after fixup is completed.","pos":[0,79]}]},{"pos":[13690,13793],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arrayToBeFixed</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">objectRequired</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>arrayToBeFixed</code> or <code>objectRequired</code> parameter is less than or equal to zero."},{"pos":[13896,13995],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">indices</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>indices</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[14573,14632],"content":"Records a fixup for an object member, to be executed later.","needQuote":true,"needEscape":true,"nodes":[{"content":"Records a fixup for an object member, to be executed later.","pos":[0,59]}]},{"pos":[14644,14794],"content":"The fixup is for a specified member of a specified object. The value to be used during the fixup process is provided as the `objectRequired` argument.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The fixup is for a specified member of a specified object.","pos":[0,58]},{"content":"The value to be used during the fixup process is provided as the <ph id=\"ph1\">`objectRequired`</ph> argument.","pos":[59,150],"source":" The value to be used during the fixup process is provided as the `objectRequired` argument."}]},{"pos":[15007,15073],"content":"The ID of the object that needs the reference to <ph id=\"ph1\">`objectRequired`</ph>.","needQuote":true,"needEscape":true,"source":"The ID of the object that needs the reference to `objectRequired`."},{"pos":[15140,15211],"content":"The member name of <ph id=\"ph1\">`objectToBeFixed`</ph> where the fixup will be performed.","needQuote":true,"needEscape":true,"source":"The member name of `objectToBeFixed` where the fixup will be performed."},{"pos":[15281,15332],"content":"The ID of the object required by <ph id=\"ph1\">`objectToBeFixed`</ph>.","needQuote":true,"needEscape":true,"source":"The ID of the object required by `objectToBeFixed`."},{"pos":[15536,15636],"content":"<ph id=\"ph1\">&lt;code&gt;objectToBeFixed&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;objectRequired&lt;/code&gt;</ph> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"<code>objectToBeFixed</code> or <code>objectRequired</code> parameter is less than or equal to zero."},{"pos":[15739,15841],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">memberName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>memberName</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[16426,16490],"content":"Records a fixup for a member of an object, to be executed later.","needQuote":true,"needEscape":true,"nodes":[{"content":"Records a fixup for a member of an object, to be executed later.","pos":[0,64]}]},{"pos":[16502,16653],"content":"The fixup is for a specified member of a specified object. The value to be used during the fixup process is provided as the `objectRequired` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The fixup is for a specified member of a specified object.","pos":[0,58]},{"content":"The value to be used during the fixup process is provided as the <ph id=\"ph1\">`objectRequired`</ph> parameter.","pos":[59,151],"source":" The value to be used during the fixup process is provided as the `objectRequired` parameter."}]},{"pos":[16877,16954],"content":"The ID of the object that needs the reference to the <ph id=\"ph1\">`objectRequired`</ph> object.","needQuote":true,"needEscape":true,"source":"The ID of the object that needs the reference to the `objectRequired` object."},{"pos":[17032,17098],"content":"The member of <ph id=\"ph1\">`objectToBeFixed`</ph> where the fixup will be performed.","needQuote":true,"needEscape":true,"source":"The member of `objectToBeFixed` where the fixup will be performed."},{"pos":[17168,17219],"content":"The ID of the object required by <ph id=\"ph1\">`objectToBeFixed`</ph>.","needQuote":true,"needEscape":true,"source":"The ID of the object required by `objectToBeFixed`."},{"pos":[17416,17520],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectToBeFixed</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">objectRequired</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>objectToBeFixed</code> or <code>objectRequired</code> parameter is less than or equal to zero."},{"pos":[17623,17721],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">member</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>member</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18235,18320],"content":"Registers an object as it is deserialized, associating it with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Registers an object as it is deserialized, associating it with <code>objectID</code>."},{"pos":[18332,18701],"content":"<xref:System.Runtime.Serialization.ObjectManager> retains information about both the object and its ID. Later during deserialization, <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> can be used to determine whether a particular object ID has already been deserialized, or whether it is a forward reference to an object that has not yet been deserialized.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"<xref:System.Runtime.Serialization.ObjectManager> retains information about both the object and its ID. Later during deserialization, <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> can be used to determine whether a particular object ID has already been deserialized, or whether it is a forward reference to an object that has not yet been deserialized.","pos":[0,369],"nodes":[{"content":"&lt;xref:System.Runtime.Serialization.ObjectManager&gt; retains information about both the object and its ID.","pos":[0,103],"source":"<xref:System.Runtime.Serialization.ObjectManager> retains information about both the object and its ID."},{"content":"Later during deserialization, &lt;xref:System.Runtime.Serialization.ObjectManager.GetObject%2A&gt; can be used to determine whether a particular object ID has already been deserialized, or whether it is a forward reference to an object that has not yet been deserialized.","pos":[104,369],"source":" Later during deserialization, <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> can be used to determine whether a particular object ID has already been deserialized, or whether it is a forward reference to an object that has not yet been deserialized."}]}]},{"pos":[18864,18887],"content":"The object to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to register.","pos":[0,23]}]},{"pos":[18951,18984],"content":"The ID of the object to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the object to register.","pos":[0,33]}]},{"pos":[19172,19267],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>obj</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19382,19448],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>objectID</code> parameter is less than or equal to zero."},{"pos":[19597,19693],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been registered for an object other than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>objectID</code> has already been registered for an object other than <code>obj</code>."},{"pos":[20355,20540],"content":"Registers an object as it is deserialized, associating it with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and recording the <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> used with it.","needQuote":true,"needEscape":true,"source":"Registers an object as it is deserialized, associating it with <code>objectID</code>, and recording the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> used with it."},{"pos":[20552,20919],"content":"<xref:System.Runtime.Serialization.ObjectManager> retains the information about both the object and its ID. Later during deserialization, you can use <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> to discover whether a particular object ID has already been deserialized, or if it is a forward reference to an object that has not yet been deserialized.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"<xref:System.Runtime.Serialization.ObjectManager> retains the information about both the object and its ID. Later during deserialization, you can use <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> to discover whether a particular object ID has already been deserialized, or if it is a forward reference to an object that has not yet been deserialized.","pos":[0,367],"nodes":[{"content":"&lt;xref:System.Runtime.Serialization.ObjectManager&gt; retains the information about both the object and its ID.","pos":[0,107],"source":"<xref:System.Runtime.Serialization.ObjectManager> retains the information about both the object and its ID."},{"content":"Later during deserialization, you can use &lt;xref:System.Runtime.Serialization.ObjectManager.GetObject%2A&gt; to discover whether a particular object ID has already been deserialized, or if it is a forward reference to an object that has not yet been deserialized.","pos":[108,367],"source":" Later during deserialization, you can use <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> to discover whether a particular object ID has already been deserialized, or if it is a forward reference to an object that has not yet been deserialized."}]}]},{"pos":[21127,21150],"content":"The object to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to register.","pos":[0,23]}]},{"pos":[21214,21247],"content":"The ID of the object to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the object to register.","pos":[0,33]}]},{"pos":[21341,21716],"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> used if `obj` implements <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or has a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>. `info` will be completed with any required fixup information and then passed to the required object when that object is completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used if <ph id=\"ph1\">`obj`</ph> implements <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.ISerializable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or has a <bpt id=\"p3\">&lt;xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,244],"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> used if `obj` implements <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or has a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>."},{"content":"<ph id=\"ph1\">`info`</ph> will be completed with any required fixup information and then passed to the required object when that object is completed.","pos":[245,375],"source":"`info` will be completed with any required fixup information and then passed to the required object when that object is completed."}]},{"pos":[21904,21999],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>obj</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22114,22180],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>objectID</code> parameter is less than or equal to zero."},{"pos":[22329,22425],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been registered for an object other than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>objectID</code> has already been registered for an object other than <code>obj</code>."},{"pos":[23222,23406],"content":"Registers a member of an object as it is deserialized, associating it with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and recording the <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Registers a member of an object as it is deserialized, associating it with <code>objectID</code>, and recording the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref>."},{"pos":[23419,24488],"content":"You need to provide the `member` and `idOfContainingObj` parameters if `obj` is a <xref:System.ValueType> because of the way fixups are performed on <xref:System.ValueType> objects. The space to store the information for a <xref:System.ValueType> is allocated inline with its containing object. However, when the <xref:System.ValueType> is boxed to be registered with the <xref:System.Runtime.Serialization.ObjectManager>, it loses the connection with its containing object. To guarantee that fixups occur in the instance of the <xref:System.ValueType> stored in the containing object and not in the boxed instance, the <xref:System.Runtime.Serialization.ObjectManager> retains some additional information.       <xref:System.Runtime.Serialization.ObjectManager> retains information about both the object and its ID. Later during deserialization, <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> can be used to discover whether a particular object ID has already been deserialized, or whether it is a forward reference to an object not yet deserialized.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You need to provide the <ph id=\"ph1\">`member`</ph> and <ph id=\"ph2\">`idOfContainingObj`</ph> parameters if <ph id=\"ph3\">`obj`</ph> is a &lt;xref:System.ValueType&gt; because of the way fixups are performed on &lt;xref:System.ValueType&gt; objects.","pos":[0,181],"source":"You need to provide the `member` and `idOfContainingObj` parameters if `obj` is a <xref:System.ValueType> because of the way fixups are performed on <xref:System.ValueType> objects."},{"content":"The space to store the information for a &lt;xref:System.ValueType&gt; is allocated inline with its containing object.","pos":[182,294],"source":" The space to store the information for a <xref:System.ValueType> is allocated inline with its containing object."},{"content":"However, when the &lt;xref:System.ValueType&gt; is boxed to be registered with the &lt;xref:System.Runtime.Serialization.ObjectManager&gt;, it loses the connection with its containing object.","pos":[295,474],"source":" However, when the <xref:System.ValueType> is boxed to be registered with the <xref:System.Runtime.Serialization.ObjectManager>, it loses the connection with its containing object."},{"content":"To guarantee that fixups occur in the instance of the &lt;xref:System.ValueType&gt; stored in the containing object and not in the boxed instance, the &lt;xref:System.Runtime.Serialization.ObjectManager&gt; retains some additional information.","pos":[475,706],"source":" To guarantee that fixups occur in the instance of the <xref:System.ValueType> stored in the containing object and not in the boxed instance, the <xref:System.Runtime.Serialization.ObjectManager> retains some additional information."},{"content":"&lt;xref:System.Runtime.Serialization.ObjectManager&gt; retains information about both the object and its ID.","pos":[713,816],"source":"       <xref:System.Runtime.Serialization.ObjectManager> retains information about both the object and its ID."},{"content":"Later during deserialization, &lt;xref:System.Runtime.Serialization.ObjectManager.GetObject%2A&gt; can be used to discover whether a particular object ID has already been deserialized, or whether it is a forward reference to an object not yet deserialized.","pos":[817,1067],"source":" Later during deserialization, <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> can be used to discover whether a particular object ID has already been deserialized, or whether it is a forward reference to an object not yet deserialized."}]},{"pos":[24758,24781],"content":"The object to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to register.","pos":[0,23]}]},{"pos":[24845,24878],"content":"The ID of the object to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the object to register.","pos":[0,33]}]},{"pos":[24972,25347],"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> used if `obj` implements <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or has a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>. `info` will be completed with any required fixup information and then passed to the required object when that object is completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used if <ph id=\"ph1\">`obj`</ph> implements <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.ISerializable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or has a <bpt id=\"p3\">&lt;xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,244],"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> used if `obj` implements <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or has a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>."},{"content":"<ph id=\"ph1\">`info`</ph> will be completed with any required fixup information and then passed to the required object when that object is completed.","pos":[245,375],"source":"`info` will be completed with any required fixup information and then passed to the required object when that object is completed."}]},{"pos":[25420,25519],"content":"The ID of the object that contains `obj`. This parameter is required only if `obj` is a value type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the object that contains <ph id=\"ph1\">`obj`</ph>.","pos":[0,41],"source":"The ID of the object that contains `obj`."},{"content":"This parameter is required only if <ph id=\"ph1\">`obj`</ph> is a value type.","pos":[42,99],"source":" This parameter is required only if `obj` is a value type."}]},{"pos":[25597,25709],"content":"The field in the containing object where `obj` exists. This parameter has meaning only if `obj` is a value type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field in the containing object where <ph id=\"ph1\">`obj`</ph> exists.","pos":[0,54],"source":"The field in the containing object where `obj` exists."},{"content":"This parameter has meaning only if <ph id=\"ph1\">`obj`</ph> is a value type.","pos":[55,112],"source":" This parameter has meaning only if `obj` is a value type."}]},{"pos":[25897,25992],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>obj</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[26107,26173],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>objectID</code> parameter is less than or equal to zero."},{"pos":[26322,26578],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been registered for an object other than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">member</ph><ept id=\"p3\">&lt;/code&gt;</ept> is not a &lt;xref:System.Reflection.FieldInfo&gt; and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">member</ph><ept id=\"p4\">&lt;/code&gt;</ept> is not <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>objectID</code> has already been registered for an object other than <code>obj</code>, or <code>member</code> is not a <xref:System.Reflection.FieldInfo> and <code>member</code> is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[27429,27638],"content":"Registers a member of an array contained in an object while it is deserialized, associating it with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and recording the <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Registers a member of an array contained in an object while it is deserialized, associating it with <code>objectID</code>, and recording the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref>."},{"pos":[27651,28720],"content":"You need to provide the `member` and `idOfContainingObj` parameters if `obj` is a <xref:System.ValueType> because of the way fixups are performed on <xref:System.ValueType> objects. The space to store the information for a <xref:System.ValueType> is allocated inline with its containing object. However, when the <xref:System.ValueType> is boxed to be registered with the <xref:System.Runtime.Serialization.ObjectManager>, it loses the connection with its containing object. To guarantee that fixups occur in the instance of the <xref:System.ValueType> stored in the containing object and not in the boxed instance, the <xref:System.Runtime.Serialization.ObjectManager> retains some additional information.       <xref:System.Runtime.Serialization.ObjectManager> retains information about both the object and its ID. Later during deserialization, <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> can be used to discover whether a particular object ID has already been deserialized, or whether it is a forward reference to an object not yet deserialized.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You need to provide the <ph id=\"ph1\">`member`</ph> and <ph id=\"ph2\">`idOfContainingObj`</ph> parameters if <ph id=\"ph3\">`obj`</ph> is a &lt;xref:System.ValueType&gt; because of the way fixups are performed on &lt;xref:System.ValueType&gt; objects.","pos":[0,181],"source":"You need to provide the `member` and `idOfContainingObj` parameters if `obj` is a <xref:System.ValueType> because of the way fixups are performed on <xref:System.ValueType> objects."},{"content":"The space to store the information for a &lt;xref:System.ValueType&gt; is allocated inline with its containing object.","pos":[182,294],"source":" The space to store the information for a <xref:System.ValueType> is allocated inline with its containing object."},{"content":"However, when the &lt;xref:System.ValueType&gt; is boxed to be registered with the &lt;xref:System.Runtime.Serialization.ObjectManager&gt;, it loses the connection with its containing object.","pos":[295,474],"source":" However, when the <xref:System.ValueType> is boxed to be registered with the <xref:System.Runtime.Serialization.ObjectManager>, it loses the connection with its containing object."},{"content":"To guarantee that fixups occur in the instance of the &lt;xref:System.ValueType&gt; stored in the containing object and not in the boxed instance, the &lt;xref:System.Runtime.Serialization.ObjectManager&gt; retains some additional information.","pos":[475,706],"source":" To guarantee that fixups occur in the instance of the <xref:System.ValueType> stored in the containing object and not in the boxed instance, the <xref:System.Runtime.Serialization.ObjectManager> retains some additional information."},{"content":"&lt;xref:System.Runtime.Serialization.ObjectManager&gt; retains information about both the object and its ID.","pos":[713,816],"source":"       <xref:System.Runtime.Serialization.ObjectManager> retains information about both the object and its ID."},{"content":"Later during deserialization, &lt;xref:System.Runtime.Serialization.ObjectManager.GetObject%2A&gt; can be used to discover whether a particular object ID has already been deserialized, or whether it is a forward reference to an object not yet deserialized.","pos":[817,1067],"source":" Later during deserialization, <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> can be used to discover whether a particular object ID has already been deserialized, or whether it is a forward reference to an object not yet deserialized."}]},{"pos":[29008,29031],"content":"The object to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to register.","pos":[0,23]}]},{"pos":[29095,29128],"content":"The ID of the object to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the object to register.","pos":[0,33]}]},{"pos":[29222,29597],"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> used if `obj` implements <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or has a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>. `info` will be completed with any required fixup information and then passed to the required object when that object is completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used if <ph id=\"ph1\">`obj`</ph> implements <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.ISerializable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or has a <bpt id=\"p3\">&lt;xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,244],"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> used if `obj` implements <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or has a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>."},{"content":"<ph id=\"ph1\">`info`</ph> will be completed with any required fixup information and then passed to the required object when that object is completed.","pos":[245,375],"source":"`info` will be completed with any required fixup information and then passed to the required object when that object is completed."}]},{"pos":[29670,29769],"content":"The ID of the object that contains `obj`. This parameter is required only if `obj` is a value type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the object that contains <ph id=\"ph1\">`obj`</ph>.","pos":[0,41],"source":"The ID of the object that contains `obj`."},{"content":"This parameter is required only if <ph id=\"ph1\">`obj`</ph> is a value type.","pos":[42,99],"source":" This parameter is required only if `obj` is a value type."}]},{"pos":[29847,29959],"content":"The field in the containing object where `obj` exists. This parameter has meaning only if `obj` is a value type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field in the containing object where <ph id=\"ph1\">`obj`</ph> exists.","pos":[0,54],"source":"The field in the containing object where `obj` exists."},{"content":"This parameter has meaning only if <ph id=\"ph1\">`obj`</ph> is a value type.","pos":[55,112],"source":" This parameter has meaning only if `obj` is a value type."}]},{"pos":[30027,30257],"content":"If `obj` is a <xref:System.ValueType> and a member of an array, `arrayIndex` contains the index within that array where `obj` exists. `arrayIndex` is ignored if `obj` is not both a <xref:System.ValueType> and a member of an array.","needQuote":true,"needEscape":true,"nodes":[{"content":"If <ph id=\"ph1\">`obj`</ph> is a &lt;xref:System.ValueType&gt; and a member of an array, <ph id=\"ph2\">`arrayIndex`</ph> contains the index within that array where <ph id=\"ph3\">`obj`</ph> exists.","pos":[0,133],"source":"If `obj` is a <xref:System.ValueType> and a member of an array, `arrayIndex` contains the index within that array where `obj` exists."},{"content":"<ph id=\"ph1\">`arrayIndex`</ph> is ignored if <ph id=\"ph2\">`obj`</ph> is not both a &lt;xref:System.ValueType&gt; and a member of an array.","pos":[134,230],"source":"`arrayIndex` is ignored if `obj` is not both a <xref:System.ValueType> and a member of an array."}]},{"pos":[30445,30540],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>obj</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[30655,30721],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"The <code>objectID</code> parameter is less than or equal to zero."},{"pos":[30870,31125],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">objectID</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been registered for an object other than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">member</ph><ept id=\"p3\">&lt;/code&gt;</ept> is not a &lt;xref:System.Reflection.FieldInfo&gt; and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">member</ph><ept id=\"p4\">&lt;/code&gt;</ept> isn't <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>objectID</code> has already been registered for an object other than <code>obj</code>, or <code>member</code> is not a <xref:System.Reflection.FieldInfo> and <code>member</code> isn't <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Serialization.ObjectManager\n  id: ObjectManager\n  children:\n  - System.Runtime.Serialization.ObjectManager.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)\n  - System.Runtime.Serialization.ObjectManager.DoFixups\n  - System.Runtime.Serialization.ObjectManager.GetObject(System.Int64)\n  - System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent\n  - System.Runtime.Serialization.ObjectManager.RaiseOnDeserializingEvent(System.Object)\n  - System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32,System.Int64)\n  - System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32[],System.Int64)\n  - System.Runtime.Serialization.ObjectManager.RecordDelayedFixup(System.Int64,System.String,System.Int64)\n  - System.Runtime.Serialization.ObjectManager.RecordFixup(System.Int64,System.Reflection.MemberInfo,System.Int64)\n  - System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64)\n  - System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo)\n  - System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo)\n  - System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo,System.Int32[])\n  langs:\n  - csharp\n  name: ObjectManager\n  nameWithType: ObjectManager\n  fullName: System.Runtime.Serialization.ObjectManager\n  type: Class\n  summary: Keeps track of objects as they are deserialized.\n  remarks: \"During deserialization, the <xref:System.Runtime.Serialization.Formatter> queries the ObjectManager to determine whether a reference to an object in the serialized stream refers to an object that has already been deserialized (a backward reference), or to an object that has not yet been deserialized (a forward reference). If the reference in the serialized stream is a forward reference, then the <xref:System.Runtime.Serialization.Formatter> can register a fixup with the ObjectManager. If the reference in the serialized stream is a backward reference, the <xref:System.Runtime.Serialization.Formatter> immediately completes the reference. Fixup refers to the process of finalizing object references not already completed during the object deserialization process. After the required object has been deserialized, the ObjectManager will complete the reference.  \\n  \\n The ObjectManager follows a set of rules that dictate the fixup order. All objects that implement <xref:System.Runtime.Serialization.ISerializable> or have a <xref:System.Runtime.Serialization.ISerializationSurrogate> can expect to have all the objects that they transmitted through <xref:System.Runtime.Serialization.SerializationInfo> available when the object tree is deserialized. However, a parent object cannot presume that all its child objects will be fully completed when it is fully deserialized. All child objects will be present but not all the grandchild objects will necessarily be present. If an object needs to take certain actions that depend on executing code on its child objects, it can delay these actions, implement the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and execute the code only when it is called back on this interface.\"\n  example:\n  - \"The following code example shows how to use the ObjectManager class to walk through an object graph, traversing to each object only once.  \\n  \\n [!code-cs[ObjectManager#1](~/add/codesnippet/csharp/t-system.runtime.seriali_0_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class ObjectManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: ObjectManager(ISurrogateSelector,StreamingContext)\n  nameWithType: ObjectManager.ObjectManager(ISurrogateSelector,StreamingContext)\n  fullName: System.Runtime.Serialization.ObjectManager.ObjectManager(ISurrogateSelector,StreamingContext)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.Serialization.ObjectManager\"></xref> class.\n  syntax:\n    content: public ObjectManager (System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: selector\n      type: System.Runtime.Serialization.ISurrogateSelector\n      description: The surrogate selector to use. The <xref href=\"System.Runtime.Serialization.ISurrogateSelector\"></xref> determines the correct surrogate to use when deserializing objects of a given type. At deserialization time, the surrogate selector creates a new instance of the object from the information transmitted on the stream.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The streaming context. The <xref:System.Runtime.Serialization.StreamingContext> is not used by <xref uid=\"langword_csharp_ObjectManager\" name=\"ObjectManager\" href=\"\"></xref>, but is passed as a parameter to any objects implementing <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or having a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>. These objects can take specific actions depending on the source of the information to deserialize.\n  overload: System.Runtime.Serialization.ObjectManager.#ctor*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.DoFixups\n  id: DoFixups\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: DoFixups()\n  nameWithType: ObjectManager.DoFixups()\n  fullName: System.Runtime.Serialization.ObjectManager.DoFixups()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Performs all the recorded fixups.\n  remarks: The fixups are carried out by any appropriate surrogate, the object itself (if it implements <xref:System.Runtime.Serialization.ISerializable>), or the default implementation.\n  syntax:\n    content: public virtual void DoFixups ();\n    parameters: []\n  overload: System.Runtime.Serialization.ObjectManager.DoFixups*\n  exceptions:\n  - type: System.Runtime.Serialization.SerializationException\n    commentId: T:System.Runtime.Serialization.SerializationException\n    description: A fixup was not successfully completed.\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.GetObject(System.Int64)\n  id: GetObject(System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: GetObject(Int64)\n  nameWithType: ObjectManager.GetObject(Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.GetObject(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Returns the object with the specified object ID.\n  remarks: An object can be registered and issued an object ID with a call to the <xref:System.Runtime.Serialization.ObjectManager.RegisterObject%2A> method.\n  syntax:\n    content: public virtual object GetObject (long objectID);\n    parameters:\n    - id: objectID\n      type: System.Int64\n      description: The ID of the requested object.\n    return:\n      type: System.Object\n      description: The object with the specified object ID if it has been previously stored or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no such object has been registered.\n  overload: System.Runtime.Serialization.ObjectManager.GetObject*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>objectID</code> parameter is less than or equal to zero.\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent\n  id: RaiseDeserializationEvent\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: RaiseDeserializationEvent()\n  nameWithType: ObjectManager.RaiseDeserializationEvent()\n  fullName: System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Raises the deserialization event to any registered object that implements <xref href=\"System.Runtime.Serialization.IDeserializationCallback\"></xref>.\n  syntax:\n    content: public virtual void RaiseDeserializationEvent ();\n    parameters: []\n  overload: System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.RaiseOnDeserializingEvent(System.Object)\n  id: RaiseOnDeserializingEvent(System.Object)\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: RaiseOnDeserializingEvent(Object)\n  nameWithType: ObjectManager.RaiseOnDeserializingEvent(Object)\n  fullName: System.Runtime.Serialization.ObjectManager.RaiseOnDeserializingEvent(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Invokes the method marked with the <xref:System.Runtime.Serialization.OnDeserializingAttribute>.\n  syntax:\n    content: public void RaiseOnDeserializingEvent (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The instance of the type that contains the method to be invoked.\n  overload: System.Runtime.Serialization.ObjectManager.RaiseOnDeserializingEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32,System.Int64)\n  id: RecordArrayElementFixup(System.Int64,System.Int32,System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: RecordArrayElementFixup(Int64,Int32,Int64)\n  nameWithType: ObjectManager.RecordArrayElementFixup(Int64,Int32,Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(Int64,Int32,Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Records a fixup for one element in an array.\n  remarks: The fixup is for a specified element of a specified array. The value used during the fixup process is provided in the `objectRequired` parameter.\n  syntax:\n    content: public virtual void RecordArrayElementFixup (long arrayToBeFixed, int index, long objectRequired);\n    parameters:\n    - id: arrayToBeFixed\n      type: System.Int64\n      description: The ID of the array used to record a fixup.\n    - id: index\n      type: System.Int32\n      description: The index within `arrayFixup` that a fixup is requested for.\n    - id: objectRequired\n      type: System.Int64\n      description: The ID of the object that the current array element will point to after fixup is completed.\n  overload: System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>arrayToBeFixed</code> or <code>objectRequired</code> parameter is less than or equal to zero.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>index</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32[],System.Int64)\n  id: RecordArrayElementFixup(System.Int64,System.Int32[],System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: RecordArrayElementFixup(Int64,Int32[],Int64)\n  nameWithType: ObjectManager.RecordArrayElementFixup(Int64,Int32[],Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(Int64,Int32[],Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Records fixups for the specified elements in an array, to be executed later.\n  remarks: The fixup is for specified elements of a specified array. The value used during the fixup process is provided in the `objectRequired` parameter.\n  syntax:\n    content: public virtual void RecordArrayElementFixup (long arrayToBeFixed, int[] indices, long objectRequired);\n    parameters:\n    - id: arrayToBeFixed\n      type: System.Int64\n      description: The ID of the array used to record a fixup.\n    - id: indices\n      type: System.Int32[]\n      description: The indexes within the multidimensional array that a fixup is requested for.\n    - id: objectRequired\n      type: System.Int64\n      description: The ID of the object the array elements will point to after fixup is completed.\n  overload: System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>arrayToBeFixed</code> or <code>objectRequired</code> parameter is less than or equal to zero.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>indices</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.RecordDelayedFixup(System.Int64,System.String,System.Int64)\n  id: RecordDelayedFixup(System.Int64,System.String,System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: RecordDelayedFixup(Int64,String,Int64)\n  nameWithType: ObjectManager.RecordDelayedFixup(Int64,String,Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.RecordDelayedFixup(Int64,String,Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Records a fixup for an object member, to be executed later.\n  remarks: The fixup is for a specified member of a specified object. The value to be used during the fixup process is provided as the `objectRequired` argument.\n  syntax:\n    content: public virtual void RecordDelayedFixup (long objectToBeFixed, string memberName, long objectRequired);\n    parameters:\n    - id: objectToBeFixed\n      type: System.Int64\n      description: The ID of the object that needs the reference to `objectRequired`.\n    - id: memberName\n      type: System.String\n      description: The member name of `objectToBeFixed` where the fixup will be performed.\n    - id: objectRequired\n      type: System.Int64\n      description: The ID of the object required by `objectToBeFixed`.\n  overload: System.Runtime.Serialization.ObjectManager.RecordDelayedFixup*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>objectToBeFixed</code> or <code>objectRequired</code> parameter is less than or equal to zero.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>memberName</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.RecordFixup(System.Int64,System.Reflection.MemberInfo,System.Int64)\n  id: RecordFixup(System.Int64,System.Reflection.MemberInfo,System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: RecordFixup(Int64,MemberInfo,Int64)\n  nameWithType: ObjectManager.RecordFixup(Int64,MemberInfo,Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.RecordFixup(Int64,MemberInfo,Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Records a fixup for a member of an object, to be executed later.\n  remarks: The fixup is for a specified member of a specified object. The value to be used during the fixup process is provided as the `objectRequired` parameter.\n  syntax:\n    content: public virtual void RecordFixup (long objectToBeFixed, System.Reflection.MemberInfo member, long objectRequired);\n    parameters:\n    - id: objectToBeFixed\n      type: System.Int64\n      description: The ID of the object that needs the reference to the `objectRequired` object.\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: The member of `objectToBeFixed` where the fixup will be performed.\n    - id: objectRequired\n      type: System.Int64\n      description: The ID of the object required by `objectToBeFixed`.\n  overload: System.Runtime.Serialization.ObjectManager.RecordFixup*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>objectToBeFixed</code> or <code>objectRequired</code> parameter is less than or equal to zero.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>member</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64)\n  id: RegisterObject(System.Object,System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: RegisterObject(Object,Int64)\n  nameWithType: ObjectManager.RegisterObject(Object,Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.RegisterObject(Object,Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Registers an object as it is deserialized, associating it with <code>objectID</code>.\n  remarks: <xref:System.Runtime.Serialization.ObjectManager> retains information about both the object and its ID. Later during deserialization, <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> can be used to determine whether a particular object ID has already been deserialized, or whether it is a forward reference to an object that has not yet been deserialized.\n  syntax:\n    content: public virtual void RegisterObject (object obj, long objectID);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to register.\n    - id: objectID\n      type: System.Int64\n      description: The ID of the object to register.\n  overload: System.Runtime.Serialization.ObjectManager.RegisterObject*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>obj</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>objectID</code> parameter is less than or equal to zero.\n  - type: System.Runtime.Serialization.SerializationException\n    commentId: T:System.Runtime.Serialization.SerializationException\n    description: The <code>objectID</code> has already been registered for an object other than <code>obj</code>.\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo)\n  id: RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo)\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: RegisterObject(Object,Int64,SerializationInfo)\n  nameWithType: ObjectManager.RegisterObject(Object,Int64,SerializationInfo)\n  fullName: System.Runtime.Serialization.ObjectManager.RegisterObject(Object,Int64,SerializationInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Registers an object as it is deserialized, associating it with <code>objectID</code>, and recording the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> used with it.\n  remarks: <xref:System.Runtime.Serialization.ObjectManager> retains the information about both the object and its ID. Later during deserialization, you can use <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> to discover whether a particular object ID has already been deserialized, or if it is a forward reference to an object that has not yet been deserialized.\n  syntax:\n    content: public void RegisterObject (object obj, long objectID, System.Runtime.Serialization.SerializationInfo info);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to register.\n    - id: objectID\n      type: System.Int64\n      description: The ID of the object to register.\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> used if `obj` implements <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or has a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>. `info` will be completed with any required fixup information and then passed to the required object when that object is completed.\n  overload: System.Runtime.Serialization.ObjectManager.RegisterObject*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>obj</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>objectID</code> parameter is less than or equal to zero.\n  - type: System.Runtime.Serialization.SerializationException\n    commentId: T:System.Runtime.Serialization.SerializationException\n    description: The <code>objectID</code> has already been registered for an object other than <code>obj</code>.\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo)\n  id: RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo)\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo)\n  nameWithType: ObjectManager.RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo)\n  fullName: System.Runtime.Serialization.ObjectManager.RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Registers a member of an object as it is deserialized, associating it with <code>objectID</code>, and recording the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref>.\n  remarks: \"You need to provide the `member` and `idOfContainingObj` parameters if `obj` is a <xref:System.ValueType> because of the way fixups are performed on <xref:System.ValueType> objects. The space to store the information for a <xref:System.ValueType> is allocated inline with its containing object. However, when the <xref:System.ValueType> is boxed to be registered with the <xref:System.Runtime.Serialization.ObjectManager>, it loses the connection with its containing object. To guarantee that fixups occur in the instance of the <xref:System.ValueType> stored in the containing object and not in the boxed instance, the <xref:System.Runtime.Serialization.ObjectManager> retains some additional information.  \\n  \\n <xref:System.Runtime.Serialization.ObjectManager> retains information about both the object and its ID. Later during deserialization, <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> can be used to discover whether a particular object ID has already been deserialized, or whether it is a forward reference to an object not yet deserialized.\"\n  syntax:\n    content: public void RegisterObject (object obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to register.\n    - id: objectID\n      type: System.Int64\n      description: The ID of the object to register.\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> used if `obj` implements <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or has a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>. `info` will be completed with any required fixup information and then passed to the required object when that object is completed.\n    - id: idOfContainingObj\n      type: System.Int64\n      description: The ID of the object that contains `obj`. This parameter is required only if `obj` is a value type.\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: The field in the containing object where `obj` exists. This parameter has meaning only if `obj` is a value type.\n  overload: System.Runtime.Serialization.ObjectManager.RegisterObject*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>obj</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>objectID</code> parameter is less than or equal to zero.\n  - type: System.Runtime.Serialization.SerializationException\n    commentId: T:System.Runtime.Serialization.SerializationException\n    description: The <code>objectID</code> has already been registered for an object other than <code>obj</code>, or <code>member</code> is not a <xref:System.Reflection.FieldInfo> and <code>member</code> is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo,System.Int32[])\n  id: RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo,System.Int32[])\n  parent: System.Runtime.Serialization.ObjectManager\n  langs:\n  - csharp\n  name: RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo,Int32[])\n  nameWithType: ObjectManager.RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo,Int32[])\n  fullName: System.Runtime.Serialization.ObjectManager.RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo,Int32[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Registers a member of an array contained in an object while it is deserialized, associating it with <code>objectID</code>, and recording the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref>.\n  remarks: \"You need to provide the `member` and `idOfContainingObj` parameters if `obj` is a <xref:System.ValueType> because of the way fixups are performed on <xref:System.ValueType> objects. The space to store the information for a <xref:System.ValueType> is allocated inline with its containing object. However, when the <xref:System.ValueType> is boxed to be registered with the <xref:System.Runtime.Serialization.ObjectManager>, it loses the connection with its containing object. To guarantee that fixups occur in the instance of the <xref:System.ValueType> stored in the containing object and not in the boxed instance, the <xref:System.Runtime.Serialization.ObjectManager> retains some additional information.  \\n  \\n <xref:System.Runtime.Serialization.ObjectManager> retains information about both the object and its ID. Later during deserialization, <xref:System.Runtime.Serialization.ObjectManager.GetObject%2A> can be used to discover whether a particular object ID has already been deserialized, or whether it is a forward reference to an object not yet deserialized.\"\n  syntax:\n    content: public void RegisterObject (object obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member, int[] arrayIndex);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to register.\n    - id: objectID\n      type: System.Int64\n      description: The ID of the object to register.\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> used if `obj` implements <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> or has a <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\"></xref>. `info` will be completed with any required fixup information and then passed to the required object when that object is completed.\n    - id: idOfContainingObj\n      type: System.Int64\n      description: The ID of the object that contains `obj`. This parameter is required only if `obj` is a value type.\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: The field in the containing object where `obj` exists. This parameter has meaning only if `obj` is a value type.\n    - id: arrayIndex\n      type: System.Int32[]\n      description: If `obj` is a <xref:System.ValueType> and a member of an array, `arrayIndex` contains the index within that array where `obj` exists. `arrayIndex` is ignored if `obj` is not both a <xref:System.ValueType> and a member of an array.\n  overload: System.Runtime.Serialization.ObjectManager.RegisterObject*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>obj</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>objectID</code> parameter is less than or equal to zero.\n  - type: System.Runtime.Serialization.SerializationException\n    commentId: T:System.Runtime.Serialization.SerializationException\n    description: The <code>objectID</code> has already been registered for an object other than <code>obj</code>, or <code>member</code> is not a <xref:System.Reflection.FieldInfo> and <code>member</code> isn't <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.Runtime.Serialization.SerializationException\n  isExternal: true\n  name: System.Runtime.Serialization.SerializationException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Runtime.Serialization.ObjectManager.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: ObjectManager(ISurrogateSelector,StreamingContext)\n  nameWithType: ObjectManager.ObjectManager(ISurrogateSelector,StreamingContext)\n  fullName: System.Runtime.Serialization.ObjectManager.ObjectManager(ISurrogateSelector,StreamingContext)\n- uid: System.Runtime.Serialization.ISurrogateSelector\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISurrogateSelector\n  nameWithType: ISurrogateSelector\n  fullName: System.Runtime.Serialization.ISurrogateSelector\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Runtime.Serialization.ObjectManager.DoFixups\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: DoFixups()\n  nameWithType: ObjectManager.DoFixups()\n  fullName: System.Runtime.Serialization.ObjectManager.DoFixups()\n- uid: System.Runtime.Serialization.ObjectManager.GetObject(System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: GetObject(Int64)\n  nameWithType: ObjectManager.GetObject(Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.GetObject(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RaiseDeserializationEvent()\n  nameWithType: ObjectManager.RaiseDeserializationEvent()\n  fullName: System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent()\n- uid: System.Runtime.Serialization.ObjectManager.RaiseOnDeserializingEvent(System.Object)\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RaiseOnDeserializingEvent(Object)\n  nameWithType: ObjectManager.RaiseOnDeserializingEvent(Object)\n  fullName: System.Runtime.Serialization.ObjectManager.RaiseOnDeserializingEvent(Object)\n- uid: System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32,System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RecordArrayElementFixup(Int64,Int32,Int64)\n  nameWithType: ObjectManager.RecordArrayElementFixup(Int64,Int32,Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(Int64,Int32,Int64)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32[],System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RecordArrayElementFixup(Int64,Int32[],Int64)\n  nameWithType: ObjectManager.RecordArrayElementFixup(Int64,Int32[],Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(Int64,Int32[],Int64)\n- uid: System.Int32[]\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: Int32[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.Serialization.ObjectManager.RecordDelayedFixup(System.Int64,System.String,System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RecordDelayedFixup(Int64,String,Int64)\n  nameWithType: ObjectManager.RecordDelayedFixup(Int64,String,Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.RecordDelayedFixup(Int64,String,Int64)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.Serialization.ObjectManager.RecordFixup(System.Int64,System.Reflection.MemberInfo,System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RecordFixup(Int64,MemberInfo,Int64)\n  nameWithType: ObjectManager.RecordFixup(Int64,MemberInfo,Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.RecordFixup(Int64,MemberInfo,Int64)\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: true\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64)\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RegisterObject(Object,Int64)\n  nameWithType: ObjectManager.RegisterObject(Object,Int64)\n  fullName: System.Runtime.Serialization.ObjectManager.RegisterObject(Object,Int64)\n- uid: System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo)\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RegisterObject(Object,Int64,SerializationInfo)\n  nameWithType: ObjectManager.RegisterObject(Object,Int64,SerializationInfo)\n  fullName: System.Runtime.Serialization.ObjectManager.RegisterObject(Object,Int64,SerializationInfo)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo)\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo)\n  nameWithType: ObjectManager.RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo)\n  fullName: System.Runtime.Serialization.ObjectManager.RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo)\n- uid: System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo,System.Int32[])\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo,Int32[])\n  nameWithType: ObjectManager.RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo,Int32[])\n  fullName: System.Runtime.Serialization.ObjectManager.RegisterObject(Object,Int64,SerializationInfo,Int64,MemberInfo,Int32[])\n- uid: System.Runtime.Serialization.ObjectManager.#ctor*\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: ObjectManager\n  nameWithType: ObjectManager.ObjectManager\n- uid: System.Runtime.Serialization.ObjectManager.DoFixups*\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: DoFixups\n  nameWithType: ObjectManager.DoFixups\n- uid: System.Runtime.Serialization.ObjectManager.GetObject*\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: GetObject\n  nameWithType: ObjectManager.GetObject\n- uid: System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent*\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RaiseDeserializationEvent\n  nameWithType: ObjectManager.RaiseDeserializationEvent\n- uid: System.Runtime.Serialization.ObjectManager.RaiseOnDeserializingEvent*\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RaiseOnDeserializingEvent\n  nameWithType: ObjectManager.RaiseOnDeserializingEvent\n- uid: System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup*\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RecordArrayElementFixup\n  nameWithType: ObjectManager.RecordArrayElementFixup\n- uid: System.Runtime.Serialization.ObjectManager.RecordDelayedFixup*\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RecordDelayedFixup\n  nameWithType: ObjectManager.RecordDelayedFixup\n- uid: System.Runtime.Serialization.ObjectManager.RecordFixup*\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RecordFixup\n  nameWithType: ObjectManager.RecordFixup\n- uid: System.Runtime.Serialization.ObjectManager.RegisterObject*\n  parent: System.Runtime.Serialization.ObjectManager\n  isExternal: false\n  name: RegisterObject\n  nameWithType: ObjectManager.RegisterObject\n"}