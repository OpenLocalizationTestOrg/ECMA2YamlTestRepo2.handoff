{"nodes":[{"pos":[3900,3971],"content":"Represents a vector with three  single-precision floating-point values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a vector with three  single-precision floating-point values.","pos":[0,71]}]},{"pos":[3983,4048],"content":"The Vector3 structure provides support for hardware acceleration.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Vector3 structure provides support for hardware acceleration.","pos":[0,65]}]},{"pos":[4637,4744],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Vector3\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object whose three elements have the same value.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Numerics.Vector3\"></xref> object whose three elements have the same value."},{"pos":[4875,4917],"content":"The value to assign to all three elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to assign to all three elements.","pos":[0,42]}]},{"pos":[5418,5581],"content":"Creates a   new <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Vector3\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from the specified <bpt id=\"p2\">&lt;xref href=\"System.Numerics.Vector2\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object and the specified value.","needQuote":true,"needEscape":true,"source":"Creates a   new <xref href=\"System.Numerics.Vector3\"></xref> object from the specified <xref href=\"System.Numerics.Vector2\"></xref> object and the specified value."},{"pos":[5749,5778],"content":"The vector with two elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector with two elements.","pos":[0,29]}]},{"pos":[5836,5927],"content":"The additional value to assign to the <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Vector3.Z\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> field.","needQuote":true,"needEscape":true,"source":"The additional value to assign to the <xref href=\"System.Numerics.Vector3.Z\"></xref> field."},{"pos":[6454,6512],"content":"Creates a vector whose elements have the specified values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a vector whose elements have the specified values.","pos":[0,58]}]},{"pos":[6653,6733],"content":"The value to assign to the <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Vector3.X\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> field.","needQuote":true,"needEscape":true,"source":"The value to assign to the <xref href=\"System.Numerics.Vector3.X\"></xref> field."},{"pos":[6791,6871],"content":"The value to assign to the <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Vector3.Y\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> field.","needQuote":true,"needEscape":true,"source":"The value to assign to the <xref href=\"System.Numerics.Vector3.Y\"></xref> field."},{"pos":[6929,7009],"content":"The value to assign to the <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Vector3.Z\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> field.","needQuote":true,"needEscape":true,"source":"The value to assign to the <xref href=\"System.Numerics.Vector3.Z\"></xref> field."},{"pos":[7438,7537],"content":"Returns a vector whose elements are the absolute values of each of the specified vector's elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a vector whose elements are the absolute values of each of the specified vector's elements.","pos":[0,99]}]},{"pos":[7723,7732],"content":"A vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"A vector.","pos":[0,9]}]},{"pos":[7800,7826],"content":"The absolute value vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The absolute value vector.","pos":[0,26]}]},{"pos":[8325,8351],"content":"Adds two vectors together.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds two vectors together.","pos":[0,26]}]},{"pos":[8566,8590],"content":"The first vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to add.","pos":[0,24]}]},{"pos":[8662,8687],"content":"The second vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to add.","pos":[0,25]}]},{"pos":[8755,8773],"content":"The summed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The summed vector.","pos":[0,18]}]},{"pos":[9354,9411],"content":"Restricts a vector between a minimum and a maximum value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Restricts a vector between a minimum and a maximum value.","pos":[0,57]}]},{"pos":[9659,9682],"content":"The vector to restrict.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to restrict.","pos":[0,23]}]},{"pos":[9752,9770],"content":"The minimum value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The minimum value.","pos":[0,18]}]},{"pos":[9840,9858],"content":"The maximum value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum value.","pos":[0,18]}]},{"pos":[9926,9948],"content":"The restricted vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The restricted vector.","pos":[0,22]}]},{"pos":[10379,10434],"content":"Copies the elements of the vector to a specified array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the elements of the vector to a specified array.","pos":[0,55]}]},{"pos":[10691,10713],"content":"The destination array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination array.","pos":[0,22]}]},{"pos":[10874,10957],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11052,11128],"content":"The number of elements in the current instance is greater than in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of elements in the current instance is greater than in the array.","pos":[0,76]}]},{"pos":[11215,11254],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","needQuote":true,"needEscape":true,"source":"<code>array</code> is multidimensional."},{"pos":[11669,11763],"content":"Copies the elements of the vector to a specified array starting at a specified index position.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the elements of the vector to a specified array starting at a specified index position.","pos":[0,94]}]},{"pos":[11776,11961],"content":"`array` must have a sufficient number of elements to accommodate the three vector elements. In other words, elements `index`, `index` + 1, and `index` + 2 must already exist in `array`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">`array`</ph> must have a sufficient number of elements to accommodate the three vector elements.","pos":[0,91],"source":"`array` must have a sufficient number of elements to accommodate the three vector elements."},{"content":"In other words, elements <ph id=\"ph1\">`index`</ph>, <ph id=\"ph2\">`index`</ph> + 1, and <ph id=\"ph3\">`index`</ph> + 2 must already exist in <ph id=\"ph4\">`array`</ph>.","pos":[92,185],"source":" In other words, elements `index`, `index` + 1, and `index` + 2 must already exist in `array`."}]},{"pos":[12112,12134],"content":"The destination array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination array.","pos":[0,22]}]},{"pos":[12195,12254],"content":"The index at which to copy the first element of the vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index at which to copy the first element of the vector.","pos":[0,59]}]},{"pos":[12415,12498],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12593,12669],"content":"The number of elements in the current instance is greater than in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of elements in the current instance is greater than in the array.","pos":[0,76]}]},{"pos":[12785,12908],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is greater than or equal to the array length.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than or equal to the array length.","pos":[44,119],"source":"       -or-       <code>index</code> is greater than or equal to the array length."}]},{"pos":[12996,13035],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","needQuote":true,"needEscape":true,"source":"<code>array</code> is multidimensional."},{"pos":[13486,13528],"content":"Computes the cross product of two vectors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the cross product of two vectors.","pos":[0,42]}]},{"pos":[13753,13770],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[13844,13862],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[13930,13948],"content":"The cross product.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cross product.","pos":[0,18]}]},{"pos":[14474,14535],"content":"Computes the Euclidean distance between the two given points.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the Euclidean distance between the two given points.","pos":[0,61]}]},{"pos":[14742,14758],"content":"The first point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first point.","pos":[0,16]}]},{"pos":[14831,14848],"content":"The second point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second point.","pos":[0,17]}]},{"pos":[14906,14919],"content":"The distance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The distance.","pos":[0,13]}]},{"pos":[15483,15551],"content":"Returns the Euclidean distance squared between two specified points.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the Euclidean distance squared between two specified points.","pos":[0,68]}]},{"pos":[15765,15781],"content":"The first point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first point.","pos":[0,16]}]},{"pos":[15854,15871],"content":"The second point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second point.","pos":[0,17]}]},{"pos":[15929,15950],"content":"The distance squared.","needQuote":true,"needEscape":true,"nodes":[{"content":"The distance squared.","pos":[0,21]}]},{"pos":[16476,16515],"content":"Divides the first vector by the second.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides the first vector by the second.","pos":[0,39]}]},{"pos":[16733,16750],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[16822,16840],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[16908,16947],"content":"The vector resulting from the division.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector resulting from the division.","pos":[0,39]}]},{"pos":[17441,17498],"content":"Divides the specified vector by a specified scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides the specified vector by a specified scalar value.","pos":[0,57]}]},{"pos":[17700,17711],"content":"The vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector.","pos":[0,11]}]},{"pos":[17775,17792],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[17860,17902],"content":"The vector that results from the division.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector that results from the division.","pos":[0,42]}]},{"pos":[18404,18443],"content":"Returns the dot product of two vectors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the dot product of two vectors.","pos":[0,39]}]},{"pos":[18648,18665],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[18739,18757],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[18815,18831],"content":"The dot product.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dot product.","pos":[0,16]}]},{"pos":[19273,19355],"content":"Returns a value that indicates whether this instance and another vector are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether this instance and another vector are equal.","pos":[0,82]}]},{"pos":[19367,19516],"content":"Two vectors are equal if their <xref:System.Numerics.Vector3>, <xref:System.Numerics.Vector3>, and <xref:System.Numerics.Vector3> elements are equal.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Two vectors are equal if their &lt;xref:System.Numerics.Vector3&gt;, &lt;xref:System.Numerics.Vector3&gt;, and &lt;xref:System.Numerics.Vector3&gt; elements are equal.","pos":[0,149],"source":"Two vectors are equal if their <xref:System.Numerics.Vector3>, <xref:System.Numerics.Vector3>, and <xref:System.Numerics.Vector3> elements are equal."}]},{"pos":[19679,19696],"content":"The other vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other vector.","pos":[0,17]}]},{"pos":[19755,19920],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two vectors are equal; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two vectors are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[20342,20428],"content":"Returns a value that indicates whether this instance and a specified object are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether this instance and a specified object are equal.","pos":[0,86]}]},{"pos":[20440,20576],"content":"The current instance and <ph id=\"ph1\">`obj`</ph> are equal if <ph id=\"ph2\">`obj`</ph> is a &lt;xref:System.Numerics.Vector3&gt; object and their corresponding elements are equal.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The current instance and `obj` are equal if `obj` is a <xref:System.Numerics.Vector3> object and their corresponding elements are equal."},{"pos":[20717,20765],"content":"The object to compare with the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare with the current instance.","pos":[0,48]}]},{"pos":[20824,21235],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>. If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current instance and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept><bpt id=\"p4\">&lt;xref uid=\"langword_csharp_\" name=\"\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[0,243],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, the method returns <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[244,411],"source":" If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[21634,21674],"content":"Returns the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]},{"pos":[21809,21823],"content":"The hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash code.","pos":[0,14]}]},{"pos":[22202,22243],"content":"Returns the length of this vector object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the length of this vector object.","pos":[0,41]}]},{"pos":[22367,22387],"content":"The vector's length.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector's length.","pos":[0,20]}]},{"pos":[22796,22837],"content":"Returns the length of the vector squared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the length of the vector squared.","pos":[0,41]}]},{"pos":[22849,22957],"content":"This operation offers better performance than a call to the <xref:System.Numerics.Vector3.Length%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation offers better performance than a call to the &lt;xref:System.Numerics.Vector3.Length%2A&gt; method.","pos":[0,108],"source":"This operation offers better performance than a call to the <xref:System.Numerics.Vector3.Length%2A> method."}]},{"pos":[23088,23116],"content":"The vector's length squared.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector's length squared.","pos":[0,28]}]},{"pos":[23679,23760],"content":"Performs a linear interpolation between two vectors based on the given weighting.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a linear interpolation between two vectors based on the given weighting.","pos":[0,81]}]},{"pos":[23995,24012],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[24085,24103],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[24166,24228],"content":"A value between 0 and 1 that indicates the weight of <ph id=\"ph1\">`value2`</ph>.","needQuote":true,"needEscape":true,"source":"A value between 0 and 1 that indicates the weight of `value2`."},{"pos":[24296,24320],"content":"The interpolated vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interpolated vector.","pos":[0,24]}]},{"pos":[24820,24926],"content":"Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.","pos":[0,106]}]},{"pos":[25146,25163],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[25236,25254],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[25322,25343],"content":"The maximized vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximized vector.","pos":[0,21]}]},{"pos":[25842,25948],"content":"Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.","pos":[0,106]}]},{"pos":[26168,26185],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[26258,26276],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[26344,26365],"content":"The minimized vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The minimized vector.","pos":[0,21]}]},{"pos":[26889,26921],"content":"Multiplies two vectors together.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies two vectors together.","pos":[0,32]}]},{"pos":[27141,27158],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[27230,27248],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[27316,27335],"content":"The product vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The product vector.","pos":[0,19]}]},{"pos":[27841,27883],"content":"Multiplies a vector by a specified scalar.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies a vector by a specified scalar.","pos":[0,42]}]},{"pos":[28085,28108],"content":"The vector to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to multiply.","pos":[0,23]}]},{"pos":[28170,28187],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[28255,28273],"content":"The scaled vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled vector.","pos":[0,18]}]},{"pos":[28779,28827],"content":"Multiplies a scalar value by a specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies a scalar value by a specified vector.","pos":[0,48]}]},{"pos":[29019,29036],"content":"The scaled value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled value.","pos":[0,17]}]},{"pos":[29108,29119],"content":"The vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector.","pos":[0,11]}]},{"pos":[29187,29205],"content":"The scaled vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled vector.","pos":[0,18]}]},{"pos":[29652,29679],"content":"Negates a specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Negates a specified vector.","pos":[0,27]}]},{"pos":[29868,29889],"content":"The vector to negate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to negate.","pos":[0,21]}]},{"pos":[29957,29976],"content":"The negated vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The negated vector.","pos":[0,19]}]},{"pos":[30436,30527],"content":"Returns a vector with the same direction as the specified vector, but with a length of one.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a vector with the same direction as the specified vector, but with a length of one.","pos":[0,91]}]},{"pos":[30719,30743],"content":"The vector to normalize.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to normalize.","pos":[0,24]}]},{"pos":[30811,30833],"content":"The normalized vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The normalized vector.","pos":[0,22]}]},{"pos":[31191,31239],"content":"Gets a vector whose 3 elements are equal to one.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a vector whose 3 elements are equal to one.","pos":[0,48]}]},{"pos":[31381,31470],"content":"A vector whose three elements are equal to one (that is, it returns the vector <ph id=\"ph1\">`(1,1,1)`</ph>.","needQuote":true,"needEscape":true,"source":"A vector whose three elements are equal to one (that is, it returns the vector `(1,1,1)`."},{"pos":[32011,32037],"content":"Adds two vectors together.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds two vectors together.","pos":[0,26]}]},{"pos":[32049,32143],"content":"The Addition method defines the addition operation for <xref:System.Numerics.Vector3> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Addition method defines the addition operation for &lt;xref:System.Numerics.Vector3&gt; objects.","pos":[0,94],"source":"The Addition method defines the addition operation for <xref:System.Numerics.Vector3> objects."}]},{"pos":[32366,32390],"content":"The first vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to add.","pos":[0,24]}]},{"pos":[32462,32487],"content":"The second vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to add.","pos":[0,25]}]},{"pos":[32555,32573],"content":"The summed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The summed vector.","pos":[0,18]}]},{"pos":[33122,33161],"content":"Divides the first vector by the second.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides the first vector by the second.","pos":[0,39]}]},{"pos":[33173,33267],"content":"The Division method defines the division operation for <xref:System.Numerics.Vector3> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Division method defines the division operation for &lt;xref:System.Numerics.Vector3&gt; objects.","pos":[0,94],"source":"The Division method defines the division operation for <xref:System.Numerics.Vector3> objects."}]},{"pos":[33490,33507],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[33579,33597],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[33665,33743],"content":"The vector that results from dividing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The vector that results from dividing <code>left</code> by <code>right</code>."},{"pos":[34269,34326],"content":"Divides the specified vector by a specified scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides the specified vector by a specified scalar value.","pos":[0,57]}]},{"pos":[34338,34432],"content":"The Division method defines the division operation for <xref:System.Numerics.Vector3> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Division method defines the division operation for &lt;xref:System.Numerics.Vector3&gt; objects.","pos":[0,94],"source":"The Division method defines the division operation for <xref:System.Numerics.Vector3> objects."}]},{"pos":[34642,34653],"content":"The vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector.","pos":[0,11]}]},{"pos":[34716,34733],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[34801,34828],"content":"The result of the division.","needQuote":true,"needEscape":true,"nodes":[{"content":"The result of the division.","pos":[0,27]}]},{"pos":[35377,35472],"content":"Returns a value that indicates whether each pair of elements in two specified vectors is equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether each pair of elements in two specified vectors is equal.","pos":[0,95]}]},{"pos":[35484,35612],"content":"Two &lt;xref:System.Numerics.Vector3&gt; objects are equal if each element in <ph id=\"ph1\">`left`</ph> is equal to the corresponding element in <ph id=\"ph2\">`right`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Two <xref:System.Numerics.Vector3> objects are equal if each element in `left` is equal to the corresponding element in `right`."},{"pos":[35816,35844],"content":"The first vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to compare.","pos":[0,28]}]},{"pos":[35916,35945],"content":"The second vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to compare.","pos":[0,29]}]},{"pos":[36004,36194],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p3\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[36753,36828],"content":"Returns a value that indicates whether two specified vectors are not equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether two specified vectors are not equal.","pos":[0,75]}]},{"pos":[37034,37062],"content":"The first vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to compare.","pos":[0,28]}]},{"pos":[37134,37163],"content":"The second vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to compare.","pos":[0,29]}]},{"pos":[37222,37416],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p3\">&lt;/code&gt;</ept> are not equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[37967,37999],"content":"Multiplies two vectors together.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies two vectors together.","pos":[0,32]}]},{"pos":[38011,38111],"content":"The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector3> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Multiply method defines the multiplication operation for &lt;xref:System.Numerics.Vector3&gt; objects.","pos":[0,100],"source":"The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector3> objects."}]},{"pos":[38334,38351],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[38423,38441],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[38509,38528],"content":"The product vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The product vector.","pos":[0,19]}]},{"pos":[39054,39115],"content":"Multiples the specified vector by the specified scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiples the specified vector by the specified scalar value.","pos":[0,61]}]},{"pos":[39127,39227],"content":"The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector3> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Multiply method defines the multiplication operation for &lt;xref:System.Numerics.Vector3&gt; objects.","pos":[0,100],"source":"The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector3> objects."}]},{"pos":[39432,39443],"content":"The vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector.","pos":[0,11]}]},{"pos":[39505,39522],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[39590,39608],"content":"The scaled vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled vector.","pos":[0,18]}]},{"pos":[40134,40185],"content":"Multiples the scalar value by the specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiples the scalar value by the specified vector.","pos":[0,51]}]},{"pos":[40197,40297],"content":"The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector3> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Multiply method defines the multiplication operation for &lt;xref:System.Numerics.Vector3&gt; objects.","pos":[0,100],"source":"The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector3> objects."}]},{"pos":[40492,40503],"content":"The vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector.","pos":[0,11]}]},{"pos":[40575,40592],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[40660,40678],"content":"The scaled vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled vector.","pos":[0,18]}]},{"pos":[41242,41285],"content":"Subtracts the second vector from the first.","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtracts the second vector from the first.","pos":[0,43]}]},{"pos":[41297,41397],"content":"The Subtraction method defines the subtraction operation for <xref:System.Numerics.Vector3> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Subtraction method defines the subtraction operation for &lt;xref:System.Numerics.Vector3&gt; objects.","pos":[0,100],"source":"The Subtraction method defines the subtraction operation for <xref:System.Numerics.Vector3> objects."}]},{"pos":[41623,41640],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[41712,41730],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[41798,41881],"content":"The vector that results from subtracting <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">right</ph><ept id=\"p1\">&lt;/code&gt;</ept> from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The vector that results from subtracting <code>right</code> from <code>left</code>."},{"pos":[42386,42415],"content":"Negates the specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Negates the specified vector.","pos":[0,29]}]},{"pos":[42427,42532],"content":"The UnaryNegation method defines the unary negation operation for <xref:System.Numerics.Vector3> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The UnaryNegation method defines the unary negation operation for &lt;xref:System.Numerics.Vector3&gt; objects.","pos":[0,105],"source":"The UnaryNegation method defines the unary negation operation for <xref:System.Numerics.Vector3> objects."}]},{"pos":[42731,42752],"content":"The vector to negate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to negate.","pos":[0,21]}]},{"pos":[42820,42839],"content":"The negated vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The negated vector.","pos":[0,19]}]},{"pos":[43371,43450],"content":"Returns the reflection of a vector off a surface that has the specified normal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the reflection of a vector off a surface that has the specified normal.","pos":[0,79]}]},{"pos":[43674,43692],"content":"The source vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source vector.","pos":[0,18]}]},{"pos":[43765,43811],"content":"The normal of the surface being reflected off.","needQuote":true,"needEscape":true,"nodes":[{"content":"The normal of the surface being reflected off.","pos":[0,46]}]},{"pos":[43879,43900],"content":"The reflected vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reflected vector.","pos":[0,21]}]},{"pos":[44366,44459],"content":"Returns a vector whose elements are the square root of each of a specified vector's elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a vector whose elements are the square root of each of a specified vector's elements.","pos":[0,93]}]},{"pos":[44652,44661],"content":"A vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"A vector.","pos":[0,9]}]},{"pos":[44729,44752],"content":"The square root vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The square root vector.","pos":[0,23]}]},{"pos":[45283,45326],"content":"Subtracts the second vector from the first.","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtracts the second vector from the first.","pos":[0,43]}]},{"pos":[45546,45563],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[45635,45653],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[45721,45743],"content":"The difference vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The difference vector.","pos":[0,22]}]},{"pos":[46129,46212],"content":"Returns the string representation of the current instance using default formatting.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the string representation of the current instance using default formatting.","pos":[0,83]}]},{"pos":[46224,46650],"content":"This method returns a string in which each element of the vector is formatted using the \"G\" (general) format string and the formatting conventions of the current thread culture. The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method returns a string in which each element of the vector is formatted using the \"G\" (general) format string and the formatting conventions of the current thread culture. The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.","pos":[0,426],"nodes":[{"content":"This method returns a string in which each element of the vector is formatted using the \"G\" (general) format string and the formatting conventions of the current thread culture.","pos":[0,177]},{"content":"The \"<ph id=\"ph1\">\\&lt;</ph>\" and \"&gt;\" characters are used to begin and end the string, and the current culture's &lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName&gt; property followed by a space is used to separate each element.","pos":[178,426],"source":" The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element."}]}]},{"pos":[46786,46836],"content":"The string representation of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string representation of the current instance.","pos":[0,50]}]},{"pos":[47270,47392],"content":"Returns the string representation of the current instance using the specified format string to format individual elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the string representation of the current instance using the specified format string to format individual elements.","pos":[0,122]}]},{"pos":[47404,47795],"content":"This method returns a string in which each element of the vector is formatted using `format` and the current culture's formatting conventions. The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method returns a string in which each element of the vector is formatted using <ph id=\"ph1\">`format`</ph> and the current culture's formatting conventions.","pos":[0,142],"source":"This method returns a string in which each element of the vector is formatted using `format` and the current culture's formatting conventions."},{"content":"The \"<ph id=\"ph1\">\\&lt;</ph>\" and \"&gt;\" characters are used to begin and end the string, and the current culture's &lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName&gt; property followed by a space is used to separate each element.","pos":[143,391],"source":" The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element."}]},{"pos":[47937,48109],"content":"A <bpt id=\"p1\">[</bpt>standard<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id=\"p2\">[</bpt>custom numeric format string<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept> that defines the format of individual elements.","needQuote":true,"needEscape":true,"source":"A [standard](~/add/includes/ajax-current-ext-md.md) or [custom numeric format string](~/add/includes/ajax-current-ext-md.md) that defines the format of individual elements."},{"pos":[48167,48217],"content":"The string representation of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string representation of the current instance.","pos":[0,50]}]},{"pos":[48745,48939],"content":"Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.","pos":[0,194]}]},{"pos":[48951,49314],"content":"This method returns a string in which each element of the vector is formatted using `format` and `formatProvider`. The \"\\<\" and \">\" characters are used to begin and end the string, and the format provider's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method returns a string in which each element of the vector is formatted using <ph id=\"ph1\">`format`</ph> and <ph id=\"ph2\">`formatProvider`</ph>.","pos":[0,114],"source":"This method returns a string in which each element of the vector is formatted using `format` and `formatProvider`."},{"content":"The \"<ph id=\"ph1\">\\&lt;</ph>\" and \"&gt;\" characters are used to begin and end the string, and the format provider's &lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName&gt; property followed by a space is used to separate each element.","pos":[115,363],"source":" The \"\\<\" and \">\" characters are used to begin and end the string, and the format provider's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element."}]},{"pos":[49488,49660],"content":"A <bpt id=\"p1\">[</bpt>standard<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id=\"p2\">[</bpt>custom numeric format string<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept> that defines the format of individual elements.","needQuote":true,"needEscape":true,"source":"A [standard](~/add/includes/ajax-current-ext-md.md) or [custom numeric format string](~/add/includes/ajax-current-ext-md.md) that defines the format of individual elements."},{"pos":[49740,49812],"content":"A format provider that supplies culture-specific formatting information.","needQuote":true,"needEscape":true,"nodes":[{"content":"A format provider that supplies culture-specific formatting information.","pos":[0,72]}]},{"pos":[49870,49920],"content":"The string representation of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string representation of the current instance.","pos":[0,50]}]},{"pos":[50464,50510],"content":"Transforms a vector by a specified 4x4 matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms a vector by a specified 4x4 matrix.","pos":[0,46]}]},{"pos":[50742,50766],"content":"The vector to transform.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to transform.","pos":[0,24]}]},{"pos":[50841,50867],"content":"The transformation matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformation matrix.","pos":[0,26]}]},{"pos":[50935,50958],"content":"The transformed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed vector.","pos":[0,23]}]},{"pos":[51508,51571],"content":"Transforms a vector by the specified Quaternion rotation value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms a vector by the specified Quaternion rotation value.","pos":[0,63]}]},{"pos":[51800,51821],"content":"The vector to rotate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to rotate.","pos":[0,21]}]},{"pos":[51899,51921],"content":"The rotation to apply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rotation to apply.","pos":[0,22]}]},{"pos":[51989,52012],"content":"The transformed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed vector.","pos":[0,23]}]},{"pos":[52587,52638],"content":"Transforms a vector normal by the given 4x4 matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms a vector normal by the given 4x4 matrix.","pos":[0,51]}]},{"pos":[52872,52890],"content":"The source vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source vector.","pos":[0,18]}]},{"pos":[52965,52976],"content":"The matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"The matrix.","pos":[0,11]}]},{"pos":[53044,53067],"content":"The transformed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed vector.","pos":[0,23]}]},{"pos":[53441,53465],"content":"Gets the vector (1,0,0).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the vector (1,0,0).","pos":[0,24]}]},{"pos":[53609,53630],"content":"The vector <ph id=\"ph1\">`(1,0,0)`</ph>.","needQuote":true,"needEscape":true,"source":"The vector `(1,0,0)`."},{"pos":[53994,54018],"content":"Gets the vector (0,1,0).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the vector (0,1,0).","pos":[0,24]}]},{"pos":[54162,54184],"content":"The vector <ph id=\"ph1\">`(0,1,0)`</ph>..","needQuote":true,"needEscape":true,"source":"The vector `(0,1,0)`.."},{"pos":[54548,54572],"content":"Gets the vector (0,0,1).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the vector (0,0,1).","pos":[0,24]}]},{"pos":[54716,54737],"content":"The vector <ph id=\"ph1\">`(0,0,1)`</ph>.","needQuote":true,"needEscape":true,"source":"The vector `(0,0,1)`."},{"pos":[55078,55108],"content":"The X component of the vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X component of the vector.","pos":[0,30]}]},{"pos":[55205,55217],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[55515,55545],"content":"The Y component of the vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Y component of the vector.","pos":[0,30]}]},{"pos":[55642,55654],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[55952,55982],"content":"The Z component of the vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Z component of the vector.","pos":[0,30]}]},{"pos":[56079,56091],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[56407,56456],"content":"Gets a vector whose 3 elements are equal to zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a vector whose 3 elements are equal to zero.","pos":[0,49]}]},{"pos":[56599,56689],"content":"A vector whose three elements are equal to zero (that is, it returns the vector <ph id=\"ph1\">`(0,0,0)`</ph>.","needQuote":true,"needEscape":true,"source":"A vector whose three elements are equal to zero (that is, it returns the vector `(0,0,0)`."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Numerics.Vector3\n  id: Vector3\n  children:\n  - System.Numerics.Vector3.#ctor(System.Single)\n  - System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)\n  - System.Numerics.Vector3.Abs(System.Numerics.Vector3)\n  - System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.CopyTo(System.Single[])\n  - System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)\n  - System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Equals(System.Numerics.Vector3)\n  - System.Numerics.Vector3.Equals(System.Object)\n  - System.Numerics.Vector3.GetHashCode\n  - System.Numerics.Vector3.Length\n  - System.Numerics.Vector3.LengthSquared\n  - System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)\n  - System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Negate(System.Numerics.Vector3)\n  - System.Numerics.Vector3.Normalize(System.Numerics.Vector3)\n  - System.Numerics.Vector3.One\n  - System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)\n  - System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)\n  - System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.ToString\n  - System.Numerics.Vector3.ToString(System.String)\n  - System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)\n  - System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  - System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)\n  - System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  - System.Numerics.Vector3.UnitX\n  - System.Numerics.Vector3.UnitY\n  - System.Numerics.Vector3.UnitZ\n  - System.Numerics.Vector3.X\n  - System.Numerics.Vector3.Y\n  - System.Numerics.Vector3.Z\n  - System.Numerics.Vector3.Zero\n  langs:\n  - csharp\n  name: Vector3\n  nameWithType: Vector3\n  fullName: System.Numerics.Vector3\n  type: Struct\n  summary: Represents a vector with three  single-precision floating-point values.\n  remarks: The Vector3 structure provides support for hardware acceleration.\n  syntax:\n    content: 'public struct Vector3 : IEquatable<System.Numerics.Vector3>, IFormattable'\n  inheritance:\n  - System.ValueType\n  implements:\n  - System.IEquatable<System.Numerics.Vector3>\n  - System.IFormattable\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.#ctor(System.Single)\n  id: '#ctor(System.Single)'\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Vector3(Single)\n  nameWithType: Vector3.Vector3(Single)\n  fullName: System.Numerics.Vector3.Vector3(Single)\n  type: Constructor\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a new <xref href=\"System.Numerics.Vector3\"></xref> object whose three elements have the same value.\n  syntax:\n    content: public Vector3 (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The value to assign to all three elements.\n  overload: System.Numerics.Vector3.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)\n  id: '#ctor(System.Numerics.Vector2,System.Single)'\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Vector3(Vector2,Single)\n  nameWithType: Vector3.Vector3(Vector2,Single)\n  fullName: System.Numerics.Vector3.Vector3(Vector2,Single)\n  type: Constructor\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a   new <xref href=\"System.Numerics.Vector3\"></xref> object from the specified <xref href=\"System.Numerics.Vector2\"></xref> object and the specified value.\n  syntax:\n    content: public Vector3 (System.Numerics.Vector2 value, float z);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: The vector with two elements.\n    - id: z\n      type: System.Single\n      description: The additional value to assign to the <xref href=\"System.Numerics.Vector3.Z\"></xref> field.\n  overload: System.Numerics.Vector3.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)\n  id: '#ctor(System.Single,System.Single,System.Single)'\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Vector3(Single,Single,Single)\n  nameWithType: Vector3.Vector3(Single,Single,Single)\n  fullName: System.Numerics.Vector3.Vector3(Single,Single,Single)\n  type: Constructor\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a vector whose elements have the specified values.\n  syntax:\n    content: public Vector3 (float x, float y, float z);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The value to assign to the <xref href=\"System.Numerics.Vector3.X\"></xref> field.\n    - id: y\n      type: System.Single\n      description: The value to assign to the <xref href=\"System.Numerics.Vector3.Y\"></xref> field.\n    - id: z\n      type: System.Single\n      description: The value to assign to the <xref href=\"System.Numerics.Vector3.Z\"></xref> field.\n  overload: System.Numerics.Vector3.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Abs(System.Numerics.Vector3)\n  id: Abs(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Abs(Vector3)\n  nameWithType: Vector3.Abs(Vector3)\n  fullName: System.Numerics.Vector3.Abs(Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a vector whose elements are the absolute values of each of the specified vector's elements.\n  syntax:\n    content: public static System.Numerics.Vector3 Abs (System.Numerics.Vector3 value);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: A vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The absolute value vector.\n  overload: System.Numerics.Vector3.Abs*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Add(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Add(Vector3,Vector3)\n  nameWithType: Vector3.Add(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Add(Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Adds two vectors together.\n  syntax:\n    content: public static System.Numerics.Vector3 Add (System.Numerics.Vector3 left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The first vector to add.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The second vector to add.\n    return:\n      type: System.Numerics.Vector3\n      description: The summed vector.\n  overload: System.Numerics.Vector3.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Clamp(Vector3,Vector3,Vector3)\n  nameWithType: Vector3.Clamp(Vector3,Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Clamp(Vector3,Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Restricts a vector between a minimum and a maximum value.\n  syntax:\n    content: public static System.Numerics.Vector3 Clamp (System.Numerics.Vector3 value1, System.Numerics.Vector3 min, System.Numerics.Vector3 max);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: The vector to restrict.\n    - id: min\n      type: System.Numerics.Vector3\n      description: The minimum value.\n    - id: max\n      type: System.Numerics.Vector3\n      description: The maximum value.\n    return:\n      type: System.Numerics.Vector3\n      description: The restricted vector.\n  overload: System.Numerics.Vector3.Clamp*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.CopyTo(System.Single[])\n  id: CopyTo(System.Single[])\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: CopyTo(Single[])\n  nameWithType: Vector3.CopyTo(Single[])\n  fullName: System.Numerics.Vector3.CopyTo(Single[])\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Copies the elements of the vector to a specified array.\n  remarks: '`array` must have at least three elements. The method copies the vector''s elements starting at index 0.'\n  syntax:\n    content: public void CopyTo (float[] array);\n    parameters:\n    - id: array\n      type: System.Single[]\n      description: The destination array.\n  overload: System.Numerics.Vector3.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The number of elements in the current instance is greater than in the array.\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: <code>array</code> is multidimensional.\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)\n  id: CopyTo(System.Single[],System.Int32)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: CopyTo(Single[],Int32)\n  nameWithType: Vector3.CopyTo(Single[],Int32)\n  fullName: System.Numerics.Vector3.CopyTo(Single[],Int32)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Copies the elements of the vector to a specified array starting at a specified index position.\n  remarks: '`array` must have a sufficient number of elements to accommodate the three vector elements. In other words, elements `index`, `index` + 1, and `index` + 2 must already exist in `array`.'\n  syntax:\n    content: public void CopyTo (float[] array, int index);\n    parameters:\n    - id: array\n      type: System.Single[]\n      description: The destination array.\n    - id: index\n      type: System.Int32\n      description: The index at which to copy the first element of the vector.\n  overload: System.Numerics.Vector3.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The number of elements in the current instance is greater than in the array.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than or equal to the array length.\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: <code>array</code> is multidimensional.\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Cross(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Cross(Vector3,Vector3)\n  nameWithType: Vector3.Cross(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Cross(Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Computes the cross product of two vectors.\n  syntax:\n    content: public static System.Numerics.Vector3 Cross (System.Numerics.Vector3 vector1, System.Numerics.Vector3 vector2);\n    parameters:\n    - id: vector1\n      type: System.Numerics.Vector3\n      description: The first vector.\n    - id: vector2\n      type: System.Numerics.Vector3\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The cross product.\n  overload: System.Numerics.Vector3.Cross*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Distance(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Distance(Vector3,Vector3)\n  nameWithType: Vector3.Distance(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Distance(Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Computes the Euclidean distance between the two given points.\n  syntax:\n    content: public static float Distance (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: The first point.\n    - id: value2\n      type: System.Numerics.Vector3\n      description: The second point.\n    return:\n      type: System.Single\n      description: The distance.\n  overload: System.Numerics.Vector3.Distance*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: DistanceSquared(Vector3,Vector3)\n  nameWithType: Vector3.DistanceSquared(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.DistanceSquared(Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the Euclidean distance squared between two specified points.\n  syntax:\n    content: public static float DistanceSquared (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: The first point.\n    - id: value2\n      type: System.Numerics.Vector3\n      description: The second point.\n    return:\n      type: System.Single\n      description: The distance squared.\n  overload: System.Numerics.Vector3.DistanceSquared*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Divide(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Divide(Vector3,Vector3)\n  nameWithType: Vector3.Divide(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Divide(Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Divides the first vector by the second.\n  syntax:\n    content: public static System.Numerics.Vector3 Divide (System.Numerics.Vector3 left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The vector resulting from the division.\n  overload: System.Numerics.Vector3.Divide*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)\n  id: Divide(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Divide(Vector3,Single)\n  nameWithType: Vector3.Divide(Vector3,Single)\n  fullName: System.Numerics.Vector3.Divide(Vector3,Single)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Divides the specified vector by a specified scalar value.\n  syntax:\n    content: public static System.Numerics.Vector3 Divide (System.Numerics.Vector3 left, float divisor);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The vector.\n    - id: divisor\n      type: System.Single\n      description: The scalar value.\n    return:\n      type: System.Numerics.Vector3\n      description: The vector that results from the division.\n  overload: System.Numerics.Vector3.Divide*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Dot(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Dot(Vector3,Vector3)\n  nameWithType: Vector3.Dot(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Dot(Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the dot product of two vectors.\n  syntax:\n    content: public static float Dot (System.Numerics.Vector3 vector1, System.Numerics.Vector3 vector2);\n    parameters:\n    - id: vector1\n      type: System.Numerics.Vector3\n      description: The first vector.\n    - id: vector2\n      type: System.Numerics.Vector3\n      description: The second vector.\n    return:\n      type: System.Single\n      description: The dot product.\n  overload: System.Numerics.Vector3.Dot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Equals(System.Numerics.Vector3)\n  id: Equals(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Equals(Vector3)\n  nameWithType: Vector3.Equals(Vector3)\n  fullName: System.Numerics.Vector3.Equals(Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether this instance and another vector are equal.\n  remarks: Two vectors are equal if their <xref:System.Numerics.Vector3>, <xref:System.Numerics.Vector3>, and <xref:System.Numerics.Vector3> elements are equal.\n  syntax:\n    content: public bool Equals (System.Numerics.Vector3 other);\n    parameters:\n    - id: other\n      type: System.Numerics.Vector3\n      description: The other vector.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two vectors are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Vector3.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Vector3.Equals(Object)\n  fullName: System.Numerics.Vector3.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether this instance and a specified object are equal.\n  remarks: The current instance and `obj` are equal if `obj` is a <xref:System.Numerics.Vector3> object and their corresponding elements are equal.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare with the current instance.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>. If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Vector3.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Vector3.GetHashCode()\n  fullName: System.Numerics.Vector3.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code.\n  overload: System.Numerics.Vector3.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Length\n  id: Length\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Length()\n  nameWithType: Vector3.Length()\n  fullName: System.Numerics.Vector3.Length()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the length of this vector object.\n  syntax:\n    content: public float Length ();\n    parameters: []\n    return:\n      type: System.Single\n      description: The vector's length.\n  overload: System.Numerics.Vector3.Length*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.LengthSquared\n  id: LengthSquared\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: LengthSquared()\n  nameWithType: Vector3.LengthSquared()\n  fullName: System.Numerics.Vector3.LengthSquared()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the length of the vector squared.\n  remarks: This operation offers better performance than a call to the <xref:System.Numerics.Vector3.Length%2A> method.\n  syntax:\n    content: public float LengthSquared ();\n    parameters: []\n    return:\n      type: System.Single\n      description: The vector's length squared.\n  overload: System.Numerics.Vector3.LengthSquared*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)\n  id: Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Lerp(Vector3,Vector3,Single)\n  nameWithType: Vector3.Lerp(Vector3,Vector3,Single)\n  fullName: System.Numerics.Vector3.Lerp(Vector3,Vector3,Single)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Performs a linear interpolation between two vectors based on the given weighting.\n  syntax:\n    content: public static System.Numerics.Vector3 Lerp (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2, float amount);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: The first vector.\n    - id: value2\n      type: System.Numerics.Vector3\n      description: The second vector.\n    - id: amount\n      type: System.Single\n      description: A value between 0 and 1 that indicates the weight of `value2`.\n    return:\n      type: System.Numerics.Vector3\n      description: The interpolated vector.\n  overload: System.Numerics.Vector3.Lerp*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Max(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Max(Vector3,Vector3)\n  nameWithType: Vector3.Max(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Max(Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.\n  syntax:\n    content: public static System.Numerics.Vector3 Max (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: The first vector.\n    - id: value2\n      type: System.Numerics.Vector3\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The maximized vector.\n  overload: System.Numerics.Vector3.Max*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Min(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Min(Vector3,Vector3)\n  nameWithType: Vector3.Min(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Min(Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.\n  syntax:\n    content: public static System.Numerics.Vector3 Min (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: The first vector.\n    - id: value2\n      type: System.Numerics.Vector3\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The minimized vector.\n  overload: System.Numerics.Vector3.Min*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Multiply(Vector3,Vector3)\n  nameWithType: Vector3.Multiply(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Multiply(Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiplies two vectors together.\n  syntax:\n    content: public static System.Numerics.Vector3 Multiply (System.Numerics.Vector3 left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The product vector.\n  overload: System.Numerics.Vector3.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)\n  id: Multiply(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Multiply(Vector3,Single)\n  nameWithType: Vector3.Multiply(Vector3,Single)\n  fullName: System.Numerics.Vector3.Multiply(Vector3,Single)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiplies a vector by a specified scalar.\n  syntax:\n    content: public static System.Numerics.Vector3 Multiply (System.Numerics.Vector3 left, float right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The vector to multiply.\n    - id: right\n      type: System.Single\n      description: The scalar value.\n    return:\n      type: System.Numerics.Vector3\n      description: The scaled vector.\n  overload: System.Numerics.Vector3.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)\n  id: Multiply(System.Single,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Multiply(Single,Vector3)\n  nameWithType: Vector3.Multiply(Single,Vector3)\n  fullName: System.Numerics.Vector3.Multiply(Single,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiplies a scalar value by a specified vector.\n  syntax:\n    content: public static System.Numerics.Vector3 Multiply (float left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Single\n      description: The scaled value.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The scaled vector.\n  overload: System.Numerics.Vector3.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Negate(System.Numerics.Vector3)\n  id: Negate(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Negate(Vector3)\n  nameWithType: Vector3.Negate(Vector3)\n  fullName: System.Numerics.Vector3.Negate(Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Negates a specified vector.\n  syntax:\n    content: public static System.Numerics.Vector3 Negate (System.Numerics.Vector3 value);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: The vector to negate.\n    return:\n      type: System.Numerics.Vector3\n      description: The negated vector.\n  overload: System.Numerics.Vector3.Negate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Normalize(System.Numerics.Vector3)\n  id: Normalize(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Normalize(Vector3)\n  nameWithType: Vector3.Normalize(Vector3)\n  fullName: System.Numerics.Vector3.Normalize(Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a vector with the same direction as the specified vector, but with a length of one.\n  syntax:\n    content: public static System.Numerics.Vector3 Normalize (System.Numerics.Vector3 value);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: The vector to normalize.\n    return:\n      type: System.Numerics.Vector3\n      description: The normalized vector.\n  overload: System.Numerics.Vector3.Normalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.One\n  id: One\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: One\n  nameWithType: Vector3.One\n  fullName: System.Numerics.Vector3.One\n  type: Property\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Gets a vector whose 3 elements are equal to one.\n  syntax:\n    content: public static System.Numerics.Vector3 One { get; }\n    return:\n      type: System.Numerics.Vector3\n      description: A vector whose three elements are equal to one (that is, it returns the vector `(1,1,1)`.\n  overload: System.Numerics.Vector3.One*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: op_Addition(Vector3,Vector3)\n  nameWithType: Vector3.op_Addition(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Addition(Vector3,Vector3)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Adds two vectors together.\n  remarks: The Addition method defines the addition operation for <xref:System.Numerics.Vector3> objects.\n  syntax:\n    content: public static System.Numerics.Vector3 op_Addition (System.Numerics.Vector3 left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The first vector to add.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The second vector to add.\n    return:\n      type: System.Numerics.Vector3\n      description: The summed vector.\n  overload: System.Numerics.Vector3.op_Addition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Division(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: op_Division(Vector3,Vector3)\n  nameWithType: Vector3.op_Division(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Division(Vector3,Vector3)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Divides the first vector by the second.\n  remarks: The Division method defines the division operation for <xref:System.Numerics.Vector3> objects.\n  syntax:\n    content: public static System.Numerics.Vector3 op_Division (System.Numerics.Vector3 left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The vector that results from dividing <code>left</code> by <code>right</code>.\n  overload: System.Numerics.Vector3.op_Division*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)\n  id: op_Division(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: op_Division(Vector3,Single)\n  nameWithType: Vector3.op_Division(Vector3,Single)\n  fullName: System.Numerics.Vector3.op_Division(Vector3,Single)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Divides the specified vector by a specified scalar value.\n  remarks: The Division method defines the division operation for <xref:System.Numerics.Vector3> objects.\n  syntax:\n    content: public static System.Numerics.Vector3 op_Division (System.Numerics.Vector3 value1, float value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: The vector.\n    - id: value2\n      type: System.Single\n      description: The scalar value.\n    return:\n      type: System.Numerics.Vector3\n      description: The result of the division.\n  overload: System.Numerics.Vector3.op_Division*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: op_Equality(Vector3,Vector3)\n  nameWithType: Vector3.op_Equality(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Equality(Vector3,Vector3)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether each pair of elements in two specified vectors is equal.\n  remarks: Two <xref:System.Numerics.Vector3> objects are equal if each element in `left` is equal to the corresponding element in `right`.\n  syntax:\n    content: public static bool op_Equality (System.Numerics.Vector3 left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The first vector to compare.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The second vector to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Vector3.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: op_Inequality(Vector3,Vector3)\n  nameWithType: Vector3.op_Inequality(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Inequality(Vector3,Vector3)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether two specified vectors are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Numerics.Vector3 left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The first vector to compare.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The second vector to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Vector3.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: op_Multiply(Vector3,Vector3)\n  nameWithType: Vector3.op_Multiply(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Vector3)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiplies two vectors together.\n  remarks: The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector3> objects.\n  syntax:\n    content: public static System.Numerics.Vector3 op_Multiply (System.Numerics.Vector3 left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The product vector.\n  overload: System.Numerics.Vector3.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)\n  id: op_Multiply(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: op_Multiply(Vector3,Single)\n  nameWithType: Vector3.op_Multiply(Vector3,Single)\n  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Single)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiples the specified vector by the specified scalar value.\n  remarks: The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector3> objects.\n  syntax:\n    content: public static System.Numerics.Vector3 op_Multiply (System.Numerics.Vector3 left, float right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The vector.\n    - id: right\n      type: System.Single\n      description: The scalar value.\n    return:\n      type: System.Numerics.Vector3\n      description: The scaled vector.\n  overload: System.Numerics.Vector3.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)\n  id: op_Multiply(System.Single,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: op_Multiply(Single,Vector3)\n  nameWithType: Vector3.op_Multiply(Single,Vector3)\n  fullName: System.Numerics.Vector3.op_Multiply(Single,Vector3)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiples the scalar value by the specified vector.\n  remarks: The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector3> objects.\n  syntax:\n    content: public static System.Numerics.Vector3 op_Multiply (float left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Single\n      description: The vector.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The scalar value.\n    return:\n      type: System.Numerics.Vector3\n      description: The scaled vector.\n  overload: System.Numerics.Vector3.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: op_Subtraction(Vector3,Vector3)\n  nameWithType: Vector3.op_Subtraction(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Subtraction(Vector3,Vector3)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Subtracts the second vector from the first.\n  remarks: The Subtraction method defines the subtraction operation for <xref:System.Numerics.Vector3> objects.\n  syntax:\n    content: public static System.Numerics.Vector3 op_Subtraction (System.Numerics.Vector3 left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The vector that results from subtracting <code>right</code> from <code>left</code>.\n  overload: System.Numerics.Vector3.op_Subtraction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)\n  id: op_UnaryNegation(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: op_UnaryNegation(Vector3)\n  nameWithType: Vector3.op_UnaryNegation(Vector3)\n  fullName: System.Numerics.Vector3.op_UnaryNegation(Vector3)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Negates the specified vector.\n  remarks: The UnaryNegation method defines the unary negation operation for <xref:System.Numerics.Vector3> objects.\n  syntax:\n    content: public static System.Numerics.Vector3 op_UnaryNegation (System.Numerics.Vector3 value);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: The vector to negate.\n    return:\n      type: System.Numerics.Vector3\n      description: The negated vector.\n  overload: System.Numerics.Vector3.op_UnaryNegation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Reflect(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Reflect(Vector3,Vector3)\n  nameWithType: Vector3.Reflect(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Reflect(Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the reflection of a vector off a surface that has the specified normal.\n  syntax:\n    content: public static System.Numerics.Vector3 Reflect (System.Numerics.Vector3 vector, System.Numerics.Vector3 normal);\n    parameters:\n    - id: vector\n      type: System.Numerics.Vector3\n      description: The source vector.\n    - id: normal\n      type: System.Numerics.Vector3\n      description: The normal of the surface being reflected off.\n    return:\n      type: System.Numerics.Vector3\n      description: The reflected vector.\n  overload: System.Numerics.Vector3.Reflect*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)\n  id: SquareRoot(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: SquareRoot(Vector3)\n  nameWithType: Vector3.SquareRoot(Vector3)\n  fullName: System.Numerics.Vector3.SquareRoot(Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a vector whose elements are the square root of each of a specified vector's elements.\n  syntax:\n    content: public static System.Numerics.Vector3 SquareRoot (System.Numerics.Vector3 value);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: A vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The square root vector.\n  overload: System.Numerics.Vector3.SquareRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Subtract(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Subtract(Vector3,Vector3)\n  nameWithType: Vector3.Subtract(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Subtract(Vector3,Vector3)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Subtracts the second vector from the first.\n  syntax:\n    content: public static System.Numerics.Vector3 Subtract (System.Numerics.Vector3 left, System.Numerics.Vector3 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector3\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector3\n      description: The difference vector.\n  overload: System.Numerics.Vector3.Subtract*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.ToString\n  id: ToString\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Vector3.ToString()\n  fullName: System.Numerics.Vector3.ToString()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the string representation of the current instance using default formatting.\n  remarks: This method returns a string in which each element of the vector is formatted using the \"G\" (general) format string and the formatting conventions of the current thread culture. The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The string representation of the current instance.\n  overload: System.Numerics.Vector3.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: ToString(String)\n  nameWithType: Vector3.ToString(String)\n  fullName: System.Numerics.Vector3.ToString(String)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the string representation of the current instance using the specified format string to format individual elements.\n  remarks: This method returns a string in which each element of the vector is formatted using `format` and the current culture's formatting conventions. The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.\n  syntax:\n    content: public string ToString (string format);\n    parameters:\n    - id: format\n      type: System.String\n      description: A [standard](~/add/includes/ajax-current-ext-md.md) or [custom numeric format string](~/add/includes/ajax-current-ext-md.md) that defines the format of individual elements.\n    return:\n      type: System.String\n      description: The string representation of the current instance.\n  overload: System.Numerics.Vector3.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: ToString(String,IFormatProvider)\n  nameWithType: Vector3.ToString(String,IFormatProvider)\n  fullName: System.Numerics.Vector3.ToString(String,IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.\n  remarks: This method returns a string in which each element of the vector is formatted using `format` and `formatProvider`. The \"\\<\" and \">\" characters are used to begin and end the string, and the format provider's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.\n  syntax:\n    content: public string ToString (string format, IFormatProvider formatProvider);\n    parameters:\n    - id: format\n      type: System.String\n      description: A [standard](~/add/includes/ajax-current-ext-md.md) or [custom numeric format string](~/add/includes/ajax-current-ext-md.md) that defines the format of individual elements.\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: A format provider that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of the current instance.\n  overload: System.Numerics.Vector3.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  id: Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Transform(Vector3,Matrix4x4)\n  nameWithType: Vector3.Transform(Vector3,Matrix4x4)\n  fullName: System.Numerics.Vector3.Transform(Vector3,Matrix4x4)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Transforms a vector by a specified 4x4 matrix.\n  syntax:\n    content: public static System.Numerics.Vector3 Transform (System.Numerics.Vector3 position, System.Numerics.Matrix4x4 matrix);\n    parameters:\n    - id: position\n      type: System.Numerics.Vector3\n      description: The vector to transform.\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: The transformation matrix.\n    return:\n      type: System.Numerics.Vector3\n      description: The transformed vector.\n  overload: System.Numerics.Vector3.Transform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)\n  id: Transform(System.Numerics.Vector3,System.Numerics.Quaternion)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Transform(Vector3,Quaternion)\n  nameWithType: Vector3.Transform(Vector3,Quaternion)\n  fullName: System.Numerics.Vector3.Transform(Vector3,Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Transforms a vector by the specified Quaternion rotation value.\n  syntax:\n    content: public static System.Numerics.Vector3 Transform (System.Numerics.Vector3 value, System.Numerics.Quaternion rotation);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: The vector to rotate.\n    - id: rotation\n      type: System.Numerics.Quaternion\n      description: The rotation to apply.\n    return:\n      type: System.Numerics.Vector3\n      description: The transformed vector.\n  overload: System.Numerics.Vector3.Transform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  id: TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: TransformNormal(Vector3,Matrix4x4)\n  nameWithType: Vector3.TransformNormal(Vector3,Matrix4x4)\n  fullName: System.Numerics.Vector3.TransformNormal(Vector3,Matrix4x4)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Transforms a vector normal by the given 4x4 matrix.\n  syntax:\n    content: public static System.Numerics.Vector3 TransformNormal (System.Numerics.Vector3 normal, System.Numerics.Matrix4x4 matrix);\n    parameters:\n    - id: normal\n      type: System.Numerics.Vector3\n      description: The source vector.\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: The matrix.\n    return:\n      type: System.Numerics.Vector3\n      description: The transformed vector.\n  overload: System.Numerics.Vector3.TransformNormal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.UnitX\n  id: UnitX\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: UnitX\n  nameWithType: Vector3.UnitX\n  fullName: System.Numerics.Vector3.UnitX\n  type: Property\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Gets the vector (1,0,0).\n  syntax:\n    content: public static System.Numerics.Vector3 UnitX { get; }\n    return:\n      type: System.Numerics.Vector3\n      description: The vector `(1,0,0)`.\n  overload: System.Numerics.Vector3.UnitX*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.UnitY\n  id: UnitY\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: UnitY\n  nameWithType: Vector3.UnitY\n  fullName: System.Numerics.Vector3.UnitY\n  type: Property\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Gets the vector (0,1,0).\n  syntax:\n    content: public static System.Numerics.Vector3 UnitY { get; }\n    return:\n      type: System.Numerics.Vector3\n      description: The vector `(0,1,0)`..\n  overload: System.Numerics.Vector3.UnitY*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.UnitZ\n  id: UnitZ\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: UnitZ\n  nameWithType: Vector3.UnitZ\n  fullName: System.Numerics.Vector3.UnitZ\n  type: Property\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Gets the vector (0,0,1).\n  syntax:\n    content: public static System.Numerics.Vector3 UnitZ { get; }\n    return:\n      type: System.Numerics.Vector3\n      description: The vector `(0,0,1)`.\n  overload: System.Numerics.Vector3.UnitZ*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.X\n  id: X\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: X\n  nameWithType: Vector3.X\n  fullName: System.Numerics.Vector3.X\n  type: Field\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: The X component of the vector.\n  syntax:\n    content: public float X;\n    return:\n      type: System.Single\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Y\n  id: Y\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Y\n  nameWithType: Vector3.Y\n  fullName: System.Numerics.Vector3.Y\n  type: Field\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: The Y component of the vector.\n  syntax:\n    content: public float Y;\n    return:\n      type: System.Single\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Z\n  id: Z\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Z\n  nameWithType: Vector3.Z\n  fullName: System.Numerics.Vector3.Z\n  type: Field\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: The Z component of the vector.\n  syntax:\n    content: public float Z;\n    return:\n      type: System.Single\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector3.Zero\n  id: Zero\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  name: Zero\n  nameWithType: Vector3.Zero\n  fullName: System.Numerics.Vector3.Zero\n  type: Property\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Gets a vector whose 3 elements are equal to zero.\n  syntax:\n    content: public static System.Numerics.Vector3 Zero { get; }\n    return:\n      type: System.Numerics.Vector3\n      description: A vector whose three elements are equal to zero (that is, it returns the vector `(0,0,0)`.\n  overload: System.Numerics.Vector3.Zero*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.RankException\n  isExternal: true\n  name: System.RankException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Numerics.Vector3.#ctor(System.Single)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Vector3(Single)\n  nameWithType: Vector3.Vector3(Single)\n  fullName: System.Numerics.Vector3.Vector3(Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Vector3(Vector2,Single)\n  nameWithType: Vector3.Vector3(Vector2,Single)\n  fullName: System.Numerics.Vector3.Vector3(Vector2,Single)\n- uid: System.Numerics.Vector2\n  parent: System.Numerics\n  isExternal: false\n  name: Vector2\n  nameWithType: Vector2\n  fullName: System.Numerics.Vector2\n- uid: System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Vector3(Single,Single,Single)\n  nameWithType: Vector3.Vector3(Single,Single,Single)\n  fullName: System.Numerics.Vector3.Vector3(Single,Single,Single)\n- uid: System.Numerics.Vector3.Abs(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Abs(Vector3)\n  nameWithType: Vector3.Abs(Vector3)\n  fullName: System.Numerics.Vector3.Abs(Vector3)\n- uid: System.Numerics.Vector3\n  parent: System.Numerics\n  isExternal: false\n  name: Vector3\n  nameWithType: Vector3\n  fullName: System.Numerics.Vector3\n- uid: System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Add(Vector3,Vector3)\n  nameWithType: Vector3.Add(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Add(Vector3,Vector3)\n- uid: System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Clamp(Vector3,Vector3,Vector3)\n  nameWithType: Vector3.Clamp(Vector3,Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Clamp(Vector3,Vector3,Vector3)\n- uid: System.Numerics.Vector3.CopyTo(System.Single[])\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: CopyTo(Single[])\n  nameWithType: Vector3.CopyTo(Single[])\n  fullName: System.Numerics.Vector3.CopyTo(Single[])\n- uid: System.Single[]\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single[]\n  spec.csharp:\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: Single[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: CopyTo(Single[],Int32)\n  nameWithType: Vector3.CopyTo(Single[],Int32)\n  fullName: System.Numerics.Vector3.CopyTo(Single[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Cross(Vector3,Vector3)\n  nameWithType: Vector3.Cross(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Cross(Vector3,Vector3)\n- uid: System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Distance(Vector3,Vector3)\n  nameWithType: Vector3.Distance(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Distance(Vector3,Vector3)\n- uid: System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: DistanceSquared(Vector3,Vector3)\n  nameWithType: Vector3.DistanceSquared(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.DistanceSquared(Vector3,Vector3)\n- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Divide(Vector3,Vector3)\n  nameWithType: Vector3.Divide(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Divide(Vector3,Vector3)\n- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Divide(Vector3,Single)\n  nameWithType: Vector3.Divide(Vector3,Single)\n  fullName: System.Numerics.Vector3.Divide(Vector3,Single)\n- uid: System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Dot(Vector3,Vector3)\n  nameWithType: Vector3.Dot(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Dot(Vector3,Vector3)\n- uid: System.Numerics.Vector3.Equals(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Equals(Vector3)\n  nameWithType: Vector3.Equals(Vector3)\n  fullName: System.Numerics.Vector3.Equals(Vector3)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Numerics.Vector3.Equals(System.Object)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Vector3.Equals(Object)\n  fullName: System.Numerics.Vector3.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Numerics.Vector3.GetHashCode\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Vector3.GetHashCode()\n  fullName: System.Numerics.Vector3.GetHashCode()\n- uid: System.Numerics.Vector3.Length\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Length()\n  nameWithType: Vector3.Length()\n  fullName: System.Numerics.Vector3.Length()\n- uid: System.Numerics.Vector3.LengthSquared\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: LengthSquared()\n  nameWithType: Vector3.LengthSquared()\n  fullName: System.Numerics.Vector3.LengthSquared()\n- uid: System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Lerp(Vector3,Vector3,Single)\n  nameWithType: Vector3.Lerp(Vector3,Vector3,Single)\n  fullName: System.Numerics.Vector3.Lerp(Vector3,Vector3,Single)\n- uid: System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Max(Vector3,Vector3)\n  nameWithType: Vector3.Max(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Max(Vector3,Vector3)\n- uid: System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Min(Vector3,Vector3)\n  nameWithType: Vector3.Min(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Min(Vector3,Vector3)\n- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Multiply(Vector3,Vector3)\n  nameWithType: Vector3.Multiply(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Multiply(Vector3,Vector3)\n- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Multiply(Vector3,Single)\n  nameWithType: Vector3.Multiply(Vector3,Single)\n  fullName: System.Numerics.Vector3.Multiply(Vector3,Single)\n- uid: System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Multiply(Single,Vector3)\n  nameWithType: Vector3.Multiply(Single,Vector3)\n  fullName: System.Numerics.Vector3.Multiply(Single,Vector3)\n- uid: System.Numerics.Vector3.Negate(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Negate(Vector3)\n  nameWithType: Vector3.Negate(Vector3)\n  fullName: System.Numerics.Vector3.Negate(Vector3)\n- uid: System.Numerics.Vector3.Normalize(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Normalize(Vector3)\n  nameWithType: Vector3.Normalize(Vector3)\n  fullName: System.Numerics.Vector3.Normalize(Vector3)\n- uid: System.Numerics.Vector3.One\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: One\n  nameWithType: Vector3.One\n  fullName: System.Numerics.Vector3.One\n- uid: System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Addition(Vector3,Vector3)\n  nameWithType: Vector3.op_Addition(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Addition(Vector3,Vector3)\n- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Division(Vector3,Vector3)\n  nameWithType: Vector3.op_Division(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Division(Vector3,Vector3)\n- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Division(Vector3,Single)\n  nameWithType: Vector3.op_Division(Vector3,Single)\n  fullName: System.Numerics.Vector3.op_Division(Vector3,Single)\n- uid: System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Equality(Vector3,Vector3)\n  nameWithType: Vector3.op_Equality(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Equality(Vector3,Vector3)\n- uid: System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Inequality(Vector3,Vector3)\n  nameWithType: Vector3.op_Inequality(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Inequality(Vector3,Vector3)\n- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Multiply(Vector3,Vector3)\n  nameWithType: Vector3.op_Multiply(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Vector3)\n- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Multiply(Vector3,Single)\n  nameWithType: Vector3.op_Multiply(Vector3,Single)\n  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Single)\n- uid: System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Multiply(Single,Vector3)\n  nameWithType: Vector3.op_Multiply(Single,Vector3)\n  fullName: System.Numerics.Vector3.op_Multiply(Single,Vector3)\n- uid: System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Subtraction(Vector3,Vector3)\n  nameWithType: Vector3.op_Subtraction(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.op_Subtraction(Vector3,Vector3)\n- uid: System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_UnaryNegation(Vector3)\n  nameWithType: Vector3.op_UnaryNegation(Vector3)\n  fullName: System.Numerics.Vector3.op_UnaryNegation(Vector3)\n- uid: System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Reflect(Vector3,Vector3)\n  nameWithType: Vector3.Reflect(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Reflect(Vector3,Vector3)\n- uid: System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: SquareRoot(Vector3)\n  nameWithType: Vector3.SquareRoot(Vector3)\n  fullName: System.Numerics.Vector3.SquareRoot(Vector3)\n- uid: System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Subtract(Vector3,Vector3)\n  nameWithType: Vector3.Subtract(Vector3,Vector3)\n  fullName: System.Numerics.Vector3.Subtract(Vector3,Vector3)\n- uid: System.Numerics.Vector3.ToString\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: ToString()\n  nameWithType: Vector3.ToString()\n  fullName: System.Numerics.Vector3.ToString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Numerics.Vector3.ToString(System.String)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: ToString(String)\n  nameWithType: Vector3.ToString(String)\n  fullName: System.Numerics.Vector3.ToString(String)\n- uid: System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: ToString(String,IFormatProvider)\n  nameWithType: Vector3.ToString(String,IFormatProvider)\n  fullName: System.Numerics.Vector3.ToString(String,IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: true\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Transform(Vector3,Matrix4x4)\n  nameWithType: Vector3.Transform(Vector3,Matrix4x4)\n  fullName: System.Numerics.Vector3.Transform(Vector3,Matrix4x4)\n- uid: System.Numerics.Matrix4x4\n  parent: System.Numerics\n  isExternal: false\n  name: Matrix4x4\n  nameWithType: Matrix4x4\n  fullName: System.Numerics.Matrix4x4\n- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Transform(Vector3,Quaternion)\n  nameWithType: Vector3.Transform(Vector3,Quaternion)\n  fullName: System.Numerics.Vector3.Transform(Vector3,Quaternion)\n- uid: System.Numerics.Quaternion\n  parent: System.Numerics\n  isExternal: false\n  name: Quaternion\n  nameWithType: Quaternion\n  fullName: System.Numerics.Quaternion\n- uid: System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: TransformNormal(Vector3,Matrix4x4)\n  nameWithType: Vector3.TransformNormal(Vector3,Matrix4x4)\n  fullName: System.Numerics.Vector3.TransformNormal(Vector3,Matrix4x4)\n- uid: System.Numerics.Vector3.UnitX\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: UnitX\n  nameWithType: Vector3.UnitX\n  fullName: System.Numerics.Vector3.UnitX\n- uid: System.Numerics.Vector3.UnitY\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: UnitY\n  nameWithType: Vector3.UnitY\n  fullName: System.Numerics.Vector3.UnitY\n- uid: System.Numerics.Vector3.UnitZ\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: UnitZ\n  nameWithType: Vector3.UnitZ\n  fullName: System.Numerics.Vector3.UnitZ\n- uid: System.Numerics.Vector3.X\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: X\n  nameWithType: Vector3.X\n  fullName: System.Numerics.Vector3.X\n- uid: System.Numerics.Vector3.Y\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Y\n  nameWithType: Vector3.Y\n  fullName: System.Numerics.Vector3.Y\n- uid: System.Numerics.Vector3.Z\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Z\n  nameWithType: Vector3.Z\n  fullName: System.Numerics.Vector3.Z\n- uid: System.Numerics.Vector3.Zero\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Zero\n  nameWithType: Vector3.Zero\n  fullName: System.Numerics.Vector3.Zero\n- uid: System.Numerics.Vector3.#ctor*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Vector3\n  nameWithType: Vector3.Vector3\n- uid: System.Numerics.Vector3.Abs*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Abs\n  nameWithType: Vector3.Abs\n- uid: System.Numerics.Vector3.Add*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Add\n  nameWithType: Vector3.Add\n- uid: System.Numerics.Vector3.Clamp*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Clamp\n  nameWithType: Vector3.Clamp\n- uid: System.Numerics.Vector3.CopyTo*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: CopyTo\n  nameWithType: Vector3.CopyTo\n- uid: System.Numerics.Vector3.Cross*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Cross\n  nameWithType: Vector3.Cross\n- uid: System.Numerics.Vector3.Distance*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Distance\n  nameWithType: Vector3.Distance\n- uid: System.Numerics.Vector3.DistanceSquared*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: DistanceSquared\n  nameWithType: Vector3.DistanceSquared\n- uid: System.Numerics.Vector3.Divide*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Divide\n  nameWithType: Vector3.Divide\n- uid: System.Numerics.Vector3.Dot*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Dot\n  nameWithType: Vector3.Dot\n- uid: System.Numerics.Vector3.Equals*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Equals\n  nameWithType: Vector3.Equals\n- uid: System.Numerics.Vector3.GetHashCode*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Vector3.GetHashCode\n- uid: System.Numerics.Vector3.Length*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Length\n  nameWithType: Vector3.Length\n- uid: System.Numerics.Vector3.LengthSquared*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: LengthSquared\n  nameWithType: Vector3.LengthSquared\n- uid: System.Numerics.Vector3.Lerp*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Lerp\n  nameWithType: Vector3.Lerp\n- uid: System.Numerics.Vector3.Max*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Max\n  nameWithType: Vector3.Max\n- uid: System.Numerics.Vector3.Min*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Min\n  nameWithType: Vector3.Min\n- uid: System.Numerics.Vector3.Multiply*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Multiply\n  nameWithType: Vector3.Multiply\n- uid: System.Numerics.Vector3.Negate*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Negate\n  nameWithType: Vector3.Negate\n- uid: System.Numerics.Vector3.Normalize*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Normalize\n  nameWithType: Vector3.Normalize\n- uid: System.Numerics.Vector3.One*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: One\n  nameWithType: Vector3.One\n- uid: System.Numerics.Vector3.op_Addition*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Addition\n  nameWithType: Vector3.op_Addition\n- uid: System.Numerics.Vector3.op_Division*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Division\n  nameWithType: Vector3.op_Division\n- uid: System.Numerics.Vector3.op_Equality*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Equality\n  nameWithType: Vector3.op_Equality\n- uid: System.Numerics.Vector3.op_Inequality*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Vector3.op_Inequality\n- uid: System.Numerics.Vector3.op_Multiply*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Multiply\n  nameWithType: Vector3.op_Multiply\n- uid: System.Numerics.Vector3.op_Subtraction*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_Subtraction\n  nameWithType: Vector3.op_Subtraction\n- uid: System.Numerics.Vector3.op_UnaryNegation*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: op_UnaryNegation\n  nameWithType: Vector3.op_UnaryNegation\n- uid: System.Numerics.Vector3.Reflect*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Reflect\n  nameWithType: Vector3.Reflect\n- uid: System.Numerics.Vector3.SquareRoot*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: SquareRoot\n  nameWithType: Vector3.SquareRoot\n- uid: System.Numerics.Vector3.Subtract*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Subtract\n  nameWithType: Vector3.Subtract\n- uid: System.Numerics.Vector3.ToString*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: ToString\n  nameWithType: Vector3.ToString\n- uid: System.Numerics.Vector3.Transform*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Transform\n  nameWithType: Vector3.Transform\n- uid: System.Numerics.Vector3.TransformNormal*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: TransformNormal\n  nameWithType: Vector3.TransformNormal\n- uid: System.Numerics.Vector3.UnitX*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: UnitX\n  nameWithType: Vector3.UnitX\n- uid: System.Numerics.Vector3.UnitY*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: UnitY\n  nameWithType: Vector3.UnitY\n- uid: System.Numerics.Vector3.UnitZ*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: UnitZ\n  nameWithType: Vector3.UnitZ\n- uid: System.Numerics.Vector3.Zero*\n  parent: System.Numerics.Vector3\n  isExternal: false\n  name: Zero\n  nameWithType: Vector3.Zero\n"}