{"nodes":[{"pos":[780,872],"content":"Provides base definitions for classes that consume XAML input and produce XAML node streams.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides base definitions for classes that consume XAML input and produce XAML node streams.","pos":[0,92]}]},{"pos":[885,3990],"content":"XamlReader is an abstract class and does not provide implementations or definitions that have a working result for all members. Members that do have an implementation in XamlReader are noted in the remarks for that member. Specifically, XamlReader has several abstract members that must be implemented, and several virtual members.       Of the virtual members, <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> each provide a default implementation that is appropriate for most cases. However, the <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> default implementations rely on other expected behavior of the implementing XAML reader; in particular, they rely on the <xref:System.Xaml.XamlReader.Read%2A> override. <xref:System.Xaml.XamlReader.Dispose%2A> is also a virtual member that has a working default implementation.       The following two classes are the most relevant and practical derived classes in .NET Framework XAML Services and the System.Xaml assembly:      -   <xref:System.Xaml.XamlObjectReader>, which reads an object graph, such as the active object graph of an application at run time.      -   <xref:System.Xaml.XamlXmlReader>, which reads XAML in the form of a XML text file by using a general <xref:System.Xml.XmlReader> that loads the file as an intermediary helper class.       Other XAML readers from other frameworks include <xref:System.Windows.Baml2006.Baml2006Reader> and <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.       XamlReader differs from [!INCLUDE[TLA#tla_xmldom](~/add/includes/tlasharptla-xmldom-md.md)] and <xref:System.Xml.XmlReader> design principles because XamlReader does not have a `Create` method to return underlying default XAML reader implementations. You must instead instantiate specific derived XAML reader classes by calling their constructors or other class-specific helper APIs.      ## Subtree Readers    For the most part, you call XamlReader API in the context of specific XAML reader classes that derive from XamlReader. However, in one particular case, you access XamlReader API on a practical XAML reader instance that is not public and not derived from <xref:System.Xaml.XamlObjectReader> or <xref:System.Xaml.XamlXmlReader>. This case is when you call <xref:System.Xaml.XamlReader.ReadSubtree%2A>, which returns a XamlReader instance. In the default implementation, the XamlReader that is returned by this API is an internal class.       The XamlReader obtained for subtree reading has valid actions for APIs such as <xref:System.Xaml.XamlReader.Read%2A> and <xref:System.Xaml.XamlReader.NodeType%2A>, and those actions are based on the parent reader class. This design enables the internal class to track the frame level where the subtree was entered. The acting subtree XamlReader makes sure that if the current node position is moved beyond the bounds of the subtree, the specific subtree reader reports end-of-file or `null` at the current node.       Notes about subtree reader usage are included on certain XamlReader APIs.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"XamlReader is an abstract class and does not provide implementations or definitions that have a working result for all members.","pos":[0,127]},{"content":"Members that do have an implementation in XamlReader are noted in the remarks for that member.","pos":[128,222]},{"content":"Specifically, XamlReader has several abstract members that must be implemented, and several virtual members.","pos":[223,331]},{"content":"Of the virtual members, &lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt; and &lt;xref:System.Xaml.XamlReader.Skip%2A&gt; each provide a default implementation that is appropriate for most cases.","pos":[338,522],"source":"       Of the virtual members, <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> each provide a default implementation that is appropriate for most cases."},{"content":"However, the &lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt; and &lt;xref:System.Xaml.XamlReader.Skip%2A&gt; default implementations rely on other expected behavior of the implementing XAML reader; in particular, they rely on the &lt;xref:System.Xaml.XamlReader.Read%2A&gt; override.","pos":[523,791],"source":" However, the <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> default implementations rely on other expected behavior of the implementing XAML reader; in particular, they rely on the <xref:System.Xaml.XamlReader.Read%2A> override."},{"content":"&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt; is also a virtual member that has a working default implementation.","pos":[792,900],"source":" <xref:System.Xaml.XamlReader.Dispose%2A> is also a virtual member that has a working default implementation."},{"content":"The following two classes are the most relevant and practical derived classes in .NET Framework XAML Services and the System.Xaml assembly:      -   &lt;xref:System.Xaml.XamlObjectReader&gt;, which reads an object graph, such as the active object graph of an application at run time.","pos":[907,1184],"source":"       The following two classes are the most relevant and practical derived classes in .NET Framework XAML Services and the System.Xaml assembly:      -   <xref:System.Xaml.XamlObjectReader>, which reads an object graph, such as the active object graph of an application at run time."},{"content":"-   &lt;xref:System.Xaml.XamlXmlReader&gt;, which reads XAML in the form of a XML text file by using a general &lt;xref:System.Xml.XmlReader&gt; that loads the file as an intermediary helper class.","pos":[1190,1375],"source":"      -   <xref:System.Xaml.XamlXmlReader>, which reads XAML in the form of a XML text file by using a general <xref:System.Xml.XmlReader> that loads the file as an intermediary helper class."},{"content":"Other XAML readers from other frameworks include &lt;xref:System.Windows.Baml2006.Baml2006Reader&gt; and &lt;xref:System.Activities.Debugger.XamlDebuggerXmlReader&gt;.","pos":[1382,1537],"source":"       Other XAML readers from other frameworks include <xref:System.Windows.Baml2006.Baml2006Reader> and <xref:System.Activities.Debugger.XamlDebuggerXmlReader>."},{"content":"XamlReader differs from <ph id=\"ph1\">[!INCLUDE[TLA#tla_xmldom](~/add/includes/tlasharptla-xmldom-md.md)]</ph> and &lt;xref:System.Xml.XmlReader&gt; design principles because XamlReader does not have a <ph id=\"ph2\">`Create`</ph> method to return underlying default XAML reader implementations.","pos":[1544,1794],"source":"       XamlReader differs from [!INCLUDE[TLA#tla_xmldom](~/add/includes/tlasharptla-xmldom-md.md)] and <xref:System.Xml.XmlReader> design principles because XamlReader does not have a `Create` method to return underlying default XAML reader implementations."},{"content":"You must instead instantiate specific derived XAML reader classes by calling their constructors or other class-specific helper APIs.","pos":[1795,1927]},{"content":"Subtree Readers    For the most part, you call XamlReader API in the context of specific XAML reader classes that derive from XamlReader.","pos":[1936,2073]},{"content":"However, in one particular case, you access XamlReader API on a practical XAML reader instance that is not public and not derived from &lt;xref:System.Xaml.XamlObjectReader&gt; or &lt;xref:System.Xaml.XamlXmlReader&gt;.","pos":[2074,2281],"source":" However, in one particular case, you access XamlReader API on a practical XAML reader instance that is not public and not derived from <xref:System.Xaml.XamlObjectReader> or <xref:System.Xaml.XamlXmlReader>."},{"content":"This case is when you call &lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;, which returns a XamlReader instance.","pos":[2282,2391],"source":" This case is when you call <xref:System.Xaml.XamlReader.ReadSubtree%2A>, which returns a XamlReader instance."},{"content":"In the default implementation, the XamlReader that is returned by this API is an internal class.","pos":[2392,2488]},{"content":"The XamlReader obtained for subtree reading has valid actions for APIs such as &lt;xref:System.Xaml.XamlReader.Read%2A&gt; and &lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;, and those actions are based on the parent reader class.","pos":[2495,2714],"source":"       The XamlReader obtained for subtree reading has valid actions for APIs such as <xref:System.Xaml.XamlReader.Read%2A> and <xref:System.Xaml.XamlReader.NodeType%2A>, and those actions are based on the parent reader class."},{"content":"This design enables the internal class to track the frame level where the subtree was entered.","pos":[2715,2809]},{"content":"The acting subtree XamlReader makes sure that if the current node position is moved beyond the bounds of the subtree, the specific subtree reader reports end-of-file or <ph id=\"ph1\">`null`</ph> at the current node.","pos":[2810,3006],"source":" The acting subtree XamlReader makes sure that if the current node position is moved beyond the bounds of the subtree, the specific subtree reader reports end-of-file or `null` at the current node."},{"content":"Notes about subtree reader usage are included on certain XamlReader APIs.","pos":[3013,3086]}]},{"pos":[4478,4544],"content":"Initializes the <bpt id=\"p1\">&lt;xref href=\"System.Xaml.XamlReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes the <xref href=\"System.Xaml.XamlReader\"></xref> class."},{"pos":[4970,4998],"content":"Closes the XAML node stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the XAML node stream.","pos":[0,28]}]},{"pos":[5010,5142],"content":"In the base implementation, calling Close calls &lt;xref:System.Xaml.XamlReader.Dispose%2A&gt; with the <ph id=\"ph1\">`isDisposing`</ph> parameter as <ph id=\"ph2\">`true`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"In the base implementation, calling Close calls <xref:System.Xaml.XamlReader.Dispose%2A> with the `isDisposing` parameter as `true`."},{"pos":[5628,5765],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Xaml.XamlReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, and optionally, releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Xaml.XamlReader\"></xref>, and optionally, releases the managed resources."},{"pos":[5777,5866],"content":"You must call the base class to get &lt;xref:System.Xaml.XamlReader.IsDisposed%2A&gt; = <ph id=\"ph1\">`true`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"You must call the base class to get <xref:System.Xaml.XamlReader.IsDisposed%2A> = `true`."},{"pos":[6021,6190],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release the managed resources; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release the managed resources; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6572,6640],"content":"Gets whether <xref:System.Xaml.XamlReader.Dispose*> has been called.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets whether &lt;xref:System.Xaml.XamlReader.Dispose*&gt; has been called.","pos":[0,68],"source":"Gets whether <xref:System.Xaml.XamlReader.Dispose*> has been called."}]},{"pos":[6757,6951],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if &lt;xref:System.Xaml.XamlReader.Dispose*&gt; has been called; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.Xaml.XamlReader.Dispose*> has been called; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7311,7420],"content":"When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.","pos":[0,109]}]},{"pos":[7432,7679],"content":"Subtree readers can call IsEof, with behavior that correctly reflects the bounds of the entered subtree. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Subtree readers can call IsEof, with behavior that correctly reflects the bounds of the entered subtree. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.","pos":[0,247],"nodes":[{"content":"Subtree readers can call IsEof, with behavior that correctly reflects the bounds of the entered subtree.","pos":[0,104]},{"content":"For more information, see the \"Subtree Readers\" section in &lt;xref:System.Xaml.XamlReader&gt;, or see &lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;.","pos":[105,247],"source":" For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>."}]}]},{"pos":[7797,8006],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the position is at the conceptual end-of-file of the XAML node stream; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the position is at the conceptual end-of-file of the XAML node stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8366,8528],"content":"When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <bpt id=\"p1\">&lt;xref href=\"System.Xaml.XamlNodeType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <xref href=\"System.Xaml.XamlNodeType\"></xref>."},{"pos":[8540,8743],"content":"Subtree readers can call Member, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Subtree readers can call Member, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.","pos":[0,203],"nodes":[{"content":"Subtree readers can call Member, with behavior restrictions.","pos":[0,60]},{"content":"For more information, see the \"Subtree Readers\" section in &lt;xref:System.Xaml.XamlReader&gt;, or see &lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;.","pos":[61,203],"source":" For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>."}]}]},{"pos":[8888,9015],"content":"The current member; or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if the reader position is not on a member.","needQuote":true,"needEscape":true,"source":"The current member; or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, if the reader position is not on a member."},{"pos":[9391,9486],"content":"When implemented in a derived class, gets the XAML namespace information from the current node.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a derived class, gets the XAML namespace information from the current node.","pos":[0,95]}]},{"pos":[9498,10138],"content":"The intended design of this API is to return a non-null result only if the <xref:System.Xaml.XamlReader.NodeType%2A> of the current node is <xref:System.Xaml.XamlNodeType>. The property does not report the XAML namespace that applies to objects or members in a general scoping sense, as interpreted under a XAML schema context. Your application must provide a means to cache information for the acting XAML namespace as it traverses XAML nodes, if you need that information in a manner other than how the XAML schema context reports it to a writer. See<xref:System.Xaml.XamlXmlReader.Namespace%2A> for notes on the reference implementation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The intended design of this API is to return a non-null result only if the <xref:System.Xaml.XamlReader.NodeType%2A> of the current node is <xref:System.Xaml.XamlNodeType>. The property does not report the XAML namespace that applies to objects or members in a general scoping sense, as interpreted under a XAML schema context. Your application must provide a means to cache information for the acting XAML namespace as it traverses XAML nodes, if you need that information in a manner other than how the XAML schema context reports it to a writer. See<xref:System.Xaml.XamlXmlReader.Namespace%2A> for notes on the reference implementation.","pos":[0,640],"nodes":[{"content":"The intended design of this API is to return a non-null result only if the &lt;xref:System.Xaml.XamlReader.NodeType%2A&gt; of the current node is &lt;xref:System.Xaml.XamlNodeType&gt;.","pos":[0,172],"source":"The intended design of this API is to return a non-null result only if the <xref:System.Xaml.XamlReader.NodeType%2A> of the current node is <xref:System.Xaml.XamlNodeType>."},{"content":"The property does not report the XAML namespace that applies to objects or members in a general scoping sense, as interpreted under a XAML schema context.","pos":[173,327]},{"content":"Your application must provide a means to cache information for the acting XAML namespace as it traverses XAML nodes, if you need that information in a manner other than how the XAML schema context reports it to a writer.","pos":[328,548]},{"content":"See&lt;xref:System.Xaml.XamlXmlReader.Namespace%2A&gt; for notes on the reference implementation.","pos":[549,640],"source":" See<xref:System.Xaml.XamlXmlReader.Namespace%2A> for notes on the reference implementation."}]}]},{"pos":[10306,10430],"content":"The XAML namespace information, if it is available; otherwise, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The XAML namespace information, if it is available; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[10804,10875],"content":"When implemented in a derived class, gets the type of the current node.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a derived class, gets the type of the current node.","pos":[0,71]}]},{"pos":[10887,11092],"content":"Subtree readers can call NodeType, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Subtree readers can call NodeType, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.","pos":[0,205],"nodes":[{"content":"Subtree readers can call NodeType, with behavior restrictions.","pos":[0,62]},{"content":"For more information, see the \"Subtree Readers\" section in &lt;xref:System.Xaml.XamlReader&gt;, or see &lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;.","pos":[63,205],"source":" For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>."}]}]},{"pos":[11243,11316],"content":"A value of the <bpt id=\"p1\">&lt;xref href=\"System.Xaml.XamlNodeType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","needQuote":true,"needEscape":true,"source":"A value of the <xref href=\"System.Xaml.XamlNodeType\"></xref> enumeration."},{"pos":[11673,11778],"content":"When implemented in a derived class, provides the next XAML node from the source, if a node is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a derived class, provides the next XAML node from the source, if a node is available.","pos":[0,105]}]},{"pos":[11790,11991],"content":"Subtree readers can call Read, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Subtree readers can call Read, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.","pos":[0,201],"nodes":[{"content":"Subtree readers can call Read, with behavior restrictions.","pos":[0,58]},{"content":"For more information, see the \"Subtree Readers\" section in &lt;xref:System.Xaml.XamlReader&gt;, or see &lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;.","pos":[59,201],"source":" For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>."}]}]},{"pos":[12122,12281],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a node is available; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a node is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12669,12924],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Xaml.XamlReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is based on the current <bpt id=\"p2\">&lt;xref href=\"System.Xaml.XamlReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, where the returned <bpt id=\"p3\">&lt;xref href=\"System.Xaml.XamlReader\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> is used to iterate through a subtree of the XAML node structure.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Xaml.XamlReader\"></xref> that is based on the current <xref href=\"System.Xaml.XamlReader\"></xref>, where the returned <xref href=\"System.Xaml.XamlReader\"></xref> is used to iterate through a subtree of the XAML node structure."},{"pos":[12937,15474],"content":"This method has a default implementation and returns a valid <xref:System.Xaml.XamlReader>. The returned <xref:System.Xaml.XamlReader> is an internal class that restricts certain <xref:System.Xaml.XamlReader> actions. The restrictions are consistent with the purpose of reading only a dimensioned subtree of a larger source for a XAML node set, and of returning end-of-file or `null` at the current node when the subtree is exited.       Generally, you should check the current node from the initial <xref:System.Xaml.XamlReader.Read%2A> to determine whether you need a subtree reader. How you check this may be implementation-specific; however, avoid creating multiple subtree readers for every subtree. In addition, avoid invoking a subtree reader for certain node cases (for example, for <xref:System.Xaml.XamlNodeType>) that cannot contain a subtree of nodes.       After you obtain a subtree reader, you must call <xref:System.Xaml.XamlReader.Read%2A> on it to obtain a current node (or call <xref:System.Xaml.XamlReader.Skip%2A> to obtain a next node). You do not automatically obtain an initial node position from the subtree reader when you create it.       The reader you obtain by calling ReadSubtree from this default implementation is an internal class. The internal class bases its behavior on the <xref:System.Xaml.XamlReader> implementation that is being used when ReadSubtree is called. The purpose of the internal class is to wrap the <xref:System.Xaml.XamlReader.Read%2A> and general traversal behavior. The traversal stays within the intended subtree by keeping track of <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> pairs or <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> pairs. It also correctly returns `false` for <xref:System.Xaml.XamlReader.Read%2A> and `true` for <xref:System.Xaml.XamlReader.IsEof%2A> when the reader is at the end of the subtree, as defined by its entry point. In general, you assume that any <xref:System.Xaml.XamlReader> API you call from a subtree reader has the same implementation as the overall <xref:System.Xaml.XamlReader> except for the traversal bounding behavior.       However, ReadSubtree is virtual. Therefore, a specific <xref:System.Xaml.XamlReader> implementation can provide behavior that differs from the <xref:System.Xaml.XamlReader> internal wrapper behavior; and a <xref:System.Xaml.XamlReader> implementation can even disable subtree reader functionality by returning <xref:System.NotImplementedException> or other exceptions.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method has a default implementation and returns a valid &lt;xref:System.Xaml.XamlReader&gt;.","pos":[0,91],"source":"This method has a default implementation and returns a valid <xref:System.Xaml.XamlReader>."},{"content":"The returned &lt;xref:System.Xaml.XamlReader&gt; is an internal class that restricts certain &lt;xref:System.Xaml.XamlReader&gt; actions.","pos":[92,217],"source":" The returned <xref:System.Xaml.XamlReader> is an internal class that restricts certain <xref:System.Xaml.XamlReader> actions."},{"content":"The restrictions are consistent with the purpose of reading only a dimensioned subtree of a larger source for a XAML node set, and of returning end-of-file or <ph id=\"ph1\">`null`</ph> at the current node when the subtree is exited.","pos":[218,431],"source":" The restrictions are consistent with the purpose of reading only a dimensioned subtree of a larger source for a XAML node set, and of returning end-of-file or `null` at the current node when the subtree is exited."},{"content":"Generally, you should check the current node from the initial &lt;xref:System.Xaml.XamlReader.Read%2A&gt; to determine whether you need a subtree reader.","pos":[438,585],"source":"       Generally, you should check the current node from the initial <xref:System.Xaml.XamlReader.Read%2A> to determine whether you need a subtree reader."},{"content":"How you check this may be implementation-specific; however, avoid creating multiple subtree readers for every subtree.","pos":[586,704]},{"content":"In addition, avoid invoking a subtree reader for certain node cases (for example, for &lt;xref:System.Xaml.XamlNodeType&gt;) that cannot contain a subtree of nodes.","pos":[705,863],"source":" In addition, avoid invoking a subtree reader for certain node cases (for example, for <xref:System.Xaml.XamlNodeType>) that cannot contain a subtree of nodes."},{"content":"After you obtain a subtree reader, you must call &lt;xref:System.Xaml.XamlReader.Read%2A&gt; on it to obtain a current node (or call &lt;xref:System.Xaml.XamlReader.Skip%2A&gt; to obtain a next node).","pos":[870,1058],"source":"       After you obtain a subtree reader, you must call <xref:System.Xaml.XamlReader.Read%2A> on it to obtain a current node (or call <xref:System.Xaml.XamlReader.Skip%2A> to obtain a next node)."},{"content":"You do not automatically obtain an initial node position from the subtree reader when you create it.","pos":[1059,1159]},{"content":"The reader you obtain by calling ReadSubtree from this default implementation is an internal class.","pos":[1166,1265]},{"content":"The internal class bases its behavior on the &lt;xref:System.Xaml.XamlReader&gt; implementation that is being used when ReadSubtree is called.","pos":[1266,1402],"source":" The internal class bases its behavior on the <xref:System.Xaml.XamlReader> implementation that is being used when ReadSubtree is called."},{"content":"The purpose of the internal class is to wrap the &lt;xref:System.Xaml.XamlReader.Read%2A&gt; and general traversal behavior.","pos":[1403,1521],"source":" The purpose of the internal class is to wrap the <xref:System.Xaml.XamlReader.Read%2A> and general traversal behavior."},{"content":"The traversal stays within the intended subtree by keeping track of &lt;xref:System.Xaml.XamlNodeType&gt;/&lt;xref:System.Xaml.XamlNodeType&gt; pairs or &lt;xref:System.Xaml.XamlNodeType&gt;/&lt;xref:System.Xaml.XamlNodeType&gt; pairs.","pos":[1522,1733],"source":" The traversal stays within the intended subtree by keeping track of <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> pairs or <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> pairs."},{"content":"It also correctly returns <ph id=\"ph1\">`false`</ph> for &lt;xref:System.Xaml.XamlReader.Read%2A&gt; and <ph id=\"ph2\">`true`</ph> for &lt;xref:System.Xaml.XamlReader.IsEof%2A&gt; when the reader is at the end of the subtree, as defined by its entry point.","pos":[1734,1940],"source":" It also correctly returns `false` for <xref:System.Xaml.XamlReader.Read%2A> and `true` for <xref:System.Xaml.XamlReader.IsEof%2A> when the reader is at the end of the subtree, as defined by its entry point."},{"content":"In general, you assume that any &lt;xref:System.Xaml.XamlReader&gt; API you call from a subtree reader has the same implementation as the overall &lt;xref:System.Xaml.XamlReader&gt; except for the traversal bounding behavior.","pos":[1941,2154],"source":" In general, you assume that any <xref:System.Xaml.XamlReader> API you call from a subtree reader has the same implementation as the overall <xref:System.Xaml.XamlReader> except for the traversal bounding behavior."},{"content":"However, ReadSubtree is virtual.","pos":[2161,2193]},{"content":"Therefore, a specific &lt;xref:System.Xaml.XamlReader&gt; implementation can provide behavior that differs from the &lt;xref:System.Xaml.XamlReader&gt; internal wrapper behavior; and a &lt;xref:System.Xaml.XamlReader&gt; implementation can even disable subtree reader functionality by returning &lt;xref:System.NotImplementedException&gt; or other exceptions.","pos":[2194,2529],"source":" Therefore, a specific <xref:System.Xaml.XamlReader> implementation can provide behavior that differs from the <xref:System.Xaml.XamlReader> internal wrapper behavior; and a <xref:System.Xaml.XamlReader> implementation can even disable subtree reader functionality by returning <xref:System.NotImplementedException> or other exceptions."}]},{"pos":[15638,15681],"content":"A new XAML reader instance for the subtree.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new XAML reader instance for the subtree.","pos":[0,43]}]},{"pos":[16082,16204],"content":"When implemented in a derived class, gets an object that provides XAML schema context information for the information set.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a derived class, gets an object that provides XAML schema context information for the information set.","pos":[0,122]}]},{"pos":[16370,16450],"content":"An object that provides XAML schema context information for the information set.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that provides XAML schema context information for the information set.","pos":[0,80]}]},{"pos":[16812,16885],"content":"Skips the current node and advances the reader position to the next node.","needQuote":true,"needEscape":true,"nodes":[{"content":"Skips the current node and advances the reader position to the next node.","pos":[0,73]}]},{"pos":[16898,18066],"content":"Once skipped, <xref:System.Xaml.XamlReader.Read%2A> is called by the default Skip implementation. You typically do not call Skip and <xref:System.Xaml.XamlReader.Read%2A> in sequence.       In the default Skip implementation, different actions are taken depending on which <xref:System.Xaml.XamlReader.NodeType%2A> the reader position is currently on. If the reader position is currently on a <xref:System.Xaml.XamlNodeType> or <xref:System.Xaml.XamlNodeType>, that member or object is skipped. For other <xref:System.Xaml.XamlReader.NodeType%2A> values, no action is taken other than calling <xref:System.Xaml.XamlReader.Read%2A> from the current position.       Subtree readers can call Skip, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.       The node tree behavior of Skip is based on the XML equivalent <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>. Based on the <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName> behavior equivalence, Skip skips the node and its subtree, not just the single entry node.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Once skipped, <xref:System.Xaml.XamlReader.Read%2A> is called by the default Skip implementation. You typically do not call Skip and <xref:System.Xaml.XamlReader.Read%2A> in sequence.       In the default Skip implementation, different actions are taken depending on which <xref:System.Xaml.XamlReader.NodeType%2A> the reader position is currently on. If the reader position is currently on a <xref:System.Xaml.XamlNodeType> or <xref:System.Xaml.XamlNodeType>, that member or object is skipped. For other <xref:System.Xaml.XamlReader.NodeType%2A> values, no action is taken other than calling <xref:System.Xaml.XamlReader.Read%2A> from the current position.       Subtree readers can call Skip, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.       The node tree behavior of Skip is based on the XML equivalent <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>. Based on the <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName> behavior equivalence, Skip skips the node and its subtree, not just the single entry node.","pos":[0,1160],"nodes":[{"content":"Once skipped, &lt;xref:System.Xaml.XamlReader.Read%2A&gt; is called by the default Skip implementation.","pos":[0,97],"source":"Once skipped, <xref:System.Xaml.XamlReader.Read%2A> is called by the default Skip implementation."},{"content":"You typically do not call Skip and &lt;xref:System.Xaml.XamlReader.Read%2A&gt; in sequence.","pos":[98,183],"source":" You typically do not call Skip and <xref:System.Xaml.XamlReader.Read%2A> in sequence."},{"content":"In the default Skip implementation, different actions are taken depending on which &lt;xref:System.Xaml.XamlReader.NodeType%2A&gt; the reader position is currently on.","pos":[190,351],"source":"       In the default Skip implementation, different actions are taken depending on which <xref:System.Xaml.XamlReader.NodeType%2A> the reader position is currently on."},{"content":"If the reader position is currently on a &lt;xref:System.Xaml.XamlNodeType&gt; or &lt;xref:System.Xaml.XamlNodeType&gt;, that member or object is skipped.","pos":[352,494],"source":" If the reader position is currently on a <xref:System.Xaml.XamlNodeType> or <xref:System.Xaml.XamlNodeType>, that member or object is skipped."},{"content":"For other &lt;xref:System.Xaml.XamlReader.NodeType%2A&gt; values, no action is taken other than calling &lt;xref:System.Xaml.XamlReader.Read%2A&gt; from the current position.","pos":[495,657],"source":" For other <xref:System.Xaml.XamlReader.NodeType%2A> values, no action is taken other than calling <xref:System.Xaml.XamlReader.Read%2A> from the current position."},{"content":"Subtree readers can call Skip, with behavior restrictions.","pos":[664,722]},{"content":"For more information, see the \"Subtree Readers\" section in &lt;xref:System.Xaml.XamlReader&gt;, or see &lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;.","pos":[723,865],"source":" For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>."},{"content":"The node tree behavior of Skip is based on the XML equivalent &lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName&gt;.","pos":[872,995],"source":"       The node tree behavior of Skip is based on the XML equivalent <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>."},{"content":"Based on the &lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName&gt; behavior equivalence, Skip skips the node and its subtree, not just the single entry node.","pos":[996,1160],"source":" Based on the <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName> behavior equivalence, Skip skips the node and its subtree, not just the single entry node."}]}]},{"pos":[18615,18724],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Xaml.XamlReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Xaml.XamlReader\"></xref> class."},{"pos":[19166,19274],"content":"When implemented in a derived class, gets the <bpt id=\"p1\">&lt;xref href=\"System.Xaml.XamlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the current node.","needQuote":true,"needEscape":true,"source":"When implemented in a derived class, gets the <xref href=\"System.Xaml.XamlType\"></xref> of the current node."},{"pos":[19286,19487],"content":"Subtree readers can call Type, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Subtree readers can call Type, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.","pos":[0,201],"nodes":[{"content":"Subtree readers can call Type, with behavior restrictions.","pos":[0,58]},{"content":"For more information, see the \"Subtree Readers\" section in &lt;xref:System.Xaml.XamlReader&gt;, or see &lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;.","pos":[59,201],"source":" For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>."}]}]},{"pos":[19626,19809],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Xaml.XamlType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the current node; or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, if the current reader position is not on an object.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Xaml.XamlType\"></xref> of the current node; or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, if the current reader position is not on an object."},{"pos":[20163,20235],"content":"When implemented in a derived class, gets the value of the current node.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a derived class, gets the value of the current node.","pos":[0,72]}]},{"pos":[20354,20549],"content":"The value of the current node; or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if the current reader position is not on a <bpt id=\"p2\">&lt;xref href=\"System.Xaml.XamlNodeType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> node type.","needQuote":true,"needEscape":true,"source":"The value of the current node; or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, if the current reader position is not on a <xref href=\"System.Xaml.XamlNodeType\"></xref> node type."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xaml.XamlReader\n  id: XamlReader\n  children:\n  - System.Xaml.XamlReader.#ctor\n  - System.Xaml.XamlReader.Close\n  - System.Xaml.XamlReader.Dispose(System.Boolean)\n  - System.Xaml.XamlReader.IsDisposed\n  - System.Xaml.XamlReader.IsEof\n  - System.Xaml.XamlReader.Member\n  - System.Xaml.XamlReader.Namespace\n  - System.Xaml.XamlReader.NodeType\n  - System.Xaml.XamlReader.Read\n  - System.Xaml.XamlReader.ReadSubtree\n  - System.Xaml.XamlReader.SchemaContext\n  - System.Xaml.XamlReader.Skip\n  - System.Xaml.XamlReader.System#IDisposable#Dispose\n  - System.Xaml.XamlReader.Type\n  - System.Xaml.XamlReader.Value\n  langs:\n  - csharp\n  name: XamlReader\n  nameWithType: XamlReader\n  fullName: System.Xaml.XamlReader\n  type: Class\n  summary: Provides base definitions for classes that consume XAML input and produce XAML node streams.\n  remarks: \"XamlReader is an abstract class and does not provide implementations or definitions that have a working result for all members. Members that do have an implementation in XamlReader are noted in the remarks for that member. Specifically, XamlReader has several abstract members that must be implemented, and several virtual members.  \\n  \\n Of the virtual members, <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> each provide a default implementation that is appropriate for most cases. However, the <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> default implementations rely on other expected behavior of the implementing XAML reader; in particular, they rely on the <xref:System.Xaml.XamlReader.Read%2A> override. <xref:System.Xaml.XamlReader.Dispose%2A> is also a virtual member that has a working default implementation.  \\n  \\n The following two classes are the most relevant and practical derived classes in .NET Framework XAML Services and the System.Xaml assembly:  \\n  \\n-   <xref:System.Xaml.XamlObjectReader>, which reads an object graph, such as the active object graph of an application at run time.  \\n  \\n-   <xref:System.Xaml.XamlXmlReader>, which reads XAML in the form of a XML text file by using a general <xref:System.Xml.XmlReader> that loads the file as an intermediary helper class.  \\n  \\n Other XAML readers from other frameworks include <xref:System.Windows.Baml2006.Baml2006Reader> and <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.  \\n  \\n XamlReader differs from [!INCLUDE[TLA#tla_xmldom](~/add/includes/tlasharptla-xmldom-md.md)] and <xref:System.Xml.XmlReader> design principles because XamlReader does not have a `Create` method to return underlying default XAML reader implementations. You must instead instantiate specific derived XAML reader classes by calling their constructors or other class-specific helper APIs.  \\n  \\n## Subtree Readers  \\n For the most part, you call XamlReader API in the context of specific XAML reader classes that derive from XamlReader. However, in one particular case, you access XamlReader API on a practical XAML reader instance that is not public and not derived from <xref:System.Xaml.XamlObjectReader> or <xref:System.Xaml.XamlXmlReader>. This case is when you call <xref:System.Xaml.XamlReader.ReadSubtree%2A>, which returns a XamlReader instance. In the default implementation, the XamlReader that is returned by this API is an internal class.  \\n  \\n The XamlReader obtained for subtree reading has valid actions for APIs such as <xref:System.Xaml.XamlReader.Read%2A> and <xref:System.Xaml.XamlReader.NodeType%2A>, and those actions are based on the parent reader class. This design enables the internal class to track the frame level where the subtree was entered. The acting subtree XamlReader makes sure that if the current node position is moved beyond the bounds of the subtree, the specific subtree reader reports end-of-file or `null` at the current node.  \\n  \\n Notes about subtree reader usage are included on certain XamlReader APIs.\"\n  syntax:\n    content: 'public abstract class XamlReader : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.#ctor\n  id: '#ctor'\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: XamlReader()\n  nameWithType: XamlReader.XamlReader()\n  fullName: System.Xaml.XamlReader.XamlReader()\n  type: Constructor\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Initializes the <xref href=\"System.Xaml.XamlReader\"></xref> class.\n  syntax:\n    content: protected XamlReader ();\n    parameters: []\n  overload: System.Xaml.XamlReader.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.Close\n  id: Close\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: XamlReader.Close()\n  fullName: System.Xaml.XamlReader.Close()\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Closes the XAML node stream.\n  remarks: In the base implementation, calling Close calls <xref:System.Xaml.XamlReader.Dispose%2A> with the `isDisposing` parameter as `true`.\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Xaml.XamlReader.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: XamlReader.Dispose(Boolean)\n  fullName: System.Xaml.XamlReader.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Xaml.XamlReader\"></xref>, and optionally, releases the managed resources.\n  remarks: You must call the base class to get <xref:System.Xaml.XamlReader.IsDisposed%2A> = `true`.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release the managed resources; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Xaml.XamlReader.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.IsDisposed\n  id: IsDisposed\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: IsDisposed\n  nameWithType: XamlReader.IsDisposed\n  fullName: System.Xaml.XamlReader.IsDisposed\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Gets whether <xref:System.Xaml.XamlReader.Dispose*> has been called.\n  syntax:\n    content: protected bool IsDisposed { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.Xaml.XamlReader.Dispose*> has been called; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Xaml.XamlReader.IsDisposed*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.IsEof\n  id: IsEof\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: IsEof\n  nameWithType: XamlReader.IsEof\n  fullName: System.Xaml.XamlReader.IsEof\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.\n  remarks: Subtree readers can call IsEof, with behavior that correctly reflects the bounds of the entered subtree. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.\n  syntax:\n    content: public abstract bool IsEof { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the position is at the conceptual end-of-file of the XAML node stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Xaml.XamlReader.IsEof*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.Member\n  id: Member\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: Member\n  nameWithType: XamlReader.Member\n  fullName: System.Xaml.XamlReader.Member\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <xref href=\"System.Xaml.XamlNodeType\"></xref>.\n  remarks: Subtree readers can call Member, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.\n  syntax:\n    content: public abstract System.Xaml.XamlMember Member { get; }\n    return:\n      type: System.Xaml.XamlMember\n      description: The current member; or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, if the reader position is not on a member.\n  overload: System.Xaml.XamlReader.Member*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.Namespace\n  id: Namespace\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: Namespace\n  nameWithType: XamlReader.Namespace\n  fullName: System.Xaml.XamlReader.Namespace\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: When implemented in a derived class, gets the XAML namespace information from the current node.\n  remarks: The intended design of this API is to return a non-null result only if the <xref:System.Xaml.XamlReader.NodeType%2A> of the current node is <xref:System.Xaml.XamlNodeType>. The property does not report the XAML namespace that applies to objects or members in a general scoping sense, as interpreted under a XAML schema context. Your application must provide a means to cache information for the acting XAML namespace as it traverses XAML nodes, if you need that information in a manner other than how the XAML schema context reports it to a writer. See<xref:System.Xaml.XamlXmlReader.Namespace%2A> for notes on the reference implementation.\n  syntax:\n    content: public abstract System.Xaml.NamespaceDeclaration Namespace { get; }\n    return:\n      type: System.Xaml.NamespaceDeclaration\n      description: The XAML namespace information, if it is available; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Xaml.XamlReader.Namespace*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.NodeType\n  id: NodeType\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: NodeType\n  nameWithType: XamlReader.NodeType\n  fullName: System.Xaml.XamlReader.NodeType\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: When implemented in a derived class, gets the type of the current node.\n  remarks: Subtree readers can call NodeType, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.\n  syntax:\n    content: public abstract System.Xaml.XamlNodeType NodeType { get; }\n    return:\n      type: System.Xaml.XamlNodeType\n      description: A value of the <xref href=\"System.Xaml.XamlNodeType\"></xref> enumeration.\n  overload: System.Xaml.XamlReader.NodeType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.Read\n  id: Read\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: Read()\n  nameWithType: XamlReader.Read()\n  fullName: System.Xaml.XamlReader.Read()\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: When implemented in a derived class, provides the next XAML node from the source, if a node is available.\n  remarks: Subtree readers can call Read, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.\n  syntax:\n    content: public abstract bool Read ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a node is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Xaml.XamlReader.Read*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.ReadSubtree\n  id: ReadSubtree\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: ReadSubtree()\n  nameWithType: XamlReader.ReadSubtree()\n  fullName: System.Xaml.XamlReader.ReadSubtree()\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Returns a <xref href=\"System.Xaml.XamlReader\"></xref> that is based on the current <xref href=\"System.Xaml.XamlReader\"></xref>, where the returned <xref href=\"System.Xaml.XamlReader\"></xref> is used to iterate through a subtree of the XAML node structure.\n  remarks: \"This method has a default implementation and returns a valid <xref:System.Xaml.XamlReader>. The returned <xref:System.Xaml.XamlReader> is an internal class that restricts certain <xref:System.Xaml.XamlReader> actions. The restrictions are consistent with the purpose of reading only a dimensioned subtree of a larger source for a XAML node set, and of returning end-of-file or `null` at the current node when the subtree is exited.  \\n  \\n Generally, you should check the current node from the initial <xref:System.Xaml.XamlReader.Read%2A> to determine whether you need a subtree reader. How you check this may be implementation-specific; however, avoid creating multiple subtree readers for every subtree. In addition, avoid invoking a subtree reader for certain node cases (for example, for <xref:System.Xaml.XamlNodeType>) that cannot contain a subtree of nodes.  \\n  \\n After you obtain a subtree reader, you must call <xref:System.Xaml.XamlReader.Read%2A> on it to obtain a current node (or call <xref:System.Xaml.XamlReader.Skip%2A> to obtain a next node). You do not automatically obtain an initial node position from the subtree reader when you create it.  \\n  \\n The reader you obtain by calling ReadSubtree from this default implementation is an internal class. The internal class bases its behavior on the <xref:System.Xaml.XamlReader> implementation that is being used when ReadSubtree is called. The purpose of the internal class is to wrap the <xref:System.Xaml.XamlReader.Read%2A> and general traversal behavior. The traversal stays within the intended subtree by keeping track of <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> pairs or <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> pairs. It also correctly returns `false` for <xref:System.Xaml.XamlReader.Read%2A> and `true` for <xref:System.Xaml.XamlReader.IsEof%2A> when the reader is at the end of the subtree, as defined by its entry point. In general, you assume that any <xref:System.Xaml.XamlReader> API you call from a subtree reader has the same implementation as the overall <xref:System.Xaml.XamlReader> except for the traversal bounding behavior.  \\n  \\n However, ReadSubtree is virtual. Therefore, a specific <xref:System.Xaml.XamlReader> implementation can provide behavior that differs from the <xref:System.Xaml.XamlReader> internal wrapper behavior; and a <xref:System.Xaml.XamlReader> implementation can even disable subtree reader functionality by returning <xref:System.NotImplementedException> or other exceptions.\"\n  syntax:\n    content: public virtual System.Xaml.XamlReader ReadSubtree ();\n    parameters: []\n    return:\n      type: System.Xaml.XamlReader\n      description: A new XAML reader instance for the subtree.\n  overload: System.Xaml.XamlReader.ReadSubtree*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.SchemaContext\n  id: SchemaContext\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: SchemaContext\n  nameWithType: XamlReader.SchemaContext\n  fullName: System.Xaml.XamlReader.SchemaContext\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: When implemented in a derived class, gets an object that provides XAML schema context information for the information set.\n  syntax:\n    content: public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }\n    return:\n      type: System.Xaml.XamlSchemaContext\n      description: An object that provides XAML schema context information for the information set.\n  overload: System.Xaml.XamlReader.SchemaContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.Skip\n  id: Skip\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: Skip()\n  nameWithType: XamlReader.Skip()\n  fullName: System.Xaml.XamlReader.Skip()\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Skips the current node and advances the reader position to the next node.\n  remarks: \"Once skipped, <xref:System.Xaml.XamlReader.Read%2A> is called by the default Skip implementation. You typically do not call Skip and <xref:System.Xaml.XamlReader.Read%2A> in sequence.  \\n  \\n In the default Skip implementation, different actions are taken depending on which <xref:System.Xaml.XamlReader.NodeType%2A> the reader position is currently on. If the reader position is currently on a <xref:System.Xaml.XamlNodeType> or <xref:System.Xaml.XamlNodeType>, that member or object is skipped. For other <xref:System.Xaml.XamlReader.NodeType%2A> values, no action is taken other than calling <xref:System.Xaml.XamlReader.Read%2A> from the current position.  \\n  \\n Subtree readers can call Skip, with behavior restrictions. For more information, see the \\\"Subtree Readers\\\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  \\n  \\n The node tree behavior of Skip is based on the XML equivalent <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>. Based on the <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName> behavior equivalence, Skip skips the node and its subtree, not just the single entry node.\"\n  syntax:\n    content: public virtual void Skip ();\n    parameters: []\n  overload: System.Xaml.XamlReader.Skip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.System#IDisposable#Dispose\n  id: System#IDisposable#Dispose\n  isEii: true\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: System.IDisposable.Dispose()\n  nameWithType: XamlReader.System.IDisposable.Dispose()\n  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Xaml.XamlReader\"></xref> class.\n  syntax:\n    content: void IDisposable.Dispose ();\n    parameters: []\n  overload: System.Xaml.XamlReader.System#IDisposable#Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.Type\n  id: Type\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: Type\n  nameWithType: XamlReader.Type\n  fullName: System.Xaml.XamlReader.Type\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: When implemented in a derived class, gets the <xref href=\"System.Xaml.XamlType\"></xref> of the current node.\n  remarks: Subtree readers can call Type, with behavior restrictions. For more information, see the \"Subtree Readers\" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.\n  syntax:\n    content: public abstract System.Xaml.XamlType Type { get; }\n    return:\n      type: System.Xaml.XamlType\n      description: The <xref href=\"System.Xaml.XamlType\"></xref> of the current node; or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, if the current reader position is not on an object.\n  overload: System.Xaml.XamlReader.Type*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.XamlReader.Value\n  id: Value\n  parent: System.Xaml.XamlReader\n  langs:\n  - csharp\n  name: Value\n  nameWithType: XamlReader.Value\n  fullName: System.Xaml.XamlReader.Value\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: When implemented in a derived class, gets the value of the current node.\n  syntax:\n    content: public abstract object Value { get; }\n    return:\n      type: System.Object\n      description: The value of the current node; or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, if the current reader position is not on a <xref href=\"System.Xaml.XamlNodeType\"></xref> node type.\n  overload: System.Xaml.XamlReader.Value*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Xaml.XamlReader.#ctor\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: XamlReader()\n  nameWithType: XamlReader.XamlReader()\n  fullName: System.Xaml.XamlReader.XamlReader()\n- uid: System.Xaml.XamlReader.Close\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Close()\n  nameWithType: XamlReader.Close()\n  fullName: System.Xaml.XamlReader.Close()\n- uid: System.Xaml.XamlReader.Dispose(System.Boolean)\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: XamlReader.Dispose(Boolean)\n  fullName: System.Xaml.XamlReader.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xaml.XamlReader.IsDisposed\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: IsDisposed\n  nameWithType: XamlReader.IsDisposed\n  fullName: System.Xaml.XamlReader.IsDisposed\n- uid: System.Xaml.XamlReader.IsEof\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: IsEof\n  nameWithType: XamlReader.IsEof\n  fullName: System.Xaml.XamlReader.IsEof\n- uid: System.Xaml.XamlReader.Member\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Member\n  nameWithType: XamlReader.Member\n  fullName: System.Xaml.XamlReader.Member\n- uid: System.Xaml.XamlMember\n  parent: System.Xaml\n  isExternal: false\n  name: XamlMember\n  nameWithType: XamlMember\n  fullName: System.Xaml.XamlMember\n- uid: System.Xaml.XamlReader.Namespace\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Namespace\n  nameWithType: XamlReader.Namespace\n  fullName: System.Xaml.XamlReader.Namespace\n- uid: System.Xaml.NamespaceDeclaration\n  parent: System.Xaml\n  isExternal: false\n  name: NamespaceDeclaration\n  nameWithType: NamespaceDeclaration\n  fullName: System.Xaml.NamespaceDeclaration\n- uid: System.Xaml.XamlReader.NodeType\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: NodeType\n  nameWithType: XamlReader.NodeType\n  fullName: System.Xaml.XamlReader.NodeType\n- uid: System.Xaml.XamlNodeType\n  parent: System.Xaml\n  isExternal: false\n  name: XamlNodeType\n  nameWithType: XamlNodeType\n  fullName: System.Xaml.XamlNodeType\n- uid: System.Xaml.XamlReader.Read\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Read()\n  nameWithType: XamlReader.Read()\n  fullName: System.Xaml.XamlReader.Read()\n- uid: System.Xaml.XamlReader.ReadSubtree\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: ReadSubtree()\n  nameWithType: XamlReader.ReadSubtree()\n  fullName: System.Xaml.XamlReader.ReadSubtree()\n- uid: System.Xaml.XamlReader\n  parent: System.Xaml\n  isExternal: false\n  name: XamlReader\n  nameWithType: XamlReader\n  fullName: System.Xaml.XamlReader\n- uid: System.Xaml.XamlReader.SchemaContext\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: SchemaContext\n  nameWithType: XamlReader.SchemaContext\n  fullName: System.Xaml.XamlReader.SchemaContext\n- uid: System.Xaml.XamlSchemaContext\n  parent: System.Xaml\n  isExternal: false\n  name: XamlSchemaContext\n  nameWithType: XamlSchemaContext\n  fullName: System.Xaml.XamlSchemaContext\n- uid: System.Xaml.XamlReader.Skip\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Skip()\n  nameWithType: XamlReader.Skip()\n  fullName: System.Xaml.XamlReader.Skip()\n- uid: System.Xaml.XamlReader.System#IDisposable#Dispose\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: System.IDisposable.Dispose()\n  nameWithType: XamlReader.System.IDisposable.Dispose()\n  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()\n- uid: System.Xaml.XamlReader.Type\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Type\n  nameWithType: XamlReader.Type\n  fullName: System.Xaml.XamlReader.Type\n- uid: System.Xaml.XamlType\n  parent: System.Xaml\n  isExternal: false\n  name: XamlType\n  nameWithType: XamlType\n  fullName: System.Xaml.XamlType\n- uid: System.Xaml.XamlReader.Value\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Value\n  nameWithType: XamlReader.Value\n  fullName: System.Xaml.XamlReader.Value\n- uid: System.Xaml.XamlReader.#ctor*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: XamlReader\n  nameWithType: XamlReader.XamlReader\n- uid: System.Xaml.XamlReader.Close*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Close\n  nameWithType: XamlReader.Close\n- uid: System.Xaml.XamlReader.Dispose*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Dispose\n  nameWithType: XamlReader.Dispose\n- uid: System.Xaml.XamlReader.IsDisposed*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: IsDisposed\n  nameWithType: XamlReader.IsDisposed\n- uid: System.Xaml.XamlReader.IsEof*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: IsEof\n  nameWithType: XamlReader.IsEof\n- uid: System.Xaml.XamlReader.Member*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Member\n  nameWithType: XamlReader.Member\n- uid: System.Xaml.XamlReader.Namespace*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Namespace\n  nameWithType: XamlReader.Namespace\n- uid: System.Xaml.XamlReader.NodeType*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: NodeType\n  nameWithType: XamlReader.NodeType\n- uid: System.Xaml.XamlReader.Read*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Read\n  nameWithType: XamlReader.Read\n- uid: System.Xaml.XamlReader.ReadSubtree*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: ReadSubtree\n  nameWithType: XamlReader.ReadSubtree\n- uid: System.Xaml.XamlReader.SchemaContext*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: SchemaContext\n  nameWithType: XamlReader.SchemaContext\n- uid: System.Xaml.XamlReader.Skip*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Skip\n  nameWithType: XamlReader.Skip\n- uid: System.Xaml.XamlReader.System#IDisposable#Dispose*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: System.IDisposable.Dispose\n  nameWithType: XamlReader.System.IDisposable.Dispose\n- uid: System.Xaml.XamlReader.Type*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Type\n  nameWithType: XamlReader.Type\n- uid: System.Xaml.XamlReader.Value*\n  parent: System.Xaml.XamlReader\n  isExternal: false\n  name: Value\n  nameWithType: XamlReader.Value\n"}