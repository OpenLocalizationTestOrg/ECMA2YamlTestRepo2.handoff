{"nodes":[{"pos":[2833,2928],"content":"Represents a displacement in <ph id=\"ph1\">[!INCLUDE[TLA#tla_2d](~/add/includes/tlasharptla-2d-md.md)]</ph> space.","needQuote":true,"needEscape":true,"source":"Represents a displacement in [!INCLUDE[TLA#tla_2d](~/add/includes/tlasharptla-2d-md.md)] space."},{"pos":[2941,4387],"content":"A <xref:System.Windows.Point> represents a fixed position, but a Vector represents a direction and a magnitude (for example, velocity or acceleration). Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.       In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a Vector can be either a comma or a space.       Some cultures might use the comma character as the decimal delimiter instead of the period character. XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter. You should avoid using the comma character as the decimal delimiter if specifying a Vector in XAML, because that will clash with the string type conversion of a Vector attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.      <a name=\"xamlAttributeUsage_Vector\"></a>    ## XAML Attribute Usage      ```   <object property=\"x,y\"/>   -or-   <object property=\"x y\"/>   ```      <a name=\"xamlValues_Vector\"></a>    ## XAML Values    *x*    The vector's X component. For more information, see the <xref:System.Windows.Vector.X%2A> property.       *y*    The vector's Y component. For more information, see the <xref:System.Windows.Vector.Y%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A &lt;xref:System.Windows.Point&gt; represents a fixed position, but a Vector represents a direction and a magnitude (for example, velocity or acceleration).","pos":[0,151],"source":"A <xref:System.Windows.Point> represents a fixed position, but a Vector represents a direction and a magnitude (for example, velocity or acceleration)."},{"content":"Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.","pos":[152,290]},{"content":"In XAML, the delimiter between the &lt;xref:System.Windows.Vector.X%2A&gt; and &lt;xref:System.Windows.Vector.Y%2A&gt; values of a Vector can be either a comma or a space.","pos":[297,456],"source":"       In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a Vector can be either a comma or a space."},{"content":"Some cultures might use the comma character as the decimal delimiter instead of the period character.","pos":[463,564]},{"content":"XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter.","pos":[565,712]},{"content":"You should avoid using the comma character as the decimal delimiter if specifying a Vector in XAML, because that will clash with the string type conversion of a Vector attribute value into the &lt;xref:System.Windows.Vector.X%2A&gt; and &lt;xref:System.Windows.Vector.Y%2A&gt; components.","pos":[713,989],"source":" You should avoid using the comma character as the decimal delimiter if specifying a Vector in XAML, because that will clash with the string type conversion of a Vector attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Vector\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"x,y\"/&gt;   -or-   &lt;object property=\"x y\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_Vector\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>x<ept id=\"p3\">*</ept>    The vector's X component.","pos":[995,1230],"source":"<a name=\"xamlAttributeUsage_Vector\"></a>    ## XAML Attribute Usage      ```   <object property=\"x,y\"/>   -or-   <object property=\"x y\"/>   ```      <a name=\"xamlValues_Vector\"></a>    ## XAML Values    *x*    The vector's X component."},{"content":"For more information, see the &lt;xref:System.Windows.Vector.X%2A&gt; property.","pos":[1231,1304],"source":" For more information, see the <xref:System.Windows.Vector.X%2A> property."},{"content":"<bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>    The vector's Y component.","pos":[1311,1343],"source":"*y*    The vector's Y component."},{"content":"For more information, see the &lt;xref:System.Windows.Vector.Y%2A&gt; property.","pos":[1344,1417],"source":" For more information, see the <xref:System.Windows.Vector.Y%2A> property."}]},{"pos":[5394,5481],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Vector\"></xref> structure."},{"pos":[5881,5978],"content":"The &lt;xref:System.Windows.Vector.X*&gt;-offset of the new <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Windows.Vector.X*>-offset of the new <xref href=\"System.Windows.Vector\"></xref>."},{"pos":[6036,6133],"content":"The &lt;xref:System.Windows.Vector.Y*&gt;-offset of the new <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Windows.Vector.Y*>-offset of the new <xref href=\"System.Windows.Vector\"></xref>."},{"pos":[6601,6688],"content":"Translates the specified point by the specified vector and returns the resulting point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Translates the specified point by the specified vector and returns the resulting point.","pos":[0,87]}]},{"pos":[7238,7282],"content":"The amount to translate the specified point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount to translate the specified point.","pos":[0,44]}]},{"pos":[7351,7374],"content":"The point to translate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The point to translate.","pos":[0,23]}]},{"pos":[7439,7507],"content":"The result of translating <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">point</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The result of translating <code>point</code> by <code>vector</code>."},{"pos":[7978,8076],"content":"Adds two vectors and returns the result as a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Adds two vectors and returns the result as a <xref href=\"System.Windows.Vector\"></xref> structure."},{"pos":[8584,8608],"content":"The first vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to add.","pos":[0,24]}]},{"pos":[8680,8705],"content":"The second vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to add.","pos":[0,25]}]},{"pos":[8771,8828],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The sum of <code>vector1</code> and <code>vector2</code>."},{"pos":[9344,9421],"content":"Retrieves the angle, expressed in degrees, between the two specified vectors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the angle, expressed in degrees, between the two specified vectors.","pos":[0,77]}]},{"pos":[9939,9968],"content":"The first vector to evaluate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to evaluate.","pos":[0,29]}]},{"pos":[10040,10070],"content":"The second vector to evaluate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to evaluate.","pos":[0,30]}]},{"pos":[10128,10205],"content":"The angle, in degrees, between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The angle, in degrees, between <code>vector1</code> and <code>vector2</code>."},{"pos":[10730,10774],"content":"Calculates the cross product of two vectors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the cross product of two vectors.","pos":[0,44]}]},{"pos":[11301,11330],"content":"The first vector to evaluate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to evaluate.","pos":[0,29]}]},{"pos":[11402,11432],"content":"The second vector to evaluate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to evaluate.","pos":[0,30]}]},{"pos":[11491,11680],"content":"The cross product of <code>vector1</code> and <code>vector2</code>. The following formula is used to calculate the cross product:       `(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)`","needQuote":false,"needEscape":true,"nodes":[{"content":"The cross product of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,67],"source":"The cross product of <code>vector1</code> and <code>vector2</code>."},{"content":"The following formula is used to calculate the cross product:       <ph id=\"ph1\">`(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)`</ph>","pos":[68,187],"source":" The following formula is used to calculate the cross product:       `(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)`"}]},{"pos":[12201,12243],"content":"Calculates the determinant of two vectors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the determinant of two vectors.","pos":[0,42]}]},{"pos":[12746,12775],"content":"The first vector to evaluate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to evaluate.","pos":[0,29]}]},{"pos":[12847,12877],"content":"The second vector to evaluate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to evaluate.","pos":[0,30]}]},{"pos":[12935,13000],"content":"The determinant of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The determinant of <code>vector1</code> and <code>vector2</code>."},{"pos":[13478,13602],"content":"Divides the specified vector by the specified scalar and returns the result as a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Divides the specified vector by the specified scalar and returns the result as a <xref href=\"System.Windows.Vector\"></xref>."},{"pos":[14083,14114],"content":"The vector structure to divide.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector structure to divide.","pos":[0,31]}]},{"pos":[14177,14217],"content":"The amount by which <ph id=\"ph1\">`vector`</ph> is divided.","needQuote":true,"needEscape":true,"source":"The amount by which `vector` is divided."},{"pos":[14283,14349],"content":"The result of dividing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">scalar</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The result of dividing <code>vector</code> by <code>scalar</code>."},{"pos":[14757,14998],"content":"Determines whether the specified &lt;xref:System.Object&gt; is a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure and, if it is, whether it has the same &lt;xref:System.Windows.Vector.X<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.Vector.Y<ept id=\"p2\">*</ept>&gt; values as this vector.","needQuote":true,"needEscape":true,"source":"Determines whether the specified <xref:System.Object> is a <xref href=\"System.Windows.Vector\"></xref> structure and, if it is, whether it has the same <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values as this vector."},{"pos":[15010,15365],"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","pos":[0,355],"nodes":[{"content":"A vector's &lt;xref:System.Windows.Vector.X%2A&gt; and &lt;xref:System.Windows.Vector.Y%2A&gt; properties are described using &lt;xref:System.Double&gt; values.","pos":[0,142],"source":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values."},{"content":"Because the value of a &lt;xref:System.Double&gt; can lose precision when arithmetic operations are performed on it, a comparison between two &lt;xref:System.Windows.Vector&gt; structures that are logically equal might fail.","pos":[143,355],"source":" Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail."}]}]},{"pos":[15804,15826],"content":"The vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to compare.","pos":[0,22]}]},{"pos":[15885,16194],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">o</ph><ept id=\"p2\">&lt;/code&gt;</ept> is a <bpt id=\"p3\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> and has the same &lt;xref:System.Windows.Vector.X<bpt id=\"p4\">*</bpt>&gt; and &lt;xref:System.Windows.Vector.Y<ept id=\"p4\">*</ept>&gt; values as this vector; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>o</code> is a <xref href=\"System.Windows.Vector\"></xref> and has the same <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values as this vector; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16618,16652],"content":"Compares two vectors for equality.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares two vectors for equality.","pos":[0,34]}]},{"pos":[16664,17019],"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","pos":[0,355],"nodes":[{"content":"A vector's &lt;xref:System.Windows.Vector.X%2A&gt; and &lt;xref:System.Windows.Vector.Y%2A&gt; properties are described using &lt;xref:System.Double&gt; values.","pos":[0,142],"source":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values."},{"content":"Because the value of a &lt;xref:System.Double&gt; can lose precision when arithmetic operations are performed on it, a comparison between two &lt;xref:System.Windows.Vector&gt; structures that are logically equal might fail.","pos":[143,355],"source":" Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail."}]}]},{"pos":[17465,17504],"content":"The vector to compare with this vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to compare with this vector.","pos":[0,39]}]},{"pos":[17563,17824],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> has the same &lt;xref:System.Windows.Vector.X<bpt id=\"p3\">*</bpt>&gt; and &lt;xref:System.Windows.Vector.Y<ept id=\"p3\">*</ept>&gt; values as this vector; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> has the same <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values as this vector; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18313,18361],"content":"Compares the two specified vectors for equality.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares the two specified vectors for equality.","pos":[0,48]}]},{"pos":[18373,18720],"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.","pos":[0,347],"nodes":[{"content":"A vector's &lt;xref:System.Windows.Vector.X%2A&gt; and &lt;xref:System.Windows.Vector.Y%2A&gt; properties are described using &lt;xref:System.Double&gt; values.","pos":[0,142],"source":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values."},{"content":"Because the value of a &lt;xref:System.Double&gt; can lose precision when arithmetic operations are performed on it, a comparison between two &lt;xref:System.Double&gt; structures that are logically equal might fail.","pos":[143,347],"source":" Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail."}]}]},{"pos":[19208,19236],"content":"The first vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to compare.","pos":[0,28]}]},{"pos":[19308,19337],"content":"The second vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to compare.","pos":[0,29]}]},{"pos":[19396,19678],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if t he &lt;xref:System.Windows.Vector.X<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.Vector.Y<ept id=\"p2\">*</ept>&gt; components of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p3\">&lt;/code&gt;</ept> and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p4\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if t he <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[20063,20101],"content":"Returns the hash code for this vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for this vector.","pos":[0,38]}]},{"pos":[20510,20542],"content":"The hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash code for this instance.","pos":[0,32]}]},{"pos":[20903,20934],"content":"Gets the length of this vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the length of this vector.","pos":[0,31]}]},{"pos":[20946,21011],"content":"The length of a vector is sometimes referred to as the magnitude.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The length of a vector is sometimes referred to as the magnitude.","pos":[0,65]}]},{"pos":[21481,21507],"content":"The length of this vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of this vector.","pos":[0,26]}]},{"pos":[21898,21943],"content":"Gets the square of the length of this vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the square of the length of this vector.","pos":[0,45]}]},{"pos":[21955,22020],"content":"The length of a vector is sometimes referred to as its magnitude.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The length of a vector is sometimes referred to as its magnitude.","pos":[0,65]}]},{"pos":[22542,22612],"content":"The square of the <xref:System.Windows.Vector.Length*> of this vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The square of the &lt;xref:System.Windows.Vector.Length*&gt; of this vector.","pos":[0,70],"source":"The square of the <xref:System.Windows.Vector.Length*> of this vector."}]},{"pos":[23102,23227],"content":"Multiplies the specified scalar by the specified vector and returns the resulting <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Multiplies the specified scalar by the specified vector and returns the resulting <xref href=\"System.Windows.Vector\"></xref>."},{"pos":[23738,23761],"content":"The scalar to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar to multiply.","pos":[0,23]}]},{"pos":[23832,23855],"content":"The vector to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to multiply.","pos":[0,23]}]},{"pos":[23921,23991],"content":"The result of multiplying <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scalar</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The result of multiplying <code>scalar</code> and <code>vector</code>."},{"pos":[24476,24601],"content":"Multiplies the specified vector by the specified scalar and returns the resulting <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Multiplies the specified vector by the specified scalar and returns the resulting <xref href=\"System.Windows.Vector\"></xref>."},{"pos":[25120,25143],"content":"The vector to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to multiply.","pos":[0,23]}]},{"pos":[25206,25229],"content":"The scalar to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar to multiply.","pos":[0,23]}]},{"pos":[25295,25365],"content":"The result of multiplying <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">scalar</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The result of multiplying <code>vector</code> and <code>scalar</code>."},{"pos":[25878,26003],"content":"Transforms the coordinate space of the specified vector using the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Transforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\"></xref>."},{"pos":[26569,26603],"content":"The vector structure to transform.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector structure to transform.","pos":[0,34]}]},{"pos":[26680,26720],"content":"The transformation to apply to <ph id=\"ph1\">`vector`</ph>.","needQuote":true,"needEscape":true,"source":"The transformation to apply to `vector`."},{"pos":[26786,26856],"content":"The result of transforming <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">matrix</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The result of transforming <code>vector</code> by <code>matrix</code>."},{"pos":[27357,27462],"content":"Calculates the dot product of the two specified vectors and returns the result as a <xref:System.Double>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the dot product of the two specified vectors and returns the result as a &lt;xref:System.Double&gt;.","pos":[0,105],"source":"Calculates the dot product of the two specified vectors and returns the result as a <xref:System.Double>."}]},{"pos":[27986,28015],"content":"The first vector to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to multiply.","pos":[0,29]}]},{"pos":[28087,28127],"content":"The second vector structure to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector structure to multiply.","pos":[0,40]}]},{"pos":[28186,28401],"content":"A &lt;xref:System.Double&gt; containing the scalar dot product of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, which is calculated using the following formula:       <ph id=\"ph3\">`(vector1.X * vector2.X) + (vector1.Y * vector2.Y)`</ph>","needQuote":false,"needEscape":true,"source":"A <xref:System.Double> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:       `(vector1.X * vector2.X) + (vector1.Y * vector2.Y)`"},{"pos":[28764,28864],"content":"Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.","needQuote":true,"needEscape":true,"nodes":[{"content":"Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.","pos":[0,100],"nodes":[{"content":"Negates this vector.","pos":[0,20]},{"content":"The vector has the same magnitude as before, but its direction is now opposite.","pos":[21,100]}]}]},{"pos":[29551,29574],"content":"Normalizes this vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Normalizes this vector.","pos":[0,23]}]},{"pos":[29586,29836],"content":"A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1. The resulting vector is often called a unit vector. A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1. The resulting vector is often called a unit vector. A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.","pos":[0,250],"nodes":[{"content":"A normalized vector maintains its direction but its &lt;xref:System.Windows.Vector.Length%2A&gt; becomes 1.","pos":[0,101],"source":"A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1."},{"content":"The resulting vector is often called a unit vector.","pos":[102,153]},{"content":"A vector is normalized by dividing the vector by its own &lt;xref:System.Windows.Vector.Length%2A&gt;.","pos":[154,250],"source":" A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>."}]}]},{"pos":[30660,30735],"content":"Translates a point by the specified vector and returns the resulting point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Translates a point by the specified vector and returns the resulting point.","pos":[0,75]}]},{"pos":[31483,31520],"content":"The vector used to translate <ph id=\"ph1\">`point`</ph>.","needQuote":true,"needEscape":true,"source":"The vector used to translate `point`."},{"pos":[31589,31612],"content":"The point to translate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The point to translate.","pos":[0,23]}]},{"pos":[31677,31745],"content":"The result of translating <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">point</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The result of translating <code>point</code> by <code>vector</code>."},{"pos":[32266,32318],"content":"Adds two vectors and returns the result as a vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds two vectors and returns the result as a vector.","pos":[0,52]}]},{"pos":[33068,33092],"content":"The first vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to add.","pos":[0,24]}]},{"pos":[33164,33189],"content":"The second vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to add.","pos":[0,25]}]},{"pos":[33255,33312],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The sum of <code>vector1</code> and <code>vector2</code>."},{"pos":[33817,33903],"content":"Divides the specified vector by the specified scalar and returns the resulting vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides the specified vector by the specified scalar and returns the resulting vector.","pos":[0,86]}]},{"pos":[34601,34622],"content":"The vector to divide.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to divide.","pos":[0,21]}]},{"pos":[34685,34730],"content":"The scalar by which <ph id=\"ph1\">`vector`</ph> will be divided.","needQuote":true,"needEscape":true,"source":"The scalar by which `vector` will be divided."},{"pos":[34796,34862],"content":"The result of dividing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">scalar</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The result of dividing <code>vector</code> by <code>scalar</code>."},{"pos":[35383,35417],"content":"Compares two vectors for equality.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares two vectors for equality.","pos":[0,34]}]},{"pos":[35429,35784],"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","pos":[0,355],"nodes":[{"content":"A vector's &lt;xref:System.Windows.Vector.X%2A&gt; and &lt;xref:System.Windows.Vector.Y%2A&gt; properties are described using &lt;xref:System.Double&gt; values.","pos":[0,142],"source":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values."},{"content":"Because the value of a &lt;xref:System.Double&gt; can lose precision when arithmetic operations are performed on it, a comparison between two &lt;xref:System.Windows.Vector&gt; structures that are logically equal might fail.","pos":[143,355],"source":" Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail."}]}]},{"pos":[36478,36506],"content":"The first vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to compare.","pos":[0,28]}]},{"pos":[36578,36607],"content":"The second vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to compare.","pos":[0,29]}]},{"pos":[36666,36947],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.Vector.X<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.Vector.Y<ept id=\"p2\">*</ept>&gt; components of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p3\">&lt;/code&gt;</ept> and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p4\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[37628,37640],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[37705,37717],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[38395,38407],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[38471,38483],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[39014,39050],"content":"Compares two vectors for inequality.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares two vectors for inequality.","pos":[0,36]}]},{"pos":[39062,39417],"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","pos":[0,355],"nodes":[{"content":"A vector's &lt;xref:System.Windows.Vector.X%2A&gt; and &lt;xref:System.Windows.Vector.Y%2A&gt; properties are described using &lt;xref:System.Double&gt; values.","pos":[0,142],"source":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values."},{"content":"Because the value of a &lt;xref:System.Double&gt; can lose precision when arithmetic operations are performed on it, a comparison between two &lt;xref:System.Windows.Vector&gt; structures that are logically equal might fail.","pos":[143,355],"source":" Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail."}]}]},{"pos":[40125,40153],"content":"The first vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to compare.","pos":[0,28]}]},{"pos":[40225,40254],"content":"The second vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to compare.","pos":[0,29]}]},{"pos":[40313,40598],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.Vector.X<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.Vector.Y<ept id=\"p2\">*</ept>&gt; components of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p3\">&lt;/code&gt;</ept> and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p4\">&lt;/code&gt;</ept> are different; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> components of <code>vector1</code> and <code>vector2</code> are different; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[41105,41194],"content":"Multiplies the specified scalar by the specified vector and returns the resulting vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies the specified scalar by the specified vector and returns the resulting vector.","pos":[0,89]}]},{"pos":[41914,41937],"content":"The scalar to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar to multiply.","pos":[0,23]}]},{"pos":[42008,42031],"content":"The vector to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to multiply.","pos":[0,23]}]},{"pos":[42097,42167],"content":"The result of multiplying <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scalar</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The result of multiplying <code>scalar</code> and <code>vector</code>."},{"pos":[42672,42761],"content":"Multiplies the specified vector by the specified scalar and returns the resulting vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies the specified vector by the specified scalar and returns the resulting vector.","pos":[0,89]}]},{"pos":[43489,43512],"content":"The vector to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to multiply.","pos":[0,23]}]},{"pos":[43575,43598],"content":"The scalar to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar to multiply.","pos":[0,23]}]},{"pos":[43664,43734],"content":"The result of multiplying <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">scalar</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The result of multiplying <code>vector</code> and <code>scalar</code>."},{"pos":[44267,44392],"content":"Transforms the coordinate space of the specified vector using the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Transforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\"></xref>."},{"pos":[45207,45231],"content":"The vector to transform.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to transform.","pos":[0,24]}]},{"pos":[45308,45348],"content":"The transformation to apply to <ph id=\"ph1\">`vector`</ph>.","needQuote":true,"needEscape":true,"source":"The transformation to apply to `vector`."},{"pos":[45414,45484],"content":"The result of transforming <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">matrix</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The result of transforming <code>vector</code> by <code>matrix</code>."},{"pos":[46005,46120],"content":"Calculates the dot product of the two specified vector structures and returns the result as a <xref:System.Double>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the dot product of the two specified vector structures and returns the result as a &lt;xref:System.Double&gt;.","pos":[0,115],"source":"Calculates the dot product of the two specified vector structures and returns the result as a <xref:System.Double>."}]},{"pos":[46865,46894],"content":"The first vector to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to multiply.","pos":[0,29]}]},{"pos":[46966,46996],"content":"The second vector to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to multiply.","pos":[0,30]}]},{"pos":[47055,47274],"content":"Returns a &lt;xref:System.Double&gt; containing the scalar dot product of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, which is calculated using the following formula:       <ph id=\"ph3\">`vector1.X * vector2.X + vector1.Y * vector2.Y`</ph>","needQuote":false,"needEscape":true,"source":"Returns a <xref:System.Double> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:       `vector1.X * vector2.X + vector1.Y * vector2.Y`"},{"pos":[47811,47855],"content":"Subtracts one specified vector from another.","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtracts one specified vector from another.","pos":[0,44]}]},{"pos":[48622,48668],"content":"The vector from which <ph id=\"ph1\">`vector2`</ph> is subtracted.","needQuote":true,"needEscape":true,"source":"The vector from which `vector2` is subtracted."},{"pos":[48740,48778],"content":"The vector to subtract from <ph id=\"ph1\">`vector1`</ph>.","needQuote":true,"needEscape":true,"source":"The vector to subtract from `vector1`."},{"pos":[48844,48913],"content":"The difference between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The difference between <code>vector1</code> and <code>vector2</code>."},{"pos":[49397,49426],"content":"Negates the specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Negates the specified vector.","pos":[0,29]}]},{"pos":[50107,50128],"content":"The vector to negate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to negate.","pos":[0,21]}]},{"pos":[50194,50397],"content":"A vector with &lt;xref:System.Windows.Vector.X<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Windows.Vector.Y<ept id=\"p1\">*</ept>&gt; values opposite of the &lt;xref:System.Windows.Vector.X<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.Vector.Y<ept id=\"p2\">*</ept>&gt; values of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A vector with <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values opposite of the <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values of <code>vector</code>."},{"pos":[50810,50928],"content":"Converts a string representation of a vector into the equivalent <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Converts a string representation of a vector into the equivalent <xref href=\"System.Windows.Vector\"></xref> structure."},{"pos":[51522,51562],"content":"The string representation of the vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string representation of the vector.","pos":[0,40]}]},{"pos":[51628,51696],"content":"The equivalent <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"The equivalent <xref href=\"System.Windows.Vector\"></xref> structure."},{"pos":[52194,52255],"content":"Subtracts the specified vector from another specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtracts the specified vector from another specified vector.","pos":[0,61]}]},{"pos":[52926,52972],"content":"The vector from which <ph id=\"ph1\">`vector2`</ph> is subtracted.","needQuote":true,"needEscape":true,"source":"The vector from which `vector2` is subtracted."},{"pos":[53044,53082],"content":"The vector to subtract from <ph id=\"ph1\">`vector1`</ph>.","needQuote":true,"needEscape":true,"source":"The vector to subtract from `vector1`."},{"pos":[53148,53217],"content":"The difference between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The difference between <code>vector1</code> and <code>vector2</code>."},{"pos":[53845,54085],"content":"This member supports the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastructure and is not intended to be used directly from your code. For a description of this member, see <xref:System.IFormattable.ToString*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member supports the <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> infrastructure and is not intended to be used directly from your code.","pos":[0,164],"source":"This member supports the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastructure and is not intended to be used directly from your code."},{"content":"For a description of this member, see &lt;xref:System.IFormattable.ToString*&gt;.","pos":[165,240],"source":" For a description of this member, see <xref:System.IFormattable.ToString*>."}]},{"pos":[54260,54485],"content":"The string specifying the format to use.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default format defined for the type of the <xref:System.IFormattable> implementation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The string specifying the format to use.","pos":[0,40]},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default format defined for the type of the &lt;xref:System.IFormattable&gt; implementation.","pos":[47,215],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default format defined for the type of the <xref:System.IFormattable> implementation."}]},{"pos":[54561,54867],"content":"The <xref uid=\"langword_csharp_IFormatProvider\" name=\"IFormatProvider\" href=\"\"></xref> to use to format the value.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to obtain the numeric format information from the current locale setting of the operating system.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IFormatProvider\" name=\"IFormatProvider\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use to format the value.","pos":[0,114],"source":"The <xref uid=\"langword_csharp_IFormatProvider\" name=\"IFormatProvider\" href=\"\"></xref> to use to format the value."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to obtain the numeric format information from the current locale setting of the operating system.","pos":[121,290],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to obtain the numeric format information from the current locale setting of the operating system."}]},{"pos":[54926,55004],"content":"A string containing the value of the current instance in the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the value of the current instance in the specified format.","pos":[0,78]}]},{"pos":[55396,55491],"content":"Returns the string representation of this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Returns the string representation of this <xref href=\"System.Windows.Vector\"></xref> structure."},{"pos":[56044,56199],"content":"A string that represents the &lt;xref:System.Windows.Vector.X<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Windows.Vector.Y<ept id=\"p1\">*</ept>&gt; values of this <bpt id=\"p2\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that represents the <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values of this <xref href=\"System.Windows.Vector\"></xref>."},{"pos":[56664,56801],"content":"Returns the string representation of this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure with the specified formatting information.","needQuote":true,"needEscape":true,"source":"Returns the string representation of this <xref href=\"System.Windows.Vector\"></xref> structure with the specified formatting information."},{"pos":[56965,57009],"content":"The culture-specific formatting information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The culture-specific formatting information.","pos":[0,44]}]},{"pos":[57067,57222],"content":"A string that represents the &lt;xref:System.Windows.Vector.X<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Windows.Vector.Y<ept id=\"p1\">*</ept>&gt; values of this <bpt id=\"p2\">&lt;xref href=\"System.Windows.Vector\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that represents the <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values of this <xref href=\"System.Windows.Vector\"></xref>."},{"pos":[57555,57599],"content":"Gets or sets the X component of this vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the X component of this vector.","pos":[0,44]}]},{"pos":[58133,58188],"content":"The X component of this vector. The default value is 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X component of this vector. The default value is 0.","pos":[0,55],"nodes":[{"content":"The X component of this vector.","pos":[0,31]},{"content":"The default value is 0.","pos":[32,55]}]}]},{"pos":[58514,58558],"content":"Gets or sets the Y component of this vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the Y component of this vector.","pos":[0,44]}]},{"pos":[59092,59147],"content":"The Y component of this vector. The default value is 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Y component of this vector. The default value is 0.","pos":[0,55],"nodes":[{"content":"The Y component of this vector.","pos":[0,31]},{"content":"The default value is 0.","pos":[32,55]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Vector\n  id: Vector\n  children:\n  - System.Windows.Vector.#ctor(System.Double,System.Double)\n  - System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)\n  - System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.Divide(System.Windows.Vector,System.Double)\n  - System.Windows.Vector.Equals(System.Object)\n  - System.Windows.Vector.Equals(System.Windows.Vector)\n  - System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.GetHashCode\n  - System.Windows.Vector.Length\n  - System.Windows.Vector.LengthSquared\n  - System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)\n  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)\n  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.Negate\n  - System.Windows.Vector.Normalize\n  - System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)\n  - System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)\n  - System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Point)\n  - System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Size)\n  - System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)\n  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)\n  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)\n  - System.Windows.Vector.Parse(System.String)\n  - System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  - System.Windows.Vector.ToString\n  - System.Windows.Vector.ToString(System.IFormatProvider)\n  - System.Windows.Vector.X\n  - System.Windows.Vector.Y\n  langs:\n  - csharp\n  name: Vector\n  nameWithType: Vector\n  fullName: System.Windows.Vector\n  type: Struct\n  summary: Represents a displacement in [!INCLUDE[TLA#tla_2d](~/add/includes/tlasharptla-2d-md.md)] space.\n  remarks: \"A <xref:System.Windows.Point> represents a fixed position, but a Vector represents a direction and a magnitude (for example, velocity or acceleration). Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.  \\n  \\n In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a Vector can be either a comma or a space.  \\n  \\n Some cultures might use the comma character as the decimal delimiter instead of the period character. XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter. You should avoid using the comma character as the decimal delimiter if specifying a Vector in XAML, because that will clash with the string type conversion of a Vector attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.  \\n  \\n<a name=\\\"xamlAttributeUsage_Vector\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"x,y\\\"/>  \\n-or-  \\n<object property=\\\"x y\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_Vector\\\"></a>   \\n## XAML Values  \\n *x*  \\n The vector's X component. For more information, see the <xref:System.Windows.Vector.X%2A> property.  \\n  \\n *y*  \\n The vector's Y component. For more information, see the <xref:System.Windows.Vector.Y%2A> property.\"\n  example:\n  - \"The following example shows how to add two Vector structures.  \\n  \\n [!code-cs[VectorSample#10](~/add/codesnippet/csharp/MilVectorSample/Window1.xaml.cs#10)]\\n [!code-vb[VectorSample#10](~/add/codesnippet/visualbasic/milvectorsample/window1.xaml.vb#10)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))]\n\n      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))]\n\n      public struct Vector : IFormattable\n  inheritance:\n  - System.ValueType\n  implements:\n  - System.IFormattable\n  platform:\n  - net462\n- uid: System.Windows.Vector.#ctor(System.Double,System.Double)\n  id: '#ctor(System.Double,System.Double)'\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Vector(Double,Double)\n  nameWithType: Vector.Vector(Double,Double)\n  fullName: System.Windows.Vector.Vector(Double,Double)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Vector\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following example shows how to create two vectors and add them together.  \\n  \\n [!code-cs[VectorExamples_snip#AddTwoVectorsExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#addtwovectorsexample_csharp)]\"\n  syntax:\n    content: public Vector (double x, double y);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The <xref:System.Windows.Vector.X*>-offset of the new <xref href=\"System.Windows.Vector\"></xref>.\n    - id: y\n      type: System.Double\n      description: The <xref:System.Windows.Vector.Y*>-offset of the new <xref href=\"System.Windows.Vector\"></xref>.\n  overload: System.Windows.Vector.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)\n  id: Add(System.Windows.Vector,System.Windows.Point)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Add(Vector,Point)\n  nameWithType: Vector.Add(Vector,Point)\n  fullName: System.Windows.Vector.Add(Vector,Point)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Translates the specified point by the specified vector and returns the resulting point.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to add a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-cs[VectorExamples_snip#AddPointAndVectorExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#addpointandvectorexample_csharp)]\"\n  syntax:\n    content: public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The amount to translate the specified point.\n    - id: point\n      type: System.Windows.Point\n      description: The point to translate.\n    return:\n      type: System.Windows.Point\n      description: The result of translating <code>point</code> by <code>vector</code>.\n  overload: System.Windows.Vector.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)\n  id: Add(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Add(Vector,Vector)\n  nameWithType: Vector.Add(Vector,Vector)\n  fullName: System.Windows.Vector.Add(Vector,Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Adds two vectors and returns the result as a <xref href=\"System.Windows.Vector\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to add two <xref:System.Windows.Vector> structures.  \\n  \\n [!code-cs[VectorExamples_snip#AddTwoVectorsExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#addtwovectorsexample_csharp)]\"\n  syntax:\n    content: public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to add.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to add.\n    return:\n      type: System.Windows.Vector\n      description: The sum of <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)\n  id: AngleBetween(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: AngleBetween(Vector,Vector)\n  nameWithType: Vector.AngleBetween(Vector,Vector)\n  fullName: System.Windows.Vector.AngleBetween(Vector,Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Retrieves the angle, expressed in degrees, between the two specified vectors.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to get the angle between two <xref:System.Windows.Vector> structures.  \\n  \\n [!code-cs[VectorExamples_snip#AngleBetweenExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#anglebetweenexample_csharp)]\"\n  syntax:\n    content: public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to evaluate.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to evaluate.\n    return:\n      type: System.Double\n      description: The angle, in degrees, between <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.AngleBetween*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)\n  id: CrossProduct(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: CrossProduct(Vector,Vector)\n  nameWithType: Vector.CrossProduct(Vector,Vector)\n  fullName: System.Windows.Vector.CrossProduct(Vector,Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Calculates the cross product of two vectors.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to calculate the cross product of two <xref:System.Windows.Vector> structures.  \\n  \\n [!code-cs[VectorExamples_snip#CrossProductExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#crossproductexample_csharp)]\"\n  syntax:\n    content: public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to evaluate.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to evaluate.\n    return:\n      type: System.Double\n      description: \"The cross product of <code>vector1</code> and <code>vector2</code>. The following formula is used to calculate the cross product:  \\n  \\n `(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)`\"\n  overload: System.Windows.Vector.CrossProduct*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)\n  id: Determinant(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Determinant(Vector,Vector)\n  nameWithType: Vector.Determinant(Vector,Vector)\n  fullName: System.Windows.Vector.Determinant(Vector,Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Calculates the determinant of two vectors.\n  remarks: ''\n  example:\n  - \"The following example shows how to calculate the determinant of two <xref:System.Windows.Vector> structures.  \\n  \\n [!code-cs[VectorExamples_snip#DeterminantExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#determinantexample_csharp)]\"\n  syntax:\n    content: public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to evaluate.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to evaluate.\n    return:\n      type: System.Double\n      description: The determinant of <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.Determinant*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Divide(System.Windows.Vector,System.Double)\n  id: Divide(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Divide(Vector,Double)\n  nameWithType: Vector.Divide(Vector,Double)\n  fullName: System.Windows.Vector.Divide(Vector,Double)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Divides the specified vector by the specified scalar and returns the result as a <xref href=\"System.Windows.Vector\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to divide a <xref:System.Windows.Vector> by a scalar.  \\n  \\n [!code-cs[VectorExamples_snip#DivideExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#divideexample_csharp)]\"\n  syntax:\n    content: public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector structure to divide.\n    - id: scalar\n      type: System.Double\n      description: The amount by which `vector` is divided.\n    return:\n      type: System.Windows.Vector\n      description: The result of dividing <code>vector</code> by <code>scalar</code>.\n  overload: System.Windows.Vector.Divide*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Vector.Equals(Object)\n  fullName: System.Windows.Vector.Equals(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Determines whether the specified <xref:System.Object> is a <xref href=\"System.Windows.Vector\"></xref> structure and, if it is, whether it has the same <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values as this vector.\n  remarks: A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.\n  example:\n  - \"The following example shows how to use this method to check whether a <xref:System.Windows.Vector> and an <xref:System.Object> are equal.  \\n  \\n [!code-cs[VectorExamples_snip#EqualsExample2_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#equalsexample2_csharp)]\"\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The vector to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>o</code> is a <xref href=\"System.Windows.Vector\"></xref> and has the same <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values as this vector; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Vector.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Equals(System.Windows.Vector)\n  id: Equals(System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Equals(Vector)\n  nameWithType: Vector.Equals(Vector)\n  fullName: System.Windows.Vector.Equals(Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares two vectors for equality.\n  remarks: A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.\n  example:\n  - \"The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.  \\n  \\n [!code-cs[VectorExamples_snip#EqualsExample2_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#equalsexample2_csharp)]\"\n  syntax:\n    content: public bool Equals (System.Windows.Vector value);\n    parameters:\n    - id: value\n      type: System.Windows.Vector\n      description: The vector to compare with this vector.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> has the same <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values as this vector; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Vector.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)\n  id: Equals(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Equals(Vector,Vector)\n  nameWithType: Vector.Equals(Vector,Vector)\n  fullName: System.Windows.Vector.Equals(Vector,Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares the two specified vectors for equality.\n  remarks: A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.\n  example:\n  - \"The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.  \\n  \\n [!code-cs[VectorExamples_snip#EqualsExample1_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#equalsexample1_csharp)]\"\n  syntax:\n    content: public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to compare.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if t he <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Vector.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.GetHashCode\n  id: GetHashCode\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Vector.GetHashCode()\n  fullName: System.Windows.Vector.GetHashCode()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns the hash code for this vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to get the hash code of a <xref:System.Windows.Vector>.  \\n  \\n [!code-cs[VectorExamples_snip#GetHashCodeExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#gethashcodeexample_csharp)]\"\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code for this instance.\n  overload: System.Windows.Vector.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Length\n  id: Length\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Length\n  nameWithType: Vector.Length\n  fullName: System.Windows.Vector.Length\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the length of this vector.\n  remarks: The length of a vector is sometimes referred to as the magnitude.\n  example:\n  - \"The following example shows how use this property to get the length of a vector.  \\n  \\n [!code-vb[VectorExamples_snip#LengthExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#lengthexample)]\\n [!code-cs[VectorExamples_snip#LengthExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#lengthexample)]\"\n  syntax:\n    content: public double Length { get; }\n    return:\n      type: System.Double\n      description: The length of this vector.\n  overload: System.Windows.Vector.Length*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.LengthSquared\n  id: LengthSquared\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: LengthSquared\n  nameWithType: Vector.LengthSquared\n  fullName: System.Windows.Vector.LengthSquared\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the square of the length of this vector.\n  remarks: The length of a vector is sometimes referred to as its magnitude.\n  example:\n  - \"The following example shows how to use this property to get the square of the length of a vector.  \\n  \\n [!code-vb[VectorExamples_snip#LengthSquaredExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#lengthsquaredexample)]\\n [!code-cs[VectorExamples_snip#LengthSquaredExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#lengthsquaredexample)]\"\n  syntax:\n    content: public double LengthSquared { get; }\n    return:\n      type: System.Double\n      description: The square of the <xref:System.Windows.Vector.Length*> of this vector.\n  overload: System.Windows.Vector.LengthSquared*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)\n  id: Multiply(System.Double,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Multiply(Double,Vector)\n  nameWithType: Vector.Multiply(Double,Vector)\n  fullName: System.Windows.Vector.Multiply(Double,Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Multiplies the specified scalar by the specified vector and returns the resulting <xref href=\"System.Windows.Vector\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to multiply a scalar by a <xref:System.Windows.Vector>.  \\n  \\n [!code-cs[VectorExamples_snip#MultiplyVectorByScalarExample2_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#multiplyvectorbyscalarexample2_csharp)]\"\n  syntax:\n    content: public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);\n    parameters:\n    - id: scalar\n      type: System.Double\n      description: The scalar to multiply.\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to multiply.\n    return:\n      type: System.Windows.Vector\n      description: The result of multiplying <code>scalar</code> and <code>vector</code>.\n  overload: System.Windows.Vector.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)\n  id: Multiply(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Multiply(Vector,Double)\n  nameWithType: Vector.Multiply(Vector,Double)\n  fullName: System.Windows.Vector.Multiply(Vector,Double)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Multiplies the specified vector by the specified scalar and returns the resulting <xref href=\"System.Windows.Vector\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a scalar.  \\n  \\n [!code-cs[VectorExamples_snip#MultiplyVectorByScalarExample1_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#multiplyvectorbyscalarexample1_csharp)]\"\n  syntax:\n    content: public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to multiply.\n    - id: scalar\n      type: System.Double\n      description: The scalar to multiply.\n    return:\n      type: System.Windows.Vector\n      description: The result of multiplying <code>vector</code> and <code>scalar</code>.\n  overload: System.Windows.Vector.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  id: Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Multiply(Vector,Matrix)\n  nameWithType: Vector.Multiply(Vector,Matrix)\n  fullName: System.Windows.Vector.Multiply(Vector,Matrix)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Transforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Media.Matrix>.  \\n  \\n [!code-cs[VectorExamples_snip#MultiplyVectorByMatrixExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#multiplyvectorbymatrixexample_csharp)]\"\n  syntax:\n    content: public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector structure to transform.\n    - id: matrix\n      type: System.Windows.Media.Matrix\n      description: The transformation to apply to `vector`.\n    return:\n      type: System.Windows.Vector\n      description: The result of transforming <code>vector</code> by <code>matrix</code>.\n  overload: System.Windows.Vector.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)\n  id: Multiply(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Multiply(Vector,Vector)\n  nameWithType: Vector.Multiply(Vector,Vector)\n  fullName: System.Windows.Vector.Multiply(Vector,Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Calculates the dot product of the two specified vectors and returns the result as a <xref:System.Double>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Vector>.  \\n  \\n [!code-cs[VectorExamples_snip#GetDotProductExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#getdotproductexample_csharp)]\"\n  syntax:\n    content: public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to multiply.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector structure to multiply.\n    return:\n      type: System.Double\n      description: \"A <xref:System.Double> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:  \\n  \\n `(vector1.X * vector2.X) + (vector1.Y * vector2.Y)`\"\n  overload: System.Windows.Vector.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Negate\n  id: Negate\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Negate()\n  nameWithType: Vector.Negate()\n  fullName: System.Windows.Vector.Negate()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to negate a vector.  \\n  \\n [!code-cs[VectorExamples_snip#NegateExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#negateexample_csharp)]\"\n  syntax:\n    content: public void Negate ();\n    parameters: []\n  overload: System.Windows.Vector.Negate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Normalize\n  id: Normalize\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Normalize()\n  nameWithType: Vector.Normalize()\n  fullName: System.Windows.Vector.Normalize()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Normalizes this vector.\n  remarks: A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1. The resulting vector is often called a unit vector. A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.\n  example:\n  - \"The following example shows how to use this method to normalize a vector.  \\n  \\n [!code-cs[VectorExamples_snip#NormalizeExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#normalizeexample_csharp)]\"\n  syntax:\n    content: public void Normalize ();\n    parameters: []\n  overload: System.Windows.Vector.Normalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)\n  id: op_Addition(System.Windows.Vector,System.Windows.Point)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Addition(Vector,Point)\n  nameWithType: Vector.op_Addition(Vector,Point)\n  fullName: System.Windows.Vector.op_Addition(Vector,Point)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Translates a point by the specified vector and returns the resulting point.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (+) to translate a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedadditionoperatorexample2)]\\n [!code-cs[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedadditionoperatorexample2)]\"\n  syntax:\n    content: public static System.Windows.Point op_Addition (System.Windows.Vector vector, System.Windows.Point point);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector used to translate `point`.\n    - id: point\n      type: System.Windows.Point\n      description: The point to translate.\n    return:\n      type: System.Windows.Point\n      description: The result of translating <code>point</code> by <code>vector</code>.\n  overload: System.Windows.Vector.op_Addition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)\n  id: op_Addition(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Addition(Vector,Vector)\n  nameWithType: Vector.op_Addition(Vector,Vector)\n  fullName: System.Windows.Vector.op_Addition(Vector,Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Adds two vectors and returns the result as a vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (+) to add two <xref:System.Windows.Vector> structures and return a <xref:System.Windows.Vector>.  \\n  \\n [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedadditionoperatorexample1)]\\n [!code-cs[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedadditionoperatorexample1)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Addition (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to add.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to add.\n    return:\n      type: System.Windows.Vector\n      description: The sum of <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.op_Addition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)\n  id: op_Division(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Division(Vector,Double)\n  nameWithType: Vector.op_Division(Vector,Double)\n  fullName: System.Windows.Vector.op_Division(Vector,Double)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Divides the specified vector by the specified scalar and returns the resulting vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (/) to divide a <xref:System.Windows.Vector> structure by a scalar.  \\n  \\n [!code-vb[VectorExamples_snip#OverloadedDivisionOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadeddivisionoperatorexample)]\\n [!code-cs[VectorExamples_snip#OverloadedDivisionOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadeddivisionoperatorexample)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Division (System.Windows.Vector vector, double scalar);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to divide.\n    - id: scalar\n      type: System.Double\n      description: The scalar by which `vector` will be divided.\n    return:\n      type: System.Windows.Vector\n      description: The result of dividing <code>vector</code> by <code>scalar</code>.\n  overload: System.Windows.Vector.op_Division*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)\n  id: op_Equality(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Equality(Vector,Vector)\n  nameWithType: Vector.op_Equality(Vector,Vector)\n  fullName: System.Windows.Vector.op_Equality(Vector,Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares two vectors for equality.\n  remarks: A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.\n  example:\n  - \"The following example shows how to use this operator (==) to check whether two <xref:System.Windows.Vector> structures are equal.  \\n  \\n [!code-vb[VectorExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedequalityoperatorexample)]\\n [!code-cs[VectorExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedequalityoperatorexample)]\"\n  syntax:\n    content: public static bool op_Equality (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to compare.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Vector.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Point)\n  id: op_Explicit(System.Windows.Vector to System.Windows.Point)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Explicit(Vector)\n  nameWithType: Vector.op_Explicit(Vector)\n  fullName: System.Windows.Vector.op_Explicit(Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public static System.Windows.Point op_Explicit (System.Windows.Vector vector);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: To be added.\n    return:\n      type: System.Windows.Point\n      description: To be added.\n  overload: System.Windows.Vector.op_Explicit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Size)\n  id: op_Explicit(System.Windows.Vector to System.Windows.Size)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Explicit(Vector)\n  nameWithType: Vector.op_Explicit(Vector)\n  fullName: System.Windows.Vector.op_Explicit(Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public static System.Windows.Size op_Explicit (System.Windows.Vector vector);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: To be added.\n    return:\n      type: System.Windows.Size\n      description: To be added.\n  overload: System.Windows.Vector.op_Explicit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)\n  id: op_Inequality(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Inequality(Vector,Vector)\n  nameWithType: Vector.op_Inequality(Vector,Vector)\n  fullName: System.Windows.Vector.op_Inequality(Vector,Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares two vectors for inequality.\n  remarks: A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.\n  example:\n  - \"The following example shows how to use this operator (!=) to check whether two <xref:System.Windows.Vector> structures are not equal.  \\n  \\n [!code-vb[VectorExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedinequalityoperatorexample)]\\n [!code-cs[VectorExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedinequalityoperatorexample)]\"\n  syntax:\n    content: public static bool op_Inequality (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to compare.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> components of <code>vector1</code> and <code>vector2</code> are different; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Vector.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)\n  id: op_Multiply(System.Double,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Multiply(Double,Vector)\n  nameWithType: Vector.op_Multiply(Double,Vector)\n  fullName: System.Windows.Vector.op_Multiply(Double,Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Multiplies the specified scalar by the specified vector and returns the resulting vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (*) to multiply a scalar by a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedmultiplicationoperatorexample2)]\\n [!code-cs[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedmultiplicationoperatorexample2)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Multiply (double scalar, System.Windows.Vector vector);\n    parameters:\n    - id: scalar\n      type: System.Double\n      description: The scalar to multiply.\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to multiply.\n    return:\n      type: System.Windows.Vector\n      description: The result of multiplying <code>scalar</code> and <code>vector</code>.\n  overload: System.Windows.Vector.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)\n  id: op_Multiply(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Multiply(Vector,Double)\n  nameWithType: Vector.op_Multiply(Vector,Double)\n  fullName: System.Windows.Vector.op_Multiply(Vector,Double)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Multiplies the specified vector by the specified scalar and returns the resulting vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (*) to multiply a <xref:System.Windows.Vector> structure by a scalar.  \\n  \\n [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedmultiplicationoperatorexample1)]\\n [!code-cs[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedmultiplicationoperatorexample1)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Multiply (System.Windows.Vector vector, double scalar);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to multiply.\n    - id: scalar\n      type: System.Double\n      description: The scalar to multiply.\n    return:\n      type: System.Windows.Vector\n      description: The result of multiplying <code>vector</code> and <code>scalar</code>.\n  overload: System.Windows.Vector.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  id: op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Multiply(Vector,Matrix)\n  nameWithType: Vector.op_Multiply(Vector,Matrix)\n  fullName: System.Windows.Vector.op_Multiply(Vector,Matrix)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Transforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Media.Matrix> structure.  \\n  \\n [!code-vb[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedmultiplyvectorbymatrixoperatorexample)]\\n [!code-cs[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedmultiplyvectorbymatrixoperatorexample)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to transform.\n    - id: matrix\n      type: System.Windows.Media.Matrix\n      description: The transformation to apply to `vector`.\n    return:\n      type: System.Windows.Vector\n      description: The result of transforming <code>vector</code> by <code>matrix</code>.\n  overload: System.Windows.Vector.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)\n  id: op_Multiply(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Multiply(Vector,Vector)\n  nameWithType: Vector.op_Multiply(Vector,Vector)\n  fullName: System.Windows.Vector.op_Multiply(Vector,Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Calculates the dot product of the two specified vector structures and returns the result as a <xref:System.Double>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Vector>.  \\n  \\n [!code-vb[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedoperatorgetdotproductexample)]\\n [!code-cs[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedoperatorgetdotproductexample)]\"\n  syntax:\n    content: public static double op_Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to multiply.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to multiply.\n    return:\n      type: System.Double\n      description: \"Returns a <xref:System.Double> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:  \\n  \\n `vector1.X * vector2.X + vector1.Y * vector2.Y`\"\n  overload: System.Windows.Vector.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)\n  id: op_Subtraction(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Subtraction(Vector,Vector)\n  nameWithType: Vector.op_Subtraction(Vector,Vector)\n  fullName: System.Windows.Vector.op_Subtraction(Vector,Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Subtracts one specified vector from another.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (-) to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-vb[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedsubtractionoperatorexample)]\\n [!code-cs[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedsubtractionoperatorexample)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Subtraction (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The vector from which `vector2` is subtracted.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The vector to subtract from `vector1`.\n    return:\n      type: System.Windows.Vector\n      description: The difference between <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.op_Subtraction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)\n  id: op_UnaryNegation(System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_UnaryNegation(Vector)\n  nameWithType: Vector.op_UnaryNegation(Vector)\n  fullName: System.Windows.Vector.op_UnaryNegation(Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Negates the specified vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this negation operator to negate a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-vb[VectorExamples_snip#OverloadedNegationOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadednegationoperatorexample)]\\n [!code-cs[VectorExamples_snip#OverloadedNegationOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadednegationoperatorexample)]\"\n  syntax:\n    content: public static System.Windows.Vector op_UnaryNegation (System.Windows.Vector vector);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to negate.\n    return:\n      type: System.Windows.Vector\n      description: A vector with <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values opposite of the <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values of <code>vector</code>.\n  overload: System.Windows.Vector.op_UnaryNegation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Parse(String)\n  nameWithType: Vector.Parse(String)\n  fullName: System.Windows.Vector.Parse(String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Converts a string representation of a vector into the equivalent <xref href=\"System.Windows.Vector\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to convert a string representation of a vector into a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-vb[VectorExamples_snip#ParseExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#parseexample)]\\n [!code-cs[VectorExamples_snip#ParseExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#parseexample)]\"\n  syntax:\n    content: public static System.Windows.Vector Parse (string source);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string representation of the vector.\n    return:\n      type: System.Windows.Vector\n      description: The equivalent <xref href=\"System.Windows.Vector\"></xref> structure.\n  overload: System.Windows.Vector.Parse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)\n  id: Subtract(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Subtract(Vector,Vector)\n  nameWithType: Vector.Subtract(Vector,Vector)\n  fullName: System.Windows.Vector.Subtract(Vector,Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Subtracts the specified vector from another specified vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-vb[VectorExamples_snip#SubtractExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#subtractexample)]\\n [!code-cs[VectorExamples_snip#SubtractExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#subtractexample)]\"\n  syntax:\n    content: public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The vector from which `vector2` is subtracted.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The vector to subtract from `vector1`.\n    return:\n      type: System.Windows.Vector\n      description: The difference between <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.Subtract*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  id: System#IFormattable#ToString(System.String,System.IFormatProvider)\n  isEii: true\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: System.IFormattable.ToString(String,IFormatProvider)\n  nameWithType: Vector.System.IFormattable.ToString(String,IFormatProvider)\n  fullName: System.Windows.Vector.System.IFormattable.ToString(String,IFormatProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: This member supports the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastructure and is not intended to be used directly from your code. For a description of this member, see <xref:System.IFormattable.ToString*>.\n  syntax:\n    content: string IFormattable.ToString (string format, IFormatProvider provider);\n    parameters:\n    - id: format\n      type: System.String\n      description: \"The string specifying the format to use.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default format defined for the type of the <xref:System.IFormattable> implementation.\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"The <xref uid=\\\"langword_csharp_IFormatProvider\\\" name=\\\"IFormatProvider\\\" href=\\\"\\\"></xref> to use to format the value.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to obtain the numeric format information from the current locale setting of the operating system.\"\n    return:\n      type: System.String\n      description: A string containing the value of the current instance in the specified format.\n  overload: System.Windows.Vector.System#IFormattable#ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.ToString\n  id: ToString\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Vector.ToString()\n  fullName: System.Windows.Vector.ToString()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns the string representation of this <xref href=\"System.Windows.Vector\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to get a string representation of a <xref:System.Windows.Vector>.  \\n  \\n [!code-vb[VectorExamples_snip#ToStringExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#tostringexample)]\\n [!code-cs[VectorExamples_snip#ToStringExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#tostringexample)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents the <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values of this <xref href=\"System.Windows.Vector\"></xref>.\n  overload: System.Windows.Vector.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: ToString(IFormatProvider)\n  nameWithType: Vector.ToString(IFormatProvider)\n  fullName: System.Windows.Vector.ToString(IFormatProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns the string representation of this <xref href=\"System.Windows.Vector\"></xref> structure with the specified formatting information.\n  syntax:\n    content: public string ToString (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: The culture-specific formatting information.\n    return:\n      type: System.String\n      description: A string that represents the <xref:System.Windows.Vector.X*> and <xref:System.Windows.Vector.Y*> values of this <xref href=\"System.Windows.Vector\"></xref>.\n  overload: System.Windows.Vector.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.X\n  id: X\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: X\n  nameWithType: Vector.X\n  fullName: System.Windows.Vector.X\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the X component of this vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to check two <xref:System.Windows.Vector> structures for equality.  \\n  \\n [!code-vb[VectorExamples_snip#VectorEqualityExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#vectorequalityexample)]\\n [!code-cs[VectorExamples_snip#VectorEqualityExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#vectorequalityexample)]\"\n  syntax:\n    content: public double X { get; set; }\n    return:\n      type: System.Double\n      description: The X component of this vector. The default value is 0.\n  overload: System.Windows.Vector.X*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Vector.Y\n  id: Y\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Y\n  nameWithType: Vector.Y\n  fullName: System.Windows.Vector.Y\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the Y component of this vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to check two <xref:System.Windows.Vector> structures for equality.  \\n  \\n [!code-vb[VectorExamples_snip#VectorEqualityExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#vectorequalityexample)]\\n [!code-cs[VectorExamples_snip#VectorEqualityExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#vectorequalityexample)]\"\n  syntax:\n    content: public double Y { get; set; }\n    return:\n      type: System.Double\n      description: The Y component of this vector. The default value is 0.\n  overload: System.Windows.Vector.Y*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Windows.Vector.#ctor(System.Double,System.Double)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Vector(Double,Double)\n  nameWithType: Vector.Vector(Double,Double)\n  fullName: System.Windows.Vector.Vector(Double,Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Add(Vector,Point)\n  nameWithType: Vector.Add(Vector,Point)\n  fullName: System.Windows.Vector.Add(Vector,Point)\n- uid: System.Windows.Point\n  parent: System.Windows\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Windows.Point\n- uid: System.Windows.Vector\n  parent: System.Windows\n  isExternal: false\n  name: Vector\n  nameWithType: Vector\n  fullName: System.Windows.Vector\n- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Add(Vector,Vector)\n  nameWithType: Vector.Add(Vector,Vector)\n  fullName: System.Windows.Vector.Add(Vector,Vector)\n- uid: System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: AngleBetween(Vector,Vector)\n  nameWithType: Vector.AngleBetween(Vector,Vector)\n  fullName: System.Windows.Vector.AngleBetween(Vector,Vector)\n- uid: System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: CrossProduct(Vector,Vector)\n  nameWithType: Vector.CrossProduct(Vector,Vector)\n  fullName: System.Windows.Vector.CrossProduct(Vector,Vector)\n- uid: System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Determinant(Vector,Vector)\n  nameWithType: Vector.Determinant(Vector,Vector)\n  fullName: System.Windows.Vector.Determinant(Vector,Vector)\n- uid: System.Windows.Vector.Divide(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Divide(Vector,Double)\n  nameWithType: Vector.Divide(Vector,Double)\n  fullName: System.Windows.Vector.Divide(Vector,Double)\n- uid: System.Windows.Vector.Equals(System.Object)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Vector.Equals(Object)\n  fullName: System.Windows.Vector.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Vector.Equals(System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Equals(Vector)\n  nameWithType: Vector.Equals(Vector)\n  fullName: System.Windows.Vector.Equals(Vector)\n- uid: System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Equals(Vector,Vector)\n  nameWithType: Vector.Equals(Vector,Vector)\n  fullName: System.Windows.Vector.Equals(Vector,Vector)\n- uid: System.Windows.Vector.GetHashCode\n  parent: System.Windows.Vector\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Vector.GetHashCode()\n  fullName: System.Windows.Vector.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Vector.Length\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Length\n  nameWithType: Vector.Length\n  fullName: System.Windows.Vector.Length\n- uid: System.Windows.Vector.LengthSquared\n  parent: System.Windows.Vector\n  isExternal: false\n  name: LengthSquared\n  nameWithType: Vector.LengthSquared\n  fullName: System.Windows.Vector.LengthSquared\n- uid: System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Multiply(Double,Vector)\n  nameWithType: Vector.Multiply(Double,Vector)\n  fullName: System.Windows.Vector.Multiply(Double,Vector)\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Multiply(Vector,Double)\n  nameWithType: Vector.Multiply(Vector,Double)\n  fullName: System.Windows.Vector.Multiply(Vector,Double)\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Multiply(Vector,Matrix)\n  nameWithType: Vector.Multiply(Vector,Matrix)\n  fullName: System.Windows.Vector.Multiply(Vector,Matrix)\n- uid: System.Windows.Media.Matrix\n  parent: System.Windows.Media\n  isExternal: false\n  name: Matrix\n  nameWithType: Matrix\n  fullName: System.Windows.Media.Matrix\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Multiply(Vector,Vector)\n  nameWithType: Vector.Multiply(Vector,Vector)\n  fullName: System.Windows.Vector.Multiply(Vector,Vector)\n- uid: System.Windows.Vector.Negate\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Negate()\n  nameWithType: Vector.Negate()\n  fullName: System.Windows.Vector.Negate()\n- uid: System.Windows.Vector.Normalize\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Normalize()\n  nameWithType: Vector.Normalize()\n  fullName: System.Windows.Vector.Normalize()\n- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Addition(Vector,Point)\n  nameWithType: Vector.op_Addition(Vector,Point)\n  fullName: System.Windows.Vector.op_Addition(Vector,Point)\n- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Addition(Vector,Vector)\n  nameWithType: Vector.op_Addition(Vector,Vector)\n  fullName: System.Windows.Vector.op_Addition(Vector,Vector)\n- uid: System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Division(Vector,Double)\n  nameWithType: Vector.op_Division(Vector,Double)\n  fullName: System.Windows.Vector.op_Division(Vector,Double)\n- uid: System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Equality(Vector,Vector)\n  nameWithType: Vector.op_Equality(Vector,Vector)\n  fullName: System.Windows.Vector.op_Equality(Vector,Vector)\n- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Point)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Explicit(Vector)\n  nameWithType: Vector.op_Explicit(Vector)\n  fullName: System.Windows.Vector.op_Explicit(Vector)\n- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Size)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Explicit(Vector)\n  nameWithType: Vector.op_Explicit(Vector)\n  fullName: System.Windows.Vector.op_Explicit(Vector)\n- uid: System.Windows.Size\n  parent: System.Windows\n  isExternal: false\n  name: Size\n  nameWithType: Size\n  fullName: System.Windows.Size\n- uid: System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Inequality(Vector,Vector)\n  nameWithType: Vector.op_Inequality(Vector,Vector)\n  fullName: System.Windows.Vector.op_Inequality(Vector,Vector)\n- uid: System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Multiply(Double,Vector)\n  nameWithType: Vector.op_Multiply(Double,Vector)\n  fullName: System.Windows.Vector.op_Multiply(Double,Vector)\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Multiply(Vector,Double)\n  nameWithType: Vector.op_Multiply(Vector,Double)\n  fullName: System.Windows.Vector.op_Multiply(Vector,Double)\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Multiply(Vector,Matrix)\n  nameWithType: Vector.op_Multiply(Vector,Matrix)\n  fullName: System.Windows.Vector.op_Multiply(Vector,Matrix)\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Multiply(Vector,Vector)\n  nameWithType: Vector.op_Multiply(Vector,Vector)\n  fullName: System.Windows.Vector.op_Multiply(Vector,Vector)\n- uid: System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Subtraction(Vector,Vector)\n  nameWithType: Vector.op_Subtraction(Vector,Vector)\n  fullName: System.Windows.Vector.op_Subtraction(Vector,Vector)\n- uid: System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_UnaryNegation(Vector)\n  nameWithType: Vector.op_UnaryNegation(Vector)\n  fullName: System.Windows.Vector.op_UnaryNegation(Vector)\n- uid: System.Windows.Vector.Parse(System.String)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Parse(String)\n  nameWithType: Vector.Parse(String)\n  fullName: System.Windows.Vector.Parse(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Subtract(Vector,Vector)\n  nameWithType: Vector.Subtract(Vector,Vector)\n  fullName: System.Windows.Vector.Subtract(Vector,Vector)\n- uid: System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: System.IFormattable.ToString(String,IFormatProvider)\n  nameWithType: Vector.System.IFormattable.ToString(String,IFormatProvider)\n  fullName: System.Windows.Vector.System.IFormattable.ToString(String,IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: true\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.Windows.Vector.ToString\n  parent: System.Windows.Vector\n  isExternal: false\n  name: ToString()\n  nameWithType: Vector.ToString()\n  fullName: System.Windows.Vector.ToString()\n- uid: System.Windows.Vector.ToString(System.IFormatProvider)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: ToString(IFormatProvider)\n  nameWithType: Vector.ToString(IFormatProvider)\n  fullName: System.Windows.Vector.ToString(IFormatProvider)\n- uid: System.Windows.Vector.X\n  parent: System.Windows.Vector\n  isExternal: false\n  name: X\n  nameWithType: Vector.X\n  fullName: System.Windows.Vector.X\n- uid: System.Windows.Vector.Y\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Y\n  nameWithType: Vector.Y\n  fullName: System.Windows.Vector.Y\n- uid: System.Windows.Vector.#ctor*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Vector\n  nameWithType: Vector.Vector\n- uid: System.Windows.Vector.Add*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Add\n  nameWithType: Vector.Add\n- uid: System.Windows.Vector.AngleBetween*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: AngleBetween\n  nameWithType: Vector.AngleBetween\n- uid: System.Windows.Vector.CrossProduct*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: CrossProduct\n  nameWithType: Vector.CrossProduct\n- uid: System.Windows.Vector.Determinant*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Determinant\n  nameWithType: Vector.Determinant\n- uid: System.Windows.Vector.Divide*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Divide\n  nameWithType: Vector.Divide\n- uid: System.Windows.Vector.Equals*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Equals\n  nameWithType: Vector.Equals\n- uid: System.Windows.Vector.GetHashCode*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Vector.GetHashCode\n- uid: System.Windows.Vector.Length*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Length\n  nameWithType: Vector.Length\n- uid: System.Windows.Vector.LengthSquared*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: LengthSquared\n  nameWithType: Vector.LengthSquared\n- uid: System.Windows.Vector.Multiply*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Multiply\n  nameWithType: Vector.Multiply\n- uid: System.Windows.Vector.Negate*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Negate\n  nameWithType: Vector.Negate\n- uid: System.Windows.Vector.Normalize*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Normalize\n  nameWithType: Vector.Normalize\n- uid: System.Windows.Vector.op_Addition*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Addition\n  nameWithType: Vector.op_Addition\n- uid: System.Windows.Vector.op_Division*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Division\n  nameWithType: Vector.op_Division\n- uid: System.Windows.Vector.op_Equality*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Equality\n  nameWithType: Vector.op_Equality\n- uid: System.Windows.Vector.op_Explicit*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Explicit\n  nameWithType: Vector.op_Explicit\n- uid: System.Windows.Vector.op_Inequality*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Vector.op_Inequality\n- uid: System.Windows.Vector.op_Multiply*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Multiply\n  nameWithType: Vector.op_Multiply\n- uid: System.Windows.Vector.op_Subtraction*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Subtraction\n  nameWithType: Vector.op_Subtraction\n- uid: System.Windows.Vector.op_UnaryNegation*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_UnaryNegation\n  nameWithType: Vector.op_UnaryNegation\n- uid: System.Windows.Vector.Parse*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Parse\n  nameWithType: Vector.Parse\n- uid: System.Windows.Vector.Subtract*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Subtract\n  nameWithType: Vector.Subtract\n- uid: System.Windows.Vector.System#IFormattable#ToString*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: System.IFormattable.ToString\n  nameWithType: Vector.System.IFormattable.ToString\n- uid: System.Windows.Vector.ToString*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: ToString\n  nameWithType: Vector.ToString\n- uid: System.Windows.Vector.X*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: X\n  nameWithType: Vector.X\n- uid: System.Windows.Vector.Y*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Y\n  nameWithType: Vector.Y\n"}