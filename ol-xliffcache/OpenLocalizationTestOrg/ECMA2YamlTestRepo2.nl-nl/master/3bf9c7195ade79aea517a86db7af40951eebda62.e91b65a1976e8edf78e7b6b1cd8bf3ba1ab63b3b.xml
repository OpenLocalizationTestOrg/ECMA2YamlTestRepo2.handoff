{"nodes":[{"pos":[660,808],"content":"Declares methods that provide a service object or recycle a service object for a <ph id=\"ph1\">[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]</ph> service.","needQuote":true,"needEscape":true,"source":"Declares methods that provide a service object or recycle a service object for a [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] service."},{"pos":[821,4219],"content":"Implement the IInstanceProvider interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:System.ServiceModel.InstanceContext> object.       Once the IInstanceProvider interface is implemented, you must assign your custom instance provider object to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:System.ServiceModel.Description.IEndpointBehavior> object) or a contract behavior (a <xref:System.ServiceModel.Description.IContractBehavior> object).       If the insertion mechanism is an endpoint behavior you can also implement a <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file. If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute. (For an example of the contract behavior approach, see the Example section.)       IInstanceProvider has two methods, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object. Service object pooling is one example of custom IInstanceProvider functionality.       Typically, the <xref:System.ServiceModel.InstanceContext> invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:System.ServiceModel.InstanceContext> is first created and invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:System.ServiceModel.InstanceContext> is closed.       There are two ways to cause an <xref:System.ServiceModel.InstanceContext> object to release a service object before the <xref:System.ServiceModel.InstanceContext> is closed. The first method is to set the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:System.ServiceModel.ReleaseInstanceMode> or <xref:System.ServiceModel.ReleaseInstanceMode>. The second method is to call the <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> method. If this is done, the <xref:System.ServiceModel.InstanceContext> calls the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher's instance provider. If a new message arrives after the instance has been released, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] creates a new instance using the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> method.      > [!NOTE] >  If the <xref:System.ServiceModel.InstanceContextMode> of the service is <xref:System.ServiceModel.InstanceContextMode>, the system does not call the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Implement the IInstanceProvider interface to control the creation and recycling of service objects when one is requested or disposed by an &lt;xref:System.ServiceModel.InstanceContext&gt; object.","pos":[0,189],"source":"Implement the IInstanceProvider interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:System.ServiceModel.InstanceContext> object."},{"content":"Once the IInstanceProvider interface is implemented, you must assign your custom instance provider object to the &lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt; property using either an endpoint behavior (a &lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt; object) or a contract behavior (a &lt;xref:System.ServiceModel.Description.IContractBehavior&gt; object).","pos":[196,585],"source":"       Once the IInstanceProvider interface is implemented, you must assign your custom instance provider object to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:System.ServiceModel.Description.IEndpointBehavior> object) or a contract behavior (a <xref:System.ServiceModel.Description.IContractBehavior> object)."},{"content":"If the insertion mechanism is an endpoint behavior you can also implement a &lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt; object that can insert your custom behavior using a configuration file.","pos":[592,805],"source":"       If the insertion mechanism is an endpoint behavior you can also implement a <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file."},{"content":"If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.","pos":[806,983]},{"content":"(For an example of the contract behavior approach, see the Example section.)       IInstanceProvider has two methods, &lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt; and &lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;.","pos":[984,1252],"source":" (For an example of the contract behavior approach, see the Example section.)       IInstanceProvider has two methods, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>."},{"content":"These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object.","pos":[1253,1431]},{"content":"Service object pooling is one example of custom IInstanceProvider functionality.","pos":[1432,1512]},{"content":"Typically, the &lt;xref:System.ServiceModel.InstanceContext&gt; invokes the &lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt; when the &lt;xref:System.ServiceModel.InstanceContext&gt; is first created and invokes the &lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt; method when the &lt;xref:System.ServiceModel.InstanceContext&gt; is closed.","pos":[1519,1889],"source":"       Typically, the <xref:System.ServiceModel.InstanceContext> invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:System.ServiceModel.InstanceContext> is first created and invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:System.ServiceModel.InstanceContext> is closed."},{"content":"There are two ways to cause an &lt;xref:System.ServiceModel.InstanceContext&gt; object to release a service object before the &lt;xref:System.ServiceModel.InstanceContext&gt; is closed.","pos":[1896,2069],"source":"       There are two ways to cause an <xref:System.ServiceModel.InstanceContext> object to release a service object before the <xref:System.ServiceModel.InstanceContext> is closed."},{"content":"The first method is to set the &lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A&gt; to &lt;xref:System.ServiceModel.ReleaseInstanceMode&gt; or &lt;xref:System.ServiceModel.ReleaseInstanceMode&gt;.","pos":[2070,2278],"source":" The first method is to set the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:System.ServiceModel.ReleaseInstanceMode> or <xref:System.ServiceModel.ReleaseInstanceMode>."},{"content":"The second method is to call the &lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt; method.","pos":[2279,2388],"source":" The second method is to call the <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> method."},{"content":"If this is done, the &lt;xref:System.ServiceModel.InstanceContext&gt; calls the &lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt; method on the dispatcher's instance provider.","pos":[2389,2583],"source":" If this is done, the <xref:System.ServiceModel.InstanceContext> calls the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher's instance provider."},{"content":"If a new message arrives after the instance has been released, <ph id=\"ph1\">[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]</ph> creates a new instance using the &lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt; method.","pos":[2584,2817],"source":" If a new message arrives after the instance has been released, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] creates a new instance using the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the &lt;xref:System.ServiceModel.InstanceContextMode&gt; of the service is &lt;xref:System.ServiceModel.InstanceContextMode&gt;, the system does not call the &lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt; or &lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt; methods even when the user did not provide a well-known service object unless the user directly calls &lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt; and then calls &lt;xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A&gt;.","pos":[2823,3385],"source":"      > [!NOTE] >  If the <xref:System.ServiceModel.InstanceContextMode> of the service is <xref:System.ServiceModel.InstanceContextMode>, the system does not call the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>."}]},{"pos":[5850,5945],"content":"Returns a service object given the specified <xref:System.ServiceModel.InstanceContext> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a service object given the specified &lt;xref:System.ServiceModel.InstanceContext&gt; object.","pos":[0,95],"source":"Returns a service object given the specified <xref:System.ServiceModel.InstanceContext> object."}]},{"pos":[5957,6140],"content":"Use the GetInstance method to control the exact service object that a <ph id=\"ph1\">[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]</ph> service receives when it attempts to create a new one.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Use the GetInstance method to control the exact service object that a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service receives when it attempts to create a new one."},{"pos":[7386,7448],"content":"The current <xref:System.ServiceModel.InstanceContext> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current &lt;xref:System.ServiceModel.InstanceContext&gt; object.","pos":[0,62],"source":"The current <xref:System.ServiceModel.InstanceContext> object."}]},{"pos":[7506,7536],"content":"A user-defined service object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined service object.","pos":[0,30]}]},{"pos":[8286,8381],"content":"Returns a service object given the specified <xref:System.ServiceModel.InstanceContext> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a service object given the specified &lt;xref:System.ServiceModel.InstanceContext&gt; object.","pos":[0,95],"source":"Returns a service object given the specified <xref:System.ServiceModel.InstanceContext> object."}]},{"pos":[8393,8576],"content":"Use the GetInstance method to control the exact service object that a <ph id=\"ph1\">[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]</ph> service receives when it attempts to create a new one.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Use the GetInstance method to control the exact service object that a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service receives when it attempts to create a new one."},{"pos":[9868,9930],"content":"The current <xref:System.ServiceModel.InstanceContext> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current &lt;xref:System.ServiceModel.InstanceContext&gt; object.","pos":[0,62],"source":"The current <xref:System.ServiceModel.InstanceContext> object."}]},{"pos":[10017,10077],"content":"The message that triggered the creation of a service object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message that triggered the creation of a service object.","pos":[0,60]}]},{"pos":[10135,10154],"content":"The service object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The service object.","pos":[0,19]}]},{"pos":[10875,10966],"content":"Called when an <xref:System.ServiceModel.InstanceContext> object recycles a service object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called when an &lt;xref:System.ServiceModel.InstanceContext&gt; object recycles a service object.","pos":[0,91],"source":"Called when an <xref:System.ServiceModel.InstanceContext> object recycles a service object."}]},{"pos":[10978,11124],"content":"Use the ReleaseInstance method to perform some custom resource disposal or other recycling customization when a service recycles a service object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the ReleaseInstance method to perform some custom resource disposal or other recycling customization when a service recycles a service object.","pos":[0,146]}]},{"pos":[11357,11388],"content":"The service's instance context.","needQuote":true,"needEscape":true,"nodes":[{"content":"The service's instance context.","pos":[0,31]}]},{"pos":[11453,11487],"content":"The service object to be recycled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The service object to be recycled.","pos":[0,34]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Dispatcher.IInstanceProvider\n  id: IInstanceProvider\n  children:\n  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)\n  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)\n  - System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)\n  langs:\n  - csharp\n  name: IInstanceProvider\n  nameWithType: IInstanceProvider\n  fullName: System.ServiceModel.Dispatcher.IInstanceProvider\n  type: Interface\n  summary: Declares methods that provide a service object or recycle a service object for a [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] service.\n  remarks: \"Implement the IInstanceProvider interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:System.ServiceModel.InstanceContext> object.  \\n  \\n Once the IInstanceProvider interface is implemented, you must assign your custom instance provider object to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:System.ServiceModel.Description.IEndpointBehavior> object) or a contract behavior (a <xref:System.ServiceModel.Description.IContractBehavior> object).  \\n  \\n If the insertion mechanism is an endpoint behavior you can also implement a <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file. If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute. (For an example of the contract behavior approach, see the Example section.)  \\n  \\n IInstanceProvider has two methods, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object. Service object pooling is one example of custom IInstanceProvider functionality.  \\n  \\n Typically, the <xref:System.ServiceModel.InstanceContext> invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:System.ServiceModel.InstanceContext> is first created and invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:System.ServiceModel.InstanceContext> is closed.  \\n  \\n There are two ways to cause an <xref:System.ServiceModel.InstanceContext> object to release a service object before the <xref:System.ServiceModel.InstanceContext> is closed. The first method is to set the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:System.ServiceModel.ReleaseInstanceMode> or <xref:System.ServiceModel.ReleaseInstanceMode>. The second method is to call the <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> method. If this is done, the <xref:System.ServiceModel.InstanceContext> calls the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher's instance provider. If a new message arrives after the instance has been released, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] creates a new instance using the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> method.  \\n  \\n> [!NOTE]\\n>  If the <xref:System.ServiceModel.InstanceContextMode> of the service is <xref:System.ServiceModel.InstanceContextMode>, the system does not call the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.\"\n  example:\n  - \"The following code example shows how to implement IInstanceProvider that provides \\\"singleton\\\" behavior; it always returns the same service instance and does not recycle it.  \\n  \\n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \\n  \\n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \\n  \\n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]\"\n  syntax:\n    content: public interface IInstanceProvider\n  implements: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)\n  id: GetInstance(System.ServiceModel.InstanceContext)\n  parent: System.ServiceModel.Dispatcher.IInstanceProvider\n  langs:\n  - csharp\n  name: GetInstance(InstanceContext)\n  nameWithType: IInstanceProvider.GetInstance(InstanceContext)\n  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Returns a service object given the specified <xref:System.ServiceModel.InstanceContext> object.\n  remarks: Use the GetInstance method to control the exact service object that a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service receives when it attempts to create a new one.\n  example:\n  - \"The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \\\"singleton\\\" behavior; it always returns the same service instance and does not recycle it.  \\n  \\n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \\n  \\n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \\n  \\n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]\"\n  syntax:\n    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext);\n    parameters:\n    - id: instanceContext\n      type: System.ServiceModel.InstanceContext\n      description: The current <xref:System.ServiceModel.InstanceContext> object.\n    return:\n      type: System.Object\n      description: A user-defined service object.\n  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)\n  id: GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Dispatcher.IInstanceProvider\n  langs:\n  - csharp\n  name: GetInstance(InstanceContext,Message)\n  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)\n  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Returns a service object given the specified <xref:System.ServiceModel.InstanceContext> object.\n  remarks: Use the GetInstance method to control the exact service object that a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service receives when it attempts to create a new one.\n  example:\n  - \"The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \\\"singleton\\\" behavior; it always returns the same service instance and does not recycle it.  \\n  \\n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \\n  \\n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \\n  \\n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]\"\n  syntax:\n    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);\n    parameters:\n    - id: instanceContext\n      type: System.ServiceModel.InstanceContext\n      description: The current <xref:System.ServiceModel.InstanceContext> object.\n    - id: message\n      type: System.ServiceModel.Channels.Message\n      description: The message that triggered the creation of a service object.\n    return:\n      type: System.Object\n      description: The service object.\n  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)\n  id: ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)\n  parent: System.ServiceModel.Dispatcher.IInstanceProvider\n  langs:\n  - csharp\n  name: ReleaseInstance(InstanceContext,Object)\n  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)\n  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Called when an <xref:System.ServiceModel.InstanceContext> object recycles a service object.\n  remarks: Use the ReleaseInstance method to perform some custom resource disposal or other recycling customization when a service recycles a service object.\n  syntax:\n    content: public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);\n    parameters:\n    - id: instanceContext\n      type: System.ServiceModel.InstanceContext\n      description: The service's instance context.\n    - id: instance\n      type: System.Object\n      description: The service object to be recycled.\n  overload: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)\n  parent: System.ServiceModel.Dispatcher.IInstanceProvider\n  isExternal: false\n  name: GetInstance(InstanceContext)\n  nameWithType: IInstanceProvider.GetInstance(InstanceContext)\n  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ServiceModel.InstanceContext\n  parent: System.ServiceModel\n  isExternal: true\n  name: InstanceContext\n  nameWithType: InstanceContext\n  fullName: System.ServiceModel.InstanceContext\n- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Dispatcher.IInstanceProvider\n  isExternal: false\n  name: GetInstance(InstanceContext,Message)\n  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)\n  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)\n- uid: System.ServiceModel.Channels.Message\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: Message\n  nameWithType: Message\n  fullName: System.ServiceModel.Channels.Message\n- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)\n  parent: System.ServiceModel.Dispatcher.IInstanceProvider\n  isExternal: false\n  name: ReleaseInstance(InstanceContext,Object)\n  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)\n  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)\n- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*\n  parent: System.ServiceModel.Dispatcher.IInstanceProvider\n  isExternal: false\n  name: GetInstance\n  nameWithType: IInstanceProvider.GetInstance\n- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*\n  parent: System.ServiceModel.Dispatcher.IInstanceProvider\n  isExternal: false\n  name: ReleaseInstance\n  nameWithType: IInstanceProvider.ReleaseInstance\n"}