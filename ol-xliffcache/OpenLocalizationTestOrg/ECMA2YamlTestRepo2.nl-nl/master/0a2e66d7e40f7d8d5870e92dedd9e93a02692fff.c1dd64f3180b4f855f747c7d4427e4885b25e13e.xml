{"nodes":[{"pos":[556,621],"content":"Provides a base implementation for the extensible provider model.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a base implementation for the extensible provider model.","pos":[0,65]}]},{"pos":[634,2744],"content":"The provider model is intended to encapsulate all or part of the functionality of multiple ASP.NET features, such as membership, profiles, and protected configuration. It allows the developer to create supporting classes that provide multiple implementations of the encapsulated functionality. In addition, developers can write new features using the provider model. This can be an effective way to support multiple implementations of a feature's functionality without duplicating the feature code or recoding the application layer if the implementation method needs to be changed.       The ProviderBase class is simple, containing only a few basic methods and properties that are common to all providers. Feature-specific providers (such as <xref:System.Web.Security.MembershipProvider>) inherit from ProviderBase and establish the necessary methods and properties that the implementation-specific providers for that feature must support. Implementation-specific providers (such as <xref:System.Web.Security.SqlMembershipProvider>) inherit in turn from a feature-specific provider (in this case, <xref:System.Web.Security.MembershipProvider>).       The most important aspect of the provider model is that the implementation (for example, whether data is persisted as a text file or in a database) is abstracted from the application code. The type of the implementation-specific provider for the given feature is designated in a configuration file. The feature-level provider then reads in the type from the configuration file and acts as a factory to the feature code. The application developer can then use the feature classes in the application code. The implementation type can be swapped out in the configuration file, eliminating the need to rewrite the code to accommodate the different implementation methodology.       The providers included with ASP.NET are mostly abstractions of data persistence implementations for features like profiles or membership. However, this model can be applied to any other kind of feature functionality that could be abstracted and implemented in multiple ways.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The provider model is intended to encapsulate all or part of the functionality of multiple ASP.NET features, such as membership, profiles, and protected configuration. It allows the developer to create supporting classes that provide multiple implementations of the encapsulated functionality. In addition, developers can write new features using the provider model. This can be an effective way to support multiple implementations of a feature's functionality without duplicating the feature code or recoding the application layer if the implementation method needs to be changed.       The ProviderBase class is simple, containing only a few basic methods and properties that are common to all providers. Feature-specific providers (such as <xref:System.Web.Security.MembershipProvider>) inherit from ProviderBase and establish the necessary methods and properties that the implementation-specific providers for that feature must support. Implementation-specific providers (such as <xref:System.Web.Security.SqlMembershipProvider>) inherit in turn from a feature-specific provider (in this case, <xref:System.Web.Security.MembershipProvider>).       The most important aspect of the provider model is that the implementation (for example, whether data is persisted as a text file or in a database) is abstracted from the application code. The type of the implementation-specific provider for the given feature is designated in a configuration file. The feature-level provider then reads in the type from the configuration file and acts as a factory to the feature code. The application developer can then use the feature classes in the application code. The implementation type can be swapped out in the configuration file, eliminating the need to rewrite the code to accommodate the different implementation methodology.       The providers included with ASP.NET are mostly abstractions of data persistence implementations for features like profiles or membership. However, this model can be applied to any other kind of feature functionality that could be abstracted and implemented in multiple ways.","pos":[0,2104],"nodes":[{"content":"The provider model is intended to encapsulate all or part of the functionality of multiple ASP.NET features, such as membership, profiles, and protected configuration.","pos":[0,167]},{"content":"It allows the developer to create supporting classes that provide multiple implementations of the encapsulated functionality.","pos":[168,293]},{"content":"In addition, developers can write new features using the provider model.","pos":[294,366]},{"content":"This can be an effective way to support multiple implementations of a feature's functionality without duplicating the feature code or recoding the application layer if the implementation method needs to be changed.","pos":[367,581]},{"content":"The ProviderBase class is simple, containing only a few basic methods and properties that are common to all providers.","pos":[588,706]},{"content":"Feature-specific providers (such as &lt;xref:System.Web.Security.MembershipProvider&gt;) inherit from ProviderBase and establish the necessary methods and properties that the implementation-specific providers for that feature must support.","pos":[707,940],"source":" Feature-specific providers (such as <xref:System.Web.Security.MembershipProvider>) inherit from ProviderBase and establish the necessary methods and properties that the implementation-specific providers for that feature must support."},{"content":"Implementation-specific providers (such as &lt;xref:System.Web.Security.SqlMembershipProvider&gt;) inherit in turn from a feature-specific provider (in this case, &lt;xref:System.Web.Security.MembershipProvider&gt;).","pos":[941,1145],"source":" Implementation-specific providers (such as <xref:System.Web.Security.SqlMembershipProvider>) inherit in turn from a feature-specific provider (in this case, <xref:System.Web.Security.MembershipProvider>)."},{"content":"The most important aspect of the provider model is that the implementation (for example, whether data is persisted as a text file or in a database) is abstracted from the application code.","pos":[1152,1340]},{"content":"The type of the implementation-specific provider for the given feature is designated in a configuration file.","pos":[1341,1450]},{"content":"The feature-level provider then reads in the type from the configuration file and acts as a factory to the feature code.","pos":[1451,1571]},{"content":"The application developer can then use the feature classes in the application code.","pos":[1572,1655]},{"content":"The implementation type can be swapped out in the configuration file, eliminating the need to rewrite the code to accommodate the different implementation methodology.","pos":[1656,1823]},{"content":"The providers included with ASP.NET are mostly abstractions of data persistence implementations for features like profiles or membership.","pos":[1830,1967]},{"content":"However, this model can be applied to any other kind of feature functionality that could be abstracted and implemented in multiple ways.","pos":[1968,2104]}]}]},{"pos":[3447,3551],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Provider.ProviderBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Configuration.Provider.ProviderBase\"></xref> class."},{"pos":[4114,4225],"content":"Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).","pos":[0,111]}]},{"pos":[4237,4402],"content":"If a configured provider does not supply a description, the value of the <xref:System.Configuration.Provider.ProviderBase.Name%2A> property is returned as a default.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If a configured provider does not supply a description, the value of the &lt;xref:System.Configuration.Provider.ProviderBase.Name%2A&gt; property is returned as a default.","pos":[0,165],"source":"If a configured provider does not supply a description, the value of the <xref:System.Configuration.Provider.ProviderBase.Name%2A> property is returned as a default."}]},{"pos":[4526,4614],"content":"A brief, friendly description suitable for display in administrative tools or other UIs.","needQuote":true,"needEscape":true,"nodes":[{"content":"A brief, friendly description suitable for display in administrative tools or other UIs.","pos":[0,88]}]},{"pos":[5323,5348],"content":"Initializes the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes the provider.","pos":[0,25]}]},{"pos":[5361,5797],"content":"The base class implementation internally tracks the number of times the provider's `Initialize` method has been called. If a provider is initialized more than once, an `InvalidOperationException` is thrown stating that the provider is already initialized.       Because most feature providers call Initialize prior to performing provider-specific initialization, this method is a central location for preventing double initialization.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The base class implementation internally tracks the number of times the provider's <ph id=\"ph1\">`Initialize`</ph> method has been called.","pos":[0,119],"source":"The base class implementation internally tracks the number of times the provider's `Initialize` method has been called."},{"content":"If a provider is initialized more than once, an <ph id=\"ph1\">`InvalidOperationException`</ph> is thrown stating that the provider is already initialized.","pos":[120,255],"source":" If a provider is initialized more than once, an `InvalidOperationException` is thrown stating that the provider is already initialized."},{"content":"Because most feature providers call Initialize prior to performing provider-specific initialization, this method is a central location for preventing double initialization.","pos":[262,434]}]},{"pos":[6145,6179],"content":"The friendly name of the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"The friendly name of the provider.","pos":[0,34]}]},{"pos":[6279,6411],"content":"A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.","pos":[0,132]}]},{"pos":[6595,6684],"content":"The name of the provider is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The name of the provider is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6779,6825],"content":"The name of the provider has a length of zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the provider has a length of zero.","pos":[0,46]}]},{"pos":[6936,7036],"content":"An attempt is made to call Initialize on a provider after the provider has already been initialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt is made to call Initialize on a provider after the provider has already been initialized.","pos":[0,100]}]},{"pos":[7416,7490],"content":"Gets the friendly name used to refer to the provider during configuration.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the friendly name used to refer to the provider during configuration.","pos":[0,74]}]},{"pos":[7503,7796],"content":"The recommended pattern for this string is: [*Provider Creator*][*Implementation Type*][*Feature*]Provider. Although the <xref:System.Configuration.Provider.ProviderBase.Description%2A> property also provides a friendly description, the Name property is used as an identifier for the provider.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The recommended pattern for this string is: [<bpt id=\"p1\">*</bpt>Provider Creator<ept id=\"p1\">*</ept>][<bpt id=\"p2\">*</bpt>Implementation Type<ept id=\"p2\">*</ept>][<bpt id=\"p3\">*</bpt>Feature<ept id=\"p3\">*</ept>]Provider.","pos":[0,107],"source":"The recommended pattern for this string is: [*Provider Creator*][*Implementation Type*][*Feature*]Provider."},{"content":"Although the &lt;xref:System.Configuration.Provider.ProviderBase.Description%2A&gt; property also provides a friendly description, the Name property is used as an identifier for the provider.","pos":[108,293],"source":" Although the <xref:System.Configuration.Provider.ProviderBase.Description%2A> property also provides a friendly description, the Name property is used as an identifier for the provider."}]},{"pos":[7914,7983],"content":"The friendly name used to refer to the provider during configuration.","needQuote":true,"needEscape":true,"nodes":[{"content":"The friendly name used to refer to the provider during configuration.","pos":[0,69]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.Provider.ProviderBase\n  id: ProviderBase\n  children:\n  - System.Configuration.Provider.ProviderBase.#ctor\n  - System.Configuration.Provider.ProviderBase.Description\n  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Configuration.Provider.ProviderBase.Name\n  langs:\n  - csharp\n  name: ProviderBase\n  nameWithType: ProviderBase\n  fullName: System.Configuration.Provider.ProviderBase\n  type: Class\n  summary: Provides a base implementation for the extensible provider model.\n  remarks: \"The provider model is intended to encapsulate all or part of the functionality of multiple ASP.NET features, such as membership, profiles, and protected configuration. It allows the developer to create supporting classes that provide multiple implementations of the encapsulated functionality. In addition, developers can write new features using the provider model. This can be an effective way to support multiple implementations of a feature's functionality without duplicating the feature code or recoding the application layer if the implementation method needs to be changed.  \\n  \\n The ProviderBase class is simple, containing only a few basic methods and properties that are common to all providers. Feature-specific providers (such as <xref:System.Web.Security.MembershipProvider>) inherit from ProviderBase and establish the necessary methods and properties that the implementation-specific providers for that feature must support. Implementation-specific providers (such as <xref:System.Web.Security.SqlMembershipProvider>) inherit in turn from a feature-specific provider (in this case, <xref:System.Web.Security.MembershipProvider>).  \\n  \\n The most important aspect of the provider model is that the implementation (for example, whether data is persisted as a text file or in a database) is abstracted from the application code. The type of the implementation-specific provider for the given feature is designated in a configuration file. The feature-level provider then reads in the type from the configuration file and acts as a factory to the feature code. The application developer can then use the feature classes in the application code. The implementation type can be swapped out in the configuration file, eliminating the need to rewrite the code to accommodate the different implementation methodology.  \\n  \\n The providers included with ASP.NET are mostly abstractions of data persistence implementations for features like profiles or membership. However, this model can be applied to any other kind of feature functionality that could be abstracted and implemented in multiple ways.\"\n  example:\n  - For an example of how to use the ProviderBase class, see [Profile Provider Implementation Example](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: public abstract class ProviderBase\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Configuration.Provider.ProviderBase.#ctor\n  id: '#ctor'\n  parent: System.Configuration.Provider.ProviderBase\n  langs:\n  - csharp\n  name: ProviderBase()\n  nameWithType: ProviderBase.ProviderBase()\n  fullName: System.Configuration.Provider.ProviderBase.ProviderBase()\n  type: Constructor\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration.Provider\n  summary: Initializes a new instance of the <xref href=\"System.Configuration.Provider.ProviderBase\"></xref> class.\n  syntax:\n    content: protected ProviderBase ();\n    parameters: []\n  overload: System.Configuration.Provider.ProviderBase.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.Provider.ProviderBase.Description\n  id: Description\n  parent: System.Configuration.Provider.ProviderBase\n  langs:\n  - csharp\n  name: Description\n  nameWithType: ProviderBase.Description\n  fullName: System.Configuration.Provider.ProviderBase.Description\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration.Provider\n  summary: Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).\n  remarks: If a configured provider does not supply a description, the value of the <xref:System.Configuration.Provider.ProviderBase.Name%2A> property is returned as a default.\n  syntax:\n    content: public virtual string Description { get; }\n    return:\n      type: System.String\n      description: A brief, friendly description suitable for display in administrative tools or other UIs.\n  overload: System.Configuration.Provider.ProviderBase.Description*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Configuration.Provider.ProviderBase\n  langs:\n  - csharp\n  name: Initialize(String,NameValueCollection)\n  nameWithType: ProviderBase.Initialize(String,NameValueCollection)\n  fullName: System.Configuration.Provider.ProviderBase.Initialize(String,NameValueCollection)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration.Provider\n  summary: Initializes the provider.\n  remarks: \"The base class implementation internally tracks the number of times the provider's `Initialize` method has been called. If a provider is initialized more than once, an `InvalidOperationException` is thrown stating that the provider is already initialized.  \\n  \\n Because most feature providers call Initialize prior to performing provider-specific initialization, this method is a central location for preventing double initialization.\"\n  example:\n  - For an example of how to use Initialize, see [Profile Provider Implementation Example](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: public virtual void Initialize (string name, System.Collections.Specialized.NameValueCollection config);\n    parameters:\n    - id: name\n      type: System.String\n      description: The friendly name of the provider.\n    - id: config\n      type: System.Collections.Specialized.NameValueCollection\n      description: A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.\n  overload: System.Configuration.Provider.ProviderBase.Initialize*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The name of the provider is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The name of the provider has a length of zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An attempt is made to call Initialize on a provider after the provider has already been initialized.\n  platform:\n  - net462\n- uid: System.Configuration.Provider.ProviderBase.Name\n  id: Name\n  parent: System.Configuration.Provider.ProviderBase\n  langs:\n  - csharp\n  name: Name\n  nameWithType: ProviderBase.Name\n  fullName: System.Configuration.Provider.ProviderBase.Name\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration.Provider\n  summary: Gets the friendly name used to refer to the provider during configuration.\n  remarks: 'The recommended pattern for this string is: [*Provider Creator*][*Implementation Type*][*Feature*]Provider. Although the <xref:System.Configuration.Provider.ProviderBase.Description%2A> property also provides a friendly description, the Name property is used as an identifier for the provider.'\n  syntax:\n    content: public virtual string Name { get; }\n    return:\n      type: System.String\n      description: The friendly name used to refer to the provider during configuration.\n  overload: System.Configuration.Provider.ProviderBase.Name*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Configuration.Provider.ProviderBase.#ctor\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: ProviderBase()\n  nameWithType: ProviderBase.ProviderBase()\n  fullName: System.Configuration.Provider.ProviderBase.ProviderBase()\n- uid: System.Configuration.Provider.ProviderBase.Description\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: Description\n  nameWithType: ProviderBase.Description\n  fullName: System.Configuration.Provider.ProviderBase.Description\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: Initialize(String,NameValueCollection)\n  nameWithType: ProviderBase.Initialize(String,NameValueCollection)\n  fullName: System.Configuration.Provider.ProviderBase.Initialize(String,NameValueCollection)\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Configuration.Provider.ProviderBase.Name\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: Name\n  nameWithType: ProviderBase.Name\n  fullName: System.Configuration.Provider.ProviderBase.Name\n- uid: System.Configuration.Provider.ProviderBase.#ctor*\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: ProviderBase\n  nameWithType: ProviderBase.ProviderBase\n- uid: System.Configuration.Provider.ProviderBase.Description*\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: Description\n  nameWithType: ProviderBase.Description\n- uid: System.Configuration.Provider.ProviderBase.Initialize*\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: Initialize\n  nameWithType: ProviderBase.Initialize\n- uid: System.Configuration.Provider.ProviderBase.Name*\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: Name\n  nameWithType: ProviderBase.Name\n"}