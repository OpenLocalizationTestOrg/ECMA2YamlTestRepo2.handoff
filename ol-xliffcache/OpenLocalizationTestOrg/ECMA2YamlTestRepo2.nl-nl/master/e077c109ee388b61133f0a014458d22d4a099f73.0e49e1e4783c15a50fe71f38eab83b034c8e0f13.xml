{"nodes":[{"pos":[1043,1159],"content":"Represents an extension that hooks up with compensation activities and persists compensation-related instance state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an extension that hooks up with compensation activities and persists compensation-related instance state.","pos":[0,116]}]},{"pos":[2202,2314],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.CompensationExtension\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Activities.Statements.CompensationExtension\"></xref> class."},{"pos":[3397,3507],"content":"Called by the host to collect read-write values and write-only values related to compensation to be persisted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the host to collect read-write values and write-only values related to compensation to be persisted.","pos":[0,110]}]},{"pos":[3900,3938],"content":"The read-write values to be persisted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The read-write values to be persisted.","pos":[0,38]}]},{"pos":[4072,4110],"content":"The write-only values to be persisted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The write-only values to be persisted.","pos":[0,38]}]},{"pos":[4892,5022],"content":"Called by the host to pass all of the loaded values related to compensation that were part of the most recent persistence episode.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the host to pass all of the loaded values related to compensation that were part of the most recent persistence episode.","pos":[0,130]}]},{"pos":[5321,5387],"content":"The read-write values that were loaded from the persistence store.","needQuote":true,"needEscape":true,"nodes":[{"content":"The read-write values that were loaded from the persistence store.","pos":[0,66]}]},{"pos":[6269,6330],"content":"Returns any additional extensions to compensation activities.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns any additional extensions to compensation activities.","pos":[0,61]}]},{"pos":[6572,6619],"content":"A collection of additional workflow extensions.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of additional workflow extensions.","pos":[0,47]}]},{"pos":[7665,7723],"content":"Sets any additional extensions to compensation activities.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets any additional extensions to compensation activities.","pos":[0,58]}]},{"pos":[7965,8001],"content":"The target workflow instance to set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target workflow instance to set.","pos":[0,36]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Statements.CompensationExtension\n  id: CompensationExtension\n  children:\n  - System.Activities.Statements.CompensationExtension.#ctor\n  - System.Activities.Statements.CompensationExtension.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)\n  - System.Activities.Statements.CompensationExtension.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})\n  - System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions\n  - System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)\n  langs:\n  - csharp\n  name: CompensationExtension\n  nameWithType: CompensationExtension\n  fullName: System.Activities.Statements.CompensationExtension\n  type: Class\n  summary: Represents an extension that hooks up with compensation activities and persists compensation-related instance state.\n  syntax:\n    content: 'public class CompensationExtension : System.Activities.Persistence.PersistenceParticipant, System.Activities.Hosting.IWorkflowInstanceExtension'\n  inheritance:\n  - System.Object\n  - System.Activities.Persistence.PersistenceParticipant\n  implements:\n  - System.Activities.Hosting.IWorkflowInstanceExtension\n  inheritedMembers:\n  - System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensationExtension.#ctor\n  id: '#ctor'\n  parent: System.Activities.Statements.CompensationExtension\n  langs:\n  - csharp\n  name: CompensationExtension()\n  nameWithType: CompensationExtension.CompensationExtension()\n  fullName: System.Activities.Statements.CompensationExtension.CompensationExtension()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Initializes a new instance of the <xref href=\"System.Activities.Statements.CompensationExtension\"></xref> class.\n  syntax:\n    content: public CompensationExtension ();\n    parameters: []\n  overload: System.Activities.Statements.CompensationExtension.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensationExtension.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)\n  id: CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)\n  parent: System.Activities.Statements.CompensationExtension\n  langs:\n  - csharp\n  name: CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)\n  nameWithType: CompensationExtension.CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)\n  fullName: System.Activities.Statements.CompensationExtension.CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Called by the host to collect read-write values and write-only values related to compensation to be persisted.\n  syntax:\n    content: protected override void CollectValues (out System.Collections.Generic.IDictionary<System.Xml.Linq.XName,object> readWriteValues, out System.Collections.Generic.IDictionary<System.Xml.Linq.XName,object> writeOnlyValues);\n    parameters:\n    - id: readWriteValues\n      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}\n      description: The read-write values to be persisted.\n    - id: writeOnlyValues\n      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}\n      description: The write-only values to be persisted.\n  overload: System.Activities.Statements.CompensationExtension.CollectValues*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensationExtension.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})\n  id: PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})\n  parent: System.Activities.Statements.CompensationExtension\n  langs:\n  - csharp\n  name: PublishValues(IDictionary<XName,Object>)\n  nameWithType: CompensationExtension.PublishValues(IDictionary<XName,Object>)\n  fullName: System.Activities.Statements.CompensationExtension.PublishValues(IDictionary<XName,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Called by the host to pass all of the loaded values related to compensation that were part of the most recent persistence episode.\n  syntax:\n    content: protected override void PublishValues (System.Collections.Generic.IDictionary<System.Xml.Linq.XName,object> readWriteValues);\n    parameters:\n    - id: readWriteValues\n      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}\n      description: The read-write values that were loaded from the persistence store.\n  overload: System.Activities.Statements.CompensationExtension.PublishValues*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions\n  id: System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions\n  isEii: true\n  parent: System.Activities.Statements.CompensationExtension\n  langs:\n  - csharp\n  name: System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()\n  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()\n  fullName: System.Activities.Statements.CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Returns any additional extensions to compensation activities.\n  syntax:\n    content: System.Collections.Generic.IEnumerable<object> IWorkflowInstanceExtension.GetAdditionalExtensions ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Object}\n      description: A collection of additional workflow extensions.\n  overload: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)\n  id: System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)\n  isEii: true\n  parent: System.Activities.Statements.CompensationExtension\n  langs:\n  - csharp\n  name: System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)\n  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)\n  fullName: System.Activities.Statements.CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Sets any additional extensions to compensation activities.\n  syntax:\n    content: void IWorkflowInstanceExtension.SetInstance (System.Activities.Hosting.WorkflowInstanceProxy instance);\n    parameters:\n    - id: instance\n      type: System.Activities.Hosting.WorkflowInstanceProxy\n      description: The target workflow instance to set.\n  overload: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Activities.Persistence.PersistenceParticipant\n  isExternal: false\n  name: System.Activities.Persistence.PersistenceParticipant\n- uid: System.Activities.Statements.CompensationExtension.#ctor\n  parent: System.Activities.Statements.CompensationExtension\n  isExternal: false\n  name: CompensationExtension()\n  nameWithType: CompensationExtension.CompensationExtension()\n  fullName: System.Activities.Statements.CompensationExtension.CompensationExtension()\n- uid: System.Activities.Statements.CompensationExtension.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)\n  parent: System.Activities.Statements.CompensationExtension\n  isExternal: false\n  name: CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)\n  nameWithType: CompensationExtension.CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)\n  fullName: System.Activities.Statements.CompensationExtension.CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)\n- uid: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<XName,Object>\n  nameWithType: IDictionary<XName,Object>\n  fullName: System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.Xml.Linq.XName,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XName\n    name: XName\n    nameWithType: XName\n    fullName: XName\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.CompensationExtension.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})\n  parent: System.Activities.Statements.CompensationExtension\n  isExternal: false\n  name: PublishValues(IDictionary<XName,Object>)\n  nameWithType: CompensationExtension.PublishValues(IDictionary<XName,Object>)\n  fullName: System.Activities.Statements.CompensationExtension.PublishValues(IDictionary<XName,Object>)\n- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions\n  parent: System.Activities.Statements.CompensationExtension\n  isExternal: false\n  name: System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()\n  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()\n  fullName: System.Activities.Statements.CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()\n- uid: System.Collections.Generic.IEnumerable{System.Object}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<Object>\n  nameWithType: IEnumerable<Object>\n  fullName: System.Collections.Generic.IEnumerable<System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)\n  parent: System.Activities.Statements.CompensationExtension\n  isExternal: false\n  name: System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)\n  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)\n  fullName: System.Activities.Statements.CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)\n- uid: System.Activities.Hosting.WorkflowInstanceProxy\n  parent: System.Activities.Hosting\n  isExternal: false\n  name: WorkflowInstanceProxy\n  nameWithType: WorkflowInstanceProxy\n  fullName: System.Activities.Hosting.WorkflowInstanceProxy\n- uid: System.Activities.Statements.CompensationExtension.#ctor*\n  parent: System.Activities.Statements.CompensationExtension\n  isExternal: false\n  name: CompensationExtension\n  nameWithType: CompensationExtension.CompensationExtension\n- uid: System.Activities.Statements.CompensationExtension.CollectValues*\n  parent: System.Activities.Statements.CompensationExtension\n  isExternal: false\n  name: CollectValues\n  nameWithType: CompensationExtension.CollectValues\n- uid: System.Activities.Statements.CompensationExtension.PublishValues*\n  parent: System.Activities.Statements.CompensationExtension\n  isExternal: false\n  name: PublishValues\n  nameWithType: CompensationExtension.PublishValues\n- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions*\n  parent: System.Activities.Statements.CompensationExtension\n  isExternal: false\n  name: System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions\n  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions\n- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance*\n  parent: System.Activities.Statements.CompensationExtension\n  isExternal: false\n  name: System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance\n  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance\n"}