{"nodes":[{"pos":[1168,1355],"content":"Represents a binding between an <xref href=\"System.Windows.Input.InputGesture\"></xref> and a command. The command is potentially a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a binding between an <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.InputGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and a command.","pos":[0,101],"source":"Represents a binding between an <xref href=\"System.Windows.Input.InputGesture\"></xref> and a command."},{"content":"The command is potentially a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[102,187],"source":" The command is potentially a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>."}]},{"pos":[10268,10377],"content":"Provides base initialization for classes derived from <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.InputBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Provides base initialization for classes derived from <xref href=\"System.Windows.Input.InputBinding\"></xref>."},{"pos":[10389,11316],"content":"<xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access. This has the effect of making <xref:System.Windows.Input.InputBinding> an \"abstract\" class for [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] that have [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Windows.Input.InputBinding&gt; is not technically an abstract class, but the default constructor is deliberately protected access.","pos":[0,140],"source":"<xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access."},{"content":"This has the effect of making &lt;xref:System.Windows.Input.InputBinding&gt; an \"abstract\" class for <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[141,302],"source":" This has the effect of making <xref:System.Windows.Input.InputBinding> an \"abstract\" class for [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."},{"content":"There are existing properties in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> that have <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usages that expect objects of type &lt;xref:System.Windows.Input.InputBinding&gt;, but you cannot specify an &lt;xref:System.Windows.Input.InputBinding&gt; instance in <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[303,710],"source":" There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] that have [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."},{"content":"Instead, you can specify one of the device-specific &lt;xref:System.Windows.Input.InputBinding&gt; derived classes as values, for instance &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.","pos":[711,927],"source":" Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>."}]},{"pos":[12025,12165],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.InputBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified command and input gesture.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.InputBinding\"></xref> class with the specified command and input gesture."},{"pos":[12177,12881],"content":"If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands. Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class. Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent. You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands. Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class. Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent. You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.","pos":[0,704],"nodes":[{"content":"If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.","pos":[0,156]},{"content":"Instead, you will either use constructors of derived classes (&lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;), or you will use this constructor as the base instantiation of a custom class.","pos":[157,382],"source":" Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class."},{"content":"Although the &lt;xref:System.Windows.Input.InputBinding&gt; class supports different input devices in principle, in practice you must choose which device the input binding will represent.","pos":[383,564],"source":" Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent."},{"content":"You only can set only one &lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt; value on the input binding, and gestures are device-specific.","pos":[565,704],"source":" You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific."}]}]},{"pos":[13594,13634],"content":"The command to associate with <ph id=\"ph1\">`gesture`</ph>.","needQuote":true,"needEscape":true,"source":"The command to associate with `gesture`."},{"pos":[13718,13764],"content":"The input gesture to associate with <ph id=\"ph1\">`command`</ph>.","needQuote":true,"needEscape":true,"source":"The input gesture to associate with `command`."},{"pos":[13934,14043],"content":"<ph id=\"ph1\">&lt;code&gt;command&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;gesture&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>command</code> or <code>gesture</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[14491,14571],"content":"Copies the base (non-animated) values of the properties of the specified object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the base (non-animated) values of the properties of the specified object.","pos":[0,80]}]},{"pos":[14771,14791],"content":"The object to clone.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to clone.","pos":[0,20]}]},{"pos":[15373,15441],"content":"Copies the current values of the properties of the specified object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the current values of the properties of the specified object.","pos":[0,68]}]},{"pos":[15653,15673],"content":"The object to clone.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to clone.","pos":[0,20]}]},{"pos":[16114,16203],"content":"Gets or sets the <xref:System.Windows.Input.ICommand> associated with this input binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the &lt;xref:System.Windows.Input.ICommand&gt; associated with this input binding.","pos":[0,89],"source":"Gets or sets the <xref:System.Windows.Input.ICommand> associated with this input binding."}]},{"pos":[16216,18584],"content":"The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties with [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.       <xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string. This type conversion behavior sets the attribute value form of this property. You can also bind the Command, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.      <a name=\"xamlAttributeUsage_Command\"></a>    ## XAML Attribute Usage    <`inputBindingDerivedClass` `Command`=\"<xref:System.Windows.Input.ICommand>\"/>      <a name=\"xamlPropertyElementUsage_Command\"></a>    ## XAML Property Element Usage      ```   <inputBindingDerivedClass>     <inputBindingDerivedClass.Command>       <iCommandImplementation/>     </inputBindingDerivedClass.Command>   </inputBindingDerivedClass>   ```      <a name=\"xamlValues_Command\"></a>    ## XAML Values    `inputBindingDerivedClass`    A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.       `iCommandImplementation`    An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Windows.Input.InputBinding&gt; class does not support <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).","pos":[0,248],"source":"The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected)."},{"content":"However, derived classes can expose a public constructor and therefore, can use properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt;.","pos":[249,405],"source":" However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>."},{"content":"Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties with <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usages are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.","pos":[406,759],"source":" Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties with [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>."},{"content":"&lt;xref:System.Windows.Input.ICommand&gt; references a type converter that enables certain preexisting &lt;xref:System.Windows.Input.ICommand&gt; implementations to specify values in the form of a string.","pos":[766,959],"source":"       <xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string."},{"content":"This type conversion behavior sets the attribute value form of this property.","pos":[960,1037]},{"content":"You can also bind the Command, &lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;, and &lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; properties to an &lt;xref:System.Windows.Input.ICommand&gt; that is defined on an object.","pos":[1038,1276],"source":" You can also bind the Command, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object."},{"content":"This enables you to define a custom command and associate it with user input.","pos":[1277,1354]},{"content":"For more information, see the second example in &lt;xref:System.Windows.Input.InputBinding&gt;.","pos":[1355,1444],"source":" For more information, see the second example in <xref:System.Windows.Input.InputBinding>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Command\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage    &lt;<ph id=\"ph1\">`inputBindingDerivedClass`</ph> <ph id=\"ph2\">`Command`</ph>=\"&lt;xref:System.Windows.Input.ICommand&gt;\"/&gt;      <bpt id=\"p2\">&lt;a name=\"xamlPropertyElementUsage_Command\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id=\"ph3\">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.Command&gt;       &lt;iCommandImplementation/&gt;     &lt;/inputBindingDerivedClass.Command&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph>      <bpt id=\"p3\">&lt;a name=\"xamlValues_Command\"&gt;</bpt><ept id=\"p3\">&lt;/a&gt;</ept>    ## XAML Values    <ph id=\"ph4\">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.","pos":[1450,2151],"source":"<a name=\"xamlAttributeUsage_Command\"></a>    ## XAML Attribute Usage    <`inputBindingDerivedClass` `Command`=\"<xref:System.Windows.Input.ICommand>\"/>      <a name=\"xamlPropertyElementUsage_Command\"></a>    ## XAML Property Element Usage      ```   <inputBindingDerivedClass>     <inputBindingDerivedClass.Command>       <iCommandImplementation/>     </inputBindingDerivedClass.Command>   </inputBindingDerivedClass>   ```      <a name=\"xamlValues_Command\"></a>    ## XAML Values    `inputBindingDerivedClass`    A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>."},{"content":"See Remarks.","pos":[2152,2164]},{"content":"<ph id=\"ph1\">`iCommandImplementation`</ph>    An object implementation of &lt;xref:System.Windows.Input.ICommand&gt; that supports object element syntax (has a public default constructor).","pos":[2171,2335],"source":"`iCommandImplementation`    An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor)."}]},{"pos":[19573,19596],"content":"The associated command.","needQuote":true,"needEscape":true,"nodes":[{"content":"The associated command.","pos":[0,23]}]},{"pos":[19768,19850],"content":"The Command value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The Command value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[20250,20314],"content":"Gets or sets the command-specific data for a particular command.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the command-specific data for a particular command.","pos":[0,64]}]},{"pos":[20327,24005],"content":"The CommandParameter property is used to pass specific information to the command when it is executed. The type of the data is defined by the command. Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.       If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the CommandParameter of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.       The data type and purpose of the command parameter are defined differently for each command and can be `null`. You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, CommandParameter, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.       The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.      <a name=\"xamlAttributeUsage_CommandParameter\"></a>    ## XAML Attribute Usage      ```   <inputBindingDerivedClass CommandParameter=\"commandParameterString\"/>   ```      <a name=\"xamlPropertyElementUsage_CommandParameter\"></a>    ## XAML Property Element Usage      ```   <inputBindingDerivedClass>     <inputBindingDerivedClass.CommandParameter>       <commandParameterObject/>     </inputBindingDerivedClass.CommandParameter>   </inputBindingDerivedClass>   ```      <a name=\"xamlValues_CommandParameter\"></a>    ## XAML Values    `inputBindingDerivedClass`    A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.       `commandParameterString`    A string that is processed by a particular command. Strings are the common type used for command parameters because they can be easily set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with. Many commands do not expect parameters.       `commandParameterObject`    An object that is processed by a particular command. All existing [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] commands use strings. Therefore, this property element syntax is only relevant for custom command scenarios. In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The CommandParameter property is used to pass specific information to the command when it is executed.","pos":[0,102]},{"content":"The type of the data is defined by the command.","pos":[103,150]},{"content":"Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.","pos":[151,265]},{"content":"If the command that an input binding is associated with is a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the CommandParameter of the input binding is passed to the &lt;xref:System.Windows.Input.RoutedCommand&gt; handlers through the &lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt; and the &lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt; event data when the command is processed.","pos":[272,653],"source":"       If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the CommandParameter of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed."},{"content":"The data type and purpose of the command parameter are defined differently for each command and can be <ph id=\"ph1\">`null`</ph>.","pos":[660,770],"source":"       The data type and purpose of the command parameter are defined differently for each command and can be `null`."},{"content":"You can bind the &lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;, CommandParameter, and &lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; properties to an &lt;xref:System.Windows.Input.ICommand&gt; that is defined on an object.","pos":[771,1004],"source":" You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, CommandParameter, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object."},{"content":"This enables you to define a custom command and associate it with user input.","pos":[1005,1082]},{"content":"For more information, see the second example in &lt;xref:System.Windows.Input.InputBinding&gt;.","pos":[1083,1172],"source":" For more information, see the second example in <xref:System.Windows.Input.InputBinding>."},{"content":"The &lt;xref:System.Windows.Input.InputBinding&gt; class does not support <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).","pos":[1179,1427],"source":"       The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected)."},{"content":"However, derived classes can expose a public constructor and therefore, can set properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt; with <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage.","pos":[1428,1661],"source":" However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage."},{"content":"Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.","pos":[1662,2006],"source":" Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_CommandParameter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;inputBindingDerivedClass CommandParameter=\"commandParameterString\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlPropertyElementUsage_CommandParameter\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id=\"ph2\">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.CommandParameter&gt;       &lt;commandParameterObject/&gt;     &lt;/inputBindingDerivedClass.CommandParameter&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph>      <bpt id=\"p3\">&lt;a name=\"xamlValues_CommandParameter\"&gt;</bpt><ept id=\"p3\">&lt;/a&gt;</ept>    ## XAML Values    <ph id=\"ph3\">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.","pos":[2012,2763],"source":"<a name=\"xamlAttributeUsage_CommandParameter\"></a>    ## XAML Attribute Usage      ```   <inputBindingDerivedClass CommandParameter=\"commandParameterString\"/>   ```      <a name=\"xamlPropertyElementUsage_CommandParameter\"></a>    ## XAML Property Element Usage      ```   <inputBindingDerivedClass>     <inputBindingDerivedClass.CommandParameter>       <commandParameterObject/>     </inputBindingDerivedClass.CommandParameter>   </inputBindingDerivedClass>   ```      <a name=\"xamlValues_CommandParameter\"></a>    ## XAML Values    `inputBindingDerivedClass`    A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>."},{"content":"See Remarks.","pos":[2764,2776]},{"content":"<ph id=\"ph1\">`commandParameterString`</ph>    A string that is processed by a particular command.","pos":[2783,2862],"source":"`commandParameterString`    A string that is processed by a particular command."},{"content":"Strings are the common type used for command parameters because they can be easily set in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[2863,3019],"source":" Strings are the common type used for command parameters because they can be easily set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."},{"content":"For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.","pos":[3020,3159]},{"content":"Many commands do not expect parameters.","pos":[3160,3199]},{"content":"<ph id=\"ph1\">`commandParameterObject`</ph>    An object that is processed by a particular command.","pos":[3206,3286],"source":"`commandParameterObject`    An object that is processed by a particular command."},{"content":"All existing <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> commands use strings.","pos":[3287,3397],"source":" All existing [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] commands use strings."},{"content":"Therefore, this property element syntax is only relevant for custom command scenarios.","pos":[3398,3484]},{"content":"In order to support this syntax, the <ph id=\"ph1\">`commandParameterObject`</ph> object must also support object element syntax (must have a public default constructor).","pos":[3485,3635],"source":" In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor)."}]},{"pos":[24132,24235],"content":"The command-specific data. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The command-specific data.","pos":[0,26]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[27,103],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[24753,24847],"content":"Identifies the <xref:System.Windows.Input.InputBinding.CommandParameter*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Input.InputBinding.CommandParameter*&gt; dependency property.","pos":[0,94],"source":"Identifies the <xref:System.Windows.Input.InputBinding.CommandParameter*> dependency property."}]},{"pos":[25031,25043],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25452,25537],"content":"Identifies the <xref:System.Windows.Input.InputBinding.Command*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Input.InputBinding.Command*&gt; dependency property.","pos":[0,85],"source":"Identifies the <xref:System.Windows.Input.InputBinding.Command*> dependency property."}]},{"pos":[25712,25724],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26126,26173],"content":"Gets or sets the target element of the command.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the target element of the command.","pos":[0,47]}]},{"pos":[26186,28472],"content":"In the [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] commanding system, the CommandTarget property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>. If the CommandTarget is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.       When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised. If the CommandTarget property is not set, the element with keyboard focus is used as the target.       The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.      <a name=\"xamlAttributeUsage_CommandTarget\"></a>    ## XAML Attribute Usage      ```   <inputBindingDerivedClass CommandTarget=\"bindingToTarget\"/>   ```      <a name=\"xamlValues_CommandTarget\"></a>    ## XAML Values    `inputBindingDerivedClass`    A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.       `bindingToTarget`    A string that uses a type of binding syntax that can return an object reference to an existing named element. See Remarks.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In the <ph id=\"ph1\">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> commanding system, the CommandTarget property on an &lt;xref:System.Windows.Input.ICommandSource&gt; object is applicable only when the &lt;xref:System.Windows.Input.ICommand&gt; is a &lt;xref:System.Windows.Input.RoutedCommand&gt;.","pos":[0,283],"source":"In the [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] commanding system, the CommandTarget property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>."},{"content":"If the CommandTarget is set on an &lt;xref:System.Windows.Input.ICommandSource&gt; and the corresponding command is not a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the command target is ignored.","pos":[284,473],"source":" If the CommandTarget is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored."},{"content":"When used with a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the command target is the object on which the &lt;xref:System.Windows.Input.CommandManager.Executed&gt; and &lt;xref:System.Windows.Input.CommandManager.CanExecute&gt; events are raised.","pos":[480,714],"source":"       When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised."},{"content":"If the CommandTarget property is not set, the element with keyboard focus is used as the target.","pos":[715,811]},{"content":"The &lt;xref:System.Windows.Input.InputBinding&gt; class itself does not support <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).","pos":[818,1076],"source":"       The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected)."},{"content":"However, derived classes can expose a public constructor and therefore can set properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt; with a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage.","pos":[1077,1311],"source":" However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage."},{"content":"Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.","pos":[1312,1656],"source":" Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_CommandTarget\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;inputBindingDerivedClass CommandTarget=\"bindingToTarget\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_CommandTarget\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <ph id=\"ph2\">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.","pos":[1662,2098],"source":"<a name=\"xamlAttributeUsage_CommandTarget\"></a>    ## XAML Attribute Usage      ```   <inputBindingDerivedClass CommandTarget=\"bindingToTarget\"/>   ```      <a name=\"xamlValues_CommandTarget\"></a>    ## XAML Values    `inputBindingDerivedClass`    A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>."},{"content":"See Remarks.","pos":[2099,2111]},{"content":"<ph id=\"ph1\">`bindingToTarget`</ph>    A string that uses a type of binding syntax that can return an object reference to an existing named element.","pos":[2118,2248],"source":"`bindingToTarget`    A string that uses a type of binding syntax that can return an object reference to an existing named element."},{"content":"See Remarks.","pos":[2249,2261]}]},{"pos":[28633,28736],"content":"The target of the command. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target of the command.","pos":[0,26]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[27,103],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[29236,29327],"content":"Identifies the <xref:System.Windows.Input.InputBinding.CommandTarget*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Input.InputBinding.CommandTarget*&gt; dependency property.","pos":[0,91],"source":"Identifies the <xref:System.Windows.Input.InputBinding.CommandTarget*> dependency property."}]},{"pos":[29508,29520],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29951,30032],"content":"Creates an instance of an <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.InputBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates an instance of an <xref href=\"System.Windows.Input.InputBinding\"></xref>."},{"pos":[30210,30225],"content":"The new object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new object.","pos":[0,15]}]},{"pos":[30663,30770],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.InputGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with this input binding.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Windows.Input.InputGesture\"></xref> associated with this input binding."},{"pos":[34350,34450],"content":"The associated gesture. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The associated gesture.","pos":[0,23]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,100],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[35000,35142],"content":"Makes the instance a frozen clone of the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Freezable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by using base (non-animated) property values.","needQuote":true,"needEscape":true,"source":"Makes the instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref> by using base (non-animated) property values."},{"pos":[35348,35368],"content":"The object to clone.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to clone.","pos":[0,20]}]},{"pos":[35986,36183],"content":"Makes the current instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref>. If the object has animated dependency properties, their current animated values are copied.","needQuote":true,"needEscape":true,"nodes":[{"content":"Makes the current instance a frozen clone of the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Freezable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,105],"source":"Makes the current instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref>."},{"content":"If the object has animated dependency properties, their current animated values are copied.","pos":[106,197]}]},{"pos":[36401,36421],"content":"The object to clone.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to clone.","pos":[0,20]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.InputBinding\n  id: InputBinding\n  children:\n  - System.Windows.Input.InputBinding.#ctor\n  - System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)\n  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.Command\n  - System.Windows.Input.InputBinding.CommandParameter\n  - System.Windows.Input.InputBinding.CommandParameterProperty\n  - System.Windows.Input.InputBinding.CommandProperty\n  - System.Windows.Input.InputBinding.CommandTarget\n  - System.Windows.Input.InputBinding.CommandTargetProperty\n  - System.Windows.Input.InputBinding.CreateInstanceCore\n  - System.Windows.Input.InputBinding.Gesture\n  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  langs:\n  - csharp\n  name: InputBinding\n  nameWithType: InputBinding\n  fullName: System.Windows.Input.InputBinding\n  type: Class\n  summary: Represents a binding between an <xref href=\"System.Windows.Input.InputGesture\"></xref> and a command. The command is potentially a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.\n  remarks: \"You can specify that user input invokes a command by creating a InputBinding. When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.  \\n  \\n You can specify that the InputBinding invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties. This enables you to define a custom command and associate it with user input. For more information, see the second example in the Examples section.  \\n  \\n An InputBinding can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.  \\n  \\n The InputBinding class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from InputBinding with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing InputBinding-derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>. The typical property in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] programming that is set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and takes one or more InputBinding objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=fullName> property.  \\n  \\n<a name=\\\"xamlObjectElementUsage_InputBinding\\\"></a>   \\n## XAML Object Element Usage  \\n \\\\<*inputBindingDerivedClass…/*>  \\n  \\n<a name=\\\"xamlValues_InputBinding\\\"></a>   \\n## XAML Values  \\n `inputBindingDerivedClass`  \\n A derived class of InputBinding that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.\"\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command. When the key gesture is performed, the Open command is invoked.  \\n  \\n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \\n  \\n The following examples show how to bind a custom command to InputBinding objects. These examples create an application that enables the user to change the background color by performing one of the following actions:  \\n  \\n-   Clicking a button.  \\n  \\n-   Pressing CTRL+C.  \\n  \\n-   Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).  \\n  \\n The first example creates a class named `SimpleDelegateCommand`. This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes. `SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command. `GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.  \\n  \\n [!code-cs[InputCommandBinding#DelegateCommand](~/add/codesnippet/csharp/inputcommandbinding/mainwindow.xaml.cs#delegatecommand)]\\n [!code-vb[InputCommandBinding#DelegateCommand](~/add/codesnippet/visualbasic/inputcommandbinding/mainwindow.xaml.vb#delegatecommand)]  \\n  \\n The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`. The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties. An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.  \\n  \\n [!code-cs[InputCommandBinding#InitializeCommand](~/add/codesnippet/csharp/inputcommandbinding/mainwindow.xaml.cs#initializecommand)]\\n [!code-vb[InputCommandBinding#InitializeCommand](~/add/codesnippet/visualbasic/inputcommandbinding/mainwindow.xaml.vb#initializecommand)]  \\n  \\n Finally, the following example creates the user interface. The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>. When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color. In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`. The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=fullName>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=fullName>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=fullName> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.  \\n  \\n [!code-xml[InputCommandBinding#UI](~/add/codesnippet/xaml/inputcommandbinding/mainwindow.xaml#ui)]\"\n  syntax:\n    content: 'public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Freezable\n  implements:\n  - System.Windows.Input.ICommandSource\n  inheritedMembers:\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Freezable.CanFreeze\n  - System.Windows.Freezable.Changed\n  - System.Windows.Freezable.Clone\n  - System.Windows.Freezable.CloneCurrentValue\n  - System.Windows.Freezable.CreateInstance\n  - System.Windows.Freezable.Freeze\n  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  - System.Windows.Freezable.FreezeCore(System.Boolean)\n  - System.Windows.Freezable.GetAsFrozen\n  - System.Windows.Freezable.GetCurrentValueAsFrozen\n  - System.Windows.Freezable.IsFrozen\n  - System.Windows.Freezable.OnChanged\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.Freezable.ReadPreamble\n  - System.Windows.Freezable.WritePostscript\n  - System.Windows.Freezable.WritePreamble\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.#ctor\n  id: '#ctor'\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: InputBinding()\n  nameWithType: InputBinding.InputBinding()\n  fullName: System.Windows.Input.InputBinding.InputBinding()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Provides base initialization for classes derived from <xref href=\"System.Windows.Input.InputBinding\"></xref>.\n  remarks: <xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access. This has the effect of making <xref:System.Windows.Input.InputBinding> an \"abstract\" class for [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] that have [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.\n  syntax:\n    content: protected InputBinding ();\n    parameters: []\n  overload: System.Windows.Input.InputBinding.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)\n  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)'\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: InputBinding(ICommand,InputGesture)\n  nameWithType: InputBinding.InputBinding(ICommand,InputGesture)\n  fullName: System.Windows.Input.InputBinding.InputBinding(ICommand,InputGesture)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.InputBinding\"></xref> class with the specified command and input gesture.\n  remarks: If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands. Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class. Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent. You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.\n  example:\n  - \"The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.  \\n  \\n [!code-cs[commandlibrarysnippets#InputBindingAddingComand](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#inputbindingaddingcomand)]\\n [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#inputbindingaddingcomand)]\"\n  syntax:\n    content: public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to associate with `gesture`.\n    - id: gesture\n      type: System.Windows.Input.InputGesture\n      description: The input gesture to associate with `command`.\n  overload: System.Windows.Input.InputBinding.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>command</code> or <code>gesture</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)\n  id: CloneCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CloneCore(Freezable)\n  nameWithType: InputBinding.CloneCore(Freezable)\n  fullName: System.Windows.Input.InputBinding.CloneCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Copies the base (non-animated) values of the properties of the specified object.\n  syntax:\n    content: protected override void CloneCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The object to clone.\n  overload: System.Windows.Input.InputBinding.CloneCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)\n  id: CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)\n  fullName: System.Windows.Input.InputBinding.CloneCurrentValueCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Copies the current values of the properties of the specified object.\n  syntax:\n    content: protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The object to clone.\n  overload: System.Windows.Input.InputBinding.CloneCurrentValueCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.Command\n  id: Command\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: Command\n  nameWithType: InputBinding.Command\n  fullName: System.Windows.Input.InputBinding.Command\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the <xref:System.Windows.Input.ICommand> associated with this input binding.\n  remarks: \"The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties with [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \\n  \\n <xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string. This type conversion behavior sets the attribute value form of this property. You can also bind the Command, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.  \\n  \\n<a name=\\\"xamlAttributeUsage_Command\\\"></a>   \\n## XAML Attribute Usage  \\n <`inputBindingDerivedClass` `Command`=\\\"<xref:System.Windows.Input.ICommand>\\\"/>  \\n  \\n<a name=\\\"xamlPropertyElementUsage_Command\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<inputBindingDerivedClass>  \\n  <inputBindingDerivedClass.Command>  \\n    <iCommandImplementation/>  \\n  </inputBindingDerivedClass.Command>  \\n</inputBindingDerivedClass>  \\n```  \\n  \\n<a name=\\\"xamlValues_Command\\\"></a>   \\n## XAML Values  \\n `inputBindingDerivedClass`  \\n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \\n  \\n `iCommandImplementation`  \\n An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor).\"\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=fullName> command. When the key gesture is performed, the Open command is invoked.  \\n  \\n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \\n  \\n [!code-cs[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewkeybinding)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewkeybinding)]\"\n  syntax:\n    content: public System.Windows.Input.ICommand Command { get; set; }\n    return:\n      type: System.Windows.Input.ICommand\n      description: The associated command.\n  overload: System.Windows.Input.InputBinding.Command*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The Command value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.CommandParameter\n  id: CommandParameter\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CommandParameter\n  nameWithType: InputBinding.CommandParameter\n  fullName: System.Windows.Input.InputBinding.CommandParameter\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the command-specific data for a particular command.\n  remarks: \"The CommandParameter property is used to pass specific information to the command when it is executed. The type of the data is defined by the command. Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.  \\n  \\n If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the CommandParameter of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.  \\n  \\n The data type and purpose of the command parameter are defined differently for each command and can be `null`. You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, CommandParameter, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.  \\n  \\n The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \\n  \\n<a name=\\\"xamlAttributeUsage_CommandParameter\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<inputBindingDerivedClass CommandParameter=\\\"commandParameterString\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlPropertyElementUsage_CommandParameter\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<inputBindingDerivedClass>  \\n  <inputBindingDerivedClass.CommandParameter>  \\n    <commandParameterObject/>  \\n  </inputBindingDerivedClass.CommandParameter>  \\n</inputBindingDerivedClass>  \\n```  \\n  \\n<a name=\\\"xamlValues_CommandParameter\\\"></a>   \\n## XAML Values  \\n `inputBindingDerivedClass`  \\n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \\n  \\n `commandParameterString`  \\n A string that is processed by a particular command. Strings are the common type used for command parameters because they can be easily set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with. Many commands do not expect parameters.  \\n  \\n `commandParameterObject`  \\n An object that is processed by a particular command. All existing [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] commands use strings. Therefore, this property element syntax is only relevant for custom command scenarios. In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).\"\n  syntax:\n    content: public object CommandParameter { get; set; }\n    return:\n      type: System.Object\n      description: The command-specific data. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.Input.InputBinding.CommandParameter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.CommandParameterProperty\n  id: CommandParameterProperty\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CommandParameterProperty\n  nameWithType: InputBinding.CommandParameterProperty\n  fullName: System.Windows.Input.InputBinding.CommandParameterProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref:System.Windows.Input.InputBinding.CommandParameter*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty CommandParameterProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.CommandProperty\n  id: CommandProperty\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CommandProperty\n  nameWithType: InputBinding.CommandProperty\n  fullName: System.Windows.Input.InputBinding.CommandProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref:System.Windows.Input.InputBinding.Command*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty CommandProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.CommandTarget\n  id: CommandTarget\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CommandTarget\n  nameWithType: InputBinding.CommandTarget\n  fullName: System.Windows.Input.InputBinding.CommandTarget\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the target element of the command.\n  remarks: \"In the [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] commanding system, the CommandTarget property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>. If the CommandTarget is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.  \\n  \\n When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised. If the CommandTarget property is not set, the element with keyboard focus is used as the target.  \\n  \\n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \\n  \\n<a name=\\\"xamlAttributeUsage_CommandTarget\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<inputBindingDerivedClass CommandTarget=\\\"bindingToTarget\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_CommandTarget\\\"></a>   \\n## XAML Values  \\n `inputBindingDerivedClass`  \\n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \\n  \\n `bindingToTarget`  \\n A string that uses a type of binding syntax that can return an object reference to an existing named element. See Remarks.\"\n  syntax:\n    content: public System.Windows.IInputElement CommandTarget { get; set; }\n    return:\n      type: System.Windows.IInputElement\n      description: The target of the command. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.Input.InputBinding.CommandTarget*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.CommandTargetProperty\n  id: CommandTargetProperty\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CommandTargetProperty\n  nameWithType: InputBinding.CommandTargetProperty\n  fullName: System.Windows.Input.InputBinding.CommandTargetProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref:System.Windows.Input.InputBinding.CommandTarget*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty CommandTargetProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.CreateInstanceCore\n  id: CreateInstanceCore\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CreateInstanceCore()\n  nameWithType: InputBinding.CreateInstanceCore()\n  fullName: System.Windows.Input.InputBinding.CreateInstanceCore()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Creates an instance of an <xref href=\"System.Windows.Input.InputBinding\"></xref>.\n  syntax:\n    content: protected override System.Windows.Freezable CreateInstanceCore ();\n    parameters: []\n    return:\n      type: System.Windows.Freezable\n      description: The new object.\n  overload: System.Windows.Input.InputBinding.CreateInstanceCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.Gesture\n  id: Gesture\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: Gesture\n  nameWithType: InputBinding.Gesture\n  fullName: System.Windows.Input.InputBinding.Gesture\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the <xref href=\"System.Windows.Input.InputGesture\"></xref> associated with this input binding.\n  remarks: \"The input gesture is the action that invokes the command. Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>. A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>. A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.  \\n  \\n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \\n  \\n<a name=\\\"xamlAttributeUsage_gesture\\\"></a>   \\n## XAML Attribute Usage  \\n <<xref:System.Windows.Input.KeyBinding> `Gesture`=\\\"<xref:System.Windows.Input.KeyGesture>\\\"/>  \\n  \\n \\\\- or -  \\n  \\n <<xref:System.Windows.Input.MouseBinding> `Gesture`=\\\"<xref:System.Windows.Input.MouseGesture>\\\"/>  \\n  \\n \\\\- or -  \\n  \\n <`inputBindingDerivedClass` `Gesture`=\\\"<xref:System.Windows.Input.InputGesture>\\\"/>  \\n  \\n<a name=\\\"xamlPropertyElementUsage_gesture\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<inputBindingDerivedClass>  \\n  <inputBindingDerivedClass.Gesture>  \\n    <inputGestureImplementation/>  \\n  </inputBindingDerivedClass.Gesture>  \\n</inputBindingDerivedClass>  \\n```  \\n  \\n<a name=\\\"xamlValues_gesture\\\"></a>   \\n## XAML Values  \\n `inputBindingDerivedClass`  \\n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \\n  \\n `inputGestureImplementation`  \\n A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.\"\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>. When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.  \\n  \\n [!code-xml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/add/codesnippet/xaml/CommandLibarySnippets/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  \\n  \\n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]\"\n  syntax:\n    content: public virtual System.Windows.Input.InputGesture Gesture { get; set; }\n    return:\n      type: System.Windows.Input.InputGesture\n      description: The associated gesture. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.Input.InputBinding.Gesture*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)\n  id: GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: InputBinding.GetAsFrozenCore(Freezable)\n  fullName: System.Windows.Input.InputBinding.GetAsFrozenCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Makes the instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref> by using base (non-animated) property values.\n  syntax:\n    content: protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The object to clone.\n  overload: System.Windows.Input.InputBinding.GetAsFrozenCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  id: GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Makes the current instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref>. If the object has animated dependency properties, their current animated values are copied.\n  syntax:\n    content: protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The object to clone.\n  overload: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Freezable\n  isExternal: false\n  name: System.Windows.Freezable\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Windows.Input.InputBinding.#ctor\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: InputBinding()\n  nameWithType: InputBinding.InputBinding()\n  fullName: System.Windows.Input.InputBinding.InputBinding()\n- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: InputBinding(ICommand,InputGesture)\n  nameWithType: InputBinding.InputBinding(ICommand,InputGesture)\n  fullName: System.Windows.Input.InputBinding.InputBinding(ICommand,InputGesture)\n- uid: System.Windows.Input.ICommand\n  parent: System.Windows.Input\n  isExternal: true\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture\n- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CloneCore(Freezable)\n  nameWithType: InputBinding.CloneCore(Freezable)\n  fullName: System.Windows.Input.InputBinding.CloneCore(Freezable)\n- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)\n  fullName: System.Windows.Input.InputBinding.CloneCurrentValueCore(Freezable)\n- uid: System.Windows.Input.InputBinding.Command\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: Command\n  nameWithType: InputBinding.Command\n  fullName: System.Windows.Input.InputBinding.Command\n- uid: System.Windows.Input.InputBinding.CommandParameter\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandParameter\n  nameWithType: InputBinding.CommandParameter\n  fullName: System.Windows.Input.InputBinding.CommandParameter\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.InputBinding.CommandParameterProperty\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandParameterProperty\n  nameWithType: InputBinding.CommandParameterProperty\n  fullName: System.Windows.Input.InputBinding.CommandParameterProperty\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.Input.InputBinding.CommandProperty\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandProperty\n  nameWithType: InputBinding.CommandProperty\n  fullName: System.Windows.Input.InputBinding.CommandProperty\n- uid: System.Windows.Input.InputBinding.CommandTarget\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandTarget\n  nameWithType: InputBinding.CommandTarget\n  fullName: System.Windows.Input.InputBinding.CommandTarget\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.InputBinding.CommandTargetProperty\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandTargetProperty\n  nameWithType: InputBinding.CommandTargetProperty\n  fullName: System.Windows.Input.InputBinding.CommandTargetProperty\n- uid: System.Windows.Input.InputBinding.CreateInstanceCore\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CreateInstanceCore()\n  nameWithType: InputBinding.CreateInstanceCore()\n  fullName: System.Windows.Input.InputBinding.CreateInstanceCore()\n- uid: System.Windows.Input.InputBinding.Gesture\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: Gesture\n  nameWithType: InputBinding.Gesture\n  fullName: System.Windows.Input.InputBinding.Gesture\n- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: InputBinding.GetAsFrozenCore(Freezable)\n  fullName: System.Windows.Input.InputBinding.GetAsFrozenCore(Freezable)\n- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(Freezable)\n- uid: System.Windows.Input.InputBinding.#ctor*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: InputBinding\n  nameWithType: InputBinding.InputBinding\n- uid: System.Windows.Input.InputBinding.CloneCore*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CloneCore\n  nameWithType: InputBinding.CloneCore\n- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CloneCurrentValueCore\n  nameWithType: InputBinding.CloneCurrentValueCore\n- uid: System.Windows.Input.InputBinding.Command*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: Command\n  nameWithType: InputBinding.Command\n- uid: System.Windows.Input.InputBinding.CommandParameter*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandParameter\n  nameWithType: InputBinding.CommandParameter\n- uid: System.Windows.Input.InputBinding.CommandTarget*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandTarget\n  nameWithType: InputBinding.CommandTarget\n- uid: System.Windows.Input.InputBinding.CreateInstanceCore*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CreateInstanceCore\n  nameWithType: InputBinding.CreateInstanceCore\n- uid: System.Windows.Input.InputBinding.Gesture*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: Gesture\n  nameWithType: InputBinding.Gesture\n- uid: System.Windows.Input.InputBinding.GetAsFrozenCore*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: GetAsFrozenCore\n  nameWithType: InputBinding.GetAsFrozenCore\n- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: GetCurrentValueAsFrozenCore\n  nameWithType: InputBinding.GetCurrentValueAsFrozenCore\n"}