{"nodes":[{"pos":[373,478],"content":"Returns data from the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognizer.StateChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Returns data from the <xref href=\"System.Speech.Recognition.SpeechRecognizer.StateChanged\"></xref> event."},{"pos":[491,1367],"content":"The <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event is raised by the <xref:System.Speech.Recognition.SpeechRecognizer> class. StateChangedEventArgs derives from <xref:System.EventArgs> and is passed to handlers for <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> events.       <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> is a read-only property. A shared speech recognizer's state cannot be changed programmatically. Users can change a shared speech recognizer's state using the Speech Recognition user interface (UI) or through the **Speech Recognition** member of the Windows **Control Panel**.       Both the **On** and **Sleep** settings in the Speech Recognition UI correspond to the `Listening` state. The **Off** setting in the Speech Recognition UI corresponds to <xref:System.Speech.Recognition.RecognizerState>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Speech.Recognition.SpeechRecognizer.StateChanged&gt; event is raised by the &lt;xref:System.Speech.Recognition.SpeechRecognizer&gt; class.","pos":[0,146],"source":"The <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event is raised by the <xref:System.Speech.Recognition.SpeechRecognizer> class."},{"content":"StateChangedEventArgs derives from &lt;xref:System.EventArgs&gt; and is passed to handlers for &lt;xref:System.Speech.Recognition.SpeechRecognizer.StateChanged&gt; events.","pos":[147,306],"source":" StateChangedEventArgs derives from <xref:System.EventArgs> and is passed to handlers for <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> events."},{"content":"&lt;xref:System.Speech.Recognition.SpeechRecognizer.State%2A&gt; is a read-only property.","pos":[313,396],"source":"       <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> is a read-only property."},{"content":"A shared speech recognizer's state cannot be changed programmatically.","pos":[397,467]},{"content":"Users can change a shared speech recognizer's state using the Speech Recognition user interface (UI) or through the <bpt id=\"p1\">**</bpt>Speech Recognition<ept id=\"p1\">**</ept> member of the Windows <bpt id=\"p2\">**</bpt>Control Panel<ept id=\"p2\">**</ept>.","pos":[468,647],"source":" Users can change a shared speech recognizer's state using the Speech Recognition user interface (UI) or through the **Speech Recognition** member of the Windows **Control Panel**."},{"content":"Both the <bpt id=\"p1\">**</bpt>On<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Sleep<ept id=\"p2\">**</ept> settings in the Speech Recognition UI correspond to the <ph id=\"ph1\">`Listening`</ph> state.","pos":[654,758],"source":"       Both the **On** and **Sleep** settings in the Speech Recognition UI correspond to the `Listening` state."},{"content":"The <bpt id=\"p1\">**</bpt>Off<ept id=\"p1\">**</ept> setting in the Speech Recognition UI corresponds to &lt;xref:System.Speech.Recognition.RecognizerState&gt;.","pos":[759,872],"source":" The **Off** setting in the Speech Recognition UI corresponds to <xref:System.Speech.Recognition.RecognizerState>."}]},{"pos":[5873,5947],"content":"Gets the current state of the shared speech recognition engine in Windows.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current state of the shared speech recognition engine in Windows.","pos":[0,74]}]},{"pos":[6946,7235],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.RecognizerState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that indicates whether the state of a shared speech recognition engine is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Listening\" name=\"Listening\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Stopped\" name=\"Stopped\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Speech.Recognition.RecognizerState\"></xref> instance that indicates whether the state of a shared speech recognition engine is <xref uid=\"langword_csharp_Listening\" name=\"Listening\" href=\"\"></xref> or <xref uid=\"langword_csharp_Stopped\" name=\"Stopped\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Recognition.StateChangedEventArgs\n  id: StateChangedEventArgs\n  children:\n  - System.Speech.Recognition.StateChangedEventArgs.RecognizerState\n  langs:\n  - csharp\n  name: StateChangedEventArgs\n  nameWithType: StateChangedEventArgs\n  fullName: System.Speech.Recognition.StateChangedEventArgs\n  type: Class\n  summary: Returns data from the <xref href=\"System.Speech.Recognition.SpeechRecognizer.StateChanged\"></xref> event.\n  remarks: \"The <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event is raised by the <xref:System.Speech.Recognition.SpeechRecognizer> class. StateChangedEventArgs derives from <xref:System.EventArgs> and is passed to handlers for <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> events.  \\n  \\n <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> is a read-only property. A shared speech recognizer's state cannot be changed programmatically. Users can change a shared speech recognizer's state using the Speech Recognition user interface (UI) or through the **Speech Recognition** member of the Windows **Control Panel**.  \\n  \\n Both the **On** and **Sleep** settings in the Speech Recognition UI correspond to the `Listening` state. The **Off** setting in the Speech Recognition UI corresponds to <xref:System.Speech.Recognition.RecognizerState>.\"\n  example:\n  - \"The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation. The example asynchronously loads all the created grammars to the recognizer.  A handler for the <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event uses the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method to put Windows Recognition in \\\"listening\\\" mode.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    private static SpeechRecognizer recognizer;  \\n    public static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a shared speech recognition engine.  \\n      recognizer = new SpeechRecognizer();  \\n  \\n      // Add a handler for the LoadGrammarCompleted event.  \\n      recognizer.LoadGrammarCompleted += new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \\n  \\n      // Add a handler for the SpeechRecognized event.  \\n      recognizer.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n  \\n      // Add a handler for the StateChanged event.  \\n      recognizer.StateChanged += new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  \\n  \\n      // Create \\\"yesno\\\" grammar.  \\n      Choices yesChoices = new Choices(new string[] { \\\"yes\\\", \\\"yup\\\", \\\"yah}\\\" });  \\n      SemanticResultValue yesValue =  \\n          new SemanticResultValue(yesChoices, (bool)true);  \\n      Choices noChoices = new Choices(new string[] { \\\"no\\\", \\\"nope\\\", \\\"nah\\\" });  \\n      SemanticResultValue noValue = new SemanticResultValue(noChoices, (bool)false);  \\n      SemanticResultKey yesNoKey =  \\n          new SemanticResultKey(\\\"yesno\\\", new Choices(new GrammarBuilder[] { yesValue, noValue }));  \\n      Grammar yesnoGrammar = new Grammar(yesNoKey);  \\n      yesnoGrammar.Name = \\\"yesNo\\\";  \\n  \\n      // Create \\\"done\\\" grammar.  \\n      Grammar doneGrammar =  \\n        new Grammar(new Choices(new string[] { \\\"done\\\", \\\"exit\\\", \\\"quit\\\", \\\"stop\\\" }));  \\n      doneGrammar.Name = \\\"Done\\\";  \\n  \\n      // Create dictation grammar.  \\n      Grammar dictation = new DictationGrammar();  \\n      dictation.Name = \\\"Dictation\\\";  \\n  \\n      // Load grammars to the recognizer.  \\n      recognizer.LoadGrammarAsync(yesnoGrammar);  \\n      recognizer.LoadGrammarAsync(doneGrammar);  \\n      recognizer.LoadGrammarAsync(dictation);  \\n  \\n      // Keep the console window open.  \\n      Console.ReadLine();  \\n    }  \\n  \\n    // Put the shared speech recognizer into \\\"listening\\\" mode.  \\n    static void  recognizer_StateChanged(object sender, StateChangedEventArgs e)  \\n    {  \\n     if (e.RecognizerState != RecognizerState.Stopped)  \\n      {  \\n        recognizer.EmulateRecognizeAsync(\\\"Start listening\\\");  \\n      }  \\n    }  \\n  \\n    // Write the grammar name and the text of the recognized phrase to the console.  \\n    static void  recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n     Console.WriteLine(\\\"Grammar({0}): {1}\\\", e.Result.Grammar.Name, e.Result.Text);  \\n  \\n      // Add event handler code here.  \\n    }  \\n  \\n    // Handle the LoadGrammarCompleted event.  \\n    static void  recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \\n    {  \\n     string grammarName = e.Grammar.Name;  \\n      bool grammarLoaded = e.Grammar.Loaded;  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(\\\"LoadGrammar for {0} failed with a {1}.\\\",  \\n        grammarName, e.Error.GetType().Name);  \\n      }  \\n  \\n      // Add exception handling code here.  \\n      Console.WriteLine(\\\"Grammar {0} {1} loaded.\\\",  \\n      grammarName, (grammarLoaded) ? \\\"is\\\" : \\\"is not\\\");  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: 'public class StateChangedEventArgs : EventArgs'\n  inheritance:\n  - System.EventArgs\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.StateChangedEventArgs.RecognizerState\n  id: RecognizerState\n  parent: System.Speech.Recognition.StateChangedEventArgs\n  langs:\n  - csharp\n  name: RecognizerState\n  nameWithType: StateChangedEventArgs.RecognizerState\n  fullName: System.Speech.Recognition.StateChangedEventArgs.RecognizerState\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the current state of the shared speech recognition engine in Windows.\n  remarks: ''\n  example:\n  - \"The following example updates a display based on the state information provided by a <xref:System.Speech.Recognition.RecognizerState> instance that is obtained from the RecognizerState property of a <xref:System.Speech.Recognition.StateChangedEventArgs> instance passed to a handler for a <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event.  \\n  \\n```  \\n  \\n// Make sure that _recognizer and recognition start buttons are disabled if state is stopped.  \\n// Re-enable the start button to allow manual re-enable if the speech recognizer is listening.  \\n_recognizer.StateChanged +=  \\n  delegate(object sender, StateChangedEventArgs eventArgs)   \\n{  \\n  _recognizerStateLabel.Text = \\\"Speech Recognizer State: \\\" + eventArgs.RecognizerState.ToString();  \\n};  \\n```\"\n  syntax:\n    content: public System.Speech.Recognition.RecognizerState RecognizerState { get; }\n    return:\n      type: System.Speech.Recognition.RecognizerState\n      description: A <xref href=\"System.Speech.Recognition.RecognizerState\"></xref> instance that indicates whether the state of a shared speech recognition engine is <xref uid=\"langword_csharp_Listening\" name=\"Listening\" href=\"\"></xref> or <xref uid=\"langword_csharp_Stopped\" name=\"Stopped\" href=\"\"></xref>.\n  overload: System.Speech.Recognition.StateChangedEventArgs.RecognizerState*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.EventArgs\n  isExternal: false\n  name: System.EventArgs\n- uid: System.Speech.Recognition.StateChangedEventArgs.RecognizerState\n  parent: System.Speech.Recognition.StateChangedEventArgs\n  isExternal: false\n  name: RecognizerState\n  nameWithType: StateChangedEventArgs.RecognizerState\n  fullName: System.Speech.Recognition.StateChangedEventArgs.RecognizerState\n- uid: System.Speech.Recognition.RecognizerState\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: RecognizerState\n  nameWithType: RecognizerState\n  fullName: System.Speech.Recognition.RecognizerState\n- uid: System.Speech.Recognition.StateChangedEventArgs.RecognizerState*\n  parent: System.Speech.Recognition.StateChangedEventArgs\n  isExternal: false\n  name: RecognizerState\n  nameWithType: StateChangedEventArgs.RecognizerState\n"}