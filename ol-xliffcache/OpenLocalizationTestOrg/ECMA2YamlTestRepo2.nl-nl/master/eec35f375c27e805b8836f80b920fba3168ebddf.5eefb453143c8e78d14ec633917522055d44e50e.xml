{"nodes":[{"pos":[577,670],"content":"Contains text and speech attribute information for consumption by a speech synthsizer engine.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains text and speech attribute information for consumption by a speech synthsizer engine.","pos":[0,93]}]},{"pos":[683,1360],"content":"The Speech platform infrastructure unpacks the XML based structure of the SSML input and constructs TextFragment objects.       Speech content is available through the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, and <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> properties of a TextFragment instance.       Speech attribute information, such as emphasis, pitch, and rate, are obtained from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> object returned by the TextFragment<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Speech platform infrastructure unpacks the XML based structure of the SSML input and constructs TextFragment objects.       Speech content is available through the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, and <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> properties of a TextFragment instance.       Speech attribute information, such as emphasis, pitch, and rate, are obtained from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> object returned by the TextFragment<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property.","pos":[0,673],"nodes":[{"content":"The Speech platform infrastructure unpacks the XML based structure of the SSML input and constructs TextFragment objects.","pos":[0,121]},{"content":"Speech content is available through the &lt;xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A&gt;, &lt;xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A&gt;, and &lt;xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A&gt; properties of a TextFragment instance.","pos":[128,417],"source":"       Speech content is available through the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, and <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> properties of a TextFragment instance."},{"content":"Speech attribute information, such as emphasis, pitch, and rate, are obtained from the &lt;xref:System.Speech.Synthesis.TtsEngine.FragmentState&gt; object returned by the TextFragment&lt;xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A&gt; property.","pos":[424,673],"source":"       Speech attribute information, such as emphasis, pitch, and rate, are obtained from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> object returned by the TextFragment<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property."}]}]},{"pos":[5682,5788],"content":"Constructs a new instance of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TextFragment\" name=\"TextFragment\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Constructs a new instance of <xref uid=\"langword_csharp_TextFragment\" name=\"TextFragment\" href=\"\"></xref>."},{"pos":[5800,5878],"content":"Default constructor for <xref:System.Speech.Synthesis.TtsEngine.TextFragment>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Default constructor for &lt;xref:System.Speech.Synthesis.TtsEngine.TextFragment&gt;.","pos":[0,78],"source":"Default constructor for <xref:System.Speech.Synthesis.TtsEngine.TextFragment>."}]},{"pos":[6421,6546],"content":"Gets or sets speech attribute information for a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TextFragment\" name=\"TextFragment\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets speech attribute information for a <xref uid=\"langword_csharp_TextFragment\" name=\"TextFragment\" href=\"\"></xref>."},{"pos":[6559,6902],"content":"The default value of this property is `null`.       Prosody information can be obtained from the instance of <xref:System.Speech.Synthesis.TtsEngine.Prosody> returned by the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A> property on the instance of <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by State.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default value of this property is <ph id=\"ph1\">`null`</ph>.","pos":[0,45],"source":"The default value of this property is `null`."},{"content":"Prosody information can be obtained from the instance of &lt;xref:System.Speech.Synthesis.TtsEngine.Prosody&gt; returned by the &lt;xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A&gt; property on the instance of &lt;xref:System.Speech.Synthesis.TtsEngine.FragmentState&gt; returned by State.","pos":[52,341],"source":"       Prosody information can be obtained from the instance of <xref:System.Speech.Synthesis.TtsEngine.Prosody> returned by the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A> property on the instance of <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by State."}]},{"pos":[7093,7304],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.FragmentState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance is returned, or used to set speech attribute information for a <bpt id=\"p2\">&lt;xref href=\"System.Speech.Synthesis.TtsEngine.TextFragment\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Speech.Synthesis.TtsEngine.FragmentState\"></xref> instance is returned, or used to set speech attribute information for a <xref href=\"System.Speech.Synthesis.TtsEngine.TextFragment\"></xref>."},{"pos":[7806,7865],"content":"Gets or sets the length of the speech text in the fragment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the length of the speech text in the fragment.","pos":[0,59]}]},{"pos":[7877,7917],"content":"The default value of this property is 0.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default value of this property is 0.","pos":[0,40]}]},{"pos":[12036,12220],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_int\" name=\"int\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is returned or can be used to set the length, in character, of the text string associated with this fragment to be spoken.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_int\" name=\"int\" href=\"\"></xref> is returned or can be used to set the length, in character, of the text string associated with this fragment to be spoken."},{"pos":[12727,12790],"content":"Gets or sets the starting location of the text in the fragment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the starting location of the text in the fragment.","pos":[0,63]}]},{"pos":[12802,12842],"content":"The default value of this property is 0.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default value of this property is 0.","pos":[0,40]}]},{"pos":[16961,17161],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_int\" name=\"int\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is returned or can be used to set the start location, in character, of the part of text string associated with this fragment to be spoken.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_int\" name=\"int\" href=\"\"></xref> is returned or can be used to set the start location, in character, of the part of text string associated with this fragment to be spoken."},{"pos":[17673,17718],"content":"Sets or gets the speech text of the fragment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets or gets the speech text of the fragment.","pos":[0,45]}]},{"pos":[17731,18081],"content":"The default value of this property is `System.String.Empty`.       Applications are free to completely change the value of TextToSpeak.       Resetting the value of TextToSpeak will not change the value of <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> and <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default value of this property is <ph id=\"ph1\">`System.String.Empty`</ph>.","pos":[0,60],"source":"The default value of this property is `System.String.Empty`."},{"content":"Applications are free to completely change the value of TextToSpeak.","pos":[67,135]},{"content":"Resetting the value of TextToSpeak will not change the value of &lt;xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A&gt; and &lt;xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A&gt;.","pos":[142,346],"source":"       Resetting the value of TextToSpeak will not change the value of <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> and <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>."}]},{"pos":[22206,22402],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_System.String\" name=\"System.String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is returned or can be used to set the speech text to be used by a speech synthesis engine to generate audio output.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_System.String\" name=\"System.String\" href=\"\"></xref> is returned or can be used to set the speech text to be used by a speech synthesis engine to generate audio output."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment\n  id: TextFragment\n  children:\n  - System.Speech.Synthesis.TtsEngine.TextFragment.#ctor\n  - System.Speech.Synthesis.TtsEngine.TextFragment.State\n  - System.Speech.Synthesis.TtsEngine.TextFragment.TextLength\n  - System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset\n  - System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak\n  langs:\n  - csharp\n  name: TextFragment\n  nameWithType: TextFragment\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment\n  type: Class\n  summary: Contains text and speech attribute information for consumption by a speech synthsizer engine.\n  remarks: \"The Speech platform infrastructure unpacks the XML based structure of the SSML input and constructs TextFragment objects.  \\n  \\n Speech content is available through the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, and <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> properties of a TextFragment instance.  \\n  \\n Speech attribute information, such as emphasis, pitch, and rate, are obtained from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> object returned by the TextFragment<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property.\"\n  example:\n  - \"The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of TextFragment, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \\n  \\n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \\n  \\n1.  Receives an array of TextFragment instances and creates a new array of TextFragment instances to be passed to the `Speak` method on an underlying synthesis engine.  \\n  \\n     Particular care is used to respect the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> on the original TextFragment when creating the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> on the new TextFragment instances.  \\n  \\n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each TextFragment instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \\n  \\n    -   Translates Americanism to Britishisms in the text to be spoken.  \\n  \\n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \\n  \\n3.  A speech rendering engine is then called with the modified TextFragment array.  \\n  \\n```  \\nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \\nprivate readonly char[] spaces = new char[] { ' ', '\\\\t', '\\\\r', '\\\\n' };  \\ninternal struct UsVsUk  \\n{  \\n  internal string UK;  \\n  internal string US;  \\n}  \\n  \\noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \\n{  \\n  TextFragment [] newFrags=new TextFragment[frags.Length];  \\n  \\n  for (int i=0;i<frags.Length;i++){  \\n    newFrags[i].State=frags[i].State;  \\n    //truncate  \\n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \\n                               frags[i].TextLength);  \\n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \\n    newFrags[i].TextOffset = 0;  \\n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \\n      //Us to UK conversion  \\n      foreach (UsVsUk term in TransList) {  \\n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \\n      }  \\n      //Generate progress meter events if supported  \\n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \\n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \\n  \\n      foreach (string s in subs) {  \\n        int offset = newFrags[i].TextOffset;  \\n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \\n                (Int16)EventParameterType.Undefined,   \\n                 s.Length, new IntPtr(offset));  \\n        offset += s.Length;  \\n        if (s.Trim().Length > 0) {  \\n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \\n          events[0] = spEvent;  \\n          site.AddEvents(events, 1);  \\n        }  \\n      }  \\n      }  \\n    }  \\n  }  \\n  \\n  _baseSynthesize.Speak(newFrags, wfx, site);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public class TextFragment\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor\n  id: '#ctor'\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  langs:\n  - csharp\n  name: TextFragment()\n  nameWithType: TextFragment.TextFragment()\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextFragment()\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Constructs a new instance of <xref uid=\"langword_csharp_TextFragment\" name=\"TextFragment\" href=\"\"></xref>.\n  remarks: Default constructor for <xref:System.Speech.Synthesis.TtsEngine.TextFragment>.\n  syntax:\n    content: public TextFragment ();\n    parameters: []\n  overload: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.State\n  id: State\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  langs:\n  - csharp\n  name: State\n  nameWithType: TextFragment.State\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.State\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Gets or sets speech attribute information for a <xref uid=\"langword_csharp_TextFragment\" name=\"TextFragment\" href=\"\"></xref>.\n  remarks: \"The default value of this property is `null`.  \\n  \\n Prosody information can be obtained from the instance of <xref:System.Speech.Synthesis.TtsEngine.Prosody> returned by the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A> property on the instance of <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by State.\"\n  syntax:\n    content: public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }\n    return:\n      type: System.Speech.Synthesis.TtsEngine.FragmentState\n      description: A <xref href=\"System.Speech.Synthesis.TtsEngine.FragmentState\"></xref> instance is returned, or used to set speech attribute information for a <xref href=\"System.Speech.Synthesis.TtsEngine.TextFragment\"></xref>.\n  overload: System.Speech.Synthesis.TtsEngine.TextFragment.State*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength\n  id: TextLength\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  langs:\n  - csharp\n  name: TextLength\n  nameWithType: TextFragment.TextLength\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Gets or sets the length of the speech text in the fragment.\n  remarks: The default value of this property is 0.\n  example:\n  - \"The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \\n  \\n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \\n  \\n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \\n  \\n     Particular care is used to respect the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, TextLength on the original <xref:System.Speech.Synthesis.TtsEngine.TextFragment> when creating the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> on the new <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  \\n  \\n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \\n  \\n    -   Translates Americanism to Britishisms in the text to be spoken.  \\n  \\n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \\n  \\n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \\n  \\n```  \\nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \\nprivate readonly char[] spaces = new char[] { ' ', '\\\\t', '\\\\r', '\\\\n' };  \\ninternal struct UsVsUk  \\n{  \\n  internal string UK;  \\n  internal string US;  \\n}  \\n  \\noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \\n{  \\n  TextFragment [] newFrags=new TextFragment[frags.Length];  \\n  \\n  for (int i=0;i<frags.Length;i++){  \\n    newFrags[i].State=frags[i].State;  \\n    //truncate  \\n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \\n                               frags[i].TextLength);  \\n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \\n    newFrags[i].TextOffset = 0;  \\n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \\n      //Us to UK conversion  \\n      foreach (UsVsUk term in TransList) {  \\n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \\n      }  \\n      //Generate progress meter events if supported  \\n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \\n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \\n  \\n      foreach (string s in subs) {  \\n        int offset = newFrags[i].TextOffset;  \\n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \\n                (Int16)EventParameterType.Undefined,   \\n                 s.Length, new IntPtr(offset));  \\n        offset += s.Length;  \\n        if (s.Trim().Length > 0) {  \\n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \\n          events[0] = spEvent;  \\n          site.AddEvents(events, 1);  \\n        }  \\n      }  \\n      }  \\n    }  \\n  }  \\n  \\n  _baseSynthesize.Speak(newFrags, wfx, site);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public int TextLength { get; set; }\n    return:\n      type: System.Int32\n      description: An <xref uid=\"langword_csharp_int\" name=\"int\" href=\"\"></xref> is returned or can be used to set the length, in character, of the text string associated with this fragment to be spoken.\n  overload: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset\n  id: TextOffset\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  langs:\n  - csharp\n  name: TextOffset\n  nameWithType: TextFragment.TextOffset\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Gets or sets the starting location of the text in the fragment.\n  remarks: The default value of this property is 0.\n  example:\n  - \"The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \\n  \\n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \\n  \\n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \\n  \\n     Particular care is used to respect the TextOffset, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> on the original <xref:System.Speech.Synthesis.TtsEngine.TextFragment> when creating the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> on the new <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  \\n  \\n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \\n  \\n    -   Translates Americanism to Britishisms in the text to be spoken.  \\n  \\n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \\n  \\n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \\n  \\n```  \\nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \\nprivate readonly char[] spaces = new char[] { ' ', '\\\\t', '\\\\r', '\\\\n' };  \\ninternal struct UsVsUk  \\n{  \\n  internal string UK;  \\n  internal string US;  \\n}  \\n  \\noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \\n{  \\n  TextFragment [] newFrags=new TextFragment[frags.Length];  \\n  \\n  for (int i=0;i<frags.Length;i++){  \\n    newFrags[i].State=frags[i].State;  \\n    //truncate  \\n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \\n                               frags[i].TextLength);  \\n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \\n    newFrags[i].TextOffset = 0;  \\n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \\n      //Us to UK conversion  \\n      foreach (UsVsUk term in TransList) {  \\n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \\n      }  \\n      //Generate progress meter events if supported  \\n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \\n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \\n  \\n      foreach (string s in subs) {  \\n        int offset = newFrags[i].TextOffset;  \\n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \\n                (Int16)EventParameterType.Undefined,   \\n                 s.Length, new IntPtr(offset));  \\n        offset += s.Length;  \\n        if (s.Trim().Length > 0) {  \\n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \\n          events[0] = spEvent;  \\n          site.AddEvents(events, 1);  \\n        }  \\n      }  \\n      }  \\n    }  \\n  }  \\n  \\n  _baseSynthesize.Speak(newFrags, wfx, site);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public int TextOffset { get; set; }\n    return:\n      type: System.Int32\n      description: An <xref uid=\"langword_csharp_int\" name=\"int\" href=\"\"></xref> is returned or can be used to set the start location, in character, of the part of text string associated with this fragment to be spoken.\n  overload: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak\n  id: TextToSpeak\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  langs:\n  - csharp\n  name: TextToSpeak\n  nameWithType: TextFragment.TextToSpeak\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis.TtsEngine\n  summary: Sets or gets the speech text of the fragment.\n  remarks: \"The default value of this property is `System.String.Empty`.  \\n  \\n Applications are free to completely change the value of TextToSpeak.  \\n  \\n Resetting the value of TextToSpeak will not change the value of <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> and <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>.\"\n  example:\n  - \"The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \\n  \\n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \\n  \\n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \\n  \\n     Particular care is used to respect the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> on the original <xref:System.Speech.Synthesis.TtsEngine.TextFragment> when creating the TextToSpeak on the new <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  \\n  \\n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \\n  \\n    -   Translates Americanism to Britishisms in the text to be spoken.  \\n  \\n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \\n  \\n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \\n  \\n```  \\nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \\nprivate readonly char[] spaces = new char[] { ' ', '\\\\t', '\\\\r', '\\\\n' };  \\ninternal struct UsVsUk  \\n{  \\n  internal string UK;  \\n  internal string US;  \\n}  \\n  \\noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \\n{  \\n  TextFragment [] newFrags=new TextFragment[frags.Length];  \\n  \\n  for (int i=0;i<frags.Length;i++){  \\n    newFrags[i].State=frags[i].State;  \\n    //truncate  \\n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \\n                               frags[i].TextLength);  \\n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \\n    newFrags[i].TextOffset = 0;  \\n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \\n      //Us to UK conversion  \\n      foreach (UsVsUk term in TransList) {  \\n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \\n      }  \\n      //Generate progress meter events if supported  \\n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \\n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \\n  \\n      foreach (string s in subs) {  \\n        int offset = newFrags[i].TextOffset;  \\n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \\n                (Int16)EventParameterType.Undefined,   \\n                 s.Length, new IntPtr(offset));  \\n        offset += s.Length;  \\n        if (s.Trim().Length > 0) {  \\n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \\n          events[0] = spEvent;  \\n          site.AddEvents(events, 1);  \\n        }  \\n      }  \\n      }  \\n    }  \\n  }  \\n  \\n  _baseSynthesize.Speak(newFrags, wfx, site);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public string TextToSpeak { get; set; }\n    return:\n      type: System.String\n      description: A <xref uid=\"langword_csharp_System.String\" name=\"System.String\" href=\"\"></xref> is returned or can be used to set the speech text to be used by a speech synthesis engine to generate audio output.\n  overload: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  isExternal: false\n  name: TextFragment()\n  nameWithType: TextFragment.TextFragment()\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextFragment()\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.State\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  isExternal: false\n  name: State\n  nameWithType: TextFragment.State\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.State\n- uid: System.Speech.Synthesis.TtsEngine.FragmentState\n  parent: System.Speech.Synthesis.TtsEngine\n  isExternal: false\n  name: FragmentState\n  nameWithType: FragmentState\n  fullName: System.Speech.Synthesis.TtsEngine.FragmentState\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  isExternal: false\n  name: TextLength\n  nameWithType: TextFragment.TextLength\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  isExternal: false\n  name: TextOffset\n  nameWithType: TextFragment.TextOffset\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  isExternal: false\n  name: TextToSpeak\n  nameWithType: TextFragment.TextToSpeak\n  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor*\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  isExternal: false\n  name: TextFragment\n  nameWithType: TextFragment.TextFragment\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.State*\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  isExternal: false\n  name: State\n  nameWithType: TextFragment.State\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength*\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  isExternal: false\n  name: TextLength\n  nameWithType: TextFragment.TextLength\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset*\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  isExternal: false\n  name: TextOffset\n  nameWithType: TextFragment.TextOffset\n- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak*\n  parent: System.Speech.Synthesis.TtsEngine.TextFragment\n  isExternal: false\n  name: TextToSpeak\n  nameWithType: TextFragment.TextToSpeak\n"}