{"nodes":[{"pos":[1100,1112],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[1637,1649],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2724,2736],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2795,2807],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3382,3394],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4119,4131],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4752,4764],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5389,5401],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5447,5459],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6033,6045],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6102,6114],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6750,6762],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6811,6823],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7391,7403],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7462,7474],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8101,8113],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8756,8768],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8817,8829],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.AddIn.Contract.IListContract`1\n  id: IListContract`1\n  children:\n  - System.AddIn.Contract.IListContract`1.Add(`0)\n  - System.AddIn.Contract.IListContract`1.Clear\n  - System.AddIn.Contract.IListContract`1.Contains(`0)\n  - System.AddIn.Contract.IListContract`1.GetCount\n  - System.AddIn.Contract.IListContract`1.GetEnumeratorContract\n  - System.AddIn.Contract.IListContract`1.GetIsReadOnly\n  - System.AddIn.Contract.IListContract`1.GetItem(System.Int32)\n  - System.AddIn.Contract.IListContract`1.IndexOf(`0)\n  - System.AddIn.Contract.IListContract`1.Insert(System.Int32,`0)\n  - System.AddIn.Contract.IListContract`1.Remove(`0)\n  - System.AddIn.Contract.IListContract`1.RemoveAt(System.Int32)\n  - System.AddIn.Contract.IListContract`1.SetItem(System.Int32,`0)\n  langs:\n  - csharp\n  name: IListContract<T>\n  nameWithType: IListContract<T>\n  fullName: System.AddIn.Contract.IListContract<T>\n  type: Interface\n  syntax:\n    content: 'public interface IListContract<T> : System.AddIn.Contract.IContract'\n    typeParameters:\n    - id: T\n      description: To be added.\n  implements:\n  - System.AddIn.Contract.IContract\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.Add(`0)\n  id: Add(`0)\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: Add(T)\n  nameWithType: IListContract<T>.Add(T)\n  fullName: System.AddIn.Contract.IListContract<T>.Add(T)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public void Add (T item);\n    parameters:\n    - id: item\n      type: T\n      description: To be added.\n  overload: System.AddIn.Contract.IListContract`1.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.Clear\n  id: Clear\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: IListContract<T>.Clear()\n  fullName: System.AddIn.Contract.IListContract<T>.Clear()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.AddIn.Contract.IListContract`1.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: Contains(T)\n  nameWithType: IListContract<T>.Contains(T)\n  fullName: System.AddIn.Contract.IListContract<T>.Contains(T)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public bool Contains (T item);\n    parameters:\n    - id: item\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.AddIn.Contract.IListContract`1.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.GetCount\n  id: GetCount\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: GetCount()\n  nameWithType: IListContract<T>.GetCount()\n  fullName: System.AddIn.Contract.IListContract<T>.GetCount()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public int GetCount ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.AddIn.Contract.IListContract`1.GetCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.GetEnumeratorContract\n  id: GetEnumeratorContract\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: GetEnumeratorContract()\n  nameWithType: IListContract<T>.GetEnumeratorContract()\n  fullName: System.AddIn.Contract.IListContract<T>.GetEnumeratorContract()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public System.AddIn.Contract.IEnumeratorContract<T> GetEnumeratorContract ();\n    parameters: []\n    return:\n      type: System.AddIn.Contract.IEnumeratorContract`1\n      description: To be added.\n  overload: System.AddIn.Contract.IListContract`1.GetEnumeratorContract*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.GetIsReadOnly\n  id: GetIsReadOnly\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: GetIsReadOnly()\n  nameWithType: IListContract<T>.GetIsReadOnly()\n  fullName: System.AddIn.Contract.IListContract<T>.GetIsReadOnly()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public bool GetIsReadOnly ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.AddIn.Contract.IListContract`1.GetIsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.GetItem(System.Int32)\n  id: GetItem(System.Int32)\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: GetItem(Int32)\n  nameWithType: IListContract<T>.GetItem(Int32)\n  fullName: System.AddIn.Contract.IListContract<T>.GetItem(Int32)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public T GetItem (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: T\n      description: To be added.\n  overload: System.AddIn.Contract.IListContract`1.GetItem*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.IndexOf(`0)\n  id: IndexOf(`0)\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: IndexOf(T)\n  nameWithType: IListContract<T>.IndexOf(T)\n  fullName: System.AddIn.Contract.IListContract<T>.IndexOf(T)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public int IndexOf (T item);\n    parameters:\n    - id: item\n      type: T\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.AddIn.Contract.IListContract`1.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.Insert(System.Int32,`0)\n  id: Insert(System.Int32,`0)\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: Insert(Int32,T)\n  nameWithType: IListContract<T>.Insert(Int32,T)\n  fullName: System.AddIn.Contract.IListContract<T>.Insert(Int32,T)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public void Insert (int index, T item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: item\n      type: T\n      description: To be added.\n  overload: System.AddIn.Contract.IListContract`1.Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.Remove(`0)\n  id: Remove(`0)\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: Remove(T)\n  nameWithType: IListContract<T>.Remove(T)\n  fullName: System.AddIn.Contract.IListContract<T>.Remove(T)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public bool Remove (T item);\n    parameters:\n    - id: item\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.AddIn.Contract.IListContract`1.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: IListContract<T>.RemoveAt(Int32)\n  fullName: System.AddIn.Contract.IListContract<T>.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.AddIn.Contract.IListContract`1.RemoveAt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.IListContract`1.SetItem(System.Int32,`0)\n  id: SetItem(System.Int32,`0)\n  parent: System.AddIn.Contract.IListContract`1\n  langs:\n  - csharp\n  name: SetItem(Int32,T)\n  nameWithType: IListContract<T>.SetItem(Int32,T)\n  fullName: System.AddIn.Contract.IListContract<T>.SetItem(Int32,T)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract\n  syntax:\n    content: public void SetItem (int index, T item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: item\n      type: T\n      description: To be added.\n  overload: System.AddIn.Contract.IListContract`1.SetItem*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.AddIn.Contract.IListContract`1.Add(`0)\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: Add(T)\n  nameWithType: IListContract<T>.Add(T)\n  fullName: System.AddIn.Contract.IListContract<T>.Add(T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.AddIn.Contract.IListContract`1.Clear\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: Clear()\n  nameWithType: IListContract<T>.Clear()\n  fullName: System.AddIn.Contract.IListContract<T>.Clear()\n- uid: System.AddIn.Contract.IListContract`1.Contains(`0)\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: Contains(T)\n  nameWithType: IListContract<T>.Contains(T)\n  fullName: System.AddIn.Contract.IListContract<T>.Contains(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.AddIn.Contract.IListContract`1.GetCount\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: GetCount()\n  nameWithType: IListContract<T>.GetCount()\n  fullName: System.AddIn.Contract.IListContract<T>.GetCount()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.AddIn.Contract.IListContract`1.GetEnumeratorContract\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: GetEnumeratorContract()\n  nameWithType: IListContract<T>.GetEnumeratorContract()\n  fullName: System.AddIn.Contract.IListContract<T>.GetEnumeratorContract()\n- uid: System.AddIn.Contract.IEnumeratorContract`1\n  parent: System.AddIn.Contract\n  isExternal: false\n  name: IEnumeratorContract<T>\n  nameWithType: IEnumeratorContract<T>\n  fullName: System.AddIn.Contract.IEnumeratorContract<T>\n- uid: System.AddIn.Contract.IListContract`1.GetIsReadOnly\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: GetIsReadOnly()\n  nameWithType: IListContract<T>.GetIsReadOnly()\n  fullName: System.AddIn.Contract.IListContract<T>.GetIsReadOnly()\n- uid: System.AddIn.Contract.IListContract`1.GetItem(System.Int32)\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: GetItem(Int32)\n  nameWithType: IListContract<T>.GetItem(Int32)\n  fullName: System.AddIn.Contract.IListContract<T>.GetItem(Int32)\n- uid: System.AddIn.Contract.IListContract`1.IndexOf(`0)\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: IndexOf(T)\n  nameWithType: IListContract<T>.IndexOf(T)\n  fullName: System.AddIn.Contract.IListContract<T>.IndexOf(T)\n- uid: System.AddIn.Contract.IListContract`1.Insert(System.Int32,`0)\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: Insert(Int32,T)\n  nameWithType: IListContract<T>.Insert(Int32,T)\n  fullName: System.AddIn.Contract.IListContract<T>.Insert(Int32,T)\n- uid: System.AddIn.Contract.IListContract`1.Remove(`0)\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: Remove(T)\n  nameWithType: IListContract<T>.Remove(T)\n  fullName: System.AddIn.Contract.IListContract<T>.Remove(T)\n- uid: System.AddIn.Contract.IListContract`1.RemoveAt(System.Int32)\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: IListContract<T>.RemoveAt(Int32)\n  fullName: System.AddIn.Contract.IListContract<T>.RemoveAt(Int32)\n- uid: System.AddIn.Contract.IListContract`1.SetItem(System.Int32,`0)\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: SetItem(Int32,T)\n  nameWithType: IListContract<T>.SetItem(Int32,T)\n  fullName: System.AddIn.Contract.IListContract<T>.SetItem(Int32,T)\n- uid: System.AddIn.Contract.IListContract`1.Add*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: Add\n  nameWithType: IListContract<T>.Add\n- uid: System.AddIn.Contract.IListContract`1.Clear*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: Clear\n  nameWithType: IListContract<T>.Clear\n- uid: System.AddIn.Contract.IListContract`1.Contains*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: Contains\n  nameWithType: IListContract<T>.Contains\n- uid: System.AddIn.Contract.IListContract`1.GetCount*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: GetCount\n  nameWithType: IListContract<T>.GetCount\n- uid: System.AddIn.Contract.IListContract`1.GetEnumeratorContract*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: GetEnumeratorContract\n  nameWithType: IListContract<T>.GetEnumeratorContract\n- uid: System.AddIn.Contract.IListContract`1.GetIsReadOnly*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: GetIsReadOnly\n  nameWithType: IListContract<T>.GetIsReadOnly\n- uid: System.AddIn.Contract.IListContract`1.GetItem*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: GetItem\n  nameWithType: IListContract<T>.GetItem\n- uid: System.AddIn.Contract.IListContract`1.IndexOf*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: IndexOf\n  nameWithType: IListContract<T>.IndexOf\n- uid: System.AddIn.Contract.IListContract`1.Insert*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: Insert\n  nameWithType: IListContract<T>.Insert\n- uid: System.AddIn.Contract.IListContract`1.Remove*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: Remove\n  nameWithType: IListContract<T>.Remove\n- uid: System.AddIn.Contract.IListContract`1.RemoveAt*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: RemoveAt\n  nameWithType: IListContract<T>.RemoveAt\n- uid: System.AddIn.Contract.IListContract`1.SetItem*\n  parent: System.AddIn.Contract.IListContract`1\n  isExternal: false\n  name: SetItem\n  nameWithType: IListContract<T>.SetItem\n"}