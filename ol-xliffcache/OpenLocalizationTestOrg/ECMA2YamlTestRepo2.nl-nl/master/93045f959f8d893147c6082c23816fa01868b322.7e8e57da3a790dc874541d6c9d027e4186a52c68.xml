{"nodes":[{"pos":[1125,1544],"content":"Provides delayed resolution of security keys by resolving the <xref href=\"System.IdentityModel.Tokens.SecurityKeyIdentifierClause\"></xref> or <xref href=\"System.IdentityModel.Tokens.SecurityKeyIdentifier\"></xref> only when cryptographic functions are needed. This allows a key identifier clause or key identifier that is never used by an application to be serialized and deserialzied on and off the wire without issues.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides delayed resolution of security keys by resolving the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityKeyIdentifierClause\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityKeyIdentifier\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> only when cryptographic functions are needed.","pos":[0,258],"source":"Provides delayed resolution of security keys by resolving the <xref href=\"System.IdentityModel.Tokens.SecurityKeyIdentifierClause\"></xref> or <xref href=\"System.IdentityModel.Tokens.SecurityKeyIdentifier\"></xref> only when cryptographic functions are needed."},{"content":"This allows a key identifier clause or key identifier that is never used by an application to be serialized and deserialzied on and off the wire without issues.","pos":[259,419]}]},{"pos":[2548,2690],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityKeyElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the specified key identifier.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SecurityKeyElement\"></xref> class from the specified key identifier."},{"pos":[3020,3116],"content":"A key identifier that represents a <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A key identifier that represents a <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref>."},{"pos":[3233,3337],"content":"A token resolver that can be resolved to a <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A token resolver that can be resolved to a <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref>."},{"pos":[3520,3619],"content":"<ph id=\"ph1\">&lt;code&gt;securityKeyIdentifier&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>securityKeyIdentifier</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[4437,4586],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityKeyElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the specified key identifier clause.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SecurityKeyElement\"></xref> class from the specified key identifier clause."},{"pos":[4940,5043],"content":"A key identifier clause that represents a <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A key identifier clause that represents a <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref>."},{"pos":[5160,5264],"content":"A token resolver that can be resolved to a <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A token resolver that can be resolved to a <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref>."},{"pos":[5447,5552],"content":"<ph id=\"ph1\">&lt;code&gt;securityKeyIdentifierClause&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>securityKeyIdentifierClause</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6079,6139],"content":"Decrypts the specified key by using the specified algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decrypts the specified key by using the specified algorithm.","pos":[0,60]}]},{"pos":[6314,6354],"content":"The algorithm to use to decrypt the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The algorithm to use to decrypt the key.","pos":[0,40]}]},{"pos":[6418,6459],"content":"An array that contains the encrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the encrypted key.","pos":[0,41]}]},{"pos":[6517,6558],"content":"An array that contains the decrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the decrypted key.","pos":[0,41]}]},{"pos":[7173,7233],"content":"Encrypts the specified key by using the specified algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encrypts the specified key by using the specified algorithm.","pos":[0,60]}]},{"pos":[7408,7448],"content":"The algorithm to use to decrypt the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The algorithm to use to decrypt the key.","pos":[0,40]}]},{"pos":[7512,7554],"content":"An array that contains the key to encrypt.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the key to encrypt.","pos":[0,42]}]},{"pos":[7612,7653],"content":"An array that contains the encrypted key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the encrypted key.","pos":[0,41]}]},{"pos":[8274,8351],"content":"Returns a value that indicates whether the specified algorithm is asymmetric.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether the specified algorithm is asymmetric.","pos":[0,77]}]},{"pos":[8519,8542],"content":"The algorithm to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The algorithm to check.","pos":[0,23]}]},{"pos":[8601,8801],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the algorithm will be processed by the runtime as asymmetric; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the algorithm will be processed by the runtime as asymmetric; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9428,9516],"content":"Returns a value that indicates whether the specified algorithm is supported by this key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether the specified algorithm is supported by this key.","pos":[0,88]}]},{"pos":[9683,9706],"content":"The algorithm to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The algorithm to check.","pos":[0,23]}]},{"pos":[9765,9943],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the algorithm is supported by this key; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the algorithm is supported by this key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10569,10645],"content":"Returns a value that indicates whether the specified algorithm is symmetric.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether the specified algorithm is symmetric.","pos":[0,76]}]},{"pos":[10812,10835],"content":"The algorithm to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The algorithm to check.","pos":[0,23]}]},{"pos":[10894,11093],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the algorithm will be processed by the runtime as symmetric; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the algorithm will be processed by the runtime as symmetric; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11602,11629],"content":"Gets the key size, in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the key size, in bits.","pos":[0,27]}]},{"pos":[11746,11768],"content":"The key size, in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key size, in bits.","pos":[0,22]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.SecurityKeyElement\n  id: SecurityKeyElement\n  children:\n  - System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Selectors.SecurityTokenResolver)\n  - System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Selectors.SecurityTokenResolver)\n  - System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKeyElement.KeySize\n  langs:\n  - csharp\n  name: SecurityKeyElement\n  nameWithType: SecurityKeyElement\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement\n  type: Class\n  summary: Provides delayed resolution of security keys by resolving the <xref href=\"System.IdentityModel.Tokens.SecurityKeyIdentifierClause\"></xref> or <xref href=\"System.IdentityModel.Tokens.SecurityKeyIdentifier\"></xref> only when cryptographic functions are needed. This allows a key identifier clause or key identifier that is never used by an application to be serialized and deserialzied on and off the wire without issues.\n  syntax:\n    content: 'public class SecurityKeyElement : System.IdentityModel.Tokens.SecurityKey'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.SecurityKey\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Selectors.SecurityTokenResolver)\n  id: '#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Selectors.SecurityTokenResolver)'\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  langs:\n  - csharp\n  name: SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)\n  nameWithType: SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SecurityKeyElement\"></xref> class from the specified key identifier.\n  syntax:\n    content: public SecurityKeyElement (System.IdentityModel.Tokens.SecurityKeyIdentifier securityKeyIdentifier, System.IdentityModel.Selectors.SecurityTokenResolver securityTokenResolver);\n    parameters:\n    - id: securityKeyIdentifier\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifier\n      description: A key identifier that represents a <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref>.\n    - id: securityTokenResolver\n      type: System.IdentityModel.Selectors.SecurityTokenResolver\n      description: A token resolver that can be resolved to a <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref>.\n  overload: System.IdentityModel.Tokens.SecurityKeyElement.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>securityKeyIdentifier</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Selectors.SecurityTokenResolver)\n  id: '#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Selectors.SecurityTokenResolver)'\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  langs:\n  - csharp\n  name: SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)\n  nameWithType: SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SecurityKeyElement\"></xref> class from the specified key identifier clause.\n  syntax:\n    content: public SecurityKeyElement (System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause, System.IdentityModel.Selectors.SecurityTokenResolver securityTokenResolver);\n    parameters:\n    - id: securityKeyIdentifierClause\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n      description: A key identifier clause that represents a <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref>.\n    - id: securityTokenResolver\n      type: System.IdentityModel.Selectors.SecurityTokenResolver\n      description: A token resolver that can be resolved to a <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref>.\n  overload: System.IdentityModel.Tokens.SecurityKeyElement.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>securityKeyIdentifierClause</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(System.String,System.Byte[])\n  id: DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  langs:\n  - csharp\n  name: DecryptKey(String,Byte[])\n  nameWithType: SecurityKeyElement.DecryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Decrypts the specified key by using the specified algorithm.\n  syntax:\n    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The algorithm to use to decrypt the key.\n    - id: keyData\n      type: System.Byte[]\n      description: An array that contains the encrypted key.\n    return:\n      type: System.Byte[]\n      description: An array that contains the decrypted key.\n  overload: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(System.String,System.Byte[])\n  id: EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  langs:\n  - csharp\n  name: EncryptKey(String,Byte[])\n  nameWithType: SecurityKeyElement.EncryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(String,Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Encrypts the specified key by using the specified algorithm.\n  syntax:\n    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The algorithm to use to decrypt the key.\n    - id: keyData\n      type: System.Byte[]\n      description: An array that contains the key to encrypt.\n    return:\n      type: System.Byte[]\n      description: An array that contains the encrypted key.\n  overload: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(System.String)\n  id: IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  langs:\n  - csharp\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: SecurityKeyElement.IsAsymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Returns a value that indicates whether the specified algorithm is asymmetric.\n  syntax:\n    content: public override bool IsAsymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The algorithm to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the algorithm will be processed by the runtime as asymmetric; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(System.String)\n  id: IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  langs:\n  - csharp\n  name: IsSupportedAlgorithm(String)\n  nameWithType: SecurityKeyElement.IsSupportedAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Returns a value that indicates whether the specified algorithm is supported by this key.\n  syntax:\n    content: public override bool IsSupportedAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The algorithm to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the algorithm is supported by this key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(System.String)\n  id: IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  langs:\n  - csharp\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: SecurityKeyElement.IsSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Returns a value that indicates whether the specified algorithm is symmetric.\n  syntax:\n    content: public override bool IsSymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The algorithm to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the algorithm will be processed by the runtime as symmetric; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.KeySize\n  id: KeySize\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: SecurityKeyElement.KeySize\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.KeySize\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the key size, in bits.\n  syntax:\n    content: public override int KeySize { get; }\n    return:\n      type: System.Int32\n      description: The key size, in bits.\n  overload: System.IdentityModel.Tokens.SecurityKeyElement.KeySize*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: System.IdentityModel.Tokens.SecurityKey\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Selectors.SecurityTokenResolver)\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)\n  nameWithType: SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifier\n  nameWithType: SecurityKeyIdentifier\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier\n- uid: System.IdentityModel.Selectors.SecurityTokenResolver\n  parent: System.IdentityModel.Selectors\n  isExternal: false\n  name: SecurityTokenResolver\n  nameWithType: SecurityTokenResolver\n  fullName: System.IdentityModel.Selectors.SecurityTokenResolver\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Selectors.SecurityTokenResolver)\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)\n  nameWithType: SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifierClause\n  nameWithType: SecurityKeyIdentifierClause\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: DecryptKey(String,Byte[])\n  nameWithType: SecurityKeyElement.DecryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(String,Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: EncryptKey(String,Byte[])\n  nameWithType: SecurityKeyElement.EncryptKey(String,Byte[])\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(String,Byte[])\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: SecurityKeyElement.IsAsymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: IsSupportedAlgorithm(String)\n  nameWithType: SecurityKeyElement.IsSupportedAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: SecurityKeyElement.IsSymmetricAlgorithm(String)\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.KeySize\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: KeySize\n  nameWithType: SecurityKeyElement.KeySize\n  fullName: System.IdentityModel.Tokens.SecurityKeyElement.KeySize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.#ctor*\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: SecurityKeyElement\n  nameWithType: SecurityKeyElement.SecurityKeyElement\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey*\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: DecryptKey\n  nameWithType: SecurityKeyElement.DecryptKey\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey*\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: EncryptKey\n  nameWithType: SecurityKeyElement.EncryptKey\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: IsAsymmetricAlgorithm\n  nameWithType: SecurityKeyElement.IsAsymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm*\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: IsSupportedAlgorithm\n  nameWithType: SecurityKeyElement.IsSupportedAlgorithm\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: IsSymmetricAlgorithm\n  nameWithType: SecurityKeyElement.IsSymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.SecurityKeyElement.KeySize*\n  parent: System.IdentityModel.Tokens.SecurityKeyElement\n  isExternal: false\n  name: KeySize\n  nameWithType: SecurityKeyElement.KeySize\n"}