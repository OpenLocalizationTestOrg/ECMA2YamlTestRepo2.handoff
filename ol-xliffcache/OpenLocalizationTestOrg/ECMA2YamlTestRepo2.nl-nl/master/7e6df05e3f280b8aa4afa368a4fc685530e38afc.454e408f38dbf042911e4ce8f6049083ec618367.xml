{"nodes":[{"pos":[787,859],"content":"Represents the mapping between a context method and a database function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the mapping between a context method and a database function.","pos":[0,72]}]},{"pos":[1383,1482],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.Mapping.MetaFunction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.Linq.Mapping.MetaFunction\"></xref> class."},{"pos":[2051,2118],"content":"Gets whether or not the stored procedure has multiple result types.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets whether or not the stored procedure has multiple result types.","pos":[0,67]}]},{"pos":[2249,2360],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the stored procedure has multiple result types.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the stored procedure has multiple result types."},{"pos":[2843,2900],"content":"Gets whether the function can be composed within a query.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets whether the function can be composed within a query.","pos":[0,57]}]},{"pos":[2912,3022],"content":"A stored procedure cannot be composed within a query. Methods that represent stored procedures return `false`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A stored procedure cannot be composed within a query.","pos":[0,53]},{"content":"Methods that represent stored procedures return <ph id=\"ph1\">`false`</ph>.","pos":[54,110],"source":" Methods that represent stored procedures return `false`."}]},{"pos":[3147,3255],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the function can be composed within a query.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the function can be composed within a query."},{"pos":[3722,3774],"content":"Gets the name of the database function or procedure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the database function or procedure.","pos":[0,52]}]},{"pos":[3898,3967],"content":"A string representing the name of the database function or procedure.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the name of the database function or procedure.","pos":[0,69]}]},{"pos":[4412,4447],"content":"Gets the underlying context method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the underlying context method.","pos":[0,35]}]},{"pos":[4604,4701],"content":"A <xref:System.Reflection.MethodInfo> object that corresponds with the underlying context method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Reflection.MethodInfo&gt; object that corresponds with the underlying context method.","pos":[0,97],"source":"A <xref:System.Reflection.MethodInfo> object that corresponds with the underlying context method."}]},{"pos":[5137,5230],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.Mapping.MetaModel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains this function.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Data.Linq.Mapping.MetaModel\"></xref> that contains this function."},{"pos":[5398,5493],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.Mapping.MetaModel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains this function.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.Linq.Mapping.MetaModel\"></xref> object that contains this function."},{"pos":[5923,5951],"content":"Gets the name of the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the method.","pos":[0,28]}]},{"pos":[5963,6033],"content":"This is the same name as the <xref:System.Reflection.MethodInfo> name.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This is the same name as the &lt;xref:System.Reflection.MethodInfo&gt; name.","pos":[0,70],"source":"This is the same name as the <xref:System.Reflection.MethodInfo> name."}]},{"pos":[6151,6257],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the name of the method.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> that represents the name of the method."},{"pos":[6716,6763],"content":"Gets an enumeration of the function parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an enumeration of the function parameters.","pos":[0,47]}]},{"pos":[7046,7077],"content":"A collection of the parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of the parameters.","pos":[0,31]}]},{"pos":[7562,7612],"content":"Gets the enumeration of possible result row types.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the enumeration of possible result row types.","pos":[0,50]}]},{"pos":[7889,7920],"content":"A collection of possible types.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of possible types.","pos":[0,31]}]},{"pos":[8414,8440],"content":"Gets the return parameter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the return parameter.","pos":[0,26]}]},{"pos":[8626,8731],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.Mapping.MetaParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that corresponds to the return parameter.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.Linq.Mapping.MetaParameter\"></xref> that corresponds to the return parameter."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Linq.Mapping.MetaFunction\n  id: MetaFunction\n  children:\n  - System.Data.Linq.Mapping.MetaFunction.#ctor\n  - System.Data.Linq.Mapping.MetaFunction.HasMultipleResults\n  - System.Data.Linq.Mapping.MetaFunction.IsComposable\n  - System.Data.Linq.Mapping.MetaFunction.MappedName\n  - System.Data.Linq.Mapping.MetaFunction.Method\n  - System.Data.Linq.Mapping.MetaFunction.Model\n  - System.Data.Linq.Mapping.MetaFunction.Name\n  - System.Data.Linq.Mapping.MetaFunction.Parameters\n  - System.Data.Linq.Mapping.MetaFunction.ResultRowTypes\n  - System.Data.Linq.Mapping.MetaFunction.ReturnParameter\n  langs:\n  - csharp\n  name: MetaFunction\n  nameWithType: MetaFunction\n  fullName: System.Data.Linq.Mapping.MetaFunction\n  type: Class\n  summary: Represents the mapping between a context method and a database function.\n  syntax:\n    content: public abstract class MetaFunction\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaFunction.#ctor\n  id: '#ctor'\n  parent: System.Data.Linq.Mapping.MetaFunction\n  langs:\n  - csharp\n  name: MetaFunction()\n  nameWithType: MetaFunction.MetaFunction()\n  fullName: System.Data.Linq.Mapping.MetaFunction.MetaFunction()\n  type: Constructor\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Initializes a new instance of the <xref href=\"System.Data.Linq.Mapping.MetaFunction\"></xref> class.\n  syntax:\n    content: protected MetaFunction ();\n    parameters: []\n  overload: System.Data.Linq.Mapping.MetaFunction.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults\n  id: HasMultipleResults\n  parent: System.Data.Linq.Mapping.MetaFunction\n  langs:\n  - csharp\n  name: HasMultipleResults\n  nameWithType: MetaFunction.HasMultipleResults\n  fullName: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets whether or not the stored procedure has multiple result types.\n  syntax:\n    content: public abstract bool HasMultipleResults { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the stored procedure has multiple result types.\n  overload: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaFunction.IsComposable\n  id: IsComposable\n  parent: System.Data.Linq.Mapping.MetaFunction\n  langs:\n  - csharp\n  name: IsComposable\n  nameWithType: MetaFunction.IsComposable\n  fullName: System.Data.Linq.Mapping.MetaFunction.IsComposable\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets whether the function can be composed within a query.\n  remarks: A stored procedure cannot be composed within a query. Methods that represent stored procedures return `false`.\n  syntax:\n    content: public abstract bool IsComposable { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the function can be composed within a query.\n  overload: System.Data.Linq.Mapping.MetaFunction.IsComposable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaFunction.MappedName\n  id: MappedName\n  parent: System.Data.Linq.Mapping.MetaFunction\n  langs:\n  - csharp\n  name: MappedName\n  nameWithType: MetaFunction.MappedName\n  fullName: System.Data.Linq.Mapping.MetaFunction.MappedName\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets the name of the database function or procedure.\n  syntax:\n    content: public abstract string MappedName { get; }\n    return:\n      type: System.String\n      description: A string representing the name of the database function or procedure.\n  overload: System.Data.Linq.Mapping.MetaFunction.MappedName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaFunction.Method\n  id: Method\n  parent: System.Data.Linq.Mapping.MetaFunction\n  langs:\n  - csharp\n  name: Method\n  nameWithType: MetaFunction.Method\n  fullName: System.Data.Linq.Mapping.MetaFunction.Method\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets the underlying context method.\n  syntax:\n    content: public abstract System.Reflection.MethodInfo Method { get; }\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref:System.Reflection.MethodInfo> object that corresponds with the underlying context method.\n  overload: System.Data.Linq.Mapping.MetaFunction.Method*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaFunction.Model\n  id: Model\n  parent: System.Data.Linq.Mapping.MetaFunction\n  langs:\n  - csharp\n  name: Model\n  nameWithType: MetaFunction.Model\n  fullName: System.Data.Linq.Mapping.MetaFunction.Model\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets the <xref href=\"System.Data.Linq.Mapping.MetaModel\"></xref> that contains this function.\n  syntax:\n    content: public abstract System.Data.Linq.Mapping.MetaModel Model { get; }\n    return:\n      type: System.Data.Linq.Mapping.MetaModel\n      description: The <xref href=\"System.Data.Linq.Mapping.MetaModel\"></xref> object that contains this function.\n  overload: System.Data.Linq.Mapping.MetaFunction.Model*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaFunction.Name\n  id: Name\n  parent: System.Data.Linq.Mapping.MetaFunction\n  langs:\n  - csharp\n  name: Name\n  nameWithType: MetaFunction.Name\n  fullName: System.Data.Linq.Mapping.MetaFunction.Name\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets the name of the method.\n  remarks: This is the same name as the <xref:System.Reflection.MethodInfo> name.\n  syntax:\n    content: public abstract string Name { get; }\n    return:\n      type: System.String\n      description: A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> that represents the name of the method.\n  overload: System.Data.Linq.Mapping.MetaFunction.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaFunction.Parameters\n  id: Parameters\n  parent: System.Data.Linq.Mapping.MetaFunction\n  langs:\n  - csharp\n  name: Parameters\n  nameWithType: MetaFunction.Parameters\n  fullName: System.Data.Linq.Mapping.MetaFunction.Parameters\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets an enumeration of the function parameters.\n  syntax:\n    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaParameter> Parameters { get; }\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaParameter}\n      description: A collection of the parameters.\n  overload: System.Data.Linq.Mapping.MetaFunction.Parameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes\n  id: ResultRowTypes\n  parent: System.Data.Linq.Mapping.MetaFunction\n  langs:\n  - csharp\n  name: ResultRowTypes\n  nameWithType: MetaFunction.ResultRowTypes\n  fullName: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets the enumeration of possible result row types.\n  syntax:\n    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaType> ResultRowTypes { get; }\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaType}\n      description: A collection of possible types.\n  overload: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaFunction.ReturnParameter\n  id: ReturnParameter\n  parent: System.Data.Linq.Mapping.MetaFunction\n  langs:\n  - csharp\n  name: ReturnParameter\n  nameWithType: MetaFunction.ReturnParameter\n  fullName: System.Data.Linq.Mapping.MetaFunction.ReturnParameter\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets the return parameter.\n  syntax:\n    content: public abstract System.Data.Linq.Mapping.MetaParameter ReturnParameter { get; }\n    return:\n      type: System.Data.Linq.Mapping.MetaParameter\n      description: The <xref href=\"System.Data.Linq.Mapping.MetaParameter\"></xref> that corresponds to the return parameter.\n  overload: System.Data.Linq.Mapping.MetaFunction.ReturnParameter*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Data.Linq.Mapping.MetaFunction.#ctor\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: MetaFunction()\n  nameWithType: MetaFunction.MetaFunction()\n  fullName: System.Data.Linq.Mapping.MetaFunction.MetaFunction()\n- uid: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: HasMultipleResults\n  nameWithType: MetaFunction.HasMultipleResults\n  fullName: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.Linq.Mapping.MetaFunction.IsComposable\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: IsComposable\n  nameWithType: MetaFunction.IsComposable\n  fullName: System.Data.Linq.Mapping.MetaFunction.IsComposable\n- uid: System.Data.Linq.Mapping.MetaFunction.MappedName\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: MappedName\n  nameWithType: MetaFunction.MappedName\n  fullName: System.Data.Linq.Mapping.MetaFunction.MappedName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Linq.Mapping.MetaFunction.Method\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: Method\n  nameWithType: MetaFunction.Method\n  fullName: System.Data.Linq.Mapping.MetaFunction.Method\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: true\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Data.Linq.Mapping.MetaFunction.Model\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: Model\n  nameWithType: MetaFunction.Model\n  fullName: System.Data.Linq.Mapping.MetaFunction.Model\n- uid: System.Data.Linq.Mapping.MetaModel\n  parent: System.Data.Linq.Mapping\n  isExternal: false\n  name: MetaModel\n  nameWithType: MetaModel\n  fullName: System.Data.Linq.Mapping.MetaModel\n- uid: System.Data.Linq.Mapping.MetaFunction.Name\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: Name\n  nameWithType: MetaFunction.Name\n  fullName: System.Data.Linq.Mapping.MetaFunction.Name\n- uid: System.Data.Linq.Mapping.MetaFunction.Parameters\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: Parameters\n  nameWithType: MetaFunction.Parameters\n  fullName: System.Data.Linq.Mapping.MetaFunction.Parameters\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaParameter}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<MetaParameter>\n  nameWithType: ReadOnlyCollection<MetaParameter>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaParameter>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Data.Linq.Mapping.MetaParameter>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Linq.Mapping.MetaParameter\n    name: MetaParameter\n    nameWithType: MetaParameter\n    fullName: MetaParameter\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: ResultRowTypes\n  nameWithType: MetaFunction.ResultRowTypes\n  fullName: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaType}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<MetaType>\n  nameWithType: ReadOnlyCollection<MetaType>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaType>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Data.Linq.Mapping.MetaType>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Linq.Mapping.MetaType\n    name: MetaType\n    nameWithType: MetaType\n    fullName: MetaType\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.Mapping.MetaFunction.ReturnParameter\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: ReturnParameter\n  nameWithType: MetaFunction.ReturnParameter\n  fullName: System.Data.Linq.Mapping.MetaFunction.ReturnParameter\n- uid: System.Data.Linq.Mapping.MetaParameter\n  parent: System.Data.Linq.Mapping\n  isExternal: false\n  name: MetaParameter\n  nameWithType: MetaParameter\n  fullName: System.Data.Linq.Mapping.MetaParameter\n- uid: System.Data.Linq.Mapping.MetaFunction.#ctor*\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: MetaFunction\n  nameWithType: MetaFunction.MetaFunction\n- uid: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults*\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: HasMultipleResults\n  nameWithType: MetaFunction.HasMultipleResults\n- uid: System.Data.Linq.Mapping.MetaFunction.IsComposable*\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: IsComposable\n  nameWithType: MetaFunction.IsComposable\n- uid: System.Data.Linq.Mapping.MetaFunction.MappedName*\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: MappedName\n  nameWithType: MetaFunction.MappedName\n- uid: System.Data.Linq.Mapping.MetaFunction.Method*\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: Method\n  nameWithType: MetaFunction.Method\n- uid: System.Data.Linq.Mapping.MetaFunction.Model*\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: Model\n  nameWithType: MetaFunction.Model\n- uid: System.Data.Linq.Mapping.MetaFunction.Name*\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: Name\n  nameWithType: MetaFunction.Name\n- uid: System.Data.Linq.Mapping.MetaFunction.Parameters*\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: Parameters\n  nameWithType: MetaFunction.Parameters\n- uid: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes*\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: ResultRowTypes\n  nameWithType: MetaFunction.ResultRowTypes\n- uid: System.Data.Linq.Mapping.MetaFunction.ReturnParameter*\n  parent: System.Data.Linq.Mapping.MetaFunction\n  isExternal: false\n  name: ReturnParameter\n  nameWithType: MetaFunction.ReturnParameter\n"}