{"nodes":[{"pos":[493,564],"content":"Provides the position of input that is needed to create a manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides the position of input that is needed to create a manipulation.","pos":[0,71]}]},{"pos":[576,779],"content":"Each touch point is an IManipulator object.  For example, if you use two fingers to resize an object, a <xref:System.Windows.Input.TouchDevice>, which implements IManipulator, is created for each finger.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Each touch point is an IManipulator object.  For example, if you use two fingers to resize an object, a <xref:System.Windows.Input.TouchDevice>, which implements IManipulator, is created for each finger.","pos":[0,203],"nodes":[{"content":"Each touch point is an IManipulator object.","pos":[0,43]},{"content":"For example, if you use two fingers to resize an object, a &lt;xref:System.Windows.Input.TouchDevice&gt;, which implements IManipulator, is created for each finger.","pos":[45,203],"source":"  For example, if you use two fingers to resize an object, a <xref:System.Windows.Input.TouchDevice>, which implements IManipulator, is created for each finger."}]}]},{"pos":[1327,1417],"content":"Returns the position of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.IManipulator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns the position of the <xref href=\"System.Windows.Input.IManipulator\"></xref> object."},{"pos":[1621,1757],"content":"The element to use as the frame of reference for calculating the position of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.IManipulator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The element to use as the frame of reference for calculating the position of the <xref href=\"System.Windows.Input.IManipulator\"></xref>."},{"pos":[1822,1904],"content":"The position of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.IManipulator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The position of the <xref href=\"System.Windows.Input.IManipulator\"></xref> object."},{"pos":[2310,2358],"content":"Gets or sets a unique identifier for the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a unique identifier for the object.","pos":[0,48]}]},{"pos":[2370,2718],"content":"The Id property should be unique for each object of a certain type.  For example, if the types `Manipulator1` and `Manipulator2` implement <xref:System.Windows.Input.IManipulator>, all of the objects of type `Maniplulator1` must have unique Id values, but an object of type `Manipulator1` might have the same Id as an object of type `Manipulator2`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Id property should be unique for each object of a certain type.","pos":[0,67]},{"content":"For example, if the types <ph id=\"ph1\">`Manipulator1`</ph> and <ph id=\"ph2\">`Manipulator2`</ph> implement &lt;xref:System.Windows.Input.IManipulator&gt;, all of the objects of type <ph id=\"ph3\">`Maniplulator1`</ph> must have unique Id values, but an object of type <ph id=\"ph4\">`Manipulator1`</ph> might have the same Id as an object of type <ph id=\"ph5\">`Manipulator2`</ph>.","pos":[69,348],"source":"  For example, if the types `Manipulator1` and `Manipulator2` implement <xref:System.Windows.Input.IManipulator>, all of the objects of type `Maniplulator1` must have unique Id values, but an object of type `Manipulator1` might have the same Id as an object of type `Manipulator2`."}]},{"pos":[2821,2856],"content":"A unique identifier for the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique identifier for the object.","pos":[0,35]}]},{"pos":[3385,3419],"content":"Called when the manipulation ends.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called when the manipulation ends.","pos":[0,34]}]},{"pos":[3567,3735],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the manipulation is canceled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the manipulation is canceled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[4169,4264],"content":"Occurs when the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.IManipulator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object changes position.","needQuote":true,"needEscape":true,"source":"Occurs when the <xref href=\"System.Windows.Input.IManipulator\"></xref> object changes position."},{"pos":[4386,4398],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.IManipulator\n  id: IManipulator\n  children:\n  - System.Windows.Input.IManipulator.GetPosition(System.Windows.IInputElement)\n  - System.Windows.Input.IManipulator.Id\n  - System.Windows.Input.IManipulator.ManipulationEnded(System.Boolean)\n  - System.Windows.Input.IManipulator.Updated\n  langs:\n  - csharp\n  name: IManipulator\n  nameWithType: IManipulator\n  fullName: System.Windows.Input.IManipulator\n  type: Interface\n  summary: Provides the position of input that is needed to create a manipulation.\n  remarks: Each touch point is an IManipulator object.  For example, if you use two fingers to resize an object, a <xref:System.Windows.Input.TouchDevice>, which implements IManipulator, is created for each finger.\n  syntax:\n    content: public interface IManipulator\n  implements: []\n  platform:\n  - net462\n- uid: System.Windows.Input.IManipulator.GetPosition(System.Windows.IInputElement)\n  id: GetPosition(System.Windows.IInputElement)\n  parent: System.Windows.Input.IManipulator\n  langs:\n  - csharp\n  name: GetPosition(IInputElement)\n  nameWithType: IManipulator.GetPosition(IInputElement)\n  fullName: System.Windows.Input.IManipulator.GetPosition(IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Returns the position of the <xref href=\"System.Windows.Input.IManipulator\"></xref> object.\n  syntax:\n    content: public System.Windows.Point GetPosition (System.Windows.IInputElement relativeTo);\n    parameters:\n    - id: relativeTo\n      type: System.Windows.IInputElement\n      description: The element to use as the frame of reference for calculating the position of the <xref href=\"System.Windows.Input.IManipulator\"></xref>.\n    return:\n      type: System.Windows.Point\n      description: The position of the <xref href=\"System.Windows.Input.IManipulator\"></xref> object.\n  overload: System.Windows.Input.IManipulator.GetPosition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.IManipulator.Id\n  id: Id\n  parent: System.Windows.Input.IManipulator\n  langs:\n  - csharp\n  name: Id\n  nameWithType: IManipulator.Id\n  fullName: System.Windows.Input.IManipulator.Id\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets a unique identifier for the object.\n  remarks: The Id property should be unique for each object of a certain type.  For example, if the types `Manipulator1` and `Manipulator2` implement <xref:System.Windows.Input.IManipulator>, all of the objects of type `Maniplulator1` must have unique Id values, but an object of type `Manipulator1` might have the same Id as an object of type `Manipulator2`.\n  syntax:\n    content: public int Id { get; }\n    return:\n      type: System.Int32\n      description: A unique identifier for the object.\n  overload: System.Windows.Input.IManipulator.Id*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.IManipulator.ManipulationEnded(System.Boolean)\n  id: ManipulationEnded(System.Boolean)\n  parent: System.Windows.Input.IManipulator\n  langs:\n  - csharp\n  name: ManipulationEnded(Boolean)\n  nameWithType: IManipulator.ManipulationEnded(Boolean)\n  fullName: System.Windows.Input.IManipulator.ManipulationEnded(Boolean)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Called when the manipulation ends.\n  syntax:\n    content: public void ManipulationEnded (bool cancel);\n    parameters:\n    - id: cancel\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the manipulation is canceled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.IManipulator.ManipulationEnded*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.IManipulator.Updated\n  id: Updated\n  parent: System.Windows.Input.IManipulator\n  langs:\n  - csharp\n  name: Updated\n  nameWithType: IManipulator.Updated\n  fullName: System.Windows.Input.IManipulator.Updated\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the <xref href=\"System.Windows.Input.IManipulator\"></xref> object changes position.\n  syntax:\n    content: public event EventHandler Updated;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Input.IManipulator.GetPosition(System.Windows.IInputElement)\n  parent: System.Windows.Input.IManipulator\n  isExternal: false\n  name: GetPosition(IInputElement)\n  nameWithType: IManipulator.GetPosition(IInputElement)\n  fullName: System.Windows.Input.IManipulator.GetPosition(IInputElement)\n- uid: System.Windows.Point\n  parent: System.Windows\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Windows.Point\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.IManipulator.Id\n  parent: System.Windows.Input.IManipulator\n  isExternal: false\n  name: Id\n  nameWithType: IManipulator.Id\n  fullName: System.Windows.Input.IManipulator.Id\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.IManipulator.ManipulationEnded(System.Boolean)\n  parent: System.Windows.Input.IManipulator\n  isExternal: false\n  name: ManipulationEnded(Boolean)\n  nameWithType: IManipulator.ManipulationEnded(Boolean)\n  fullName: System.Windows.Input.IManipulator.ManipulationEnded(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.IManipulator.Updated\n  parent: System.Windows.Input.IManipulator\n  isExternal: false\n  name: Updated\n  nameWithType: IManipulator.Updated\n  fullName: System.Windows.Input.IManipulator.Updated\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Input.IManipulator.GetPosition*\n  parent: System.Windows.Input.IManipulator\n  isExternal: false\n  name: GetPosition\n  nameWithType: IManipulator.GetPosition\n- uid: System.Windows.Input.IManipulator.Id*\n  parent: System.Windows.Input.IManipulator\n  isExternal: false\n  name: Id\n  nameWithType: IManipulator.Id\n- uid: System.Windows.Input.IManipulator.ManipulationEnded*\n  parent: System.Windows.Input.IManipulator\n  isExternal: false\n  name: ManipulationEnded\n  nameWithType: IManipulator.ManipulationEnded\n"}