{"nodes":[{"pos":[1448,1495],"content":"Defines static convenience methods for scoping.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines static convenience methods for scoping.","pos":[0,47]}]},{"pos":[2750,2762],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2822,2834],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2884,2896],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2955,2967],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3926,4026],"content":"Gets a value that indicates whether the specified part contains metadata that has the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the specified part contains metadata that has the specified key.","pos":[0,100]}]},{"pos":[4324,4343],"content":"The part to search.","needQuote":true,"needEscape":true,"nodes":[{"content":"The part to search.","pos":[0,19]}]},{"pos":[4403,4420],"content":"The metadata key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata key.","pos":[0,17]}]},{"pos":[4479,4681],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">part</ph><ept id=\"p2\">&lt;/code&gt;</ept> contains metadata that has the specified key; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>part</code> contains metadata that has the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5544,5630],"content":"Gets a value that indicates whether the specified part exports the specified contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the specified part exports the specified contract.","pos":[0,86]}]},{"pos":[5917,5936],"content":"The part to search.","needQuote":true,"needEscape":true,"nodes":[{"content":"The part to search.","pos":[0,19]}]},{"pos":[6005,6030],"content":"The name of the contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the contract.","pos":[0,25]}]},{"pos":[6089,6277],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">part</ph><ept id=\"p2\">&lt;/code&gt;</ept> exports the specified contract; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>part</code> exports the specified contract; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7364,7429],"content":"Filters the specified catalog with the specified filter function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Filters the specified catalog with the specified filter function.","pos":[0,65]}]},{"pos":[7836,7858],"content":"The catalog to filter.","needQuote":true,"needEscape":true,"nodes":[{"content":"The catalog to filter.","pos":[0,22]}]},{"pos":[8005,8025],"content":"The filter function.","needQuote":true,"needEscape":true,"nodes":[{"content":"The filter function.","pos":[0,20]}]},{"pos":[8127,8180],"content":"A new catalog filtered by using the specified filter.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new catalog filtered by using the specified filter.","pos":[0,53]}]},{"pos":[9022,9091],"content":"Determines whether the specified part imports the specified contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified part imports the specified contract.","pos":[0,69]}]},{"pos":[9378,9397],"content":"The part to search.","needQuote":true,"needEscape":true,"nodes":[{"content":"The part to search.","pos":[0,19]}]},{"pos":[9466,9491],"content":"The name of the contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the contract.","pos":[0,25]}]},{"pos":[9550,9738],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">part</ph><ept id=\"p2\">&lt;/code&gt;</ept> imports the specified contract; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>part</code> imports the specified contract; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10761,10861],"content":"Determines whether the specified part imports the specified contract with the specified cardinality.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified part imports the specified contract with the specified cardinality.","pos":[0,100]}]},{"pos":[11230,11249],"content":"The part to search.","needQuote":true,"needEscape":true,"nodes":[{"content":"The part to search.","pos":[0,19]}]},{"pos":[11318,11343],"content":"The name of the contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the contract.","pos":[0,25]}]},{"pos":[11466,11498],"content":"The cardinality of the contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cardinality of the contract.","pos":[0,32]}]},{"pos":[11557,11777],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">part</ph><ept id=\"p2\">&lt;/code&gt;</ept> imports a contract that has the specified name and cardinality; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>part</code> imports a contract that has the specified name and cardinality; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  id: ScopingExtensions\n  children:\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,``0)\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog@,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)\n  langs:\n  - csharp\n  name: ScopingExtensions\n  nameWithType: ScopingExtensions\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  type: Class\n  summary: Defines static convenience methods for scoping.\n  syntax:\n    content: public static class ScopingExtensions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,``0)\n  id: ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,``0)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: ContainsPartMetadata(ComposablePartDefinition,String,T)\n  nameWithType: ScopingExtensions.ContainsPartMetadata(ComposablePartDefinition,String,T)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata(ComposablePartDefinition,String,T)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  syntax:\n    content: public static bool ContainsPartMetadata<T> (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string key, T value);\n    parameters:\n    - id: part\n      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n      description: To be added.\n    - id: key\n      type: System.String\n      description: To be added.\n    - id: value\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  id: ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: ContainsPartMetadataWithKey(ComposablePartDefinition,String)\n  nameWithType: ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition,String)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition,String)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Gets a value that indicates whether the specified part contains metadata that has the specified key.\n  syntax:\n    content: public static bool ContainsPartMetadataWithKey (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string key);\n    parameters:\n    - id: part\n      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n      description: The part to search.\n    - id: key\n      type: System.String\n      description: The metadata key.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>part</code> contains metadata that has the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  id: Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: Exports(ComposablePartDefinition,String)\n  nameWithType: ScopingExtensions.Exports(ComposablePartDefinition,String)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(ComposablePartDefinition,String)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Gets a value that indicates whether the specified part exports the specified contract.\n  syntax:\n    content: public static bool Exports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName);\n    parameters:\n    - id: part\n      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n      description: The part to search.\n    - id: contractName\n      type: System.String\n      description: The name of the contract.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>part</code> exports the specified contract; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog@,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  id: Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog@,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n  nameWithType: ScopingExtensions.Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Filters the specified catalog with the specified filter function.\n  syntax:\n    content: public static System.ComponentModel.Composition.Hosting.FilteredCatalog Filter (this System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,bool> filter);\n    parameters:\n    - id: catalog\n      type: System.ComponentModel.Composition.Primitives.ComposablePartCatalog\n      description: The catalog to filter.\n    - id: filter\n      type: System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean}\n      description: The filter function.\n    return:\n      type: System.ComponentModel.Composition.Hosting.FilteredCatalog\n      description: A new catalog filtered by using the specified filter.\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  id: Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: Imports(ComposablePartDefinition,String)\n  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition,String)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(ComposablePartDefinition,String)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Determines whether the specified part imports the specified contract.\n  syntax:\n    content: public static bool Imports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName);\n    parameters:\n    - id: part\n      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n      description: The part to search.\n    - id: contractName\n      type: System.String\n      description: The name of the contract.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>part</code> imports the specified contract; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)\n  id: Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: Imports(ComposablePartDefinition,String,ImportCardinality)\n  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition,String,ImportCardinality)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(ComposablePartDefinition,String,ImportCardinality)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Determines whether the specified part imports the specified contract with the specified cardinality.\n  syntax:\n    content: public static bool Imports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName, System.ComponentModel.Composition.Primitives.ImportCardinality importCardinality);\n    parameters:\n    - id: part\n      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n      description: The part to search.\n    - id: contractName\n      type: System.String\n      description: The name of the contract.\n    - id: importCardinality\n      type: System.ComponentModel.Composition.Primitives.ImportCardinality\n      description: The cardinality of the contract.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>part</code> imports a contract that has the specified name and cardinality; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,``0)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: ContainsPartMetadata(ComposablePartDefinition,String,T)\n  nameWithType: ScopingExtensions.ContainsPartMetadata(ComposablePartDefinition,String,T)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata(ComposablePartDefinition,String,T)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n  parent: System.ComponentModel.Composition.Primitives\n  isExternal: false\n  name: ComposablePartDefinition\n  nameWithType: ComposablePartDefinition\n  fullName: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: ContainsPartMetadataWithKey(ComposablePartDefinition,String)\n  nameWithType: ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition,String)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition,String)\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Exports(ComposablePartDefinition,String)\n  nameWithType: ScopingExtensions.Exports(ComposablePartDefinition,String)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(ComposablePartDefinition,String)\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog@,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n  nameWithType: ScopingExtensions.Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  parent: System.ComponentModel.Composition.Hosting\n  isExternal: false\n  name: FilteredCatalog\n  nameWithType: FilteredCatalog\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog\n- uid: System.ComponentModel.Composition.Primitives.ComposablePartCatalog\n  parent: System.ComponentModel.Composition.Primitives\n  isExternal: false\n  name: ComposablePartCatalog\n  nameWithType: ComposablePartCatalog\n  fullName: System.ComponentModel.Composition.Primitives.ComposablePartCatalog\n- uid: System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean}\n  parent: System\n  isExternal: true\n  name: Func<ComposablePartDefinition,Boolean>\n  nameWithType: Func<ComposablePartDefinition,Boolean>\n  fullName: System.Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n    name: ComposablePartDefinition\n    nameWithType: ComposablePartDefinition\n    fullName: ComposablePartDefinition\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Imports(ComposablePartDefinition,String)\n  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition,String)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(ComposablePartDefinition,String)\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Imports(ComposablePartDefinition,String,ImportCardinality)\n  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition,String,ImportCardinality)\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(ComposablePartDefinition,String,ImportCardinality)\n- uid: System.ComponentModel.Composition.Primitives.ImportCardinality\n  parent: System.ComponentModel.Composition.Primitives\n  isExternal: false\n  name: ImportCardinality\n  nameWithType: ImportCardinality\n  fullName: System.ComponentModel.Composition.Primitives.ImportCardinality\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata<T>*\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: ContainsPartMetadata<T>\n  nameWithType: ScopingExtensions.ContainsPartMetadata<T>\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey*\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: ContainsPartMetadataWithKey\n  nameWithType: ScopingExtensions.ContainsPartMetadataWithKey\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports*\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Exports\n  nameWithType: ScopingExtensions.Exports\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter*\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Filter\n  nameWithType: ScopingExtensions.Filter\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports*\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Imports\n  nameWithType: ScopingExtensions.Imports\n"}