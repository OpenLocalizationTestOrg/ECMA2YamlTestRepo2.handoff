{"nodes":[{"pos":[1465,1559],"content":"Represents the XML object model for encoding security objects. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the XML object model for encoding security objects. This class cannot be inherited.","pos":[0,94],"nodes":[{"content":"Represents the XML object model for encoding security objects.","pos":[0,62]},{"content":"This class cannot be inherited.","pos":[63,94]}]}]},{"pos":[1572,3500],"content":"This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model. This documentation assumes a basic knowledge of XML.       The simple XML object model for an element consists of the following parts:      -   The tag is the element name.      -   The attributes are zero or more name/value attribute pairs on the element.      -   The children are zero or more elements nested within `<tag>` and `</tag>`.       It is strongly suggested that attribute based XML representation is used to express security elements and their values. This means properties of an element are expressed as attributes and property values are expressed as attribute values. Avoid nesting text within tags. For any `<tag>text</tag>` representation a representation of type `<tag value=\"text\"/>` is usually available. Using this attribute-based XML representation increases readability and allows easy WMI portability of the resulting XML serialization.       An attribute name must be one character or longer, and cannot be `null`. If element-based value representation is used, elements with a text string that is `null` are represented in the `<tag/>` form; otherwise, text is delimited by the `<tag>` and `</tag>` tokens. Both forms can be combined with attributes, which are shown if present.       The tags, attributes, and text of elements, if present, are always case-sensitive. The XML form contains quotations and escapes where necessary. String values that include characters invalid for use in XML result in an <xref:System.ArgumentException>. These rules apply to all properties and methods.      > [!NOTE] >  For performance reasons, character validity is only checked when the element is encoded into XML text form, and not on every set of a property or method. Static methods allow explicit checking where needed.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.","pos":[0,169]},{"content":"This documentation assumes a basic knowledge of XML.","pos":[170,222]},{"content":"The simple XML object model for an element consists of the following parts:      -   The tag is the element name.","pos":[229,342]},{"content":"-   The attributes are zero or more name/value attribute pairs on the element.","pos":[348,426]},{"content":"-   The children are zero or more elements nested within <ph id=\"ph1\">`&lt;tag&gt;`</ph> and <ph id=\"ph2\">`&lt;/tag&gt;`</ph>.","pos":[432,510],"source":"      -   The children are zero or more elements nested within `<tag>` and `</tag>`."},{"content":"It is strongly suggested that attribute based XML representation is used to express security elements and their values.","pos":[517,636]},{"content":"This means properties of an element are expressed as attributes and property values are expressed as attribute values.","pos":[637,755]},{"content":"Avoid nesting text within tags.","pos":[756,787]},{"content":"For any <ph id=\"ph1\">`&lt;tag&gt;text&lt;/tag&gt;`</ph> representation a representation of type <ph id=\"ph2\">`&lt;tag value=\"text\"/&gt;`</ph> is usually available.","pos":[788,897],"source":" For any `<tag>text</tag>` representation a representation of type `<tag value=\"text\"/>` is usually available."},{"content":"Using this attribute-based XML representation increases readability and allows easy WMI portability of the resulting XML serialization.","pos":[898,1033]},{"content":"An attribute name must be one character or longer, and cannot be <ph id=\"ph1\">`null`</ph>.","pos":[1040,1112],"source":"       An attribute name must be one character or longer, and cannot be `null`."},{"content":"If element-based value representation is used, elements with a text string that is <ph id=\"ph1\">`null`</ph> are represented in the <ph id=\"ph2\">`&lt;tag/&gt;`</ph> form; otherwise, text is delimited by the <ph id=\"ph3\">`&lt;tag&gt;`</ph> and <ph id=\"ph4\">`&lt;/tag&gt;`</ph> tokens.","pos":[1113,1305],"source":" If element-based value representation is used, elements with a text string that is `null` are represented in the `<tag/>` form; otherwise, text is delimited by the `<tag>` and `</tag>` tokens."},{"content":"Both forms can be combined with attributes, which are shown if present.","pos":[1306,1377]},{"content":"The tags, attributes, and text of elements, if present, are always case-sensitive.","pos":[1384,1466]},{"content":"The XML form contains quotations and escapes where necessary.","pos":[1467,1528]},{"content":"String values that include characters invalid for use in XML result in an &lt;xref:System.ArgumentException&gt;.","pos":[1529,1635],"source":" String values that include characters invalid for use in XML result in an <xref:System.ArgumentException>."},{"content":"These rules apply to all properties and methods.","pos":[1636,1684]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  For performance reasons, character validity is only checked when the element is encoded into XML text form, and not on every set of a property or method.","pos":[1690,1856],"source":"      > [!NOTE] >  For performance reasons, character validity is only checked when the element is encoded into XML text form, and not on every set of a property or method."},{"content":"Static methods allow explicit checking where needed.","pos":[1857,1909]}]},{"pos":[4506,4622],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified tag.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.SecurityElement\"></xref> class with the specified tag."},{"pos":[4634,4790],"content":"The `tag` parameter must consist of a valid XML tag name. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`tag`</ph> parameter must consist of a valid XML tag name.","pos":[0,57],"source":"The `tag` parameter must consist of a valid XML tag name."},{"content":"Use &lt;xref:System.Security.SecurityElement.Escape%2A&gt; to remove invalid characters from the string.","pos":[58,156],"source":" Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string."}]},{"pos":[5486,5517],"content":"The tag name of an XML element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The tag name of an XML element.","pos":[0,31]}]},{"pos":[5685,5780],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tag</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>tag</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5875,5924],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tag</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is invalid in XML.","needQuote":true,"needEscape":true,"source":"The <code>tag</code> parameter is invalid in XML."},{"pos":[6391,6516],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified tag and text.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.SecurityElement\"></xref> class with the specified tag and text."},{"pos":[6528,6636],"content":"If the <ph id=\"ph1\">`text`</ph> parameter is <ph id=\"ph2\">`null`</ph> this constructor produces an element identical to the default constructor.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If the `text` parameter is `null` this constructor produces an element identical to the default constructor."},{"pos":[6785,6817],"content":"The tag name of the XML element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The tag name of the XML element.","pos":[0,32]}]},{"pos":[6878,6914],"content":"The text content within the element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text content within the element.","pos":[0,36]}]},{"pos":[7082,7177],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tag</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>tag</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7272,7352],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tag</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">text</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is invalid in XML.","needQuote":true,"needEscape":true,"source":"The <code>tag</code> parameter or <code>text</code> parameter is invalid in XML."},{"pos":[7817,7863],"content":"Adds a name/value attribute to an XML element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a name/value attribute to an XML element.","pos":[0,46]}]},{"pos":[7876,8238],"content":"Names and values in attributes should only contain valid XML attribute characters. XML attribute names must be unique. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.       There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Names and values in attributes should only contain valid XML attribute characters. XML attribute names must be unique. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.       There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.","pos":[0,360],"nodes":[{"content":"Names and values in attributes should only contain valid XML attribute characters.","pos":[0,82]},{"content":"XML attribute names must be unique.","pos":[83,118]},{"content":"Use &lt;xref:System.Security.SecurityElement.Escape%2A&gt; to remove invalid characters from the string.","pos":[119,217],"source":" Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string."},{"content":"There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.","pos":[224,360]}]}]},{"pos":[8929,8955],"content":"The name of the attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the attribute.","pos":[0,26]}]},{"pos":[9017,9044],"content":"The value of the attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the attribute.","pos":[0,27]}]},{"pos":[9219,9347],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter or <code>value</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9443,9634],"content":"The <code>name</code> parameter or <code>value</code> parameter is invalid in XML.       -or-       An attribute with the name specified by the <code>name</code> parameter already exists.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is invalid in XML.","pos":[0,82],"source":"The <code>name</code> parameter or <code>value</code> parameter is invalid in XML."},{"content":"-or-       An attribute with the name specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter already exists.","pos":[89,187],"source":"       -or-       An attribute with the name specified by the <code>name</code> parameter already exists."}]},{"pos":[10094,10134],"content":"Adds a child element to the XML element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a child element to the XML element.","pos":[0,40]}]},{"pos":[10146,10222],"content":"The child element is added following any previously existing child elements.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The child element is added following any previously existing child elements.","pos":[0,76]}]},{"pos":[10933,10958],"content":"The child element to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The child element to add.","pos":[0,25]}]},{"pos":[11129,11226],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">child</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>child</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11627,11672],"content":"Finds an attribute by name in an XML element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Finds an attribute by name in an XML element.","pos":[0,45]}]},{"pos":[11685,11819],"content":"With XML as follows, `Attribute(\"B\")` would return \"456\".      ```   <thetag A=\"123\" B=\"456\" C=\"789\">text</thetag>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With XML as follows, <ph id=\"ph1\">`Attribute(\"B\")`</ph> would return \"456\".","pos":[0,57],"source":"With XML as follows, `Attribute(\"B\")` would return \"456\"."}]},{"pos":[12476,12522],"content":"The name of the attribute for which to search.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the attribute for which to search.","pos":[0,46]}]},{"pos":[12580,12737],"content":"The value associated with the named attribute, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no attribute with <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p2\">&lt;/code&gt;</ept> exists.","needQuote":true,"needEscape":true,"source":"The value associated with the named attribute, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no attribute with <code>name</code> exists."},{"pos":[12909,13005],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13359,13425],"content":"Gets or sets the attributes of an XML element as name/value pairs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the attributes of an XML element as name/value pairs.","pos":[0,66]}]},{"pos":[13438,13862],"content":"Each attribute is stored in the <xref:System.Collections.Hashtable> as a name/value pair.       Names and values in attributes should contain only valid XML attribute characters. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.       There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Each attribute is stored in the <xref:System.Collections.Hashtable> as a name/value pair.       Names and values in attributes should contain only valid XML attribute characters. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.       There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.","pos":[0,420],"nodes":[{"content":"Each attribute is stored in the &lt;xref:System.Collections.Hashtable&gt; as a name/value pair.","pos":[0,89],"source":"Each attribute is stored in the <xref:System.Collections.Hashtable> as a name/value pair."},{"content":"Names and values in attributes should contain only valid XML attribute characters.","pos":[96,178]},{"content":"Use &lt;xref:System.Security.SecurityElement.Escape%2A&gt; to remove invalid characters from the string.","pos":[179,277],"source":" Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string."},{"content":"There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.","pos":[284,420]}]}]},{"pos":[14549,14654],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for the attribute values of the XML element.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Hashtable\"></xref> object for the attribute values of the XML element."},{"pos":[14825,14918],"content":"The name or value of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid.","needQuote":true,"needEscape":true,"source":"The name or value of the <xref href=\"System.Collections.Hashtable\"></xref> object is invalid."},{"pos":[15013,15056],"content":"The name is not a valid XML attribute name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name is not a valid XML attribute name.","pos":[0,43]}]},{"pos":[15400,15460],"content":"Gets or sets the array of child elements of the XML element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the array of child elements of the XML element.","pos":[0,60]}]},{"pos":[15472,15656],"content":"If a <xref:System.Security.SecurityElement> contains both <xref:System.Security.SecurityElement.Text%2A> and Children, <xref:System.Security.SecurityElement.Text%2A> will appear first.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If a &lt;xref:System.Security.SecurityElement&gt; contains both &lt;xref:System.Security.SecurityElement.Text%2A&gt; and Children, &lt;xref:System.Security.SecurityElement.Text%2A&gt; will appear first.","pos":[0,184],"source":"If a <xref:System.Security.SecurityElement> contains both <xref:System.Security.SecurityElement.Text%2A> and Children, <xref:System.Security.SecurityElement.Text%2A> will appear first."}]},{"pos":[16354,16421],"content":"The ordered child elements of the XML element as security elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ordered child elements of the XML element as security elements.","pos":[0,67]}]},{"pos":[16584,16679],"content":"A child of the XML parent node is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A child of the XML parent node is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[17007,17120],"content":"Creates and returns an identical copy of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Creates and returns an identical copy of the current <xref href=\"System.Security.SecurityElement\"></xref> object."},{"pos":[17132,17278],"content":"The copy includes both the <xref:System.Security.SecurityElement.Children%2A> and <xref:System.Security.SecurityElement.Attributes%2A> properties.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The copy includes both the &lt;xref:System.Security.SecurityElement.Children%2A&gt; and &lt;xref:System.Security.SecurityElement.Attributes%2A&gt; properties.","pos":[0,146],"source":"The copy includes both the <xref:System.Security.SecurityElement.Children%2A> and <xref:System.Security.SecurityElement.Attributes%2A> properties."}]},{"pos":[17444,17526],"content":"A copy of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A copy of the current <xref href=\"System.Security.SecurityElement\"></xref> object."},{"pos":[18037,18083],"content":"Compares two XML element objects for equality.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares two XML element objects for equality.","pos":[0,46]}]},{"pos":[18096,18260],"content":"If there are child elements, comparison extends recursively to them.       There is no support for comparing different XML representations of the same characters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If there are child elements, comparison extends recursively to them.       There is no support for comparing different XML representations of the same characters.","pos":[0,162],"nodes":[{"content":"If there are child elements, comparison extends recursively to them.","pos":[0,68]},{"content":"There is no support for comparing different XML representations of the same characters.","pos":[75,162]}]}]},{"pos":[18951,19024],"content":"An XML element object to which to compare the current XML element object.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML element object to which to compare the current XML element object.","pos":[0,73]}]},{"pos":[19083,19390],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the tag, attribute names and values, child elements, and text fields in the current XML element are identical to their counterparts in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the tag, attribute names and values, child elements, and text fields in the current XML element are identical to their counterparts in the <code>other</code> parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19844,19920],"content":"Replaces invalid XML characters in a string with their valid XML equivalent.","needQuote":true,"needEscape":true,"nodes":[{"content":"Replaces invalid XML characters in a string with their valid XML equivalent.","pos":[0,76]}]},{"pos":[21214,21267],"content":"The string within which to escape invalid characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string within which to escape invalid characters.","pos":[0,53]}]},{"pos":[21325,21375],"content":"The input string with invalid characters replaced.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input string with invalid characters replaced.","pos":[0,50]}]},{"pos":[21850,21904],"content":"Creates a security element from an XML-encoded string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a security element from an XML-encoded string.","pos":[0,54]}]},{"pos":[22479,22544],"content":"The XML-encoded string from which to create the security element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML-encoded string from which to create the security element.","pos":[0,65]}]},{"pos":[22620,22696],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> created from the XML.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.SecurityElement\"></xref> created from the XML."},{"pos":[22881,22952],"content":"<ph id=\"ph1\">&lt;code&gt;xml&lt;/code&gt;</ph> contains one or more single quotation mark characters.","needQuote":true,"needEscape":true,"source":"<code>xml</code> contains one or more single quotation mark characters."},{"pos":[23055,23137],"content":"<ph id=\"ph1\">&lt;code&gt;xml&lt;/code&gt;</ph> is<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_ null\" name=\" null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>xml</code> is<xref uid=\"langword_csharp_ null\" name=\" null\" href=\"\"></xref>."},{"pos":[23593,23647],"content":"Determines whether a string is a valid attribute name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a string is a valid attribute name.","pos":[0,54]}]},{"pos":[23659,23743],"content":"This method can be used to test an attribute before adding it to a security element.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method can be used to test an attribute before adding it to a security element.","pos":[0,84]}]},{"pos":[24453,24493],"content":"The attribute name to test for validity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attribute name to test for validity.","pos":[0,40]}]},{"pos":[24552,24753],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is a valid XML attribute name; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>name</code> parameter is a valid XML attribute name; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[25297,25352],"content":"Determines whether a string is a valid attribute value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a string is a valid attribute value.","pos":[0,55]}]},{"pos":[25364,25448],"content":"This method can be used to test an attribute before adding it to a security element.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method can be used to test an attribute before adding it to a security element.","pos":[0,84]}]},{"pos":[26160,26201],"content":"The attribute value to test for validity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The attribute value to test for validity.","pos":[0,41]}]},{"pos":[26260,26463],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is a valid XML attribute value; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>value</code> parameter is a valid XML attribute value; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[26953,26996],"content":"Determines whether a string is a valid tag.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a string is a valid tag.","pos":[0,43]}]},{"pos":[27008,27099],"content":"This can be used to test a <xref:System.Security.SecurityElement.Tag%2A> before setting it.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This can be used to test a &lt;xref:System.Security.SecurityElement.Tag%2A&gt; before setting it.","pos":[0,91],"source":"This can be used to test a <xref:System.Security.SecurityElement.Tag%2A> before setting it."}]},{"pos":[27786,27815],"content":"The tag to test for validity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The tag to test for validity.","pos":[0,29]}]},{"pos":[27874,28063],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">tag</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is a valid XML tag; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>tag</code> parameter is a valid XML tag; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[28547,28614],"content":"Determines whether a string is valid as text within an XML element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a string is valid as text within an XML element.","pos":[0,67]}]},{"pos":[28626,28723],"content":"This method can be used to test <xref:System.Security.SecurityElement.Text%2A> before setting it.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method can be used to test &lt;xref:System.Security.SecurityElement.Text%2A&gt; before setting it.","pos":[0,97],"source":"This method can be used to test <xref:System.Security.SecurityElement.Text%2A> before setting it."}]},{"pos":[29415,29445],"content":"The text to test for validity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text to test for validity.","pos":[0,30]}]},{"pos":[29504,29703],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">text</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is a valid XML text element; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>text</code> parameter is a valid XML text element; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[30228,30258],"content":"Finds a child by its tag name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Finds a child by its tag name.","pos":[0,30]}]},{"pos":[30271,30491],"content":"With XML as follows, `SearchForChildByTag(\"second\")` would return the child element `<second>`.      ```   <thetag A=\"123\" B=\"456\" C=\"789\"> <first>text1</first>          <second>text2</second></thetag>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With XML as follows, <ph id=\"ph1\">`SearchForChildByTag(\"second\")`</ph> would return the child element <ph id=\"ph2\">`&lt;second&gt;`</ph>.","pos":[0,95],"source":"With XML as follows, `SearchForChildByTag(\"second\")` would return the child element `<second>`."}]},{"pos":[31194,31240],"content":"The tag for which to search in child elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"The tag for which to search in child elements.","pos":[0,46]}]},{"pos":[31316,31487],"content":"The first child XML element with the specified tag value, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no child element with <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">tag</ph><ept id=\"p2\">&lt;/code&gt;</ept> exists.","needQuote":true,"needEscape":true,"source":"The first child XML element with the specified tag value, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no child element with <code>tag</code> exists."},{"pos":[31669,31764],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tag</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>tag</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[32210,32271],"content":"Finds a child by its tag name and returns the contained text.","needQuote":true,"needEscape":true,"nodes":[{"content":"Finds a child by its tag name and returns the contained text.","pos":[0,61]}]},{"pos":[32284,32861],"content":"This method is equivalent to the following:       [!code-vb[System.Security.SecurityElement#1](~/add/codesnippet/visualbasic/m-system.security.securi_0_1.vb)]  [!code-cpp[System.Security.SecurityElement#1](~/add/codesnippet/cpp/m-system.security.securi_0_1.cpp)]  [!code-cs[System.Security.SecurityElement#1](~/add/codesnippet/csharp/m-system.security.securi_0_1.cs)]       With XML as follows, `SearchForTextOfTag(\"second\")` would return \"text2\".      ```   <thetag A=\"123\" B=\"456\" C=\"789\"> <first>text1</first>       <second>text2</second></thetag>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is equivalent to the following:       <bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Security.SecurityElement#1<ept id=\"p2\">](~/add/codesnippet/visualbasic/m-system.security.securi_0_1.vb)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cpp</bpt><bpt id=\"p4\">[</bpt>System.Security.SecurityElement#1<ept id=\"p4\">](~/add/codesnippet/cpp/m-system.security.securi_0_1.cpp)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-cs</bpt><bpt id=\"p6\">[</bpt>System.Security.SecurityElement#1<ept id=\"p6\">](~/add/codesnippet/csharp/m-system.security.securi_0_1.cs)</ept><ept id=\"p5\">]</ept>       With XML as follows, <ph id=\"ph1\">`SearchForTextOfTag(\"second\")`</ph> would return \"text2\".","pos":[0,447],"source":"This method is equivalent to the following:       [!code-vb[System.Security.SecurityElement#1](~/add/codesnippet/visualbasic/m-system.security.securi_0_1.vb)]  [!code-cpp[System.Security.SecurityElement#1](~/add/codesnippet/cpp/m-system.security.securi_0_1.cpp)]  [!code-cs[System.Security.SecurityElement#1](~/add/codesnippet/csharp/m-system.security.securi_0_1.cs)]       With XML as follows, `SearchForTextOfTag(\"second\")` would return \"text2\"."}]},{"pos":[33567,33613],"content":"The tag for which to search in child elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"The tag for which to search in child elements.","pos":[0,46]}]},{"pos":[33671,33745],"content":"The text contents of the first child element with the specified tag value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text contents of the first child element with the specified tag value.","pos":[0,74]}]},{"pos":[33926,34007],"content":"<ph id=\"ph1\">&lt;code&gt;tag&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>tag</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[34326,34370],"content":"Gets or sets the tag name of an XML element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the tag name of an XML element.","pos":[0,44]}]},{"pos":[34383,34723],"content":"In XML, the tag appears in the script as appears below:      ```   <tag attributes>text</tag>   ```       If this element has child elements, the children will replace `text`.       Assign only valid XML tag strings to this property. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In XML, the tag appears in the script as appears below:      <ph id=\"ph1\">```   &lt;tag attributes&gt;text&lt;/tag&gt;   ```</ph>       If this element has child elements, the children will replace <ph id=\"ph2\">`text`</ph>.","pos":[0,175],"source":"In XML, the tag appears in the script as appears below:      ```   <tag attributes>text</tag>   ```       If this element has child elements, the children will replace `text`."},{"content":"Assign only valid XML tag strings to this property.","pos":[182,233]},{"content":"Use &lt;xref:System.Security.SecurityElement.Escape%2A&gt; to remove invalid characters from the string.","pos":[234,332],"source":" Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string."}]},{"pos":[35359,35390],"content":"The tag name of an XML element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The tag name of an XML element.","pos":[0,31]}]},{"pos":[35556,35628],"content":"The tag is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The tag is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[35723,35751],"content":"The tag is not valid in XML.","needQuote":true,"needEscape":true,"nodes":[{"content":"The tag is not valid in XML.","pos":[0,28]}]},{"pos":[36075,36119],"content":"Gets or sets the text within an XML element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the text within an XML element.","pos":[0,44]}]},{"pos":[36132,36433],"content":"The text should not contain XML special characters. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.       If a <xref:System.Security.SecurityElement> contains both Text and <xref:System.Security.SecurityElement.Children%2A>, Text will appear first.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text should not contain XML special characters. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.       If a <xref:System.Security.SecurityElement> contains both Text and <xref:System.Security.SecurityElement.Children%2A>, Text will appear first.","pos":[0,299],"nodes":[{"content":"The text should not contain XML special characters.","pos":[0,51]},{"content":"Use &lt;xref:System.Security.SecurityElement.Escape%2A&gt; to remove invalid characters from the string.","pos":[52,150],"source":" Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string."},{"content":"If a &lt;xref:System.Security.SecurityElement&gt; contains both Text and &lt;xref:System.Security.SecurityElement.Children%2A&gt;, Text will appear first.","pos":[157,299],"source":"       If a <xref:System.Security.SecurityElement> contains both Text and <xref:System.Security.SecurityElement.Children%2A>, Text will appear first."}]}]},{"pos":[37067,37111],"content":"The value of the text within an XML element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the text within an XML element.","pos":[0,44]}]},{"pos":[37270,37299],"content":"The text is not valid in XML.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text is not valid in XML.","pos":[0,29]}]},{"pos":[37647,37755],"content":"Produces a string representation of an XML element and its constituent attributes, child elements, and text.","needQuote":true,"needEscape":true,"nodes":[{"content":"Produces a string representation of an XML element and its constituent attributes, child elements, and text.","pos":[0,108]}]},{"pos":[37767,37847],"content":"This method is useful in debugging to see the XML representation of the element.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is useful in debugging to see the XML representation of the element.","pos":[0,80]}]},{"pos":[37983,38016],"content":"The XML element and its contents.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML element and its contents.","pos":[0,33]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.SecurityElement\n  id: SecurityElement\n  children:\n  - System.Security.SecurityElement.#ctor(System.String)\n  - System.Security.SecurityElement.#ctor(System.String,System.String)\n  - System.Security.SecurityElement.AddAttribute(System.String,System.String)\n  - System.Security.SecurityElement.AddChild(System.Security.SecurityElement)\n  - System.Security.SecurityElement.Attribute(System.String)\n  - System.Security.SecurityElement.Attributes\n  - System.Security.SecurityElement.Children\n  - System.Security.SecurityElement.Copy\n  - System.Security.SecurityElement.Equal(System.Security.SecurityElement)\n  - System.Security.SecurityElement.Escape(System.String)\n  - System.Security.SecurityElement.FromString(System.String)\n  - System.Security.SecurityElement.IsValidAttributeName(System.String)\n  - System.Security.SecurityElement.IsValidAttributeValue(System.String)\n  - System.Security.SecurityElement.IsValidTag(System.String)\n  - System.Security.SecurityElement.IsValidText(System.String)\n  - System.Security.SecurityElement.SearchForChildByTag(System.String)\n  - System.Security.SecurityElement.SearchForTextOfTag(System.String)\n  - System.Security.SecurityElement.Tag\n  - System.Security.SecurityElement.Text\n  - System.Security.SecurityElement.ToString\n  langs:\n  - csharp\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n  type: Class\n  summary: Represents the XML object model for encoding security objects. This class cannot be inherited.\n  remarks: \"This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model. This documentation assumes a basic knowledge of XML.  \\n  \\n The simple XML object model for an element consists of the following parts:  \\n  \\n-   The tag is the element name.  \\n  \\n-   The attributes are zero or more name/value attribute pairs on the element.  \\n  \\n-   The children are zero or more elements nested within `<tag>` and `</tag>`.  \\n  \\n It is strongly suggested that attribute based XML representation is used to express security elements and their values. This means properties of an element are expressed as attributes and property values are expressed as attribute values. Avoid nesting text within tags. For any `<tag>text</tag>` representation a representation of type `<tag value=\\\"text\\\"/>` is usually available. Using this attribute-based XML representation increases readability and allows easy WMI portability of the resulting XML serialization.  \\n  \\n An attribute name must be one character or longer, and cannot be `null`. If element-based value representation is used, elements with a text string that is `null` are represented in the `<tag/>` form; otherwise, text is delimited by the `<tag>` and `</tag>` tokens. Both forms can be combined with attributes, which are shown if present.  \\n  \\n The tags, attributes, and text of elements, if present, are always case-sensitive. The XML form contains quotations and escapes where necessary. String values that include characters invalid for use in XML result in an <xref:System.ArgumentException>. These rules apply to all properties and methods.  \\n  \\n> [!NOTE]\\n>  For performance reasons, character validity is only checked when the element is encoded into XML text form, and not on every set of a property or method. Static methods allow explicit checking where needed.\"\n  example:\n  - \"The following example shows the use of members of the SecurityElement class.  \\n  \\n [!code-vb[SecurityElementMembers#1](~/add/codesnippet/visualbasic/t-system.security.securi_1.vb)]\\n [!code-cpp[SecurityElementMembers#1](~/add/codesnippet/cpp/t-system.security.securi_1.cpp)]\\n [!code-cs[SecurityElementMembers#1](~/add/codesnippet/csharp/t-system.security.securi_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class SecurityElement\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: SecurityElement(String)\n  nameWithType: SecurityElement.SecurityElement(String)\n  fullName: System.Security.SecurityElement.SecurityElement(String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Initializes a new instance of the <xref href=\"System.Security.SecurityElement\"></xref> class with the specified tag.\n  remarks: The `tag` parameter must consist of a valid XML tag name. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.\n  example:\n  - \"The following code shows the use of  the SecurityElement constructor to create a new <xref:System.Security.SecurityElement> object.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#2](~/add/codesnippet/visualbasic/m-system.security.securi_8_1.vb)]\\n [!code-cpp[SecurityElementMembers#2](~/add/codesnippet/cpp/m-system.security.securi_8_1.cpp)]\\n [!code-cs[SecurityElementMembers#2](~/add/codesnippet/csharp/m-system.security.securi_8_1.cs)]\"\n  syntax:\n    content: public SecurityElement (string tag);\n    parameters:\n    - id: tag\n      type: System.String\n      description: The tag name of an XML element.\n  overload: System.Security.SecurityElement.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tag</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tag</code> parameter is invalid in XML.\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: SecurityElement(String,String)\n  nameWithType: SecurityElement.SecurityElement(String,String)\n  fullName: System.Security.SecurityElement.SecurityElement(String,String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Initializes a new instance of the <xref href=\"System.Security.SecurityElement\"></xref> class with the specified tag and text.\n  remarks: If the `text` parameter is `null` this constructor produces an element identical to the default constructor.\n  syntax:\n    content: public SecurityElement (string tag, string text);\n    parameters:\n    - id: tag\n      type: System.String\n      description: The tag name of the XML element.\n    - id: text\n      type: System.String\n      description: The text content within the element.\n  overload: System.Security.SecurityElement.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tag</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tag</code> parameter or <code>text</code> parameter is invalid in XML.\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.AddAttribute(System.String,System.String)\n  id: AddAttribute(System.String,System.String)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: AddAttribute(String,String)\n  nameWithType: SecurityElement.AddAttribute(String,String)\n  fullName: System.Security.SecurityElement.AddAttribute(String,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Adds a name/value attribute to an XML element.\n  remarks: \"Names and values in attributes should only contain valid XML attribute characters. XML attribute names must be unique. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.  \\n  \\n There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.\"\n  example:\n  - \"The following code shows the use of the AddAttribute method to add a name/value attribute to an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#4](~/add/codesnippet/visualbasic/m-system.security.securi_5_1.vb)]\\n [!code-cpp[SecurityElementMembers#4](~/add/codesnippet/cpp/m-system.security.securi_5_1.cpp)]\\n [!code-cs[SecurityElementMembers#4](~/add/codesnippet/csharp/m-system.security.securi_5_1.cs)]\"\n  syntax:\n    content: public void AddAttribute (string name, string value);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the attribute.\n    - id: value\n      type: System.String\n      description: The value of the attribute.\n  overload: System.Security.SecurityElement.AddAttribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter or <code>value</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>name</code> parameter or <code>value</code> parameter is invalid in XML.  \\n  \\n -or-  \\n  \\n An attribute with the name specified by the <code>name</code> parameter already exists.\"\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.AddChild(System.Security.SecurityElement)\n  id: AddChild(System.Security.SecurityElement)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: AddChild(SecurityElement)\n  nameWithType: SecurityElement.AddChild(SecurityElement)\n  fullName: System.Security.SecurityElement.AddChild(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Adds a child element to the XML element.\n  remarks: The child element is added following any previously existing child elements.\n  example:\n  - \"The following code shows the use of the AddChild method to add a child element to the XML element.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#5](~/add/codesnippet/visualbasic/m-system.security.securi_11_1.vb)]\\n [!code-cpp[SecurityElementMembers#5](~/add/codesnippet/cpp/m-system.security.securi_11_1.cpp)]\\n [!code-cs[SecurityElementMembers#5](~/add/codesnippet/csharp/m-system.security.securi_11_1.cs)]\"\n  syntax:\n    content: public void AddChild (System.Security.SecurityElement child);\n    parameters:\n    - id: child\n      type: System.Security.SecurityElement\n      description: The child element to add.\n  overload: System.Security.SecurityElement.AddChild*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>child</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.Attribute(System.String)\n  id: Attribute(System.String)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: Attribute(String)\n  nameWithType: SecurityElement.Attribute(String)\n  fullName: System.Security.SecurityElement.Attribute(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Finds an attribute by name in an XML element.\n  remarks: \"With XML as follows, `Attribute(\\\"B\\\")` would return \\\"456\\\".  \\n  \\n```  \\n<thetag A=\\\"123\\\" B=\\\"456\\\" C=\\\"789\\\">text</thetag>  \\n```\"\n  example:\n  - \"The following code shows the use of the Attribute method to find an attribute by name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#13](~/add/codesnippet/visualbasic/m-system.security.securi_9_1.vb)]\\n [!code-cpp[SecurityElementMembers#13](~/add/codesnippet/cpp/m-system.security.securi_9_1.cpp)]\\n [!code-cs[SecurityElementMembers#13](~/add/codesnippet/csharp/m-system.security.securi_9_1.cs)]\"\n  syntax:\n    content: public string Attribute (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the attribute for which to search.\n    return:\n      type: System.String\n      description: The value associated with the named attribute, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no attribute with <code>name</code> exists.\n  overload: System.Security.SecurityElement.Attribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.Attributes\n  id: Attributes\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: SecurityElement.Attributes\n  fullName: System.Security.SecurityElement.Attributes\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets or sets the attributes of an XML element as name/value pairs.\n  remarks: \"Each attribute is stored in the <xref:System.Collections.Hashtable> as a name/value pair.  \\n  \\n Names and values in attributes should contain only valid XML attribute characters. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.  \\n  \\n There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.\"\n  example:\n  - \"The following code shows the use of the Attributes property to get an attribute of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#15](~/add/codesnippet/visualbasic/p-system.security.securi_3_1.vb)]\\n [!code-cpp[SecurityElementMembers#15](~/add/codesnippet/cpp/p-system.security.securi_3_1.cpp)]\\n [!code-cs[SecurityElementMembers#15](~/add/codesnippet/csharp/p-system.security.securi_3_1.cs)]\"\n  syntax:\n    content: public System.Collections.Hashtable Attributes { get; set; }\n    return:\n      type: System.Collections.Hashtable\n      description: The <xref href=\"System.Collections.Hashtable\"></xref> object for the attribute values of the XML element.\n  overload: System.Security.SecurityElement.Attributes*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The name or value of the <xref href=\"System.Collections.Hashtable\"></xref> object is invalid.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The name is not a valid XML attribute name.\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.Children\n  id: Children\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: Children\n  nameWithType: SecurityElement.Children\n  fullName: System.Security.SecurityElement.Children\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets or sets the array of child elements of the XML element.\n  remarks: If a <xref:System.Security.SecurityElement> contains both <xref:System.Security.SecurityElement.Text%2A> and Children, <xref:System.Security.SecurityElement.Text%2A> will appear first.\n  example:\n  - \"The following code shows the use of the Children property to get the array of child elements of the XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#14](~/add/codesnippet/visualbasic/p-system.security.securi_0_1.vb)]\\n [!code-cpp[SecurityElementMembers#14](~/add/codesnippet/cpp/p-system.security.securi_0_1.cpp)]\\n [!code-cs[SecurityElementMembers#14](~/add/codesnippet/csharp/p-system.security.securi_0_1.cs)]\"\n  syntax:\n    content: public System.Collections.ArrayList Children { get; set; }\n    return:\n      type: System.Collections.ArrayList\n      description: The ordered child elements of the XML element as security elements.\n  overload: System.Security.SecurityElement.Children*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A child of the XML parent node is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.Copy\n  id: Copy\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: SecurityElement.Copy()\n  fullName: System.Security.SecurityElement.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Creates and returns an identical copy of the current <xref href=\"System.Security.SecurityElement\"></xref> object.\n  remarks: The copy includes both the <xref:System.Security.SecurityElement.Children%2A> and <xref:System.Security.SecurityElement.Attributes%2A> properties.\n  syntax:\n    content: public System.Security.SecurityElement Copy ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: A copy of the current <xref href=\"System.Security.SecurityElement\"></xref> object.\n  overload: System.Security.SecurityElement.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.Equal(System.Security.SecurityElement)\n  id: Equal(System.Security.SecurityElement)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: Equal(SecurityElement)\n  nameWithType: SecurityElement.Equal(SecurityElement)\n  fullName: System.Security.SecurityElement.Equal(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Compares two XML element objects for equality.\n  remarks: \"If there are child elements, comparison extends recursively to them.  \\n  \\n There is no support for comparing different XML representations of the same characters.\"\n  example:\n  - \"The following code shows the use of the Equal method to compare two XML elements. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#22](~/add/codesnippet/visualbasic/m-system.security.securi_6_1.vb)]\\n [!code-cpp[SecurityElementMembers#22](~/add/codesnippet/cpp/m-system.security.securi_6_1.cpp)]\\n [!code-cs[SecurityElementMembers#22](~/add/codesnippet/csharp/m-system.security.securi_6_1.cs)]\"\n  syntax:\n    content: public bool Equal (System.Security.SecurityElement other);\n    parameters:\n    - id: other\n      type: System.Security.SecurityElement\n      description: An XML element object to which to compare the current XML element object.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the tag, attribute names and values, child elements, and text fields in the current XML element are identical to their counterparts in the <code>other</code> parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.SecurityElement.Equal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.Escape(System.String)\n  id: Escape(System.String)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: Escape(String)\n  nameWithType: SecurityElement.Escape(String)\n  fullName: System.Security.SecurityElement.Escape(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Replaces invalid XML characters in a string with their valid XML equivalent.\n  remarks: \"Use this method to replace invalid characters in a string before using the string in a <xref:System.Security.SecurityElement>. If invalid characters are used in a <xref:System.Security.SecurityElement> without being escaped, an <xref:System.ArgumentException> is thrown.  \\n  \\n The following table shows the invalid XML characters and their escaped equivalents.  \\n  \\n|invalid XML Character|Replaced With|  \\n|---------------------------|-------------------|  \\n|\\\"\\\\<\\\"|\\\"&lt;\\\"|  \\n|\\\">\\\"|\\\"&gt;\\\"|  \\n|\\\"\\\\\\\\\\\"\\\"|\\\"&quot;\\\"|  \\n|\\\"\\\\\\\\'\\\"|\\\"&apos;\\\"|  \\n|\\\"&\\\"|\\\"&amp;\\\"|\"\n  example:\n  - \"The following code shows the use of the Escape method to replace invalid XML characters in a string with their valid XML equivalent. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#19](~/add/codesnippet/visualbasic/m-system.security.securi_7_1.vb)]\\n [!code-cpp[SecurityElementMembers#19](~/add/codesnippet/cpp/m-system.security.securi_7_1.cpp)]\\n [!code-cs[SecurityElementMembers#19](~/add/codesnippet/csharp/m-system.security.securi_7_1.cs)]\"\n  syntax:\n    content: public static string Escape (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: The string within which to escape invalid characters.\n    return:\n      type: System.String\n      description: The input string with invalid characters replaced.\n  overload: System.Security.SecurityElement.Escape*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.FromString(System.String)\n  id: FromString(System.String)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: FromString(String)\n  nameWithType: SecurityElement.FromString(String)\n  fullName: System.Security.SecurityElement.FromString(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Creates a security element from an XML-encoded string.\n  remarks: \"Do not use single quotation marks in the XML string; instead, use escaped double quotation marks. For example, instead of \\\"`<value name='Company'>Microsoft</value>\\\"` use \\\"`<value name=\\\\\\\"Company\\\\\\\">Microsoft</value>\\\"`.  \\n  \\n Using single quotation marks can result in either an exception being thrown or, in some cases, the single quotation marks being treated as text in the string.\"\n  syntax:\n    content: public static System.Security.SecurityElement FromString (string xml);\n    parameters:\n    - id: xml\n      type: System.String\n      description: The XML-encoded string from which to create the security element.\n    return:\n      type: System.Security.SecurityElement\n      description: A <xref href=\"System.Security.SecurityElement\"></xref> created from the XML.\n  overload: System.Security.SecurityElement.FromString*\n  exceptions:\n  - type: System.Security.XmlSyntaxException\n    commentId: T:System.Security.XmlSyntaxException\n    description: <code>xml</code> contains one or more single quotation mark characters.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>xml</code> is<xref uid=\"langword_csharp_ null\" name=\" null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.IsValidAttributeName(System.String)\n  id: IsValidAttributeName(System.String)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: IsValidAttributeName(String)\n  nameWithType: SecurityElement.IsValidAttributeName(String)\n  fullName: System.Security.SecurityElement.IsValidAttributeName(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Determines whether a string is a valid attribute name.\n  remarks: This method can be used to test an attribute before adding it to a security element.\n  example:\n  - \"The following code shows the use of the IsValidAttributeName method to determine whether a string is a valid attribute name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#6](~/add/codesnippet/visualbasic/m-system.security.securi_10_1.vb)]\\n [!code-cpp[SecurityElementMembers#6](~/add/codesnippet/cpp/m-system.security.securi_10_1.cpp)]\\n [!code-cs[SecurityElementMembers#6](~/add/codesnippet/csharp/m-system.security.securi_10_1.cs)]\"\n  syntax:\n    content: public static bool IsValidAttributeName (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The attribute name to test for validity.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>name</code> parameter is a valid XML attribute name; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.SecurityElement.IsValidAttributeName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.IsValidAttributeValue(System.String)\n  id: IsValidAttributeValue(System.String)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: IsValidAttributeValue(String)\n  nameWithType: SecurityElement.IsValidAttributeValue(String)\n  fullName: System.Security.SecurityElement.IsValidAttributeValue(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Determines whether a string is a valid attribute value.\n  remarks: This method can be used to test an attribute before adding it to a security element.\n  example:\n  - \"The following code shows the use of the IsValidAttributeValue method to determine whether a string is a valid attribute value. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#7](~/add/codesnippet/visualbasic/m-system.security.securi_4_1.vb)]\\n [!code-cpp[SecurityElementMembers#7](~/add/codesnippet/cpp/m-system.security.securi_4_1.cpp)]\\n [!code-cs[SecurityElementMembers#7](~/add/codesnippet/csharp/m-system.security.securi_4_1.cs)]\"\n  syntax:\n    content: public static bool IsValidAttributeValue (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The attribute value to test for validity.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>value</code> parameter is a valid XML attribute value; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.SecurityElement.IsValidAttributeValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.IsValidTag(System.String)\n  id: IsValidTag(System.String)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: IsValidTag(String)\n  nameWithType: SecurityElement.IsValidTag(String)\n  fullName: System.Security.SecurityElement.IsValidTag(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Determines whether a string is a valid tag.\n  remarks: This can be used to test a <xref:System.Security.SecurityElement.Tag%2A> before setting it.\n  example:\n  - \"The following code shows the use of the IsValidTag method to determine whether a string is a valid attribute tag. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#10](~/add/codesnippet/visualbasic/m-system.security.securi_3_1.vb)]\\n [!code-cpp[SecurityElementMembers#10](~/add/codesnippet/cpp/m-system.security.securi_3_1.cpp)]\\n [!code-cs[SecurityElementMembers#10](~/add/codesnippet/csharp/m-system.security.securi_3_1.cs)]\"\n  syntax:\n    content: public static bool IsValidTag (string tag);\n    parameters:\n    - id: tag\n      type: System.String\n      description: The tag to test for validity.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>tag</code> parameter is a valid XML tag; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.SecurityElement.IsValidTag*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.IsValidText(System.String)\n  id: IsValidText(System.String)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: IsValidText(String)\n  nameWithType: SecurityElement.IsValidText(String)\n  fullName: System.Security.SecurityElement.IsValidText(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Determines whether a string is valid as text within an XML element.\n  remarks: This method can be used to test <xref:System.Security.SecurityElement.Text%2A> before setting it.\n  example:\n  - \"The following code shows the use of the IsValidText method to determine whether a string is valid as XML element text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#9](~/add/codesnippet/visualbasic/m-system.security.securi_2_1.vb)]\\n [!code-cpp[SecurityElementMembers#9](~/add/codesnippet/cpp/m-system.security.securi_2_1.cpp)]\\n [!code-cs[SecurityElementMembers#9](~/add/codesnippet/csharp/m-system.security.securi_2_1.cs)]\"\n  syntax:\n    content: public static bool IsValidText (string text);\n    parameters:\n    - id: text\n      type: System.String\n      description: The text to test for validity.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>text</code> parameter is a valid XML text element; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.SecurityElement.IsValidText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.SearchForChildByTag(System.String)\n  id: SearchForChildByTag(System.String)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: SearchForChildByTag(String)\n  nameWithType: SecurityElement.SearchForChildByTag(String)\n  fullName: System.Security.SecurityElement.SearchForChildByTag(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Finds a child by its tag name.\n  remarks: \"With XML as follows, `SearchForChildByTag(\\\"second\\\")` would return the child element `<second>`.  \\n  \\n```  \\n<thetag A=\\\"123\\\" B=\\\"456\\\" C=\\\"789\\\"> <first>text1</first>  \\n       <second>text2</second></thetag>  \\n```\"\n  example:\n  - \"The following code shows the use of the SearchForChildByTag method to find a child by its tag name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#17](~/add/codesnippet/visualbasic/m-system.security.securi_1_1.vb)]\\n [!code-cpp[SecurityElementMembers#17](~/add/codesnippet/cpp/m-system.security.securi_1_1.cpp)]\\n [!code-cs[SecurityElementMembers#17](~/add/codesnippet/csharp/m-system.security.securi_1_1.cs)]\"\n  syntax:\n    content: public System.Security.SecurityElement SearchForChildByTag (string tag);\n    parameters:\n    - id: tag\n      type: System.String\n      description: The tag for which to search in child elements.\n    return:\n      type: System.Security.SecurityElement\n      description: The first child XML element with the specified tag value, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no child element with <code>tag</code> exists.\n  overload: System.Security.SecurityElement.SearchForChildByTag*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tag</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.SearchForTextOfTag(System.String)\n  id: SearchForTextOfTag(System.String)\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: SearchForTextOfTag(String)\n  nameWithType: SecurityElement.SearchForTextOfTag(String)\n  fullName: System.Security.SecurityElement.SearchForTextOfTag(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Finds a child by its tag name and returns the contained text.\n  remarks: \"This method is equivalent to the following:  \\n  \\n [!code-vb[System.Security.SecurityElement#1](~/add/codesnippet/visualbasic/m-system.security.securi_0_1.vb)]\\n [!code-cpp[System.Security.SecurityElement#1](~/add/codesnippet/cpp/m-system.security.securi_0_1.cpp)]\\n [!code-cs[System.Security.SecurityElement#1](~/add/codesnippet/csharp/m-system.security.securi_0_1.cs)]  \\n  \\n With XML as follows, `SearchForTextOfTag(\\\"second\\\")` would return \\\"text2\\\".  \\n  \\n```  \\n<thetag A=\\\"123\\\" B=\\\"456\\\" C=\\\"789\\\"> <first>text1</first>  \\n    <second>text2</second></thetag>  \\n```\"\n  example:\n  - \"The following code shows the use of the SearchForTextOfTag method to find a child by its tag name and return the contained text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#18](~/add/codesnippet/visualbasic/m-system.security.securi_0_2.vb)]\\n [!code-cpp[SecurityElementMembers#18](~/add/codesnippet/cpp/m-system.security.securi_0_2.cpp)]\\n [!code-cs[SecurityElementMembers#18](~/add/codesnippet/csharp/m-system.security.securi_0_2.cs)]\"\n  syntax:\n    content: public string SearchForTextOfTag (string tag);\n    parameters:\n    - id: tag\n      type: System.String\n      description: The tag for which to search in child elements.\n    return:\n      type: System.String\n      description: The text contents of the first child element with the specified tag value.\n  overload: System.Security.SecurityElement.SearchForTextOfTag*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>tag</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.Tag\n  id: Tag\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: Tag\n  nameWithType: SecurityElement.Tag\n  fullName: System.Security.SecurityElement.Tag\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets or sets the tag name of an XML element.\n  remarks: \"In XML, the tag appears in the script as appears below:  \\n  \\n```  \\n<tag attributes>text</tag>  \\n```  \\n  \\n If this element has child elements, the children will replace `text`.  \\n  \\n Assign only valid XML tag strings to this property. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.\"\n  example:\n  - \"The following code shows the use of the Tag property to get the tag name of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#11](~/add/codesnippet/visualbasic/p-system.security.securi_1_1.vb)]\\n [!code-cpp[SecurityElementMembers#11](~/add/codesnippet/cpp/p-system.security.securi_1_1.cpp)]\\n [!code-cs[SecurityElementMembers#11](~/add/codesnippet/csharp/p-system.security.securi_1_1.cs)]\"\n  syntax:\n    content: public string Tag { get; set; }\n    return:\n      type: System.String\n      description: The tag name of an XML element.\n  overload: System.Security.SecurityElement.Tag*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The tag is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The tag is not valid in XML.\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.Text\n  id: Text\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: Text\n  nameWithType: SecurityElement.Text\n  fullName: System.Security.SecurityElement.Text\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Gets or sets the text within an XML element.\n  remarks: \"The text should not contain XML special characters. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.  \\n  \\n If a <xref:System.Security.SecurityElement> contains both Text and <xref:System.Security.SecurityElement.Children%2A>, Text will appear first.\"\n  example:\n  - \"The following code shows the use of the Text property to get the text of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \\n  \\n [!code-vb[SecurityElementMembers#12](~/add/codesnippet/visualbasic/p-system.security.securi_2_1.vb)]\\n [!code-cpp[SecurityElementMembers#12](~/add/codesnippet/cpp/p-system.security.securi_2_1.cpp)]\\n [!code-cs[SecurityElementMembers#12](~/add/codesnippet/csharp/p-system.security.securi_2_1.cs)]\"\n  syntax:\n    content: public string Text { get; set; }\n    return:\n      type: System.String\n      description: The value of the text within an XML element.\n  overload: System.Security.SecurityElement.Text*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The text is not valid in XML.\n  platform:\n  - net462\n- uid: System.Security.SecurityElement.ToString\n  id: ToString\n  parent: System.Security.SecurityElement\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: SecurityElement.ToString()\n  fullName: System.Security.SecurityElement.ToString()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  summary: Produces a string representation of an XML element and its constituent attributes, child elements, and text.\n  remarks: This method is useful in debugging to see the XML representation of the element.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The XML element and its contents.\n  overload: System.Security.SecurityElement.ToString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.Security.XmlSyntaxException\n  parent: System.Security\n  isExternal: false\n  name: XmlSyntaxException\n  nameWithType: XmlSyntaxException\n  fullName: System.Security.XmlSyntaxException\n- uid: System.Security.SecurityElement.#ctor(System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: SecurityElement(String)\n  nameWithType: SecurityElement.SecurityElement(String)\n  fullName: System.Security.SecurityElement.SecurityElement(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.SecurityElement.#ctor(System.String,System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: SecurityElement(String,String)\n  nameWithType: SecurityElement.SecurityElement(String,String)\n  fullName: System.Security.SecurityElement.SecurityElement(String,String)\n- uid: System.Security.SecurityElement.AddAttribute(System.String,System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: AddAttribute(String,String)\n  nameWithType: SecurityElement.AddAttribute(String,String)\n  fullName: System.Security.SecurityElement.AddAttribute(String,String)\n- uid: System.Security.SecurityElement.AddChild(System.Security.SecurityElement)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: AddChild(SecurityElement)\n  nameWithType: SecurityElement.AddChild(SecurityElement)\n  fullName: System.Security.SecurityElement.AddChild(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.SecurityElement.Attribute(System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Attribute(String)\n  nameWithType: SecurityElement.Attribute(String)\n  fullName: System.Security.SecurityElement.Attribute(String)\n- uid: System.Security.SecurityElement.Attributes\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Attributes\n  nameWithType: SecurityElement.Attributes\n  fullName: System.Security.SecurityElement.Attributes\n- uid: System.Collections.Hashtable\n  parent: System.Collections\n  isExternal: false\n  name: Hashtable\n  nameWithType: Hashtable\n  fullName: System.Collections.Hashtable\n- uid: System.Security.SecurityElement.Children\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Children\n  nameWithType: SecurityElement.Children\n  fullName: System.Security.SecurityElement.Children\n- uid: System.Collections.ArrayList\n  parent: System.Collections\n  isExternal: false\n  name: ArrayList\n  nameWithType: ArrayList\n  fullName: System.Collections.ArrayList\n- uid: System.Security.SecurityElement.Copy\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Copy()\n  nameWithType: SecurityElement.Copy()\n  fullName: System.Security.SecurityElement.Copy()\n- uid: System.Security.SecurityElement.Equal(System.Security.SecurityElement)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Equal(SecurityElement)\n  nameWithType: SecurityElement.Equal(SecurityElement)\n  fullName: System.Security.SecurityElement.Equal(SecurityElement)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.SecurityElement.Escape(System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Escape(String)\n  nameWithType: SecurityElement.Escape(String)\n  fullName: System.Security.SecurityElement.Escape(String)\n- uid: System.Security.SecurityElement.FromString(System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: FromString(String)\n  nameWithType: SecurityElement.FromString(String)\n  fullName: System.Security.SecurityElement.FromString(String)\n- uid: System.Security.SecurityElement.IsValidAttributeName(System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: IsValidAttributeName(String)\n  nameWithType: SecurityElement.IsValidAttributeName(String)\n  fullName: System.Security.SecurityElement.IsValidAttributeName(String)\n- uid: System.Security.SecurityElement.IsValidAttributeValue(System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: IsValidAttributeValue(String)\n  nameWithType: SecurityElement.IsValidAttributeValue(String)\n  fullName: System.Security.SecurityElement.IsValidAttributeValue(String)\n- uid: System.Security.SecurityElement.IsValidTag(System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: IsValidTag(String)\n  nameWithType: SecurityElement.IsValidTag(String)\n  fullName: System.Security.SecurityElement.IsValidTag(String)\n- uid: System.Security.SecurityElement.IsValidText(System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: IsValidText(String)\n  nameWithType: SecurityElement.IsValidText(String)\n  fullName: System.Security.SecurityElement.IsValidText(String)\n- uid: System.Security.SecurityElement.SearchForChildByTag(System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: SearchForChildByTag(String)\n  nameWithType: SecurityElement.SearchForChildByTag(String)\n  fullName: System.Security.SecurityElement.SearchForChildByTag(String)\n- uid: System.Security.SecurityElement.SearchForTextOfTag(System.String)\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: SearchForTextOfTag(String)\n  nameWithType: SecurityElement.SearchForTextOfTag(String)\n  fullName: System.Security.SecurityElement.SearchForTextOfTag(String)\n- uid: System.Security.SecurityElement.Tag\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Tag\n  nameWithType: SecurityElement.Tag\n  fullName: System.Security.SecurityElement.Tag\n- uid: System.Security.SecurityElement.Text\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Text\n  nameWithType: SecurityElement.Text\n  fullName: System.Security.SecurityElement.Text\n- uid: System.Security.SecurityElement.ToString\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: ToString()\n  nameWithType: SecurityElement.ToString()\n  fullName: System.Security.SecurityElement.ToString()\n- uid: System.Security.SecurityElement.#ctor*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement.SecurityElement\n- uid: System.Security.SecurityElement.AddAttribute*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: AddAttribute\n  nameWithType: SecurityElement.AddAttribute\n- uid: System.Security.SecurityElement.AddChild*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: AddChild\n  nameWithType: SecurityElement.AddChild\n- uid: System.Security.SecurityElement.Attribute*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Attribute\n  nameWithType: SecurityElement.Attribute\n- uid: System.Security.SecurityElement.Attributes*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Attributes\n  nameWithType: SecurityElement.Attributes\n- uid: System.Security.SecurityElement.Children*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Children\n  nameWithType: SecurityElement.Children\n- uid: System.Security.SecurityElement.Copy*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Copy\n  nameWithType: SecurityElement.Copy\n- uid: System.Security.SecurityElement.Equal*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Equal\n  nameWithType: SecurityElement.Equal\n- uid: System.Security.SecurityElement.Escape*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Escape\n  nameWithType: SecurityElement.Escape\n- uid: System.Security.SecurityElement.FromString*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: FromString\n  nameWithType: SecurityElement.FromString\n- uid: System.Security.SecurityElement.IsValidAttributeName*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: IsValidAttributeName\n  nameWithType: SecurityElement.IsValidAttributeName\n- uid: System.Security.SecurityElement.IsValidAttributeValue*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: IsValidAttributeValue\n  nameWithType: SecurityElement.IsValidAttributeValue\n- uid: System.Security.SecurityElement.IsValidTag*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: IsValidTag\n  nameWithType: SecurityElement.IsValidTag\n- uid: System.Security.SecurityElement.IsValidText*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: IsValidText\n  nameWithType: SecurityElement.IsValidText\n- uid: System.Security.SecurityElement.SearchForChildByTag*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: SearchForChildByTag\n  nameWithType: SecurityElement.SearchForChildByTag\n- uid: System.Security.SecurityElement.SearchForTextOfTag*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: SearchForTextOfTag\n  nameWithType: SecurityElement.SearchForTextOfTag\n- uid: System.Security.SecurityElement.Tag*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Tag\n  nameWithType: SecurityElement.Tag\n- uid: System.Security.SecurityElement.Text*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: Text\n  nameWithType: SecurityElement.Text\n- uid: System.Security.SecurityElement.ToString*\n  parent: System.Security.SecurityElement\n  isExternal: false\n  name: ToString\n  nameWithType: SecurityElement.ToString\n"}